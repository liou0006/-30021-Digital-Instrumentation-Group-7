
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08005688  08005688  00006688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a5c  08005a5c  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a64  08005a64  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08005a6c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001c8  08005c34  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08005c34  0000743c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000956a  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afc  00000000  00000000  00010762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00012260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000905  00000000  00000000  00012e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011793  00000000  00000000  0001379d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c769  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cc33  00000000  00000000  00031699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008e2cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e8  00000000  00000000  0008e310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  000928f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800566c 	.word	0x0800566c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	0800566c 	.word	0x0800566c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <ADC_Init+0x80>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000bcc:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
  ADC_InitStruct->ADC_Resolution|                 
 8000bd2:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000bd8:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691b      	ldr	r3, [r3, #16]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000bde:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	695b      	ldr	r3, [r3, #20]
  ADC_InitStruct->ADC_DataAlign|                 
 8000be4:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_AutoInjMode;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	699b      	ldr	r3, [r3, #24]
  ADC_InitStruct->ADC_OverrunMode|        
 8000bea:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f023 030f 	bic.w	r3, r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	7f1b      	ldrb	r3, [r3, #28]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	631a      	str	r2, [r3, #48]	@ 0x30
   
}  
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	fdffc007 	.word	0xfdffc007

08000c2c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	771a      	strb	r2, [r3, #28]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
  }
}
 8000c8e:	e005      	b.n	8000c9c <ADC_Cmd+0x2c>
    ADCx->CR |= ADC_CR_ADDIS;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f043 0202 	orr.w	r2, r3, #2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]

}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da02      	bge.n	8000d10 <ADC_GetCalibrationStatus+0x1a>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e001      	b.n	8000d14 <ADC_GetCalibrationStatus+0x1e>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <ADC_GetDisableCmdStatus+0x1e>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e001      	b.n	8000d44 <ADC_GetDisableCmdStatus+0x22>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
  }
}
 8000d7c:	e005      	b.n	8000d8a <ADC_VoltageRegulatorCmd+0x38>
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000daa:	d003      	beq.n	8000db4 <ADC_VrefintCmd+0x1c>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a15      	ldr	r2, [pc, #84]	@ (8000e04 <ADC_VrefintCmd+0x6c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d110      	bne.n	8000dd6 <ADC_VrefintCmd+0x3e>
  {
    if (NewState != DISABLE)
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d006      	beq.n	8000dc8 <ADC_VrefintCmd+0x30>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <ADC_VrefintCmd+0x70>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <ADC_VrefintCmd+0x70>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dc4:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000dc6:	e017      	b.n	8000df8 <ADC_VrefintCmd+0x60>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <ADC_VrefintCmd+0x70>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000e08 <ADC_VrefintCmd+0x70>)
 8000dce:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000dd2:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000dd4:	e010      	b.n	8000df8 <ADC_VrefintCmd+0x60>
    }
  }
  else
  {
    if (NewState != DISABLE)
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <ADC_VrefintCmd+0x52>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <ADC_VrefintCmd+0x74>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <ADC_VrefintCmd+0x74>)
 8000de2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000de6:	6093      	str	r3, [r2, #8]
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
    }
  }
}
 8000de8:	e006      	b.n	8000df8 <ADC_VrefintCmd+0x60>
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <ADC_VrefintCmd+0x74>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <ADC_VrefintCmd+0x74>)
 8000df0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000df4:	6093      	str	r3, [r2, #8]
}
 8000df6:	e7ff      	b.n	8000df8 <ADC_VrefintCmd+0x60>
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	50000100 	.word	0x50000100
 8000e08:	50000300 	.word	0x50000300
 8000e0c:	50000700 	.word	0x50000700

08000e10 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	70fb      	strb	r3, [r7, #3]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70bb      	strb	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000e32:	78bb      	ldrb	r3, [r7, #2]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d821      	bhi.n	8000e7c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000e3e:	78ba      	ldrb	r2, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	461a      	mov	r2, r3
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000e5a:	78f9      	ldrb	r1, [r7, #3]
 8000e5c:	78ba      	ldrb	r2, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e7a:	e074      	b.n	8000f66 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000e7c:	78bb      	ldrb	r3, [r7, #2]
 8000e7e:	2b09      	cmp	r3, #9
 8000e80:	d823      	bhi.n	8000eca <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e86:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	1f5a      	subs	r2, r3, #5
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	461a      	mov	r2, r3
 8000e96:	231f      	movs	r3, #31
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000ea6:	78f9      	ldrb	r1, [r7, #3]
 8000ea8:	78bb      	ldrb	r3, [r7, #2]
 8000eaa:	1f5a      	subs	r2, r3, #5
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ec8:	e04d      	b.n	8000f66 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	2b0e      	cmp	r3, #14
 8000ece:	d825      	bhi.n	8000f1c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ed4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000ed6:	78bb      	ldrb	r3, [r7, #2]
 8000ed8:	f1a3 020a 	sub.w	r2, r3, #10
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	231f      	movs	r3, #31
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000ef6:	78f9      	ldrb	r1, [r7, #3]
 8000ef8:	78bb      	ldrb	r3, [r7, #2]
 8000efa:	f1a3 020a 	sub.w	r2, r3, #10
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f1a:	e024      	b.n	8000f66 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f20:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000f22:	78bb      	ldrb	r3, [r7, #2]
 8000f24:	f1a3 020f 	sub.w	r2, r3, #15
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	461a      	mov	r2, r3
 8000f32:	231f      	movs	r3, #31
 8000f34:	4093      	lsls	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000f42:	78f9      	ldrb	r1, [r7, #3]
 8000f44:	78bb      	ldrb	r3, [r7, #2]
 8000f46:	f1a3 020f 	sub.w	r2, r3, #15
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d923      	bls.n	8000fb4 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	f1a3 020a 	sub.w	r2, r3, #10
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2207      	movs	r2, #7
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6999      	ldr	r1, [r3, #24]
 8000f98:	7878      	ldrb	r0, [r7, #1]
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	f1a3 020a 	sub.w	r2, r3, #10
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	fa00 f303 	lsl.w	r3, r0, r3
 8000faa:	ea41 0203 	orr.w	r2, r1, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000fb2:	e01f      	b.n	8000ff4 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2238      	movs	r2, #56	@ 0x38
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6959      	ldr	r1, [r3, #20]
 8000fde:	7878      	ldrb	r0, [r7, #1]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	fa00 f303 	lsl.w	r3, r0, r3
 8000fec:	ea41 0203 	orr.w	r2, r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	615a      	str	r2, [r3, #20]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f043 0204 	orr.w	r2, r3, #4
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001084:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	f002 021f 	and.w	r2, r2, #31
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	015a      	lsls	r2, r3, #5
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <EXTI_GetITStatus+0x6c>)
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	f002 021f 	and.w	r2, r2, #31
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <EXTI_GetITStatus+0x5a>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e001      	b.n	80010ca <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40010414 	.word	0x40010414

080010dc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	2201      	movs	r2, #1
 80010ec:	fa02 f103 	lsl.w	r1, r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	015a      	lsls	r2, r3, #5
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <EXTI_ClearITPendingBit+0x30>)
 80010f8:	4413      	add	r3, r2
 80010fa:	460a      	mov	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40010414 	.word	0x40010414

08001110 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e07c      	b.n	8001226 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800112c:	2201      	movs	r2, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d16b      	bne.n	8001220 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <GPIO_Init+0x48>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d134      	bne.n	80011c2 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2103      	movs	r1, #3
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	795b      	ldrb	r3, [r3, #5]
 8001176:	4619      	mov	r1, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	889b      	ldrh	r3, [r3, #4]
 800118a:	b29a      	uxth	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4619      	mov	r1, r3
 8001192:	2301      	movs	r3, #1
 8001194:	408b      	lsls	r3, r1
 8001196:	b29b      	uxth	r3, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	4013      	ands	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	799b      	ldrb	r3, [r3, #6]
 80011ae:	4619      	mov	r1, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2103      	movs	r1, #3
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2103      	movs	r1, #3
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	79db      	ldrb	r3, [r3, #7]
 8001210:	4619      	mov	r1, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	f67f af7f 	bls.w	800112c <GPIO_Init+0x1c>
    }
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2202      	movs	r2, #2
 8001256:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	71da      	strb	r2, [r3, #7]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800128c:	e002      	b.n	8001294 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	887a      	ldrh	r2, [r7, #2]
 8001292:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80012b8:	787a      	ldrb	r2, [r7, #1]
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	210f      	movs	r1, #15
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	8879      	ldrh	r1, [r7, #2]
 80012ea:	08c9      	lsrs	r1, r1, #3
 80012ec:	b289      	uxth	r1, r1
 80012ee:	4608      	mov	r0, r1
 80012f0:	ea02 0103 	and.w	r1, r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f100 0208 	add.w	r2, r0, #8
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	b29b      	uxth	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	@ 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800135c:	4b8b      	ldr	r3, [pc, #556]	@ (800158c <RCC_GetClocksFreq+0x258>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	2b08      	cmp	r3, #8
 800136a:	d011      	beq.n	8001390 <RCC_GetClocksFreq+0x5c>
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d837      	bhi.n	80013e2 <RCC_GetClocksFreq+0xae>
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <RCC_GetClocksFreq+0x4c>
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d004      	beq.n	8001388 <RCC_GetClocksFreq+0x54>
 800137e:	e030      	b.n	80013e2 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a83      	ldr	r2, [pc, #524]	@ (8001590 <RCC_GetClocksFreq+0x25c>)
 8001384:	601a      	str	r2, [r3, #0]
      break;
 8001386:	e030      	b.n	80013ea <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a81      	ldr	r2, [pc, #516]	@ (8001590 <RCC_GetClocksFreq+0x25c>)
 800138c:	601a      	str	r2, [r3, #0]
      break;
 800138e:	e02c      	b.n	80013ea <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001390:	4b7e      	ldr	r3, [pc, #504]	@ (800158c <RCC_GetClocksFreq+0x258>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001398:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800139a:	4b7c      	ldr	r3, [pc, #496]	@ (800158c <RCC_GetClocksFreq+0x258>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a2:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	3302      	adds	r3, #2
 80013aa:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4a77      	ldr	r2, [pc, #476]	@ (8001594 <RCC_GetClocksFreq+0x260>)
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	e00d      	b.n	80013da <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80013be:	4b73      	ldr	r3, [pc, #460]	@ (800158c <RCC_GetClocksFreq+0x258>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80013ca:	4a71      	ldr	r2, [pc, #452]	@ (8001590 <RCC_GetClocksFreq+0x25c>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013de:	601a      	str	r2, [r3, #0]
      break;
 80013e0:	e003      	b.n	80013ea <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001590 <RCC_GetClocksFreq+0x25c>)
 80013e6:	601a      	str	r2, [r3, #0]
      break;
 80013e8:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013ea:	4b68      	ldr	r3, [pc, #416]	@ (800158c <RCC_GetClocksFreq+0x258>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80013fa:	4a67      	ldr	r2, [pc, #412]	@ (8001598 <RCC_GetClocksFreq+0x264>)
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	40da      	lsrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001412:	4b5e      	ldr	r3, [pc, #376]	@ (800158c <RCC_GetClocksFreq+0x258>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800141a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001422:	4a5d      	ldr	r2, [pc, #372]	@ (8001598 <RCC_GetClocksFreq+0x264>)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	40da      	lsrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800143a:	4b54      	ldr	r3, [pc, #336]	@ (800158c <RCC_GetClocksFreq+0x258>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001442:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800144a:	4a53      	ldr	r2, [pc, #332]	@ (8001598 <RCC_GetClocksFreq+0x264>)
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	40da      	lsrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8001462:	4b4a      	ldr	r3, [pc, #296]	@ (800158c <RCC_GetClocksFreq+0x258>)
 8001464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001466:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800146a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001472:	4a4a      	ldr	r2, [pc, #296]	@ (800159c <RCC_GetClocksFreq+0x268>)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800147a:	b29b      	uxth	r3, r3
 800147c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	e003      	b.n	800149e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800149e:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <RCC_GetClocksFreq+0x258>)
 80014a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a2:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80014a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	0a5b      	lsrs	r3, r3, #9
 80014ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80014ae:	4a3b      	ldr	r2, [pc, #236]	@ (800159c <RCC_GetClocksFreq+0x268>)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80014c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	e003      	b.n	80014da <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <RCC_GetClocksFreq+0x258>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a29      	ldr	r2, [pc, #164]	@ (8001590 <RCC_GetClocksFreq+0x25c>)
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	e003      	b.n	80014f6 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80014f6:	4b25      	ldr	r3, [pc, #148]	@ (800158c <RCC_GetClocksFreq+0x258>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d003      	beq.n	800150a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <RCC_GetClocksFreq+0x25c>)
 8001506:	61da      	str	r2, [r3, #28]
 8001508:	e003      	b.n	8001512 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <RCC_GetClocksFreq+0x258>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800151e:	d10d      	bne.n	800153c <RCC_GetClocksFreq+0x208>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001526:	429a      	cmp	r2, r3
 8001528:	d108      	bne.n	800153c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	d104      	bne.n	800153c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	005a      	lsls	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	621a      	str	r2, [r3, #32]
 800153a:	e003      	b.n	8001544 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <RCC_GetClocksFreq+0x258>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800154c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001550:	d10d      	bne.n	800156e <RCC_GetClocksFreq+0x23a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001558:	429a      	cmp	r2, r3
 800155a:	d108      	bne.n	800156e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d104      	bne.n	800156e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	005a      	lsls	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	625a      	str	r2, [r3, #36]	@ 0x24
 800156c:	e003      	b.n	8001576 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <RCC_GetClocksFreq+0x258>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28
 800158a:	e028      	b.n	80015de <RCC_GetClocksFreq+0x2aa>
 800158c:	40021000 	.word	0x40021000
 8001590:	007a1200 	.word	0x007a1200
 8001594:	003d0900 	.word	0x003d0900
 8001598:	080056bc 	.word	0x080056bc
 800159c:	080056cc 	.word	0x080056cc
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80015a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d104      	bne.n	80015b6 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80015b4:	e013      	b.n	80015de <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80015b6:	4b67      	ldr	r3, [pc, #412]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d104      	bne.n	80015cc <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ca:	e008      	b.n	80015de <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80015cc:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d102      	bne.n	80015de <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a5f      	ldr	r2, [pc, #380]	@ (8001758 <RCC_GetClocksFreq+0x424>)
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015f2:	e021      	b.n	8001638 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80015f4:	4b57      	ldr	r3, [pc, #348]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001600:	d104      	bne.n	800160c <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
 800160a:	e015      	b.n	8001638 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800160c:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001618:	d104      	bne.n	8001624 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001622:	e009      	b.n	8001638 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001624:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800162c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001630:	d102      	bne.n	8001638 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a48      	ldr	r2, [pc, #288]	@ (8001758 <RCC_GetClocksFreq+0x424>)
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001638:	4b46      	ldr	r3, [pc, #280]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d104      	bne.n	800164e <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
 800164c:	e021      	b.n	8001692 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800164e:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800165a:	d104      	bne.n	8001666 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
 8001664:	e015      	b.n	8001692 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800166e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001672:	d104      	bne.n	800167e <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800167a:	631a      	str	r2, [r3, #48]	@ 0x30
 800167c:	e009      	b.n	8001692 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800167e:	4b35      	ldr	r3, [pc, #212]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001686:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800168a:	d102      	bne.n	8001692 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <RCC_GetClocksFreq+0x424>)
 8001690:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a6:	e021      	b.n	80016ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80016b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016b4:	d104      	bne.n	80016c0 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80016be:	e015      	b.n	80016ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80016c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80016cc:	d104      	bne.n	80016d8 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d6:	e009      	b.n	80016ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80016e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80016e4:	d102      	bne.n	80016ec <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <RCC_GetClocksFreq+0x424>)
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001700:	e021      	b.n	8001746 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800170a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800170e:	d104      	bne.n	800171a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001718:	e015      	b.n	8001746 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001722:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001726:	d104      	bne.n	8001732 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800172e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001730:	e009      	b.n	8001746 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <RCC_GetClocksFreq+0x420>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800173a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800173e:	d102      	bne.n	8001746 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <RCC_GetClocksFreq+0x424>)
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001746:	bf00      	nop
 8001748:	372c      	adds	r7, #44	@ 0x2c
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	007a1200 	.word	0x007a1200

0800175c <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0f1b      	lsrs	r3, r3, #28
 800176c:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <RCC_ADCCLKConfig+0x4c>)
 800177a:	f423 5378 	bic.w	r3, r3, #15872	@ 0x3e00
 800177e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001780:	e005      	b.n	800178e <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001788:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 800178c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001792:	4905      	ldr	r1, [pc, #20]	@ (80017a8 <RCC_ADCCLKConfig+0x4c>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4313      	orrs	r3, r2
 8001798:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	4909      	ldr	r1, [pc, #36]	@ (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80017ca:	e006      	b.n	80017da <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4904      	ldr	r1, [pc, #16]	@ (80017e8 <RCC_AHBPeriphClockCmd+0x3c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	614b      	str	r3, [r1, #20]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <RCC_APB2PeriphClockCmd+0x3c>)
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	4909      	ldr	r1, [pc, #36]	@ (8001828 <RCC_APB2PeriphClockCmd+0x3c>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4313      	orrs	r3, r2
 8001808:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800180a:	e006      	b.n	800181a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <RCC_APB2PeriphClockCmd+0x3c>)
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	43db      	mvns	r3, r3
 8001814:	4904      	ldr	r1, [pc, #16]	@ (8001828 <RCC_APB2PeriphClockCmd+0x3c>)
 8001816:	4013      	ands	r3, r2
 8001818:	618b      	str	r3, [r1, #24]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <TIM_TimeBaseInit+0xcc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00f      	beq.n	8001868 <TIM_TimeBaseInit+0x3c>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <TIM_TimeBaseInit+0xd0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00b      	beq.n	8001868 <TIM_TimeBaseInit+0x3c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001856:	d007      	beq.n	8001868 <TIM_TimeBaseInit+0x3c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <TIM_TimeBaseInit+0xd4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d003      	beq.n	8001868 <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <TIM_TimeBaseInit+0xd8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d108      	bne.n	800187a <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800186e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	885a      	ldrh	r2, [r3, #2]
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	4313      	orrs	r3, r2
 8001878:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <TIM_TimeBaseInit+0xdc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00c      	beq.n	800189c <TIM_TimeBaseInit+0x70>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a21      	ldr	r2, [pc, #132]	@ (800190c <TIM_TimeBaseInit+0xe0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d008      	beq.n	800189c <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800188a:	89fb      	ldrh	r3, [r7, #14]
 800188c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001890:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	891a      	ldrh	r2, [r3, #8]
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	4313      	orrs	r3, r2
 800189a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	89fa      	ldrh	r2, [r7, #14]
 80018a0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <TIM_TimeBaseInit+0xcc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00f      	beq.n	80018da <TIM_TimeBaseInit+0xae>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <TIM_TimeBaseInit+0xd0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00b      	beq.n	80018da <TIM_TimeBaseInit+0xae>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <TIM_TimeBaseInit+0xe4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <TIM_TimeBaseInit+0xae>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a11      	ldr	r2, [pc, #68]	@ (8001914 <TIM_TimeBaseInit+0xe8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <TIM_TimeBaseInit+0xec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d104      	bne.n	80018e4 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	7a9b      	ldrb	r3, [r3, #10]
 80018de:	461a      	mov	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	615a      	str	r2, [r3, #20]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40013400 	.word	0x40013400
 8001900:	40000400 	.word	0x40000400
 8001904:	40000800 	.word	0x40000800
 8001908:	40001000 	.word	0x40001000
 800190c:	40001400 	.word	0x40001400
 8001910:	40014000 	.word	0x40014000
 8001914:	40014400 	.word	0x40014400
 8001918:	40014800 	.word	0x40014800

0800191c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f04f 32ff 	mov.w	r2, #4294967295
 800192a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	729a      	strb	r2, [r3, #10]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001972:	e007      	b.n	8001984 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	801a      	strh	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	f023 0201 	bic.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint32_t)~TIM_CCMR1_OC1M;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= (uint32_t)~TIM_CCMR1_CC1S;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC1P;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f023 0302 	bic.w	r3, r3, #2
 80019e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	461a      	mov	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	889b      	ldrh	r3, [r3, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <TIM_OC1Init+0x110>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00f      	beq.n	8001a2a <TIM_OC1Init+0x9a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a25      	ldr	r2, [pc, #148]	@ (8001aa4 <TIM_OC1Init+0x114>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00b      	beq.n	8001a2a <TIM_OC1Init+0x9a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <TIM_OC1Init+0x118>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <TIM_OC1Init+0x9a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <TIM_OC1Init+0x11c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d003      	beq.n	8001a2a <TIM_OC1Init+0x9a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <TIM_OC1Init+0x120>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d127      	bne.n	8001a7a <TIM_OC1Init+0xea>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NP;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f023 0308 	bic.w	r3, r3, #8
 8001a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	89db      	ldrh	r3, [r3, #14]
 8001a36:	461a      	mov	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= (uint32_t)~TIM_CCER_CC1NE;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	617b      	str	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	88db      	ldrh	r3, [r3, #6]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= (uint32_t)~TIM_CR2_OIS1N;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	8a1b      	ldrh	r3, [r3, #16]
 8001a66:	461a      	mov	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	8a5b      	ldrh	r3, [r3, #18]
 8001a72:	461a      	mov	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	621a      	str	r2, [r3, #32]
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012c00 	.word	0x40012c00
 8001aa4:	40013400 	.word	0x40013400
 8001aa8:	40014000 	.word	0x40014000
 8001aac:	40014400 	.word	0x40014400
 8001ab0:	40014800 	.word	0x40014800

08001ab4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	825a      	strh	r2, [r3, #18]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpccmr1 = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint32_t)(~TIM_CCMR1_OC1PE);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f023 0308 	bic.w	r3, r3, #8
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	619a      	str	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <TIM_CtrlPWMOutputs+0x20>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 8001b6a:	e005      	b.n	8001b78 <TIM_CtrlPWMOutputs+0x2c>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	611a      	str	r2, [r3, #16]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d103      	bne.n	8001c16 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	e005      	b.n	8001c22 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d102      	bne.n	8001c22 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001c34:	e006      	b.n	8001c44 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	400a      	ands	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	3724      	adds	r7, #36	@ 0x24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e001      	b.n	8001c74 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b087      	sub	sp, #28
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001cac:	2201      	movs	r2, #1
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e00d      	b.n	8001ce4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d105      	bne.n	8001cda <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e004      	b.n	8001ce4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	0c1b      	lsrs	r3, r3, #16
 8001ce8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001cea:	2201      	movs	r2, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <USART_GetITStatus+0x8e>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	74fb      	strb	r3, [r7, #19]
 8001d0e:	e001      	b.n	8001d14 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	2201      	movs	r2, #1
 8001d36:	fa02 f103 	lsl.w	r1, r2, r3
 8001d3a:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <NVIC_EnableIRQ+0x30>)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <uart_put_char+0x30>)
 8001d6a:	f7ff ff1d 	bl	8001ba8 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001d6e:	bf00      	nop
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <uart_put_char+0x30>)
 8001d74:	f7ff ff6c 	bl	8001c50 <USART_GetFlagStatus>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f8      	beq.n	8001d70 <uart_put_char+0x18>
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40004400 	.word	0x40004400

08001d8c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e012      	b.n	8001dc6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b0a      	cmp	r3, #10
 8001daa:	d102      	bne.n	8001db2 <_write_r+0x26>
            uart_put_char('\r');
 8001dac:	200d      	movs	r0, #13
 8001dae:	f7ff ffd3 	bl	8001d58 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ffcc 	bl	8001d58 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbe8      	blt.n	8001da0 <_write_r+0x14>
    }

    return len;
 8001dce:	683b      	ldr	r3, [r7, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001ddc:	4915      	ldr	r1, [pc, #84]	@ (8001e34 <USART2_IRQHandler+0x5c>)
 8001dde:	4816      	ldr	r0, [pc, #88]	@ (8001e38 <USART2_IRQHandler+0x60>)
 8001de0:	f7ff ff4f 	bl	8001c82 <USART_GetITStatus>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d021      	beq.n	8001e2e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <USART2_IRQHandler+0x60>)
 8001dec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001dee:	b299      	uxth	r1, r3
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <USART2_IRQHandler+0x64>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	b2d0      	uxtb	r0, r2
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <USART2_IRQHandler+0x64>)
 8001dfc:	7010      	strb	r0, [r2, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	b2c9      	uxtb	r1, r1
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <USART2_IRQHandler+0x68>)
 8001e04:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <USART2_IRQHandler+0x6c>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2bff      	cmp	r3, #255	@ 0xff
 8001e0e:	d107      	bne.n	8001e20 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <USART2_IRQHandler+0x70>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <USART2_IRQHandler+0x70>)
 8001e1c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001e1e:	e006      	b.n	8001e2e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <USART2_IRQHandler+0x6c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <USART2_IRQHandler+0x6c>)
 8001e2c:	701a      	strb	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	00050105 	.word	0x00050105
 8001e38:	40004400 	.word	0x40004400
 8001e3c:	200002e4 	.word	0x200002e4
 8001e40:	200001e4 	.word	0x200001e4
 8001e44:	200002e6 	.word	0x200002e6
 8001e48:	200002e5 	.word	0x200002e5

08001e4c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b094      	sub	sp, #80	@ 0x50
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001e54:	4b86      	ldr	r3, [pc, #536]	@ (8002070 <uart_init+0x224>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fc8f 	bl	8003780 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001e62:	4b83      	ldr	r3, [pc, #524]	@ (8002070 <uart_init+0x224>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fc88 	bl	8003780 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001e70:	4b80      	ldr	r3, [pc, #512]	@ (8002074 <uart_init+0x228>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4a7f      	ldr	r2, [pc, #508]	@ (8002074 <uart_init+0x228>)
 8001e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002074 <uart_init+0x228>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a7c      	ldr	r2, [pc, #496]	@ (8002074 <uart_init+0x228>)
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e86:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001e88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e96:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001e98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ea2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ea6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001ea8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001eb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001eb6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001eb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ec2:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001ec6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001ec8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ed6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001ed8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ee2:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001ee6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001ee8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eec:	889b      	ldrh	r3, [r3, #4]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ef4:	f023 030c 	bic.w	r3, r3, #12
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001efc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f04:	8892      	ldrh	r2, [r2, #4]
 8001f06:	b292      	uxth	r2, r2
 8001f08:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001f0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f18:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001f1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f24:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001f28:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001f2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f38:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001f3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f44:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001f48:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <uart_init+0x22c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002078 <uart_init+0x22c>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001f56:	4b48      	ldr	r3, [pc, #288]	@ (8002078 <uart_init+0x22c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a47      	ldr	r2, [pc, #284]	@ (8002078 <uart_init+0x22c>)
 8001f5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f60:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001f62:	4b45      	ldr	r3, [pc, #276]	@ (8002078 <uart_init+0x22c>)
 8001f64:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <uart_init+0x22c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001f6a:	4b43      	ldr	r3, [pc, #268]	@ (8002078 <uart_init+0x22c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a42      	ldr	r2, [pc, #264]	@ (8002078 <uart_init+0x22c>)
 8001f70:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001f74:	f023 030c 	bic.w	r3, r3, #12
 8001f78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002078 <uart_init+0x22c>)
 8001f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8002078 <uart_init+0x22c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <uart_init+0x22c>)
 8001f84:	4a3c      	ldr	r2, [pc, #240]	@ (8002078 <uart_init+0x22c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <uart_init+0x22c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8002078 <uart_init+0x22c>)
 8001f90:	f043 030c 	orr.w	r3, r3, #12
 8001f94:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001f96:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <uart_init+0x22c>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a37      	ldr	r2, [pc, #220]	@ (8002078 <uart_init+0x22c>)
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fa0:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001fa2:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <uart_init+0x22c>)
 8001fa4:	4a34      	ldr	r2, [pc, #208]	@ (8002078 <uart_init+0x22c>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fae:	2300      	movs	r3, #0
 8001fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f9ba 	bl	8001334 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc2:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <uart_init+0x22c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	005a      	lsls	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	fb01 f202 	mul.w	r2, r1, r2
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ff0:	e00d      	b.n	800200e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	fbb3 f2f2 	udiv	r2, r3, r2
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	fb01 f202 	mul.w	r2, r1, r2
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002014:	429a      	cmp	r2, r3
 8002016:	d302      	bcc.n	800201e <uart_init+0x1d2>
        divider++;
 8002018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800201a:	3301      	adds	r3, #1
 800201c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800201e:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <uart_init+0x22c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800202a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8002034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002036:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800203a:	4013      	ands	r3, r2
 800203c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800203e:	4313      	orrs	r3, r2
 8002040:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <uart_init+0x22c>)
 8002044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002046:	b292      	uxth	r2, r2
 8002048:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <uart_init+0x22c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <uart_init+0x22c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002056:	2201      	movs	r2, #1
 8002058:	4908      	ldr	r1, [pc, #32]	@ (800207c <uart_init+0x230>)
 800205a:	4807      	ldr	r0, [pc, #28]	@ (8002078 <uart_init+0x22c>)
 800205c:	f7ff fdb6 	bl	8001bcc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8002060:	2026      	movs	r0, #38	@ 0x26
 8002062:	f7ff fe5f 	bl	8001d24 <NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3750      	adds	r7, #80	@ 0x50
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000000c 	.word	0x2000000c
 8002074:	40021000 	.word	0x40021000
 8002078:	40004400 	.word	0x40004400
 800207c:	00050105 	.word	0x00050105

08002080 <ADC_setup_PA>:
 *      Author: fcadi
 */

#include "ADC.h"

void ADC_setup_PA(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0

	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8);
 8002086:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800208a:	f7ff fb67 	bl	800175c <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 800208e:	2101      	movs	r1, #1
 8002090:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002094:	f7ff fb8a 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002098:	2101      	movs	r1, #1
 800209a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800209e:	f7ff fb85 	bl	80017ac <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef gpio;
	GPIO_StructInit(&gpio);
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f8c8 	bl	800123c <GPIO_StructInit>
	gpio.GPIO_Pin  = GPIO_Pin_0 | GPIO_Pin_1;
 80020ac:	2303      	movs	r3, #3
 80020ae:	623b      	str	r3, [r7, #32]
	gpio.GPIO_Mode = GPIO_Mode_AN;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	GPIO_Init(GPIOA, &gpio);
 80020bc:	f107 0320 	add.w	r3, r7, #32
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c6:	f7ff f823 	bl	8001110 <GPIO_Init>

	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);  // reset to defaults
 80020ca:	463b      	mov	r3, r7
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fdad 	bl	8000c2c <ADC_StructInit>
	adc.ADC_ContinuousConvMode    = DISABLE;                     // single conversion
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
	adc.ADC_Resolution            = ADC_Resolution_12b;          // 12-bit
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
	adc.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0; // SW trigger
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
	adc.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
	adc.ADC_DataAlign             = ADC_DataAlign_Right;         // right alignment
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
	adc.ADC_OverrunMode           = DISABLE;                     // simplest: overwrite off
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
	adc.ADC_AutoInjMode           = DISABLE;                     // no injected group
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
	adc.ADC_NbrOfRegChannel       = 1;                           // 1 channel only
 80020ee:	2301      	movs	r3, #1
 80020f0:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &adc);
 80020f2:	463b      	mov	r3, r7
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020fa:	f7fe fd55 	bl	8000ba8 <ADC_Init>

	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 80020fe:	2101      	movs	r1, #1
 8002100:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002104:	f7fe fe25 	bl	8000d52 <ADC_VoltageRegulatorCmd>
	for(uint32_t i = 0; i<10000;i++);
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800210c:	e002      	b.n	8002114 <ADC_setup_PA+0x94>
 800210e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002110:	3301      	adds	r3, #1
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002116:	f242 720f 	movw	r2, #9999	@ 0x270f
 800211a:	4293      	cmp	r3, r2
 800211c:	d9f7      	bls.n	800210e <ADC_setup_PA+0x8e>

	ADC_Cmd(ADC1, ENABLE);
 800211e:	2101      	movs	r1, #1
 8002120:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002124:	f7fe fda4 	bl	8000c70 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 8002128:	bf00      	nop
 800212a:	2101      	movs	r1, #1
 800212c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002130:	f7fe ff83 	bl	800103a <ADC_GetFlagStatus>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f7      	beq.n	800212a <ADC_setup_PA+0xaa>

	ADC_Cmd(ADC1, DISABLE);
 800213a:	2100      	movs	r1, #0
 800213c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002140:	f7fe fd96 	bl	8000c70 <ADC_Cmd>
	while (ADC_GetDisableCmdStatus(ADC1)) {}
 8002144:	bf00      	nop
 8002146:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800214a:	f7fe fdea 	bl	8000d22 <ADC_GetDisableCmdStatus>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f8      	bne.n	8002146 <ADC_setup_PA+0xc6>
	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8002154:	2100      	movs	r1, #0
 8002156:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800215a:	f7fe fdb5 	bl	8000cc8 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 800215e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002162:	f7fe fda1 	bl	8000ca8 <ADC_StartCalibration>
	while (ADC_GetCalibrationStatus(ADC1)) {}
 8002166:	bf00      	nop
 8002168:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800216c:	f7fe fdc3 	bl	8000cf6 <ADC_GetCalibrationStatus>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f8      	bne.n	8002168 <ADC_setup_PA+0xe8>
	for(uint32_t i = 0; i<100;i++);
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800217a:	e002      	b.n	8002182 <ADC_setup_PA+0x102>
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	3301      	adds	r3, #1
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002184:	2b63      	cmp	r3, #99	@ 0x63
 8002186:	d9f9      	bls.n	800217c <ADC_setup_PA+0xfc>

	ADC_Cmd(ADC1, ENABLE);
 8002188:	2101      	movs	r1, #1
 800218a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800218e:	f7fe fd6f 	bl	8000c70 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 8002192:	bf00      	nop
 8002194:	2101      	movs	r1, #1
 8002196:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800219a:	f7fe ff4e 	bl	800103a <ADC_GetFlagStatus>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f7      	beq.n	8002194 <ADC_setup_PA+0x114>
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3730      	adds	r7, #48	@ 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <ADC_measure_PA>:

// --- Measure PA0 (ch=1) or PA1 (ch=2) once ---
uint16_t ADC_measure_PA(uint8_t ch) {
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
	uint32_t channel = (ch == 1) ? ADC_Channel_1 : ADC_Channel_2;      // PA0->ch1, PA1->ch2
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <ADC_measure_PA+0x14>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <ADC_measure_PA+0x16>
 80021c2:	2302      	movs	r3, #2
 80021c4:	60fb      	str	r3, [r7, #12]
	ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_1Cycles5); // rank=1, Ts=1.5
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	b2d9      	uxtb	r1, r3
 80021ca:	2300      	movs	r3, #0
 80021cc:	2201      	movs	r2, #1
 80021ce:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021d2:	f7fe fe1d 	bl	8000e10 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1);                                         // start
 80021d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021da:	f7fe ff11 	bl	8001000 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0) {}              // wait EOC
 80021de:	bf00      	nop
 80021e0:	2104      	movs	r1, #4
 80021e2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021e6:	f7fe ff28 	bl	800103a <ADC_GetFlagStatus>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f7      	beq.n	80021e0 <ADC_measure_PA+0x32>
	return ADC_GetConversionValue(ADC1);                               // 0..4095
 80021f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021f4:	f7fe ff14 	bl	8001020 <ADC_GetConversionValue>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <ADC_Setup_VREFEN>:

void ADC_Setup_VREFEN(){
 8002202:	b580      	push	{r7, lr}
 8002204:	b08e      	sub	sp, #56	@ 0x38
 8002206:	af00      	add	r7, sp, #0
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8);
 8002208:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800220c:	f7ff faa6 	bl	800175c <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8002210:	2101      	movs	r1, #1
 8002212:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002216:	f7ff fac9 	bl	80017ac <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800221a:	2101      	movs	r1, #1
 800221c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002220:	f7ff fac4 	bl	80017ac <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef gpio;
	GPIO_StructInit(&gpio);
 8002224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f807 	bl	800123c <GPIO_StructInit>
	gpio.GPIO_Pin  = GPIO_Pin_0 | GPIO_Pin_1;
 800222e:	2303      	movs	r3, #3
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio.GPIO_Mode = GPIO_Mode_AN;
 8002232:	2303      	movs	r3, #3
 8002234:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	GPIO_Init(GPIOA, &gpio);
 800223e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002248:	f7fe ff62 	bl	8001110 <GPIO_Init>

	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);  // reset to defaults
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fcec 	bl	8000c2c <ADC_StructInit>
	adc.ADC_ContinuousConvMode    = DISABLE;                     // single conversion
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
	adc.ADC_Resolution            = ADC_Resolution_12b;          // 12-bit
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
	adc.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0; // SW trigger
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
	adc.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
	adc.ADC_DataAlign             = ADC_DataAlign_Right;         // right alignment
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
	adc.ADC_OverrunMode           = DISABLE;                     // simplest: overwrite off
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
	adc.ADC_AutoInjMode           = DISABLE;                     // no injected group
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
	adc.ADC_NbrOfRegChannel       = 1;                           // 1 channel only
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC1, &adc);
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4619      	mov	r1, r3
 800227a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800227e:	f7fe fc93 	bl	8000ba8 <ADC_Init>

	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 8002282:	2101      	movs	r1, #1
 8002284:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002288:	f7fe fd63 	bl	8000d52 <ADC_VoltageRegulatorCmd>
	for(uint32_t i = 0; i<10000;i++);
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002290:	e002      	b.n	8002298 <ADC_Setup_VREFEN+0x96>
 8002292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002294:	3301      	adds	r3, #1
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800229e:	4293      	cmp	r3, r2
 80022a0:	d9f7      	bls.n	8002292 <ADC_Setup_VREFEN+0x90>

	ADC_VrefintCmd(ADC1, ENABLE);
 80022a2:	2101      	movs	r1, #1
 80022a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022a8:	f7fe fd76 	bl	8000d98 <ADC_VrefintCmd>
	for(uint32_t i = 0; i<10000;i++);
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b0:	e002      	b.n	80022b8 <ADC_Setup_VREFEN+0xb6>
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	3301      	adds	r3, #1
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022be:	4293      	cmp	r3, r2
 80022c0:	d9f7      	bls.n	80022b2 <ADC_Setup_VREFEN+0xb0>

	ADC_Cmd(ADC1, ENABLE);
 80022c2:	2101      	movs	r1, #1
 80022c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022c8:	f7fe fcd2 	bl	8000c70 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 80022cc:	bf00      	nop
 80022ce:	2101      	movs	r1, #1
 80022d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022d4:	f7fe feb1 	bl	800103a <ADC_GetFlagStatus>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f7      	beq.n	80022ce <ADC_Setup_VREFEN+0xcc>

	ADC_Cmd(ADC1, DISABLE);
 80022de:	2100      	movs	r1, #0
 80022e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022e4:	f7fe fcc4 	bl	8000c70 <ADC_Cmd>
	while (ADC_GetDisableCmdStatus(ADC1)) {}
 80022e8:	bf00      	nop
 80022ea:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022ee:	f7fe fd18 	bl	8000d22 <ADC_GetDisableCmdStatus>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f8      	bne.n	80022ea <ADC_Setup_VREFEN+0xe8>
	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 80022f8:	2100      	movs	r1, #0
 80022fa:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022fe:	f7fe fce3 	bl	8000cc8 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8002302:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002306:	f7fe fccf 	bl	8000ca8 <ADC_StartCalibration>
	while (ADC_GetCalibrationStatus(ADC1)) {}
 800230a:	bf00      	nop
 800230c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002310:	f7fe fcf1 	bl	8000cf6 <ADC_GetCalibrationStatus>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f8      	bne.n	800230c <ADC_Setup_VREFEN+0x10a>
	for(uint32_t i = 0; i<100;i++);
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231e:	e002      	b.n	8002326 <ADC_Setup_VREFEN+0x124>
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	3301      	adds	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002328:	2b63      	cmp	r3, #99	@ 0x63
 800232a:	d9f9      	bls.n	8002320 <ADC_Setup_VREFEN+0x11e>

	ADC_Cmd(ADC1, ENABLE);
 800232c:	2101      	movs	r1, #1
 800232e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002332:	f7fe fc9d 	bl	8000c70 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 8002336:	bf00      	nop
 8002338:	2101      	movs	r1, #1
 800233a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800233e:	f7fe fe7c 	bl	800103a <ADC_GetFlagStatus>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f7      	beq.n	8002338 <ADC_Setup_VREFEN+0x136>

}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3738      	adds	r7, #56	@ 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <EXTI4_IRQHandler>:
	NVIC_Init(&NVIC_InitStructureUp);

}

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8002356:	2004      	movs	r0, #4
 8002358:	f7fe fe88 	bl	800106c <EXTI_GetITStatus>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <EXTI4_IRQHandler+0x1c>
    	setLed('m');

 8002362:	206d      	movs	r0, #109	@ 0x6d
 8002364:	f000 f806 	bl	8002374 <setLed>
        EXTI_ClearITPendingBit(EXTI_Line4);
    }
 8002368:	2004      	movs	r0, #4
 800236a:	f7fe feb7 	bl	80010dc <EXTI_ClearITPendingBit>

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <setLed>:

	// Initialize LED to off
	setLed('d');
}

void setLed(char sel) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b72      	cmp	r3, #114	@ 0x72
 8002382:	d111      	bne.n	80023a8 <setLed+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002384:	2200      	movs	r2, #0
 8002386:	2110      	movs	r1, #16
 8002388:	4852      	ldr	r0, [pc, #328]	@ (80024d4 <setLed+0x160>)
 800238a:	f7fe ff71 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800238e:	2201      	movs	r2, #1
 8002390:	2180      	movs	r1, #128	@ 0x80
 8002392:	4851      	ldr	r0, [pc, #324]	@ (80024d8 <setLed+0x164>)
 8002394:	f7fe ff6c 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800239e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a2:	f7fe ff65 	bl	8001270 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 80023a6:	e091      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'g') {
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b67      	cmp	r3, #103	@ 0x67
 80023ac:	d111      	bne.n	80023d2 <setLed+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80023ae:	2201      	movs	r2, #1
 80023b0:	2110      	movs	r1, #16
 80023b2:	4848      	ldr	r0, [pc, #288]	@ (80024d4 <setLed+0x160>)
 80023b4:	f7fe ff5c 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	4846      	ldr	r0, [pc, #280]	@ (80024d8 <setLed+0x164>)
 80023be:	f7fe ff57 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023cc:	f7fe ff50 	bl	8001270 <GPIO_WriteBit>
}
 80023d0:	e07c      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'b') {
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	2b62      	cmp	r3, #98	@ 0x62
 80023d6:	d111      	bne.n	80023fc <setLed+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80023d8:	2201      	movs	r2, #1
 80023da:	2110      	movs	r1, #16
 80023dc:	483d      	ldr	r0, [pc, #244]	@ (80024d4 <setLed+0x160>)
 80023de:	f7fe ff47 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80023e2:	2201      	movs	r2, #1
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	483c      	ldr	r0, [pc, #240]	@ (80024d8 <setLed+0x164>)
 80023e8:	f7fe ff42 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80023ec:	2200      	movs	r2, #0
 80023ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f6:	f7fe ff3b 	bl	8001270 <GPIO_WriteBit>
}
 80023fa:	e067      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'c') {
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b63      	cmp	r3, #99	@ 0x63
 8002400:	d111      	bne.n	8002426 <setLed+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002402:	2201      	movs	r2, #1
 8002404:	2110      	movs	r1, #16
 8002406:	4833      	ldr	r0, [pc, #204]	@ (80024d4 <setLed+0x160>)
 8002408:	f7fe ff32 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 800240c:	2200      	movs	r2, #0
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	4831      	ldr	r0, [pc, #196]	@ (80024d8 <setLed+0x164>)
 8002412:	f7fe ff2d 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800241c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002420:	f7fe ff26 	bl	8001270 <GPIO_WriteBit>
}
 8002424:	e052      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'm') {
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2b6d      	cmp	r3, #109	@ 0x6d
 800242a:	d111      	bne.n	8002450 <setLed+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800242c:	2200      	movs	r2, #0
 800242e:	2110      	movs	r1, #16
 8002430:	4828      	ldr	r0, [pc, #160]	@ (80024d4 <setLed+0x160>)
 8002432:	f7fe ff1d 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002436:	2201      	movs	r2, #1
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	4827      	ldr	r0, [pc, #156]	@ (80024d8 <setLed+0x164>)
 800243c:	f7fe ff18 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800244a:	f7fe ff11 	bl	8001270 <GPIO_WriteBit>
}
 800244e:	e03d      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'y') {
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	2b79      	cmp	r3, #121	@ 0x79
 8002454:	d111      	bne.n	800247a <setLed+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002456:	2200      	movs	r2, #0
 8002458:	2110      	movs	r1, #16
 800245a:	481e      	ldr	r0, [pc, #120]	@ (80024d4 <setLed+0x160>)
 800245c:	f7fe ff08 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002460:	2200      	movs	r2, #0
 8002462:	2180      	movs	r1, #128	@ 0x80
 8002464:	481c      	ldr	r0, [pc, #112]	@ (80024d8 <setLed+0x164>)
 8002466:	f7fe ff03 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 800246a:	2201      	movs	r2, #1
 800246c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002474:	f7fe fefc 	bl	8001270 <GPIO_WriteBit>
}
 8002478:	e028      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'w') {
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b77      	cmp	r3, #119	@ 0x77
 800247e:	d111      	bne.n	80024a4 <setLed+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002480:	2200      	movs	r2, #0
 8002482:	2110      	movs	r1, #16
 8002484:	4813      	ldr	r0, [pc, #76]	@ (80024d4 <setLed+0x160>)
 8002486:	f7fe fef3 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 800248a:	2200      	movs	r2, #0
 800248c:	2180      	movs	r1, #128	@ 0x80
 800248e:	4812      	ldr	r0, [pc, #72]	@ (80024d8 <setLed+0x164>)
 8002490:	f7fe feee 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002494:	2200      	movs	r2, #0
 8002496:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800249a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800249e:	f7fe fee7 	bl	8001270 <GPIO_WriteBit>
}
 80024a2:	e013      	b.n	80024cc <setLed+0x158>
	} else if (sel == 'd') {
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d110      	bne.n	80024cc <setLed+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80024aa:	2201      	movs	r2, #1
 80024ac:	2110      	movs	r1, #16
 80024ae:	4809      	ldr	r0, [pc, #36]	@ (80024d4 <setLed+0x160>)
 80024b0:	f7fe fede 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80024b4:	2201      	movs	r2, #1
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	4807      	ldr	r0, [pc, #28]	@ (80024d8 <setLed+0x164>)
 80024ba:	f7fe fed9 	bl	8001270 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80024be:	2201      	movs	r2, #1
 80024c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024c8:	f7fe fed2 	bl	8001270 <GPIO_WriteBit>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	48000400 	.word	0x48000400
 80024d8:	48000800 	.word	0x48000800

080024dc <main>:
#include "pwm.h"

//#define VREFINT_CAL *((uint16_t*) ((uint32_t) 0x1FFFF7BA)) //calibrated at 3.3V@ 30
//static uint8_t lcdBuffer[LCD_BUFF_SIZE];

int main(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 80024e0:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80024e4:	f7ff fcb2 	bl	8001e4c <uart_init>

	initTimer();
 80024e8:	f000 fac6 	bl	8002a78 <initTimer>
	ADC_setup_PA();
 80024ec:	f7ff fdc8 	bl	8002080 <ADC_setup_PA>
	ADC_Setup_VREFEN();
 80024f0:	f7ff fe87 	bl	8002202 <ADC_Setup_VREFEN>
	timer16_pwm_init();
 80024f4:	f000 f86a 	bl	80025cc <timer16_pwm_init>
	timer17_pwm_init();
 80024f8:	f000 f8b0 	bl	800265c <timer17_pwm_init>


	while (1)
	{
		update_servos(); // Update servos by reading the ADC for the pots
 80024fc:	f000 f948 	bl	8002790 <update_servos>
 8002500:	e7fc      	b.n	80024fc <main+0x20>

08002502 <clamp_u16>:
#include "pwm.h"

#define SERVO_MIN_US 1000   // ~0°
#define SERVO_MAX_US 2000   // ~180°

static inline uint16_t clamp_u16(int v, int lo, int hi) {
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
    if (v < lo) v = lo;
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	da01      	bge.n	800251a <clamp_u16+0x18>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	60fb      	str	r3, [r7, #12]
    if (v > hi) v = hi;
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	dd01      	ble.n	8002526 <clamp_u16+0x24>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b29b      	uxth	r3, r3
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <GPIO_set_AF1_PA6>:

/* -------------------- GPIO (AF) setup -------------------- */

static void GPIO_set_AF1_PA6(void) {
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800253c:	2101      	movs	r1, #1
 800253e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002542:	f7ff f933 	bl	80017ac <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef g; GPIO_StructInit(&g);
 8002546:	463b      	mov	r3, r7
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fe77 	bl	800123c <GPIO_StructInit>
    g.GPIO_Mode  = GPIO_Mode_AF;
 800254e:	2302      	movs	r3, #2
 8002550:	713b      	strb	r3, [r7, #4]
    g.GPIO_Pin   = GPIO_Pin_6;              // PA6
 8002552:	2340      	movs	r3, #64	@ 0x40
 8002554:	603b      	str	r3, [r7, #0]
    g.GPIO_Speed = GPIO_Speed_50MHz;
 8002556:	2303      	movs	r3, #3
 8002558:	717b      	strb	r3, [r7, #5]
    g.GPIO_PuPd  = GPIO_PuPd_DOWN;
 800255a:	2302      	movs	r3, #2
 800255c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &g);
 800255e:	463b      	mov	r3, r7
 8002560:	4619      	mov	r1, r3
 8002562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002566:	f7fe fdd3 	bl	8001110 <GPIO_Init>

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_1); // TIM16_CH1
 800256a:	2201      	movs	r2, #1
 800256c:	2106      	movs	r1, #6
 800256e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002572:	f7fe fe95 	bl	80012a0 <GPIO_PinAFConfig>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <GPIO_set_AF10_PB9>:

static void GPIO_set_AF10_PB9(void) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002586:	2101      	movs	r1, #1
 8002588:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800258c:	f7ff f90e 	bl	80017ac <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef g; GPIO_StructInit(&g);
 8002590:	463b      	mov	r3, r7
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fe52 	bl	800123c <GPIO_StructInit>
    g.GPIO_Mode  = GPIO_Mode_AF;
 8002598:	2302      	movs	r3, #2
 800259a:	713b      	strb	r3, [r7, #4]
    g.GPIO_Pin   = GPIO_Pin_9;              // PB9
 800259c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a0:	603b      	str	r3, [r7, #0]
    g.GPIO_Speed = GPIO_Speed_50MHz;
 80025a2:	2303      	movs	r3, #3
 80025a4:	717b      	strb	r3, [r7, #5]
    g.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80025a6:	2302      	movs	r3, #2
 80025a8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &g);
 80025aa:	463b      	mov	r3, r7
 80025ac:	4619      	mov	r1, r3
 80025ae:	4806      	ldr	r0, [pc, #24]	@ (80025c8 <GPIO_set_AF10_PB9+0x48>)
 80025b0:	f7fe fdae 	bl	8001110 <GPIO_Init>

    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_10); // TIM17_CH1
 80025b4:	220a      	movs	r2, #10
 80025b6:	2109      	movs	r1, #9
 80025b8:	4803      	ldr	r0, [pc, #12]	@ (80025c8 <GPIO_set_AF10_PB9+0x48>)
 80025ba:	f7fe fe71 	bl	80012a0 <GPIO_PinAFConfig>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	48000400 	.word	0x48000400

080025cc <timer16_pwm_init>:

/* -------------------- TIM16: PA6 (servo 1) -------------------- */

void timer16_pwm_init(void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
    // Timer base: 50 Hz frame and 1 µs tick
    // 72 MHz / (PSC+1) = 1 MHz  => PSC = 71
    // ARR = 20000-1 for 20 ms
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
 80025d2:	2101      	movs	r1, #1
 80025d4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80025d8:	f7ff f908 	bl	80017ec <RCC_APB2PeriphClockCmd>
    GPIO_set_AF1_PA6();
 80025dc:	f7ff ffab 	bl	8002536 <GPIO_set_AF1_PA6>

    TIM_TimeBaseInitTypeDef tb;
    TIM_OCInitTypeDef oc;

    TIM_TimeBaseStructInit(&tb);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f999 	bl	800191c <TIM_TimeBaseStructInit>
    tb.TIM_Prescaler     = 71;
 80025ea:	2347      	movs	r3, #71	@ 0x47
 80025ec:	82bb      	strh	r3, [r7, #20]
    tb.TIM_CounterMode   = TIM_CounterMode_Up;
 80025ee:	2300      	movs	r3, #0
 80025f0:	82fb      	strh	r3, [r7, #22]
    tb.TIM_Period        = 20000 - 1;
 80025f2:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 80025f6:	61bb      	str	r3, [r7, #24]
    tb.TIM_ClockDivision = TIM_CKD_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseInit(TIM16, &tb);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4814      	ldr	r0, [pc, #80]	@ (8002654 <timer16_pwm_init+0x88>)
 8002604:	f7ff f912 	bl	800182c <TIM_TimeBaseInit>

    TIM_OCStructInit(&oc);
 8002608:	463b      	mov	r3, r7
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fa52 	bl	8001ab4 <TIM_OCStructInit>
    oc.TIM_OCMode      = TIM_OCMode_PWM1;
 8002610:	2360      	movs	r3, #96	@ 0x60
 8002612:	603b      	str	r3, [r7, #0]
    oc.TIM_OutputState = TIM_OutputState_Enable;
 8002614:	2301      	movs	r3, #1
 8002616:	80bb      	strh	r3, [r7, #4]
    TIM_OC1Init(TIM16, &oc);
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	480d      	ldr	r0, [pc, #52]	@ (8002654 <timer16_pwm_init+0x88>)
 800261e:	f7ff f9b7 	bl	8001990 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM16, TIM_OCPreload_Enable);
 8002622:	2108      	movs	r1, #8
 8002624:	480b      	ldr	r0, [pc, #44]	@ (8002654 <timer16_pwm_init+0x88>)
 8002626:	f7ff fa75 	bl	8001b14 <TIM_OC1PreloadConfig>

    TIM_CtrlPWMOutputs(TIM16, ENABLE);
 800262a:	2101      	movs	r1, #1
 800262c:	4809      	ldr	r0, [pc, #36]	@ (8002654 <timer16_pwm_init+0x88>)
 800262e:	f7ff fa8d 	bl	8001b4c <TIM_CtrlPWMOutputs>
    TIM_Cmd(TIM16, ENABLE);
 8002632:	2101      	movs	r1, #1
 8002634:	4807      	ldr	r0, [pc, #28]	@ (8002654 <timer16_pwm_init+0x88>)
 8002636:	f7ff f98b 	bl	8001950 <TIM_Cmd>

    TIM_SetCompare1(TIM16, (SERVO_MIN_US + SERVO_MAX_US) / 2);
 800263a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <timer16_pwm_init+0x88>)
 8002640:	f7ff fa5a 	bl	8001af8 <TIM_SetCompare1>
	printf("timer16 initialized");
 8002644:	4804      	ldr	r0, [pc, #16]	@ (8002658 <timer16_pwm_init+0x8c>)
 8002646:	f001 f889 	bl	800375c <iprintf>
}
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40014400 	.word	0x40014400
 8002658:	08005688 	.word	0x08005688

0800265c <timer17_pwm_init>:

/* -------------------- TIM17: PB9 (servo 2) -------------------- */

void timer17_pwm_init(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002662:	2101      	movs	r1, #1
 8002664:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002668:	f7ff f8c0 	bl	80017ec <RCC_APB2PeriphClockCmd>
    GPIO_set_AF10_PB9();
 800266c:	f7ff ff88 	bl	8002580 <GPIO_set_AF10_PB9>

    TIM_TimeBaseInitTypeDef tb;
    TIM_OCInitTypeDef oc;

    TIM_TimeBaseStructInit(&tb);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f951 	bl	800191c <TIM_TimeBaseStructInit>
    tb.TIM_Prescaler     = 71;
 800267a:	2347      	movs	r3, #71	@ 0x47
 800267c:	82bb      	strh	r3, [r7, #20]
    tb.TIM_CounterMode   = TIM_CounterMode_Up;
 800267e:	2300      	movs	r3, #0
 8002680:	82fb      	strh	r3, [r7, #22]
    tb.TIM_Period        = 20000 - 1;
 8002682:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8002686:	61bb      	str	r3, [r7, #24]
    tb.TIM_ClockDivision = TIM_CKD_DIV1;
 8002688:	2300      	movs	r3, #0
 800268a:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseInit(TIM17, &tb);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	4814      	ldr	r0, [pc, #80]	@ (80026e4 <timer17_pwm_init+0x88>)
 8002694:	f7ff f8ca 	bl	800182c <TIM_TimeBaseInit>

    TIM_OCStructInit(&oc);
 8002698:	463b      	mov	r3, r7
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fa0a 	bl	8001ab4 <TIM_OCStructInit>
    oc.TIM_OCMode      = TIM_OCMode_PWM1;
 80026a0:	2360      	movs	r3, #96	@ 0x60
 80026a2:	603b      	str	r3, [r7, #0]
    oc.TIM_OutputState = TIM_OutputState_Enable;
 80026a4:	2301      	movs	r3, #1
 80026a6:	80bb      	strh	r3, [r7, #4]
    TIM_OC1Init(TIM17, &oc);
 80026a8:	463b      	mov	r3, r7
 80026aa:	4619      	mov	r1, r3
 80026ac:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <timer17_pwm_init+0x88>)
 80026ae:	f7ff f96f 	bl	8001990 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM17, TIM_OCPreload_Enable);
 80026b2:	2108      	movs	r1, #8
 80026b4:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <timer17_pwm_init+0x88>)
 80026b6:	f7ff fa2d 	bl	8001b14 <TIM_OC1PreloadConfig>

    TIM_CtrlPWMOutputs(TIM17, ENABLE);
 80026ba:	2101      	movs	r1, #1
 80026bc:	4809      	ldr	r0, [pc, #36]	@ (80026e4 <timer17_pwm_init+0x88>)
 80026be:	f7ff fa45 	bl	8001b4c <TIM_CtrlPWMOutputs>
    TIM_Cmd(TIM17, ENABLE);
 80026c2:	2101      	movs	r1, #1
 80026c4:	4807      	ldr	r0, [pc, #28]	@ (80026e4 <timer17_pwm_init+0x88>)
 80026c6:	f7ff f943 	bl	8001950 <TIM_Cmd>

    TIM_SetCompare1(TIM17, (SERVO_MIN_US + SERVO_MAX_US) / 2);
 80026ca:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80026ce:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <timer17_pwm_init+0x88>)
 80026d0:	f7ff fa12 	bl	8001af8 <TIM_SetCompare1>
	printf("timer17 initialized");
 80026d4:	4804      	ldr	r0, [pc, #16]	@ (80026e8 <timer17_pwm_init+0x8c>)
 80026d6:	f001 f841 	bl	800375c <iprintf>
}
 80026da:	bf00      	nop
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40014800 	.word	0x40014800
 80026e8:	0800569c 	.word	0x0800569c

080026ec <setServoPulse_TIM16>:

/* -------------------- Helpers -------------------- */

// Set absolute pulse width in microseconds on each timer
void setServoPulse_TIM16(uint16_t us) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
    us = clamp_u16(us, SERVO_MIN_US, SERVO_MAX_US);
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80026fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fefe 	bl	8002502 <clamp_u16>
 8002706:	4603      	mov	r3, r0
 8002708:	80fb      	strh	r3, [r7, #6]
    TIM_SetCompare1(TIM16, us);
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4619      	mov	r1, r3
 800270e:	4803      	ldr	r0, [pc, #12]	@ (800271c <setServoPulse_TIM16+0x30>)
 8002710:	f7ff f9f2 	bl	8001af8 <TIM_SetCompare1>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40014400 	.word	0x40014400

08002720 <setServoPulse_TIM17>:

void setServoPulse_TIM17(uint16_t us) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
    us = clamp_u16(us, SERVO_MIN_US, SERVO_MAX_US);
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002730:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fee4 	bl	8002502 <clamp_u16>
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
    TIM_SetCompare1(TIM17, us);
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	4619      	mov	r1, r3
 8002742:	4803      	ldr	r0, [pc, #12]	@ (8002750 <setServoPulse_TIM17+0x30>)
 8002744:	f7ff f9d8 	bl	8001af8 <TIM_SetCompare1>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40014800 	.word	0x40014800

08002754 <pot_to_pulse>:

// Map 0..4095 potentiometer reading to SERVO_MIN_US..SERVO_MAX_US
static inline uint16_t pot_to_pulse(uint16_t pot) {
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(SERVO_MIN_US +
                      ((uint32_t)(SERVO_MAX_US - SERVO_MIN_US) * pot) / 4095u);
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002764:	fb03 f202 	mul.w	r2, r3, r2
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <pot_to_pulse+0x38>)
 800276a:	fba3 1302 	umull	r1, r3, r3, r2
 800276e:	1ad2      	subs	r2, r2, r3
 8002770:	0852      	lsrs	r2, r2, #1
 8002772:	4413      	add	r3, r2
 8002774:	0adb      	lsrs	r3, r3, #11
    return (uint16_t)(SERVO_MIN_US +
 8002776:	b29b      	uxth	r3, r3
 8002778:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800277c:	b29b      	uxth	r3, r3
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	00100101 	.word	0x00100101

08002790 <update_servos>:

/* -------------------- Exercise helper -------------------- */

void update_servos(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
    // Read potentiometers


    uint16_t pot1 = ADC_measure_PA(1);
 8002796:	2001      	movs	r0, #1
 8002798:	f7ff fd09 	bl	80021ae <ADC_measure_PA>
 800279c:	4603      	mov	r3, r0
 800279e:	80fb      	strh	r3, [r7, #6]
    uint16_t pot2 = ADC_measure_PA(2);
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7ff fd04 	bl	80021ae <ADC_measure_PA>
 80027a6:	4603      	mov	r3, r0
 80027a8:	80bb      	strh	r3, [r7, #4]

    printf("pot1: %d",pot1);
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	4619      	mov	r1, r3
 80027ae:	480b      	ldr	r0, [pc, #44]	@ (80027dc <update_servos+0x4c>)
 80027b0:	f000 ffd4 	bl	800375c <iprintf>

    setServoPulse_TIM16(pot_to_pulse(pot1));  // PA6
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffcc 	bl	8002754 <pot_to_pulse>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff94 	bl	80026ec <setServoPulse_TIM16>
    setServoPulse_TIM17(pot_to_pulse(pot2));  // PB9
 80027c4:	88bb      	ldrh	r3, [r7, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ffc4 	bl	8002754 <pot_to_pulse>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ffa6 	bl	8002720 <setServoPulse_TIM17>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	080056b0 	.word	0x080056b0

080027e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_kill>:

int _kill(int pid, int sig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027fa:	f001 f995 	bl	8003b28 <__errno>
 80027fe:	4603      	mov	r3, r0
 8002800:	2216      	movs	r2, #22
 8002802:	601a      	str	r2, [r3, #0]
	return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_exit>:

void _exit (int status)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffe7 	bl	80027f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002822:	bf00      	nop
 8002824:	e7fd      	b.n	8002822 <_exit+0x12>

08002826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00a      	b.n	800284e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002838:	f3af 8000 	nop.w
 800283c:	4601      	mov	r1, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60ba      	str	r2, [r7, #8]
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbf0      	blt.n	8002838 <_read+0x12>
	}

return len;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	return -1;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002888:	605a      	str	r2, [r3, #4]
	return 0;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_isatty>:

int _isatty(int file)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
	return 0;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <SystemInit+0x84>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <SystemInit+0x84>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <SystemInit+0x88>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002950 <SystemInit+0x88>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <SystemInit+0x88>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4918      	ldr	r1, [pc, #96]	@ (8002950 <SystemInit+0x88>)
 80028ee:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <SystemInit+0x8c>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028f4:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <SystemInit+0x88>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	@ (8002950 <SystemInit+0x88>)
 80028fa:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <SystemInit+0x88>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <SystemInit+0x88>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <SystemInit+0x88>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <SystemInit+0x88>)
 8002916:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800291a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <SystemInit+0x88>)
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4a0b      	ldr	r2, [pc, #44]	@ (8002950 <SystemInit+0x88>)
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <SystemInit+0x88>)
 800292a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800292c:	4908      	ldr	r1, [pc, #32]	@ (8002950 <SystemInit+0x88>)
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <SystemInit+0x90>)
 8002930:	4013      	ands	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <SystemInit+0x88>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800293a:	f000 f80f 	bl	800295c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800293e:	4b03      	ldr	r3, [pc, #12]	@ (800294c <SystemInit+0x84>)
 8002940:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002944:	609a      	str	r2, [r3, #8]
#endif  
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00
 8002950:	40021000 	.word	0x40021000
 8002954:	f87fc00c 	.word	0xf87fc00c
 8002958:	ff00fccc 	.word	0xff00fccc

0800295c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <SetSysClock+0x8c>)
 8002962:	2212      	movs	r2, #18
 8002964:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002966:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <SetSysClock+0x90>)
 8002968:	4a20      	ldr	r2, [pc, #128]	@ (80029ec <SetSysClock+0x90>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800296e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <SetSysClock+0x90>)
 8002970:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <SetSysClock+0x90>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002976:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <SetSysClock+0x90>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <SetSysClock+0x90>)
 800297c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002980:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <SetSysClock+0x90>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <SetSysClock+0x90>)
 8002988:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800298c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <SetSysClock+0x90>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a16      	ldr	r2, [pc, #88]	@ (80029ec <SetSysClock+0x90>)
 8002994:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 8002998:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800299a:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <SetSysClock+0x90>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <SetSysClock+0x90>)
 80029a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80029a6:	bf00      	nop
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <SetSysClock+0x90>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f9      	beq.n	80029a8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <SetSysClock+0x90>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a0c      	ldr	r2, [pc, #48]	@ (80029ec <SetSysClock+0x90>)
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <SetSysClock+0x90>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <SetSysClock+0x90>)
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80029cc:	bf00      	nop
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <SetSysClock+0x90>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d1f9      	bne.n	80029ce <SetSysClock+0x72>
  {
  }
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40021000 	.word	0x40021000

080029f0 <NVIC_EnableIRQ>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f103 	lsl.w	r1, r2, r3
 8002a06:	4a06      	ldr	r2, [pc, #24]	@ (8002a20 <NVIC_EnableIRQ+0x30>)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da0b      	bge.n	8002a50 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <NVIC_SetPriority+0x4c>)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	3b04      	subs	r3, #4
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002a4e:	e009      	b.n	8002a64 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4907      	ldr	r1, [pc, #28]	@ (8002a74 <NVIC_SetPriority+0x50>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <initTimer>:
#include "timer.h"

timestruct_t timeData;

void initTimer() {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM2, ENABLE);
	 */
	// -------------------------------------------------

	// Set reload and prescale value for 1/100 s (100 Hz) interrupt
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;		// enable clock line to timer 2
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <initTimer+0x60>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <initTimer+0x60>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0001;		// configure timer 2
 8002a8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a8e:	2201      	movs	r2, #1
 8002a90:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 0x03FF;		// set reload value
 8002a92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a96:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 0x0270;		// set prescale value
 8002a9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aa0:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8002aa4:	851a      	strh	r2, [r3, #40]	@ 0x28

	TIM2->DIER |= 0x0001;	// enable timer 2 interrupts
 8002aa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	60d3      	str	r3, [r2, #12]

	uint8_t priority = 2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	4619      	mov	r1, r3
 8002abe:	201c      	movs	r0, #28
 8002ac0:	f7ff ffb0 	bl	8002a24 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 8002ac4:	201c      	movs	r0, #28
 8002ac6:	f7ff ff93 	bl	80029f0 <NVIC_EnableIRQ>

	TIM2_IRQHandler();
 8002aca:	f000 f807 	bl	8002adc <TIM2_IRQHandler>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000

08002adc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002ae2:	78db      	ldrb	r3, [r3, #3]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002aec:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 8002aee:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002af0:	78db      	ldrb	r3, [r3, #3]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b64      	cmp	r3, #100	@ 0x64
 8002af6:	d10a      	bne.n	8002b0e <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8002af8:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b00:	789b      	ldrb	r3, [r3, #2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b0a:	709a      	strb	r2, [r3, #2]
 8002b0c:	e030      	b.n	8002b70 <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b10:	789b      	ldrb	r3, [r3, #2]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b3c      	cmp	r3, #60	@ 0x3c
 8002b16:	d10a      	bne.n	8002b2e <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 8002b1e:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b2a:	705a      	strb	r2, [r3, #1]
 8002b2c:	e020      	b.n	8002b70 <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b3c      	cmp	r3, #60	@ 0x3c
 8002b36:	d10a      	bne.n	8002b4e <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e010      	b.n	8002b70 <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b18      	cmp	r3, #24
 8002b56:	d10b      	bne.n	8002b70 <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 8002b6a:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <TIM2_IRQHandler+0xa4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002b70:	2101      	movs	r1, #1
 8002b72:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002b76:	f7ff f805 	bl	8001b84 <TIM_ClearITPendingBit>
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200002e8 	.word	0x200002e8

08002b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b84:	480d      	ldr	r0, [pc, #52]	@ (8002bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480d      	ldr	r0, [pc, #52]	@ (8002bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b8a:	490e      	ldr	r1, [pc, #56]	@ (8002bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002bc8 <LoopForever+0xe>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8002bd0 <LoopForever+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bae:	f7ff fe8b 	bl	80028c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bb2:	f000 ffbf 	bl	8003b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bb6:	f7ff fc91 	bl	80024dc <main>

08002bba <LoopForever>:

LoopForever:
    b LoopForever
 8002bba:	e7fe      	b.n	8002bba <LoopForever>
  ldr   r0, =_estack
 8002bbc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc4:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002bc8:	08005a6c 	.word	0x08005a6c
  ldr r2, =_sbss
 8002bcc:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002bd0:	2000043c 	.word	0x2000043c

08002bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC1_2_IRQHandler>

08002bd6 <__cvt>:
 8002bd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bda:	ec57 6b10 	vmov	r6, r7, d0
 8002bde:	2f00      	cmp	r7, #0
 8002be0:	460c      	mov	r4, r1
 8002be2:	4619      	mov	r1, r3
 8002be4:	463b      	mov	r3, r7
 8002be6:	bfbb      	ittet	lt
 8002be8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002bec:	461f      	movlt	r7, r3
 8002bee:	2300      	movge	r3, #0
 8002bf0:	232d      	movlt	r3, #45	@ 0x2d
 8002bf2:	700b      	strb	r3, [r1, #0]
 8002bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002bf6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002bfa:	4691      	mov	r9, r2
 8002bfc:	f023 0820 	bic.w	r8, r3, #32
 8002c00:	bfbc      	itt	lt
 8002c02:	4632      	movlt	r2, r6
 8002c04:	4616      	movlt	r6, r2
 8002c06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002c0a:	d005      	beq.n	8002c18 <__cvt+0x42>
 8002c0c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002c10:	d100      	bne.n	8002c14 <__cvt+0x3e>
 8002c12:	3401      	adds	r4, #1
 8002c14:	2102      	movs	r1, #2
 8002c16:	e000      	b.n	8002c1a <__cvt+0x44>
 8002c18:	2103      	movs	r1, #3
 8002c1a:	ab03      	add	r3, sp, #12
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	ab02      	add	r3, sp, #8
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	ec47 6b10 	vmov	d0, r6, r7
 8002c26:	4653      	mov	r3, sl
 8002c28:	4622      	mov	r2, r4
 8002c2a:	f001 f841 	bl	8003cb0 <_dtoa_r>
 8002c2e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002c32:	4605      	mov	r5, r0
 8002c34:	d119      	bne.n	8002c6a <__cvt+0x94>
 8002c36:	f019 0f01 	tst.w	r9, #1
 8002c3a:	d00e      	beq.n	8002c5a <__cvt+0x84>
 8002c3c:	eb00 0904 	add.w	r9, r0, r4
 8002c40:	2200      	movs	r2, #0
 8002c42:	2300      	movs	r3, #0
 8002c44:	4630      	mov	r0, r6
 8002c46:	4639      	mov	r1, r7
 8002c48:	f7fd ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c4c:	b108      	cbz	r0, 8002c52 <__cvt+0x7c>
 8002c4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002c52:	2230      	movs	r2, #48	@ 0x30
 8002c54:	9b03      	ldr	r3, [sp, #12]
 8002c56:	454b      	cmp	r3, r9
 8002c58:	d31e      	bcc.n	8002c98 <__cvt+0xc2>
 8002c5a:	9b03      	ldr	r3, [sp, #12]
 8002c5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002c5e:	1b5b      	subs	r3, r3, r5
 8002c60:	4628      	mov	r0, r5
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	b004      	add	sp, #16
 8002c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002c6e:	eb00 0904 	add.w	r9, r0, r4
 8002c72:	d1e5      	bne.n	8002c40 <__cvt+0x6a>
 8002c74:	7803      	ldrb	r3, [r0, #0]
 8002c76:	2b30      	cmp	r3, #48	@ 0x30
 8002c78:	d10a      	bne.n	8002c90 <__cvt+0xba>
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4630      	mov	r0, r6
 8002c80:	4639      	mov	r1, r7
 8002c82:	f7fd ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c86:	b918      	cbnz	r0, 8002c90 <__cvt+0xba>
 8002c88:	f1c4 0401 	rsb	r4, r4, #1
 8002c8c:	f8ca 4000 	str.w	r4, [sl]
 8002c90:	f8da 3000 	ldr.w	r3, [sl]
 8002c94:	4499      	add	r9, r3
 8002c96:	e7d3      	b.n	8002c40 <__cvt+0x6a>
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	9103      	str	r1, [sp, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e7d9      	b.n	8002c54 <__cvt+0x7e>

08002ca0 <__exponent>:
 8002ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	bfba      	itte	lt
 8002ca6:	4249      	neglt	r1, r1
 8002ca8:	232d      	movlt	r3, #45	@ 0x2d
 8002caa:	232b      	movge	r3, #43	@ 0x2b
 8002cac:	2909      	cmp	r1, #9
 8002cae:	7002      	strb	r2, [r0, #0]
 8002cb0:	7043      	strb	r3, [r0, #1]
 8002cb2:	dd29      	ble.n	8002d08 <__exponent+0x68>
 8002cb4:	f10d 0307 	add.w	r3, sp, #7
 8002cb8:	461d      	mov	r5, r3
 8002cba:	270a      	movs	r7, #10
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	fbb1 f6f7 	udiv	r6, r1, r7
 8002cc2:	fb07 1416 	mls	r4, r7, r6, r1
 8002cc6:	3430      	adds	r4, #48	@ 0x30
 8002cc8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002ccc:	460c      	mov	r4, r1
 8002cce:	2c63      	cmp	r4, #99	@ 0x63
 8002cd0:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	dcf1      	bgt.n	8002cbc <__exponent+0x1c>
 8002cd8:	3130      	adds	r1, #48	@ 0x30
 8002cda:	1e94      	subs	r4, r2, #2
 8002cdc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ce0:	1c41      	adds	r1, r0, #1
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	42ab      	cmp	r3, r5
 8002ce6:	d30a      	bcc.n	8002cfe <__exponent+0x5e>
 8002ce8:	f10d 0309 	add.w	r3, sp, #9
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	42ac      	cmp	r4, r5
 8002cf0:	bf88      	it	hi
 8002cf2:	2300      	movhi	r3, #0
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	4403      	add	r3, r0
 8002cf8:	1a18      	subs	r0, r3, r0
 8002cfa:	b003      	add	sp, #12
 8002cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002d02:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002d06:	e7ed      	b.n	8002ce4 <__exponent+0x44>
 8002d08:	2330      	movs	r3, #48	@ 0x30
 8002d0a:	3130      	adds	r1, #48	@ 0x30
 8002d0c:	7083      	strb	r3, [r0, #2]
 8002d0e:	70c1      	strb	r1, [r0, #3]
 8002d10:	1d03      	adds	r3, r0, #4
 8002d12:	e7f1      	b.n	8002cf8 <__exponent+0x58>

08002d14 <_printf_float>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	b08d      	sub	sp, #52	@ 0x34
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002d20:	4616      	mov	r6, r2
 8002d22:	461f      	mov	r7, r3
 8002d24:	4605      	mov	r5, r0
 8002d26:	f000 fec7 	bl	8003ab8 <_localeconv_r>
 8002d2a:	6803      	ldr	r3, [r0, #0]
 8002d2c:	9304      	str	r3, [sp, #16]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fa9e 	bl	8000270 <strlen>
 8002d34:	2300      	movs	r3, #0
 8002d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d38:	f8d8 3000 	ldr.w	r3, [r8]
 8002d3c:	9005      	str	r0, [sp, #20]
 8002d3e:	3307      	adds	r3, #7
 8002d40:	f023 0307 	bic.w	r3, r3, #7
 8002d44:	f103 0208 	add.w	r2, r3, #8
 8002d48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002d4c:	f8d4 b000 	ldr.w	fp, [r4]
 8002d50:	f8c8 2000 	str.w	r2, [r8]
 8002d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002d5c:	9307      	str	r3, [sp, #28]
 8002d5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fdc <_printf_float+0x2c8>)
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	f7fd fedc 	bl	8000b2c <__aeabi_dcmpun>
 8002d74:	bb70      	cbnz	r0, 8002dd4 <_printf_float+0xc0>
 8002d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d7a:	4b98      	ldr	r3, [pc, #608]	@ (8002fdc <_printf_float+0x2c8>)
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	f7fd feb6 	bl	8000af0 <__aeabi_dcmple>
 8002d84:	bb30      	cbnz	r0, 8002dd4 <_printf_float+0xc0>
 8002d86:	2200      	movs	r2, #0
 8002d88:	2300      	movs	r3, #0
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	f7fd fea5 	bl	8000adc <__aeabi_dcmplt>
 8002d92:	b110      	cbz	r0, 8002d9a <_printf_float+0x86>
 8002d94:	232d      	movs	r3, #45	@ 0x2d
 8002d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d9a:	4a91      	ldr	r2, [pc, #580]	@ (8002fe0 <_printf_float+0x2cc>)
 8002d9c:	4b91      	ldr	r3, [pc, #580]	@ (8002fe4 <_printf_float+0x2d0>)
 8002d9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002da2:	bf8c      	ite	hi
 8002da4:	4690      	movhi	r8, r2
 8002da6:	4698      	movls	r8, r3
 8002da8:	2303      	movs	r3, #3
 8002daa:	6123      	str	r3, [r4, #16]
 8002dac:	f02b 0304 	bic.w	r3, fp, #4
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	f04f 0900 	mov.w	r9, #0
 8002db6:	9700      	str	r7, [sp, #0]
 8002db8:	4633      	mov	r3, r6
 8002dba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f000 f9d2 	bl	8003168 <_printf_common>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	f040 808d 	bne.w	8002ee4 <_printf_float+0x1d0>
 8002dca:	f04f 30ff 	mov.w	r0, #4294967295
 8002dce:	b00d      	add	sp, #52	@ 0x34
 8002dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	4640      	mov	r0, r8
 8002dda:	4649      	mov	r1, r9
 8002ddc:	f7fd fea6 	bl	8000b2c <__aeabi_dcmpun>
 8002de0:	b140      	cbz	r0, 8002df4 <_printf_float+0xe0>
 8002de2:	464b      	mov	r3, r9
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bfbc      	itt	lt
 8002de8:	232d      	movlt	r3, #45	@ 0x2d
 8002dea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002dee:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe8 <_printf_float+0x2d4>)
 8002df0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fec <_printf_float+0x2d8>)
 8002df2:	e7d4      	b.n	8002d9e <_printf_float+0x8a>
 8002df4:	6863      	ldr	r3, [r4, #4]
 8002df6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002dfa:	9206      	str	r2, [sp, #24]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	d13b      	bne.n	8002e78 <_printf_float+0x164>
 8002e00:	2306      	movs	r3, #6
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002e08:	2300      	movs	r3, #0
 8002e0a:	6022      	str	r2, [r4, #0]
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002e10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002e14:	ab09      	add	r3, sp, #36	@ 0x24
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	6861      	ldr	r1, [r4, #4]
 8002e1a:	ec49 8b10 	vmov	d0, r8, r9
 8002e1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002e22:	4628      	mov	r0, r5
 8002e24:	f7ff fed7 	bl	8002bd6 <__cvt>
 8002e28:	9b06      	ldr	r3, [sp, #24]
 8002e2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002e2c:	2b47      	cmp	r3, #71	@ 0x47
 8002e2e:	4680      	mov	r8, r0
 8002e30:	d129      	bne.n	8002e86 <_printf_float+0x172>
 8002e32:	1cc8      	adds	r0, r1, #3
 8002e34:	db02      	blt.n	8002e3c <_printf_float+0x128>
 8002e36:	6863      	ldr	r3, [r4, #4]
 8002e38:	4299      	cmp	r1, r3
 8002e3a:	dd41      	ble.n	8002ec0 <_printf_float+0x1ac>
 8002e3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8002e40:	fa5f fa8a 	uxtb.w	sl, sl
 8002e44:	3901      	subs	r1, #1
 8002e46:	4652      	mov	r2, sl
 8002e48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002e4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8002e4e:	f7ff ff27 	bl	8002ca0 <__exponent>
 8002e52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002e54:	1813      	adds	r3, r2, r0
 8002e56:	2a01      	cmp	r2, #1
 8002e58:	4681      	mov	r9, r0
 8002e5a:	6123      	str	r3, [r4, #16]
 8002e5c:	dc02      	bgt.n	8002e64 <_printf_float+0x150>
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	07d2      	lsls	r2, r2, #31
 8002e62:	d501      	bpl.n	8002e68 <_printf_float+0x154>
 8002e64:	3301      	adds	r3, #1
 8002e66:	6123      	str	r3, [r4, #16]
 8002e68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0a2      	beq.n	8002db6 <_printf_float+0xa2>
 8002e70:	232d      	movs	r3, #45	@ 0x2d
 8002e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e76:	e79e      	b.n	8002db6 <_printf_float+0xa2>
 8002e78:	9a06      	ldr	r2, [sp, #24]
 8002e7a:	2a47      	cmp	r2, #71	@ 0x47
 8002e7c:	d1c2      	bne.n	8002e04 <_printf_float+0xf0>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1c0      	bne.n	8002e04 <_printf_float+0xf0>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e7bd      	b.n	8002e02 <_printf_float+0xee>
 8002e86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002e8a:	d9db      	bls.n	8002e44 <_printf_float+0x130>
 8002e8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002e90:	d118      	bne.n	8002ec4 <_printf_float+0x1b0>
 8002e92:	2900      	cmp	r1, #0
 8002e94:	6863      	ldr	r3, [r4, #4]
 8002e96:	dd0b      	ble.n	8002eb0 <_printf_float+0x19c>
 8002e98:	6121      	str	r1, [r4, #16]
 8002e9a:	b913      	cbnz	r3, 8002ea2 <_printf_float+0x18e>
 8002e9c:	6822      	ldr	r2, [r4, #0]
 8002e9e:	07d0      	lsls	r0, r2, #31
 8002ea0:	d502      	bpl.n	8002ea8 <_printf_float+0x194>
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	440b      	add	r3, r1
 8002ea6:	6123      	str	r3, [r4, #16]
 8002ea8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002eaa:	f04f 0900 	mov.w	r9, #0
 8002eae:	e7db      	b.n	8002e68 <_printf_float+0x154>
 8002eb0:	b913      	cbnz	r3, 8002eb8 <_printf_float+0x1a4>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	07d2      	lsls	r2, r2, #31
 8002eb6:	d501      	bpl.n	8002ebc <_printf_float+0x1a8>
 8002eb8:	3302      	adds	r3, #2
 8002eba:	e7f4      	b.n	8002ea6 <_printf_float+0x192>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e7f2      	b.n	8002ea6 <_printf_float+0x192>
 8002ec0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ec6:	4299      	cmp	r1, r3
 8002ec8:	db05      	blt.n	8002ed6 <_printf_float+0x1c2>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	6121      	str	r1, [r4, #16]
 8002ece:	07d8      	lsls	r0, r3, #31
 8002ed0:	d5ea      	bpl.n	8002ea8 <_printf_float+0x194>
 8002ed2:	1c4b      	adds	r3, r1, #1
 8002ed4:	e7e7      	b.n	8002ea6 <_printf_float+0x192>
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	bfd4      	ite	le
 8002eda:	f1c1 0202 	rsble	r2, r1, #2
 8002ede:	2201      	movgt	r2, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	e7e0      	b.n	8002ea6 <_printf_float+0x192>
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	055a      	lsls	r2, r3, #21
 8002ee8:	d407      	bmi.n	8002efa <_printf_float+0x1e6>
 8002eea:	6923      	ldr	r3, [r4, #16]
 8002eec:	4642      	mov	r2, r8
 8002eee:	4631      	mov	r1, r6
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	47b8      	blx	r7
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d12b      	bne.n	8002f50 <_printf_float+0x23c>
 8002ef8:	e767      	b.n	8002dca <_printf_float+0xb6>
 8002efa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002efe:	f240 80dd 	bls.w	80030bc <_printf_float+0x3a8>
 8002f02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f06:	2200      	movs	r2, #0
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f7fd fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d033      	beq.n	8002f7a <_printf_float+0x266>
 8002f12:	4a37      	ldr	r2, [pc, #220]	@ (8002ff0 <_printf_float+0x2dc>)
 8002f14:	2301      	movs	r3, #1
 8002f16:	4631      	mov	r1, r6
 8002f18:	4628      	mov	r0, r5
 8002f1a:	47b8      	blx	r7
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	f43f af54 	beq.w	8002dca <_printf_float+0xb6>
 8002f22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002f26:	4543      	cmp	r3, r8
 8002f28:	db02      	blt.n	8002f30 <_printf_float+0x21c>
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	07d8      	lsls	r0, r3, #31
 8002f2e:	d50f      	bpl.n	8002f50 <_printf_float+0x23c>
 8002f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f34:	4631      	mov	r1, r6
 8002f36:	4628      	mov	r0, r5
 8002f38:	47b8      	blx	r7
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	f43f af45 	beq.w	8002dca <_printf_float+0xb6>
 8002f40:	f04f 0900 	mov.w	r9, #0
 8002f44:	f108 38ff 	add.w	r8, r8, #4294967295
 8002f48:	f104 0a1a 	add.w	sl, r4, #26
 8002f4c:	45c8      	cmp	r8, r9
 8002f4e:	dc09      	bgt.n	8002f64 <_printf_float+0x250>
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	079b      	lsls	r3, r3, #30
 8002f54:	f100 8103 	bmi.w	800315e <_printf_float+0x44a>
 8002f58:	68e0      	ldr	r0, [r4, #12]
 8002f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f5c:	4298      	cmp	r0, r3
 8002f5e:	bfb8      	it	lt
 8002f60:	4618      	movlt	r0, r3
 8002f62:	e734      	b.n	8002dce <_printf_float+0xba>
 8002f64:	2301      	movs	r3, #1
 8002f66:	4652      	mov	r2, sl
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	47b8      	blx	r7
 8002f6e:	3001      	adds	r0, #1
 8002f70:	f43f af2b 	beq.w	8002dca <_printf_float+0xb6>
 8002f74:	f109 0901 	add.w	r9, r9, #1
 8002f78:	e7e8      	b.n	8002f4c <_printf_float+0x238>
 8002f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dc39      	bgt.n	8002ff4 <_printf_float+0x2e0>
 8002f80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <_printf_float+0x2dc>)
 8002f82:	2301      	movs	r3, #1
 8002f84:	4631      	mov	r1, r6
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b8      	blx	r7
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	f43f af1d 	beq.w	8002dca <_printf_float+0xb6>
 8002f90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002f94:	ea59 0303 	orrs.w	r3, r9, r3
 8002f98:	d102      	bne.n	8002fa0 <_printf_float+0x28c>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	07d9      	lsls	r1, r3, #31
 8002f9e:	d5d7      	bpl.n	8002f50 <_printf_float+0x23c>
 8002fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	47b8      	blx	r7
 8002faa:	3001      	adds	r0, #1
 8002fac:	f43f af0d 	beq.w	8002dca <_printf_float+0xb6>
 8002fb0:	f04f 0a00 	mov.w	sl, #0
 8002fb4:	f104 0b1a 	add.w	fp, r4, #26
 8002fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fba:	425b      	negs	r3, r3
 8002fbc:	4553      	cmp	r3, sl
 8002fbe:	dc01      	bgt.n	8002fc4 <_printf_float+0x2b0>
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	e793      	b.n	8002eec <_printf_float+0x1d8>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	465a      	mov	r2, fp
 8002fc8:	4631      	mov	r1, r6
 8002fca:	4628      	mov	r0, r5
 8002fcc:	47b8      	blx	r7
 8002fce:	3001      	adds	r0, #1
 8002fd0:	f43f aefb 	beq.w	8002dca <_printf_float+0xb6>
 8002fd4:	f10a 0a01 	add.w	sl, sl, #1
 8002fd8:	e7ee      	b.n	8002fb8 <_printf_float+0x2a4>
 8002fda:	bf00      	nop
 8002fdc:	7fefffff 	.word	0x7fefffff
 8002fe0:	080056ea 	.word	0x080056ea
 8002fe4:	080056e6 	.word	0x080056e6
 8002fe8:	080056f2 	.word	0x080056f2
 8002fec:	080056ee 	.word	0x080056ee
 8002ff0:	080056f6 	.word	0x080056f6
 8002ff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ff6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002ffa:	4553      	cmp	r3, sl
 8002ffc:	bfa8      	it	ge
 8002ffe:	4653      	movge	r3, sl
 8003000:	2b00      	cmp	r3, #0
 8003002:	4699      	mov	r9, r3
 8003004:	dc36      	bgt.n	8003074 <_printf_float+0x360>
 8003006:	f04f 0b00 	mov.w	fp, #0
 800300a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800300e:	f104 021a 	add.w	r2, r4, #26
 8003012:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003014:	9306      	str	r3, [sp, #24]
 8003016:	eba3 0309 	sub.w	r3, r3, r9
 800301a:	455b      	cmp	r3, fp
 800301c:	dc31      	bgt.n	8003082 <_printf_float+0x36e>
 800301e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003020:	459a      	cmp	sl, r3
 8003022:	dc3a      	bgt.n	800309a <_printf_float+0x386>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	07da      	lsls	r2, r3, #31
 8003028:	d437      	bmi.n	800309a <_printf_float+0x386>
 800302a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800302c:	ebaa 0903 	sub.w	r9, sl, r3
 8003030:	9b06      	ldr	r3, [sp, #24]
 8003032:	ebaa 0303 	sub.w	r3, sl, r3
 8003036:	4599      	cmp	r9, r3
 8003038:	bfa8      	it	ge
 800303a:	4699      	movge	r9, r3
 800303c:	f1b9 0f00 	cmp.w	r9, #0
 8003040:	dc33      	bgt.n	80030aa <_printf_float+0x396>
 8003042:	f04f 0800 	mov.w	r8, #0
 8003046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800304a:	f104 0b1a 	add.w	fp, r4, #26
 800304e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003050:	ebaa 0303 	sub.w	r3, sl, r3
 8003054:	eba3 0309 	sub.w	r3, r3, r9
 8003058:	4543      	cmp	r3, r8
 800305a:	f77f af79 	ble.w	8002f50 <_printf_float+0x23c>
 800305e:	2301      	movs	r3, #1
 8003060:	465a      	mov	r2, fp
 8003062:	4631      	mov	r1, r6
 8003064:	4628      	mov	r0, r5
 8003066:	47b8      	blx	r7
 8003068:	3001      	adds	r0, #1
 800306a:	f43f aeae 	beq.w	8002dca <_printf_float+0xb6>
 800306e:	f108 0801 	add.w	r8, r8, #1
 8003072:	e7ec      	b.n	800304e <_printf_float+0x33a>
 8003074:	4642      	mov	r2, r8
 8003076:	4631      	mov	r1, r6
 8003078:	4628      	mov	r0, r5
 800307a:	47b8      	blx	r7
 800307c:	3001      	adds	r0, #1
 800307e:	d1c2      	bne.n	8003006 <_printf_float+0x2f2>
 8003080:	e6a3      	b.n	8002dca <_printf_float+0xb6>
 8003082:	2301      	movs	r3, #1
 8003084:	4631      	mov	r1, r6
 8003086:	4628      	mov	r0, r5
 8003088:	9206      	str	r2, [sp, #24]
 800308a:	47b8      	blx	r7
 800308c:	3001      	adds	r0, #1
 800308e:	f43f ae9c 	beq.w	8002dca <_printf_float+0xb6>
 8003092:	9a06      	ldr	r2, [sp, #24]
 8003094:	f10b 0b01 	add.w	fp, fp, #1
 8003098:	e7bb      	b.n	8003012 <_printf_float+0x2fe>
 800309a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800309e:	4631      	mov	r1, r6
 80030a0:	4628      	mov	r0, r5
 80030a2:	47b8      	blx	r7
 80030a4:	3001      	adds	r0, #1
 80030a6:	d1c0      	bne.n	800302a <_printf_float+0x316>
 80030a8:	e68f      	b.n	8002dca <_printf_float+0xb6>
 80030aa:	9a06      	ldr	r2, [sp, #24]
 80030ac:	464b      	mov	r3, r9
 80030ae:	4442      	add	r2, r8
 80030b0:	4631      	mov	r1, r6
 80030b2:	4628      	mov	r0, r5
 80030b4:	47b8      	blx	r7
 80030b6:	3001      	adds	r0, #1
 80030b8:	d1c3      	bne.n	8003042 <_printf_float+0x32e>
 80030ba:	e686      	b.n	8002dca <_printf_float+0xb6>
 80030bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80030c0:	f1ba 0f01 	cmp.w	sl, #1
 80030c4:	dc01      	bgt.n	80030ca <_printf_float+0x3b6>
 80030c6:	07db      	lsls	r3, r3, #31
 80030c8:	d536      	bpl.n	8003138 <_printf_float+0x424>
 80030ca:	2301      	movs	r3, #1
 80030cc:	4642      	mov	r2, r8
 80030ce:	4631      	mov	r1, r6
 80030d0:	4628      	mov	r0, r5
 80030d2:	47b8      	blx	r7
 80030d4:	3001      	adds	r0, #1
 80030d6:	f43f ae78 	beq.w	8002dca <_printf_float+0xb6>
 80030da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030de:	4631      	mov	r1, r6
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b8      	blx	r7
 80030e4:	3001      	adds	r0, #1
 80030e6:	f43f ae70 	beq.w	8002dca <_printf_float+0xb6>
 80030ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80030ee:	2200      	movs	r2, #0
 80030f0:	2300      	movs	r3, #0
 80030f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030f6:	f7fd fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80030fa:	b9c0      	cbnz	r0, 800312e <_printf_float+0x41a>
 80030fc:	4653      	mov	r3, sl
 80030fe:	f108 0201 	add.w	r2, r8, #1
 8003102:	4631      	mov	r1, r6
 8003104:	4628      	mov	r0, r5
 8003106:	47b8      	blx	r7
 8003108:	3001      	adds	r0, #1
 800310a:	d10c      	bne.n	8003126 <_printf_float+0x412>
 800310c:	e65d      	b.n	8002dca <_printf_float+0xb6>
 800310e:	2301      	movs	r3, #1
 8003110:	465a      	mov	r2, fp
 8003112:	4631      	mov	r1, r6
 8003114:	4628      	mov	r0, r5
 8003116:	47b8      	blx	r7
 8003118:	3001      	adds	r0, #1
 800311a:	f43f ae56 	beq.w	8002dca <_printf_float+0xb6>
 800311e:	f108 0801 	add.w	r8, r8, #1
 8003122:	45d0      	cmp	r8, sl
 8003124:	dbf3      	blt.n	800310e <_printf_float+0x3fa>
 8003126:	464b      	mov	r3, r9
 8003128:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800312c:	e6df      	b.n	8002eee <_printf_float+0x1da>
 800312e:	f04f 0800 	mov.w	r8, #0
 8003132:	f104 0b1a 	add.w	fp, r4, #26
 8003136:	e7f4      	b.n	8003122 <_printf_float+0x40e>
 8003138:	2301      	movs	r3, #1
 800313a:	4642      	mov	r2, r8
 800313c:	e7e1      	b.n	8003102 <_printf_float+0x3ee>
 800313e:	2301      	movs	r3, #1
 8003140:	464a      	mov	r2, r9
 8003142:	4631      	mov	r1, r6
 8003144:	4628      	mov	r0, r5
 8003146:	47b8      	blx	r7
 8003148:	3001      	adds	r0, #1
 800314a:	f43f ae3e 	beq.w	8002dca <_printf_float+0xb6>
 800314e:	f108 0801 	add.w	r8, r8, #1
 8003152:	68e3      	ldr	r3, [r4, #12]
 8003154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003156:	1a5b      	subs	r3, r3, r1
 8003158:	4543      	cmp	r3, r8
 800315a:	dcf0      	bgt.n	800313e <_printf_float+0x42a>
 800315c:	e6fc      	b.n	8002f58 <_printf_float+0x244>
 800315e:	f04f 0800 	mov.w	r8, #0
 8003162:	f104 0919 	add.w	r9, r4, #25
 8003166:	e7f4      	b.n	8003152 <_printf_float+0x43e>

08003168 <_printf_common>:
 8003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	4616      	mov	r6, r2
 800316e:	4698      	mov	r8, r3
 8003170:	688a      	ldr	r2, [r1, #8]
 8003172:	690b      	ldr	r3, [r1, #16]
 8003174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003178:	4293      	cmp	r3, r2
 800317a:	bfb8      	it	lt
 800317c:	4613      	movlt	r3, r2
 800317e:	6033      	str	r3, [r6, #0]
 8003180:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003184:	4607      	mov	r7, r0
 8003186:	460c      	mov	r4, r1
 8003188:	b10a      	cbz	r2, 800318e <_printf_common+0x26>
 800318a:	3301      	adds	r3, #1
 800318c:	6033      	str	r3, [r6, #0]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	0699      	lsls	r1, r3, #26
 8003192:	bf42      	ittt	mi
 8003194:	6833      	ldrmi	r3, [r6, #0]
 8003196:	3302      	addmi	r3, #2
 8003198:	6033      	strmi	r3, [r6, #0]
 800319a:	6825      	ldr	r5, [r4, #0]
 800319c:	f015 0506 	ands.w	r5, r5, #6
 80031a0:	d106      	bne.n	80031b0 <_printf_common+0x48>
 80031a2:	f104 0a19 	add.w	sl, r4, #25
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	6832      	ldr	r2, [r6, #0]
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	dc26      	bgt.n	80031fe <_printf_common+0x96>
 80031b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	3b00      	subs	r3, #0
 80031b8:	bf18      	it	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	0692      	lsls	r2, r2, #26
 80031be:	d42b      	bmi.n	8003218 <_printf_common+0xb0>
 80031c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031c4:	4641      	mov	r1, r8
 80031c6:	4638      	mov	r0, r7
 80031c8:	47c8      	blx	r9
 80031ca:	3001      	adds	r0, #1
 80031cc:	d01e      	beq.n	800320c <_printf_common+0xa4>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	6922      	ldr	r2, [r4, #16]
 80031d2:	f003 0306 	and.w	r3, r3, #6
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf02      	ittt	eq
 80031da:	68e5      	ldreq	r5, [r4, #12]
 80031dc:	6833      	ldreq	r3, [r6, #0]
 80031de:	1aed      	subeq	r5, r5, r3
 80031e0:	68a3      	ldr	r3, [r4, #8]
 80031e2:	bf0c      	ite	eq
 80031e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031e8:	2500      	movne	r5, #0
 80031ea:	4293      	cmp	r3, r2
 80031ec:	bfc4      	itt	gt
 80031ee:	1a9b      	subgt	r3, r3, r2
 80031f0:	18ed      	addgt	r5, r5, r3
 80031f2:	2600      	movs	r6, #0
 80031f4:	341a      	adds	r4, #26
 80031f6:	42b5      	cmp	r5, r6
 80031f8:	d11a      	bne.n	8003230 <_printf_common+0xc8>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e008      	b.n	8003210 <_printf_common+0xa8>
 80031fe:	2301      	movs	r3, #1
 8003200:	4652      	mov	r2, sl
 8003202:	4641      	mov	r1, r8
 8003204:	4638      	mov	r0, r7
 8003206:	47c8      	blx	r9
 8003208:	3001      	adds	r0, #1
 800320a:	d103      	bne.n	8003214 <_printf_common+0xac>
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	3501      	adds	r5, #1
 8003216:	e7c6      	b.n	80031a6 <_printf_common+0x3e>
 8003218:	18e1      	adds	r1, r4, r3
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	2030      	movs	r0, #48	@ 0x30
 800321e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003222:	4422      	add	r2, r4
 8003224:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800322c:	3302      	adds	r3, #2
 800322e:	e7c7      	b.n	80031c0 <_printf_common+0x58>
 8003230:	2301      	movs	r3, #1
 8003232:	4622      	mov	r2, r4
 8003234:	4641      	mov	r1, r8
 8003236:	4638      	mov	r0, r7
 8003238:	47c8      	blx	r9
 800323a:	3001      	adds	r0, #1
 800323c:	d0e6      	beq.n	800320c <_printf_common+0xa4>
 800323e:	3601      	adds	r6, #1
 8003240:	e7d9      	b.n	80031f6 <_printf_common+0x8e>
	...

08003244 <_printf_i>:
 8003244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003248:	7e0f      	ldrb	r7, [r1, #24]
 800324a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800324c:	2f78      	cmp	r7, #120	@ 0x78
 800324e:	4691      	mov	r9, r2
 8003250:	4680      	mov	r8, r0
 8003252:	460c      	mov	r4, r1
 8003254:	469a      	mov	sl, r3
 8003256:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800325a:	d807      	bhi.n	800326c <_printf_i+0x28>
 800325c:	2f62      	cmp	r7, #98	@ 0x62
 800325e:	d80a      	bhi.n	8003276 <_printf_i+0x32>
 8003260:	2f00      	cmp	r7, #0
 8003262:	f000 80d1 	beq.w	8003408 <_printf_i+0x1c4>
 8003266:	2f58      	cmp	r7, #88	@ 0x58
 8003268:	f000 80b8 	beq.w	80033dc <_printf_i+0x198>
 800326c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003270:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003274:	e03a      	b.n	80032ec <_printf_i+0xa8>
 8003276:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800327a:	2b15      	cmp	r3, #21
 800327c:	d8f6      	bhi.n	800326c <_printf_i+0x28>
 800327e:	a101      	add	r1, pc, #4	@ (adr r1, 8003284 <_printf_i+0x40>)
 8003280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003284:	080032dd 	.word	0x080032dd
 8003288:	080032f1 	.word	0x080032f1
 800328c:	0800326d 	.word	0x0800326d
 8003290:	0800326d 	.word	0x0800326d
 8003294:	0800326d 	.word	0x0800326d
 8003298:	0800326d 	.word	0x0800326d
 800329c:	080032f1 	.word	0x080032f1
 80032a0:	0800326d 	.word	0x0800326d
 80032a4:	0800326d 	.word	0x0800326d
 80032a8:	0800326d 	.word	0x0800326d
 80032ac:	0800326d 	.word	0x0800326d
 80032b0:	080033ef 	.word	0x080033ef
 80032b4:	0800331b 	.word	0x0800331b
 80032b8:	080033a9 	.word	0x080033a9
 80032bc:	0800326d 	.word	0x0800326d
 80032c0:	0800326d 	.word	0x0800326d
 80032c4:	08003411 	.word	0x08003411
 80032c8:	0800326d 	.word	0x0800326d
 80032cc:	0800331b 	.word	0x0800331b
 80032d0:	0800326d 	.word	0x0800326d
 80032d4:	0800326d 	.word	0x0800326d
 80032d8:	080033b1 	.word	0x080033b1
 80032dc:	6833      	ldr	r3, [r6, #0]
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6032      	str	r2, [r6, #0]
 80032e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032ec:	2301      	movs	r3, #1
 80032ee:	e09c      	b.n	800342a <_printf_i+0x1e6>
 80032f0:	6833      	ldr	r3, [r6, #0]
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	1d19      	adds	r1, r3, #4
 80032f6:	6031      	str	r1, [r6, #0]
 80032f8:	0606      	lsls	r6, r0, #24
 80032fa:	d501      	bpl.n	8003300 <_printf_i+0xbc>
 80032fc:	681d      	ldr	r5, [r3, #0]
 80032fe:	e003      	b.n	8003308 <_printf_i+0xc4>
 8003300:	0645      	lsls	r5, r0, #25
 8003302:	d5fb      	bpl.n	80032fc <_printf_i+0xb8>
 8003304:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003308:	2d00      	cmp	r5, #0
 800330a:	da03      	bge.n	8003314 <_printf_i+0xd0>
 800330c:	232d      	movs	r3, #45	@ 0x2d
 800330e:	426d      	negs	r5, r5
 8003310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003314:	4858      	ldr	r0, [pc, #352]	@ (8003478 <_printf_i+0x234>)
 8003316:	230a      	movs	r3, #10
 8003318:	e011      	b.n	800333e <_printf_i+0xfa>
 800331a:	6821      	ldr	r1, [r4, #0]
 800331c:	6833      	ldr	r3, [r6, #0]
 800331e:	0608      	lsls	r0, r1, #24
 8003320:	f853 5b04 	ldr.w	r5, [r3], #4
 8003324:	d402      	bmi.n	800332c <_printf_i+0xe8>
 8003326:	0649      	lsls	r1, r1, #25
 8003328:	bf48      	it	mi
 800332a:	b2ad      	uxthmi	r5, r5
 800332c:	2f6f      	cmp	r7, #111	@ 0x6f
 800332e:	4852      	ldr	r0, [pc, #328]	@ (8003478 <_printf_i+0x234>)
 8003330:	6033      	str	r3, [r6, #0]
 8003332:	bf14      	ite	ne
 8003334:	230a      	movne	r3, #10
 8003336:	2308      	moveq	r3, #8
 8003338:	2100      	movs	r1, #0
 800333a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800333e:	6866      	ldr	r6, [r4, #4]
 8003340:	60a6      	str	r6, [r4, #8]
 8003342:	2e00      	cmp	r6, #0
 8003344:	db05      	blt.n	8003352 <_printf_i+0x10e>
 8003346:	6821      	ldr	r1, [r4, #0]
 8003348:	432e      	orrs	r6, r5
 800334a:	f021 0104 	bic.w	r1, r1, #4
 800334e:	6021      	str	r1, [r4, #0]
 8003350:	d04b      	beq.n	80033ea <_printf_i+0x1a6>
 8003352:	4616      	mov	r6, r2
 8003354:	fbb5 f1f3 	udiv	r1, r5, r3
 8003358:	fb03 5711 	mls	r7, r3, r1, r5
 800335c:	5dc7      	ldrb	r7, [r0, r7]
 800335e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003362:	462f      	mov	r7, r5
 8003364:	42bb      	cmp	r3, r7
 8003366:	460d      	mov	r5, r1
 8003368:	d9f4      	bls.n	8003354 <_printf_i+0x110>
 800336a:	2b08      	cmp	r3, #8
 800336c:	d10b      	bne.n	8003386 <_printf_i+0x142>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	07df      	lsls	r7, r3, #31
 8003372:	d508      	bpl.n	8003386 <_printf_i+0x142>
 8003374:	6923      	ldr	r3, [r4, #16]
 8003376:	6861      	ldr	r1, [r4, #4]
 8003378:	4299      	cmp	r1, r3
 800337a:	bfde      	ittt	le
 800337c:	2330      	movle	r3, #48	@ 0x30
 800337e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003382:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003386:	1b92      	subs	r2, r2, r6
 8003388:	6122      	str	r2, [r4, #16]
 800338a:	f8cd a000 	str.w	sl, [sp]
 800338e:	464b      	mov	r3, r9
 8003390:	aa03      	add	r2, sp, #12
 8003392:	4621      	mov	r1, r4
 8003394:	4640      	mov	r0, r8
 8003396:	f7ff fee7 	bl	8003168 <_printf_common>
 800339a:	3001      	adds	r0, #1
 800339c:	d14a      	bne.n	8003434 <_printf_i+0x1f0>
 800339e:	f04f 30ff 	mov.w	r0, #4294967295
 80033a2:	b004      	add	sp, #16
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	f043 0320 	orr.w	r3, r3, #32
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	4832      	ldr	r0, [pc, #200]	@ (800347c <_printf_i+0x238>)
 80033b2:	2778      	movs	r7, #120	@ 0x78
 80033b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	6831      	ldr	r1, [r6, #0]
 80033bc:	061f      	lsls	r7, r3, #24
 80033be:	f851 5b04 	ldr.w	r5, [r1], #4
 80033c2:	d402      	bmi.n	80033ca <_printf_i+0x186>
 80033c4:	065f      	lsls	r7, r3, #25
 80033c6:	bf48      	it	mi
 80033c8:	b2ad      	uxthmi	r5, r5
 80033ca:	6031      	str	r1, [r6, #0]
 80033cc:	07d9      	lsls	r1, r3, #31
 80033ce:	bf44      	itt	mi
 80033d0:	f043 0320 	orrmi.w	r3, r3, #32
 80033d4:	6023      	strmi	r3, [r4, #0]
 80033d6:	b11d      	cbz	r5, 80033e0 <_printf_i+0x19c>
 80033d8:	2310      	movs	r3, #16
 80033da:	e7ad      	b.n	8003338 <_printf_i+0xf4>
 80033dc:	4826      	ldr	r0, [pc, #152]	@ (8003478 <_printf_i+0x234>)
 80033de:	e7e9      	b.n	80033b4 <_printf_i+0x170>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	f023 0320 	bic.w	r3, r3, #32
 80033e6:	6023      	str	r3, [r4, #0]
 80033e8:	e7f6      	b.n	80033d8 <_printf_i+0x194>
 80033ea:	4616      	mov	r6, r2
 80033ec:	e7bd      	b.n	800336a <_printf_i+0x126>
 80033ee:	6833      	ldr	r3, [r6, #0]
 80033f0:	6825      	ldr	r5, [r4, #0]
 80033f2:	6961      	ldr	r1, [r4, #20]
 80033f4:	1d18      	adds	r0, r3, #4
 80033f6:	6030      	str	r0, [r6, #0]
 80033f8:	062e      	lsls	r6, r5, #24
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	d501      	bpl.n	8003402 <_printf_i+0x1be>
 80033fe:	6019      	str	r1, [r3, #0]
 8003400:	e002      	b.n	8003408 <_printf_i+0x1c4>
 8003402:	0668      	lsls	r0, r5, #25
 8003404:	d5fb      	bpl.n	80033fe <_printf_i+0x1ba>
 8003406:	8019      	strh	r1, [r3, #0]
 8003408:	2300      	movs	r3, #0
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	4616      	mov	r6, r2
 800340e:	e7bc      	b.n	800338a <_printf_i+0x146>
 8003410:	6833      	ldr	r3, [r6, #0]
 8003412:	1d1a      	adds	r2, r3, #4
 8003414:	6032      	str	r2, [r6, #0]
 8003416:	681e      	ldr	r6, [r3, #0]
 8003418:	6862      	ldr	r2, [r4, #4]
 800341a:	2100      	movs	r1, #0
 800341c:	4630      	mov	r0, r6
 800341e:	f7fc fed7 	bl	80001d0 <memchr>
 8003422:	b108      	cbz	r0, 8003428 <_printf_i+0x1e4>
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	6060      	str	r0, [r4, #4]
 8003428:	6863      	ldr	r3, [r4, #4]
 800342a:	6123      	str	r3, [r4, #16]
 800342c:	2300      	movs	r3, #0
 800342e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003432:	e7aa      	b.n	800338a <_printf_i+0x146>
 8003434:	6923      	ldr	r3, [r4, #16]
 8003436:	4632      	mov	r2, r6
 8003438:	4649      	mov	r1, r9
 800343a:	4640      	mov	r0, r8
 800343c:	47d0      	blx	sl
 800343e:	3001      	adds	r0, #1
 8003440:	d0ad      	beq.n	800339e <_printf_i+0x15a>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	079b      	lsls	r3, r3, #30
 8003446:	d413      	bmi.n	8003470 <_printf_i+0x22c>
 8003448:	68e0      	ldr	r0, [r4, #12]
 800344a:	9b03      	ldr	r3, [sp, #12]
 800344c:	4298      	cmp	r0, r3
 800344e:	bfb8      	it	lt
 8003450:	4618      	movlt	r0, r3
 8003452:	e7a6      	b.n	80033a2 <_printf_i+0x15e>
 8003454:	2301      	movs	r3, #1
 8003456:	4632      	mov	r2, r6
 8003458:	4649      	mov	r1, r9
 800345a:	4640      	mov	r0, r8
 800345c:	47d0      	blx	sl
 800345e:	3001      	adds	r0, #1
 8003460:	d09d      	beq.n	800339e <_printf_i+0x15a>
 8003462:	3501      	adds	r5, #1
 8003464:	68e3      	ldr	r3, [r4, #12]
 8003466:	9903      	ldr	r1, [sp, #12]
 8003468:	1a5b      	subs	r3, r3, r1
 800346a:	42ab      	cmp	r3, r5
 800346c:	dcf2      	bgt.n	8003454 <_printf_i+0x210>
 800346e:	e7eb      	b.n	8003448 <_printf_i+0x204>
 8003470:	2500      	movs	r5, #0
 8003472:	f104 0619 	add.w	r6, r4, #25
 8003476:	e7f5      	b.n	8003464 <_printf_i+0x220>
 8003478:	080056f8 	.word	0x080056f8
 800347c:	08005709 	.word	0x08005709

08003480 <__sflush_r>:
 8003480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003488:	0716      	lsls	r6, r2, #28
 800348a:	4605      	mov	r5, r0
 800348c:	460c      	mov	r4, r1
 800348e:	d454      	bmi.n	800353a <__sflush_r+0xba>
 8003490:	684b      	ldr	r3, [r1, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	dc02      	bgt.n	800349c <__sflush_r+0x1c>
 8003496:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	dd48      	ble.n	800352e <__sflush_r+0xae>
 800349c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800349e:	2e00      	cmp	r6, #0
 80034a0:	d045      	beq.n	800352e <__sflush_r+0xae>
 80034a2:	2300      	movs	r3, #0
 80034a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034a8:	682f      	ldr	r7, [r5, #0]
 80034aa:	6a21      	ldr	r1, [r4, #32]
 80034ac:	602b      	str	r3, [r5, #0]
 80034ae:	d030      	beq.n	8003512 <__sflush_r+0x92>
 80034b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034b2:	89a3      	ldrh	r3, [r4, #12]
 80034b4:	0759      	lsls	r1, r3, #29
 80034b6:	d505      	bpl.n	80034c4 <__sflush_r+0x44>
 80034b8:	6863      	ldr	r3, [r4, #4]
 80034ba:	1ad2      	subs	r2, r2, r3
 80034bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034be:	b10b      	cbz	r3, 80034c4 <__sflush_r+0x44>
 80034c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034c8:	6a21      	ldr	r1, [r4, #32]
 80034ca:	4628      	mov	r0, r5
 80034cc:	47b0      	blx	r6
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	d106      	bne.n	80034e2 <__sflush_r+0x62>
 80034d4:	6829      	ldr	r1, [r5, #0]
 80034d6:	291d      	cmp	r1, #29
 80034d8:	d82b      	bhi.n	8003532 <__sflush_r+0xb2>
 80034da:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <__sflush_r+0x104>)
 80034dc:	40ca      	lsrs	r2, r1
 80034de:	07d6      	lsls	r6, r2, #31
 80034e0:	d527      	bpl.n	8003532 <__sflush_r+0xb2>
 80034e2:	2200      	movs	r2, #0
 80034e4:	6062      	str	r2, [r4, #4]
 80034e6:	04d9      	lsls	r1, r3, #19
 80034e8:	6922      	ldr	r2, [r4, #16]
 80034ea:	6022      	str	r2, [r4, #0]
 80034ec:	d504      	bpl.n	80034f8 <__sflush_r+0x78>
 80034ee:	1c42      	adds	r2, r0, #1
 80034f0:	d101      	bne.n	80034f6 <__sflush_r+0x76>
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	b903      	cbnz	r3, 80034f8 <__sflush_r+0x78>
 80034f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80034f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034fa:	602f      	str	r7, [r5, #0]
 80034fc:	b1b9      	cbz	r1, 800352e <__sflush_r+0xae>
 80034fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003502:	4299      	cmp	r1, r3
 8003504:	d002      	beq.n	800350c <__sflush_r+0x8c>
 8003506:	4628      	mov	r0, r5
 8003508:	f001 f9a2 	bl	8004850 <_free_r>
 800350c:	2300      	movs	r3, #0
 800350e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003510:	e00d      	b.n	800352e <__sflush_r+0xae>
 8003512:	2301      	movs	r3, #1
 8003514:	4628      	mov	r0, r5
 8003516:	47b0      	blx	r6
 8003518:	4602      	mov	r2, r0
 800351a:	1c50      	adds	r0, r2, #1
 800351c:	d1c9      	bne.n	80034b2 <__sflush_r+0x32>
 800351e:	682b      	ldr	r3, [r5, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0c6      	beq.n	80034b2 <__sflush_r+0x32>
 8003524:	2b1d      	cmp	r3, #29
 8003526:	d001      	beq.n	800352c <__sflush_r+0xac>
 8003528:	2b16      	cmp	r3, #22
 800352a:	d11e      	bne.n	800356a <__sflush_r+0xea>
 800352c:	602f      	str	r7, [r5, #0]
 800352e:	2000      	movs	r0, #0
 8003530:	e022      	b.n	8003578 <__sflush_r+0xf8>
 8003532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003536:	b21b      	sxth	r3, r3
 8003538:	e01b      	b.n	8003572 <__sflush_r+0xf2>
 800353a:	690f      	ldr	r7, [r1, #16]
 800353c:	2f00      	cmp	r7, #0
 800353e:	d0f6      	beq.n	800352e <__sflush_r+0xae>
 8003540:	0793      	lsls	r3, r2, #30
 8003542:	680e      	ldr	r6, [r1, #0]
 8003544:	bf08      	it	eq
 8003546:	694b      	ldreq	r3, [r1, #20]
 8003548:	600f      	str	r7, [r1, #0]
 800354a:	bf18      	it	ne
 800354c:	2300      	movne	r3, #0
 800354e:	eba6 0807 	sub.w	r8, r6, r7
 8003552:	608b      	str	r3, [r1, #8]
 8003554:	f1b8 0f00 	cmp.w	r8, #0
 8003558:	dde9      	ble.n	800352e <__sflush_r+0xae>
 800355a:	6a21      	ldr	r1, [r4, #32]
 800355c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800355e:	4643      	mov	r3, r8
 8003560:	463a      	mov	r2, r7
 8003562:	4628      	mov	r0, r5
 8003564:	47b0      	blx	r6
 8003566:	2800      	cmp	r0, #0
 8003568:	dc08      	bgt.n	800357c <__sflush_r+0xfc>
 800356a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800356e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	4407      	add	r7, r0
 800357e:	eba8 0800 	sub.w	r8, r8, r0
 8003582:	e7e7      	b.n	8003554 <__sflush_r+0xd4>
 8003584:	20400001 	.word	0x20400001

08003588 <_fflush_r>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	690b      	ldr	r3, [r1, #16]
 800358c:	4605      	mov	r5, r0
 800358e:	460c      	mov	r4, r1
 8003590:	b913      	cbnz	r3, 8003598 <_fflush_r+0x10>
 8003592:	2500      	movs	r5, #0
 8003594:	4628      	mov	r0, r5
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	b118      	cbz	r0, 80035a2 <_fflush_r+0x1a>
 800359a:	6a03      	ldr	r3, [r0, #32]
 800359c:	b90b      	cbnz	r3, 80035a2 <_fflush_r+0x1a>
 800359e:	f000 f8a7 	bl	80036f0 <__sinit>
 80035a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f3      	beq.n	8003592 <_fflush_r+0xa>
 80035aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035ac:	07d0      	lsls	r0, r2, #31
 80035ae:	d404      	bmi.n	80035ba <_fflush_r+0x32>
 80035b0:	0599      	lsls	r1, r3, #22
 80035b2:	d402      	bmi.n	80035ba <_fflush_r+0x32>
 80035b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035b6:	f000 fae2 	bl	8003b7e <__retarget_lock_acquire_recursive>
 80035ba:	4628      	mov	r0, r5
 80035bc:	4621      	mov	r1, r4
 80035be:	f7ff ff5f 	bl	8003480 <__sflush_r>
 80035c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035c4:	07da      	lsls	r2, r3, #31
 80035c6:	4605      	mov	r5, r0
 80035c8:	d4e4      	bmi.n	8003594 <_fflush_r+0xc>
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	059b      	lsls	r3, r3, #22
 80035ce:	d4e1      	bmi.n	8003594 <_fflush_r+0xc>
 80035d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035d2:	f000 fad5 	bl	8003b80 <__retarget_lock_release_recursive>
 80035d6:	e7dd      	b.n	8003594 <_fflush_r+0xc>

080035d8 <std>:
 80035d8:	2300      	movs	r3, #0
 80035da:	b510      	push	{r4, lr}
 80035dc:	4604      	mov	r4, r0
 80035de:	e9c0 3300 	strd	r3, r3, [r0]
 80035e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035e6:	6083      	str	r3, [r0, #8]
 80035e8:	8181      	strh	r1, [r0, #12]
 80035ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80035ec:	81c2      	strh	r2, [r0, #14]
 80035ee:	6183      	str	r3, [r0, #24]
 80035f0:	4619      	mov	r1, r3
 80035f2:	2208      	movs	r2, #8
 80035f4:	305c      	adds	r0, #92	@ 0x5c
 80035f6:	f000 fa57 	bl	8003aa8 <memset>
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <std+0x58>)
 80035fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80035fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003634 <std+0x5c>)
 8003600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <std+0x60>)
 8003604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <std+0x64>)
 8003608:	6323      	str	r3, [r4, #48]	@ 0x30
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <std+0x68>)
 800360c:	6224      	str	r4, [r4, #32]
 800360e:	429c      	cmp	r4, r3
 8003610:	d006      	beq.n	8003620 <std+0x48>
 8003612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003616:	4294      	cmp	r4, r2
 8003618:	d002      	beq.n	8003620 <std+0x48>
 800361a:	33d0      	adds	r3, #208	@ 0xd0
 800361c:	429c      	cmp	r4, r3
 800361e:	d105      	bne.n	800362c <std+0x54>
 8003620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003628:	f000 baa8 	b.w	8003b7c <__retarget_lock_init_recursive>
 800362c:	bd10      	pop	{r4, pc}
 800362e:	bf00      	nop
 8003630:	080038f9 	.word	0x080038f9
 8003634:	0800391b 	.word	0x0800391b
 8003638:	08003953 	.word	0x08003953
 800363c:	08003977 	.word	0x08003977
 8003640:	200002ec 	.word	0x200002ec

08003644 <stdio_exit_handler>:
 8003644:	4a02      	ldr	r2, [pc, #8]	@ (8003650 <stdio_exit_handler+0xc>)
 8003646:	4903      	ldr	r1, [pc, #12]	@ (8003654 <stdio_exit_handler+0x10>)
 8003648:	4803      	ldr	r0, [pc, #12]	@ (8003658 <stdio_exit_handler+0x14>)
 800364a:	f000 b869 	b.w	8003720 <_fwalk_sglue>
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000
 8003654:	08003589 	.word	0x08003589
 8003658:	20000010 	.word	0x20000010

0800365c <cleanup_stdio>:
 800365c:	6841      	ldr	r1, [r0, #4]
 800365e:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <cleanup_stdio+0x34>)
 8003660:	4299      	cmp	r1, r3
 8003662:	b510      	push	{r4, lr}
 8003664:	4604      	mov	r4, r0
 8003666:	d001      	beq.n	800366c <cleanup_stdio+0x10>
 8003668:	f7ff ff8e 	bl	8003588 <_fflush_r>
 800366c:	68a1      	ldr	r1, [r4, #8]
 800366e:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <cleanup_stdio+0x38>)
 8003670:	4299      	cmp	r1, r3
 8003672:	d002      	beq.n	800367a <cleanup_stdio+0x1e>
 8003674:	4620      	mov	r0, r4
 8003676:	f7ff ff87 	bl	8003588 <_fflush_r>
 800367a:	68e1      	ldr	r1, [r4, #12]
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <cleanup_stdio+0x3c>)
 800367e:	4299      	cmp	r1, r3
 8003680:	d004      	beq.n	800368c <cleanup_stdio+0x30>
 8003682:	4620      	mov	r0, r4
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	f7ff bf7e 	b.w	8003588 <_fflush_r>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	bf00      	nop
 8003690:	200002ec 	.word	0x200002ec
 8003694:	20000354 	.word	0x20000354
 8003698:	200003bc 	.word	0x200003bc

0800369c <global_stdio_init.part.0>:
 800369c:	b510      	push	{r4, lr}
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <global_stdio_init.part.0+0x30>)
 80036a0:	4c0b      	ldr	r4, [pc, #44]	@ (80036d0 <global_stdio_init.part.0+0x34>)
 80036a2:	4a0c      	ldr	r2, [pc, #48]	@ (80036d4 <global_stdio_init.part.0+0x38>)
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4620      	mov	r0, r4
 80036a8:	2200      	movs	r2, #0
 80036aa:	2104      	movs	r1, #4
 80036ac:	f7ff ff94 	bl	80035d8 <std>
 80036b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036b4:	2201      	movs	r2, #1
 80036b6:	2109      	movs	r1, #9
 80036b8:	f7ff ff8e 	bl	80035d8 <std>
 80036bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036c0:	2202      	movs	r2, #2
 80036c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c6:	2112      	movs	r1, #18
 80036c8:	f7ff bf86 	b.w	80035d8 <std>
 80036cc:	20000424 	.word	0x20000424
 80036d0:	200002ec 	.word	0x200002ec
 80036d4:	08003645 	.word	0x08003645

080036d8 <__sfp_lock_acquire>:
 80036d8:	4801      	ldr	r0, [pc, #4]	@ (80036e0 <__sfp_lock_acquire+0x8>)
 80036da:	f000 ba50 	b.w	8003b7e <__retarget_lock_acquire_recursive>
 80036de:	bf00      	nop
 80036e0:	2000042d 	.word	0x2000042d

080036e4 <__sfp_lock_release>:
 80036e4:	4801      	ldr	r0, [pc, #4]	@ (80036ec <__sfp_lock_release+0x8>)
 80036e6:	f000 ba4b 	b.w	8003b80 <__retarget_lock_release_recursive>
 80036ea:	bf00      	nop
 80036ec:	2000042d 	.word	0x2000042d

080036f0 <__sinit>:
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4604      	mov	r4, r0
 80036f4:	f7ff fff0 	bl	80036d8 <__sfp_lock_acquire>
 80036f8:	6a23      	ldr	r3, [r4, #32]
 80036fa:	b11b      	cbz	r3, 8003704 <__sinit+0x14>
 80036fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003700:	f7ff bff0 	b.w	80036e4 <__sfp_lock_release>
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <__sinit+0x28>)
 8003706:	6223      	str	r3, [r4, #32]
 8003708:	4b04      	ldr	r3, [pc, #16]	@ (800371c <__sinit+0x2c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f5      	bne.n	80036fc <__sinit+0xc>
 8003710:	f7ff ffc4 	bl	800369c <global_stdio_init.part.0>
 8003714:	e7f2      	b.n	80036fc <__sinit+0xc>
 8003716:	bf00      	nop
 8003718:	0800365d 	.word	0x0800365d
 800371c:	20000424 	.word	0x20000424

08003720 <_fwalk_sglue>:
 8003720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003724:	4607      	mov	r7, r0
 8003726:	4688      	mov	r8, r1
 8003728:	4614      	mov	r4, r2
 800372a:	2600      	movs	r6, #0
 800372c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003730:	f1b9 0901 	subs.w	r9, r9, #1
 8003734:	d505      	bpl.n	8003742 <_fwalk_sglue+0x22>
 8003736:	6824      	ldr	r4, [r4, #0]
 8003738:	2c00      	cmp	r4, #0
 800373a:	d1f7      	bne.n	800372c <_fwalk_sglue+0xc>
 800373c:	4630      	mov	r0, r6
 800373e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d907      	bls.n	8003758 <_fwalk_sglue+0x38>
 8003748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800374c:	3301      	adds	r3, #1
 800374e:	d003      	beq.n	8003758 <_fwalk_sglue+0x38>
 8003750:	4629      	mov	r1, r5
 8003752:	4638      	mov	r0, r7
 8003754:	47c0      	blx	r8
 8003756:	4306      	orrs	r6, r0
 8003758:	3568      	adds	r5, #104	@ 0x68
 800375a:	e7e9      	b.n	8003730 <_fwalk_sglue+0x10>

0800375c <iprintf>:
 800375c:	b40f      	push	{r0, r1, r2, r3}
 800375e:	b507      	push	{r0, r1, r2, lr}
 8003760:	4906      	ldr	r1, [pc, #24]	@ (800377c <iprintf+0x20>)
 8003762:	ab04      	add	r3, sp, #16
 8003764:	6808      	ldr	r0, [r1, #0]
 8003766:	f853 2b04 	ldr.w	r2, [r3], #4
 800376a:	6881      	ldr	r1, [r0, #8]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	f001 fd13 	bl	8005198 <_vfiprintf_r>
 8003772:	b003      	add	sp, #12
 8003774:	f85d eb04 	ldr.w	lr, [sp], #4
 8003778:	b004      	add	sp, #16
 800377a:	4770      	bx	lr
 800377c:	2000000c 	.word	0x2000000c

08003780 <setbuf>:
 8003780:	fab1 f281 	clz	r2, r1
 8003784:	0952      	lsrs	r2, r2, #5
 8003786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800378a:	0052      	lsls	r2, r2, #1
 800378c:	f000 b800 	b.w	8003790 <setvbuf>

08003790 <setvbuf>:
 8003790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003794:	461d      	mov	r5, r3
 8003796:	4b57      	ldr	r3, [pc, #348]	@ (80038f4 <setvbuf+0x164>)
 8003798:	681f      	ldr	r7, [r3, #0]
 800379a:	4604      	mov	r4, r0
 800379c:	460e      	mov	r6, r1
 800379e:	4690      	mov	r8, r2
 80037a0:	b127      	cbz	r7, 80037ac <setvbuf+0x1c>
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	b913      	cbnz	r3, 80037ac <setvbuf+0x1c>
 80037a6:	4638      	mov	r0, r7
 80037a8:	f7ff ffa2 	bl	80036f0 <__sinit>
 80037ac:	f1b8 0f02 	cmp.w	r8, #2
 80037b0:	d006      	beq.n	80037c0 <setvbuf+0x30>
 80037b2:	f1b8 0f01 	cmp.w	r8, #1
 80037b6:	f200 809a 	bhi.w	80038ee <setvbuf+0x15e>
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	f2c0 8097 	blt.w	80038ee <setvbuf+0x15e>
 80037c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037c2:	07d9      	lsls	r1, r3, #31
 80037c4:	d405      	bmi.n	80037d2 <setvbuf+0x42>
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	059a      	lsls	r2, r3, #22
 80037ca:	d402      	bmi.n	80037d2 <setvbuf+0x42>
 80037cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ce:	f000 f9d6 	bl	8003b7e <__retarget_lock_acquire_recursive>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4638      	mov	r0, r7
 80037d6:	f7ff fed7 	bl	8003588 <_fflush_r>
 80037da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037dc:	b141      	cbz	r1, 80037f0 <setvbuf+0x60>
 80037de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037e2:	4299      	cmp	r1, r3
 80037e4:	d002      	beq.n	80037ec <setvbuf+0x5c>
 80037e6:	4638      	mov	r0, r7
 80037e8:	f001 f832 	bl	8004850 <_free_r>
 80037ec:	2300      	movs	r3, #0
 80037ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80037f0:	2300      	movs	r3, #0
 80037f2:	61a3      	str	r3, [r4, #24]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	d503      	bpl.n	8003804 <setvbuf+0x74>
 80037fc:	6921      	ldr	r1, [r4, #16]
 80037fe:	4638      	mov	r0, r7
 8003800:	f001 f826 	bl	8004850 <_free_r>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	f1b8 0f02 	cmp.w	r8, #2
 8003812:	81a3      	strh	r3, [r4, #12]
 8003814:	d061      	beq.n	80038da <setvbuf+0x14a>
 8003816:	ab01      	add	r3, sp, #4
 8003818:	466a      	mov	r2, sp
 800381a:	4621      	mov	r1, r4
 800381c:	4638      	mov	r0, r7
 800381e:	f001 fdd3 	bl	80053c8 <__swhatbuf_r>
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	4318      	orrs	r0, r3
 8003826:	81a0      	strh	r0, [r4, #12]
 8003828:	bb2d      	cbnz	r5, 8003876 <setvbuf+0xe6>
 800382a:	9d00      	ldr	r5, [sp, #0]
 800382c:	4628      	mov	r0, r5
 800382e:	f001 f859 	bl	80048e4 <malloc>
 8003832:	4606      	mov	r6, r0
 8003834:	2800      	cmp	r0, #0
 8003836:	d152      	bne.n	80038de <setvbuf+0x14e>
 8003838:	f8dd 9000 	ldr.w	r9, [sp]
 800383c:	45a9      	cmp	r9, r5
 800383e:	d140      	bne.n	80038c2 <setvbuf+0x132>
 8003840:	f04f 35ff 	mov.w	r5, #4294967295
 8003844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	81a2      	strh	r2, [r4, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	60a2      	str	r2, [r4, #8]
 8003852:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003856:	6022      	str	r2, [r4, #0]
 8003858:	6122      	str	r2, [r4, #16]
 800385a:	2201      	movs	r2, #1
 800385c:	6162      	str	r2, [r4, #20]
 800385e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003860:	07d6      	lsls	r6, r2, #31
 8003862:	d404      	bmi.n	800386e <setvbuf+0xde>
 8003864:	0598      	lsls	r0, r3, #22
 8003866:	d402      	bmi.n	800386e <setvbuf+0xde>
 8003868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800386a:	f000 f989 	bl	8003b80 <__retarget_lock_release_recursive>
 800386e:	4628      	mov	r0, r5
 8003870:	b003      	add	sp, #12
 8003872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003876:	2e00      	cmp	r6, #0
 8003878:	d0d8      	beq.n	800382c <setvbuf+0x9c>
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	b913      	cbnz	r3, 8003884 <setvbuf+0xf4>
 800387e:	4638      	mov	r0, r7
 8003880:	f7ff ff36 	bl	80036f0 <__sinit>
 8003884:	f1b8 0f01 	cmp.w	r8, #1
 8003888:	bf08      	it	eq
 800388a:	89a3      	ldrheq	r3, [r4, #12]
 800388c:	6026      	str	r6, [r4, #0]
 800388e:	bf04      	itt	eq
 8003890:	f043 0301 	orreq.w	r3, r3, #1
 8003894:	81a3      	strheq	r3, [r4, #12]
 8003896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800389a:	f013 0208 	ands.w	r2, r3, #8
 800389e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80038a2:	d01e      	beq.n	80038e2 <setvbuf+0x152>
 80038a4:	07d9      	lsls	r1, r3, #31
 80038a6:	bf41      	itttt	mi
 80038a8:	2200      	movmi	r2, #0
 80038aa:	426d      	negmi	r5, r5
 80038ac:	60a2      	strmi	r2, [r4, #8]
 80038ae:	61a5      	strmi	r5, [r4, #24]
 80038b0:	bf58      	it	pl
 80038b2:	60a5      	strpl	r5, [r4, #8]
 80038b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038b6:	07d2      	lsls	r2, r2, #31
 80038b8:	d401      	bmi.n	80038be <setvbuf+0x12e>
 80038ba:	059b      	lsls	r3, r3, #22
 80038bc:	d513      	bpl.n	80038e6 <setvbuf+0x156>
 80038be:	2500      	movs	r5, #0
 80038c0:	e7d5      	b.n	800386e <setvbuf+0xde>
 80038c2:	4648      	mov	r0, r9
 80038c4:	f001 f80e 	bl	80048e4 <malloc>
 80038c8:	4606      	mov	r6, r0
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d0b8      	beq.n	8003840 <setvbuf+0xb0>
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	464d      	mov	r5, r9
 80038d8:	e7cf      	b.n	800387a <setvbuf+0xea>
 80038da:	2500      	movs	r5, #0
 80038dc:	e7b2      	b.n	8003844 <setvbuf+0xb4>
 80038de:	46a9      	mov	r9, r5
 80038e0:	e7f5      	b.n	80038ce <setvbuf+0x13e>
 80038e2:	60a2      	str	r2, [r4, #8]
 80038e4:	e7e6      	b.n	80038b4 <setvbuf+0x124>
 80038e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e8:	f000 f94a 	bl	8003b80 <__retarget_lock_release_recursive>
 80038ec:	e7e7      	b.n	80038be <setvbuf+0x12e>
 80038ee:	f04f 35ff 	mov.w	r5, #4294967295
 80038f2:	e7bc      	b.n	800386e <setvbuf+0xde>
 80038f4:	2000000c 	.word	0x2000000c

080038f8 <__sread>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	460c      	mov	r4, r1
 80038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003900:	f000 f900 	bl	8003b04 <_read_r>
 8003904:	2800      	cmp	r0, #0
 8003906:	bfab      	itete	ge
 8003908:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800390a:	89a3      	ldrhlt	r3, [r4, #12]
 800390c:	181b      	addge	r3, r3, r0
 800390e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003912:	bfac      	ite	ge
 8003914:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003916:	81a3      	strhlt	r3, [r4, #12]
 8003918:	bd10      	pop	{r4, pc}

0800391a <__swrite>:
 800391a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391e:	461f      	mov	r7, r3
 8003920:	898b      	ldrh	r3, [r1, #12]
 8003922:	05db      	lsls	r3, r3, #23
 8003924:	4605      	mov	r5, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4616      	mov	r6, r2
 800392a:	d505      	bpl.n	8003938 <__swrite+0x1e>
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	2302      	movs	r3, #2
 8003932:	2200      	movs	r2, #0
 8003934:	f000 f8d4 	bl	8003ae0 <_lseek_r>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800393e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003942:	81a3      	strh	r3, [r4, #12]
 8003944:	4632      	mov	r2, r6
 8003946:	463b      	mov	r3, r7
 8003948:	4628      	mov	r0, r5
 800394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	f7fe ba1d 	b.w	8001d8c <_write_r>

08003952 <__sseek>:
 8003952:	b510      	push	{r4, lr}
 8003954:	460c      	mov	r4, r1
 8003956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395a:	f000 f8c1 	bl	8003ae0 <_lseek_r>
 800395e:	1c43      	adds	r3, r0, #1
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	bf15      	itete	ne
 8003964:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003966:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800396a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800396e:	81a3      	strheq	r3, [r4, #12]
 8003970:	bf18      	it	ne
 8003972:	81a3      	strhne	r3, [r4, #12]
 8003974:	bd10      	pop	{r4, pc}

08003976 <__sclose>:
 8003976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397a:	f000 b8a1 	b.w	8003ac0 <_close_r>

0800397e <__swbuf_r>:
 800397e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003980:	460e      	mov	r6, r1
 8003982:	4614      	mov	r4, r2
 8003984:	4605      	mov	r5, r0
 8003986:	b118      	cbz	r0, 8003990 <__swbuf_r+0x12>
 8003988:	6a03      	ldr	r3, [r0, #32]
 800398a:	b90b      	cbnz	r3, 8003990 <__swbuf_r+0x12>
 800398c:	f7ff feb0 	bl	80036f0 <__sinit>
 8003990:	69a3      	ldr	r3, [r4, #24]
 8003992:	60a3      	str	r3, [r4, #8]
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	071a      	lsls	r2, r3, #28
 8003998:	d501      	bpl.n	800399e <__swbuf_r+0x20>
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	b943      	cbnz	r3, 80039b0 <__swbuf_r+0x32>
 800399e:	4621      	mov	r1, r4
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 f82b 	bl	80039fc <__swsetup_r>
 80039a6:	b118      	cbz	r0, 80039b0 <__swbuf_r+0x32>
 80039a8:	f04f 37ff 	mov.w	r7, #4294967295
 80039ac:	4638      	mov	r0, r7
 80039ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	6922      	ldr	r2, [r4, #16]
 80039b4:	1a98      	subs	r0, r3, r2
 80039b6:	6963      	ldr	r3, [r4, #20]
 80039b8:	b2f6      	uxtb	r6, r6
 80039ba:	4283      	cmp	r3, r0
 80039bc:	4637      	mov	r7, r6
 80039be:	dc05      	bgt.n	80039cc <__swbuf_r+0x4e>
 80039c0:	4621      	mov	r1, r4
 80039c2:	4628      	mov	r0, r5
 80039c4:	f7ff fde0 	bl	8003588 <_fflush_r>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d1ed      	bne.n	80039a8 <__swbuf_r+0x2a>
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	60a3      	str	r3, [r4, #8]
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	6022      	str	r2, [r4, #0]
 80039d8:	701e      	strb	r6, [r3, #0]
 80039da:	6962      	ldr	r2, [r4, #20]
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	429a      	cmp	r2, r3
 80039e0:	d004      	beq.n	80039ec <__swbuf_r+0x6e>
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	07db      	lsls	r3, r3, #31
 80039e6:	d5e1      	bpl.n	80039ac <__swbuf_r+0x2e>
 80039e8:	2e0a      	cmp	r6, #10
 80039ea:	d1df      	bne.n	80039ac <__swbuf_r+0x2e>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f7ff fdca 	bl	8003588 <_fflush_r>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d0d9      	beq.n	80039ac <__swbuf_r+0x2e>
 80039f8:	e7d6      	b.n	80039a8 <__swbuf_r+0x2a>
	...

080039fc <__swsetup_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4b29      	ldr	r3, [pc, #164]	@ (8003aa4 <__swsetup_r+0xa8>)
 8003a00:	4605      	mov	r5, r0
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	460c      	mov	r4, r1
 8003a06:	b118      	cbz	r0, 8003a10 <__swsetup_r+0x14>
 8003a08:	6a03      	ldr	r3, [r0, #32]
 8003a0a:	b90b      	cbnz	r3, 8003a10 <__swsetup_r+0x14>
 8003a0c:	f7ff fe70 	bl	80036f0 <__sinit>
 8003a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a14:	0719      	lsls	r1, r3, #28
 8003a16:	d422      	bmi.n	8003a5e <__swsetup_r+0x62>
 8003a18:	06da      	lsls	r2, r3, #27
 8003a1a:	d407      	bmi.n	8003a2c <__swsetup_r+0x30>
 8003a1c:	2209      	movs	r2, #9
 8003a1e:	602a      	str	r2, [r5, #0]
 8003a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2a:	e033      	b.n	8003a94 <__swsetup_r+0x98>
 8003a2c:	0758      	lsls	r0, r3, #29
 8003a2e:	d512      	bpl.n	8003a56 <__swsetup_r+0x5a>
 8003a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a32:	b141      	cbz	r1, 8003a46 <__swsetup_r+0x4a>
 8003a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a38:	4299      	cmp	r1, r3
 8003a3a:	d002      	beq.n	8003a42 <__swsetup_r+0x46>
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 ff07 	bl	8004850 <_free_r>
 8003a42:	2300      	movs	r3, #0
 8003a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	b94b      	cbnz	r3, 8003a76 <__swsetup_r+0x7a>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6c:	d003      	beq.n	8003a76 <__swsetup_r+0x7a>
 8003a6e:	4621      	mov	r1, r4
 8003a70:	4628      	mov	r0, r5
 8003a72:	f001 fccf 	bl	8005414 <__smakebuf_r>
 8003a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a7a:	f013 0201 	ands.w	r2, r3, #1
 8003a7e:	d00a      	beq.n	8003a96 <__swsetup_r+0x9a>
 8003a80:	2200      	movs	r2, #0
 8003a82:	60a2      	str	r2, [r4, #8]
 8003a84:	6962      	ldr	r2, [r4, #20]
 8003a86:	4252      	negs	r2, r2
 8003a88:	61a2      	str	r2, [r4, #24]
 8003a8a:	6922      	ldr	r2, [r4, #16]
 8003a8c:	b942      	cbnz	r2, 8003aa0 <__swsetup_r+0xa4>
 8003a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a92:	d1c5      	bne.n	8003a20 <__swsetup_r+0x24>
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
 8003a96:	0799      	lsls	r1, r3, #30
 8003a98:	bf58      	it	pl
 8003a9a:	6962      	ldrpl	r2, [r4, #20]
 8003a9c:	60a2      	str	r2, [r4, #8]
 8003a9e:	e7f4      	b.n	8003a8a <__swsetup_r+0x8e>
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e7f7      	b.n	8003a94 <__swsetup_r+0x98>
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <memset>:
 8003aa8:	4402      	add	r2, r0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <memset+0xa>
 8003ab0:	4770      	bx	lr
 8003ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab6:	e7f9      	b.n	8003aac <memset+0x4>

08003ab8 <_localeconv_r>:
 8003ab8:	4800      	ldr	r0, [pc, #0]	@ (8003abc <_localeconv_r+0x4>)
 8003aba:	4770      	bx	lr
 8003abc:	2000014c 	.word	0x2000014c

08003ac0 <_close_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d06      	ldr	r5, [pc, #24]	@ (8003adc <_close_r+0x1c>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fe fec8 	bl	8002860 <_close>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_close_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_close_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000428 	.word	0x20000428

08003ae0 <_lseek_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4d07      	ldr	r5, [pc, #28]	@ (8003b00 <_lseek_r+0x20>)
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	4611      	mov	r1, r2
 8003aea:	2200      	movs	r2, #0
 8003aec:	602a      	str	r2, [r5, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7fe fedd 	bl	80028ae <_lseek>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_lseek_r+0x1e>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_lseek_r+0x1e>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000428 	.word	0x20000428

08003b04 <_read_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4d07      	ldr	r5, [pc, #28]	@ (8003b24 <_read_r+0x20>)
 8003b08:	4604      	mov	r4, r0
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	602a      	str	r2, [r5, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f7fe fe87 	bl	8002826 <_read>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_read_r+0x1e>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_read_r+0x1e>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20000428 	.word	0x20000428

08003b28 <__errno>:
 8003b28:	4b01      	ldr	r3, [pc, #4]	@ (8003b30 <__errno+0x8>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	2000000c 	.word	0x2000000c

08003b34 <__libc_init_array>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4d0d      	ldr	r5, [pc, #52]	@ (8003b6c <__libc_init_array+0x38>)
 8003b38:	4c0d      	ldr	r4, [pc, #52]	@ (8003b70 <__libc_init_array+0x3c>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	2600      	movs	r6, #0
 8003b40:	42a6      	cmp	r6, r4
 8003b42:	d109      	bne.n	8003b58 <__libc_init_array+0x24>
 8003b44:	4d0b      	ldr	r5, [pc, #44]	@ (8003b74 <__libc_init_array+0x40>)
 8003b46:	4c0c      	ldr	r4, [pc, #48]	@ (8003b78 <__libc_init_array+0x44>)
 8003b48:	f001 fd90 	bl	800566c <_init>
 8003b4c:	1b64      	subs	r4, r4, r5
 8003b4e:	10a4      	asrs	r4, r4, #2
 8003b50:	2600      	movs	r6, #0
 8003b52:	42a6      	cmp	r6, r4
 8003b54:	d105      	bne.n	8003b62 <__libc_init_array+0x2e>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5c:	4798      	blx	r3
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7ee      	b.n	8003b40 <__libc_init_array+0xc>
 8003b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b66:	4798      	blx	r3
 8003b68:	3601      	adds	r6, #1
 8003b6a:	e7f2      	b.n	8003b52 <__libc_init_array+0x1e>
 8003b6c:	08005a64 	.word	0x08005a64
 8003b70:	08005a64 	.word	0x08005a64
 8003b74:	08005a64 	.word	0x08005a64
 8003b78:	08005a68 	.word	0x08005a68

08003b7c <__retarget_lock_init_recursive>:
 8003b7c:	4770      	bx	lr

08003b7e <__retarget_lock_acquire_recursive>:
 8003b7e:	4770      	bx	lr

08003b80 <__retarget_lock_release_recursive>:
 8003b80:	4770      	bx	lr

08003b82 <memcpy>:
 8003b82:	440a      	add	r2, r1
 8003b84:	4291      	cmp	r1, r2
 8003b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b8a:	d100      	bne.n	8003b8e <memcpy+0xc>
 8003b8c:	4770      	bx	lr
 8003b8e:	b510      	push	{r4, lr}
 8003b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b98:	4291      	cmp	r1, r2
 8003b9a:	d1f9      	bne.n	8003b90 <memcpy+0xe>
 8003b9c:	bd10      	pop	{r4, pc}

08003b9e <quorem>:
 8003b9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba2:	6903      	ldr	r3, [r0, #16]
 8003ba4:	690c      	ldr	r4, [r1, #16]
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	4607      	mov	r7, r0
 8003baa:	db7e      	blt.n	8003caa <quorem+0x10c>
 8003bac:	3c01      	subs	r4, #1
 8003bae:	f101 0814 	add.w	r8, r1, #20
 8003bb2:	00a3      	lsls	r3, r4, #2
 8003bb4:	f100 0514 	add.w	r5, r0, #20
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bd4:	d32e      	bcc.n	8003c34 <quorem+0x96>
 8003bd6:	f04f 0a00 	mov.w	sl, #0
 8003bda:	46c4      	mov	ip, r8
 8003bdc:	46ae      	mov	lr, r5
 8003bde:	46d3      	mov	fp, sl
 8003be0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003be4:	b298      	uxth	r0, r3
 8003be6:	fb06 a000 	mla	r0, r6, r0, sl
 8003bea:	0c02      	lsrs	r2, r0, #16
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	fb06 2303 	mla	r3, r6, r3, r2
 8003bf2:	f8de 2000 	ldr.w	r2, [lr]
 8003bf6:	b280      	uxth	r0, r0
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	1a12      	subs	r2, r2, r0
 8003bfc:	445a      	add	r2, fp
 8003bfe:	f8de 0000 	ldr.w	r0, [lr]
 8003c02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c10:	b292      	uxth	r2, r2
 8003c12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c16:	45e1      	cmp	r9, ip
 8003c18:	f84e 2b04 	str.w	r2, [lr], #4
 8003c1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c20:	d2de      	bcs.n	8003be0 <quorem+0x42>
 8003c22:	9b00      	ldr	r3, [sp, #0]
 8003c24:	58eb      	ldr	r3, [r5, r3]
 8003c26:	b92b      	cbnz	r3, 8003c34 <quorem+0x96>
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	3b04      	subs	r3, #4
 8003c2c:	429d      	cmp	r5, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	d32f      	bcc.n	8003c92 <quorem+0xf4>
 8003c32:	613c      	str	r4, [r7, #16]
 8003c34:	4638      	mov	r0, r7
 8003c36:	f001 f97d 	bl	8004f34 <__mcmp>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	db25      	blt.n	8003c8a <quorem+0xec>
 8003c3e:	4629      	mov	r1, r5
 8003c40:	2000      	movs	r0, #0
 8003c42:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c46:	f8d1 c000 	ldr.w	ip, [r1]
 8003c4a:	fa1f fe82 	uxth.w	lr, r2
 8003c4e:	fa1f f38c 	uxth.w	r3, ip
 8003c52:	eba3 030e 	sub.w	r3, r3, lr
 8003c56:	4403      	add	r3, r0
 8003c58:	0c12      	lsrs	r2, r2, #16
 8003c5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c68:	45c1      	cmp	r9, r8
 8003c6a:	f841 3b04 	str.w	r3, [r1], #4
 8003c6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c72:	d2e6      	bcs.n	8003c42 <quorem+0xa4>
 8003c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c7c:	b922      	cbnz	r2, 8003c88 <quorem+0xea>
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	429d      	cmp	r5, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	d30b      	bcc.n	8003c9e <quorem+0x100>
 8003c86:	613c      	str	r4, [r7, #16]
 8003c88:	3601      	adds	r6, #1
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	b003      	add	sp, #12
 8003c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	3b04      	subs	r3, #4
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	d1cb      	bne.n	8003c32 <quorem+0x94>
 8003c9a:	3c01      	subs	r4, #1
 8003c9c:	e7c6      	b.n	8003c2c <quorem+0x8e>
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	3b04      	subs	r3, #4
 8003ca2:	2a00      	cmp	r2, #0
 8003ca4:	d1ef      	bne.n	8003c86 <quorem+0xe8>
 8003ca6:	3c01      	subs	r4, #1
 8003ca8:	e7ea      	b.n	8003c80 <quorem+0xe2>
 8003caa:	2000      	movs	r0, #0
 8003cac:	e7ee      	b.n	8003c8c <quorem+0xee>
	...

08003cb0 <_dtoa_r>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	69c7      	ldr	r7, [r0, #28]
 8003cb6:	b097      	sub	sp, #92	@ 0x5c
 8003cb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003cbc:	ec55 4b10 	vmov	r4, r5, d0
 8003cc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003cc2:	9107      	str	r1, [sp, #28]
 8003cc4:	4681      	mov	r9, r0
 8003cc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8003cc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8003cca:	b97f      	cbnz	r7, 8003cec <_dtoa_r+0x3c>
 8003ccc:	2010      	movs	r0, #16
 8003cce:	f000 fe09 	bl	80048e4 <malloc>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	f8c9 001c 	str.w	r0, [r9, #28]
 8003cd8:	b920      	cbnz	r0, 8003ce4 <_dtoa_r+0x34>
 8003cda:	4ba9      	ldr	r3, [pc, #676]	@ (8003f80 <_dtoa_r+0x2d0>)
 8003cdc:	21ef      	movs	r1, #239	@ 0xef
 8003cde:	48a9      	ldr	r0, [pc, #676]	@ (8003f84 <_dtoa_r+0x2d4>)
 8003ce0:	f001 fc06 	bl	80054f0 <__assert_func>
 8003ce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003ce8:	6007      	str	r7, [r0, #0]
 8003cea:	60c7      	str	r7, [r0, #12]
 8003cec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	b159      	cbz	r1, 8003d0c <_dtoa_r+0x5c>
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	604a      	str	r2, [r1, #4]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4093      	lsls	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
 8003cfe:	4648      	mov	r0, r9
 8003d00:	f000 fee6 	bl	8004ad0 <_Bfree>
 8003d04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	1e2b      	subs	r3, r5, #0
 8003d0e:	bfb9      	ittee	lt
 8003d10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d14:	9305      	strlt	r3, [sp, #20]
 8003d16:	2300      	movge	r3, #0
 8003d18:	6033      	strge	r3, [r6, #0]
 8003d1a:	9f05      	ldr	r7, [sp, #20]
 8003d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8003f88 <_dtoa_r+0x2d8>)
 8003d1e:	bfbc      	itt	lt
 8003d20:	2201      	movlt	r2, #1
 8003d22:	6032      	strlt	r2, [r6, #0]
 8003d24:	43bb      	bics	r3, r7
 8003d26:	d112      	bne.n	8003d4e <_dtoa_r+0x9e>
 8003d28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003d2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d34:	4323      	orrs	r3, r4
 8003d36:	f000 855a 	beq.w	80047ee <_dtoa_r+0xb3e>
 8003d3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003f9c <_dtoa_r+0x2ec>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 855c 	beq.w	80047fe <_dtoa_r+0xb4e>
 8003d46:	f10a 0303 	add.w	r3, sl, #3
 8003d4a:	f000 bd56 	b.w	80047fa <_dtoa_r+0xb4a>
 8003d4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003d52:	2200      	movs	r2, #0
 8003d54:	ec51 0b17 	vmov	r0, r1, d7
 8003d58:	2300      	movs	r3, #0
 8003d5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003d5e:	f7fc feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d62:	4680      	mov	r8, r0
 8003d64:	b158      	cbz	r0, 8003d7e <_dtoa_r+0xce>
 8003d66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d6e:	b113      	cbz	r3, 8003d76 <_dtoa_r+0xc6>
 8003d70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003d72:	4b86      	ldr	r3, [pc, #536]	@ (8003f8c <_dtoa_r+0x2dc>)
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003fa0 <_dtoa_r+0x2f0>
 8003d7a:	f000 bd40 	b.w	80047fe <_dtoa_r+0xb4e>
 8003d7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003d82:	aa14      	add	r2, sp, #80	@ 0x50
 8003d84:	a915      	add	r1, sp, #84	@ 0x54
 8003d86:	4648      	mov	r0, r9
 8003d88:	f001 f984 	bl	8005094 <__d2b>
 8003d8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003d90:	9002      	str	r0, [sp, #8]
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d078      	beq.n	8003e88 <_dtoa_r+0x1d8>
 8003d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003da4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003da8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003dac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003db0:	4619      	mov	r1, r3
 8003db2:	2200      	movs	r2, #0
 8003db4:	4b76      	ldr	r3, [pc, #472]	@ (8003f90 <_dtoa_r+0x2e0>)
 8003db6:	f7fc fa67 	bl	8000288 <__aeabi_dsub>
 8003dba:	a36b      	add	r3, pc, #428	@ (adr r3, 8003f68 <_dtoa_r+0x2b8>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fc1a 	bl	80005f8 <__aeabi_dmul>
 8003dc4:	a36a      	add	r3, pc, #424	@ (adr r3, 8003f70 <_dtoa_r+0x2c0>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fa5f 	bl	800028c <__adddf3>
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	f7fc fba6 	bl	8000524 <__aeabi_i2d>
 8003dd8:	a367      	add	r3, pc, #412	@ (adr r3, 8003f78 <_dtoa_r+0x2c8>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f7fc fc0b 	bl	80005f8 <__aeabi_dmul>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	f7fc fa4f 	bl	800028c <__adddf3>
 8003dee:	4604      	mov	r4, r0
 8003df0:	460d      	mov	r5, r1
 8003df2:	f7fc feb1 	bl	8000b58 <__aeabi_d2iz>
 8003df6:	2200      	movs	r2, #0
 8003df8:	4607      	mov	r7, r0
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc fe6c 	bl	8000adc <__aeabi_dcmplt>
 8003e04:	b140      	cbz	r0, 8003e18 <_dtoa_r+0x168>
 8003e06:	4638      	mov	r0, r7
 8003e08:	f7fc fb8c 	bl	8000524 <__aeabi_i2d>
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	462b      	mov	r3, r5
 8003e10:	f7fc fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e14:	b900      	cbnz	r0, 8003e18 <_dtoa_r+0x168>
 8003e16:	3f01      	subs	r7, #1
 8003e18:	2f16      	cmp	r7, #22
 8003e1a:	d852      	bhi.n	8003ec2 <_dtoa_r+0x212>
 8003e1c:	4b5d      	ldr	r3, [pc, #372]	@ (8003f94 <_dtoa_r+0x2e4>)
 8003e1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e2a:	f7fc fe57 	bl	8000adc <__aeabi_dcmplt>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d049      	beq.n	8003ec6 <_dtoa_r+0x216>
 8003e32:	3f01      	subs	r7, #1
 8003e34:	2300      	movs	r3, #0
 8003e36:	9310      	str	r3, [sp, #64]	@ 0x40
 8003e38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e3a:	1b9b      	subs	r3, r3, r6
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	bf45      	ittet	mi
 8003e40:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e44:	9300      	strmi	r3, [sp, #0]
 8003e46:	2300      	movpl	r3, #0
 8003e48:	2300      	movmi	r3, #0
 8003e4a:	9206      	str	r2, [sp, #24]
 8003e4c:	bf54      	ite	pl
 8003e4e:	9300      	strpl	r3, [sp, #0]
 8003e50:	9306      	strmi	r3, [sp, #24]
 8003e52:	2f00      	cmp	r7, #0
 8003e54:	db39      	blt.n	8003eca <_dtoa_r+0x21a>
 8003e56:	9b06      	ldr	r3, [sp, #24]
 8003e58:	970d      	str	r7, [sp, #52]	@ 0x34
 8003e5a:	443b      	add	r3, r7
 8003e5c:	9306      	str	r3, [sp, #24]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9308      	str	r3, [sp, #32]
 8003e62:	9b07      	ldr	r3, [sp, #28]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d863      	bhi.n	8003f30 <_dtoa_r+0x280>
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	bfc4      	itt	gt
 8003e6c:	3b04      	subgt	r3, #4
 8003e6e:	9307      	strgt	r3, [sp, #28]
 8003e70:	9b07      	ldr	r3, [sp, #28]
 8003e72:	f1a3 0302 	sub.w	r3, r3, #2
 8003e76:	bfcc      	ite	gt
 8003e78:	2400      	movgt	r4, #0
 8003e7a:	2401      	movle	r4, #1
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d863      	bhi.n	8003f48 <_dtoa_r+0x298>
 8003e80:	e8df f003 	tbb	[pc, r3]
 8003e84:	2b375452 	.word	0x2b375452
 8003e88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003e8c:	441e      	add	r6, r3
 8003e8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	bfc1      	itttt	gt
 8003e96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003e9a:	409f      	lslgt	r7, r3
 8003e9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ea0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003ea4:	bfd6      	itet	le
 8003ea6:	f1c3 0320 	rsble	r3, r3, #32
 8003eaa:	ea47 0003 	orrgt.w	r0, r7, r3
 8003eae:	fa04 f003 	lslle.w	r0, r4, r3
 8003eb2:	f7fc fb27 	bl	8000504 <__aeabi_ui2d>
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003ebc:	3e01      	subs	r6, #1
 8003ebe:	9212      	str	r2, [sp, #72]	@ 0x48
 8003ec0:	e776      	b.n	8003db0 <_dtoa_r+0x100>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e7b7      	b.n	8003e36 <_dtoa_r+0x186>
 8003ec6:	9010      	str	r0, [sp, #64]	@ 0x40
 8003ec8:	e7b6      	b.n	8003e38 <_dtoa_r+0x188>
 8003eca:	9b00      	ldr	r3, [sp, #0]
 8003ecc:	1bdb      	subs	r3, r3, r7
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	427b      	negs	r3, r7
 8003ed2:	9308      	str	r3, [sp, #32]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	930d      	str	r3, [sp, #52]	@ 0x34
 8003ed8:	e7c3      	b.n	8003e62 <_dtoa_r+0x1b2>
 8003eda:	2301      	movs	r3, #1
 8003edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003ee0:	eb07 0b03 	add.w	fp, r7, r3
 8003ee4:	f10b 0301 	add.w	r3, fp, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	9303      	str	r3, [sp, #12]
 8003eec:	bfb8      	it	lt
 8003eee:	2301      	movlt	r3, #1
 8003ef0:	e006      	b.n	8003f00 <_dtoa_r+0x250>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dd28      	ble.n	8003f4e <_dtoa_r+0x29e>
 8003efc:	469b      	mov	fp, r3
 8003efe:	9303      	str	r3, [sp, #12]
 8003f00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003f04:	2100      	movs	r1, #0
 8003f06:	2204      	movs	r2, #4
 8003f08:	f102 0514 	add.w	r5, r2, #20
 8003f0c:	429d      	cmp	r5, r3
 8003f0e:	d926      	bls.n	8003f5e <_dtoa_r+0x2ae>
 8003f10:	6041      	str	r1, [r0, #4]
 8003f12:	4648      	mov	r0, r9
 8003f14:	f000 fd9c 	bl	8004a50 <_Balloc>
 8003f18:	4682      	mov	sl, r0
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d142      	bne.n	8003fa4 <_dtoa_r+0x2f4>
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <_dtoa_r+0x2e8>)
 8003f20:	4602      	mov	r2, r0
 8003f22:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f26:	e6da      	b.n	8003cde <_dtoa_r+0x2e>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e7e3      	b.n	8003ef4 <_dtoa_r+0x244>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e7d5      	b.n	8003edc <_dtoa_r+0x22c>
 8003f30:	2401      	movs	r4, #1
 8003f32:	2300      	movs	r3, #0
 8003f34:	9307      	str	r3, [sp, #28]
 8003f36:	9409      	str	r4, [sp, #36]	@ 0x24
 8003f38:	f04f 3bff 	mov.w	fp, #4294967295
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003f42:	2312      	movs	r3, #18
 8003f44:	920c      	str	r2, [sp, #48]	@ 0x30
 8003f46:	e7db      	b.n	8003f00 <_dtoa_r+0x250>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f4c:	e7f4      	b.n	8003f38 <_dtoa_r+0x288>
 8003f4e:	f04f 0b01 	mov.w	fp, #1
 8003f52:	f8cd b00c 	str.w	fp, [sp, #12]
 8003f56:	465b      	mov	r3, fp
 8003f58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003f5c:	e7d0      	b.n	8003f00 <_dtoa_r+0x250>
 8003f5e:	3101      	adds	r1, #1
 8003f60:	0052      	lsls	r2, r2, #1
 8003f62:	e7d1      	b.n	8003f08 <_dtoa_r+0x258>
 8003f64:	f3af 8000 	nop.w
 8003f68:	636f4361 	.word	0x636f4361
 8003f6c:	3fd287a7 	.word	0x3fd287a7
 8003f70:	8b60c8b3 	.word	0x8b60c8b3
 8003f74:	3fc68a28 	.word	0x3fc68a28
 8003f78:	509f79fb 	.word	0x509f79fb
 8003f7c:	3fd34413 	.word	0x3fd34413
 8003f80:	08005727 	.word	0x08005727
 8003f84:	0800573e 	.word	0x0800573e
 8003f88:	7ff00000 	.word	0x7ff00000
 8003f8c:	080056f7 	.word	0x080056f7
 8003f90:	3ff80000 	.word	0x3ff80000
 8003f94:	08005890 	.word	0x08005890
 8003f98:	08005796 	.word	0x08005796
 8003f9c:	08005723 	.word	0x08005723
 8003fa0:	080056f6 	.word	0x080056f6
 8003fa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003fa8:	6018      	str	r0, [r3, #0]
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	2b0e      	cmp	r3, #14
 8003fae:	f200 80a1 	bhi.w	80040f4 <_dtoa_r+0x444>
 8003fb2:	2c00      	cmp	r4, #0
 8003fb4:	f000 809e 	beq.w	80040f4 <_dtoa_r+0x444>
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	dd33      	ble.n	8004024 <_dtoa_r+0x374>
 8003fbc:	4b9c      	ldr	r3, [pc, #624]	@ (8004230 <_dtoa_r+0x580>)
 8003fbe:	f007 020f 	and.w	r2, r7, #15
 8003fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fc6:	ed93 7b00 	vldr	d7, [r3]
 8003fca:	05f8      	lsls	r0, r7, #23
 8003fcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003fd4:	d516      	bpl.n	8004004 <_dtoa_r+0x354>
 8003fd6:	4b97      	ldr	r3, [pc, #604]	@ (8004234 <_dtoa_r+0x584>)
 8003fd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fe0:	f7fc fc34 	bl	800084c <__aeabi_ddiv>
 8003fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fe8:	f004 040f 	and.w	r4, r4, #15
 8003fec:	2603      	movs	r6, #3
 8003fee:	4d91      	ldr	r5, [pc, #580]	@ (8004234 <_dtoa_r+0x584>)
 8003ff0:	b954      	cbnz	r4, 8004008 <_dtoa_r+0x358>
 8003ff2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ffa:	f7fc fc27 	bl	800084c <__aeabi_ddiv>
 8003ffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004002:	e028      	b.n	8004056 <_dtoa_r+0x3a6>
 8004004:	2602      	movs	r6, #2
 8004006:	e7f2      	b.n	8003fee <_dtoa_r+0x33e>
 8004008:	07e1      	lsls	r1, r4, #31
 800400a:	d508      	bpl.n	800401e <_dtoa_r+0x36e>
 800400c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004014:	f7fc faf0 	bl	80005f8 <__aeabi_dmul>
 8004018:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800401c:	3601      	adds	r6, #1
 800401e:	1064      	asrs	r4, r4, #1
 8004020:	3508      	adds	r5, #8
 8004022:	e7e5      	b.n	8003ff0 <_dtoa_r+0x340>
 8004024:	f000 80af 	beq.w	8004186 <_dtoa_r+0x4d6>
 8004028:	427c      	negs	r4, r7
 800402a:	4b81      	ldr	r3, [pc, #516]	@ (8004230 <_dtoa_r+0x580>)
 800402c:	4d81      	ldr	r5, [pc, #516]	@ (8004234 <_dtoa_r+0x584>)
 800402e:	f004 020f 	and.w	r2, r4, #15
 8004032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800403e:	f7fc fadb 	bl	80005f8 <__aeabi_dmul>
 8004042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004046:	1124      	asrs	r4, r4, #4
 8004048:	2300      	movs	r3, #0
 800404a:	2602      	movs	r6, #2
 800404c:	2c00      	cmp	r4, #0
 800404e:	f040 808f 	bne.w	8004170 <_dtoa_r+0x4c0>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1d3      	bne.n	8003ffe <_dtoa_r+0x34e>
 8004056:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004058:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8094 	beq.w	800418a <_dtoa_r+0x4da>
 8004062:	4b75      	ldr	r3, [pc, #468]	@ (8004238 <_dtoa_r+0x588>)
 8004064:	2200      	movs	r2, #0
 8004066:	4620      	mov	r0, r4
 8004068:	4629      	mov	r1, r5
 800406a:	f7fc fd37 	bl	8000adc <__aeabi_dcmplt>
 800406e:	2800      	cmp	r0, #0
 8004070:	f000 808b 	beq.w	800418a <_dtoa_r+0x4da>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8087 	beq.w	800418a <_dtoa_r+0x4da>
 800407c:	f1bb 0f00 	cmp.w	fp, #0
 8004080:	dd34      	ble.n	80040ec <_dtoa_r+0x43c>
 8004082:	4620      	mov	r0, r4
 8004084:	4b6d      	ldr	r3, [pc, #436]	@ (800423c <_dtoa_r+0x58c>)
 8004086:	2200      	movs	r2, #0
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc fab5 	bl	80005f8 <__aeabi_dmul>
 800408e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004092:	f107 38ff 	add.w	r8, r7, #4294967295
 8004096:	3601      	adds	r6, #1
 8004098:	465c      	mov	r4, fp
 800409a:	4630      	mov	r0, r6
 800409c:	f7fc fa42 	bl	8000524 <__aeabi_i2d>
 80040a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040a4:	f7fc faa8 	bl	80005f8 <__aeabi_dmul>
 80040a8:	4b65      	ldr	r3, [pc, #404]	@ (8004240 <_dtoa_r+0x590>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	f7fc f8ee 	bl	800028c <__adddf3>
 80040b0:	4605      	mov	r5, r0
 80040b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80040b6:	2c00      	cmp	r4, #0
 80040b8:	d16a      	bne.n	8004190 <_dtoa_r+0x4e0>
 80040ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040be:	4b61      	ldr	r3, [pc, #388]	@ (8004244 <_dtoa_r+0x594>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	f7fc f8e1 	bl	8000288 <__aeabi_dsub>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040ce:	462a      	mov	r2, r5
 80040d0:	4633      	mov	r3, r6
 80040d2:	f7fc fd21 	bl	8000b18 <__aeabi_dcmpgt>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f040 8298 	bne.w	800460c <_dtoa_r+0x95c>
 80040dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040e0:	462a      	mov	r2, r5
 80040e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80040e6:	f7fc fcf9 	bl	8000adc <__aeabi_dcmplt>
 80040ea:	bb38      	cbnz	r0, 800413c <_dtoa_r+0x48c>
 80040ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80040f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f2c0 8157 	blt.w	80043aa <_dtoa_r+0x6fa>
 80040fc:	2f0e      	cmp	r7, #14
 80040fe:	f300 8154 	bgt.w	80043aa <_dtoa_r+0x6fa>
 8004102:	4b4b      	ldr	r3, [pc, #300]	@ (8004230 <_dtoa_r+0x580>)
 8004104:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004108:	ed93 7b00 	vldr	d7, [r3]
 800410c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800410e:	2b00      	cmp	r3, #0
 8004110:	ed8d 7b00 	vstr	d7, [sp]
 8004114:	f280 80e5 	bge.w	80042e2 <_dtoa_r+0x632>
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f300 80e1 	bgt.w	80042e2 <_dtoa_r+0x632>
 8004120:	d10c      	bne.n	800413c <_dtoa_r+0x48c>
 8004122:	4b48      	ldr	r3, [pc, #288]	@ (8004244 <_dtoa_r+0x594>)
 8004124:	2200      	movs	r2, #0
 8004126:	ec51 0b17 	vmov	r0, r1, d7
 800412a:	f7fc fa65 	bl	80005f8 <__aeabi_dmul>
 800412e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004132:	f7fc fce7 	bl	8000b04 <__aeabi_dcmpge>
 8004136:	2800      	cmp	r0, #0
 8004138:	f000 8266 	beq.w	8004608 <_dtoa_r+0x958>
 800413c:	2400      	movs	r4, #0
 800413e:	4625      	mov	r5, r4
 8004140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004142:	4656      	mov	r6, sl
 8004144:	ea6f 0803 	mvn.w	r8, r3
 8004148:	2700      	movs	r7, #0
 800414a:	4621      	mov	r1, r4
 800414c:	4648      	mov	r0, r9
 800414e:	f000 fcbf 	bl	8004ad0 <_Bfree>
 8004152:	2d00      	cmp	r5, #0
 8004154:	f000 80bd 	beq.w	80042d2 <_dtoa_r+0x622>
 8004158:	b12f      	cbz	r7, 8004166 <_dtoa_r+0x4b6>
 800415a:	42af      	cmp	r7, r5
 800415c:	d003      	beq.n	8004166 <_dtoa_r+0x4b6>
 800415e:	4639      	mov	r1, r7
 8004160:	4648      	mov	r0, r9
 8004162:	f000 fcb5 	bl	8004ad0 <_Bfree>
 8004166:	4629      	mov	r1, r5
 8004168:	4648      	mov	r0, r9
 800416a:	f000 fcb1 	bl	8004ad0 <_Bfree>
 800416e:	e0b0      	b.n	80042d2 <_dtoa_r+0x622>
 8004170:	07e2      	lsls	r2, r4, #31
 8004172:	d505      	bpl.n	8004180 <_dtoa_r+0x4d0>
 8004174:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004178:	f7fc fa3e 	bl	80005f8 <__aeabi_dmul>
 800417c:	3601      	adds	r6, #1
 800417e:	2301      	movs	r3, #1
 8004180:	1064      	asrs	r4, r4, #1
 8004182:	3508      	adds	r5, #8
 8004184:	e762      	b.n	800404c <_dtoa_r+0x39c>
 8004186:	2602      	movs	r6, #2
 8004188:	e765      	b.n	8004056 <_dtoa_r+0x3a6>
 800418a:	9c03      	ldr	r4, [sp, #12]
 800418c:	46b8      	mov	r8, r7
 800418e:	e784      	b.n	800409a <_dtoa_r+0x3ea>
 8004190:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <_dtoa_r+0x580>)
 8004192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800419c:	4454      	add	r4, sl
 800419e:	2900      	cmp	r1, #0
 80041a0:	d054      	beq.n	800424c <_dtoa_r+0x59c>
 80041a2:	4929      	ldr	r1, [pc, #164]	@ (8004248 <_dtoa_r+0x598>)
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fc fb51 	bl	800084c <__aeabi_ddiv>
 80041aa:	4633      	mov	r3, r6
 80041ac:	462a      	mov	r2, r5
 80041ae:	f7fc f86b 	bl	8000288 <__aeabi_dsub>
 80041b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80041b6:	4656      	mov	r6, sl
 80041b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041bc:	f7fc fccc 	bl	8000b58 <__aeabi_d2iz>
 80041c0:	4605      	mov	r5, r0
 80041c2:	f7fc f9af 	bl	8000524 <__aeabi_i2d>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ce:	f7fc f85b 	bl	8000288 <__aeabi_dsub>
 80041d2:	3530      	adds	r5, #48	@ 0x30
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041dc:	f806 5b01 	strb.w	r5, [r6], #1
 80041e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80041e4:	f7fc fc7a 	bl	8000adc <__aeabi_dcmplt>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d172      	bne.n	80042d2 <_dtoa_r+0x622>
 80041ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041f0:	4911      	ldr	r1, [pc, #68]	@ (8004238 <_dtoa_r+0x588>)
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7fc f848 	bl	8000288 <__aeabi_dsub>
 80041f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80041fc:	f7fc fc6e 	bl	8000adc <__aeabi_dcmplt>
 8004200:	2800      	cmp	r0, #0
 8004202:	f040 80b4 	bne.w	800436e <_dtoa_r+0x6be>
 8004206:	42a6      	cmp	r6, r4
 8004208:	f43f af70 	beq.w	80040ec <_dtoa_r+0x43c>
 800420c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <_dtoa_r+0x58c>)
 8004212:	2200      	movs	r2, #0
 8004214:	f7fc f9f0 	bl	80005f8 <__aeabi_dmul>
 8004218:	4b08      	ldr	r3, [pc, #32]	@ (800423c <_dtoa_r+0x58c>)
 800421a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800421e:	2200      	movs	r2, #0
 8004220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004224:	f7fc f9e8 	bl	80005f8 <__aeabi_dmul>
 8004228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800422c:	e7c4      	b.n	80041b8 <_dtoa_r+0x508>
 800422e:	bf00      	nop
 8004230:	08005890 	.word	0x08005890
 8004234:	08005868 	.word	0x08005868
 8004238:	3ff00000 	.word	0x3ff00000
 800423c:	40240000 	.word	0x40240000
 8004240:	401c0000 	.word	0x401c0000
 8004244:	40140000 	.word	0x40140000
 8004248:	3fe00000 	.word	0x3fe00000
 800424c:	4631      	mov	r1, r6
 800424e:	4628      	mov	r0, r5
 8004250:	f7fc f9d2 	bl	80005f8 <__aeabi_dmul>
 8004254:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004258:	9413      	str	r4, [sp, #76]	@ 0x4c
 800425a:	4656      	mov	r6, sl
 800425c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004260:	f7fc fc7a 	bl	8000b58 <__aeabi_d2iz>
 8004264:	4605      	mov	r5, r0
 8004266:	f7fc f95d 	bl	8000524 <__aeabi_i2d>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004272:	f7fc f809 	bl	8000288 <__aeabi_dsub>
 8004276:	3530      	adds	r5, #48	@ 0x30
 8004278:	f806 5b01 	strb.w	r5, [r6], #1
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	42a6      	cmp	r6, r4
 8004282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	d124      	bne.n	80042d6 <_dtoa_r+0x626>
 800428c:	4baf      	ldr	r3, [pc, #700]	@ (800454c <_dtoa_r+0x89c>)
 800428e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004292:	f7fb fffb 	bl	800028c <__adddf3>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800429e:	f7fc fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d163      	bne.n	800436e <_dtoa_r+0x6be>
 80042a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80042aa:	49a8      	ldr	r1, [pc, #672]	@ (800454c <_dtoa_r+0x89c>)
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fb ffeb 	bl	8000288 <__aeabi_dsub>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042ba:	f7fc fc0f 	bl	8000adc <__aeabi_dcmplt>
 80042be:	2800      	cmp	r0, #0
 80042c0:	f43f af14 	beq.w	80040ec <_dtoa_r+0x43c>
 80042c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80042c6:	1e73      	subs	r3, r6, #1
 80042c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80042ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80042ce:	2b30      	cmp	r3, #48	@ 0x30
 80042d0:	d0f8      	beq.n	80042c4 <_dtoa_r+0x614>
 80042d2:	4647      	mov	r7, r8
 80042d4:	e03b      	b.n	800434e <_dtoa_r+0x69e>
 80042d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004550 <_dtoa_r+0x8a0>)
 80042d8:	f7fc f98e 	bl	80005f8 <__aeabi_dmul>
 80042dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042e0:	e7bc      	b.n	800425c <_dtoa_r+0x5ac>
 80042e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80042e6:	4656      	mov	r6, sl
 80042e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042ec:	4620      	mov	r0, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fc faac 	bl	800084c <__aeabi_ddiv>
 80042f4:	f7fc fc30 	bl	8000b58 <__aeabi_d2iz>
 80042f8:	4680      	mov	r8, r0
 80042fa:	f7fc f913 	bl	8000524 <__aeabi_i2d>
 80042fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004302:	f7fc f979 	bl	80005f8 <__aeabi_dmul>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4620      	mov	r0, r4
 800430c:	4629      	mov	r1, r5
 800430e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004312:	f7fb ffb9 	bl	8000288 <__aeabi_dsub>
 8004316:	f806 4b01 	strb.w	r4, [r6], #1
 800431a:	9d03      	ldr	r5, [sp, #12]
 800431c:	eba6 040a 	sub.w	r4, r6, sl
 8004320:	42a5      	cmp	r5, r4
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	d133      	bne.n	8004390 <_dtoa_r+0x6e0>
 8004328:	f7fb ffb0 	bl	800028c <__adddf3>
 800432c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	f7fc fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8004338:	b9c0      	cbnz	r0, 800436c <_dtoa_r+0x6bc>
 800433a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fc fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004346:	b110      	cbz	r0, 800434e <_dtoa_r+0x69e>
 8004348:	f018 0f01 	tst.w	r8, #1
 800434c:	d10e      	bne.n	800436c <_dtoa_r+0x6bc>
 800434e:	9902      	ldr	r1, [sp, #8]
 8004350:	4648      	mov	r0, r9
 8004352:	f000 fbbd 	bl	8004ad0 <_Bfree>
 8004356:	2300      	movs	r3, #0
 8004358:	7033      	strb	r3, [r6, #0]
 800435a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800435c:	3701      	adds	r7, #1
 800435e:	601f      	str	r7, [r3, #0]
 8004360:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 824b 	beq.w	80047fe <_dtoa_r+0xb4e>
 8004368:	601e      	str	r6, [r3, #0]
 800436a:	e248      	b.n	80047fe <_dtoa_r+0xb4e>
 800436c:	46b8      	mov	r8, r7
 800436e:	4633      	mov	r3, r6
 8004370:	461e      	mov	r6, r3
 8004372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004376:	2a39      	cmp	r2, #57	@ 0x39
 8004378:	d106      	bne.n	8004388 <_dtoa_r+0x6d8>
 800437a:	459a      	cmp	sl, r3
 800437c:	d1f8      	bne.n	8004370 <_dtoa_r+0x6c0>
 800437e:	2230      	movs	r2, #48	@ 0x30
 8004380:	f108 0801 	add.w	r8, r8, #1
 8004384:	f88a 2000 	strb.w	r2, [sl]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	3201      	adds	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e7a0      	b.n	80042d2 <_dtoa_r+0x622>
 8004390:	4b6f      	ldr	r3, [pc, #444]	@ (8004550 <_dtoa_r+0x8a0>)
 8004392:	2200      	movs	r2, #0
 8004394:	f7fc f930 	bl	80005f8 <__aeabi_dmul>
 8004398:	2200      	movs	r2, #0
 800439a:	2300      	movs	r3, #0
 800439c:	4604      	mov	r4, r0
 800439e:	460d      	mov	r5, r1
 80043a0:	f7fc fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d09f      	beq.n	80042e8 <_dtoa_r+0x638>
 80043a8:	e7d1      	b.n	800434e <_dtoa_r+0x69e>
 80043aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	f000 80ea 	beq.w	8004586 <_dtoa_r+0x8d6>
 80043b2:	9a07      	ldr	r2, [sp, #28]
 80043b4:	2a01      	cmp	r2, #1
 80043b6:	f300 80cd 	bgt.w	8004554 <_dtoa_r+0x8a4>
 80043ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80043bc:	2a00      	cmp	r2, #0
 80043be:	f000 80c1 	beq.w	8004544 <_dtoa_r+0x894>
 80043c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80043c6:	9c08      	ldr	r4, [sp, #32]
 80043c8:	9e00      	ldr	r6, [sp, #0]
 80043ca:	9a00      	ldr	r2, [sp, #0]
 80043cc:	441a      	add	r2, r3
 80043ce:	9200      	str	r2, [sp, #0]
 80043d0:	9a06      	ldr	r2, [sp, #24]
 80043d2:	2101      	movs	r1, #1
 80043d4:	441a      	add	r2, r3
 80043d6:	4648      	mov	r0, r9
 80043d8:	9206      	str	r2, [sp, #24]
 80043da:	f000 fc2d 	bl	8004c38 <__i2b>
 80043de:	4605      	mov	r5, r0
 80043e0:	b166      	cbz	r6, 80043fc <_dtoa_r+0x74c>
 80043e2:	9b06      	ldr	r3, [sp, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dd09      	ble.n	80043fc <_dtoa_r+0x74c>
 80043e8:	42b3      	cmp	r3, r6
 80043ea:	9a00      	ldr	r2, [sp, #0]
 80043ec:	bfa8      	it	ge
 80043ee:	4633      	movge	r3, r6
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	9200      	str	r2, [sp, #0]
 80043f4:	9a06      	ldr	r2, [sp, #24]
 80043f6:	1af6      	subs	r6, r6, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	9306      	str	r3, [sp, #24]
 80043fc:	9b08      	ldr	r3, [sp, #32]
 80043fe:	b30b      	cbz	r3, 8004444 <_dtoa_r+0x794>
 8004400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80c6 	beq.w	8004594 <_dtoa_r+0x8e4>
 8004408:	2c00      	cmp	r4, #0
 800440a:	f000 80c0 	beq.w	800458e <_dtoa_r+0x8de>
 800440e:	4629      	mov	r1, r5
 8004410:	4622      	mov	r2, r4
 8004412:	4648      	mov	r0, r9
 8004414:	f000 fcc8 	bl	8004da8 <__pow5mult>
 8004418:	9a02      	ldr	r2, [sp, #8]
 800441a:	4601      	mov	r1, r0
 800441c:	4605      	mov	r5, r0
 800441e:	4648      	mov	r0, r9
 8004420:	f000 fc20 	bl	8004c64 <__multiply>
 8004424:	9902      	ldr	r1, [sp, #8]
 8004426:	4680      	mov	r8, r0
 8004428:	4648      	mov	r0, r9
 800442a:	f000 fb51 	bl	8004ad0 <_Bfree>
 800442e:	9b08      	ldr	r3, [sp, #32]
 8004430:	1b1b      	subs	r3, r3, r4
 8004432:	9308      	str	r3, [sp, #32]
 8004434:	f000 80b1 	beq.w	800459a <_dtoa_r+0x8ea>
 8004438:	9a08      	ldr	r2, [sp, #32]
 800443a:	4641      	mov	r1, r8
 800443c:	4648      	mov	r0, r9
 800443e:	f000 fcb3 	bl	8004da8 <__pow5mult>
 8004442:	9002      	str	r0, [sp, #8]
 8004444:	2101      	movs	r1, #1
 8004446:	4648      	mov	r0, r9
 8004448:	f000 fbf6 	bl	8004c38 <__i2b>
 800444c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800444e:	4604      	mov	r4, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 81d8 	beq.w	8004806 <_dtoa_r+0xb56>
 8004456:	461a      	mov	r2, r3
 8004458:	4601      	mov	r1, r0
 800445a:	4648      	mov	r0, r9
 800445c:	f000 fca4 	bl	8004da8 <__pow5mult>
 8004460:	9b07      	ldr	r3, [sp, #28]
 8004462:	2b01      	cmp	r3, #1
 8004464:	4604      	mov	r4, r0
 8004466:	f300 809f 	bgt.w	80045a8 <_dtoa_r+0x8f8>
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8097 	bne.w	80045a0 <_dtoa_r+0x8f0>
 8004472:	9b05      	ldr	r3, [sp, #20]
 8004474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 8093 	bne.w	80045a4 <_dtoa_r+0x8f4>
 800447e:	9b05      	ldr	r3, [sp, #20]
 8004480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004484:	0d1b      	lsrs	r3, r3, #20
 8004486:	051b      	lsls	r3, r3, #20
 8004488:	b133      	cbz	r3, 8004498 <_dtoa_r+0x7e8>
 800448a:	9b00      	ldr	r3, [sp, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	9b06      	ldr	r3, [sp, #24]
 8004492:	3301      	adds	r3, #1
 8004494:	9306      	str	r3, [sp, #24]
 8004496:	2301      	movs	r3, #1
 8004498:	9308      	str	r3, [sp, #32]
 800449a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 81b8 	beq.w	8004812 <_dtoa_r+0xb62>
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044a8:	6918      	ldr	r0, [r3, #16]
 80044aa:	f000 fb79 	bl	8004ba0 <__hi0bits>
 80044ae:	f1c0 0020 	rsb	r0, r0, #32
 80044b2:	9b06      	ldr	r3, [sp, #24]
 80044b4:	4418      	add	r0, r3
 80044b6:	f010 001f 	ands.w	r0, r0, #31
 80044ba:	f000 8082 	beq.w	80045c2 <_dtoa_r+0x912>
 80044be:	f1c0 0320 	rsb	r3, r0, #32
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	dd73      	ble.n	80045ae <_dtoa_r+0x8fe>
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	f1c0 001c 	rsb	r0, r0, #28
 80044cc:	4403      	add	r3, r0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	9b06      	ldr	r3, [sp, #24]
 80044d2:	4403      	add	r3, r0
 80044d4:	4406      	add	r6, r0
 80044d6:	9306      	str	r3, [sp, #24]
 80044d8:	9b00      	ldr	r3, [sp, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	dd05      	ble.n	80044ea <_dtoa_r+0x83a>
 80044de:	9902      	ldr	r1, [sp, #8]
 80044e0:	461a      	mov	r2, r3
 80044e2:	4648      	mov	r0, r9
 80044e4:	f000 fcba 	bl	8004e5c <__lshift>
 80044e8:	9002      	str	r0, [sp, #8]
 80044ea:	9b06      	ldr	r3, [sp, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dd05      	ble.n	80044fc <_dtoa_r+0x84c>
 80044f0:	4621      	mov	r1, r4
 80044f2:	461a      	mov	r2, r3
 80044f4:	4648      	mov	r0, r9
 80044f6:	f000 fcb1 	bl	8004e5c <__lshift>
 80044fa:	4604      	mov	r4, r0
 80044fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d061      	beq.n	80045c6 <_dtoa_r+0x916>
 8004502:	9802      	ldr	r0, [sp, #8]
 8004504:	4621      	mov	r1, r4
 8004506:	f000 fd15 	bl	8004f34 <__mcmp>
 800450a:	2800      	cmp	r0, #0
 800450c:	da5b      	bge.n	80045c6 <_dtoa_r+0x916>
 800450e:	2300      	movs	r3, #0
 8004510:	9902      	ldr	r1, [sp, #8]
 8004512:	220a      	movs	r2, #10
 8004514:	4648      	mov	r0, r9
 8004516:	f000 fafd 	bl	8004b14 <__multadd>
 800451a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800451c:	9002      	str	r0, [sp, #8]
 800451e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8177 	beq.w	8004816 <_dtoa_r+0xb66>
 8004528:	4629      	mov	r1, r5
 800452a:	2300      	movs	r3, #0
 800452c:	220a      	movs	r2, #10
 800452e:	4648      	mov	r0, r9
 8004530:	f000 faf0 	bl	8004b14 <__multadd>
 8004534:	f1bb 0f00 	cmp.w	fp, #0
 8004538:	4605      	mov	r5, r0
 800453a:	dc6f      	bgt.n	800461c <_dtoa_r+0x96c>
 800453c:	9b07      	ldr	r3, [sp, #28]
 800453e:	2b02      	cmp	r3, #2
 8004540:	dc49      	bgt.n	80045d6 <_dtoa_r+0x926>
 8004542:	e06b      	b.n	800461c <_dtoa_r+0x96c>
 8004544:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004546:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800454a:	e73c      	b.n	80043c6 <_dtoa_r+0x716>
 800454c:	3fe00000 	.word	0x3fe00000
 8004550:	40240000 	.word	0x40240000
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	1e5c      	subs	r4, r3, #1
 8004558:	9b08      	ldr	r3, [sp, #32]
 800455a:	42a3      	cmp	r3, r4
 800455c:	db09      	blt.n	8004572 <_dtoa_r+0x8c2>
 800455e:	1b1c      	subs	r4, r3, r4
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f6bf af30 	bge.w	80043c8 <_dtoa_r+0x718>
 8004568:	9b00      	ldr	r3, [sp, #0]
 800456a:	9a03      	ldr	r2, [sp, #12]
 800456c:	1a9e      	subs	r6, r3, r2
 800456e:	2300      	movs	r3, #0
 8004570:	e72b      	b.n	80043ca <_dtoa_r+0x71a>
 8004572:	9b08      	ldr	r3, [sp, #32]
 8004574:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004576:	9408      	str	r4, [sp, #32]
 8004578:	1ae3      	subs	r3, r4, r3
 800457a:	441a      	add	r2, r3
 800457c:	9e00      	ldr	r6, [sp, #0]
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	920d      	str	r2, [sp, #52]	@ 0x34
 8004582:	2400      	movs	r4, #0
 8004584:	e721      	b.n	80043ca <_dtoa_r+0x71a>
 8004586:	9c08      	ldr	r4, [sp, #32]
 8004588:	9e00      	ldr	r6, [sp, #0]
 800458a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800458c:	e728      	b.n	80043e0 <_dtoa_r+0x730>
 800458e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004592:	e751      	b.n	8004438 <_dtoa_r+0x788>
 8004594:	9a08      	ldr	r2, [sp, #32]
 8004596:	9902      	ldr	r1, [sp, #8]
 8004598:	e750      	b.n	800443c <_dtoa_r+0x78c>
 800459a:	f8cd 8008 	str.w	r8, [sp, #8]
 800459e:	e751      	b.n	8004444 <_dtoa_r+0x794>
 80045a0:	2300      	movs	r3, #0
 80045a2:	e779      	b.n	8004498 <_dtoa_r+0x7e8>
 80045a4:	9b04      	ldr	r3, [sp, #16]
 80045a6:	e777      	b.n	8004498 <_dtoa_r+0x7e8>
 80045a8:	2300      	movs	r3, #0
 80045aa:	9308      	str	r3, [sp, #32]
 80045ac:	e779      	b.n	80044a2 <_dtoa_r+0x7f2>
 80045ae:	d093      	beq.n	80044d8 <_dtoa_r+0x828>
 80045b0:	9a00      	ldr	r2, [sp, #0]
 80045b2:	331c      	adds	r3, #28
 80045b4:	441a      	add	r2, r3
 80045b6:	9200      	str	r2, [sp, #0]
 80045b8:	9a06      	ldr	r2, [sp, #24]
 80045ba:	441a      	add	r2, r3
 80045bc:	441e      	add	r6, r3
 80045be:	9206      	str	r2, [sp, #24]
 80045c0:	e78a      	b.n	80044d8 <_dtoa_r+0x828>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e7f4      	b.n	80045b0 <_dtoa_r+0x900>
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	46b8      	mov	r8, r7
 80045cc:	dc20      	bgt.n	8004610 <_dtoa_r+0x960>
 80045ce:	469b      	mov	fp, r3
 80045d0:	9b07      	ldr	r3, [sp, #28]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	dd1e      	ble.n	8004614 <_dtoa_r+0x964>
 80045d6:	f1bb 0f00 	cmp.w	fp, #0
 80045da:	f47f adb1 	bne.w	8004140 <_dtoa_r+0x490>
 80045de:	4621      	mov	r1, r4
 80045e0:	465b      	mov	r3, fp
 80045e2:	2205      	movs	r2, #5
 80045e4:	4648      	mov	r0, r9
 80045e6:	f000 fa95 	bl	8004b14 <__multadd>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4604      	mov	r4, r0
 80045ee:	9802      	ldr	r0, [sp, #8]
 80045f0:	f000 fca0 	bl	8004f34 <__mcmp>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f77f ada3 	ble.w	8004140 <_dtoa_r+0x490>
 80045fa:	4656      	mov	r6, sl
 80045fc:	2331      	movs	r3, #49	@ 0x31
 80045fe:	f806 3b01 	strb.w	r3, [r6], #1
 8004602:	f108 0801 	add.w	r8, r8, #1
 8004606:	e59f      	b.n	8004148 <_dtoa_r+0x498>
 8004608:	9c03      	ldr	r4, [sp, #12]
 800460a:	46b8      	mov	r8, r7
 800460c:	4625      	mov	r5, r4
 800460e:	e7f4      	b.n	80045fa <_dtoa_r+0x94a>
 8004610:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8101 	beq.w	800481e <_dtoa_r+0xb6e>
 800461c:	2e00      	cmp	r6, #0
 800461e:	dd05      	ble.n	800462c <_dtoa_r+0x97c>
 8004620:	4629      	mov	r1, r5
 8004622:	4632      	mov	r2, r6
 8004624:	4648      	mov	r0, r9
 8004626:	f000 fc19 	bl	8004e5c <__lshift>
 800462a:	4605      	mov	r5, r0
 800462c:	9b08      	ldr	r3, [sp, #32]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d05c      	beq.n	80046ec <_dtoa_r+0xa3c>
 8004632:	6869      	ldr	r1, [r5, #4]
 8004634:	4648      	mov	r0, r9
 8004636:	f000 fa0b 	bl	8004a50 <_Balloc>
 800463a:	4606      	mov	r6, r0
 800463c:	b928      	cbnz	r0, 800464a <_dtoa_r+0x99a>
 800463e:	4b82      	ldr	r3, [pc, #520]	@ (8004848 <_dtoa_r+0xb98>)
 8004640:	4602      	mov	r2, r0
 8004642:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004646:	f7ff bb4a 	b.w	8003cde <_dtoa_r+0x2e>
 800464a:	692a      	ldr	r2, [r5, #16]
 800464c:	3202      	adds	r2, #2
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	f105 010c 	add.w	r1, r5, #12
 8004654:	300c      	adds	r0, #12
 8004656:	f7ff fa94 	bl	8003b82 <memcpy>
 800465a:	2201      	movs	r2, #1
 800465c:	4631      	mov	r1, r6
 800465e:	4648      	mov	r0, r9
 8004660:	f000 fbfc 	bl	8004e5c <__lshift>
 8004664:	f10a 0301 	add.w	r3, sl, #1
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	eb0a 030b 	add.w	r3, sl, fp
 800466e:	9308      	str	r3, [sp, #32]
 8004670:	9b04      	ldr	r3, [sp, #16]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	462f      	mov	r7, r5
 8004678:	9306      	str	r3, [sp, #24]
 800467a:	4605      	mov	r5, r0
 800467c:	9b00      	ldr	r3, [sp, #0]
 800467e:	9802      	ldr	r0, [sp, #8]
 8004680:	4621      	mov	r1, r4
 8004682:	f103 3bff 	add.w	fp, r3, #4294967295
 8004686:	f7ff fa8a 	bl	8003b9e <quorem>
 800468a:	4603      	mov	r3, r0
 800468c:	3330      	adds	r3, #48	@ 0x30
 800468e:	9003      	str	r0, [sp, #12]
 8004690:	4639      	mov	r1, r7
 8004692:	9802      	ldr	r0, [sp, #8]
 8004694:	9309      	str	r3, [sp, #36]	@ 0x24
 8004696:	f000 fc4d 	bl	8004f34 <__mcmp>
 800469a:	462a      	mov	r2, r5
 800469c:	9004      	str	r0, [sp, #16]
 800469e:	4621      	mov	r1, r4
 80046a0:	4648      	mov	r0, r9
 80046a2:	f000 fc63 	bl	8004f6c <__mdiff>
 80046a6:	68c2      	ldr	r2, [r0, #12]
 80046a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046aa:	4606      	mov	r6, r0
 80046ac:	bb02      	cbnz	r2, 80046f0 <_dtoa_r+0xa40>
 80046ae:	4601      	mov	r1, r0
 80046b0:	9802      	ldr	r0, [sp, #8]
 80046b2:	f000 fc3f 	bl	8004f34 <__mcmp>
 80046b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046b8:	4602      	mov	r2, r0
 80046ba:	4631      	mov	r1, r6
 80046bc:	4648      	mov	r0, r9
 80046be:	920c      	str	r2, [sp, #48]	@ 0x30
 80046c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046c2:	f000 fa05 	bl	8004ad0 <_Bfree>
 80046c6:	9b07      	ldr	r3, [sp, #28]
 80046c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80046ca:	9e00      	ldr	r6, [sp, #0]
 80046cc:	ea42 0103 	orr.w	r1, r2, r3
 80046d0:	9b06      	ldr	r3, [sp, #24]
 80046d2:	4319      	orrs	r1, r3
 80046d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046d6:	d10d      	bne.n	80046f4 <_dtoa_r+0xa44>
 80046d8:	2b39      	cmp	r3, #57	@ 0x39
 80046da:	d027      	beq.n	800472c <_dtoa_r+0xa7c>
 80046dc:	9a04      	ldr	r2, [sp, #16]
 80046de:	2a00      	cmp	r2, #0
 80046e0:	dd01      	ble.n	80046e6 <_dtoa_r+0xa36>
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	3331      	adds	r3, #49	@ 0x31
 80046e6:	f88b 3000 	strb.w	r3, [fp]
 80046ea:	e52e      	b.n	800414a <_dtoa_r+0x49a>
 80046ec:	4628      	mov	r0, r5
 80046ee:	e7b9      	b.n	8004664 <_dtoa_r+0x9b4>
 80046f0:	2201      	movs	r2, #1
 80046f2:	e7e2      	b.n	80046ba <_dtoa_r+0xa0a>
 80046f4:	9904      	ldr	r1, [sp, #16]
 80046f6:	2900      	cmp	r1, #0
 80046f8:	db04      	blt.n	8004704 <_dtoa_r+0xa54>
 80046fa:	9807      	ldr	r0, [sp, #28]
 80046fc:	4301      	orrs	r1, r0
 80046fe:	9806      	ldr	r0, [sp, #24]
 8004700:	4301      	orrs	r1, r0
 8004702:	d120      	bne.n	8004746 <_dtoa_r+0xa96>
 8004704:	2a00      	cmp	r2, #0
 8004706:	ddee      	ble.n	80046e6 <_dtoa_r+0xa36>
 8004708:	9902      	ldr	r1, [sp, #8]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	4648      	mov	r0, r9
 8004710:	f000 fba4 	bl	8004e5c <__lshift>
 8004714:	4621      	mov	r1, r4
 8004716:	9002      	str	r0, [sp, #8]
 8004718:	f000 fc0c 	bl	8004f34 <__mcmp>
 800471c:	2800      	cmp	r0, #0
 800471e:	9b00      	ldr	r3, [sp, #0]
 8004720:	dc02      	bgt.n	8004728 <_dtoa_r+0xa78>
 8004722:	d1e0      	bne.n	80046e6 <_dtoa_r+0xa36>
 8004724:	07da      	lsls	r2, r3, #31
 8004726:	d5de      	bpl.n	80046e6 <_dtoa_r+0xa36>
 8004728:	2b39      	cmp	r3, #57	@ 0x39
 800472a:	d1da      	bne.n	80046e2 <_dtoa_r+0xa32>
 800472c:	2339      	movs	r3, #57	@ 0x39
 800472e:	f88b 3000 	strb.w	r3, [fp]
 8004732:	4633      	mov	r3, r6
 8004734:	461e      	mov	r6, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800473c:	2a39      	cmp	r2, #57	@ 0x39
 800473e:	d04e      	beq.n	80047de <_dtoa_r+0xb2e>
 8004740:	3201      	adds	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e501      	b.n	800414a <_dtoa_r+0x49a>
 8004746:	2a00      	cmp	r2, #0
 8004748:	dd03      	ble.n	8004752 <_dtoa_r+0xaa2>
 800474a:	2b39      	cmp	r3, #57	@ 0x39
 800474c:	d0ee      	beq.n	800472c <_dtoa_r+0xa7c>
 800474e:	3301      	adds	r3, #1
 8004750:	e7c9      	b.n	80046e6 <_dtoa_r+0xa36>
 8004752:	9a00      	ldr	r2, [sp, #0]
 8004754:	9908      	ldr	r1, [sp, #32]
 8004756:	f802 3c01 	strb.w	r3, [r2, #-1]
 800475a:	428a      	cmp	r2, r1
 800475c:	d028      	beq.n	80047b0 <_dtoa_r+0xb00>
 800475e:	9902      	ldr	r1, [sp, #8]
 8004760:	2300      	movs	r3, #0
 8004762:	220a      	movs	r2, #10
 8004764:	4648      	mov	r0, r9
 8004766:	f000 f9d5 	bl	8004b14 <__multadd>
 800476a:	42af      	cmp	r7, r5
 800476c:	9002      	str	r0, [sp, #8]
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	f04f 020a 	mov.w	r2, #10
 8004776:	4639      	mov	r1, r7
 8004778:	4648      	mov	r0, r9
 800477a:	d107      	bne.n	800478c <_dtoa_r+0xadc>
 800477c:	f000 f9ca 	bl	8004b14 <__multadd>
 8004780:	4607      	mov	r7, r0
 8004782:	4605      	mov	r5, r0
 8004784:	9b00      	ldr	r3, [sp, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	e777      	b.n	800467c <_dtoa_r+0x9cc>
 800478c:	f000 f9c2 	bl	8004b14 <__multadd>
 8004790:	4629      	mov	r1, r5
 8004792:	4607      	mov	r7, r0
 8004794:	2300      	movs	r3, #0
 8004796:	220a      	movs	r2, #10
 8004798:	4648      	mov	r0, r9
 800479a:	f000 f9bb 	bl	8004b14 <__multadd>
 800479e:	4605      	mov	r5, r0
 80047a0:	e7f0      	b.n	8004784 <_dtoa_r+0xad4>
 80047a2:	f1bb 0f00 	cmp.w	fp, #0
 80047a6:	bfcc      	ite	gt
 80047a8:	465e      	movgt	r6, fp
 80047aa:	2601      	movle	r6, #1
 80047ac:	4456      	add	r6, sl
 80047ae:	2700      	movs	r7, #0
 80047b0:	9902      	ldr	r1, [sp, #8]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	4648      	mov	r0, r9
 80047b8:	f000 fb50 	bl	8004e5c <__lshift>
 80047bc:	4621      	mov	r1, r4
 80047be:	9002      	str	r0, [sp, #8]
 80047c0:	f000 fbb8 	bl	8004f34 <__mcmp>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	dcb4      	bgt.n	8004732 <_dtoa_r+0xa82>
 80047c8:	d102      	bne.n	80047d0 <_dtoa_r+0xb20>
 80047ca:	9b00      	ldr	r3, [sp, #0]
 80047cc:	07db      	lsls	r3, r3, #31
 80047ce:	d4b0      	bmi.n	8004732 <_dtoa_r+0xa82>
 80047d0:	4633      	mov	r3, r6
 80047d2:	461e      	mov	r6, r3
 80047d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047d8:	2a30      	cmp	r2, #48	@ 0x30
 80047da:	d0fa      	beq.n	80047d2 <_dtoa_r+0xb22>
 80047dc:	e4b5      	b.n	800414a <_dtoa_r+0x49a>
 80047de:	459a      	cmp	sl, r3
 80047e0:	d1a8      	bne.n	8004734 <_dtoa_r+0xa84>
 80047e2:	2331      	movs	r3, #49	@ 0x31
 80047e4:	f108 0801 	add.w	r8, r8, #1
 80047e8:	f88a 3000 	strb.w	r3, [sl]
 80047ec:	e4ad      	b.n	800414a <_dtoa_r+0x49a>
 80047ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800484c <_dtoa_r+0xb9c>
 80047f4:	b11b      	cbz	r3, 80047fe <_dtoa_r+0xb4e>
 80047f6:	f10a 0308 	add.w	r3, sl, #8
 80047fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4650      	mov	r0, sl
 8004800:	b017      	add	sp, #92	@ 0x5c
 8004802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004806:	9b07      	ldr	r3, [sp, #28]
 8004808:	2b01      	cmp	r3, #1
 800480a:	f77f ae2e 	ble.w	800446a <_dtoa_r+0x7ba>
 800480e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004810:	9308      	str	r3, [sp, #32]
 8004812:	2001      	movs	r0, #1
 8004814:	e64d      	b.n	80044b2 <_dtoa_r+0x802>
 8004816:	f1bb 0f00 	cmp.w	fp, #0
 800481a:	f77f aed9 	ble.w	80045d0 <_dtoa_r+0x920>
 800481e:	4656      	mov	r6, sl
 8004820:	9802      	ldr	r0, [sp, #8]
 8004822:	4621      	mov	r1, r4
 8004824:	f7ff f9bb 	bl	8003b9e <quorem>
 8004828:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800482c:	f806 3b01 	strb.w	r3, [r6], #1
 8004830:	eba6 020a 	sub.w	r2, r6, sl
 8004834:	4593      	cmp	fp, r2
 8004836:	ddb4      	ble.n	80047a2 <_dtoa_r+0xaf2>
 8004838:	9902      	ldr	r1, [sp, #8]
 800483a:	2300      	movs	r3, #0
 800483c:	220a      	movs	r2, #10
 800483e:	4648      	mov	r0, r9
 8004840:	f000 f968 	bl	8004b14 <__multadd>
 8004844:	9002      	str	r0, [sp, #8]
 8004846:	e7eb      	b.n	8004820 <_dtoa_r+0xb70>
 8004848:	08005796 	.word	0x08005796
 800484c:	0800571a 	.word	0x0800571a

08004850 <_free_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	2900      	cmp	r1, #0
 8004856:	d041      	beq.n	80048dc <_free_r+0x8c>
 8004858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485c:	1f0c      	subs	r4, r1, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	18e4      	addlt	r4, r4, r3
 8004864:	f000 f8e8 	bl	8004a38 <__malloc_lock>
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <_free_r+0x90>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	b933      	cbnz	r3, 800487c <_free_r+0x2c>
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	6014      	str	r4, [r2, #0]
 8004872:	4628      	mov	r0, r5
 8004874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004878:	f000 b8e4 	b.w	8004a44 <__malloc_unlock>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d908      	bls.n	8004892 <_free_r+0x42>
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	1821      	adds	r1, r4, r0
 8004884:	428b      	cmp	r3, r1
 8004886:	bf01      	itttt	eq
 8004888:	6819      	ldreq	r1, [r3, #0]
 800488a:	685b      	ldreq	r3, [r3, #4]
 800488c:	1809      	addeq	r1, r1, r0
 800488e:	6021      	streq	r1, [r4, #0]
 8004890:	e7ed      	b.n	800486e <_free_r+0x1e>
 8004892:	461a      	mov	r2, r3
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	b10b      	cbz	r3, 800489c <_free_r+0x4c>
 8004898:	42a3      	cmp	r3, r4
 800489a:	d9fa      	bls.n	8004892 <_free_r+0x42>
 800489c:	6811      	ldr	r1, [r2, #0]
 800489e:	1850      	adds	r0, r2, r1
 80048a0:	42a0      	cmp	r0, r4
 80048a2:	d10b      	bne.n	80048bc <_free_r+0x6c>
 80048a4:	6820      	ldr	r0, [r4, #0]
 80048a6:	4401      	add	r1, r0
 80048a8:	1850      	adds	r0, r2, r1
 80048aa:	4283      	cmp	r3, r0
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	d1e0      	bne.n	8004872 <_free_r+0x22>
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	6053      	str	r3, [r2, #4]
 80048b6:	4408      	add	r0, r1
 80048b8:	6010      	str	r0, [r2, #0]
 80048ba:	e7da      	b.n	8004872 <_free_r+0x22>
 80048bc:	d902      	bls.n	80048c4 <_free_r+0x74>
 80048be:	230c      	movs	r3, #12
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	e7d6      	b.n	8004872 <_free_r+0x22>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	1821      	adds	r1, r4, r0
 80048c8:	428b      	cmp	r3, r1
 80048ca:	bf04      	itt	eq
 80048cc:	6819      	ldreq	r1, [r3, #0]
 80048ce:	685b      	ldreq	r3, [r3, #4]
 80048d0:	6063      	str	r3, [r4, #4]
 80048d2:	bf04      	itt	eq
 80048d4:	1809      	addeq	r1, r1, r0
 80048d6:	6021      	streq	r1, [r4, #0]
 80048d8:	6054      	str	r4, [r2, #4]
 80048da:	e7ca      	b.n	8004872 <_free_r+0x22>
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000434 	.word	0x20000434

080048e4 <malloc>:
 80048e4:	4b02      	ldr	r3, [pc, #8]	@ (80048f0 <malloc+0xc>)
 80048e6:	4601      	mov	r1, r0
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f000 b825 	b.w	8004938 <_malloc_r>
 80048ee:	bf00      	nop
 80048f0:	2000000c 	.word	0x2000000c

080048f4 <sbrk_aligned>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004934 <sbrk_aligned+0x40>)
 80048f8:	460c      	mov	r4, r1
 80048fa:	6831      	ldr	r1, [r6, #0]
 80048fc:	4605      	mov	r5, r0
 80048fe:	b911      	cbnz	r1, 8004906 <sbrk_aligned+0x12>
 8004900:	f000 fde6 	bl	80054d0 <_sbrk_r>
 8004904:	6030      	str	r0, [r6, #0]
 8004906:	4621      	mov	r1, r4
 8004908:	4628      	mov	r0, r5
 800490a:	f000 fde1 	bl	80054d0 <_sbrk_r>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d103      	bne.n	800491a <sbrk_aligned+0x26>
 8004912:	f04f 34ff 	mov.w	r4, #4294967295
 8004916:	4620      	mov	r0, r4
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	1cc4      	adds	r4, r0, #3
 800491c:	f024 0403 	bic.w	r4, r4, #3
 8004920:	42a0      	cmp	r0, r4
 8004922:	d0f8      	beq.n	8004916 <sbrk_aligned+0x22>
 8004924:	1a21      	subs	r1, r4, r0
 8004926:	4628      	mov	r0, r5
 8004928:	f000 fdd2 	bl	80054d0 <_sbrk_r>
 800492c:	3001      	adds	r0, #1
 800492e:	d1f2      	bne.n	8004916 <sbrk_aligned+0x22>
 8004930:	e7ef      	b.n	8004912 <sbrk_aligned+0x1e>
 8004932:	bf00      	nop
 8004934:	20000430 	.word	0x20000430

08004938 <_malloc_r>:
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	1ccd      	adds	r5, r1, #3
 800493e:	f025 0503 	bic.w	r5, r5, #3
 8004942:	3508      	adds	r5, #8
 8004944:	2d0c      	cmp	r5, #12
 8004946:	bf38      	it	cc
 8004948:	250c      	movcc	r5, #12
 800494a:	2d00      	cmp	r5, #0
 800494c:	4606      	mov	r6, r0
 800494e:	db01      	blt.n	8004954 <_malloc_r+0x1c>
 8004950:	42a9      	cmp	r1, r5
 8004952:	d904      	bls.n	800495e <_malloc_r+0x26>
 8004954:	230c      	movs	r3, #12
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	2000      	movs	r0, #0
 800495a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a34 <_malloc_r+0xfc>
 8004962:	f000 f869 	bl	8004a38 <__malloc_lock>
 8004966:	f8d8 3000 	ldr.w	r3, [r8]
 800496a:	461c      	mov	r4, r3
 800496c:	bb44      	cbnz	r4, 80049c0 <_malloc_r+0x88>
 800496e:	4629      	mov	r1, r5
 8004970:	4630      	mov	r0, r6
 8004972:	f7ff ffbf 	bl	80048f4 <sbrk_aligned>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	4604      	mov	r4, r0
 800497a:	d158      	bne.n	8004a2e <_malloc_r+0xf6>
 800497c:	f8d8 4000 	ldr.w	r4, [r8]
 8004980:	4627      	mov	r7, r4
 8004982:	2f00      	cmp	r7, #0
 8004984:	d143      	bne.n	8004a0e <_malloc_r+0xd6>
 8004986:	2c00      	cmp	r4, #0
 8004988:	d04b      	beq.n	8004a22 <_malloc_r+0xea>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	4639      	mov	r1, r7
 800498e:	4630      	mov	r0, r6
 8004990:	eb04 0903 	add.w	r9, r4, r3
 8004994:	f000 fd9c 	bl	80054d0 <_sbrk_r>
 8004998:	4581      	cmp	r9, r0
 800499a:	d142      	bne.n	8004a22 <_malloc_r+0xea>
 800499c:	6821      	ldr	r1, [r4, #0]
 800499e:	1a6d      	subs	r5, r5, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7ff ffa6 	bl	80048f4 <sbrk_aligned>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d03a      	beq.n	8004a22 <_malloc_r+0xea>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	442b      	add	r3, r5
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	f8d8 3000 	ldr.w	r3, [r8]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	bb62      	cbnz	r2, 8004a14 <_malloc_r+0xdc>
 80049ba:	f8c8 7000 	str.w	r7, [r8]
 80049be:	e00f      	b.n	80049e0 <_malloc_r+0xa8>
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	1b52      	subs	r2, r2, r5
 80049c4:	d420      	bmi.n	8004a08 <_malloc_r+0xd0>
 80049c6:	2a0b      	cmp	r2, #11
 80049c8:	d917      	bls.n	80049fa <_malloc_r+0xc2>
 80049ca:	1961      	adds	r1, r4, r5
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	6025      	str	r5, [r4, #0]
 80049d0:	bf18      	it	ne
 80049d2:	6059      	strne	r1, [r3, #4]
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	bf08      	it	eq
 80049d8:	f8c8 1000 	streq.w	r1, [r8]
 80049dc:	5162      	str	r2, [r4, r5]
 80049de:	604b      	str	r3, [r1, #4]
 80049e0:	4630      	mov	r0, r6
 80049e2:	f000 f82f 	bl	8004a44 <__malloc_unlock>
 80049e6:	f104 000b 	add.w	r0, r4, #11
 80049ea:	1d23      	adds	r3, r4, #4
 80049ec:	f020 0007 	bic.w	r0, r0, #7
 80049f0:	1ac2      	subs	r2, r0, r3
 80049f2:	bf1c      	itt	ne
 80049f4:	1a1b      	subne	r3, r3, r0
 80049f6:	50a3      	strne	r3, [r4, r2]
 80049f8:	e7af      	b.n	800495a <_malloc_r+0x22>
 80049fa:	6862      	ldr	r2, [r4, #4]
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	bf0c      	ite	eq
 8004a00:	f8c8 2000 	streq.w	r2, [r8]
 8004a04:	605a      	strne	r2, [r3, #4]
 8004a06:	e7eb      	b.n	80049e0 <_malloc_r+0xa8>
 8004a08:	4623      	mov	r3, r4
 8004a0a:	6864      	ldr	r4, [r4, #4]
 8004a0c:	e7ae      	b.n	800496c <_malloc_r+0x34>
 8004a0e:	463c      	mov	r4, r7
 8004a10:	687f      	ldr	r7, [r7, #4]
 8004a12:	e7b6      	b.n	8004982 <_malloc_r+0x4a>
 8004a14:	461a      	mov	r2, r3
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	d1fb      	bne.n	8004a14 <_malloc_r+0xdc>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6053      	str	r3, [r2, #4]
 8004a20:	e7de      	b.n	80049e0 <_malloc_r+0xa8>
 8004a22:	230c      	movs	r3, #12
 8004a24:	6033      	str	r3, [r6, #0]
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f80c 	bl	8004a44 <__malloc_unlock>
 8004a2c:	e794      	b.n	8004958 <_malloc_r+0x20>
 8004a2e:	6005      	str	r5, [r0, #0]
 8004a30:	e7d6      	b.n	80049e0 <_malloc_r+0xa8>
 8004a32:	bf00      	nop
 8004a34:	20000434 	.word	0x20000434

08004a38 <__malloc_lock>:
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <__malloc_lock+0x8>)
 8004a3a:	f7ff b8a0 	b.w	8003b7e <__retarget_lock_acquire_recursive>
 8004a3e:	bf00      	nop
 8004a40:	2000042c 	.word	0x2000042c

08004a44 <__malloc_unlock>:
 8004a44:	4801      	ldr	r0, [pc, #4]	@ (8004a4c <__malloc_unlock+0x8>)
 8004a46:	f7ff b89b 	b.w	8003b80 <__retarget_lock_release_recursive>
 8004a4a:	bf00      	nop
 8004a4c:	2000042c 	.word	0x2000042c

08004a50 <_Balloc>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	69c6      	ldr	r6, [r0, #28]
 8004a54:	4604      	mov	r4, r0
 8004a56:	460d      	mov	r5, r1
 8004a58:	b976      	cbnz	r6, 8004a78 <_Balloc+0x28>
 8004a5a:	2010      	movs	r0, #16
 8004a5c:	f7ff ff42 	bl	80048e4 <malloc>
 8004a60:	4602      	mov	r2, r0
 8004a62:	61e0      	str	r0, [r4, #28]
 8004a64:	b920      	cbnz	r0, 8004a70 <_Balloc+0x20>
 8004a66:	4b18      	ldr	r3, [pc, #96]	@ (8004ac8 <_Balloc+0x78>)
 8004a68:	4818      	ldr	r0, [pc, #96]	@ (8004acc <_Balloc+0x7c>)
 8004a6a:	216b      	movs	r1, #107	@ 0x6b
 8004a6c:	f000 fd40 	bl	80054f0 <__assert_func>
 8004a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a74:	6006      	str	r6, [r0, #0]
 8004a76:	60c6      	str	r6, [r0, #12]
 8004a78:	69e6      	ldr	r6, [r4, #28]
 8004a7a:	68f3      	ldr	r3, [r6, #12]
 8004a7c:	b183      	cbz	r3, 8004aa0 <_Balloc+0x50>
 8004a7e:	69e3      	ldr	r3, [r4, #28]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a86:	b9b8      	cbnz	r0, 8004ab8 <_Balloc+0x68>
 8004a88:	2101      	movs	r1, #1
 8004a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8004a8e:	1d72      	adds	r2, r6, #5
 8004a90:	0092      	lsls	r2, r2, #2
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 fd4a 	bl	800552c <_calloc_r>
 8004a98:	b160      	cbz	r0, 8004ab4 <_Balloc+0x64>
 8004a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a9e:	e00e      	b.n	8004abe <_Balloc+0x6e>
 8004aa0:	2221      	movs	r2, #33	@ 0x21
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 fd41 	bl	800552c <_calloc_r>
 8004aaa:	69e3      	ldr	r3, [r4, #28]
 8004aac:	60f0      	str	r0, [r6, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e4      	bne.n	8004a7e <_Balloc+0x2e>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	6802      	ldr	r2, [r0, #0]
 8004aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ac4:	e7f7      	b.n	8004ab6 <_Balloc+0x66>
 8004ac6:	bf00      	nop
 8004ac8:	08005727 	.word	0x08005727
 8004acc:	080057a7 	.word	0x080057a7

08004ad0 <_Bfree>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	69c6      	ldr	r6, [r0, #28]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	b976      	cbnz	r6, 8004af8 <_Bfree+0x28>
 8004ada:	2010      	movs	r0, #16
 8004adc:	f7ff ff02 	bl	80048e4 <malloc>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	61e8      	str	r0, [r5, #28]
 8004ae4:	b920      	cbnz	r0, 8004af0 <_Bfree+0x20>
 8004ae6:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <_Bfree+0x3c>)
 8004ae8:	4809      	ldr	r0, [pc, #36]	@ (8004b10 <_Bfree+0x40>)
 8004aea:	218f      	movs	r1, #143	@ 0x8f
 8004aec:	f000 fd00 	bl	80054f0 <__assert_func>
 8004af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004af4:	6006      	str	r6, [r0, #0]
 8004af6:	60c6      	str	r6, [r0, #12]
 8004af8:	b13c      	cbz	r4, 8004b0a <_Bfree+0x3a>
 8004afa:	69eb      	ldr	r3, [r5, #28]
 8004afc:	6862      	ldr	r2, [r4, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b04:	6021      	str	r1, [r4, #0]
 8004b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	08005727 	.word	0x08005727
 8004b10:	080057a7 	.word	0x080057a7

08004b14 <__multadd>:
 8004b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b18:	690d      	ldr	r5, [r1, #16]
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	461e      	mov	r6, r3
 8004b20:	f101 0c14 	add.w	ip, r1, #20
 8004b24:	2000      	movs	r0, #0
 8004b26:	f8dc 3000 	ldr.w	r3, [ip]
 8004b2a:	b299      	uxth	r1, r3
 8004b2c:	fb02 6101 	mla	r1, r2, r1, r6
 8004b30:	0c1e      	lsrs	r6, r3, #16
 8004b32:	0c0b      	lsrs	r3, r1, #16
 8004b34:	fb02 3306 	mla	r3, r2, r6, r3
 8004b38:	b289      	uxth	r1, r1
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b40:	4285      	cmp	r5, r0
 8004b42:	f84c 1b04 	str.w	r1, [ip], #4
 8004b46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b4a:	dcec      	bgt.n	8004b26 <__multadd+0x12>
 8004b4c:	b30e      	cbz	r6, 8004b92 <__multadd+0x7e>
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dc19      	bgt.n	8004b88 <__multadd+0x74>
 8004b54:	6861      	ldr	r1, [r4, #4]
 8004b56:	4638      	mov	r0, r7
 8004b58:	3101      	adds	r1, #1
 8004b5a:	f7ff ff79 	bl	8004a50 <_Balloc>
 8004b5e:	4680      	mov	r8, r0
 8004b60:	b928      	cbnz	r0, 8004b6e <__multadd+0x5a>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <__multadd+0x84>)
 8004b66:	480d      	ldr	r0, [pc, #52]	@ (8004b9c <__multadd+0x88>)
 8004b68:	21ba      	movs	r1, #186	@ 0xba
 8004b6a:	f000 fcc1 	bl	80054f0 <__assert_func>
 8004b6e:	6922      	ldr	r2, [r4, #16]
 8004b70:	3202      	adds	r2, #2
 8004b72:	f104 010c 	add.w	r1, r4, #12
 8004b76:	0092      	lsls	r2, r2, #2
 8004b78:	300c      	adds	r0, #12
 8004b7a:	f7ff f802 	bl	8003b82 <memcpy>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4638      	mov	r0, r7
 8004b82:	f7ff ffa5 	bl	8004ad0 <_Bfree>
 8004b86:	4644      	mov	r4, r8
 8004b88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	615e      	str	r6, [r3, #20]
 8004b90:	6125      	str	r5, [r4, #16]
 8004b92:	4620      	mov	r0, r4
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b98:	08005796 	.word	0x08005796
 8004b9c:	080057a7 	.word	0x080057a7

08004ba0 <__hi0bits>:
 8004ba0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	bf36      	itet	cc
 8004ba8:	0403      	lslcc	r3, r0, #16
 8004baa:	2000      	movcs	r0, #0
 8004bac:	2010      	movcc	r0, #16
 8004bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bb2:	bf3c      	itt	cc
 8004bb4:	021b      	lslcc	r3, r3, #8
 8004bb6:	3008      	addcc	r0, #8
 8004bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bbc:	bf3c      	itt	cc
 8004bbe:	011b      	lslcc	r3, r3, #4
 8004bc0:	3004      	addcc	r0, #4
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc6:	bf3c      	itt	cc
 8004bc8:	009b      	lslcc	r3, r3, #2
 8004bca:	3002      	addcc	r0, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db05      	blt.n	8004bdc <__hi0bits+0x3c>
 8004bd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004bd4:	f100 0001 	add.w	r0, r0, #1
 8004bd8:	bf08      	it	eq
 8004bda:	2020      	moveq	r0, #32
 8004bdc:	4770      	bx	lr

08004bde <__lo0bits>:
 8004bde:	6803      	ldr	r3, [r0, #0]
 8004be0:	4602      	mov	r2, r0
 8004be2:	f013 0007 	ands.w	r0, r3, #7
 8004be6:	d00b      	beq.n	8004c00 <__lo0bits+0x22>
 8004be8:	07d9      	lsls	r1, r3, #31
 8004bea:	d421      	bmi.n	8004c30 <__lo0bits+0x52>
 8004bec:	0798      	lsls	r0, r3, #30
 8004bee:	bf49      	itett	mi
 8004bf0:	085b      	lsrmi	r3, r3, #1
 8004bf2:	089b      	lsrpl	r3, r3, #2
 8004bf4:	2001      	movmi	r0, #1
 8004bf6:	6013      	strmi	r3, [r2, #0]
 8004bf8:	bf5c      	itt	pl
 8004bfa:	6013      	strpl	r3, [r2, #0]
 8004bfc:	2002      	movpl	r0, #2
 8004bfe:	4770      	bx	lr
 8004c00:	b299      	uxth	r1, r3
 8004c02:	b909      	cbnz	r1, 8004c08 <__lo0bits+0x2a>
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	2010      	movs	r0, #16
 8004c08:	b2d9      	uxtb	r1, r3
 8004c0a:	b909      	cbnz	r1, 8004c10 <__lo0bits+0x32>
 8004c0c:	3008      	adds	r0, #8
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	0719      	lsls	r1, r3, #28
 8004c12:	bf04      	itt	eq
 8004c14:	091b      	lsreq	r3, r3, #4
 8004c16:	3004      	addeq	r0, #4
 8004c18:	0799      	lsls	r1, r3, #30
 8004c1a:	bf04      	itt	eq
 8004c1c:	089b      	lsreq	r3, r3, #2
 8004c1e:	3002      	addeq	r0, #2
 8004c20:	07d9      	lsls	r1, r3, #31
 8004c22:	d403      	bmi.n	8004c2c <__lo0bits+0x4e>
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	f100 0001 	add.w	r0, r0, #1
 8004c2a:	d003      	beq.n	8004c34 <__lo0bits+0x56>
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4770      	bx	lr
 8004c30:	2000      	movs	r0, #0
 8004c32:	4770      	bx	lr
 8004c34:	2020      	movs	r0, #32
 8004c36:	4770      	bx	lr

08004c38 <__i2b>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	f7ff ff07 	bl	8004a50 <_Balloc>
 8004c42:	4602      	mov	r2, r0
 8004c44:	b928      	cbnz	r0, 8004c52 <__i2b+0x1a>
 8004c46:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <__i2b+0x24>)
 8004c48:	4805      	ldr	r0, [pc, #20]	@ (8004c60 <__i2b+0x28>)
 8004c4a:	f240 1145 	movw	r1, #325	@ 0x145
 8004c4e:	f000 fc4f 	bl	80054f0 <__assert_func>
 8004c52:	2301      	movs	r3, #1
 8004c54:	6144      	str	r4, [r0, #20]
 8004c56:	6103      	str	r3, [r0, #16]
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08005796 	.word	0x08005796
 8004c60:	080057a7 	.word	0x080057a7

08004c64 <__multiply>:
 8004c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	4617      	mov	r7, r2
 8004c6a:	690a      	ldr	r2, [r1, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bfa8      	it	ge
 8004c72:	463b      	movge	r3, r7
 8004c74:	4689      	mov	r9, r1
 8004c76:	bfa4      	itt	ge
 8004c78:	460f      	movge	r7, r1
 8004c7a:	4699      	movge	r9, r3
 8004c7c:	693d      	ldr	r5, [r7, #16]
 8004c7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	eb05 060a 	add.w	r6, r5, sl
 8004c8a:	42b3      	cmp	r3, r6
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	bfb8      	it	lt
 8004c90:	3101      	addlt	r1, #1
 8004c92:	f7ff fedd 	bl	8004a50 <_Balloc>
 8004c96:	b930      	cbnz	r0, 8004ca6 <__multiply+0x42>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b41      	ldr	r3, [pc, #260]	@ (8004da0 <__multiply+0x13c>)
 8004c9c:	4841      	ldr	r0, [pc, #260]	@ (8004da4 <__multiply+0x140>)
 8004c9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004ca2:	f000 fc25 	bl	80054f0 <__assert_func>
 8004ca6:	f100 0414 	add.w	r4, r0, #20
 8004caa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004cae:	4623      	mov	r3, r4
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4573      	cmp	r3, lr
 8004cb4:	d320      	bcc.n	8004cf8 <__multiply+0x94>
 8004cb6:	f107 0814 	add.w	r8, r7, #20
 8004cba:	f109 0114 	add.w	r1, r9, #20
 8004cbe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004cc2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	1beb      	subs	r3, r5, r7
 8004cca:	3b15      	subs	r3, #21
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	3715      	adds	r7, #21
 8004cd4:	42bd      	cmp	r5, r7
 8004cd6:	bf38      	it	cc
 8004cd8:	2304      	movcc	r3, #4
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	9b02      	ldr	r3, [sp, #8]
 8004cde:	9103      	str	r1, [sp, #12]
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d80c      	bhi.n	8004cfe <__multiply+0x9a>
 8004ce4:	2e00      	cmp	r6, #0
 8004ce6:	dd03      	ble.n	8004cf0 <__multiply+0x8c>
 8004ce8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d055      	beq.n	8004d9c <__multiply+0x138>
 8004cf0:	6106      	str	r6, [r0, #16]
 8004cf2:	b005      	add	sp, #20
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	f843 2b04 	str.w	r2, [r3], #4
 8004cfc:	e7d9      	b.n	8004cb2 <__multiply+0x4e>
 8004cfe:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d02:	f1ba 0f00 	cmp.w	sl, #0
 8004d06:	d01f      	beq.n	8004d48 <__multiply+0xe4>
 8004d08:	46c4      	mov	ip, r8
 8004d0a:	46a1      	mov	r9, r4
 8004d0c:	2700      	movs	r7, #0
 8004d0e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d12:	f8d9 3000 	ldr.w	r3, [r9]
 8004d16:	fa1f fb82 	uxth.w	fp, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d20:	443b      	add	r3, r7
 8004d22:	f8d9 7000 	ldr.w	r7, [r9]
 8004d26:	0c12      	lsrs	r2, r2, #16
 8004d28:	0c3f      	lsrs	r7, r7, #16
 8004d2a:	fb0a 7202 	mla	r2, sl, r2, r7
 8004d2e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d38:	4565      	cmp	r5, ip
 8004d3a:	f849 3b04 	str.w	r3, [r9], #4
 8004d3e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004d42:	d8e4      	bhi.n	8004d0e <__multiply+0xaa>
 8004d44:	9b01      	ldr	r3, [sp, #4]
 8004d46:	50e7      	str	r7, [r4, r3]
 8004d48:	9b03      	ldr	r3, [sp, #12]
 8004d4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d4e:	3104      	adds	r1, #4
 8004d50:	f1b9 0f00 	cmp.w	r9, #0
 8004d54:	d020      	beq.n	8004d98 <__multiply+0x134>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	4647      	mov	r7, r8
 8004d5a:	46a4      	mov	ip, r4
 8004d5c:	f04f 0a00 	mov.w	sl, #0
 8004d60:	f8b7 b000 	ldrh.w	fp, [r7]
 8004d64:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004d68:	fb09 220b 	mla	r2, r9, fp, r2
 8004d6c:	4452      	add	r2, sl
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d74:	f84c 3b04 	str.w	r3, [ip], #4
 8004d78:	f857 3b04 	ldr.w	r3, [r7], #4
 8004d7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d80:	f8bc 3000 	ldrh.w	r3, [ip]
 8004d84:	fb09 330a 	mla	r3, r9, sl, r3
 8004d88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004d8c:	42bd      	cmp	r5, r7
 8004d8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d92:	d8e5      	bhi.n	8004d60 <__multiply+0xfc>
 8004d94:	9a01      	ldr	r2, [sp, #4]
 8004d96:	50a3      	str	r3, [r4, r2]
 8004d98:	3404      	adds	r4, #4
 8004d9a:	e79f      	b.n	8004cdc <__multiply+0x78>
 8004d9c:	3e01      	subs	r6, #1
 8004d9e:	e7a1      	b.n	8004ce4 <__multiply+0x80>
 8004da0:	08005796 	.word	0x08005796
 8004da4:	080057a7 	.word	0x080057a7

08004da8 <__pow5mult>:
 8004da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dac:	4615      	mov	r5, r2
 8004dae:	f012 0203 	ands.w	r2, r2, #3
 8004db2:	4607      	mov	r7, r0
 8004db4:	460e      	mov	r6, r1
 8004db6:	d007      	beq.n	8004dc8 <__pow5mult+0x20>
 8004db8:	4c25      	ldr	r4, [pc, #148]	@ (8004e50 <__pow5mult+0xa8>)
 8004dba:	3a01      	subs	r2, #1
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dc2:	f7ff fea7 	bl	8004b14 <__multadd>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	10ad      	asrs	r5, r5, #2
 8004dca:	d03d      	beq.n	8004e48 <__pow5mult+0xa0>
 8004dcc:	69fc      	ldr	r4, [r7, #28]
 8004dce:	b97c      	cbnz	r4, 8004df0 <__pow5mult+0x48>
 8004dd0:	2010      	movs	r0, #16
 8004dd2:	f7ff fd87 	bl	80048e4 <malloc>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	61f8      	str	r0, [r7, #28]
 8004dda:	b928      	cbnz	r0, 8004de8 <__pow5mult+0x40>
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <__pow5mult+0xac>)
 8004dde:	481e      	ldr	r0, [pc, #120]	@ (8004e58 <__pow5mult+0xb0>)
 8004de0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004de4:	f000 fb84 	bl	80054f0 <__assert_func>
 8004de8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dec:	6004      	str	r4, [r0, #0]
 8004dee:	60c4      	str	r4, [r0, #12]
 8004df0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004df4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004df8:	b94c      	cbnz	r4, 8004e0e <__pow5mult+0x66>
 8004dfa:	f240 2171 	movw	r1, #625	@ 0x271
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f7ff ff1a 	bl	8004c38 <__i2b>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	6003      	str	r3, [r0, #0]
 8004e0e:	f04f 0900 	mov.w	r9, #0
 8004e12:	07eb      	lsls	r3, r5, #31
 8004e14:	d50a      	bpl.n	8004e2c <__pow5mult+0x84>
 8004e16:	4631      	mov	r1, r6
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	f7ff ff22 	bl	8004c64 <__multiply>
 8004e20:	4631      	mov	r1, r6
 8004e22:	4680      	mov	r8, r0
 8004e24:	4638      	mov	r0, r7
 8004e26:	f7ff fe53 	bl	8004ad0 <_Bfree>
 8004e2a:	4646      	mov	r6, r8
 8004e2c:	106d      	asrs	r5, r5, #1
 8004e2e:	d00b      	beq.n	8004e48 <__pow5mult+0xa0>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	b938      	cbnz	r0, 8004e44 <__pow5mult+0x9c>
 8004e34:	4622      	mov	r2, r4
 8004e36:	4621      	mov	r1, r4
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff ff13 	bl	8004c64 <__multiply>
 8004e3e:	6020      	str	r0, [r4, #0]
 8004e40:	f8c0 9000 	str.w	r9, [r0]
 8004e44:	4604      	mov	r4, r0
 8004e46:	e7e4      	b.n	8004e12 <__pow5mult+0x6a>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e4e:	bf00      	nop
 8004e50:	08005858 	.word	0x08005858
 8004e54:	08005727 	.word	0x08005727
 8004e58:	080057a7 	.word	0x080057a7

08004e5c <__lshift>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	460c      	mov	r4, r1
 8004e62:	6849      	ldr	r1, [r1, #4]
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	4691      	mov	r9, r2
 8004e70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e74:	f108 0601 	add.w	r6, r8, #1
 8004e78:	42b3      	cmp	r3, r6
 8004e7a:	db0b      	blt.n	8004e94 <__lshift+0x38>
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff fde7 	bl	8004a50 <_Balloc>
 8004e82:	4605      	mov	r5, r0
 8004e84:	b948      	cbnz	r0, 8004e9a <__lshift+0x3e>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b28      	ldr	r3, [pc, #160]	@ (8004f2c <__lshift+0xd0>)
 8004e8a:	4829      	ldr	r0, [pc, #164]	@ (8004f30 <__lshift+0xd4>)
 8004e8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004e90:	f000 fb2e 	bl	80054f0 <__assert_func>
 8004e94:	3101      	adds	r1, #1
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	e7ee      	b.n	8004e78 <__lshift+0x1c>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f100 0114 	add.w	r1, r0, #20
 8004ea0:	f100 0210 	add.w	r2, r0, #16
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	4553      	cmp	r3, sl
 8004ea8:	db33      	blt.n	8004f12 <__lshift+0xb6>
 8004eaa:	6920      	ldr	r0, [r4, #16]
 8004eac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004eb0:	f104 0314 	add.w	r3, r4, #20
 8004eb4:	f019 091f 	ands.w	r9, r9, #31
 8004eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ec0:	d02b      	beq.n	8004f1a <__lshift+0xbe>
 8004ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ec6:	468a      	mov	sl, r1
 8004ec8:	2200      	movs	r2, #0
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	fa00 f009 	lsl.w	r0, r0, r9
 8004ed0:	4310      	orrs	r0, r2
 8004ed2:	f84a 0b04 	str.w	r0, [sl], #4
 8004ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eda:	459c      	cmp	ip, r3
 8004edc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ee0:	d8f3      	bhi.n	8004eca <__lshift+0x6e>
 8004ee2:	ebac 0304 	sub.w	r3, ip, r4
 8004ee6:	3b15      	subs	r3, #21
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	3304      	adds	r3, #4
 8004eee:	f104 0015 	add.w	r0, r4, #21
 8004ef2:	4560      	cmp	r0, ip
 8004ef4:	bf88      	it	hi
 8004ef6:	2304      	movhi	r3, #4
 8004ef8:	50ca      	str	r2, [r1, r3]
 8004efa:	b10a      	cbz	r2, 8004f00 <__lshift+0xa4>
 8004efc:	f108 0602 	add.w	r6, r8, #2
 8004f00:	3e01      	subs	r6, #1
 8004f02:	4638      	mov	r0, r7
 8004f04:	612e      	str	r6, [r5, #16]
 8004f06:	4621      	mov	r1, r4
 8004f08:	f7ff fde2 	bl	8004ad0 <_Bfree>
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f12:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f16:	3301      	adds	r3, #1
 8004f18:	e7c5      	b.n	8004ea6 <__lshift+0x4a>
 8004f1a:	3904      	subs	r1, #4
 8004f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f20:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f24:	459c      	cmp	ip, r3
 8004f26:	d8f9      	bhi.n	8004f1c <__lshift+0xc0>
 8004f28:	e7ea      	b.n	8004f00 <__lshift+0xa4>
 8004f2a:	bf00      	nop
 8004f2c:	08005796 	.word	0x08005796
 8004f30:	080057a7 	.word	0x080057a7

08004f34 <__mcmp>:
 8004f34:	690a      	ldr	r2, [r1, #16]
 8004f36:	4603      	mov	r3, r0
 8004f38:	6900      	ldr	r0, [r0, #16]
 8004f3a:	1a80      	subs	r0, r0, r2
 8004f3c:	b530      	push	{r4, r5, lr}
 8004f3e:	d10e      	bne.n	8004f5e <__mcmp+0x2a>
 8004f40:	3314      	adds	r3, #20
 8004f42:	3114      	adds	r1, #20
 8004f44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f54:	4295      	cmp	r5, r2
 8004f56:	d003      	beq.n	8004f60 <__mcmp+0x2c>
 8004f58:	d205      	bcs.n	8004f66 <__mcmp+0x32>
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	bd30      	pop	{r4, r5, pc}
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	d3f3      	bcc.n	8004f4c <__mcmp+0x18>
 8004f64:	e7fb      	b.n	8004f5e <__mcmp+0x2a>
 8004f66:	2001      	movs	r0, #1
 8004f68:	e7f9      	b.n	8004f5e <__mcmp+0x2a>
	...

08004f6c <__mdiff>:
 8004f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	4689      	mov	r9, r1
 8004f72:	4606      	mov	r6, r0
 8004f74:	4611      	mov	r1, r2
 8004f76:	4648      	mov	r0, r9
 8004f78:	4614      	mov	r4, r2
 8004f7a:	f7ff ffdb 	bl	8004f34 <__mcmp>
 8004f7e:	1e05      	subs	r5, r0, #0
 8004f80:	d112      	bne.n	8004fa8 <__mdiff+0x3c>
 8004f82:	4629      	mov	r1, r5
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff fd63 	bl	8004a50 <_Balloc>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	b928      	cbnz	r0, 8004f9a <__mdiff+0x2e>
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800508c <__mdiff+0x120>)
 8004f90:	f240 2137 	movw	r1, #567	@ 0x237
 8004f94:	483e      	ldr	r0, [pc, #248]	@ (8005090 <__mdiff+0x124>)
 8004f96:	f000 faab 	bl	80054f0 <__assert_func>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	b003      	add	sp, #12
 8004fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	bfbc      	itt	lt
 8004faa:	464b      	movlt	r3, r9
 8004fac:	46a1      	movlt	r9, r4
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004fb4:	bfba      	itte	lt
 8004fb6:	461c      	movlt	r4, r3
 8004fb8:	2501      	movlt	r5, #1
 8004fba:	2500      	movge	r5, #0
 8004fbc:	f7ff fd48 	bl	8004a50 <_Balloc>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	b918      	cbnz	r0, 8004fcc <__mdiff+0x60>
 8004fc4:	4b31      	ldr	r3, [pc, #196]	@ (800508c <__mdiff+0x120>)
 8004fc6:	f240 2145 	movw	r1, #581	@ 0x245
 8004fca:	e7e3      	b.n	8004f94 <__mdiff+0x28>
 8004fcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004fd0:	6926      	ldr	r6, [r4, #16]
 8004fd2:	60c5      	str	r5, [r0, #12]
 8004fd4:	f109 0310 	add.w	r3, r9, #16
 8004fd8:	f109 0514 	add.w	r5, r9, #20
 8004fdc:	f104 0e14 	add.w	lr, r4, #20
 8004fe0:	f100 0b14 	add.w	fp, r0, #20
 8004fe4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004fe8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	46d9      	mov	r9, fp
 8004ff0:	f04f 0c00 	mov.w	ip, #0
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004ffa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	fa1f f38a 	uxth.w	r3, sl
 8005004:	4619      	mov	r1, r3
 8005006:	b283      	uxth	r3, r0
 8005008:	1acb      	subs	r3, r1, r3
 800500a:	0c00      	lsrs	r0, r0, #16
 800500c:	4463      	add	r3, ip
 800500e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005012:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005016:	b29b      	uxth	r3, r3
 8005018:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800501c:	4576      	cmp	r6, lr
 800501e:	f849 3b04 	str.w	r3, [r9], #4
 8005022:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005026:	d8e5      	bhi.n	8004ff4 <__mdiff+0x88>
 8005028:	1b33      	subs	r3, r6, r4
 800502a:	3b15      	subs	r3, #21
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	3415      	adds	r4, #21
 8005032:	3304      	adds	r3, #4
 8005034:	42a6      	cmp	r6, r4
 8005036:	bf38      	it	cc
 8005038:	2304      	movcc	r3, #4
 800503a:	441d      	add	r5, r3
 800503c:	445b      	add	r3, fp
 800503e:	461e      	mov	r6, r3
 8005040:	462c      	mov	r4, r5
 8005042:	4544      	cmp	r4, r8
 8005044:	d30e      	bcc.n	8005064 <__mdiff+0xf8>
 8005046:	f108 0103 	add.w	r1, r8, #3
 800504a:	1b49      	subs	r1, r1, r5
 800504c:	f021 0103 	bic.w	r1, r1, #3
 8005050:	3d03      	subs	r5, #3
 8005052:	45a8      	cmp	r8, r5
 8005054:	bf38      	it	cc
 8005056:	2100      	movcc	r1, #0
 8005058:	440b      	add	r3, r1
 800505a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800505e:	b191      	cbz	r1, 8005086 <__mdiff+0x11a>
 8005060:	6117      	str	r7, [r2, #16]
 8005062:	e79d      	b.n	8004fa0 <__mdiff+0x34>
 8005064:	f854 1b04 	ldr.w	r1, [r4], #4
 8005068:	46e6      	mov	lr, ip
 800506a:	0c08      	lsrs	r0, r1, #16
 800506c:	fa1c fc81 	uxtah	ip, ip, r1
 8005070:	4471      	add	r1, lr
 8005072:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005076:	b289      	uxth	r1, r1
 8005078:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800507c:	f846 1b04 	str.w	r1, [r6], #4
 8005080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005084:	e7dd      	b.n	8005042 <__mdiff+0xd6>
 8005086:	3f01      	subs	r7, #1
 8005088:	e7e7      	b.n	800505a <__mdiff+0xee>
 800508a:	bf00      	nop
 800508c:	08005796 	.word	0x08005796
 8005090:	080057a7 	.word	0x080057a7

08005094 <__d2b>:
 8005094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005098:	460f      	mov	r7, r1
 800509a:	2101      	movs	r1, #1
 800509c:	ec59 8b10 	vmov	r8, r9, d0
 80050a0:	4616      	mov	r6, r2
 80050a2:	f7ff fcd5 	bl	8004a50 <_Balloc>
 80050a6:	4604      	mov	r4, r0
 80050a8:	b930      	cbnz	r0, 80050b8 <__d2b+0x24>
 80050aa:	4602      	mov	r2, r0
 80050ac:	4b23      	ldr	r3, [pc, #140]	@ (800513c <__d2b+0xa8>)
 80050ae:	4824      	ldr	r0, [pc, #144]	@ (8005140 <__d2b+0xac>)
 80050b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80050b4:	f000 fa1c 	bl	80054f0 <__assert_func>
 80050b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050c0:	b10d      	cbz	r5, 80050c6 <__d2b+0x32>
 80050c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	f1b8 0300 	subs.w	r3, r8, #0
 80050cc:	d023      	beq.n	8005116 <__d2b+0x82>
 80050ce:	4668      	mov	r0, sp
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f7ff fd84 	bl	8004bde <__lo0bits>
 80050d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050da:	b1d0      	cbz	r0, 8005112 <__d2b+0x7e>
 80050dc:	f1c0 0320 	rsb	r3, r0, #32
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	430b      	orrs	r3, r1
 80050e6:	40c2      	lsrs	r2, r0
 80050e8:	6163      	str	r3, [r4, #20]
 80050ea:	9201      	str	r2, [sp, #4]
 80050ec:	9b01      	ldr	r3, [sp, #4]
 80050ee:	61a3      	str	r3, [r4, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf0c      	ite	eq
 80050f4:	2201      	moveq	r2, #1
 80050f6:	2202      	movne	r2, #2
 80050f8:	6122      	str	r2, [r4, #16]
 80050fa:	b1a5      	cbz	r5, 8005126 <__d2b+0x92>
 80050fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005100:	4405      	add	r5, r0
 8005102:	603d      	str	r5, [r7, #0]
 8005104:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005108:	6030      	str	r0, [r6, #0]
 800510a:	4620      	mov	r0, r4
 800510c:	b003      	add	sp, #12
 800510e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005112:	6161      	str	r1, [r4, #20]
 8005114:	e7ea      	b.n	80050ec <__d2b+0x58>
 8005116:	a801      	add	r0, sp, #4
 8005118:	f7ff fd61 	bl	8004bde <__lo0bits>
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	6163      	str	r3, [r4, #20]
 8005120:	3020      	adds	r0, #32
 8005122:	2201      	movs	r2, #1
 8005124:	e7e8      	b.n	80050f8 <__d2b+0x64>
 8005126:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800512a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800512e:	6038      	str	r0, [r7, #0]
 8005130:	6918      	ldr	r0, [r3, #16]
 8005132:	f7ff fd35 	bl	8004ba0 <__hi0bits>
 8005136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800513a:	e7e5      	b.n	8005108 <__d2b+0x74>
 800513c:	08005796 	.word	0x08005796
 8005140:	080057a7 	.word	0x080057a7

08005144 <__sfputc_r>:
 8005144:	6893      	ldr	r3, [r2, #8]
 8005146:	3b01      	subs	r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	b410      	push	{r4}
 800514c:	6093      	str	r3, [r2, #8]
 800514e:	da08      	bge.n	8005162 <__sfputc_r+0x1e>
 8005150:	6994      	ldr	r4, [r2, #24]
 8005152:	42a3      	cmp	r3, r4
 8005154:	db01      	blt.n	800515a <__sfputc_r+0x16>
 8005156:	290a      	cmp	r1, #10
 8005158:	d103      	bne.n	8005162 <__sfputc_r+0x1e>
 800515a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800515e:	f7fe bc0e 	b.w	800397e <__swbuf_r>
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	1c58      	adds	r0, r3, #1
 8005166:	6010      	str	r0, [r2, #0]
 8005168:	7019      	strb	r1, [r3, #0]
 800516a:	4608      	mov	r0, r1
 800516c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005170:	4770      	bx	lr

08005172 <__sfputs_r>:
 8005172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	4614      	mov	r4, r2
 800517a:	18d5      	adds	r5, r2, r3
 800517c:	42ac      	cmp	r4, r5
 800517e:	d101      	bne.n	8005184 <__sfputs_r+0x12>
 8005180:	2000      	movs	r0, #0
 8005182:	e007      	b.n	8005194 <__sfputs_r+0x22>
 8005184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005188:	463a      	mov	r2, r7
 800518a:	4630      	mov	r0, r6
 800518c:	f7ff ffda 	bl	8005144 <__sfputc_r>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d1f3      	bne.n	800517c <__sfputs_r+0xa>
 8005194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005198 <_vfiprintf_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	460d      	mov	r5, r1
 800519e:	b09d      	sub	sp, #116	@ 0x74
 80051a0:	4614      	mov	r4, r2
 80051a2:	4698      	mov	r8, r3
 80051a4:	4606      	mov	r6, r0
 80051a6:	b118      	cbz	r0, 80051b0 <_vfiprintf_r+0x18>
 80051a8:	6a03      	ldr	r3, [r0, #32]
 80051aa:	b90b      	cbnz	r3, 80051b0 <_vfiprintf_r+0x18>
 80051ac:	f7fe faa0 	bl	80036f0 <__sinit>
 80051b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051b2:	07d9      	lsls	r1, r3, #31
 80051b4:	d405      	bmi.n	80051c2 <_vfiprintf_r+0x2a>
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	059a      	lsls	r2, r3, #22
 80051ba:	d402      	bmi.n	80051c2 <_vfiprintf_r+0x2a>
 80051bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051be:	f7fe fcde 	bl	8003b7e <__retarget_lock_acquire_recursive>
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	d501      	bpl.n	80051cc <_vfiprintf_r+0x34>
 80051c8:	692b      	ldr	r3, [r5, #16]
 80051ca:	b99b      	cbnz	r3, 80051f4 <_vfiprintf_r+0x5c>
 80051cc:	4629      	mov	r1, r5
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7fe fc14 	bl	80039fc <__swsetup_r>
 80051d4:	b170      	cbz	r0, 80051f4 <_vfiprintf_r+0x5c>
 80051d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051d8:	07dc      	lsls	r4, r3, #31
 80051da:	d504      	bpl.n	80051e6 <_vfiprintf_r+0x4e>
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	b01d      	add	sp, #116	@ 0x74
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	0598      	lsls	r0, r3, #22
 80051ea:	d4f7      	bmi.n	80051dc <_vfiprintf_r+0x44>
 80051ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ee:	f7fe fcc7 	bl	8003b80 <__retarget_lock_release_recursive>
 80051f2:	e7f3      	b.n	80051dc <_vfiprintf_r+0x44>
 80051f4:	2300      	movs	r3, #0
 80051f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f8:	2320      	movs	r3, #32
 80051fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005202:	2330      	movs	r3, #48	@ 0x30
 8005204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053b4 <_vfiprintf_r+0x21c>
 8005208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800520c:	f04f 0901 	mov.w	r9, #1
 8005210:	4623      	mov	r3, r4
 8005212:	469a      	mov	sl, r3
 8005214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005218:	b10a      	cbz	r2, 800521e <_vfiprintf_r+0x86>
 800521a:	2a25      	cmp	r2, #37	@ 0x25
 800521c:	d1f9      	bne.n	8005212 <_vfiprintf_r+0x7a>
 800521e:	ebba 0b04 	subs.w	fp, sl, r4
 8005222:	d00b      	beq.n	800523c <_vfiprintf_r+0xa4>
 8005224:	465b      	mov	r3, fp
 8005226:	4622      	mov	r2, r4
 8005228:	4629      	mov	r1, r5
 800522a:	4630      	mov	r0, r6
 800522c:	f7ff ffa1 	bl	8005172 <__sfputs_r>
 8005230:	3001      	adds	r0, #1
 8005232:	f000 80a7 	beq.w	8005384 <_vfiprintf_r+0x1ec>
 8005236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005238:	445a      	add	r2, fp
 800523a:	9209      	str	r2, [sp, #36]	@ 0x24
 800523c:	f89a 3000 	ldrb.w	r3, [sl]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 809f 	beq.w	8005384 <_vfiprintf_r+0x1ec>
 8005246:	2300      	movs	r3, #0
 8005248:	f04f 32ff 	mov.w	r2, #4294967295
 800524c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005250:	f10a 0a01 	add.w	sl, sl, #1
 8005254:	9304      	str	r3, [sp, #16]
 8005256:	9307      	str	r3, [sp, #28]
 8005258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800525c:	931a      	str	r3, [sp, #104]	@ 0x68
 800525e:	4654      	mov	r4, sl
 8005260:	2205      	movs	r2, #5
 8005262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005266:	4853      	ldr	r0, [pc, #332]	@ (80053b4 <_vfiprintf_r+0x21c>)
 8005268:	f7fa ffb2 	bl	80001d0 <memchr>
 800526c:	9a04      	ldr	r2, [sp, #16]
 800526e:	b9d8      	cbnz	r0, 80052a8 <_vfiprintf_r+0x110>
 8005270:	06d1      	lsls	r1, r2, #27
 8005272:	bf44      	itt	mi
 8005274:	2320      	movmi	r3, #32
 8005276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800527a:	0713      	lsls	r3, r2, #28
 800527c:	bf44      	itt	mi
 800527e:	232b      	movmi	r3, #43	@ 0x2b
 8005280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005284:	f89a 3000 	ldrb.w	r3, [sl]
 8005288:	2b2a      	cmp	r3, #42	@ 0x2a
 800528a:	d015      	beq.n	80052b8 <_vfiprintf_r+0x120>
 800528c:	9a07      	ldr	r2, [sp, #28]
 800528e:	4654      	mov	r4, sl
 8005290:	2000      	movs	r0, #0
 8005292:	f04f 0c0a 	mov.w	ip, #10
 8005296:	4621      	mov	r1, r4
 8005298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800529c:	3b30      	subs	r3, #48	@ 0x30
 800529e:	2b09      	cmp	r3, #9
 80052a0:	d94b      	bls.n	800533a <_vfiprintf_r+0x1a2>
 80052a2:	b1b0      	cbz	r0, 80052d2 <_vfiprintf_r+0x13a>
 80052a4:	9207      	str	r2, [sp, #28]
 80052a6:	e014      	b.n	80052d2 <_vfiprintf_r+0x13a>
 80052a8:	eba0 0308 	sub.w	r3, r0, r8
 80052ac:	fa09 f303 	lsl.w	r3, r9, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	46a2      	mov	sl, r4
 80052b6:	e7d2      	b.n	800525e <_vfiprintf_r+0xc6>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	1d19      	adds	r1, r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	9103      	str	r1, [sp, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bfbb      	ittet	lt
 80052c4:	425b      	neglt	r3, r3
 80052c6:	f042 0202 	orrlt.w	r2, r2, #2
 80052ca:	9307      	strge	r3, [sp, #28]
 80052cc:	9307      	strlt	r3, [sp, #28]
 80052ce:	bfb8      	it	lt
 80052d0:	9204      	strlt	r2, [sp, #16]
 80052d2:	7823      	ldrb	r3, [r4, #0]
 80052d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80052d6:	d10a      	bne.n	80052ee <_vfiprintf_r+0x156>
 80052d8:	7863      	ldrb	r3, [r4, #1]
 80052da:	2b2a      	cmp	r3, #42	@ 0x2a
 80052dc:	d132      	bne.n	8005344 <_vfiprintf_r+0x1ac>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	1d1a      	adds	r2, r3, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	9203      	str	r2, [sp, #12]
 80052e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ea:	3402      	adds	r4, #2
 80052ec:	9305      	str	r3, [sp, #20]
 80052ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053c4 <_vfiprintf_r+0x22c>
 80052f2:	7821      	ldrb	r1, [r4, #0]
 80052f4:	2203      	movs	r2, #3
 80052f6:	4650      	mov	r0, sl
 80052f8:	f7fa ff6a 	bl	80001d0 <memchr>
 80052fc:	b138      	cbz	r0, 800530e <_vfiprintf_r+0x176>
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	eba0 000a 	sub.w	r0, r0, sl
 8005304:	2240      	movs	r2, #64	@ 0x40
 8005306:	4082      	lsls	r2, r0
 8005308:	4313      	orrs	r3, r2
 800530a:	3401      	adds	r4, #1
 800530c:	9304      	str	r3, [sp, #16]
 800530e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005312:	4829      	ldr	r0, [pc, #164]	@ (80053b8 <_vfiprintf_r+0x220>)
 8005314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005318:	2206      	movs	r2, #6
 800531a:	f7fa ff59 	bl	80001d0 <memchr>
 800531e:	2800      	cmp	r0, #0
 8005320:	d03f      	beq.n	80053a2 <_vfiprintf_r+0x20a>
 8005322:	4b26      	ldr	r3, [pc, #152]	@ (80053bc <_vfiprintf_r+0x224>)
 8005324:	bb1b      	cbnz	r3, 800536e <_vfiprintf_r+0x1d6>
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	3307      	adds	r3, #7
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	3308      	adds	r3, #8
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005334:	443b      	add	r3, r7
 8005336:	9309      	str	r3, [sp, #36]	@ 0x24
 8005338:	e76a      	b.n	8005210 <_vfiprintf_r+0x78>
 800533a:	fb0c 3202 	mla	r2, ip, r2, r3
 800533e:	460c      	mov	r4, r1
 8005340:	2001      	movs	r0, #1
 8005342:	e7a8      	b.n	8005296 <_vfiprintf_r+0xfe>
 8005344:	2300      	movs	r3, #0
 8005346:	3401      	adds	r4, #1
 8005348:	9305      	str	r3, [sp, #20]
 800534a:	4619      	mov	r1, r3
 800534c:	f04f 0c0a 	mov.w	ip, #10
 8005350:	4620      	mov	r0, r4
 8005352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005356:	3a30      	subs	r2, #48	@ 0x30
 8005358:	2a09      	cmp	r2, #9
 800535a:	d903      	bls.n	8005364 <_vfiprintf_r+0x1cc>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0c6      	beq.n	80052ee <_vfiprintf_r+0x156>
 8005360:	9105      	str	r1, [sp, #20]
 8005362:	e7c4      	b.n	80052ee <_vfiprintf_r+0x156>
 8005364:	fb0c 2101 	mla	r1, ip, r1, r2
 8005368:	4604      	mov	r4, r0
 800536a:	2301      	movs	r3, #1
 800536c:	e7f0      	b.n	8005350 <_vfiprintf_r+0x1b8>
 800536e:	ab03      	add	r3, sp, #12
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	462a      	mov	r2, r5
 8005374:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <_vfiprintf_r+0x228>)
 8005376:	a904      	add	r1, sp, #16
 8005378:	4630      	mov	r0, r6
 800537a:	f7fd fccb 	bl	8002d14 <_printf_float>
 800537e:	4607      	mov	r7, r0
 8005380:	1c78      	adds	r0, r7, #1
 8005382:	d1d6      	bne.n	8005332 <_vfiprintf_r+0x19a>
 8005384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	d405      	bmi.n	8005396 <_vfiprintf_r+0x1fe>
 800538a:	89ab      	ldrh	r3, [r5, #12]
 800538c:	059a      	lsls	r2, r3, #22
 800538e:	d402      	bmi.n	8005396 <_vfiprintf_r+0x1fe>
 8005390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005392:	f7fe fbf5 	bl	8003b80 <__retarget_lock_release_recursive>
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	065b      	lsls	r3, r3, #25
 800539a:	f53f af1f 	bmi.w	80051dc <_vfiprintf_r+0x44>
 800539e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053a0:	e71e      	b.n	80051e0 <_vfiprintf_r+0x48>
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <_vfiprintf_r+0x228>)
 80053aa:	a904      	add	r1, sp, #16
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7fd ff49 	bl	8003244 <_printf_i>
 80053b2:	e7e4      	b.n	800537e <_vfiprintf_r+0x1e6>
 80053b4:	08005800 	.word	0x08005800
 80053b8:	0800580a 	.word	0x0800580a
 80053bc:	08002d15 	.word	0x08002d15
 80053c0:	08005173 	.word	0x08005173
 80053c4:	08005806 	.word	0x08005806

080053c8 <__swhatbuf_r>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	460c      	mov	r4, r1
 80053cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	b096      	sub	sp, #88	@ 0x58
 80053d4:	4615      	mov	r5, r2
 80053d6:	461e      	mov	r6, r3
 80053d8:	da0d      	bge.n	80053f6 <__swhatbuf_r+0x2e>
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	bf14      	ite	ne
 80053e6:	2340      	movne	r3, #64	@ 0x40
 80053e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053ec:	2000      	movs	r0, #0
 80053ee:	6031      	str	r1, [r6, #0]
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	b016      	add	sp, #88	@ 0x58
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	466a      	mov	r2, sp
 80053f8:	f000 f848 	bl	800548c <_fstat_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	dbec      	blt.n	80053da <__swhatbuf_r+0x12>
 8005400:	9901      	ldr	r1, [sp, #4]
 8005402:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005406:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800540a:	4259      	negs	r1, r3
 800540c:	4159      	adcs	r1, r3
 800540e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005412:	e7eb      	b.n	80053ec <__swhatbuf_r+0x24>

08005414 <__smakebuf_r>:
 8005414:	898b      	ldrh	r3, [r1, #12]
 8005416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005418:	079d      	lsls	r5, r3, #30
 800541a:	4606      	mov	r6, r0
 800541c:	460c      	mov	r4, r1
 800541e:	d507      	bpl.n	8005430 <__smakebuf_r+0x1c>
 8005420:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	2301      	movs	r3, #1
 800542a:	6163      	str	r3, [r4, #20]
 800542c:	b003      	add	sp, #12
 800542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005430:	ab01      	add	r3, sp, #4
 8005432:	466a      	mov	r2, sp
 8005434:	f7ff ffc8 	bl	80053c8 <__swhatbuf_r>
 8005438:	9f00      	ldr	r7, [sp, #0]
 800543a:	4605      	mov	r5, r0
 800543c:	4639      	mov	r1, r7
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff fa7a 	bl	8004938 <_malloc_r>
 8005444:	b948      	cbnz	r0, 800545a <__smakebuf_r+0x46>
 8005446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544a:	059a      	lsls	r2, r3, #22
 800544c:	d4ee      	bmi.n	800542c <__smakebuf_r+0x18>
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	f043 0302 	orr.w	r3, r3, #2
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	e7e2      	b.n	8005420 <__smakebuf_r+0xc>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	6020      	str	r0, [r4, #0]
 800545e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800546a:	b15b      	cbz	r3, 8005484 <__smakebuf_r+0x70>
 800546c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f81d 	bl	80054b0 <_isatty_r>
 8005476:	b128      	cbz	r0, 8005484 <__smakebuf_r+0x70>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	431d      	orrs	r5, r3
 8005488:	81a5      	strh	r5, [r4, #12]
 800548a:	e7cf      	b.n	800542c <__smakebuf_r+0x18>

0800548c <_fstat_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d07      	ldr	r5, [pc, #28]	@ (80054ac <_fstat_r+0x20>)
 8005490:	2300      	movs	r3, #0
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	f7fd f9ed 	bl	8002878 <_fstat>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d102      	bne.n	80054a8 <_fstat_r+0x1c>
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	b103      	cbz	r3, 80054a8 <_fstat_r+0x1c>
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
 80054aa:	bf00      	nop
 80054ac:	20000428 	.word	0x20000428

080054b0 <_isatty_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d06      	ldr	r5, [pc, #24]	@ (80054cc <_isatty_r+0x1c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fd f9ec 	bl	8002898 <_isatty>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_isatty_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_isatty_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20000428 	.word	0x20000428

080054d0 <_sbrk_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d06      	ldr	r5, [pc, #24]	@ (80054ec <_sbrk_r+0x1c>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	f000 f8b8 	bl	8005650 <_sbrk>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_sbrk_r+0x1a>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_sbrk_r+0x1a>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	20000428 	.word	0x20000428

080054f0 <__assert_func>:
 80054f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054f2:	4614      	mov	r4, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b09      	ldr	r3, [pc, #36]	@ (800551c <__assert_func+0x2c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4605      	mov	r5, r0
 80054fc:	68d8      	ldr	r0, [r3, #12]
 80054fe:	b14c      	cbz	r4, 8005514 <__assert_func+0x24>
 8005500:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <__assert_func+0x30>)
 8005502:	9100      	str	r1, [sp, #0]
 8005504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005508:	4906      	ldr	r1, [pc, #24]	@ (8005524 <__assert_func+0x34>)
 800550a:	462b      	mov	r3, r5
 800550c:	f000 f842 	bl	8005594 <fiprintf>
 8005510:	f000 f852 	bl	80055b8 <abort>
 8005514:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <__assert_func+0x38>)
 8005516:	461c      	mov	r4, r3
 8005518:	e7f3      	b.n	8005502 <__assert_func+0x12>
 800551a:	bf00      	nop
 800551c:	2000000c 	.word	0x2000000c
 8005520:	0800581b 	.word	0x0800581b
 8005524:	08005828 	.word	0x08005828
 8005528:	08005856 	.word	0x08005856

0800552c <_calloc_r>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	fba1 5402 	umull	r5, r4, r1, r2
 8005532:	b934      	cbnz	r4, 8005542 <_calloc_r+0x16>
 8005534:	4629      	mov	r1, r5
 8005536:	f7ff f9ff 	bl	8004938 <_malloc_r>
 800553a:	4606      	mov	r6, r0
 800553c:	b928      	cbnz	r0, 800554a <_calloc_r+0x1e>
 800553e:	4630      	mov	r0, r6
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	220c      	movs	r2, #12
 8005544:	6002      	str	r2, [r0, #0]
 8005546:	2600      	movs	r6, #0
 8005548:	e7f9      	b.n	800553e <_calloc_r+0x12>
 800554a:	462a      	mov	r2, r5
 800554c:	4621      	mov	r1, r4
 800554e:	f7fe faab 	bl	8003aa8 <memset>
 8005552:	e7f4      	b.n	800553e <_calloc_r+0x12>

08005554 <__ascii_mbtowc>:
 8005554:	b082      	sub	sp, #8
 8005556:	b901      	cbnz	r1, 800555a <__ascii_mbtowc+0x6>
 8005558:	a901      	add	r1, sp, #4
 800555a:	b142      	cbz	r2, 800556e <__ascii_mbtowc+0x1a>
 800555c:	b14b      	cbz	r3, 8005572 <__ascii_mbtowc+0x1e>
 800555e:	7813      	ldrb	r3, [r2, #0]
 8005560:	600b      	str	r3, [r1, #0]
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	1e10      	subs	r0, r2, #0
 8005566:	bf18      	it	ne
 8005568:	2001      	movne	r0, #1
 800556a:	b002      	add	sp, #8
 800556c:	4770      	bx	lr
 800556e:	4610      	mov	r0, r2
 8005570:	e7fb      	b.n	800556a <__ascii_mbtowc+0x16>
 8005572:	f06f 0001 	mvn.w	r0, #1
 8005576:	e7f8      	b.n	800556a <__ascii_mbtowc+0x16>

08005578 <__ascii_wctomb>:
 8005578:	4603      	mov	r3, r0
 800557a:	4608      	mov	r0, r1
 800557c:	b141      	cbz	r1, 8005590 <__ascii_wctomb+0x18>
 800557e:	2aff      	cmp	r2, #255	@ 0xff
 8005580:	d904      	bls.n	800558c <__ascii_wctomb+0x14>
 8005582:	228a      	movs	r2, #138	@ 0x8a
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	4770      	bx	lr
 800558c:	700a      	strb	r2, [r1, #0]
 800558e:	2001      	movs	r0, #1
 8005590:	4770      	bx	lr
	...

08005594 <fiprintf>:
 8005594:	b40e      	push	{r1, r2, r3}
 8005596:	b503      	push	{r0, r1, lr}
 8005598:	4601      	mov	r1, r0
 800559a:	ab03      	add	r3, sp, #12
 800559c:	4805      	ldr	r0, [pc, #20]	@ (80055b4 <fiprintf+0x20>)
 800559e:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a2:	6800      	ldr	r0, [r0, #0]
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	f7ff fdf7 	bl	8005198 <_vfiprintf_r>
 80055aa:	b002      	add	sp, #8
 80055ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b0:	b003      	add	sp, #12
 80055b2:	4770      	bx	lr
 80055b4:	2000000c 	.word	0x2000000c

080055b8 <abort>:
 80055b8:	b508      	push	{r3, lr}
 80055ba:	2006      	movs	r0, #6
 80055bc:	f000 f82c 	bl	8005618 <raise>
 80055c0:	2001      	movs	r0, #1
 80055c2:	f7fd f925 	bl	8002810 <_exit>

080055c6 <_raise_r>:
 80055c6:	291f      	cmp	r1, #31
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4605      	mov	r5, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	d904      	bls.n	80055da <_raise_r+0x14>
 80055d0:	2316      	movs	r3, #22
 80055d2:	6003      	str	r3, [r0, #0]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	bd38      	pop	{r3, r4, r5, pc}
 80055da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80055dc:	b112      	cbz	r2, 80055e4 <_raise_r+0x1e>
 80055de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055e2:	b94b      	cbnz	r3, 80055f8 <_raise_r+0x32>
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f831 	bl	800564c <_getpid_r>
 80055ea:	4622      	mov	r2, r4
 80055ec:	4601      	mov	r1, r0
 80055ee:	4628      	mov	r0, r5
 80055f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f4:	f000 b818 	b.w	8005628 <_kill_r>
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d00a      	beq.n	8005612 <_raise_r+0x4c>
 80055fc:	1c59      	adds	r1, r3, #1
 80055fe:	d103      	bne.n	8005608 <_raise_r+0x42>
 8005600:	2316      	movs	r3, #22
 8005602:	6003      	str	r3, [r0, #0]
 8005604:	2001      	movs	r0, #1
 8005606:	e7e7      	b.n	80055d8 <_raise_r+0x12>
 8005608:	2100      	movs	r1, #0
 800560a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800560e:	4620      	mov	r0, r4
 8005610:	4798      	blx	r3
 8005612:	2000      	movs	r0, #0
 8005614:	e7e0      	b.n	80055d8 <_raise_r+0x12>
	...

08005618 <raise>:
 8005618:	4b02      	ldr	r3, [pc, #8]	@ (8005624 <raise+0xc>)
 800561a:	4601      	mov	r1, r0
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f7ff bfd2 	b.w	80055c6 <_raise_r>
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c

08005628 <_kill_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d07      	ldr	r5, [pc, #28]	@ (8005648 <_kill_r+0x20>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	f7fd f8db 	bl	80027f0 <_kill>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d102      	bne.n	8005644 <_kill_r+0x1c>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	b103      	cbz	r3, 8005644 <_kill_r+0x1c>
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	bd38      	pop	{r3, r4, r5, pc}
 8005646:	bf00      	nop
 8005648:	20000428 	.word	0x20000428

0800564c <_getpid_r>:
 800564c:	f7fd b8c8 	b.w	80027e0 <_getpid>

08005650 <_sbrk>:
 8005650:	4a04      	ldr	r2, [pc, #16]	@ (8005664 <_sbrk+0x14>)
 8005652:	6811      	ldr	r1, [r2, #0]
 8005654:	4603      	mov	r3, r0
 8005656:	b909      	cbnz	r1, 800565c <_sbrk+0xc>
 8005658:	4903      	ldr	r1, [pc, #12]	@ (8005668 <_sbrk+0x18>)
 800565a:	6011      	str	r1, [r2, #0]
 800565c:	6810      	ldr	r0, [r2, #0]
 800565e:	4403      	add	r3, r0
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4770      	bx	lr
 8005664:	20000438 	.word	0x20000438
 8005668:	20000440 	.word	0x20000440

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
