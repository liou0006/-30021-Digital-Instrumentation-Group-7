
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005180  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005310  08005310  00006310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056fc  080056fc  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000066fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08005704  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001c8  080058cc  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080058cc  0000743c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081a8  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a84  00000000  00000000  0000f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00010e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d3  00000000  00000000  000118c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004db3  00000000  00000000  0001209b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd65  00000000  00000000  00016e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bd76  00000000  00000000  00022bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007e929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  0007e96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  00082934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f8 	.word	0x080052f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	080052f8 	.word	0x080052f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8000da4 <EXTI_Init+0x1fc>)
 8000bb6:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	799b      	ldrb	r3, [r3, #6]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80d2 	beq.w	8000d66 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bd0:	015b      	lsls	r3, r3, #5
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 031f 	and.w	r3, r3, #31
 8000bdc:	2201      	movs	r2, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	ea01 0302 	and.w	r3, r1, r2
 8000bfa:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	095b      	lsrs	r3, r3, #5
 8000c02:	015a      	lsls	r2, r3, #5
 8000c04:	4b68      	ldr	r3, [pc, #416]	@ (8000da8 <EXTI_Init+0x200>)
 8000c06:	4413      	add	r3, r2
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2201      	movs	r2, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	0158      	lsls	r0, r3, #5
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <EXTI_Init+0x200>)
 8000c24:	4403      	add	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	ea01 0302 	and.w	r3, r1, r2
 8000c2c:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	095b      	lsrs	r3, r3, #5
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000c5e:	4b51      	ldr	r3, [pc, #324]	@ (8000da4 <EXTI_Init+0x1fc>)
 8000c60:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	4b50      	ldr	r3, [pc, #320]	@ (8000dac <EXTI_Init+0x204>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	2201      	movs	r2, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	0158      	lsls	r0, r3, #5
 8000c88:	4b48      	ldr	r3, [pc, #288]	@ (8000dac <EXTI_Init+0x204>)
 8000c8a:	4403      	add	r3, r0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	ea01 0302 	and.w	r3, r1, r2
 8000c92:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	015a      	lsls	r2, r3, #5
 8000c9c:	4b44      	ldr	r3, [pc, #272]	@ (8000db0 <EXTI_Init+0x208>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	2201      	movs	r2, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	0158      	lsls	r0, r3, #5
 8000cba:	4b3d      	ldr	r3, [pc, #244]	@ (8000db0 <EXTI_Init+0x208>)
 8000cbc:	4403      	add	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	ea01 0302 	and.w	r3, r1, r2
 8000cc4:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	795b      	ldrb	r3, [r3, #5]
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d132      	bne.n	8000d34 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	015a      	lsls	r2, r3, #5
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <EXTI_Init+0x204>)
 8000cd8:	4413      	add	r3, r2
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	0159      	lsls	r1, r3, #5
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <EXTI_Init+0x204>)
 8000cf6:	440b      	add	r3, r1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	ea42 0300 	orr.w	r3, r2, r0
 8000cfe:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	015a      	lsls	r2, r3, #5
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <EXTI_Init+0x208>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	0159      	lsls	r1, r3, #5
 8000d26:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <EXTI_Init+0x208>)
 8000d28:	440b      	add	r3, r1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	ea42 0300 	orr.w	r3, r2, r0
 8000d30:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000d32:	e030      	b.n	8000d96 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	015b      	lsls	r3, r3, #5
 8000d42:	4413      	add	r3, r2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	e017      	b.n	8000d96 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	015b      	lsls	r3, r3, #5
 8000d74:	4413      	add	r3, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	2201      	movs	r2, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40010400 	.word	0x40010400
 8000da8:	40010404 	.word	0x40010404
 8000dac:	40010408 	.word	0x40010408
 8000db0:	4001040c 	.word	0x4001040c

08000db4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000dcc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f002 021f 	and.w	r2, r2, #31
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	015a      	lsls	r2, r3, #5
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <EXTI_GetITStatus+0x6c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	f002 021f 	and.w	r2, r2, #31
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <EXTI_GetITStatus+0x5a>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e001      	b.n	8000e12 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40010414 	.word	0x40010414

08000e24 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f103 	lsl.w	r1, r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <EXTI_ClearITPendingBit+0x30>)
 8000e40:	4413      	add	r3, r2
 8000e42:	460a      	mov	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010414 	.word	0x40010414

08000e58 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e07c      	b.n	8000f6e <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e74:	2201      	movs	r2, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d16b      	bne.n	8000f68 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <GPIO_Init+0x48>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d134      	bne.n	8000f0a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	795b      	ldrb	r3, [r3, #5]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2301      	movs	r3, #1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	889b      	ldrh	r3, [r3, #4]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	799b      	ldrb	r3, [r3, #6]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2103      	movs	r1, #3
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2103      	movs	r1, #3
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	f67f af7f 	bls.w	8000e74 <GPIO_Init+0x1c>
    }
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	71da      	strb	r2, [r3, #7]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8a1b      	ldrh	r3, [r3, #16]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800100c:	e002      	b.n	8001014 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <NVIC_PriorityGroupConfig+0x24>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	60d3      	str	r3, [r2, #12]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d03a      	beq.n	80010da <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <NVIC_Init+0xc0>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f1c3 0304 	rsb	r3, r3, #4
 8001078:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa22 f303 	lsr.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	461a      	mov	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	789b      	ldrb	r3, [r3, #2]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4313      	orrs	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80010a8:	4a18      	ldr	r2, [pc, #96]	@ (800110c <NVIC_Init+0xc4>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	6979      	ldr	r1, [r7, #20]
 80010b0:	b2c9      	uxtb	r1, r1
 80010b2:	4413      	add	r3, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010c2:	4912      	ldr	r1, [pc, #72]	@ (800110c <NVIC_Init+0xc4>)
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	0952      	lsrs	r2, r2, #5
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010d4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80010d8:	e00f      	b.n	80010fa <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010e2:	490a      	ldr	r1, [pc, #40]	@ (800110c <NVIC_Init+0xc4>)
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	7812      	ldrb	r2, [r2, #0]
 80010e8:	0952      	lsrs	r2, r2, #5
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010ee:	2201      	movs	r2, #1
 80010f0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010f2:	f100 0320 	add.w	r3, r0, #32
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	e000e100 	.word	0xe000e100

08001110 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001110:	b480      	push	{r7}
 8001112:	b08b      	sub	sp, #44	@ 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001138:	4b8b      	ldr	r3, [pc, #556]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d011      	beq.n	800116c <RCC_GetClocksFreq+0x5c>
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d837      	bhi.n	80011be <RCC_GetClocksFreq+0xae>
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <RCC_GetClocksFreq+0x4c>
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d004      	beq.n	8001164 <RCC_GetClocksFreq+0x54>
 800115a:	e030      	b.n	80011be <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a83      	ldr	r2, [pc, #524]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 8001160:	601a      	str	r2, [r3, #0]
      break;
 8001162:	e030      	b.n	80011c6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a81      	ldr	r2, [pc, #516]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 8001168:	601a      	str	r2, [r3, #0]
      break;
 800116a:	e02c      	b.n	80011c6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800116c:	4b7e      	ldr	r3, [pc, #504]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001174:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001176:	4b7c      	ldr	r3, [pc, #496]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	3302      	adds	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4a77      	ldr	r2, [pc, #476]	@ (8001370 <RCC_GetClocksFreq+0x260>)
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
 8001198:	e00d      	b.n	80011b6 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80011a6:	4a71      	ldr	r2, [pc, #452]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ba:	601a      	str	r2, [r3, #0]
      break;
 80011bc:	e003      	b.n	80011c6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a6a      	ldr	r2, [pc, #424]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80011c2:	601a      	str	r2, [r3, #0]
      break;
 80011c4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80011c6:	4b68      	ldr	r3, [pc, #416]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ce:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80011d6:	4a67      	ldr	r2, [pc, #412]	@ (8001374 <RCC_GetClocksFreq+0x264>)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	40da      	lsrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80011ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80011f6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80011fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <RCC_GetClocksFreq+0x264>)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	40da      	lsrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001216:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800121e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	0adb      	lsrs	r3, r3, #11
 8001224:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001226:	4a53      	ldr	r2, [pc, #332]	@ (8001374 <RCC_GetClocksFreq+0x264>)
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	40da      	lsrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800123e:	4b4a      	ldr	r3, [pc, #296]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001242:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001246:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800124e:	4a4a      	ldr	r2, [pc, #296]	@ (8001378 <RCC_GetClocksFreq+0x268>)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001256:	b29b      	uxth	r3, r3
 8001258:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	fbb2 f2f3 	udiv	r2, r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	e003      	b.n	800127a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800127c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127e:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8001282:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	0a5b      	lsrs	r3, r3, #9
 8001288:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800128a:	4a3b      	ldr	r2, [pc, #236]	@ (8001378 <RCC_GetClocksFreq+0x268>)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001292:	b29b      	uxth	r3, r3
 8001294:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80012a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	e003      	b.n	80012b6 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80012b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a29      	ldr	r2, [pc, #164]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	e003      	b.n	80012d2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80012d2:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d003      	beq.n	80012e6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80012e2:	61da      	str	r2, [r3, #28]
 80012e4:	e003      	b.n	80012ee <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012fa:	d10d      	bne.n	8001318 <RCC_GetClocksFreq+0x208>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001302:	429a      	cmp	r2, r3
 8001304:	d108      	bne.n	8001318 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	d104      	bne.n	8001318 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	005a      	lsls	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e003      	b.n	8001320 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800132c:	d10d      	bne.n	800134a <RCC_GetClocksFreq+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001334:	429a      	cmp	r2, r3
 8001336:	d108      	bne.n	800134a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	d104      	bne.n	800134a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	005a      	lsls	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24
 8001348:	e003      	b.n	8001352 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28
 8001366:	e028      	b.n	80013ba <RCC_GetClocksFreq+0x2aa>
 8001368:	40021000 	.word	0x40021000
 800136c:	007a1200 	.word	0x007a1200
 8001370:	003d0900 	.word	0x003d0900
 8001374:	08005354 	.word	0x08005354
 8001378:	08005364 	.word	0x08005364
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800137c:	4b6c      	ldr	r3, [pc, #432]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d104      	bne.n	8001392 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001390:	e013      	b.n	80013ba <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001392:	4b67      	ldr	r3, [pc, #412]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d104      	bne.n	80013a8 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013a6:	e008      	b.n	80013ba <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80013a8:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d102      	bne.n	80013ba <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d104      	bne.n	80013d0 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ce:	e021      	b.n	8001414 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80013d0:	4b57      	ldr	r3, [pc, #348]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013dc:	d104      	bne.n	80013e8 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013e6:	e015      	b.n	8001414 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80013e8:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013f4:	d104      	bne.n	8001400 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fe:	e009      	b.n	8001414 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001400:	4b4b      	ldr	r3, [pc, #300]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001408:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800140c:	d102      	bne.n	8001414 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001414:	4b46      	ldr	r3, [pc, #280]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d104      	bne.n	800142a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
 8001428:	e021      	b.n	800146e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001432:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001436:	d104      	bne.n	8001442 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001440:	e015      	b.n	800146e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800144a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800144e:	d104      	bne.n	800145a <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
 8001458:	e009      	b.n	800146e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800145a:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001466:	d102      	bne.n	800146e <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800146e:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
 8001482:	e021      	b.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001484:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800148c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001490:	d104      	bne.n	800149c <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
 800149a:	e015      	b.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800149c:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80014a8:	d104      	bne.n	80014b4 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b2:	e009      	b.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80014b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80014c0:	d102      	bne.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d104      	bne.n	80014de <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80014dc:	e021      	b.n	8001522 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ea:	d104      	bne.n	80014f6 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014f4:	e015      	b.n	8001522 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001502:	d104      	bne.n	800150e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800150a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800150c:	e009      	b.n	8001522 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001516:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800151a:	d102      	bne.n	8001522 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001522:	bf00      	nop
 8001524:	372c      	adds	r7, #44	@ 0x2c
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	007a1200 	.word	0x007a1200

08001538 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	4909      	ldr	r1, [pc, #36]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4313      	orrs	r3, r2
 8001554:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001556:	e006      	b.n	8001566 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	43db      	mvns	r3, r3
 8001560:	4904      	ldr	r1, [pc, #16]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 8001562:	4013      	ands	r3, r2
 8001564:	614b      	str	r3, [r1, #20]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	4909      	ldr	r1, [pc, #36]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001596:	e006      	b.n	80015a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4904      	ldr	r1, [pc, #16]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	618b      	str	r3, [r1, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3302      	adds	r3, #2
 80015e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4812      	ldr	r0, [pc, #72]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 80015f0:	79b9      	ldrb	r1, [r7, #6]
 80015f2:	0889      	lsrs	r1, r1, #2
 80015f4:	b2c9      	uxtb	r1, r1
 80015f6:	401a      	ands	r2, r3
 80015f8:	1c8b      	adds	r3, r1, #2
 80015fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80015fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3302      	adds	r3, #2
 8001608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800160c:	79f9      	ldrb	r1, [r7, #7]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 800161c:	79b9      	ldrb	r1, [r7, #6]
 800161e:	0889      	lsrs	r1, r1, #2
 8001620:	b2c9      	uxtb	r1, r1
 8001622:	431a      	orrs	r2, r3
 8001624:	1c8b      	adds	r3, r1, #2
 8001626:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40010000 	.word	0x40010000

0800163c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	43db      	mvns	r3, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d103      	bne.n	80016ce <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	e005      	b.n	80016da <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d102      	bne.n	80016da <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3308      	adds	r3, #8
 80016d8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80016ec:	e006      	b.n	80016fc <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43da      	mvns	r2, r3
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	400a      	ands	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	3724      	adds	r7, #36	@ 0x24
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e001      	b.n	800172c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800173a:	b480      	push	{r7}
 800173c:	b087      	sub	sp, #28
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29b      	uxth	r3, r3
 800175c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001764:	2201      	movs	r2, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4013      	ands	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e00d      	b.n	800179c <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d105      	bne.n	8001792 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e004      	b.n	800179c <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	0c1b      	lsrs	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80017a2:	2201      	movs	r2, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <USART_GetITStatus+0x8e>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	74fb      	strb	r3, [r7, #19]
 80017c6:	e001      	b.n	80017cc <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2201      	movs	r2, #1
 80017ee:	fa02 f103 	lsl.w	r1, r2, r3
 80017f2:	4a06      	ldr	r2, [pc, #24]	@ (800180c <NVIC_EnableIRQ+0x30>)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	@ (8001840 <uart_put_char+0x30>)
 8001822:	f7ff ff1d 	bl	8001660 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001826:	bf00      	nop
 8001828:	2180      	movs	r1, #128	@ 0x80
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <uart_put_char+0x30>)
 800182c:	f7ff ff6c 	bl	8001708 <USART_GetFlagStatus>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f8      	beq.n	8001828 <uart_put_char+0x18>
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004400 	.word	0x40004400

08001844 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e012      	b.n	800187e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b0a      	cmp	r3, #10
 8001862:	d102      	bne.n	800186a <_write_r+0x26>
            uart_put_char('\r');
 8001864:	200d      	movs	r0, #13
 8001866:	f7ff ffd3 	bl	8001810 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffcc 	bl	8001810 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbe8      	blt.n	8001858 <_write_r+0x14>
    }

    return len;
 8001886:	683b      	ldr	r3, [r7, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001894:	4915      	ldr	r1, [pc, #84]	@ (80018ec <USART2_IRQHandler+0x5c>)
 8001896:	4816      	ldr	r0, [pc, #88]	@ (80018f0 <USART2_IRQHandler+0x60>)
 8001898:	f7ff ff4f 	bl	800173a <USART_GetITStatus>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d021      	beq.n	80018e6 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <USART2_IRQHandler+0x60>)
 80018a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018a6:	b299      	uxth	r1, r3
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <USART2_IRQHandler+0x64>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	b2d0      	uxtb	r0, r2
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <USART2_IRQHandler+0x64>)
 80018b4:	7010      	strb	r0, [r2, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	b2c9      	uxtb	r1, r1
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <USART2_IRQHandler+0x68>)
 80018bc:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <USART2_IRQHandler+0x6c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2bff      	cmp	r3, #255	@ 0xff
 80018c6:	d107      	bne.n	80018d8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <USART2_IRQHandler+0x70>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <USART2_IRQHandler+0x70>)
 80018d4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80018d6:	e006      	b.n	80018e6 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <USART2_IRQHandler+0x6c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <USART2_IRQHandler+0x6c>)
 80018e4:	701a      	strb	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	00050105 	.word	0x00050105
 80018f0:	40004400 	.word	0x40004400
 80018f4:	200002e4 	.word	0x200002e4
 80018f8:	200001e4 	.word	0x200001e4
 80018fc:	200002e6 	.word	0x200002e6
 8001900:	200002e5 	.word	0x200002e5

08001904 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	@ 0x50
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800190c:	4b86      	ldr	r3, [pc, #536]	@ (8001b28 <uart_init+0x224>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fb01 	bl	8002f1c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800191a:	4b83      	ldr	r3, [pc, #524]	@ (8001b28 <uart_init+0x224>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fafa 	bl	8002f1c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001928:	4b80      	ldr	r3, [pc, #512]	@ (8001b2c <uart_init+0x228>)
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b2c <uart_init+0x228>)
 800192e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001932:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001934:	4b7d      	ldr	r3, [pc, #500]	@ (8001b2c <uart_init+0x228>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	4a7c      	ldr	r2, [pc, #496]	@ (8001b2c <uart_init+0x228>)
 800193a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001940:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800194a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800194e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001950:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800195a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800195e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001960:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800196a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800196e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001970:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800197a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800197e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001980:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800198a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800198e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001990:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800199a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800199e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80019a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a4:	889b      	ldrh	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019ac:	f023 030c 	bic.w	r3, r3, #12
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80019b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019bc:	8892      	ldrh	r2, [r2, #4]
 80019be:	b292      	uxth	r2, r2
 80019c0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80019c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019d0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80019d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019dc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80019e0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80019e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019f0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80019f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019fc:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001a00:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001a02:	4b4b      	ldr	r3, [pc, #300]	@ (8001b30 <uart_init+0x22c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4a      	ldr	r2, [pc, #296]	@ (8001b30 <uart_init+0x22c>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001a0e:	4b48      	ldr	r3, [pc, #288]	@ (8001b30 <uart_init+0x22c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a47      	ldr	r2, [pc, #284]	@ (8001b30 <uart_init+0x22c>)
 8001a14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a18:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001a1a:	4b45      	ldr	r3, [pc, #276]	@ (8001b30 <uart_init+0x22c>)
 8001a1c:	4a44      	ldr	r2, [pc, #272]	@ (8001b30 <uart_init+0x22c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001a22:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <uart_init+0x22c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a42      	ldr	r2, [pc, #264]	@ (8001b30 <uart_init+0x22c>)
 8001a28:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a2c:	f023 030c 	bic.w	r3, r3, #12
 8001a30:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001a32:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <uart_init+0x22c>)
 8001a34:	4a3e      	ldr	r2, [pc, #248]	@ (8001b30 <uart_init+0x22c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <uart_init+0x22c>)
 8001a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b30 <uart_init+0x22c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001a42:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <uart_init+0x22c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <uart_init+0x22c>)
 8001a48:	f043 030c 	orr.w	r3, r3, #12
 8001a4c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001a4e:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <uart_init+0x22c>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a37      	ldr	r2, [pc, #220]	@ (8001b30 <uart_init+0x22c>)
 8001a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a58:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001a5a:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <uart_init+0x22c>)
 8001a5c:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <uart_init+0x22c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a66:	2300      	movs	r3, #0
 8001a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb4c 	bl	8001110 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b30 <uart_init+0x22c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a8a:	005a      	lsls	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001aa8:	e00d      	b.n	8001ac6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	fbb3 f2f2 	udiv	r2, r3, r2
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d302      	bcc.n	8001ad6 <uart_init+0x1d2>
        divider++;
 8001ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <uart_init+0x22c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aee:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001af2:	4013      	ands	r3, r2
 8001af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001af6:	4313      	orrs	r3, r2
 8001af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <uart_init+0x22c>)
 8001afc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001afe:	b292      	uxth	r2, r2
 8001b00:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <uart_init+0x22c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <uart_init+0x22c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <uart_init+0x230>)
 8001b12:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <uart_init+0x22c>)
 8001b14:	f7ff fdb6 	bl	8001684 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001b18:	2026      	movs	r0, #38	@ 0x26
 8001b1a:	f7ff fe5f 	bl	80017dc <NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	@ 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000000c 	.word	0x2000000c
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40004400 	.word	0x40004400
 8001b34:	00050105 	.word	0x00050105

08001b38 <iniEXTIA4>:
#include "interrupt.h"

//Mostly template for now
//Keep in mind to switch the GPIOx port and EXTI_PinSourcex and the EXTI_Linex

void iniEXTIA4(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8001b3e:	2101      	movs	r1, #1
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fd19 	bl	8001578 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 8001b46:	2104      	movs	r1, #4
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fd35 	bl	80015b8 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 8001b4e:	2304      	movs	r3, #4
 8001b50:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b56:	2300      	movs	r3, #0
 8001b58:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f820 	bl	8000ba8 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001b68:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 8001b6c:	f7ff fa58 	bl	8001020 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 8001b70:	230a      	movs	r3, #10
 8001b72:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fa60 	bl	8001048 <NVIC_Init>

}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <EXTI4_IRQHandler>:

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001b94:	2004      	movs	r0, #4
 8001b96:	f7ff f90d 	bl	8000db4 <EXTI_GetITStatus>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
        setLED('r');
 8001ba0:	2072      	movs	r0, #114	@ 0x72
 8001ba2:	f000 f951 	bl	8001e48 <setLED>
        EXTI_ClearITPendingBit(EXTI_Line4);
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f7ff f93c 	bl	8000e24 <EXTI_ClearITPendingBit>
    }

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001bbc:	f7ff fcbc 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001bc6:	f7ff fcb7 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001bd0:	f7ff fcb2 	bl	8001538 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f9d4 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001be0:	2302      	movs	r3, #2
 8001be2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001be4:	2310      	movs	r3, #16
 8001be6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf0:	f7ff f932 	bl	8000e58 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f9c4 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001c00:	2302      	movs	r3, #2
 8001c02:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8001c04:	2321      	movs	r3, #33	@ 0x21
 8001c06:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <initJoystick+0x88>)
 8001c0e:	f7ff f923 	bl	8000e58 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001c12:	463b      	mov	r3, r7
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f9b5 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001c22:	2303      	movs	r3, #3
 8001c24:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001c26:	463b      	mov	r3, r7
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <initJoystick+0x8c>)
 8001c2c:	f7ff f914 	bl	8000e58 <GPIO_Init>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	48000800 	.word	0x48000800

08001c40 <readJoystick>:


int8_t readJoystick(){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c50:	f7ff f9b2 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c54:	4603      	mov	r3, r0
 8001c56:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8001c58:	2120      	movs	r1, #32
 8001c5a:	4821      	ldr	r0, [pc, #132]	@ (8001ce0 <readJoystick+0xa0>)
 8001c5c:	f7ff f9ac 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c60:	4603      	mov	r3, r0
 8001c62:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8001c64:	2101      	movs	r1, #1
 8001c66:	481e      	ldr	r0, [pc, #120]	@ (8001ce0 <readJoystick+0xa0>)
 8001c68:	f7ff f9a6 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 8001c70:	2102      	movs	r1, #2
 8001c72:	481c      	ldr	r0, [pc, #112]	@ (8001ce4 <readJoystick+0xa4>)
 8001c74:	f7ff f9a0 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4819      	ldr	r0, [pc, #100]	@ (8001ce4 <readJoystick+0xa4>)
 8001c80:	f7ff f99a 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c84:	4603      	mov	r3, r0
 8001c86:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 8001c88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d102      	bne.n	8001c96 <readJoystick+0x56>
		bit = Up;
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	e01e      	b.n	8001cd4 <readJoystick+0x94>
	} else if (Down == 1){
 8001c96:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d103      	bne.n	8001ca6 <readJoystick+0x66>
		bit = Down << 1;
 8001c9e:	793b      	ldrb	r3, [r7, #4]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	e016      	b.n	8001cd4 <readJoystick+0x94>
	} else if (Left == 1){
 8001ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d103      	bne.n	8001cb6 <readJoystick+0x76>
		bit = Left << 2;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	e00e      	b.n	8001cd4 <readJoystick+0x94>
	} else if (Right == 1){
 8001cb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d103      	bne.n	8001cc6 <readJoystick+0x86>
		bit = Right << 3;
 8001cbe:	78bb      	ldrb	r3, [r7, #2]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	e006      	b.n	8001cd4 <readJoystick+0x94>
	} else if (Center == 1){
 8001cc6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <readJoystick+0x94>
		bit = Center << 4;
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800

08001ce8 <handleJoystick>:

void handleJoystick(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

	static int8_t currentState = 0;  // remember last state

	int8_t nextState = readJoystick();
 8001cee:	f7ff ffa7 	bl	8001c40 <readJoystick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]

    if (nextState!= currentState) {
 8001cf6:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <handleJoystick+0xa4>)
 8001cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d03b      	beq.n	8001d7c <handleJoystick+0x94>
		switch(nextState){
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	d836      	bhi.n	8001d7c <handleJoystick+0x94>
 8001d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d14 <handleJoystick+0x2c>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d55 	.word	0x08001d55
 8001d18:	08001d5d 	.word	0x08001d5d
 8001d1c:	08001d7d 	.word	0x08001d7d
 8001d20:	08001d65 	.word	0x08001d65
 8001d24:	08001d7d 	.word	0x08001d7d
 8001d28:	08001d7d 	.word	0x08001d7d
 8001d2c:	08001d7d 	.word	0x08001d7d
 8001d30:	08001d6d 	.word	0x08001d6d
 8001d34:	08001d7d 	.word	0x08001d7d
 8001d38:	08001d7d 	.word	0x08001d7d
 8001d3c:	08001d7d 	.word	0x08001d7d
 8001d40:	08001d7d 	.word	0x08001d7d
 8001d44:	08001d7d 	.word	0x08001d7d
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001d7d 	.word	0x08001d7d
 8001d50:	08001d75 	.word	0x08001d75
		case 0x1:
			printf("Up\n");
 8001d54:	480e      	ldr	r0, [pc, #56]	@ (8001d90 <handleJoystick+0xa8>)
 8001d56:	f001 f8d9 	bl	8002f0c <puts>
			break;
 8001d5a:	e00f      	b.n	8001d7c <handleJoystick+0x94>

		case 0x2:
			printf("Down\n");
 8001d5c:	480d      	ldr	r0, [pc, #52]	@ (8001d94 <handleJoystick+0xac>)
 8001d5e:	f001 f8d5 	bl	8002f0c <puts>
			break;
 8001d62:	e00b      	b.n	8001d7c <handleJoystick+0x94>

		case 0x4:
			printf("Left\n");
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <handleJoystick+0xb0>)
 8001d66:	f001 f8d1 	bl	8002f0c <puts>
			break;
 8001d6a:	e007      	b.n	8001d7c <handleJoystick+0x94>

		case 0x8:
			printf("Right\n");
 8001d6c:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <handleJoystick+0xb4>)
 8001d6e:	f001 f8cd 	bl	8002f0c <puts>
			break;
 8001d72:	e003      	b.n	8001d7c <handleJoystick+0x94>

		case 0x10:
			printf("Center\n");
 8001d74:	480a      	ldr	r0, [pc, #40]	@ (8001da0 <handleJoystick+0xb8>)
 8001d76:	f001 f8c9 	bl	8002f0c <puts>
			break;
 8001d7a:	bf00      	nop
		}
	}
	currentState = nextState;
 8001d7c:	4a03      	ldr	r2, [pc, #12]	@ (8001d8c <handleJoystick+0xa4>)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	7013      	strb	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002e7 	.word	0x200002e7
 8001d90:	08005310 	.word	0x08005310
 8001d94:	08005314 	.word	0x08005314
 8001d98:	0800531c 	.word	0x0800531c
 8001d9c:	08005324 	.word	0x08005324
 8001da0:	0800532c 	.word	0x0800532c

08001da4 <initLED>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLED() {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 8001daa:	2101      	movs	r1, #1
 8001dac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001db0:	f7ff fbc2 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8001db4:	2101      	movs	r1, #1
 8001db6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001dba:	f7ff fbbd 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001dc4:	f7ff fbb8 	bl	8001538 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f8da 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8001dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ddc:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 8001dde:	2302      	movs	r3, #2
 8001de0:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dea:	f7ff f835 	bl	8000e58 <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8001dee:	463b      	mov	r3, r7
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f8c7 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001df6:	2301      	movs	r3, #1
 8001df8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001dfe:	2310      	movs	r3, #16
 8001e00:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001e02:	2302      	movs	r3, #2
 8001e04:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	@ (8001e40 <initLED+0x9c>)
 8001e0c:	f7ff f824 	bl	8000e58 <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8001e10:	463b      	mov	r3, r7
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f8b6 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001e24:	2302      	movs	r3, #2
 8001e26:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <initLED+0xa0>)
 8001e2e:	f7ff f813 	bl	8000e58 <GPIO_Init>

	// Initialize LED to off
	setLED('d');
 8001e32:	2064      	movs	r0, #100	@ 0x64
 8001e34:	f000 f808 	bl	8001e48 <setLED>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800

08001e48 <setLED>:

void setLED(char sel) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b72      	cmp	r3, #114	@ 0x72
 8001e56:	d111      	bne.n	8001e7c <setLED+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4852      	ldr	r0, [pc, #328]	@ (8001fa8 <setLED+0x160>)
 8001e5e:	f7ff f8c7 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001e62:	2201      	movs	r2, #1
 8001e64:	2180      	movs	r1, #128	@ 0x80
 8001e66:	4851      	ldr	r0, [pc, #324]	@ (8001fac <setLED+0x164>)
 8001e68:	f7ff f8c2 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e76:	f7ff f8bb 	bl	8000ff0 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 8001e7a:	e091      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'g') {
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	2b67      	cmp	r3, #103	@ 0x67
 8001e80:	d111      	bne.n	8001ea6 <setLED+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001e82:	2201      	movs	r2, #1
 8001e84:	2110      	movs	r1, #16
 8001e86:	4848      	ldr	r0, [pc, #288]	@ (8001fa8 <setLED+0x160>)
 8001e88:	f7ff f8b2 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2180      	movs	r1, #128	@ 0x80
 8001e90:	4846      	ldr	r0, [pc, #280]	@ (8001fac <setLED+0x164>)
 8001e92:	f7ff f8ad 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea0:	f7ff f8a6 	bl	8000ff0 <GPIO_WriteBit>
}
 8001ea4:	e07c      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'b') {
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b62      	cmp	r3, #98	@ 0x62
 8001eaa:	d111      	bne.n	8001ed0 <setLED+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001eac:	2201      	movs	r2, #1
 8001eae:	2110      	movs	r1, #16
 8001eb0:	483d      	ldr	r0, [pc, #244]	@ (8001fa8 <setLED+0x160>)
 8001eb2:	f7ff f89d 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	483c      	ldr	r0, [pc, #240]	@ (8001fac <setLED+0x164>)
 8001ebc:	f7ff f898 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eca:	f7ff f891 	bl	8000ff0 <GPIO_WriteBit>
}
 8001ece:	e067      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'c') {
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b63      	cmp	r3, #99	@ 0x63
 8001ed4:	d111      	bne.n	8001efa <setLED+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2110      	movs	r1, #16
 8001eda:	4833      	ldr	r0, [pc, #204]	@ (8001fa8 <setLED+0x160>)
 8001edc:	f7ff f888 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	4831      	ldr	r0, [pc, #196]	@ (8001fac <setLED+0x164>)
 8001ee6:	f7ff f883 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f7ff f87c 	bl	8000ff0 <GPIO_WriteBit>
}
 8001ef8:	e052      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'm') {
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b6d      	cmp	r3, #109	@ 0x6d
 8001efe:	d111      	bne.n	8001f24 <setLED+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001f00:	2200      	movs	r2, #0
 8001f02:	2110      	movs	r1, #16
 8001f04:	4828      	ldr	r0, [pc, #160]	@ (8001fa8 <setLED+0x160>)
 8001f06:	f7ff f873 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	4827      	ldr	r0, [pc, #156]	@ (8001fac <setLED+0x164>)
 8001f10:	f7ff f86e 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f1e:	f7ff f867 	bl	8000ff0 <GPIO_WriteBit>
}
 8001f22:	e03d      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'y') {
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2b79      	cmp	r3, #121	@ 0x79
 8001f28:	d111      	bne.n	8001f4e <setLED+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	481e      	ldr	r0, [pc, #120]	@ (8001fa8 <setLED+0x160>)
 8001f30:	f7ff f85e 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001f34:	2200      	movs	r2, #0
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	481c      	ldr	r0, [pc, #112]	@ (8001fac <setLED+0x164>)
 8001f3a:	f7ff f859 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f48:	f7ff f852 	bl	8000ff0 <GPIO_WriteBit>
}
 8001f4c:	e028      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'w') {
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b77      	cmp	r3, #119	@ 0x77
 8001f52:	d111      	bne.n	8001f78 <setLED+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001f54:	2200      	movs	r2, #0
 8001f56:	2110      	movs	r1, #16
 8001f58:	4813      	ldr	r0, [pc, #76]	@ (8001fa8 <setLED+0x160>)
 8001f5a:	f7ff f849 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	4812      	ldr	r0, [pc, #72]	@ (8001fac <setLED+0x164>)
 8001f64:	f7ff f844 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f72:	f7ff f83d 	bl	8000ff0 <GPIO_WriteBit>
}
 8001f76:	e013      	b.n	8001fa0 <setLED+0x158>
	} else if (sel == 'd') {
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d110      	bne.n	8001fa0 <setLED+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2110      	movs	r1, #16
 8001f82:	4809      	ldr	r0, [pc, #36]	@ (8001fa8 <setLED+0x160>)
 8001f84:	f7ff f834 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	4807      	ldr	r0, [pc, #28]	@ (8001fac <setLED+0x164>)
 8001f8e:	f7ff f82f 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9c:	f7ff f828 	bl	8000ff0 <GPIO_WriteBit>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	48000800 	.word	0x48000800

08001fb0 <main>:
#include "led.h"
#include "interrupt.h"
#include "timer.h"
//#include "window.h"

int main(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8001fb6:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8001fba:	f7ff fca3 	bl	8001904 <uart_init>

	initJoystick();
 8001fbe:	f7ff fdf7 	bl	8001bb0 <initJoystick>
	initLED();
 8001fc2:	f7ff feef 	bl	8001da4 <initLED>
	iniEXTIA4();
 8001fc6:	f7ff fdb7 	bl	8001b38 <iniEXTIA4>
	initTimer();
 8001fca:	f000 f973 	bl	80022b4 <initTimer>


	int val = 10;
 8001fce:	230a      	movs	r3, #10
 8001fd0:	617b      	str	r3, [r7, #20]
	printf("Value = %02ld\n", val);
 8001fd2:	6979      	ldr	r1, [r7, #20]
 8001fd4:	480d      	ldr	r0, [pc, #52]	@ (800200c <main+0x5c>)
 8001fd6:	f000 ff31 	bl	8002e3c <iprintf>

	uint8_t a = 10;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	74fb      	strb	r3, [r7, #19]
	char str[7];
	sprintf(str, "a = %2d", a);
 8001fde:	7cfa      	ldrb	r2, [r7, #19]
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	490b      	ldr	r1, [pc, #44]	@ (8002010 <main+0x60>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 f855 	bl	8003094 <siprintf>

	printf("%s\n",str);
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 ff8d 	bl	8002f0c <puts>

	float floatVal = 1.234;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <main+0x64>)
 8001ff4:	60fb      	str	r3, [r7, #12]
	printf("%6f\n", floatVal);
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7fe faa6 	bl	8000548 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <main+0x68>)
 8002002:	f000 ff1b 	bl	8002e3c <iprintf>

	//	int8_t prev_state = readJoystick();
	//	int8_t current_state;

	while(1) {
		handleJoystick();
 8002006:	f7ff fe6f 	bl	8001ce8 <handleJoystick>
 800200a:	e7fc      	b.n	8002006 <main+0x56>
 800200c:	08005334 	.word	0x08005334
 8002010:	08005344 	.word	0x08005344
 8002014:	3f9df3b6 	.word	0x3f9df3b6
 8002018:	0800534c 	.word	0x0800534c

0800201c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	return 1;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_kill>:

int _kill(int pid, int sig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002036:	f001 f967 	bl	8003308 <__errno>
 800203a:	4603      	mov	r3, r0
 800203c:	2216      	movs	r2, #22
 800203e:	601a      	str	r2, [r3, #0]
	return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_exit>:

void _exit (int status)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ffe7 	bl	800202c <_kill>
	while (1) {}		/* Make sure we hang here */
 800205e:	bf00      	nop
 8002060:	e7fd      	b.n	800205e <_exit+0x12>

08002062 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e00a      	b.n	800208a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002074:	f3af 8000 	nop.w
 8002078:	4601      	mov	r1, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	60ba      	str	r2, [r7, #8]
 8002080:	b2ca      	uxtb	r2, r1
 8002082:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	dbf0      	blt.n	8002074 <_read+0x12>
	}

return len;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_close>:
	}
	return len;
}

int _close(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c4:	605a      	str	r2, [r3, #4]
	return 0;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_isatty>:

int _isatty(int file)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	return 1;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
	return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <SystemInit+0x84>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	4a1e      	ldr	r2, [pc, #120]	@ (8002188 <SystemInit+0x84>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <SystemInit+0x88>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <SystemInit+0x88>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <SystemInit+0x88>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4918      	ldr	r1, [pc, #96]	@ (800218c <SystemInit+0x88>)
 800212a:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <SystemInit+0x8c>)
 800212c:	4013      	ands	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002130:	4b16      	ldr	r3, [pc, #88]	@ (800218c <SystemInit+0x88>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a15      	ldr	r2, [pc, #84]	@ (800218c <SystemInit+0x88>)
 8002136:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800213a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <SystemInit+0x88>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a11      	ldr	r2, [pc, #68]	@ (800218c <SystemInit+0x88>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <SystemInit+0x88>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <SystemInit+0x88>)
 8002152:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8002156:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <SystemInit+0x88>)
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <SystemInit+0x88>)
 800215e:	f023 030f 	bic.w	r3, r3, #15
 8002162:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <SystemInit+0x88>)
 8002166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002168:	4908      	ldr	r1, [pc, #32]	@ (800218c <SystemInit+0x88>)
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <SystemInit+0x90>)
 800216c:	4013      	ands	r3, r2
 800216e:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SystemInit+0x88>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002176:	f000 f80f 	bl	8002198 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800217a:	4b03      	ldr	r3, [pc, #12]	@ (8002188 <SystemInit+0x84>)
 800217c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002180:	609a      	str	r2, [r3, #8]
#endif  
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00
 800218c:	40021000 	.word	0x40021000
 8002190:	f87fc00c 	.word	0xf87fc00c
 8002194:	ff00fccc 	.word	0xff00fccc

08002198 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800219c:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <SetSysClock+0x8c>)
 800219e:	2212      	movs	r2, #18
 80021a0:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80021a2:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <SetSysClock+0x90>)
 80021a4:	4a20      	ldr	r2, [pc, #128]	@ (8002228 <SetSysClock+0x90>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <SetSysClock+0x90>)
 80021ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <SetSysClock+0x90>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <SetSysClock+0x90>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <SetSysClock+0x90>)
 80021b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021bc:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <SetSysClock+0x90>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <SetSysClock+0x90>)
 80021c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80021c8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80021ca:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <SetSysClock+0x90>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a16      	ldr	r2, [pc, #88]	@ (8002228 <SetSysClock+0x90>)
 80021d0:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 80021d4:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80021d6:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <SetSysClock+0x90>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a13      	ldr	r2, [pc, #76]	@ (8002228 <SetSysClock+0x90>)
 80021dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80021e2:	bf00      	nop
 80021e4:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <SetSysClock+0x90>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f9      	beq.n	80021e4 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80021f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <SetSysClock+0x90>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002228 <SetSysClock+0x90>)
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <SetSysClock+0x90>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <SetSysClock+0x90>)
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002208:	bf00      	nop
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <SetSysClock+0x90>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b08      	cmp	r3, #8
 8002214:	d1f9      	bne.n	800220a <SetSysClock+0x72>
  {
  }
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40022000 	.word	0x40022000
 8002228:	40021000 	.word	0x40021000

0800222c <NVIC_EnableIRQ>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2201      	movs	r2, #1
 800223e:	fa02 f103 	lsl.w	r1, r2, r3
 8002242:	4a06      	ldr	r2, [pc, #24]	@ (800225c <NVIC_EnableIRQ+0x30>)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0b      	bge.n	800228c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <NVIC_SetPriority+0x4c>)
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	3b04      	subs	r3, #4
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800228a:	e009      	b.n	80022a0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <NVIC_SetPriority+0x50>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <initTimer>:
#include "timer.h"

timestruct_t timeData;

void initTimer() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM2, ENABLE);
	*/
	// -------------------------------------------------

	// Set reload and prescale value for 1/100 s (100 Hz) interrupt
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;		// enable clock line to timer 2
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <initTimer+0x5c>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <initTimer+0x5c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0001;		// configure timer 2
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022ca:	2201      	movs	r2, #1
 80022cc:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 0x03FF;		// set reload value
 80022ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022d2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80022d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 0x0270;		// set prescale value
 80022d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022dc:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80022e0:	851a      	strh	r2, [r3, #40]	@ 0x28

	TIM2->DIER |= 0x0001;	// enable timer 2 interrupts
 80022e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	60d3      	str	r3, [r2, #12]

	uint8_t priority = 2;
 80022f2:	2302      	movs	r3, #2
 80022f4:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	4619      	mov	r1, r3
 80022fa:	201c      	movs	r0, #28
 80022fc:	f7ff ffb0 	bl	8002260 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 8002300:	201c      	movs	r0, #28
 8002302:	f7ff ff93 	bl	800222c <NVIC_EnableIRQ>


}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8002318:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 800231a:	78db      	ldrb	r3, [r3, #3]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002324:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b64      	cmp	r3, #100	@ 0x64
 800232e:	d10a      	bne.n	8002346 <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8002330:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002332:	2200      	movs	r2, #0
 8002334:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 8002336:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002338:	789b      	ldrb	r3, [r3, #2]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002342:	709a      	strb	r2, [r3, #2]
 8002344:	e030      	b.n	80023a8 <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002348:	789b      	ldrb	r3, [r3, #2]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b3c      	cmp	r3, #60	@ 0x3c
 800234e:	d10a      	bne.n	8002366 <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002352:	2200      	movs	r2, #0
 8002354:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002362:	705a      	strb	r2, [r3, #1]
 8002364:	e020      	b.n	80023a8 <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b3c      	cmp	r3, #60	@ 0x3c
 800236e:	d10a      	bne.n	8002386 <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e010      	b.n	80023a8 <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b18      	cmp	r3, #24
 800238e:	d10b      	bne.n	80023a8 <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 8002396:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 80023a2:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <TIM2_IRQHandler+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80023a8:	2101      	movs	r1, #1
 80023aa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80023ae:	f7ff f945 	bl	800163c <TIM_ClearITPendingBit>
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200002e8 	.word	0x200002e8

080023bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023bc:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023c2:	490e      	ldr	r1, [pc, #56]	@ (80023fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002400 <LoopForever+0xe>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002408 <LoopForever+0x16>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023e6:	f7ff fe8d 	bl	8002104 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80023ea:	f000 ff93 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ee:	f7ff fddf 	bl	8001fb0 <main>

080023f2 <LoopForever>:

LoopForever:
    b LoopForever
 80023f2:	e7fe      	b.n	80023f2 <LoopForever>
  ldr   r0, =_estack
 80023f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002400:	08005704 	.word	0x08005704
  ldr r2, =_sbss
 8002404:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002408:	2000043c 	.word	0x2000043c

0800240c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC1_2_IRQHandler>

0800240e <__cvt>:
 800240e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002412:	ec57 6b10 	vmov	r6, r7, d0
 8002416:	2f00      	cmp	r7, #0
 8002418:	460c      	mov	r4, r1
 800241a:	4619      	mov	r1, r3
 800241c:	463b      	mov	r3, r7
 800241e:	bfbb      	ittet	lt
 8002420:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002424:	461f      	movlt	r7, r3
 8002426:	2300      	movge	r3, #0
 8002428:	232d      	movlt	r3, #45	@ 0x2d
 800242a:	700b      	strb	r3, [r1, #0]
 800242c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800242e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002432:	4691      	mov	r9, r2
 8002434:	f023 0820 	bic.w	r8, r3, #32
 8002438:	bfbc      	itt	lt
 800243a:	4632      	movlt	r2, r6
 800243c:	4616      	movlt	r6, r2
 800243e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002442:	d005      	beq.n	8002450 <__cvt+0x42>
 8002444:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002448:	d100      	bne.n	800244c <__cvt+0x3e>
 800244a:	3401      	adds	r4, #1
 800244c:	2102      	movs	r1, #2
 800244e:	e000      	b.n	8002452 <__cvt+0x44>
 8002450:	2103      	movs	r1, #3
 8002452:	ab03      	add	r3, sp, #12
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	ab02      	add	r3, sp, #8
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	ec47 6b10 	vmov	d0, r6, r7
 800245e:	4653      	mov	r3, sl
 8002460:	4622      	mov	r2, r4
 8002462:	f001 f809 	bl	8003478 <_dtoa_r>
 8002466:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800246a:	4605      	mov	r5, r0
 800246c:	d119      	bne.n	80024a2 <__cvt+0x94>
 800246e:	f019 0f01 	tst.w	r9, #1
 8002472:	d00e      	beq.n	8002492 <__cvt+0x84>
 8002474:	eb00 0904 	add.w	r9, r0, r4
 8002478:	2200      	movs	r2, #0
 800247a:	2300      	movs	r3, #0
 800247c:	4630      	mov	r0, r6
 800247e:	4639      	mov	r1, r7
 8002480:	f7fe fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8002484:	b108      	cbz	r0, 800248a <__cvt+0x7c>
 8002486:	f8cd 900c 	str.w	r9, [sp, #12]
 800248a:	2230      	movs	r2, #48	@ 0x30
 800248c:	9b03      	ldr	r3, [sp, #12]
 800248e:	454b      	cmp	r3, r9
 8002490:	d31e      	bcc.n	80024d0 <__cvt+0xc2>
 8002492:	9b03      	ldr	r3, [sp, #12]
 8002494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002496:	1b5b      	subs	r3, r3, r5
 8002498:	4628      	mov	r0, r5
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	b004      	add	sp, #16
 800249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80024a6:	eb00 0904 	add.w	r9, r0, r4
 80024aa:	d1e5      	bne.n	8002478 <__cvt+0x6a>
 80024ac:	7803      	ldrb	r3, [r0, #0]
 80024ae:	2b30      	cmp	r3, #48	@ 0x30
 80024b0:	d10a      	bne.n	80024c8 <__cvt+0xba>
 80024b2:	2200      	movs	r2, #0
 80024b4:	2300      	movs	r3, #0
 80024b6:	4630      	mov	r0, r6
 80024b8:	4639      	mov	r1, r7
 80024ba:	f7fe fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80024be:	b918      	cbnz	r0, 80024c8 <__cvt+0xba>
 80024c0:	f1c4 0401 	rsb	r4, r4, #1
 80024c4:	f8ca 4000 	str.w	r4, [sl]
 80024c8:	f8da 3000 	ldr.w	r3, [sl]
 80024cc:	4499      	add	r9, r3
 80024ce:	e7d3      	b.n	8002478 <__cvt+0x6a>
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	9103      	str	r1, [sp, #12]
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e7d9      	b.n	800248c <__cvt+0x7e>

080024d8 <__exponent>:
 80024d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024da:	2900      	cmp	r1, #0
 80024dc:	bfba      	itte	lt
 80024de:	4249      	neglt	r1, r1
 80024e0:	232d      	movlt	r3, #45	@ 0x2d
 80024e2:	232b      	movge	r3, #43	@ 0x2b
 80024e4:	2909      	cmp	r1, #9
 80024e6:	7002      	strb	r2, [r0, #0]
 80024e8:	7043      	strb	r3, [r0, #1]
 80024ea:	dd29      	ble.n	8002540 <__exponent+0x68>
 80024ec:	f10d 0307 	add.w	r3, sp, #7
 80024f0:	461d      	mov	r5, r3
 80024f2:	270a      	movs	r7, #10
 80024f4:	461a      	mov	r2, r3
 80024f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80024fa:	fb07 1416 	mls	r4, r7, r6, r1
 80024fe:	3430      	adds	r4, #48	@ 0x30
 8002500:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002504:	460c      	mov	r4, r1
 8002506:	2c63      	cmp	r4, #99	@ 0x63
 8002508:	f103 33ff 	add.w	r3, r3, #4294967295
 800250c:	4631      	mov	r1, r6
 800250e:	dcf1      	bgt.n	80024f4 <__exponent+0x1c>
 8002510:	3130      	adds	r1, #48	@ 0x30
 8002512:	1e94      	subs	r4, r2, #2
 8002514:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002518:	1c41      	adds	r1, r0, #1
 800251a:	4623      	mov	r3, r4
 800251c:	42ab      	cmp	r3, r5
 800251e:	d30a      	bcc.n	8002536 <__exponent+0x5e>
 8002520:	f10d 0309 	add.w	r3, sp, #9
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	42ac      	cmp	r4, r5
 8002528:	bf88      	it	hi
 800252a:	2300      	movhi	r3, #0
 800252c:	3302      	adds	r3, #2
 800252e:	4403      	add	r3, r0
 8002530:	1a18      	subs	r0, r3, r0
 8002532:	b003      	add	sp, #12
 8002534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002536:	f813 6b01 	ldrb.w	r6, [r3], #1
 800253a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800253e:	e7ed      	b.n	800251c <__exponent+0x44>
 8002540:	2330      	movs	r3, #48	@ 0x30
 8002542:	3130      	adds	r1, #48	@ 0x30
 8002544:	7083      	strb	r3, [r0, #2]
 8002546:	70c1      	strb	r1, [r0, #3]
 8002548:	1d03      	adds	r3, r0, #4
 800254a:	e7f1      	b.n	8002530 <__exponent+0x58>

0800254c <_printf_float>:
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b08d      	sub	sp, #52	@ 0x34
 8002552:	460c      	mov	r4, r1
 8002554:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002558:	4616      	mov	r6, r2
 800255a:	461f      	mov	r7, r3
 800255c:	4605      	mov	r5, r0
 800255e:	f000 fe9b 	bl	8003298 <_localeconv_r>
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	9304      	str	r3, [sp, #16]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd fe82 	bl	8000270 <strlen>
 800256c:	2300      	movs	r3, #0
 800256e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002570:	f8d8 3000 	ldr.w	r3, [r8]
 8002574:	9005      	str	r0, [sp, #20]
 8002576:	3307      	adds	r3, #7
 8002578:	f023 0307 	bic.w	r3, r3, #7
 800257c:	f103 0208 	add.w	r2, r3, #8
 8002580:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002584:	f8d4 b000 	ldr.w	fp, [r4]
 8002588:	f8c8 2000 	str.w	r2, [r8]
 800258c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002590:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002594:	9307      	str	r3, [sp, #28]
 8002596:	f8cd 8018 	str.w	r8, [sp, #24]
 800259a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800259e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002814 <_printf_float+0x2c8>)
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	f7fe fac0 	bl	8000b2c <__aeabi_dcmpun>
 80025ac:	bb70      	cbnz	r0, 800260c <_printf_float+0xc0>
 80025ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025b2:	4b98      	ldr	r3, [pc, #608]	@ (8002814 <_printf_float+0x2c8>)
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	f7fe fa9a 	bl	8000af0 <__aeabi_dcmple>
 80025bc:	bb30      	cbnz	r0, 800260c <_printf_float+0xc0>
 80025be:	2200      	movs	r2, #0
 80025c0:	2300      	movs	r3, #0
 80025c2:	4640      	mov	r0, r8
 80025c4:	4649      	mov	r1, r9
 80025c6:	f7fe fa89 	bl	8000adc <__aeabi_dcmplt>
 80025ca:	b110      	cbz	r0, 80025d2 <_printf_float+0x86>
 80025cc:	232d      	movs	r3, #45	@ 0x2d
 80025ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025d2:	4a91      	ldr	r2, [pc, #580]	@ (8002818 <_printf_float+0x2cc>)
 80025d4:	4b91      	ldr	r3, [pc, #580]	@ (800281c <_printf_float+0x2d0>)
 80025d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80025da:	bf8c      	ite	hi
 80025dc:	4690      	movhi	r8, r2
 80025de:	4698      	movls	r8, r3
 80025e0:	2303      	movs	r3, #3
 80025e2:	6123      	str	r3, [r4, #16]
 80025e4:	f02b 0304 	bic.w	r3, fp, #4
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	f04f 0900 	mov.w	r9, #0
 80025ee:	9700      	str	r7, [sp, #0]
 80025f0:	4633      	mov	r3, r6
 80025f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80025f4:	4621      	mov	r1, r4
 80025f6:	4628      	mov	r0, r5
 80025f8:	f000 f9d2 	bl	80029a0 <_printf_common>
 80025fc:	3001      	adds	r0, #1
 80025fe:	f040 808d 	bne.w	800271c <_printf_float+0x1d0>
 8002602:	f04f 30ff 	mov.w	r0, #4294967295
 8002606:	b00d      	add	sp, #52	@ 0x34
 8002608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260c:	4642      	mov	r2, r8
 800260e:	464b      	mov	r3, r9
 8002610:	4640      	mov	r0, r8
 8002612:	4649      	mov	r1, r9
 8002614:	f7fe fa8a 	bl	8000b2c <__aeabi_dcmpun>
 8002618:	b140      	cbz	r0, 800262c <_printf_float+0xe0>
 800261a:	464b      	mov	r3, r9
 800261c:	2b00      	cmp	r3, #0
 800261e:	bfbc      	itt	lt
 8002620:	232d      	movlt	r3, #45	@ 0x2d
 8002622:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002626:	4a7e      	ldr	r2, [pc, #504]	@ (8002820 <_printf_float+0x2d4>)
 8002628:	4b7e      	ldr	r3, [pc, #504]	@ (8002824 <_printf_float+0x2d8>)
 800262a:	e7d4      	b.n	80025d6 <_printf_float+0x8a>
 800262c:	6863      	ldr	r3, [r4, #4]
 800262e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002632:	9206      	str	r2, [sp, #24]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	d13b      	bne.n	80026b0 <_printf_float+0x164>
 8002638:	2306      	movs	r3, #6
 800263a:	6063      	str	r3, [r4, #4]
 800263c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002640:	2300      	movs	r3, #0
 8002642:	6022      	str	r2, [r4, #0]
 8002644:	9303      	str	r3, [sp, #12]
 8002646:	ab0a      	add	r3, sp, #40	@ 0x28
 8002648:	e9cd a301 	strd	sl, r3, [sp, #4]
 800264c:	ab09      	add	r3, sp, #36	@ 0x24
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	6861      	ldr	r1, [r4, #4]
 8002652:	ec49 8b10 	vmov	d0, r8, r9
 8002656:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800265a:	4628      	mov	r0, r5
 800265c:	f7ff fed7 	bl	800240e <__cvt>
 8002660:	9b06      	ldr	r3, [sp, #24]
 8002662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002664:	2b47      	cmp	r3, #71	@ 0x47
 8002666:	4680      	mov	r8, r0
 8002668:	d129      	bne.n	80026be <_printf_float+0x172>
 800266a:	1cc8      	adds	r0, r1, #3
 800266c:	db02      	blt.n	8002674 <_printf_float+0x128>
 800266e:	6863      	ldr	r3, [r4, #4]
 8002670:	4299      	cmp	r1, r3
 8002672:	dd41      	ble.n	80026f8 <_printf_float+0x1ac>
 8002674:	f1aa 0a02 	sub.w	sl, sl, #2
 8002678:	fa5f fa8a 	uxtb.w	sl, sl
 800267c:	3901      	subs	r1, #1
 800267e:	4652      	mov	r2, sl
 8002680:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002684:	9109      	str	r1, [sp, #36]	@ 0x24
 8002686:	f7ff ff27 	bl	80024d8 <__exponent>
 800268a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800268c:	1813      	adds	r3, r2, r0
 800268e:	2a01      	cmp	r2, #1
 8002690:	4681      	mov	r9, r0
 8002692:	6123      	str	r3, [r4, #16]
 8002694:	dc02      	bgt.n	800269c <_printf_float+0x150>
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	07d2      	lsls	r2, r2, #31
 800269a:	d501      	bpl.n	80026a0 <_printf_float+0x154>
 800269c:	3301      	adds	r3, #1
 800269e:	6123      	str	r3, [r4, #16]
 80026a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0a2      	beq.n	80025ee <_printf_float+0xa2>
 80026a8:	232d      	movs	r3, #45	@ 0x2d
 80026aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026ae:	e79e      	b.n	80025ee <_printf_float+0xa2>
 80026b0:	9a06      	ldr	r2, [sp, #24]
 80026b2:	2a47      	cmp	r2, #71	@ 0x47
 80026b4:	d1c2      	bne.n	800263c <_printf_float+0xf0>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1c0      	bne.n	800263c <_printf_float+0xf0>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e7bd      	b.n	800263a <_printf_float+0xee>
 80026be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80026c2:	d9db      	bls.n	800267c <_printf_float+0x130>
 80026c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80026c8:	d118      	bne.n	80026fc <_printf_float+0x1b0>
 80026ca:	2900      	cmp	r1, #0
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	dd0b      	ble.n	80026e8 <_printf_float+0x19c>
 80026d0:	6121      	str	r1, [r4, #16]
 80026d2:	b913      	cbnz	r3, 80026da <_printf_float+0x18e>
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	07d0      	lsls	r0, r2, #31
 80026d8:	d502      	bpl.n	80026e0 <_printf_float+0x194>
 80026da:	3301      	adds	r3, #1
 80026dc:	440b      	add	r3, r1
 80026de:	6123      	str	r3, [r4, #16]
 80026e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80026e2:	f04f 0900 	mov.w	r9, #0
 80026e6:	e7db      	b.n	80026a0 <_printf_float+0x154>
 80026e8:	b913      	cbnz	r3, 80026f0 <_printf_float+0x1a4>
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	07d2      	lsls	r2, r2, #31
 80026ee:	d501      	bpl.n	80026f4 <_printf_float+0x1a8>
 80026f0:	3302      	adds	r3, #2
 80026f2:	e7f4      	b.n	80026de <_printf_float+0x192>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e7f2      	b.n	80026de <_printf_float+0x192>
 80026f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80026fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80026fe:	4299      	cmp	r1, r3
 8002700:	db05      	blt.n	800270e <_printf_float+0x1c2>
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	6121      	str	r1, [r4, #16]
 8002706:	07d8      	lsls	r0, r3, #31
 8002708:	d5ea      	bpl.n	80026e0 <_printf_float+0x194>
 800270a:	1c4b      	adds	r3, r1, #1
 800270c:	e7e7      	b.n	80026de <_printf_float+0x192>
 800270e:	2900      	cmp	r1, #0
 8002710:	bfd4      	ite	le
 8002712:	f1c1 0202 	rsble	r2, r1, #2
 8002716:	2201      	movgt	r2, #1
 8002718:	4413      	add	r3, r2
 800271a:	e7e0      	b.n	80026de <_printf_float+0x192>
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	055a      	lsls	r2, r3, #21
 8002720:	d407      	bmi.n	8002732 <_printf_float+0x1e6>
 8002722:	6923      	ldr	r3, [r4, #16]
 8002724:	4642      	mov	r2, r8
 8002726:	4631      	mov	r1, r6
 8002728:	4628      	mov	r0, r5
 800272a:	47b8      	blx	r7
 800272c:	3001      	adds	r0, #1
 800272e:	d12b      	bne.n	8002788 <_printf_float+0x23c>
 8002730:	e767      	b.n	8002602 <_printf_float+0xb6>
 8002732:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002736:	f240 80dd 	bls.w	80028f4 <_printf_float+0x3a8>
 800273a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800273e:	2200      	movs	r2, #0
 8002740:	2300      	movs	r3, #0
 8002742:	f7fe f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8002746:	2800      	cmp	r0, #0
 8002748:	d033      	beq.n	80027b2 <_printf_float+0x266>
 800274a:	4a37      	ldr	r2, [pc, #220]	@ (8002828 <_printf_float+0x2dc>)
 800274c:	2301      	movs	r3, #1
 800274e:	4631      	mov	r1, r6
 8002750:	4628      	mov	r0, r5
 8002752:	47b8      	blx	r7
 8002754:	3001      	adds	r0, #1
 8002756:	f43f af54 	beq.w	8002602 <_printf_float+0xb6>
 800275a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800275e:	4543      	cmp	r3, r8
 8002760:	db02      	blt.n	8002768 <_printf_float+0x21c>
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	07d8      	lsls	r0, r3, #31
 8002766:	d50f      	bpl.n	8002788 <_printf_float+0x23c>
 8002768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800276c:	4631      	mov	r1, r6
 800276e:	4628      	mov	r0, r5
 8002770:	47b8      	blx	r7
 8002772:	3001      	adds	r0, #1
 8002774:	f43f af45 	beq.w	8002602 <_printf_float+0xb6>
 8002778:	f04f 0900 	mov.w	r9, #0
 800277c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002780:	f104 0a1a 	add.w	sl, r4, #26
 8002784:	45c8      	cmp	r8, r9
 8002786:	dc09      	bgt.n	800279c <_printf_float+0x250>
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	079b      	lsls	r3, r3, #30
 800278c:	f100 8103 	bmi.w	8002996 <_printf_float+0x44a>
 8002790:	68e0      	ldr	r0, [r4, #12]
 8002792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002794:	4298      	cmp	r0, r3
 8002796:	bfb8      	it	lt
 8002798:	4618      	movlt	r0, r3
 800279a:	e734      	b.n	8002606 <_printf_float+0xba>
 800279c:	2301      	movs	r3, #1
 800279e:	4652      	mov	r2, sl
 80027a0:	4631      	mov	r1, r6
 80027a2:	4628      	mov	r0, r5
 80027a4:	47b8      	blx	r7
 80027a6:	3001      	adds	r0, #1
 80027a8:	f43f af2b 	beq.w	8002602 <_printf_float+0xb6>
 80027ac:	f109 0901 	add.w	r9, r9, #1
 80027b0:	e7e8      	b.n	8002784 <_printf_float+0x238>
 80027b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dc39      	bgt.n	800282c <_printf_float+0x2e0>
 80027b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <_printf_float+0x2dc>)
 80027ba:	2301      	movs	r3, #1
 80027bc:	4631      	mov	r1, r6
 80027be:	4628      	mov	r0, r5
 80027c0:	47b8      	blx	r7
 80027c2:	3001      	adds	r0, #1
 80027c4:	f43f af1d 	beq.w	8002602 <_printf_float+0xb6>
 80027c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80027cc:	ea59 0303 	orrs.w	r3, r9, r3
 80027d0:	d102      	bne.n	80027d8 <_printf_float+0x28c>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	07d9      	lsls	r1, r3, #31
 80027d6:	d5d7      	bpl.n	8002788 <_printf_float+0x23c>
 80027d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027dc:	4631      	mov	r1, r6
 80027de:	4628      	mov	r0, r5
 80027e0:	47b8      	blx	r7
 80027e2:	3001      	adds	r0, #1
 80027e4:	f43f af0d 	beq.w	8002602 <_printf_float+0xb6>
 80027e8:	f04f 0a00 	mov.w	sl, #0
 80027ec:	f104 0b1a 	add.w	fp, r4, #26
 80027f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027f2:	425b      	negs	r3, r3
 80027f4:	4553      	cmp	r3, sl
 80027f6:	dc01      	bgt.n	80027fc <_printf_float+0x2b0>
 80027f8:	464b      	mov	r3, r9
 80027fa:	e793      	b.n	8002724 <_printf_float+0x1d8>
 80027fc:	2301      	movs	r3, #1
 80027fe:	465a      	mov	r2, fp
 8002800:	4631      	mov	r1, r6
 8002802:	4628      	mov	r0, r5
 8002804:	47b8      	blx	r7
 8002806:	3001      	adds	r0, #1
 8002808:	f43f aefb 	beq.w	8002602 <_printf_float+0xb6>
 800280c:	f10a 0a01 	add.w	sl, sl, #1
 8002810:	e7ee      	b.n	80027f0 <_printf_float+0x2a4>
 8002812:	bf00      	nop
 8002814:	7fefffff 	.word	0x7fefffff
 8002818:	08005382 	.word	0x08005382
 800281c:	0800537e 	.word	0x0800537e
 8002820:	0800538a 	.word	0x0800538a
 8002824:	08005386 	.word	0x08005386
 8002828:	0800538e 	.word	0x0800538e
 800282c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800282e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002832:	4553      	cmp	r3, sl
 8002834:	bfa8      	it	ge
 8002836:	4653      	movge	r3, sl
 8002838:	2b00      	cmp	r3, #0
 800283a:	4699      	mov	r9, r3
 800283c:	dc36      	bgt.n	80028ac <_printf_float+0x360>
 800283e:	f04f 0b00 	mov.w	fp, #0
 8002842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002846:	f104 021a 	add.w	r2, r4, #26
 800284a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800284c:	9306      	str	r3, [sp, #24]
 800284e:	eba3 0309 	sub.w	r3, r3, r9
 8002852:	455b      	cmp	r3, fp
 8002854:	dc31      	bgt.n	80028ba <_printf_float+0x36e>
 8002856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002858:	459a      	cmp	sl, r3
 800285a:	dc3a      	bgt.n	80028d2 <_printf_float+0x386>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	07da      	lsls	r2, r3, #31
 8002860:	d437      	bmi.n	80028d2 <_printf_float+0x386>
 8002862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002864:	ebaa 0903 	sub.w	r9, sl, r3
 8002868:	9b06      	ldr	r3, [sp, #24]
 800286a:	ebaa 0303 	sub.w	r3, sl, r3
 800286e:	4599      	cmp	r9, r3
 8002870:	bfa8      	it	ge
 8002872:	4699      	movge	r9, r3
 8002874:	f1b9 0f00 	cmp.w	r9, #0
 8002878:	dc33      	bgt.n	80028e2 <_printf_float+0x396>
 800287a:	f04f 0800 	mov.w	r8, #0
 800287e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002882:	f104 0b1a 	add.w	fp, r4, #26
 8002886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002888:	ebaa 0303 	sub.w	r3, sl, r3
 800288c:	eba3 0309 	sub.w	r3, r3, r9
 8002890:	4543      	cmp	r3, r8
 8002892:	f77f af79 	ble.w	8002788 <_printf_float+0x23c>
 8002896:	2301      	movs	r3, #1
 8002898:	465a      	mov	r2, fp
 800289a:	4631      	mov	r1, r6
 800289c:	4628      	mov	r0, r5
 800289e:	47b8      	blx	r7
 80028a0:	3001      	adds	r0, #1
 80028a2:	f43f aeae 	beq.w	8002602 <_printf_float+0xb6>
 80028a6:	f108 0801 	add.w	r8, r8, #1
 80028aa:	e7ec      	b.n	8002886 <_printf_float+0x33a>
 80028ac:	4642      	mov	r2, r8
 80028ae:	4631      	mov	r1, r6
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b8      	blx	r7
 80028b4:	3001      	adds	r0, #1
 80028b6:	d1c2      	bne.n	800283e <_printf_float+0x2f2>
 80028b8:	e6a3      	b.n	8002602 <_printf_float+0xb6>
 80028ba:	2301      	movs	r3, #1
 80028bc:	4631      	mov	r1, r6
 80028be:	4628      	mov	r0, r5
 80028c0:	9206      	str	r2, [sp, #24]
 80028c2:	47b8      	blx	r7
 80028c4:	3001      	adds	r0, #1
 80028c6:	f43f ae9c 	beq.w	8002602 <_printf_float+0xb6>
 80028ca:	9a06      	ldr	r2, [sp, #24]
 80028cc:	f10b 0b01 	add.w	fp, fp, #1
 80028d0:	e7bb      	b.n	800284a <_printf_float+0x2fe>
 80028d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028d6:	4631      	mov	r1, r6
 80028d8:	4628      	mov	r0, r5
 80028da:	47b8      	blx	r7
 80028dc:	3001      	adds	r0, #1
 80028de:	d1c0      	bne.n	8002862 <_printf_float+0x316>
 80028e0:	e68f      	b.n	8002602 <_printf_float+0xb6>
 80028e2:	9a06      	ldr	r2, [sp, #24]
 80028e4:	464b      	mov	r3, r9
 80028e6:	4442      	add	r2, r8
 80028e8:	4631      	mov	r1, r6
 80028ea:	4628      	mov	r0, r5
 80028ec:	47b8      	blx	r7
 80028ee:	3001      	adds	r0, #1
 80028f0:	d1c3      	bne.n	800287a <_printf_float+0x32e>
 80028f2:	e686      	b.n	8002602 <_printf_float+0xb6>
 80028f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80028f8:	f1ba 0f01 	cmp.w	sl, #1
 80028fc:	dc01      	bgt.n	8002902 <_printf_float+0x3b6>
 80028fe:	07db      	lsls	r3, r3, #31
 8002900:	d536      	bpl.n	8002970 <_printf_float+0x424>
 8002902:	2301      	movs	r3, #1
 8002904:	4642      	mov	r2, r8
 8002906:	4631      	mov	r1, r6
 8002908:	4628      	mov	r0, r5
 800290a:	47b8      	blx	r7
 800290c:	3001      	adds	r0, #1
 800290e:	f43f ae78 	beq.w	8002602 <_printf_float+0xb6>
 8002912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002916:	4631      	mov	r1, r6
 8002918:	4628      	mov	r0, r5
 800291a:	47b8      	blx	r7
 800291c:	3001      	adds	r0, #1
 800291e:	f43f ae70 	beq.w	8002602 <_printf_float+0xb6>
 8002922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002926:	2200      	movs	r2, #0
 8002928:	2300      	movs	r3, #0
 800292a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800292e:	f7fe f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8002932:	b9c0      	cbnz	r0, 8002966 <_printf_float+0x41a>
 8002934:	4653      	mov	r3, sl
 8002936:	f108 0201 	add.w	r2, r8, #1
 800293a:	4631      	mov	r1, r6
 800293c:	4628      	mov	r0, r5
 800293e:	47b8      	blx	r7
 8002940:	3001      	adds	r0, #1
 8002942:	d10c      	bne.n	800295e <_printf_float+0x412>
 8002944:	e65d      	b.n	8002602 <_printf_float+0xb6>
 8002946:	2301      	movs	r3, #1
 8002948:	465a      	mov	r2, fp
 800294a:	4631      	mov	r1, r6
 800294c:	4628      	mov	r0, r5
 800294e:	47b8      	blx	r7
 8002950:	3001      	adds	r0, #1
 8002952:	f43f ae56 	beq.w	8002602 <_printf_float+0xb6>
 8002956:	f108 0801 	add.w	r8, r8, #1
 800295a:	45d0      	cmp	r8, sl
 800295c:	dbf3      	blt.n	8002946 <_printf_float+0x3fa>
 800295e:	464b      	mov	r3, r9
 8002960:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002964:	e6df      	b.n	8002726 <_printf_float+0x1da>
 8002966:	f04f 0800 	mov.w	r8, #0
 800296a:	f104 0b1a 	add.w	fp, r4, #26
 800296e:	e7f4      	b.n	800295a <_printf_float+0x40e>
 8002970:	2301      	movs	r3, #1
 8002972:	4642      	mov	r2, r8
 8002974:	e7e1      	b.n	800293a <_printf_float+0x3ee>
 8002976:	2301      	movs	r3, #1
 8002978:	464a      	mov	r2, r9
 800297a:	4631      	mov	r1, r6
 800297c:	4628      	mov	r0, r5
 800297e:	47b8      	blx	r7
 8002980:	3001      	adds	r0, #1
 8002982:	f43f ae3e 	beq.w	8002602 <_printf_float+0xb6>
 8002986:	f108 0801 	add.w	r8, r8, #1
 800298a:	68e3      	ldr	r3, [r4, #12]
 800298c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800298e:	1a5b      	subs	r3, r3, r1
 8002990:	4543      	cmp	r3, r8
 8002992:	dcf0      	bgt.n	8002976 <_printf_float+0x42a>
 8002994:	e6fc      	b.n	8002790 <_printf_float+0x244>
 8002996:	f04f 0800 	mov.w	r8, #0
 800299a:	f104 0919 	add.w	r9, r4, #25
 800299e:	e7f4      	b.n	800298a <_printf_float+0x43e>

080029a0 <_printf_common>:
 80029a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a4:	4616      	mov	r6, r2
 80029a6:	4698      	mov	r8, r3
 80029a8:	688a      	ldr	r2, [r1, #8]
 80029aa:	690b      	ldr	r3, [r1, #16]
 80029ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029b0:	4293      	cmp	r3, r2
 80029b2:	bfb8      	it	lt
 80029b4:	4613      	movlt	r3, r2
 80029b6:	6033      	str	r3, [r6, #0]
 80029b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029bc:	4607      	mov	r7, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	b10a      	cbz	r2, 80029c6 <_printf_common+0x26>
 80029c2:	3301      	adds	r3, #1
 80029c4:	6033      	str	r3, [r6, #0]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	0699      	lsls	r1, r3, #26
 80029ca:	bf42      	ittt	mi
 80029cc:	6833      	ldrmi	r3, [r6, #0]
 80029ce:	3302      	addmi	r3, #2
 80029d0:	6033      	strmi	r3, [r6, #0]
 80029d2:	6825      	ldr	r5, [r4, #0]
 80029d4:	f015 0506 	ands.w	r5, r5, #6
 80029d8:	d106      	bne.n	80029e8 <_printf_common+0x48>
 80029da:	f104 0a19 	add.w	sl, r4, #25
 80029de:	68e3      	ldr	r3, [r4, #12]
 80029e0:	6832      	ldr	r2, [r6, #0]
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	42ab      	cmp	r3, r5
 80029e6:	dc26      	bgt.n	8002a36 <_printf_common+0x96>
 80029e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	3b00      	subs	r3, #0
 80029f0:	bf18      	it	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	0692      	lsls	r2, r2, #26
 80029f6:	d42b      	bmi.n	8002a50 <_printf_common+0xb0>
 80029f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80029fc:	4641      	mov	r1, r8
 80029fe:	4638      	mov	r0, r7
 8002a00:	47c8      	blx	r9
 8002a02:	3001      	adds	r0, #1
 8002a04:	d01e      	beq.n	8002a44 <_printf_common+0xa4>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	6922      	ldr	r2, [r4, #16]
 8002a0a:	f003 0306 	and.w	r3, r3, #6
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf02      	ittt	eq
 8002a12:	68e5      	ldreq	r5, [r4, #12]
 8002a14:	6833      	ldreq	r3, [r6, #0]
 8002a16:	1aed      	subeq	r5, r5, r3
 8002a18:	68a3      	ldr	r3, [r4, #8]
 8002a1a:	bf0c      	ite	eq
 8002a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a20:	2500      	movne	r5, #0
 8002a22:	4293      	cmp	r3, r2
 8002a24:	bfc4      	itt	gt
 8002a26:	1a9b      	subgt	r3, r3, r2
 8002a28:	18ed      	addgt	r5, r5, r3
 8002a2a:	2600      	movs	r6, #0
 8002a2c:	341a      	adds	r4, #26
 8002a2e:	42b5      	cmp	r5, r6
 8002a30:	d11a      	bne.n	8002a68 <_printf_common+0xc8>
 8002a32:	2000      	movs	r0, #0
 8002a34:	e008      	b.n	8002a48 <_printf_common+0xa8>
 8002a36:	2301      	movs	r3, #1
 8002a38:	4652      	mov	r2, sl
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	47c8      	blx	r9
 8002a40:	3001      	adds	r0, #1
 8002a42:	d103      	bne.n	8002a4c <_printf_common+0xac>
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a4c:	3501      	adds	r5, #1
 8002a4e:	e7c6      	b.n	80029de <_printf_common+0x3e>
 8002a50:	18e1      	adds	r1, r4, r3
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	2030      	movs	r0, #48	@ 0x30
 8002a56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a5a:	4422      	add	r2, r4
 8002a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a64:	3302      	adds	r3, #2
 8002a66:	e7c7      	b.n	80029f8 <_printf_common+0x58>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	4638      	mov	r0, r7
 8002a70:	47c8      	blx	r9
 8002a72:	3001      	adds	r0, #1
 8002a74:	d0e6      	beq.n	8002a44 <_printf_common+0xa4>
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7d9      	b.n	8002a2e <_printf_common+0x8e>
	...

08002a7c <_printf_i>:
 8002a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a80:	7e0f      	ldrb	r7, [r1, #24]
 8002a82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a84:	2f78      	cmp	r7, #120	@ 0x78
 8002a86:	4691      	mov	r9, r2
 8002a88:	4680      	mov	r8, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	469a      	mov	sl, r3
 8002a8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a92:	d807      	bhi.n	8002aa4 <_printf_i+0x28>
 8002a94:	2f62      	cmp	r7, #98	@ 0x62
 8002a96:	d80a      	bhi.n	8002aae <_printf_i+0x32>
 8002a98:	2f00      	cmp	r7, #0
 8002a9a:	f000 80d1 	beq.w	8002c40 <_printf_i+0x1c4>
 8002a9e:	2f58      	cmp	r7, #88	@ 0x58
 8002aa0:	f000 80b8 	beq.w	8002c14 <_printf_i+0x198>
 8002aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002aa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002aac:	e03a      	b.n	8002b24 <_printf_i+0xa8>
 8002aae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ab2:	2b15      	cmp	r3, #21
 8002ab4:	d8f6      	bhi.n	8002aa4 <_printf_i+0x28>
 8002ab6:	a101      	add	r1, pc, #4	@ (adr r1, 8002abc <_printf_i+0x40>)
 8002ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002abc:	08002b15 	.word	0x08002b15
 8002ac0:	08002b29 	.word	0x08002b29
 8002ac4:	08002aa5 	.word	0x08002aa5
 8002ac8:	08002aa5 	.word	0x08002aa5
 8002acc:	08002aa5 	.word	0x08002aa5
 8002ad0:	08002aa5 	.word	0x08002aa5
 8002ad4:	08002b29 	.word	0x08002b29
 8002ad8:	08002aa5 	.word	0x08002aa5
 8002adc:	08002aa5 	.word	0x08002aa5
 8002ae0:	08002aa5 	.word	0x08002aa5
 8002ae4:	08002aa5 	.word	0x08002aa5
 8002ae8:	08002c27 	.word	0x08002c27
 8002aec:	08002b53 	.word	0x08002b53
 8002af0:	08002be1 	.word	0x08002be1
 8002af4:	08002aa5 	.word	0x08002aa5
 8002af8:	08002aa5 	.word	0x08002aa5
 8002afc:	08002c49 	.word	0x08002c49
 8002b00:	08002aa5 	.word	0x08002aa5
 8002b04:	08002b53 	.word	0x08002b53
 8002b08:	08002aa5 	.word	0x08002aa5
 8002b0c:	08002aa5 	.word	0x08002aa5
 8002b10:	08002be9 	.word	0x08002be9
 8002b14:	6833      	ldr	r3, [r6, #0]
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6032      	str	r2, [r6, #0]
 8002b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b24:	2301      	movs	r3, #1
 8002b26:	e09c      	b.n	8002c62 <_printf_i+0x1e6>
 8002b28:	6833      	ldr	r3, [r6, #0]
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	1d19      	adds	r1, r3, #4
 8002b2e:	6031      	str	r1, [r6, #0]
 8002b30:	0606      	lsls	r6, r0, #24
 8002b32:	d501      	bpl.n	8002b38 <_printf_i+0xbc>
 8002b34:	681d      	ldr	r5, [r3, #0]
 8002b36:	e003      	b.n	8002b40 <_printf_i+0xc4>
 8002b38:	0645      	lsls	r5, r0, #25
 8002b3a:	d5fb      	bpl.n	8002b34 <_printf_i+0xb8>
 8002b3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b40:	2d00      	cmp	r5, #0
 8002b42:	da03      	bge.n	8002b4c <_printf_i+0xd0>
 8002b44:	232d      	movs	r3, #45	@ 0x2d
 8002b46:	426d      	negs	r5, r5
 8002b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b4c:	4858      	ldr	r0, [pc, #352]	@ (8002cb0 <_printf_i+0x234>)
 8002b4e:	230a      	movs	r3, #10
 8002b50:	e011      	b.n	8002b76 <_printf_i+0xfa>
 8002b52:	6821      	ldr	r1, [r4, #0]
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	0608      	lsls	r0, r1, #24
 8002b58:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b5c:	d402      	bmi.n	8002b64 <_printf_i+0xe8>
 8002b5e:	0649      	lsls	r1, r1, #25
 8002b60:	bf48      	it	mi
 8002b62:	b2ad      	uxthmi	r5, r5
 8002b64:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b66:	4852      	ldr	r0, [pc, #328]	@ (8002cb0 <_printf_i+0x234>)
 8002b68:	6033      	str	r3, [r6, #0]
 8002b6a:	bf14      	ite	ne
 8002b6c:	230a      	movne	r3, #10
 8002b6e:	2308      	moveq	r3, #8
 8002b70:	2100      	movs	r1, #0
 8002b72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b76:	6866      	ldr	r6, [r4, #4]
 8002b78:	60a6      	str	r6, [r4, #8]
 8002b7a:	2e00      	cmp	r6, #0
 8002b7c:	db05      	blt.n	8002b8a <_printf_i+0x10e>
 8002b7e:	6821      	ldr	r1, [r4, #0]
 8002b80:	432e      	orrs	r6, r5
 8002b82:	f021 0104 	bic.w	r1, r1, #4
 8002b86:	6021      	str	r1, [r4, #0]
 8002b88:	d04b      	beq.n	8002c22 <_printf_i+0x1a6>
 8002b8a:	4616      	mov	r6, r2
 8002b8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b90:	fb03 5711 	mls	r7, r3, r1, r5
 8002b94:	5dc7      	ldrb	r7, [r0, r7]
 8002b96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b9a:	462f      	mov	r7, r5
 8002b9c:	42bb      	cmp	r3, r7
 8002b9e:	460d      	mov	r5, r1
 8002ba0:	d9f4      	bls.n	8002b8c <_printf_i+0x110>
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d10b      	bne.n	8002bbe <_printf_i+0x142>
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	07df      	lsls	r7, r3, #31
 8002baa:	d508      	bpl.n	8002bbe <_printf_i+0x142>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	6861      	ldr	r1, [r4, #4]
 8002bb0:	4299      	cmp	r1, r3
 8002bb2:	bfde      	ittt	le
 8002bb4:	2330      	movle	r3, #48	@ 0x30
 8002bb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bbe:	1b92      	subs	r2, r2, r6
 8002bc0:	6122      	str	r2, [r4, #16]
 8002bc2:	f8cd a000 	str.w	sl, [sp]
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	aa03      	add	r2, sp, #12
 8002bca:	4621      	mov	r1, r4
 8002bcc:	4640      	mov	r0, r8
 8002bce:	f7ff fee7 	bl	80029a0 <_printf_common>
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d14a      	bne.n	8002c6c <_printf_i+0x1f0>
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bda:	b004      	add	sp, #16
 8002bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	f043 0320 	orr.w	r3, r3, #32
 8002be6:	6023      	str	r3, [r4, #0]
 8002be8:	4832      	ldr	r0, [pc, #200]	@ (8002cb4 <_printf_i+0x238>)
 8002bea:	2778      	movs	r7, #120	@ 0x78
 8002bec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	6831      	ldr	r1, [r6, #0]
 8002bf4:	061f      	lsls	r7, r3, #24
 8002bf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002bfa:	d402      	bmi.n	8002c02 <_printf_i+0x186>
 8002bfc:	065f      	lsls	r7, r3, #25
 8002bfe:	bf48      	it	mi
 8002c00:	b2ad      	uxthmi	r5, r5
 8002c02:	6031      	str	r1, [r6, #0]
 8002c04:	07d9      	lsls	r1, r3, #31
 8002c06:	bf44      	itt	mi
 8002c08:	f043 0320 	orrmi.w	r3, r3, #32
 8002c0c:	6023      	strmi	r3, [r4, #0]
 8002c0e:	b11d      	cbz	r5, 8002c18 <_printf_i+0x19c>
 8002c10:	2310      	movs	r3, #16
 8002c12:	e7ad      	b.n	8002b70 <_printf_i+0xf4>
 8002c14:	4826      	ldr	r0, [pc, #152]	@ (8002cb0 <_printf_i+0x234>)
 8002c16:	e7e9      	b.n	8002bec <_printf_i+0x170>
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f023 0320 	bic.w	r3, r3, #32
 8002c1e:	6023      	str	r3, [r4, #0]
 8002c20:	e7f6      	b.n	8002c10 <_printf_i+0x194>
 8002c22:	4616      	mov	r6, r2
 8002c24:	e7bd      	b.n	8002ba2 <_printf_i+0x126>
 8002c26:	6833      	ldr	r3, [r6, #0]
 8002c28:	6825      	ldr	r5, [r4, #0]
 8002c2a:	6961      	ldr	r1, [r4, #20]
 8002c2c:	1d18      	adds	r0, r3, #4
 8002c2e:	6030      	str	r0, [r6, #0]
 8002c30:	062e      	lsls	r6, r5, #24
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	d501      	bpl.n	8002c3a <_printf_i+0x1be>
 8002c36:	6019      	str	r1, [r3, #0]
 8002c38:	e002      	b.n	8002c40 <_printf_i+0x1c4>
 8002c3a:	0668      	lsls	r0, r5, #25
 8002c3c:	d5fb      	bpl.n	8002c36 <_printf_i+0x1ba>
 8002c3e:	8019      	strh	r1, [r3, #0]
 8002c40:	2300      	movs	r3, #0
 8002c42:	6123      	str	r3, [r4, #16]
 8002c44:	4616      	mov	r6, r2
 8002c46:	e7bc      	b.n	8002bc2 <_printf_i+0x146>
 8002c48:	6833      	ldr	r3, [r6, #0]
 8002c4a:	1d1a      	adds	r2, r3, #4
 8002c4c:	6032      	str	r2, [r6, #0]
 8002c4e:	681e      	ldr	r6, [r3, #0]
 8002c50:	6862      	ldr	r2, [r4, #4]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4630      	mov	r0, r6
 8002c56:	f7fd fabb 	bl	80001d0 <memchr>
 8002c5a:	b108      	cbz	r0, 8002c60 <_printf_i+0x1e4>
 8002c5c:	1b80      	subs	r0, r0, r6
 8002c5e:	6060      	str	r0, [r4, #4]
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	6123      	str	r3, [r4, #16]
 8002c64:	2300      	movs	r3, #0
 8002c66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c6a:	e7aa      	b.n	8002bc2 <_printf_i+0x146>
 8002c6c:	6923      	ldr	r3, [r4, #16]
 8002c6e:	4632      	mov	r2, r6
 8002c70:	4649      	mov	r1, r9
 8002c72:	4640      	mov	r0, r8
 8002c74:	47d0      	blx	sl
 8002c76:	3001      	adds	r0, #1
 8002c78:	d0ad      	beq.n	8002bd6 <_printf_i+0x15a>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	079b      	lsls	r3, r3, #30
 8002c7e:	d413      	bmi.n	8002ca8 <_printf_i+0x22c>
 8002c80:	68e0      	ldr	r0, [r4, #12]
 8002c82:	9b03      	ldr	r3, [sp, #12]
 8002c84:	4298      	cmp	r0, r3
 8002c86:	bfb8      	it	lt
 8002c88:	4618      	movlt	r0, r3
 8002c8a:	e7a6      	b.n	8002bda <_printf_i+0x15e>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4632      	mov	r2, r6
 8002c90:	4649      	mov	r1, r9
 8002c92:	4640      	mov	r0, r8
 8002c94:	47d0      	blx	sl
 8002c96:	3001      	adds	r0, #1
 8002c98:	d09d      	beq.n	8002bd6 <_printf_i+0x15a>
 8002c9a:	3501      	adds	r5, #1
 8002c9c:	68e3      	ldr	r3, [r4, #12]
 8002c9e:	9903      	ldr	r1, [sp, #12]
 8002ca0:	1a5b      	subs	r3, r3, r1
 8002ca2:	42ab      	cmp	r3, r5
 8002ca4:	dcf2      	bgt.n	8002c8c <_printf_i+0x210>
 8002ca6:	e7eb      	b.n	8002c80 <_printf_i+0x204>
 8002ca8:	2500      	movs	r5, #0
 8002caa:	f104 0619 	add.w	r6, r4, #25
 8002cae:	e7f5      	b.n	8002c9c <_printf_i+0x220>
 8002cb0:	08005390 	.word	0x08005390
 8002cb4:	080053a1 	.word	0x080053a1

08002cb8 <std>:
 8002cb8:	2300      	movs	r3, #0
 8002cba:	b510      	push	{r4, lr}
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8002cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cc6:	6083      	str	r3, [r0, #8]
 8002cc8:	8181      	strh	r1, [r0, #12]
 8002cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ccc:	81c2      	strh	r2, [r0, #14]
 8002cce:	6183      	str	r3, [r0, #24]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	305c      	adds	r0, #92	@ 0x5c
 8002cd6:	f000 fad7 	bl	8003288 <memset>
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <std+0x58>)
 8002cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <std+0x5c>)
 8002ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <std+0x60>)
 8002ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <std+0x64>)
 8002ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cea:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <std+0x68>)
 8002cec:	6224      	str	r4, [r4, #32]
 8002cee:	429c      	cmp	r4, r3
 8002cf0:	d006      	beq.n	8002d00 <std+0x48>
 8002cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002cf6:	4294      	cmp	r4, r2
 8002cf8:	d002      	beq.n	8002d00 <std+0x48>
 8002cfa:	33d0      	adds	r3, #208	@ 0xd0
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	d105      	bne.n	8002d0c <std+0x54>
 8002d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d08:	f000 bb28 	b.w	800335c <__retarget_lock_init_recursive>
 8002d0c:	bd10      	pop	{r4, pc}
 8002d0e:	bf00      	nop
 8002d10:	080030d9 	.word	0x080030d9
 8002d14:	080030fb 	.word	0x080030fb
 8002d18:	08003133 	.word	0x08003133
 8002d1c:	08003157 	.word	0x08003157
 8002d20:	200002ec 	.word	0x200002ec

08002d24 <stdio_exit_handler>:
 8002d24:	4a02      	ldr	r2, [pc, #8]	@ (8002d30 <stdio_exit_handler+0xc>)
 8002d26:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <stdio_exit_handler+0x10>)
 8002d28:	4803      	ldr	r0, [pc, #12]	@ (8002d38 <stdio_exit_handler+0x14>)
 8002d2a:	f000 b869 	b.w	8002e00 <_fwalk_sglue>
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000
 8002d34:	08004f49 	.word	0x08004f49
 8002d38:	20000010 	.word	0x20000010

08002d3c <cleanup_stdio>:
 8002d3c:	6841      	ldr	r1, [r0, #4]
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d70 <cleanup_stdio+0x34>)
 8002d40:	4299      	cmp	r1, r3
 8002d42:	b510      	push	{r4, lr}
 8002d44:	4604      	mov	r4, r0
 8002d46:	d001      	beq.n	8002d4c <cleanup_stdio+0x10>
 8002d48:	f002 f8fe 	bl	8004f48 <_fflush_r>
 8002d4c:	68a1      	ldr	r1, [r4, #8]
 8002d4e:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <cleanup_stdio+0x38>)
 8002d50:	4299      	cmp	r1, r3
 8002d52:	d002      	beq.n	8002d5a <cleanup_stdio+0x1e>
 8002d54:	4620      	mov	r0, r4
 8002d56:	f002 f8f7 	bl	8004f48 <_fflush_r>
 8002d5a:	68e1      	ldr	r1, [r4, #12]
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <cleanup_stdio+0x3c>)
 8002d5e:	4299      	cmp	r1, r3
 8002d60:	d004      	beq.n	8002d6c <cleanup_stdio+0x30>
 8002d62:	4620      	mov	r0, r4
 8002d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d68:	f002 b8ee 	b.w	8004f48 <_fflush_r>
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	bf00      	nop
 8002d70:	200002ec 	.word	0x200002ec
 8002d74:	20000354 	.word	0x20000354
 8002d78:	200003bc 	.word	0x200003bc

08002d7c <global_stdio_init.part.0>:
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <global_stdio_init.part.0+0x30>)
 8002d80:	4c0b      	ldr	r4, [pc, #44]	@ (8002db0 <global_stdio_init.part.0+0x34>)
 8002d82:	4a0c      	ldr	r2, [pc, #48]	@ (8002db4 <global_stdio_init.part.0+0x38>)
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4620      	mov	r0, r4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	f7ff ff94 	bl	8002cb8 <std>
 8002d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d94:	2201      	movs	r2, #1
 8002d96:	2109      	movs	r1, #9
 8002d98:	f7ff ff8e 	bl	8002cb8 <std>
 8002d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002da0:	2202      	movs	r2, #2
 8002da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da6:	2112      	movs	r1, #18
 8002da8:	f7ff bf86 	b.w	8002cb8 <std>
 8002dac:	20000424 	.word	0x20000424
 8002db0:	200002ec 	.word	0x200002ec
 8002db4:	08002d25 	.word	0x08002d25

08002db8 <__sfp_lock_acquire>:
 8002db8:	4801      	ldr	r0, [pc, #4]	@ (8002dc0 <__sfp_lock_acquire+0x8>)
 8002dba:	f000 bad0 	b.w	800335e <__retarget_lock_acquire_recursive>
 8002dbe:	bf00      	nop
 8002dc0:	2000042d 	.word	0x2000042d

08002dc4 <__sfp_lock_release>:
 8002dc4:	4801      	ldr	r0, [pc, #4]	@ (8002dcc <__sfp_lock_release+0x8>)
 8002dc6:	f000 bacb 	b.w	8003360 <__retarget_lock_release_recursive>
 8002dca:	bf00      	nop
 8002dcc:	2000042d 	.word	0x2000042d

08002dd0 <__sinit>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	f7ff fff0 	bl	8002db8 <__sfp_lock_acquire>
 8002dd8:	6a23      	ldr	r3, [r4, #32]
 8002dda:	b11b      	cbz	r3, 8002de4 <__sinit+0x14>
 8002ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de0:	f7ff bff0 	b.w	8002dc4 <__sfp_lock_release>
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <__sinit+0x28>)
 8002de6:	6223      	str	r3, [r4, #32]
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__sinit+0x2c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f5      	bne.n	8002ddc <__sinit+0xc>
 8002df0:	f7ff ffc4 	bl	8002d7c <global_stdio_init.part.0>
 8002df4:	e7f2      	b.n	8002ddc <__sinit+0xc>
 8002df6:	bf00      	nop
 8002df8:	08002d3d 	.word	0x08002d3d
 8002dfc:	20000424 	.word	0x20000424

08002e00 <_fwalk_sglue>:
 8002e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e04:	4607      	mov	r7, r0
 8002e06:	4688      	mov	r8, r1
 8002e08:	4614      	mov	r4, r2
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e10:	f1b9 0901 	subs.w	r9, r9, #1
 8002e14:	d505      	bpl.n	8002e22 <_fwalk_sglue+0x22>
 8002e16:	6824      	ldr	r4, [r4, #0]
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d1f7      	bne.n	8002e0c <_fwalk_sglue+0xc>
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e22:	89ab      	ldrh	r3, [r5, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d907      	bls.n	8002e38 <_fwalk_sglue+0x38>
 8002e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	d003      	beq.n	8002e38 <_fwalk_sglue+0x38>
 8002e30:	4629      	mov	r1, r5
 8002e32:	4638      	mov	r0, r7
 8002e34:	47c0      	blx	r8
 8002e36:	4306      	orrs	r6, r0
 8002e38:	3568      	adds	r5, #104	@ 0x68
 8002e3a:	e7e9      	b.n	8002e10 <_fwalk_sglue+0x10>

08002e3c <iprintf>:
 8002e3c:	b40f      	push	{r0, r1, r2, r3}
 8002e3e:	b507      	push	{r0, r1, r2, lr}
 8002e40:	4906      	ldr	r1, [pc, #24]	@ (8002e5c <iprintf+0x20>)
 8002e42:	ab04      	add	r3, sp, #16
 8002e44:	6808      	ldr	r0, [r1, #0]
 8002e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e4a:	6881      	ldr	r1, [r0, #8]
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	f001 fedf 	bl	8004c10 <_vfiprintf_r>
 8002e52:	b003      	add	sp, #12
 8002e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e58:	b004      	add	sp, #16
 8002e5a:	4770      	bx	lr
 8002e5c:	2000000c 	.word	0x2000000c

08002e60 <_puts_r>:
 8002e60:	6a03      	ldr	r3, [r0, #32]
 8002e62:	b570      	push	{r4, r5, r6, lr}
 8002e64:	6884      	ldr	r4, [r0, #8]
 8002e66:	4605      	mov	r5, r0
 8002e68:	460e      	mov	r6, r1
 8002e6a:	b90b      	cbnz	r3, 8002e70 <_puts_r+0x10>
 8002e6c:	f7ff ffb0 	bl	8002dd0 <__sinit>
 8002e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e72:	07db      	lsls	r3, r3, #31
 8002e74:	d405      	bmi.n	8002e82 <_puts_r+0x22>
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	0598      	lsls	r0, r3, #22
 8002e7a:	d402      	bmi.n	8002e82 <_puts_r+0x22>
 8002e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e7e:	f000 fa6e 	bl	800335e <__retarget_lock_acquire_recursive>
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	0719      	lsls	r1, r3, #28
 8002e86:	d502      	bpl.n	8002e8e <_puts_r+0x2e>
 8002e88:	6923      	ldr	r3, [r4, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d135      	bne.n	8002efa <_puts_r+0x9a>
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f000 f9a3 	bl	80031dc <__swsetup_r>
 8002e96:	b380      	cbz	r0, 8002efa <_puts_r+0x9a>
 8002e98:	f04f 35ff 	mov.w	r5, #4294967295
 8002e9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e9e:	07da      	lsls	r2, r3, #31
 8002ea0:	d405      	bmi.n	8002eae <_puts_r+0x4e>
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	059b      	lsls	r3, r3, #22
 8002ea6:	d402      	bmi.n	8002eae <_puts_r+0x4e>
 8002ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eaa:	f000 fa59 	bl	8003360 <__retarget_lock_release_recursive>
 8002eae:	4628      	mov	r0, r5
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da04      	bge.n	8002ec0 <_puts_r+0x60>
 8002eb6:	69a2      	ldr	r2, [r4, #24]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	dc17      	bgt.n	8002eec <_puts_r+0x8c>
 8002ebc:	290a      	cmp	r1, #10
 8002ebe:	d015      	beq.n	8002eec <_puts_r+0x8c>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	6022      	str	r2, [r4, #0]
 8002ec6:	7019      	strb	r1, [r3, #0]
 8002ec8:	68a3      	ldr	r3, [r4, #8]
 8002eca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60a3      	str	r3, [r4, #8]
 8002ed2:	2900      	cmp	r1, #0
 8002ed4:	d1ed      	bne.n	8002eb2 <_puts_r+0x52>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da11      	bge.n	8002efe <_puts_r+0x9e>
 8002eda:	4622      	mov	r2, r4
 8002edc:	210a      	movs	r1, #10
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 f93d 	bl	800315e <__swbuf_r>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d0d7      	beq.n	8002e98 <_puts_r+0x38>
 8002ee8:	250a      	movs	r5, #10
 8002eea:	e7d7      	b.n	8002e9c <_puts_r+0x3c>
 8002eec:	4622      	mov	r2, r4
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f000 f935 	bl	800315e <__swbuf_r>
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d1e7      	bne.n	8002ec8 <_puts_r+0x68>
 8002ef8:	e7ce      	b.n	8002e98 <_puts_r+0x38>
 8002efa:	3e01      	subs	r6, #1
 8002efc:	e7e4      	b.n	8002ec8 <_puts_r+0x68>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	6022      	str	r2, [r4, #0]
 8002f04:	220a      	movs	r2, #10
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e7ee      	b.n	8002ee8 <_puts_r+0x88>
	...

08002f0c <puts>:
 8002f0c:	4b02      	ldr	r3, [pc, #8]	@ (8002f18 <puts+0xc>)
 8002f0e:	4601      	mov	r1, r0
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f7ff bfa5 	b.w	8002e60 <_puts_r>
 8002f16:	bf00      	nop
 8002f18:	2000000c 	.word	0x2000000c

08002f1c <setbuf>:
 8002f1c:	fab1 f281 	clz	r2, r1
 8002f20:	0952      	lsrs	r2, r2, #5
 8002f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	f000 b800 	b.w	8002f2c <setvbuf>

08002f2c <setvbuf>:
 8002f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f30:	461d      	mov	r5, r3
 8002f32:	4b57      	ldr	r3, [pc, #348]	@ (8003090 <setvbuf+0x164>)
 8002f34:	681f      	ldr	r7, [r3, #0]
 8002f36:	4604      	mov	r4, r0
 8002f38:	460e      	mov	r6, r1
 8002f3a:	4690      	mov	r8, r2
 8002f3c:	b127      	cbz	r7, 8002f48 <setvbuf+0x1c>
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	b913      	cbnz	r3, 8002f48 <setvbuf+0x1c>
 8002f42:	4638      	mov	r0, r7
 8002f44:	f7ff ff44 	bl	8002dd0 <__sinit>
 8002f48:	f1b8 0f02 	cmp.w	r8, #2
 8002f4c:	d006      	beq.n	8002f5c <setvbuf+0x30>
 8002f4e:	f1b8 0f01 	cmp.w	r8, #1
 8002f52:	f200 809a 	bhi.w	800308a <setvbuf+0x15e>
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	f2c0 8097 	blt.w	800308a <setvbuf+0x15e>
 8002f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f5e:	07d9      	lsls	r1, r3, #31
 8002f60:	d405      	bmi.n	8002f6e <setvbuf+0x42>
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	059a      	lsls	r2, r3, #22
 8002f66:	d402      	bmi.n	8002f6e <setvbuf+0x42>
 8002f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f6a:	f000 f9f8 	bl	800335e <__retarget_lock_acquire_recursive>
 8002f6e:	4621      	mov	r1, r4
 8002f70:	4638      	mov	r0, r7
 8002f72:	f001 ffe9 	bl	8004f48 <_fflush_r>
 8002f76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f78:	b141      	cbz	r1, 8002f8c <setvbuf+0x60>
 8002f7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f7e:	4299      	cmp	r1, r3
 8002f80:	d002      	beq.n	8002f88 <setvbuf+0x5c>
 8002f82:	4638      	mov	r0, r7
 8002f84:	f001 f848 	bl	8004018 <_free_r>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61a3      	str	r3, [r4, #24]
 8002f90:	6063      	str	r3, [r4, #4]
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	d503      	bpl.n	8002fa0 <setvbuf+0x74>
 8002f98:	6921      	ldr	r1, [r4, #16]
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	f001 f83c 	bl	8004018 <_free_r>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	f1b8 0f02 	cmp.w	r8, #2
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	d061      	beq.n	8003076 <setvbuf+0x14a>
 8002fb2:	ab01      	add	r3, sp, #4
 8002fb4:	466a      	mov	r2, sp
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4638      	mov	r0, r7
 8002fba:	f001 ffed 	bl	8004f98 <__swhatbuf_r>
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	4318      	orrs	r0, r3
 8002fc2:	81a0      	strh	r0, [r4, #12]
 8002fc4:	bb2d      	cbnz	r5, 8003012 <setvbuf+0xe6>
 8002fc6:	9d00      	ldr	r5, [sp, #0]
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f001 f86f 	bl	80040ac <malloc>
 8002fce:	4606      	mov	r6, r0
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d152      	bne.n	800307a <setvbuf+0x14e>
 8002fd4:	f8dd 9000 	ldr.w	r9, [sp]
 8002fd8:	45a9      	cmp	r9, r5
 8002fda:	d140      	bne.n	800305e <setvbuf+0x132>
 8002fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8002fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe4:	f043 0202 	orr.w	r2, r3, #2
 8002fe8:	81a2      	strh	r2, [r4, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	60a2      	str	r2, [r4, #8]
 8002fee:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002ff2:	6022      	str	r2, [r4, #0]
 8002ff4:	6122      	str	r2, [r4, #16]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	6162      	str	r2, [r4, #20]
 8002ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ffc:	07d6      	lsls	r6, r2, #31
 8002ffe:	d404      	bmi.n	800300a <setvbuf+0xde>
 8003000:	0598      	lsls	r0, r3, #22
 8003002:	d402      	bmi.n	800300a <setvbuf+0xde>
 8003004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003006:	f000 f9ab 	bl	8003360 <__retarget_lock_release_recursive>
 800300a:	4628      	mov	r0, r5
 800300c:	b003      	add	sp, #12
 800300e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003012:	2e00      	cmp	r6, #0
 8003014:	d0d8      	beq.n	8002fc8 <setvbuf+0x9c>
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	b913      	cbnz	r3, 8003020 <setvbuf+0xf4>
 800301a:	4638      	mov	r0, r7
 800301c:	f7ff fed8 	bl	8002dd0 <__sinit>
 8003020:	f1b8 0f01 	cmp.w	r8, #1
 8003024:	bf08      	it	eq
 8003026:	89a3      	ldrheq	r3, [r4, #12]
 8003028:	6026      	str	r6, [r4, #0]
 800302a:	bf04      	itt	eq
 800302c:	f043 0301 	orreq.w	r3, r3, #1
 8003030:	81a3      	strheq	r3, [r4, #12]
 8003032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003036:	f013 0208 	ands.w	r2, r3, #8
 800303a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800303e:	d01e      	beq.n	800307e <setvbuf+0x152>
 8003040:	07d9      	lsls	r1, r3, #31
 8003042:	bf41      	itttt	mi
 8003044:	2200      	movmi	r2, #0
 8003046:	426d      	negmi	r5, r5
 8003048:	60a2      	strmi	r2, [r4, #8]
 800304a:	61a5      	strmi	r5, [r4, #24]
 800304c:	bf58      	it	pl
 800304e:	60a5      	strpl	r5, [r4, #8]
 8003050:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003052:	07d2      	lsls	r2, r2, #31
 8003054:	d401      	bmi.n	800305a <setvbuf+0x12e>
 8003056:	059b      	lsls	r3, r3, #22
 8003058:	d513      	bpl.n	8003082 <setvbuf+0x156>
 800305a:	2500      	movs	r5, #0
 800305c:	e7d5      	b.n	800300a <setvbuf+0xde>
 800305e:	4648      	mov	r0, r9
 8003060:	f001 f824 	bl	80040ac <malloc>
 8003064:	4606      	mov	r6, r0
 8003066:	2800      	cmp	r0, #0
 8003068:	d0b8      	beq.n	8002fdc <setvbuf+0xb0>
 800306a:	89a3      	ldrh	r3, [r4, #12]
 800306c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003070:	81a3      	strh	r3, [r4, #12]
 8003072:	464d      	mov	r5, r9
 8003074:	e7cf      	b.n	8003016 <setvbuf+0xea>
 8003076:	2500      	movs	r5, #0
 8003078:	e7b2      	b.n	8002fe0 <setvbuf+0xb4>
 800307a:	46a9      	mov	r9, r5
 800307c:	e7f5      	b.n	800306a <setvbuf+0x13e>
 800307e:	60a2      	str	r2, [r4, #8]
 8003080:	e7e6      	b.n	8003050 <setvbuf+0x124>
 8003082:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003084:	f000 f96c 	bl	8003360 <__retarget_lock_release_recursive>
 8003088:	e7e7      	b.n	800305a <setvbuf+0x12e>
 800308a:	f04f 35ff 	mov.w	r5, #4294967295
 800308e:	e7bc      	b.n	800300a <setvbuf+0xde>
 8003090:	2000000c 	.word	0x2000000c

08003094 <siprintf>:
 8003094:	b40e      	push	{r1, r2, r3}
 8003096:	b510      	push	{r4, lr}
 8003098:	b09d      	sub	sp, #116	@ 0x74
 800309a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800309c:	9002      	str	r0, [sp, #8]
 800309e:	9006      	str	r0, [sp, #24]
 80030a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80030a4:	480a      	ldr	r0, [pc, #40]	@ (80030d0 <siprintf+0x3c>)
 80030a6:	9107      	str	r1, [sp, #28]
 80030a8:	9104      	str	r1, [sp, #16]
 80030aa:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <siprintf+0x40>)
 80030ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80030b0:	9105      	str	r1, [sp, #20]
 80030b2:	2400      	movs	r4, #0
 80030b4:	a902      	add	r1, sp, #8
 80030b6:	6800      	ldr	r0, [r0, #0]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80030bc:	f001 fc82 	bl	80049c4 <_svfiprintf_r>
 80030c0:	9b02      	ldr	r3, [sp, #8]
 80030c2:	701c      	strb	r4, [r3, #0]
 80030c4:	b01d      	add	sp, #116	@ 0x74
 80030c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ca:	b003      	add	sp, #12
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	ffff0208 	.word	0xffff0208

080030d8 <__sread>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	460c      	mov	r4, r1
 80030dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e0:	f000 f900 	bl	80032e4 <_read_r>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	bfab      	itete	ge
 80030e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030ea:	89a3      	ldrhlt	r3, [r4, #12]
 80030ec:	181b      	addge	r3, r3, r0
 80030ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030f2:	bfac      	ite	ge
 80030f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030f6:	81a3      	strhlt	r3, [r4, #12]
 80030f8:	bd10      	pop	{r4, pc}

080030fa <__swrite>:
 80030fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fe:	461f      	mov	r7, r3
 8003100:	898b      	ldrh	r3, [r1, #12]
 8003102:	05db      	lsls	r3, r3, #23
 8003104:	4605      	mov	r5, r0
 8003106:	460c      	mov	r4, r1
 8003108:	4616      	mov	r6, r2
 800310a:	d505      	bpl.n	8003118 <__swrite+0x1e>
 800310c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003110:	2302      	movs	r3, #2
 8003112:	2200      	movs	r2, #0
 8003114:	f000 f8d4 	bl	80032c0 <_lseek_r>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800311e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	4632      	mov	r2, r6
 8003126:	463b      	mov	r3, r7
 8003128:	4628      	mov	r0, r5
 800312a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800312e:	f7fe bb89 	b.w	8001844 <_write_r>

08003132 <__sseek>:
 8003132:	b510      	push	{r4, lr}
 8003134:	460c      	mov	r4, r1
 8003136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800313a:	f000 f8c1 	bl	80032c0 <_lseek_r>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	bf15      	itete	ne
 8003144:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003146:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800314a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800314e:	81a3      	strheq	r3, [r4, #12]
 8003150:	bf18      	it	ne
 8003152:	81a3      	strhne	r3, [r4, #12]
 8003154:	bd10      	pop	{r4, pc}

08003156 <__sclose>:
 8003156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315a:	f000 b8a1 	b.w	80032a0 <_close_r>

0800315e <__swbuf_r>:
 800315e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003160:	460e      	mov	r6, r1
 8003162:	4614      	mov	r4, r2
 8003164:	4605      	mov	r5, r0
 8003166:	b118      	cbz	r0, 8003170 <__swbuf_r+0x12>
 8003168:	6a03      	ldr	r3, [r0, #32]
 800316a:	b90b      	cbnz	r3, 8003170 <__swbuf_r+0x12>
 800316c:	f7ff fe30 	bl	8002dd0 <__sinit>
 8003170:	69a3      	ldr	r3, [r4, #24]
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	071a      	lsls	r2, r3, #28
 8003178:	d501      	bpl.n	800317e <__swbuf_r+0x20>
 800317a:	6923      	ldr	r3, [r4, #16]
 800317c:	b943      	cbnz	r3, 8003190 <__swbuf_r+0x32>
 800317e:	4621      	mov	r1, r4
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f82b 	bl	80031dc <__swsetup_r>
 8003186:	b118      	cbz	r0, 8003190 <__swbuf_r+0x32>
 8003188:	f04f 37ff 	mov.w	r7, #4294967295
 800318c:	4638      	mov	r0, r7
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	6922      	ldr	r2, [r4, #16]
 8003194:	1a98      	subs	r0, r3, r2
 8003196:	6963      	ldr	r3, [r4, #20]
 8003198:	b2f6      	uxtb	r6, r6
 800319a:	4283      	cmp	r3, r0
 800319c:	4637      	mov	r7, r6
 800319e:	dc05      	bgt.n	80031ac <__swbuf_r+0x4e>
 80031a0:	4621      	mov	r1, r4
 80031a2:	4628      	mov	r0, r5
 80031a4:	f001 fed0 	bl	8004f48 <_fflush_r>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d1ed      	bne.n	8003188 <__swbuf_r+0x2a>
 80031ac:	68a3      	ldr	r3, [r4, #8]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	6022      	str	r2, [r4, #0]
 80031b8:	701e      	strb	r6, [r3, #0]
 80031ba:	6962      	ldr	r2, [r4, #20]
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	429a      	cmp	r2, r3
 80031c0:	d004      	beq.n	80031cc <__swbuf_r+0x6e>
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	07db      	lsls	r3, r3, #31
 80031c6:	d5e1      	bpl.n	800318c <__swbuf_r+0x2e>
 80031c8:	2e0a      	cmp	r6, #10
 80031ca:	d1df      	bne.n	800318c <__swbuf_r+0x2e>
 80031cc:	4621      	mov	r1, r4
 80031ce:	4628      	mov	r0, r5
 80031d0:	f001 feba 	bl	8004f48 <_fflush_r>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d0d9      	beq.n	800318c <__swbuf_r+0x2e>
 80031d8:	e7d6      	b.n	8003188 <__swbuf_r+0x2a>
	...

080031dc <__swsetup_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4b29      	ldr	r3, [pc, #164]	@ (8003284 <__swsetup_r+0xa8>)
 80031e0:	4605      	mov	r5, r0
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	460c      	mov	r4, r1
 80031e6:	b118      	cbz	r0, 80031f0 <__swsetup_r+0x14>
 80031e8:	6a03      	ldr	r3, [r0, #32]
 80031ea:	b90b      	cbnz	r3, 80031f0 <__swsetup_r+0x14>
 80031ec:	f7ff fdf0 	bl	8002dd0 <__sinit>
 80031f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f4:	0719      	lsls	r1, r3, #28
 80031f6:	d422      	bmi.n	800323e <__swsetup_r+0x62>
 80031f8:	06da      	lsls	r2, r3, #27
 80031fa:	d407      	bmi.n	800320c <__swsetup_r+0x30>
 80031fc:	2209      	movs	r2, #9
 80031fe:	602a      	str	r2, [r5, #0]
 8003200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003204:	81a3      	strh	r3, [r4, #12]
 8003206:	f04f 30ff 	mov.w	r0, #4294967295
 800320a:	e033      	b.n	8003274 <__swsetup_r+0x98>
 800320c:	0758      	lsls	r0, r3, #29
 800320e:	d512      	bpl.n	8003236 <__swsetup_r+0x5a>
 8003210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003212:	b141      	cbz	r1, 8003226 <__swsetup_r+0x4a>
 8003214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003218:	4299      	cmp	r1, r3
 800321a:	d002      	beq.n	8003222 <__swsetup_r+0x46>
 800321c:	4628      	mov	r0, r5
 800321e:	f000 fefb 	bl	8004018 <_free_r>
 8003222:	2300      	movs	r3, #0
 8003224:	6363      	str	r3, [r4, #52]	@ 0x34
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	2300      	movs	r3, #0
 8003230:	6063      	str	r3, [r4, #4]
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	6923      	ldr	r3, [r4, #16]
 8003240:	b94b      	cbnz	r3, 8003256 <__swsetup_r+0x7a>
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800324c:	d003      	beq.n	8003256 <__swsetup_r+0x7a>
 800324e:	4621      	mov	r1, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f001 fec7 	bl	8004fe4 <__smakebuf_r>
 8003256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800325a:	f013 0201 	ands.w	r2, r3, #1
 800325e:	d00a      	beq.n	8003276 <__swsetup_r+0x9a>
 8003260:	2200      	movs	r2, #0
 8003262:	60a2      	str	r2, [r4, #8]
 8003264:	6962      	ldr	r2, [r4, #20]
 8003266:	4252      	negs	r2, r2
 8003268:	61a2      	str	r2, [r4, #24]
 800326a:	6922      	ldr	r2, [r4, #16]
 800326c:	b942      	cbnz	r2, 8003280 <__swsetup_r+0xa4>
 800326e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003272:	d1c5      	bne.n	8003200 <__swsetup_r+0x24>
 8003274:	bd38      	pop	{r3, r4, r5, pc}
 8003276:	0799      	lsls	r1, r3, #30
 8003278:	bf58      	it	pl
 800327a:	6962      	ldrpl	r2, [r4, #20]
 800327c:	60a2      	str	r2, [r4, #8]
 800327e:	e7f4      	b.n	800326a <__swsetup_r+0x8e>
 8003280:	2000      	movs	r0, #0
 8003282:	e7f7      	b.n	8003274 <__swsetup_r+0x98>
 8003284:	2000000c 	.word	0x2000000c

08003288 <memset>:
 8003288:	4402      	add	r2, r0
 800328a:	4603      	mov	r3, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <_localeconv_r>:
 8003298:	4800      	ldr	r0, [pc, #0]	@ (800329c <_localeconv_r+0x4>)
 800329a:	4770      	bx	lr
 800329c:	2000014c 	.word	0x2000014c

080032a0 <_close_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4d06      	ldr	r5, [pc, #24]	@ (80032bc <_close_r+0x1c>)
 80032a4:	2300      	movs	r3, #0
 80032a6:	4604      	mov	r4, r0
 80032a8:	4608      	mov	r0, r1
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	f7fe fef6 	bl	800209c <_close>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_close_r+0x1a>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_close_r+0x1a>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	20000428 	.word	0x20000428

080032c0 <_lseek_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4d07      	ldr	r5, [pc, #28]	@ (80032e0 <_lseek_r+0x20>)
 80032c4:	4604      	mov	r4, r0
 80032c6:	4608      	mov	r0, r1
 80032c8:	4611      	mov	r1, r2
 80032ca:	2200      	movs	r2, #0
 80032cc:	602a      	str	r2, [r5, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7fe ff0b 	bl	80020ea <_lseek>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_lseek_r+0x1e>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_lseek_r+0x1e>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	20000428 	.word	0x20000428

080032e4 <_read_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4d07      	ldr	r5, [pc, #28]	@ (8003304 <_read_r+0x20>)
 80032e8:	4604      	mov	r4, r0
 80032ea:	4608      	mov	r0, r1
 80032ec:	4611      	mov	r1, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	602a      	str	r2, [r5, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f7fe feb5 	bl	8002062 <_read>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_read_r+0x1e>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_read_r+0x1e>
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	20000428 	.word	0x20000428

08003308 <__errno>:
 8003308:	4b01      	ldr	r3, [pc, #4]	@ (8003310 <__errno+0x8>)
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000000c 	.word	0x2000000c

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4d0d      	ldr	r5, [pc, #52]	@ (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	@ (8003350 <__libc_init_array+0x3c>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2600      	movs	r6, #0
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4d0b      	ldr	r5, [pc, #44]	@ (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	@ (8003358 <__libc_init_array+0x44>)
 8003328:	f001 ffe6 	bl	80052f8 <_init>
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2600      	movs	r6, #0
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	080056fc 	.word	0x080056fc
 8003350:	080056fc 	.word	0x080056fc
 8003354:	080056fc 	.word	0x080056fc
 8003358:	08005700 	.word	0x08005700

0800335c <__retarget_lock_init_recursive>:
 800335c:	4770      	bx	lr

0800335e <__retarget_lock_acquire_recursive>:
 800335e:	4770      	bx	lr

08003360 <__retarget_lock_release_recursive>:
 8003360:	4770      	bx	lr

08003362 <quorem>:
 8003362:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003366:	6903      	ldr	r3, [r0, #16]
 8003368:	690c      	ldr	r4, [r1, #16]
 800336a:	42a3      	cmp	r3, r4
 800336c:	4607      	mov	r7, r0
 800336e:	db7e      	blt.n	800346e <quorem+0x10c>
 8003370:	3c01      	subs	r4, #1
 8003372:	f101 0814 	add.w	r8, r1, #20
 8003376:	00a3      	lsls	r3, r4, #2
 8003378:	f100 0514 	add.w	r5, r0, #20
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800338c:	3301      	adds	r3, #1
 800338e:	429a      	cmp	r2, r3
 8003390:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003394:	fbb2 f6f3 	udiv	r6, r2, r3
 8003398:	d32e      	bcc.n	80033f8 <quorem+0x96>
 800339a:	f04f 0a00 	mov.w	sl, #0
 800339e:	46c4      	mov	ip, r8
 80033a0:	46ae      	mov	lr, r5
 80033a2:	46d3      	mov	fp, sl
 80033a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80033a8:	b298      	uxth	r0, r3
 80033aa:	fb06 a000 	mla	r0, r6, r0, sl
 80033ae:	0c02      	lsrs	r2, r0, #16
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	fb06 2303 	mla	r3, r6, r3, r2
 80033b6:	f8de 2000 	ldr.w	r2, [lr]
 80033ba:	b280      	uxth	r0, r0
 80033bc:	b292      	uxth	r2, r2
 80033be:	1a12      	subs	r2, r2, r0
 80033c0:	445a      	add	r2, fp
 80033c2:	f8de 0000 	ldr.w	r0, [lr]
 80033c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80033d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80033d4:	b292      	uxth	r2, r2
 80033d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80033da:	45e1      	cmp	r9, ip
 80033dc:	f84e 2b04 	str.w	r2, [lr], #4
 80033e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80033e4:	d2de      	bcs.n	80033a4 <quorem+0x42>
 80033e6:	9b00      	ldr	r3, [sp, #0]
 80033e8:	58eb      	ldr	r3, [r5, r3]
 80033ea:	b92b      	cbnz	r3, 80033f8 <quorem+0x96>
 80033ec:	9b01      	ldr	r3, [sp, #4]
 80033ee:	3b04      	subs	r3, #4
 80033f0:	429d      	cmp	r5, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	d32f      	bcc.n	8003456 <quorem+0xf4>
 80033f6:	613c      	str	r4, [r7, #16]
 80033f8:	4638      	mov	r0, r7
 80033fa:	f001 f97f 	bl	80046fc <__mcmp>
 80033fe:	2800      	cmp	r0, #0
 8003400:	db25      	blt.n	800344e <quorem+0xec>
 8003402:	4629      	mov	r1, r5
 8003404:	2000      	movs	r0, #0
 8003406:	f858 2b04 	ldr.w	r2, [r8], #4
 800340a:	f8d1 c000 	ldr.w	ip, [r1]
 800340e:	fa1f fe82 	uxth.w	lr, r2
 8003412:	fa1f f38c 	uxth.w	r3, ip
 8003416:	eba3 030e 	sub.w	r3, r3, lr
 800341a:	4403      	add	r3, r0
 800341c:	0c12      	lsrs	r2, r2, #16
 800341e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003422:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003426:	b29b      	uxth	r3, r3
 8003428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800342c:	45c1      	cmp	r9, r8
 800342e:	f841 3b04 	str.w	r3, [r1], #4
 8003432:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003436:	d2e6      	bcs.n	8003406 <quorem+0xa4>
 8003438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800343c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003440:	b922      	cbnz	r2, 800344c <quorem+0xea>
 8003442:	3b04      	subs	r3, #4
 8003444:	429d      	cmp	r5, r3
 8003446:	461a      	mov	r2, r3
 8003448:	d30b      	bcc.n	8003462 <quorem+0x100>
 800344a:	613c      	str	r4, [r7, #16]
 800344c:	3601      	adds	r6, #1
 800344e:	4630      	mov	r0, r6
 8003450:	b003      	add	sp, #12
 8003452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	3b04      	subs	r3, #4
 800345a:	2a00      	cmp	r2, #0
 800345c:	d1cb      	bne.n	80033f6 <quorem+0x94>
 800345e:	3c01      	subs	r4, #1
 8003460:	e7c6      	b.n	80033f0 <quorem+0x8e>
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	3b04      	subs	r3, #4
 8003466:	2a00      	cmp	r2, #0
 8003468:	d1ef      	bne.n	800344a <quorem+0xe8>
 800346a:	3c01      	subs	r4, #1
 800346c:	e7ea      	b.n	8003444 <quorem+0xe2>
 800346e:	2000      	movs	r0, #0
 8003470:	e7ee      	b.n	8003450 <quorem+0xee>
 8003472:	0000      	movs	r0, r0
 8003474:	0000      	movs	r0, r0
	...

08003478 <_dtoa_r>:
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	69c7      	ldr	r7, [r0, #28]
 800347e:	b097      	sub	sp, #92	@ 0x5c
 8003480:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003484:	ec55 4b10 	vmov	r4, r5, d0
 8003488:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800348a:	9107      	str	r1, [sp, #28]
 800348c:	4681      	mov	r9, r0
 800348e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003490:	9311      	str	r3, [sp, #68]	@ 0x44
 8003492:	b97f      	cbnz	r7, 80034b4 <_dtoa_r+0x3c>
 8003494:	2010      	movs	r0, #16
 8003496:	f000 fe09 	bl	80040ac <malloc>
 800349a:	4602      	mov	r2, r0
 800349c:	f8c9 001c 	str.w	r0, [r9, #28]
 80034a0:	b920      	cbnz	r0, 80034ac <_dtoa_r+0x34>
 80034a2:	4ba9      	ldr	r3, [pc, #676]	@ (8003748 <_dtoa_r+0x2d0>)
 80034a4:	21ef      	movs	r1, #239	@ 0xef
 80034a6:	48a9      	ldr	r0, [pc, #676]	@ (800374c <_dtoa_r+0x2d4>)
 80034a8:	f001 fe32 	bl	8005110 <__assert_func>
 80034ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80034b0:	6007      	str	r7, [r0, #0]
 80034b2:	60c7      	str	r7, [r0, #12]
 80034b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	b159      	cbz	r1, 80034d4 <_dtoa_r+0x5c>
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	604a      	str	r2, [r1, #4]
 80034c0:	2301      	movs	r3, #1
 80034c2:	4093      	lsls	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
 80034c6:	4648      	mov	r0, r9
 80034c8:	f000 fee6 	bl	8004298 <_Bfree>
 80034cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	1e2b      	subs	r3, r5, #0
 80034d6:	bfb9      	ittee	lt
 80034d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80034dc:	9305      	strlt	r3, [sp, #20]
 80034de:	2300      	movge	r3, #0
 80034e0:	6033      	strge	r3, [r6, #0]
 80034e2:	9f05      	ldr	r7, [sp, #20]
 80034e4:	4b9a      	ldr	r3, [pc, #616]	@ (8003750 <_dtoa_r+0x2d8>)
 80034e6:	bfbc      	itt	lt
 80034e8:	2201      	movlt	r2, #1
 80034ea:	6032      	strlt	r2, [r6, #0]
 80034ec:	43bb      	bics	r3, r7
 80034ee:	d112      	bne.n	8003516 <_dtoa_r+0x9e>
 80034f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80034f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80034fc:	4323      	orrs	r3, r4
 80034fe:	f000 855a 	beq.w	8003fb6 <_dtoa_r+0xb3e>
 8003502:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003504:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003764 <_dtoa_r+0x2ec>
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 855c 	beq.w	8003fc6 <_dtoa_r+0xb4e>
 800350e:	f10a 0303 	add.w	r3, sl, #3
 8003512:	f000 bd56 	b.w	8003fc2 <_dtoa_r+0xb4a>
 8003516:	ed9d 7b04 	vldr	d7, [sp, #16]
 800351a:	2200      	movs	r2, #0
 800351c:	ec51 0b17 	vmov	r0, r1, d7
 8003520:	2300      	movs	r3, #0
 8003522:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003526:	f7fd facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800352a:	4680      	mov	r8, r0
 800352c:	b158      	cbz	r0, 8003546 <_dtoa_r+0xce>
 800352e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003530:	2301      	movs	r3, #1
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003536:	b113      	cbz	r3, 800353e <_dtoa_r+0xc6>
 8003538:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800353a:	4b86      	ldr	r3, [pc, #536]	@ (8003754 <_dtoa_r+0x2dc>)
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003768 <_dtoa_r+0x2f0>
 8003542:	f000 bd40 	b.w	8003fc6 <_dtoa_r+0xb4e>
 8003546:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800354a:	aa14      	add	r2, sp, #80	@ 0x50
 800354c:	a915      	add	r1, sp, #84	@ 0x54
 800354e:	4648      	mov	r0, r9
 8003550:	f001 f984 	bl	800485c <__d2b>
 8003554:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003558:	9002      	str	r0, [sp, #8]
 800355a:	2e00      	cmp	r6, #0
 800355c:	d078      	beq.n	8003650 <_dtoa_r+0x1d8>
 800355e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003560:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003568:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800356c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003570:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003574:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003578:	4619      	mov	r1, r3
 800357a:	2200      	movs	r2, #0
 800357c:	4b76      	ldr	r3, [pc, #472]	@ (8003758 <_dtoa_r+0x2e0>)
 800357e:	f7fc fe83 	bl	8000288 <__aeabi_dsub>
 8003582:	a36b      	add	r3, pc, #428	@ (adr r3, 8003730 <_dtoa_r+0x2b8>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fd f836 	bl	80005f8 <__aeabi_dmul>
 800358c:	a36a      	add	r3, pc, #424	@ (adr r3, 8003738 <_dtoa_r+0x2c0>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fc fe7b 	bl	800028c <__adddf3>
 8003596:	4604      	mov	r4, r0
 8003598:	4630      	mov	r0, r6
 800359a:	460d      	mov	r5, r1
 800359c:	f7fc ffc2 	bl	8000524 <__aeabi_i2d>
 80035a0:	a367      	add	r3, pc, #412	@ (adr r3, 8003740 <_dtoa_r+0x2c8>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fd f827 	bl	80005f8 <__aeabi_dmul>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f7fc fe6b 	bl	800028c <__adddf3>
 80035b6:	4604      	mov	r4, r0
 80035b8:	460d      	mov	r5, r1
 80035ba:	f7fd facd 	bl	8000b58 <__aeabi_d2iz>
 80035be:	2200      	movs	r2, #0
 80035c0:	4607      	mov	r7, r0
 80035c2:	2300      	movs	r3, #0
 80035c4:	4620      	mov	r0, r4
 80035c6:	4629      	mov	r1, r5
 80035c8:	f7fd fa88 	bl	8000adc <__aeabi_dcmplt>
 80035cc:	b140      	cbz	r0, 80035e0 <_dtoa_r+0x168>
 80035ce:	4638      	mov	r0, r7
 80035d0:	f7fc ffa8 	bl	8000524 <__aeabi_i2d>
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
 80035d8:	f7fd fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80035dc:	b900      	cbnz	r0, 80035e0 <_dtoa_r+0x168>
 80035de:	3f01      	subs	r7, #1
 80035e0:	2f16      	cmp	r7, #22
 80035e2:	d852      	bhi.n	800368a <_dtoa_r+0x212>
 80035e4:	4b5d      	ldr	r3, [pc, #372]	@ (800375c <_dtoa_r+0x2e4>)
 80035e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80035f2:	f7fd fa73 	bl	8000adc <__aeabi_dcmplt>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d049      	beq.n	800368e <_dtoa_r+0x216>
 80035fa:	3f01      	subs	r7, #1
 80035fc:	2300      	movs	r3, #0
 80035fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8003600:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003602:	1b9b      	subs	r3, r3, r6
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	bf45      	ittet	mi
 8003608:	f1c3 0301 	rsbmi	r3, r3, #1
 800360c:	9300      	strmi	r3, [sp, #0]
 800360e:	2300      	movpl	r3, #0
 8003610:	2300      	movmi	r3, #0
 8003612:	9206      	str	r2, [sp, #24]
 8003614:	bf54      	ite	pl
 8003616:	9300      	strpl	r3, [sp, #0]
 8003618:	9306      	strmi	r3, [sp, #24]
 800361a:	2f00      	cmp	r7, #0
 800361c:	db39      	blt.n	8003692 <_dtoa_r+0x21a>
 800361e:	9b06      	ldr	r3, [sp, #24]
 8003620:	970d      	str	r7, [sp, #52]	@ 0x34
 8003622:	443b      	add	r3, r7
 8003624:	9306      	str	r3, [sp, #24]
 8003626:	2300      	movs	r3, #0
 8003628:	9308      	str	r3, [sp, #32]
 800362a:	9b07      	ldr	r3, [sp, #28]
 800362c:	2b09      	cmp	r3, #9
 800362e:	d863      	bhi.n	80036f8 <_dtoa_r+0x280>
 8003630:	2b05      	cmp	r3, #5
 8003632:	bfc4      	itt	gt
 8003634:	3b04      	subgt	r3, #4
 8003636:	9307      	strgt	r3, [sp, #28]
 8003638:	9b07      	ldr	r3, [sp, #28]
 800363a:	f1a3 0302 	sub.w	r3, r3, #2
 800363e:	bfcc      	ite	gt
 8003640:	2400      	movgt	r4, #0
 8003642:	2401      	movle	r4, #1
 8003644:	2b03      	cmp	r3, #3
 8003646:	d863      	bhi.n	8003710 <_dtoa_r+0x298>
 8003648:	e8df f003 	tbb	[pc, r3]
 800364c:	2b375452 	.word	0x2b375452
 8003650:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003654:	441e      	add	r6, r3
 8003656:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800365a:	2b20      	cmp	r3, #32
 800365c:	bfc1      	itttt	gt
 800365e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003662:	409f      	lslgt	r7, r3
 8003664:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003668:	fa24 f303 	lsrgt.w	r3, r4, r3
 800366c:	bfd6      	itet	le
 800366e:	f1c3 0320 	rsble	r3, r3, #32
 8003672:	ea47 0003 	orrgt.w	r0, r7, r3
 8003676:	fa04 f003 	lslle.w	r0, r4, r3
 800367a:	f7fc ff43 	bl	8000504 <__aeabi_ui2d>
 800367e:	2201      	movs	r2, #1
 8003680:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003684:	3e01      	subs	r6, #1
 8003686:	9212      	str	r2, [sp, #72]	@ 0x48
 8003688:	e776      	b.n	8003578 <_dtoa_r+0x100>
 800368a:	2301      	movs	r3, #1
 800368c:	e7b7      	b.n	80035fe <_dtoa_r+0x186>
 800368e:	9010      	str	r0, [sp, #64]	@ 0x40
 8003690:	e7b6      	b.n	8003600 <_dtoa_r+0x188>
 8003692:	9b00      	ldr	r3, [sp, #0]
 8003694:	1bdb      	subs	r3, r3, r7
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	427b      	negs	r3, r7
 800369a:	9308      	str	r3, [sp, #32]
 800369c:	2300      	movs	r3, #0
 800369e:	930d      	str	r3, [sp, #52]	@ 0x34
 80036a0:	e7c3      	b.n	800362a <_dtoa_r+0x1b2>
 80036a2:	2301      	movs	r3, #1
 80036a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80036a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80036a8:	eb07 0b03 	add.w	fp, r7, r3
 80036ac:	f10b 0301 	add.w	r3, fp, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	9303      	str	r3, [sp, #12]
 80036b4:	bfb8      	it	lt
 80036b6:	2301      	movlt	r3, #1
 80036b8:	e006      	b.n	80036c8 <_dtoa_r+0x250>
 80036ba:	2301      	movs	r3, #1
 80036bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80036be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	dd28      	ble.n	8003716 <_dtoa_r+0x29e>
 80036c4:	469b      	mov	fp, r3
 80036c6:	9303      	str	r3, [sp, #12]
 80036c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80036cc:	2100      	movs	r1, #0
 80036ce:	2204      	movs	r2, #4
 80036d0:	f102 0514 	add.w	r5, r2, #20
 80036d4:	429d      	cmp	r5, r3
 80036d6:	d926      	bls.n	8003726 <_dtoa_r+0x2ae>
 80036d8:	6041      	str	r1, [r0, #4]
 80036da:	4648      	mov	r0, r9
 80036dc:	f000 fd9c 	bl	8004218 <_Balloc>
 80036e0:	4682      	mov	sl, r0
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d142      	bne.n	800376c <_dtoa_r+0x2f4>
 80036e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <_dtoa_r+0x2e8>)
 80036e8:	4602      	mov	r2, r0
 80036ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80036ee:	e6da      	b.n	80034a6 <_dtoa_r+0x2e>
 80036f0:	2300      	movs	r3, #0
 80036f2:	e7e3      	b.n	80036bc <_dtoa_r+0x244>
 80036f4:	2300      	movs	r3, #0
 80036f6:	e7d5      	b.n	80036a4 <_dtoa_r+0x22c>
 80036f8:	2401      	movs	r4, #1
 80036fa:	2300      	movs	r3, #0
 80036fc:	9307      	str	r3, [sp, #28]
 80036fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8003700:	f04f 3bff 	mov.w	fp, #4294967295
 8003704:	2200      	movs	r2, #0
 8003706:	f8cd b00c 	str.w	fp, [sp, #12]
 800370a:	2312      	movs	r3, #18
 800370c:	920c      	str	r2, [sp, #48]	@ 0x30
 800370e:	e7db      	b.n	80036c8 <_dtoa_r+0x250>
 8003710:	2301      	movs	r3, #1
 8003712:	9309      	str	r3, [sp, #36]	@ 0x24
 8003714:	e7f4      	b.n	8003700 <_dtoa_r+0x288>
 8003716:	f04f 0b01 	mov.w	fp, #1
 800371a:	f8cd b00c 	str.w	fp, [sp, #12]
 800371e:	465b      	mov	r3, fp
 8003720:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003724:	e7d0      	b.n	80036c8 <_dtoa_r+0x250>
 8003726:	3101      	adds	r1, #1
 8003728:	0052      	lsls	r2, r2, #1
 800372a:	e7d1      	b.n	80036d0 <_dtoa_r+0x258>
 800372c:	f3af 8000 	nop.w
 8003730:	636f4361 	.word	0x636f4361
 8003734:	3fd287a7 	.word	0x3fd287a7
 8003738:	8b60c8b3 	.word	0x8b60c8b3
 800373c:	3fc68a28 	.word	0x3fc68a28
 8003740:	509f79fb 	.word	0x509f79fb
 8003744:	3fd34413 	.word	0x3fd34413
 8003748:	080053bf 	.word	0x080053bf
 800374c:	080053d6 	.word	0x080053d6
 8003750:	7ff00000 	.word	0x7ff00000
 8003754:	0800538f 	.word	0x0800538f
 8003758:	3ff80000 	.word	0x3ff80000
 800375c:	08005528 	.word	0x08005528
 8003760:	0800542e 	.word	0x0800542e
 8003764:	080053bb 	.word	0x080053bb
 8003768:	0800538e 	.word	0x0800538e
 800376c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003770:	6018      	str	r0, [r3, #0]
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	2b0e      	cmp	r3, #14
 8003776:	f200 80a1 	bhi.w	80038bc <_dtoa_r+0x444>
 800377a:	2c00      	cmp	r4, #0
 800377c:	f000 809e 	beq.w	80038bc <_dtoa_r+0x444>
 8003780:	2f00      	cmp	r7, #0
 8003782:	dd33      	ble.n	80037ec <_dtoa_r+0x374>
 8003784:	4b9c      	ldr	r3, [pc, #624]	@ (80039f8 <_dtoa_r+0x580>)
 8003786:	f007 020f 	and.w	r2, r7, #15
 800378a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800378e:	ed93 7b00 	vldr	d7, [r3]
 8003792:	05f8      	lsls	r0, r7, #23
 8003794:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003798:	ea4f 1427 	mov.w	r4, r7, asr #4
 800379c:	d516      	bpl.n	80037cc <_dtoa_r+0x354>
 800379e:	4b97      	ldr	r3, [pc, #604]	@ (80039fc <_dtoa_r+0x584>)
 80037a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80037a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037a8:	f7fd f850 	bl	800084c <__aeabi_ddiv>
 80037ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037b0:	f004 040f 	and.w	r4, r4, #15
 80037b4:	2603      	movs	r6, #3
 80037b6:	4d91      	ldr	r5, [pc, #580]	@ (80039fc <_dtoa_r+0x584>)
 80037b8:	b954      	cbnz	r4, 80037d0 <_dtoa_r+0x358>
 80037ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80037be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037c2:	f7fd f843 	bl	800084c <__aeabi_ddiv>
 80037c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037ca:	e028      	b.n	800381e <_dtoa_r+0x3a6>
 80037cc:	2602      	movs	r6, #2
 80037ce:	e7f2      	b.n	80037b6 <_dtoa_r+0x33e>
 80037d0:	07e1      	lsls	r1, r4, #31
 80037d2:	d508      	bpl.n	80037e6 <_dtoa_r+0x36e>
 80037d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80037d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80037dc:	f7fc ff0c 	bl	80005f8 <__aeabi_dmul>
 80037e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80037e4:	3601      	adds	r6, #1
 80037e6:	1064      	asrs	r4, r4, #1
 80037e8:	3508      	adds	r5, #8
 80037ea:	e7e5      	b.n	80037b8 <_dtoa_r+0x340>
 80037ec:	f000 80af 	beq.w	800394e <_dtoa_r+0x4d6>
 80037f0:	427c      	negs	r4, r7
 80037f2:	4b81      	ldr	r3, [pc, #516]	@ (80039f8 <_dtoa_r+0x580>)
 80037f4:	4d81      	ldr	r5, [pc, #516]	@ (80039fc <_dtoa_r+0x584>)
 80037f6:	f004 020f 	and.w	r2, r4, #15
 80037fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003806:	f7fc fef7 	bl	80005f8 <__aeabi_dmul>
 800380a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800380e:	1124      	asrs	r4, r4, #4
 8003810:	2300      	movs	r3, #0
 8003812:	2602      	movs	r6, #2
 8003814:	2c00      	cmp	r4, #0
 8003816:	f040 808f 	bne.w	8003938 <_dtoa_r+0x4c0>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1d3      	bne.n	80037c6 <_dtoa_r+0x34e>
 800381e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003820:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8094 	beq.w	8003952 <_dtoa_r+0x4da>
 800382a:	4b75      	ldr	r3, [pc, #468]	@ (8003a00 <_dtoa_r+0x588>)
 800382c:	2200      	movs	r2, #0
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f7fd f953 	bl	8000adc <__aeabi_dcmplt>
 8003836:	2800      	cmp	r0, #0
 8003838:	f000 808b 	beq.w	8003952 <_dtoa_r+0x4da>
 800383c:	9b03      	ldr	r3, [sp, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8087 	beq.w	8003952 <_dtoa_r+0x4da>
 8003844:	f1bb 0f00 	cmp.w	fp, #0
 8003848:	dd34      	ble.n	80038b4 <_dtoa_r+0x43c>
 800384a:	4620      	mov	r0, r4
 800384c:	4b6d      	ldr	r3, [pc, #436]	@ (8003a04 <_dtoa_r+0x58c>)
 800384e:	2200      	movs	r2, #0
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fed1 	bl	80005f8 <__aeabi_dmul>
 8003856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800385a:	f107 38ff 	add.w	r8, r7, #4294967295
 800385e:	3601      	adds	r6, #1
 8003860:	465c      	mov	r4, fp
 8003862:	4630      	mov	r0, r6
 8003864:	f7fc fe5e 	bl	8000524 <__aeabi_i2d>
 8003868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800386c:	f7fc fec4 	bl	80005f8 <__aeabi_dmul>
 8003870:	4b65      	ldr	r3, [pc, #404]	@ (8003a08 <_dtoa_r+0x590>)
 8003872:	2200      	movs	r2, #0
 8003874:	f7fc fd0a 	bl	800028c <__adddf3>
 8003878:	4605      	mov	r5, r0
 800387a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800387e:	2c00      	cmp	r4, #0
 8003880:	d16a      	bne.n	8003958 <_dtoa_r+0x4e0>
 8003882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003886:	4b61      	ldr	r3, [pc, #388]	@ (8003a0c <_dtoa_r+0x594>)
 8003888:	2200      	movs	r2, #0
 800388a:	f7fc fcfd 	bl	8000288 <__aeabi_dsub>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003896:	462a      	mov	r2, r5
 8003898:	4633      	mov	r3, r6
 800389a:	f7fd f93d 	bl	8000b18 <__aeabi_dcmpgt>
 800389e:	2800      	cmp	r0, #0
 80038a0:	f040 8298 	bne.w	8003dd4 <_dtoa_r+0x95c>
 80038a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038a8:	462a      	mov	r2, r5
 80038aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80038ae:	f7fd f915 	bl	8000adc <__aeabi_dcmplt>
 80038b2:	bb38      	cbnz	r0, 8003904 <_dtoa_r+0x48c>
 80038b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80038b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80038bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f2c0 8157 	blt.w	8003b72 <_dtoa_r+0x6fa>
 80038c4:	2f0e      	cmp	r7, #14
 80038c6:	f300 8154 	bgt.w	8003b72 <_dtoa_r+0x6fa>
 80038ca:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <_dtoa_r+0x580>)
 80038cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80038d0:	ed93 7b00 	vldr	d7, [r3]
 80038d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	ed8d 7b00 	vstr	d7, [sp]
 80038dc:	f280 80e5 	bge.w	8003aaa <_dtoa_r+0x632>
 80038e0:	9b03      	ldr	r3, [sp, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f300 80e1 	bgt.w	8003aaa <_dtoa_r+0x632>
 80038e8:	d10c      	bne.n	8003904 <_dtoa_r+0x48c>
 80038ea:	4b48      	ldr	r3, [pc, #288]	@ (8003a0c <_dtoa_r+0x594>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	ec51 0b17 	vmov	r0, r1, d7
 80038f2:	f7fc fe81 	bl	80005f8 <__aeabi_dmul>
 80038f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038fa:	f7fd f903 	bl	8000b04 <__aeabi_dcmpge>
 80038fe:	2800      	cmp	r0, #0
 8003900:	f000 8266 	beq.w	8003dd0 <_dtoa_r+0x958>
 8003904:	2400      	movs	r4, #0
 8003906:	4625      	mov	r5, r4
 8003908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800390a:	4656      	mov	r6, sl
 800390c:	ea6f 0803 	mvn.w	r8, r3
 8003910:	2700      	movs	r7, #0
 8003912:	4621      	mov	r1, r4
 8003914:	4648      	mov	r0, r9
 8003916:	f000 fcbf 	bl	8004298 <_Bfree>
 800391a:	2d00      	cmp	r5, #0
 800391c:	f000 80bd 	beq.w	8003a9a <_dtoa_r+0x622>
 8003920:	b12f      	cbz	r7, 800392e <_dtoa_r+0x4b6>
 8003922:	42af      	cmp	r7, r5
 8003924:	d003      	beq.n	800392e <_dtoa_r+0x4b6>
 8003926:	4639      	mov	r1, r7
 8003928:	4648      	mov	r0, r9
 800392a:	f000 fcb5 	bl	8004298 <_Bfree>
 800392e:	4629      	mov	r1, r5
 8003930:	4648      	mov	r0, r9
 8003932:	f000 fcb1 	bl	8004298 <_Bfree>
 8003936:	e0b0      	b.n	8003a9a <_dtoa_r+0x622>
 8003938:	07e2      	lsls	r2, r4, #31
 800393a:	d505      	bpl.n	8003948 <_dtoa_r+0x4d0>
 800393c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003940:	f7fc fe5a 	bl	80005f8 <__aeabi_dmul>
 8003944:	3601      	adds	r6, #1
 8003946:	2301      	movs	r3, #1
 8003948:	1064      	asrs	r4, r4, #1
 800394a:	3508      	adds	r5, #8
 800394c:	e762      	b.n	8003814 <_dtoa_r+0x39c>
 800394e:	2602      	movs	r6, #2
 8003950:	e765      	b.n	800381e <_dtoa_r+0x3a6>
 8003952:	9c03      	ldr	r4, [sp, #12]
 8003954:	46b8      	mov	r8, r7
 8003956:	e784      	b.n	8003862 <_dtoa_r+0x3ea>
 8003958:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <_dtoa_r+0x580>)
 800395a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800395c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003960:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003964:	4454      	add	r4, sl
 8003966:	2900      	cmp	r1, #0
 8003968:	d054      	beq.n	8003a14 <_dtoa_r+0x59c>
 800396a:	4929      	ldr	r1, [pc, #164]	@ (8003a10 <_dtoa_r+0x598>)
 800396c:	2000      	movs	r0, #0
 800396e:	f7fc ff6d 	bl	800084c <__aeabi_ddiv>
 8003972:	4633      	mov	r3, r6
 8003974:	462a      	mov	r2, r5
 8003976:	f7fc fc87 	bl	8000288 <__aeabi_dsub>
 800397a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800397e:	4656      	mov	r6, sl
 8003980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003984:	f7fd f8e8 	bl	8000b58 <__aeabi_d2iz>
 8003988:	4605      	mov	r5, r0
 800398a:	f7fc fdcb 	bl	8000524 <__aeabi_i2d>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003996:	f7fc fc77 	bl	8000288 <__aeabi_dsub>
 800399a:	3530      	adds	r5, #48	@ 0x30
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039a4:	f806 5b01 	strb.w	r5, [r6], #1
 80039a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80039ac:	f7fd f896 	bl	8000adc <__aeabi_dcmplt>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d172      	bne.n	8003a9a <_dtoa_r+0x622>
 80039b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039b8:	4911      	ldr	r1, [pc, #68]	@ (8003a00 <_dtoa_r+0x588>)
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7fc fc64 	bl	8000288 <__aeabi_dsub>
 80039c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80039c4:	f7fd f88a 	bl	8000adc <__aeabi_dcmplt>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	f040 80b4 	bne.w	8003b36 <_dtoa_r+0x6be>
 80039ce:	42a6      	cmp	r6, r4
 80039d0:	f43f af70 	beq.w	80038b4 <_dtoa_r+0x43c>
 80039d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80039d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <_dtoa_r+0x58c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	f7fc fe0c 	bl	80005f8 <__aeabi_dmul>
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <_dtoa_r+0x58c>)
 80039e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80039e6:	2200      	movs	r2, #0
 80039e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039ec:	f7fc fe04 	bl	80005f8 <__aeabi_dmul>
 80039f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039f4:	e7c4      	b.n	8003980 <_dtoa_r+0x508>
 80039f6:	bf00      	nop
 80039f8:	08005528 	.word	0x08005528
 80039fc:	08005500 	.word	0x08005500
 8003a00:	3ff00000 	.word	0x3ff00000
 8003a04:	40240000 	.word	0x40240000
 8003a08:	401c0000 	.word	0x401c0000
 8003a0c:	40140000 	.word	0x40140000
 8003a10:	3fe00000 	.word	0x3fe00000
 8003a14:	4631      	mov	r1, r6
 8003a16:	4628      	mov	r0, r5
 8003a18:	f7fc fdee 	bl	80005f8 <__aeabi_dmul>
 8003a1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003a20:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003a22:	4656      	mov	r6, sl
 8003a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a28:	f7fd f896 	bl	8000b58 <__aeabi_d2iz>
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	f7fc fd79 	bl	8000524 <__aeabi_i2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a3a:	f7fc fc25 	bl	8000288 <__aeabi_dsub>
 8003a3e:	3530      	adds	r5, #48	@ 0x30
 8003a40:	f806 5b01 	strb.w	r5, [r6], #1
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	42a6      	cmp	r6, r4
 8003a4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	d124      	bne.n	8003a9e <_dtoa_r+0x626>
 8003a54:	4baf      	ldr	r3, [pc, #700]	@ (8003d14 <_dtoa_r+0x89c>)
 8003a56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003a5a:	f7fc fc17 	bl	800028c <__adddf3>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a66:	f7fd f857 	bl	8000b18 <__aeabi_dcmpgt>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d163      	bne.n	8003b36 <_dtoa_r+0x6be>
 8003a6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003a72:	49a8      	ldr	r1, [pc, #672]	@ (8003d14 <_dtoa_r+0x89c>)
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fc fc07 	bl	8000288 <__aeabi_dsub>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a82:	f7fd f82b 	bl	8000adc <__aeabi_dcmplt>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	f43f af14 	beq.w	80038b4 <_dtoa_r+0x43c>
 8003a8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003a8e:	1e73      	subs	r3, r6, #1
 8003a90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003a92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003a96:	2b30      	cmp	r3, #48	@ 0x30
 8003a98:	d0f8      	beq.n	8003a8c <_dtoa_r+0x614>
 8003a9a:	4647      	mov	r7, r8
 8003a9c:	e03b      	b.n	8003b16 <_dtoa_r+0x69e>
 8003a9e:	4b9e      	ldr	r3, [pc, #632]	@ (8003d18 <_dtoa_r+0x8a0>)
 8003aa0:	f7fc fdaa 	bl	80005f8 <__aeabi_dmul>
 8003aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003aa8:	e7bc      	b.n	8003a24 <_dtoa_r+0x5ac>
 8003aaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003aae:	4656      	mov	r6, sl
 8003ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fec8 	bl	800084c <__aeabi_ddiv>
 8003abc:	f7fd f84c 	bl	8000b58 <__aeabi_d2iz>
 8003ac0:	4680      	mov	r8, r0
 8003ac2:	f7fc fd2f 	bl	8000524 <__aeabi_i2d>
 8003ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aca:	f7fc fd95 	bl	80005f8 <__aeabi_dmul>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003ada:	f7fc fbd5 	bl	8000288 <__aeabi_dsub>
 8003ade:	f806 4b01 	strb.w	r4, [r6], #1
 8003ae2:	9d03      	ldr	r5, [sp, #12]
 8003ae4:	eba6 040a 	sub.w	r4, r6, sl
 8003ae8:	42a5      	cmp	r5, r4
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	d133      	bne.n	8003b58 <_dtoa_r+0x6e0>
 8003af0:	f7fc fbcc 	bl	800028c <__adddf3>
 8003af4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003af8:	4604      	mov	r4, r0
 8003afa:	460d      	mov	r5, r1
 8003afc:	f7fd f80c 	bl	8000b18 <__aeabi_dcmpgt>
 8003b00:	b9c0      	cbnz	r0, 8003b34 <_dtoa_r+0x6bc>
 8003b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	f7fc ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b0e:	b110      	cbz	r0, 8003b16 <_dtoa_r+0x69e>
 8003b10:	f018 0f01 	tst.w	r8, #1
 8003b14:	d10e      	bne.n	8003b34 <_dtoa_r+0x6bc>
 8003b16:	9902      	ldr	r1, [sp, #8]
 8003b18:	4648      	mov	r0, r9
 8003b1a:	f000 fbbd 	bl	8004298 <_Bfree>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	7033      	strb	r3, [r6, #0]
 8003b22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b24:	3701      	adds	r7, #1
 8003b26:	601f      	str	r7, [r3, #0]
 8003b28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 824b 	beq.w	8003fc6 <_dtoa_r+0xb4e>
 8003b30:	601e      	str	r6, [r3, #0]
 8003b32:	e248      	b.n	8003fc6 <_dtoa_r+0xb4e>
 8003b34:	46b8      	mov	r8, r7
 8003b36:	4633      	mov	r3, r6
 8003b38:	461e      	mov	r6, r3
 8003b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b3e:	2a39      	cmp	r2, #57	@ 0x39
 8003b40:	d106      	bne.n	8003b50 <_dtoa_r+0x6d8>
 8003b42:	459a      	cmp	sl, r3
 8003b44:	d1f8      	bne.n	8003b38 <_dtoa_r+0x6c0>
 8003b46:	2230      	movs	r2, #48	@ 0x30
 8003b48:	f108 0801 	add.w	r8, r8, #1
 8003b4c:	f88a 2000 	strb.w	r2, [sl]
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	3201      	adds	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e7a0      	b.n	8003a9a <_dtoa_r+0x622>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	@ (8003d18 <_dtoa_r+0x8a0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f7fc fd4c 	bl	80005f8 <__aeabi_dmul>
 8003b60:	2200      	movs	r2, #0
 8003b62:	2300      	movs	r3, #0
 8003b64:	4604      	mov	r4, r0
 8003b66:	460d      	mov	r5, r1
 8003b68:	f7fc ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d09f      	beq.n	8003ab0 <_dtoa_r+0x638>
 8003b70:	e7d1      	b.n	8003b16 <_dtoa_r+0x69e>
 8003b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	f000 80ea 	beq.w	8003d4e <_dtoa_r+0x8d6>
 8003b7a:	9a07      	ldr	r2, [sp, #28]
 8003b7c:	2a01      	cmp	r2, #1
 8003b7e:	f300 80cd 	bgt.w	8003d1c <_dtoa_r+0x8a4>
 8003b82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	f000 80c1 	beq.w	8003d0c <_dtoa_r+0x894>
 8003b8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003b8e:	9c08      	ldr	r4, [sp, #32]
 8003b90:	9e00      	ldr	r6, [sp, #0]
 8003b92:	9a00      	ldr	r2, [sp, #0]
 8003b94:	441a      	add	r2, r3
 8003b96:	9200      	str	r2, [sp, #0]
 8003b98:	9a06      	ldr	r2, [sp, #24]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	441a      	add	r2, r3
 8003b9e:	4648      	mov	r0, r9
 8003ba0:	9206      	str	r2, [sp, #24]
 8003ba2:	f000 fc2d 	bl	8004400 <__i2b>
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	b166      	cbz	r6, 8003bc4 <_dtoa_r+0x74c>
 8003baa:	9b06      	ldr	r3, [sp, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	dd09      	ble.n	8003bc4 <_dtoa_r+0x74c>
 8003bb0:	42b3      	cmp	r3, r6
 8003bb2:	9a00      	ldr	r2, [sp, #0]
 8003bb4:	bfa8      	it	ge
 8003bb6:	4633      	movge	r3, r6
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	9200      	str	r2, [sp, #0]
 8003bbc:	9a06      	ldr	r2, [sp, #24]
 8003bbe:	1af6      	subs	r6, r6, r3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	9306      	str	r3, [sp, #24]
 8003bc4:	9b08      	ldr	r3, [sp, #32]
 8003bc6:	b30b      	cbz	r3, 8003c0c <_dtoa_r+0x794>
 8003bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80c6 	beq.w	8003d5c <_dtoa_r+0x8e4>
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	f000 80c0 	beq.w	8003d56 <_dtoa_r+0x8de>
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	4622      	mov	r2, r4
 8003bda:	4648      	mov	r0, r9
 8003bdc:	f000 fcc8 	bl	8004570 <__pow5mult>
 8003be0:	9a02      	ldr	r2, [sp, #8]
 8003be2:	4601      	mov	r1, r0
 8003be4:	4605      	mov	r5, r0
 8003be6:	4648      	mov	r0, r9
 8003be8:	f000 fc20 	bl	800442c <__multiply>
 8003bec:	9902      	ldr	r1, [sp, #8]
 8003bee:	4680      	mov	r8, r0
 8003bf0:	4648      	mov	r0, r9
 8003bf2:	f000 fb51 	bl	8004298 <_Bfree>
 8003bf6:	9b08      	ldr	r3, [sp, #32]
 8003bf8:	1b1b      	subs	r3, r3, r4
 8003bfa:	9308      	str	r3, [sp, #32]
 8003bfc:	f000 80b1 	beq.w	8003d62 <_dtoa_r+0x8ea>
 8003c00:	9a08      	ldr	r2, [sp, #32]
 8003c02:	4641      	mov	r1, r8
 8003c04:	4648      	mov	r0, r9
 8003c06:	f000 fcb3 	bl	8004570 <__pow5mult>
 8003c0a:	9002      	str	r0, [sp, #8]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4648      	mov	r0, r9
 8003c10:	f000 fbf6 	bl	8004400 <__i2b>
 8003c14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c16:	4604      	mov	r4, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 81d8 	beq.w	8003fce <_dtoa_r+0xb56>
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4601      	mov	r1, r0
 8003c22:	4648      	mov	r0, r9
 8003c24:	f000 fca4 	bl	8004570 <__pow5mult>
 8003c28:	9b07      	ldr	r3, [sp, #28]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	f300 809f 	bgt.w	8003d70 <_dtoa_r+0x8f8>
 8003c32:	9b04      	ldr	r3, [sp, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 8097 	bne.w	8003d68 <_dtoa_r+0x8f0>
 8003c3a:	9b05      	ldr	r3, [sp, #20]
 8003c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 8093 	bne.w	8003d6c <_dtoa_r+0x8f4>
 8003c46:	9b05      	ldr	r3, [sp, #20]
 8003c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c4c:	0d1b      	lsrs	r3, r3, #20
 8003c4e:	051b      	lsls	r3, r3, #20
 8003c50:	b133      	cbz	r3, 8003c60 <_dtoa_r+0x7e8>
 8003c52:	9b00      	ldr	r3, [sp, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	9b06      	ldr	r3, [sp, #24]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	9306      	str	r3, [sp, #24]
 8003c5e:	2301      	movs	r3, #1
 8003c60:	9308      	str	r3, [sp, #32]
 8003c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 81b8 	beq.w	8003fda <_dtoa_r+0xb62>
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c70:	6918      	ldr	r0, [r3, #16]
 8003c72:	f000 fb79 	bl	8004368 <__hi0bits>
 8003c76:	f1c0 0020 	rsb	r0, r0, #32
 8003c7a:	9b06      	ldr	r3, [sp, #24]
 8003c7c:	4418      	add	r0, r3
 8003c7e:	f010 001f 	ands.w	r0, r0, #31
 8003c82:	f000 8082 	beq.w	8003d8a <_dtoa_r+0x912>
 8003c86:	f1c0 0320 	rsb	r3, r0, #32
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	dd73      	ble.n	8003d76 <_dtoa_r+0x8fe>
 8003c8e:	9b00      	ldr	r3, [sp, #0]
 8003c90:	f1c0 001c 	rsb	r0, r0, #28
 8003c94:	4403      	add	r3, r0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	9b06      	ldr	r3, [sp, #24]
 8003c9a:	4403      	add	r3, r0
 8003c9c:	4406      	add	r6, r0
 8003c9e:	9306      	str	r3, [sp, #24]
 8003ca0:	9b00      	ldr	r3, [sp, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dd05      	ble.n	8003cb2 <_dtoa_r+0x83a>
 8003ca6:	9902      	ldr	r1, [sp, #8]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4648      	mov	r0, r9
 8003cac:	f000 fcba 	bl	8004624 <__lshift>
 8003cb0:	9002      	str	r0, [sp, #8]
 8003cb2:	9b06      	ldr	r3, [sp, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	dd05      	ble.n	8003cc4 <_dtoa_r+0x84c>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4648      	mov	r0, r9
 8003cbe:	f000 fcb1 	bl	8004624 <__lshift>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d061      	beq.n	8003d8e <_dtoa_r+0x916>
 8003cca:	9802      	ldr	r0, [sp, #8]
 8003ccc:	4621      	mov	r1, r4
 8003cce:	f000 fd15 	bl	80046fc <__mcmp>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	da5b      	bge.n	8003d8e <_dtoa_r+0x916>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9902      	ldr	r1, [sp, #8]
 8003cda:	220a      	movs	r2, #10
 8003cdc:	4648      	mov	r0, r9
 8003cde:	f000 fafd 	bl	80042dc <__multadd>
 8003ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ce4:	9002      	str	r0, [sp, #8]
 8003ce6:	f107 38ff 	add.w	r8, r7, #4294967295
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8177 	beq.w	8003fde <_dtoa_r+0xb66>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	4648      	mov	r0, r9
 8003cf8:	f000 faf0 	bl	80042dc <__multadd>
 8003cfc:	f1bb 0f00 	cmp.w	fp, #0
 8003d00:	4605      	mov	r5, r0
 8003d02:	dc6f      	bgt.n	8003de4 <_dtoa_r+0x96c>
 8003d04:	9b07      	ldr	r3, [sp, #28]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	dc49      	bgt.n	8003d9e <_dtoa_r+0x926>
 8003d0a:	e06b      	b.n	8003de4 <_dtoa_r+0x96c>
 8003d0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003d12:	e73c      	b.n	8003b8e <_dtoa_r+0x716>
 8003d14:	3fe00000 	.word	0x3fe00000
 8003d18:	40240000 	.word	0x40240000
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	1e5c      	subs	r4, r3, #1
 8003d20:	9b08      	ldr	r3, [sp, #32]
 8003d22:	42a3      	cmp	r3, r4
 8003d24:	db09      	blt.n	8003d3a <_dtoa_r+0x8c2>
 8003d26:	1b1c      	subs	r4, r3, r4
 8003d28:	9b03      	ldr	r3, [sp, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f6bf af30 	bge.w	8003b90 <_dtoa_r+0x718>
 8003d30:	9b00      	ldr	r3, [sp, #0]
 8003d32:	9a03      	ldr	r2, [sp, #12]
 8003d34:	1a9e      	subs	r6, r3, r2
 8003d36:	2300      	movs	r3, #0
 8003d38:	e72b      	b.n	8003b92 <_dtoa_r+0x71a>
 8003d3a:	9b08      	ldr	r3, [sp, #32]
 8003d3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003d3e:	9408      	str	r4, [sp, #32]
 8003d40:	1ae3      	subs	r3, r4, r3
 8003d42:	441a      	add	r2, r3
 8003d44:	9e00      	ldr	r6, [sp, #0]
 8003d46:	9b03      	ldr	r3, [sp, #12]
 8003d48:	920d      	str	r2, [sp, #52]	@ 0x34
 8003d4a:	2400      	movs	r4, #0
 8003d4c:	e721      	b.n	8003b92 <_dtoa_r+0x71a>
 8003d4e:	9c08      	ldr	r4, [sp, #32]
 8003d50:	9e00      	ldr	r6, [sp, #0]
 8003d52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003d54:	e728      	b.n	8003ba8 <_dtoa_r+0x730>
 8003d56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003d5a:	e751      	b.n	8003c00 <_dtoa_r+0x788>
 8003d5c:	9a08      	ldr	r2, [sp, #32]
 8003d5e:	9902      	ldr	r1, [sp, #8]
 8003d60:	e750      	b.n	8003c04 <_dtoa_r+0x78c>
 8003d62:	f8cd 8008 	str.w	r8, [sp, #8]
 8003d66:	e751      	b.n	8003c0c <_dtoa_r+0x794>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e779      	b.n	8003c60 <_dtoa_r+0x7e8>
 8003d6c:	9b04      	ldr	r3, [sp, #16]
 8003d6e:	e777      	b.n	8003c60 <_dtoa_r+0x7e8>
 8003d70:	2300      	movs	r3, #0
 8003d72:	9308      	str	r3, [sp, #32]
 8003d74:	e779      	b.n	8003c6a <_dtoa_r+0x7f2>
 8003d76:	d093      	beq.n	8003ca0 <_dtoa_r+0x828>
 8003d78:	9a00      	ldr	r2, [sp, #0]
 8003d7a:	331c      	adds	r3, #28
 8003d7c:	441a      	add	r2, r3
 8003d7e:	9200      	str	r2, [sp, #0]
 8003d80:	9a06      	ldr	r2, [sp, #24]
 8003d82:	441a      	add	r2, r3
 8003d84:	441e      	add	r6, r3
 8003d86:	9206      	str	r2, [sp, #24]
 8003d88:	e78a      	b.n	8003ca0 <_dtoa_r+0x828>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	e7f4      	b.n	8003d78 <_dtoa_r+0x900>
 8003d8e:	9b03      	ldr	r3, [sp, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	46b8      	mov	r8, r7
 8003d94:	dc20      	bgt.n	8003dd8 <_dtoa_r+0x960>
 8003d96:	469b      	mov	fp, r3
 8003d98:	9b07      	ldr	r3, [sp, #28]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	dd1e      	ble.n	8003ddc <_dtoa_r+0x964>
 8003d9e:	f1bb 0f00 	cmp.w	fp, #0
 8003da2:	f47f adb1 	bne.w	8003908 <_dtoa_r+0x490>
 8003da6:	4621      	mov	r1, r4
 8003da8:	465b      	mov	r3, fp
 8003daa:	2205      	movs	r2, #5
 8003dac:	4648      	mov	r0, r9
 8003dae:	f000 fa95 	bl	80042dc <__multadd>
 8003db2:	4601      	mov	r1, r0
 8003db4:	4604      	mov	r4, r0
 8003db6:	9802      	ldr	r0, [sp, #8]
 8003db8:	f000 fca0 	bl	80046fc <__mcmp>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	f77f ada3 	ble.w	8003908 <_dtoa_r+0x490>
 8003dc2:	4656      	mov	r6, sl
 8003dc4:	2331      	movs	r3, #49	@ 0x31
 8003dc6:	f806 3b01 	strb.w	r3, [r6], #1
 8003dca:	f108 0801 	add.w	r8, r8, #1
 8003dce:	e59f      	b.n	8003910 <_dtoa_r+0x498>
 8003dd0:	9c03      	ldr	r4, [sp, #12]
 8003dd2:	46b8      	mov	r8, r7
 8003dd4:	4625      	mov	r5, r4
 8003dd6:	e7f4      	b.n	8003dc2 <_dtoa_r+0x94a>
 8003dd8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8101 	beq.w	8003fe6 <_dtoa_r+0xb6e>
 8003de4:	2e00      	cmp	r6, #0
 8003de6:	dd05      	ble.n	8003df4 <_dtoa_r+0x97c>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4632      	mov	r2, r6
 8003dec:	4648      	mov	r0, r9
 8003dee:	f000 fc19 	bl	8004624 <__lshift>
 8003df2:	4605      	mov	r5, r0
 8003df4:	9b08      	ldr	r3, [sp, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05c      	beq.n	8003eb4 <_dtoa_r+0xa3c>
 8003dfa:	6869      	ldr	r1, [r5, #4]
 8003dfc:	4648      	mov	r0, r9
 8003dfe:	f000 fa0b 	bl	8004218 <_Balloc>
 8003e02:	4606      	mov	r6, r0
 8003e04:	b928      	cbnz	r0, 8003e12 <_dtoa_r+0x99a>
 8003e06:	4b82      	ldr	r3, [pc, #520]	@ (8004010 <_dtoa_r+0xb98>)
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003e0e:	f7ff bb4a 	b.w	80034a6 <_dtoa_r+0x2e>
 8003e12:	692a      	ldr	r2, [r5, #16]
 8003e14:	3202      	adds	r2, #2
 8003e16:	0092      	lsls	r2, r2, #2
 8003e18:	f105 010c 	add.w	r1, r5, #12
 8003e1c:	300c      	adds	r0, #12
 8003e1e:	f001 f969 	bl	80050f4 <memcpy>
 8003e22:	2201      	movs	r2, #1
 8003e24:	4631      	mov	r1, r6
 8003e26:	4648      	mov	r0, r9
 8003e28:	f000 fbfc 	bl	8004624 <__lshift>
 8003e2c:	f10a 0301 	add.w	r3, sl, #1
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	eb0a 030b 	add.w	r3, sl, fp
 8003e36:	9308      	str	r3, [sp, #32]
 8003e38:	9b04      	ldr	r3, [sp, #16]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	462f      	mov	r7, r5
 8003e40:	9306      	str	r3, [sp, #24]
 8003e42:	4605      	mov	r5, r0
 8003e44:	9b00      	ldr	r3, [sp, #0]
 8003e46:	9802      	ldr	r0, [sp, #8]
 8003e48:	4621      	mov	r1, r4
 8003e4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8003e4e:	f7ff fa88 	bl	8003362 <quorem>
 8003e52:	4603      	mov	r3, r0
 8003e54:	3330      	adds	r3, #48	@ 0x30
 8003e56:	9003      	str	r0, [sp, #12]
 8003e58:	4639      	mov	r1, r7
 8003e5a:	9802      	ldr	r0, [sp, #8]
 8003e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e5e:	f000 fc4d 	bl	80046fc <__mcmp>
 8003e62:	462a      	mov	r2, r5
 8003e64:	9004      	str	r0, [sp, #16]
 8003e66:	4621      	mov	r1, r4
 8003e68:	4648      	mov	r0, r9
 8003e6a:	f000 fc63 	bl	8004734 <__mdiff>
 8003e6e:	68c2      	ldr	r2, [r0, #12]
 8003e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e72:	4606      	mov	r6, r0
 8003e74:	bb02      	cbnz	r2, 8003eb8 <_dtoa_r+0xa40>
 8003e76:	4601      	mov	r1, r0
 8003e78:	9802      	ldr	r0, [sp, #8]
 8003e7a:	f000 fc3f 	bl	80046fc <__mcmp>
 8003e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e80:	4602      	mov	r2, r0
 8003e82:	4631      	mov	r1, r6
 8003e84:	4648      	mov	r0, r9
 8003e86:	920c      	str	r2, [sp, #48]	@ 0x30
 8003e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e8a:	f000 fa05 	bl	8004298 <_Bfree>
 8003e8e:	9b07      	ldr	r3, [sp, #28]
 8003e90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003e92:	9e00      	ldr	r6, [sp, #0]
 8003e94:	ea42 0103 	orr.w	r1, r2, r3
 8003e98:	9b06      	ldr	r3, [sp, #24]
 8003e9a:	4319      	orrs	r1, r3
 8003e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e9e:	d10d      	bne.n	8003ebc <_dtoa_r+0xa44>
 8003ea0:	2b39      	cmp	r3, #57	@ 0x39
 8003ea2:	d027      	beq.n	8003ef4 <_dtoa_r+0xa7c>
 8003ea4:	9a04      	ldr	r2, [sp, #16]
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	dd01      	ble.n	8003eae <_dtoa_r+0xa36>
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	3331      	adds	r3, #49	@ 0x31
 8003eae:	f88b 3000 	strb.w	r3, [fp]
 8003eb2:	e52e      	b.n	8003912 <_dtoa_r+0x49a>
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	e7b9      	b.n	8003e2c <_dtoa_r+0x9b4>
 8003eb8:	2201      	movs	r2, #1
 8003eba:	e7e2      	b.n	8003e82 <_dtoa_r+0xa0a>
 8003ebc:	9904      	ldr	r1, [sp, #16]
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	db04      	blt.n	8003ecc <_dtoa_r+0xa54>
 8003ec2:	9807      	ldr	r0, [sp, #28]
 8003ec4:	4301      	orrs	r1, r0
 8003ec6:	9806      	ldr	r0, [sp, #24]
 8003ec8:	4301      	orrs	r1, r0
 8003eca:	d120      	bne.n	8003f0e <_dtoa_r+0xa96>
 8003ecc:	2a00      	cmp	r2, #0
 8003ece:	ddee      	ble.n	8003eae <_dtoa_r+0xa36>
 8003ed0:	9902      	ldr	r1, [sp, #8]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4648      	mov	r0, r9
 8003ed8:	f000 fba4 	bl	8004624 <__lshift>
 8003edc:	4621      	mov	r1, r4
 8003ede:	9002      	str	r0, [sp, #8]
 8003ee0:	f000 fc0c 	bl	80046fc <__mcmp>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	9b00      	ldr	r3, [sp, #0]
 8003ee8:	dc02      	bgt.n	8003ef0 <_dtoa_r+0xa78>
 8003eea:	d1e0      	bne.n	8003eae <_dtoa_r+0xa36>
 8003eec:	07da      	lsls	r2, r3, #31
 8003eee:	d5de      	bpl.n	8003eae <_dtoa_r+0xa36>
 8003ef0:	2b39      	cmp	r3, #57	@ 0x39
 8003ef2:	d1da      	bne.n	8003eaa <_dtoa_r+0xa32>
 8003ef4:	2339      	movs	r3, #57	@ 0x39
 8003ef6:	f88b 3000 	strb.w	r3, [fp]
 8003efa:	4633      	mov	r3, r6
 8003efc:	461e      	mov	r6, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003f04:	2a39      	cmp	r2, #57	@ 0x39
 8003f06:	d04e      	beq.n	8003fa6 <_dtoa_r+0xb2e>
 8003f08:	3201      	adds	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e501      	b.n	8003912 <_dtoa_r+0x49a>
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	dd03      	ble.n	8003f1a <_dtoa_r+0xaa2>
 8003f12:	2b39      	cmp	r3, #57	@ 0x39
 8003f14:	d0ee      	beq.n	8003ef4 <_dtoa_r+0xa7c>
 8003f16:	3301      	adds	r3, #1
 8003f18:	e7c9      	b.n	8003eae <_dtoa_r+0xa36>
 8003f1a:	9a00      	ldr	r2, [sp, #0]
 8003f1c:	9908      	ldr	r1, [sp, #32]
 8003f1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f22:	428a      	cmp	r2, r1
 8003f24:	d028      	beq.n	8003f78 <_dtoa_r+0xb00>
 8003f26:	9902      	ldr	r1, [sp, #8]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	220a      	movs	r2, #10
 8003f2c:	4648      	mov	r0, r9
 8003f2e:	f000 f9d5 	bl	80042dc <__multadd>
 8003f32:	42af      	cmp	r7, r5
 8003f34:	9002      	str	r0, [sp, #8]
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	f04f 020a 	mov.w	r2, #10
 8003f3e:	4639      	mov	r1, r7
 8003f40:	4648      	mov	r0, r9
 8003f42:	d107      	bne.n	8003f54 <_dtoa_r+0xadc>
 8003f44:	f000 f9ca 	bl	80042dc <__multadd>
 8003f48:	4607      	mov	r7, r0
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	9b00      	ldr	r3, [sp, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	e777      	b.n	8003e44 <_dtoa_r+0x9cc>
 8003f54:	f000 f9c2 	bl	80042dc <__multadd>
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4607      	mov	r7, r0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	220a      	movs	r2, #10
 8003f60:	4648      	mov	r0, r9
 8003f62:	f000 f9bb 	bl	80042dc <__multadd>
 8003f66:	4605      	mov	r5, r0
 8003f68:	e7f0      	b.n	8003f4c <_dtoa_r+0xad4>
 8003f6a:	f1bb 0f00 	cmp.w	fp, #0
 8003f6e:	bfcc      	ite	gt
 8003f70:	465e      	movgt	r6, fp
 8003f72:	2601      	movle	r6, #1
 8003f74:	4456      	add	r6, sl
 8003f76:	2700      	movs	r7, #0
 8003f78:	9902      	ldr	r1, [sp, #8]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4648      	mov	r0, r9
 8003f80:	f000 fb50 	bl	8004624 <__lshift>
 8003f84:	4621      	mov	r1, r4
 8003f86:	9002      	str	r0, [sp, #8]
 8003f88:	f000 fbb8 	bl	80046fc <__mcmp>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	dcb4      	bgt.n	8003efa <_dtoa_r+0xa82>
 8003f90:	d102      	bne.n	8003f98 <_dtoa_r+0xb20>
 8003f92:	9b00      	ldr	r3, [sp, #0]
 8003f94:	07db      	lsls	r3, r3, #31
 8003f96:	d4b0      	bmi.n	8003efa <_dtoa_r+0xa82>
 8003f98:	4633      	mov	r3, r6
 8003f9a:	461e      	mov	r6, r3
 8003f9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fa0:	2a30      	cmp	r2, #48	@ 0x30
 8003fa2:	d0fa      	beq.n	8003f9a <_dtoa_r+0xb22>
 8003fa4:	e4b5      	b.n	8003912 <_dtoa_r+0x49a>
 8003fa6:	459a      	cmp	sl, r3
 8003fa8:	d1a8      	bne.n	8003efc <_dtoa_r+0xa84>
 8003faa:	2331      	movs	r3, #49	@ 0x31
 8003fac:	f108 0801 	add.w	r8, r8, #1
 8003fb0:	f88a 3000 	strb.w	r3, [sl]
 8003fb4:	e4ad      	b.n	8003912 <_dtoa_r+0x49a>
 8003fb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003fb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004014 <_dtoa_r+0xb9c>
 8003fbc:	b11b      	cbz	r3, 8003fc6 <_dtoa_r+0xb4e>
 8003fbe:	f10a 0308 	add.w	r3, sl, #8
 8003fc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4650      	mov	r0, sl
 8003fc8:	b017      	add	sp, #92	@ 0x5c
 8003fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fce:	9b07      	ldr	r3, [sp, #28]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f77f ae2e 	ble.w	8003c32 <_dtoa_r+0x7ba>
 8003fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fd8:	9308      	str	r3, [sp, #32]
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e64d      	b.n	8003c7a <_dtoa_r+0x802>
 8003fde:	f1bb 0f00 	cmp.w	fp, #0
 8003fe2:	f77f aed9 	ble.w	8003d98 <_dtoa_r+0x920>
 8003fe6:	4656      	mov	r6, sl
 8003fe8:	9802      	ldr	r0, [sp, #8]
 8003fea:	4621      	mov	r1, r4
 8003fec:	f7ff f9b9 	bl	8003362 <quorem>
 8003ff0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003ff4:	f806 3b01 	strb.w	r3, [r6], #1
 8003ff8:	eba6 020a 	sub.w	r2, r6, sl
 8003ffc:	4593      	cmp	fp, r2
 8003ffe:	ddb4      	ble.n	8003f6a <_dtoa_r+0xaf2>
 8004000:	9902      	ldr	r1, [sp, #8]
 8004002:	2300      	movs	r3, #0
 8004004:	220a      	movs	r2, #10
 8004006:	4648      	mov	r0, r9
 8004008:	f000 f968 	bl	80042dc <__multadd>
 800400c:	9002      	str	r0, [sp, #8]
 800400e:	e7eb      	b.n	8003fe8 <_dtoa_r+0xb70>
 8004010:	0800542e 	.word	0x0800542e
 8004014:	080053b2 	.word	0x080053b2

08004018 <_free_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4605      	mov	r5, r0
 800401c:	2900      	cmp	r1, #0
 800401e:	d041      	beq.n	80040a4 <_free_r+0x8c>
 8004020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004024:	1f0c      	subs	r4, r1, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfb8      	it	lt
 800402a:	18e4      	addlt	r4, r4, r3
 800402c:	f000 f8e8 	bl	8004200 <__malloc_lock>
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <_free_r+0x90>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	b933      	cbnz	r3, 8004044 <_free_r+0x2c>
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6014      	str	r4, [r2, #0]
 800403a:	4628      	mov	r0, r5
 800403c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004040:	f000 b8e4 	b.w	800420c <__malloc_unlock>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d908      	bls.n	800405a <_free_r+0x42>
 8004048:	6820      	ldr	r0, [r4, #0]
 800404a:	1821      	adds	r1, r4, r0
 800404c:	428b      	cmp	r3, r1
 800404e:	bf01      	itttt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	1809      	addeq	r1, r1, r0
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	e7ed      	b.n	8004036 <_free_r+0x1e>
 800405a:	461a      	mov	r2, r3
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b10b      	cbz	r3, 8004064 <_free_r+0x4c>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d9fa      	bls.n	800405a <_free_r+0x42>
 8004064:	6811      	ldr	r1, [r2, #0]
 8004066:	1850      	adds	r0, r2, r1
 8004068:	42a0      	cmp	r0, r4
 800406a:	d10b      	bne.n	8004084 <_free_r+0x6c>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	4401      	add	r1, r0
 8004070:	1850      	adds	r0, r2, r1
 8004072:	4283      	cmp	r3, r0
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	d1e0      	bne.n	800403a <_free_r+0x22>
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	6053      	str	r3, [r2, #4]
 800407e:	4408      	add	r0, r1
 8004080:	6010      	str	r0, [r2, #0]
 8004082:	e7da      	b.n	800403a <_free_r+0x22>
 8004084:	d902      	bls.n	800408c <_free_r+0x74>
 8004086:	230c      	movs	r3, #12
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	e7d6      	b.n	800403a <_free_r+0x22>
 800408c:	6820      	ldr	r0, [r4, #0]
 800408e:	1821      	adds	r1, r4, r0
 8004090:	428b      	cmp	r3, r1
 8004092:	bf04      	itt	eq
 8004094:	6819      	ldreq	r1, [r3, #0]
 8004096:	685b      	ldreq	r3, [r3, #4]
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	bf04      	itt	eq
 800409c:	1809      	addeq	r1, r1, r0
 800409e:	6021      	streq	r1, [r4, #0]
 80040a0:	6054      	str	r4, [r2, #4]
 80040a2:	e7ca      	b.n	800403a <_free_r+0x22>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
 80040a6:	bf00      	nop
 80040a8:	20000434 	.word	0x20000434

080040ac <malloc>:
 80040ac:	4b02      	ldr	r3, [pc, #8]	@ (80040b8 <malloc+0xc>)
 80040ae:	4601      	mov	r1, r0
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f000 b825 	b.w	8004100 <_malloc_r>
 80040b6:	bf00      	nop
 80040b8:	2000000c 	.word	0x2000000c

080040bc <sbrk_aligned>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0f      	ldr	r6, [pc, #60]	@ (80040fc <sbrk_aligned+0x40>)
 80040c0:	460c      	mov	r4, r1
 80040c2:	6831      	ldr	r1, [r6, #0]
 80040c4:	4605      	mov	r5, r0
 80040c6:	b911      	cbnz	r1, 80040ce <sbrk_aligned+0x12>
 80040c8:	f001 f804 	bl	80050d4 <_sbrk_r>
 80040cc:	6030      	str	r0, [r6, #0]
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 ffff 	bl	80050d4 <_sbrk_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d103      	bne.n	80040e2 <sbrk_aligned+0x26>
 80040da:	f04f 34ff 	mov.w	r4, #4294967295
 80040de:	4620      	mov	r0, r4
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	1cc4      	adds	r4, r0, #3
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d0f8      	beq.n	80040de <sbrk_aligned+0x22>
 80040ec:	1a21      	subs	r1, r4, r0
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 fff0 	bl	80050d4 <_sbrk_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1f2      	bne.n	80040de <sbrk_aligned+0x22>
 80040f8:	e7ef      	b.n	80040da <sbrk_aligned+0x1e>
 80040fa:	bf00      	nop
 80040fc:	20000430 	.word	0x20000430

08004100 <_malloc_r>:
 8004100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004104:	1ccd      	adds	r5, r1, #3
 8004106:	f025 0503 	bic.w	r5, r5, #3
 800410a:	3508      	adds	r5, #8
 800410c:	2d0c      	cmp	r5, #12
 800410e:	bf38      	it	cc
 8004110:	250c      	movcc	r5, #12
 8004112:	2d00      	cmp	r5, #0
 8004114:	4606      	mov	r6, r0
 8004116:	db01      	blt.n	800411c <_malloc_r+0x1c>
 8004118:	42a9      	cmp	r1, r5
 800411a:	d904      	bls.n	8004126 <_malloc_r+0x26>
 800411c:	230c      	movs	r3, #12
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	2000      	movs	r0, #0
 8004122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041fc <_malloc_r+0xfc>
 800412a:	f000 f869 	bl	8004200 <__malloc_lock>
 800412e:	f8d8 3000 	ldr.w	r3, [r8]
 8004132:	461c      	mov	r4, r3
 8004134:	bb44      	cbnz	r4, 8004188 <_malloc_r+0x88>
 8004136:	4629      	mov	r1, r5
 8004138:	4630      	mov	r0, r6
 800413a:	f7ff ffbf 	bl	80040bc <sbrk_aligned>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	4604      	mov	r4, r0
 8004142:	d158      	bne.n	80041f6 <_malloc_r+0xf6>
 8004144:	f8d8 4000 	ldr.w	r4, [r8]
 8004148:	4627      	mov	r7, r4
 800414a:	2f00      	cmp	r7, #0
 800414c:	d143      	bne.n	80041d6 <_malloc_r+0xd6>
 800414e:	2c00      	cmp	r4, #0
 8004150:	d04b      	beq.n	80041ea <_malloc_r+0xea>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	4639      	mov	r1, r7
 8004156:	4630      	mov	r0, r6
 8004158:	eb04 0903 	add.w	r9, r4, r3
 800415c:	f000 ffba 	bl	80050d4 <_sbrk_r>
 8004160:	4581      	cmp	r9, r0
 8004162:	d142      	bne.n	80041ea <_malloc_r+0xea>
 8004164:	6821      	ldr	r1, [r4, #0]
 8004166:	1a6d      	subs	r5, r5, r1
 8004168:	4629      	mov	r1, r5
 800416a:	4630      	mov	r0, r6
 800416c:	f7ff ffa6 	bl	80040bc <sbrk_aligned>
 8004170:	3001      	adds	r0, #1
 8004172:	d03a      	beq.n	80041ea <_malloc_r+0xea>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	442b      	add	r3, r5
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	f8d8 3000 	ldr.w	r3, [r8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	bb62      	cbnz	r2, 80041dc <_malloc_r+0xdc>
 8004182:	f8c8 7000 	str.w	r7, [r8]
 8004186:	e00f      	b.n	80041a8 <_malloc_r+0xa8>
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	1b52      	subs	r2, r2, r5
 800418c:	d420      	bmi.n	80041d0 <_malloc_r+0xd0>
 800418e:	2a0b      	cmp	r2, #11
 8004190:	d917      	bls.n	80041c2 <_malloc_r+0xc2>
 8004192:	1961      	adds	r1, r4, r5
 8004194:	42a3      	cmp	r3, r4
 8004196:	6025      	str	r5, [r4, #0]
 8004198:	bf18      	it	ne
 800419a:	6059      	strne	r1, [r3, #4]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	bf08      	it	eq
 80041a0:	f8c8 1000 	streq.w	r1, [r8]
 80041a4:	5162      	str	r2, [r4, r5]
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 f82f 	bl	800420c <__malloc_unlock>
 80041ae:	f104 000b 	add.w	r0, r4, #11
 80041b2:	1d23      	adds	r3, r4, #4
 80041b4:	f020 0007 	bic.w	r0, r0, #7
 80041b8:	1ac2      	subs	r2, r0, r3
 80041ba:	bf1c      	itt	ne
 80041bc:	1a1b      	subne	r3, r3, r0
 80041be:	50a3      	strne	r3, [r4, r2]
 80041c0:	e7af      	b.n	8004122 <_malloc_r+0x22>
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	bf0c      	ite	eq
 80041c8:	f8c8 2000 	streq.w	r2, [r8]
 80041cc:	605a      	strne	r2, [r3, #4]
 80041ce:	e7eb      	b.n	80041a8 <_malloc_r+0xa8>
 80041d0:	4623      	mov	r3, r4
 80041d2:	6864      	ldr	r4, [r4, #4]
 80041d4:	e7ae      	b.n	8004134 <_malloc_r+0x34>
 80041d6:	463c      	mov	r4, r7
 80041d8:	687f      	ldr	r7, [r7, #4]
 80041da:	e7b6      	b.n	800414a <_malloc_r+0x4a>
 80041dc:	461a      	mov	r2, r3
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d1fb      	bne.n	80041dc <_malloc_r+0xdc>
 80041e4:	2300      	movs	r3, #0
 80041e6:	6053      	str	r3, [r2, #4]
 80041e8:	e7de      	b.n	80041a8 <_malloc_r+0xa8>
 80041ea:	230c      	movs	r3, #12
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 f80c 	bl	800420c <__malloc_unlock>
 80041f4:	e794      	b.n	8004120 <_malloc_r+0x20>
 80041f6:	6005      	str	r5, [r0, #0]
 80041f8:	e7d6      	b.n	80041a8 <_malloc_r+0xa8>
 80041fa:	bf00      	nop
 80041fc:	20000434 	.word	0x20000434

08004200 <__malloc_lock>:
 8004200:	4801      	ldr	r0, [pc, #4]	@ (8004208 <__malloc_lock+0x8>)
 8004202:	f7ff b8ac 	b.w	800335e <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	2000042c 	.word	0x2000042c

0800420c <__malloc_unlock>:
 800420c:	4801      	ldr	r0, [pc, #4]	@ (8004214 <__malloc_unlock+0x8>)
 800420e:	f7ff b8a7 	b.w	8003360 <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	2000042c 	.word	0x2000042c

08004218 <_Balloc>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	69c6      	ldr	r6, [r0, #28]
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	b976      	cbnz	r6, 8004240 <_Balloc+0x28>
 8004222:	2010      	movs	r0, #16
 8004224:	f7ff ff42 	bl	80040ac <malloc>
 8004228:	4602      	mov	r2, r0
 800422a:	61e0      	str	r0, [r4, #28]
 800422c:	b920      	cbnz	r0, 8004238 <_Balloc+0x20>
 800422e:	4b18      	ldr	r3, [pc, #96]	@ (8004290 <_Balloc+0x78>)
 8004230:	4818      	ldr	r0, [pc, #96]	@ (8004294 <_Balloc+0x7c>)
 8004232:	216b      	movs	r1, #107	@ 0x6b
 8004234:	f000 ff6c 	bl	8005110 <__assert_func>
 8004238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800423c:	6006      	str	r6, [r0, #0]
 800423e:	60c6      	str	r6, [r0, #12]
 8004240:	69e6      	ldr	r6, [r4, #28]
 8004242:	68f3      	ldr	r3, [r6, #12]
 8004244:	b183      	cbz	r3, 8004268 <_Balloc+0x50>
 8004246:	69e3      	ldr	r3, [r4, #28]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800424e:	b9b8      	cbnz	r0, 8004280 <_Balloc+0x68>
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f605 	lsl.w	r6, r1, r5
 8004256:	1d72      	adds	r2, r6, #5
 8004258:	0092      	lsls	r2, r2, #2
 800425a:	4620      	mov	r0, r4
 800425c:	f000 ff76 	bl	800514c <_calloc_r>
 8004260:	b160      	cbz	r0, 800427c <_Balloc+0x64>
 8004262:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004266:	e00e      	b.n	8004286 <_Balloc+0x6e>
 8004268:	2221      	movs	r2, #33	@ 0x21
 800426a:	2104      	movs	r1, #4
 800426c:	4620      	mov	r0, r4
 800426e:	f000 ff6d 	bl	800514c <_calloc_r>
 8004272:	69e3      	ldr	r3, [r4, #28]
 8004274:	60f0      	str	r0, [r6, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e4      	bne.n	8004246 <_Balloc+0x2e>
 800427c:	2000      	movs	r0, #0
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	6802      	ldr	r2, [r0, #0]
 8004282:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004286:	2300      	movs	r3, #0
 8004288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800428c:	e7f7      	b.n	800427e <_Balloc+0x66>
 800428e:	bf00      	nop
 8004290:	080053bf 	.word	0x080053bf
 8004294:	0800543f 	.word	0x0800543f

08004298 <_Bfree>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	69c6      	ldr	r6, [r0, #28]
 800429c:	4605      	mov	r5, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	b976      	cbnz	r6, 80042c0 <_Bfree+0x28>
 80042a2:	2010      	movs	r0, #16
 80042a4:	f7ff ff02 	bl	80040ac <malloc>
 80042a8:	4602      	mov	r2, r0
 80042aa:	61e8      	str	r0, [r5, #28]
 80042ac:	b920      	cbnz	r0, 80042b8 <_Bfree+0x20>
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <_Bfree+0x3c>)
 80042b0:	4809      	ldr	r0, [pc, #36]	@ (80042d8 <_Bfree+0x40>)
 80042b2:	218f      	movs	r1, #143	@ 0x8f
 80042b4:	f000 ff2c 	bl	8005110 <__assert_func>
 80042b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80042bc:	6006      	str	r6, [r0, #0]
 80042be:	60c6      	str	r6, [r0, #12]
 80042c0:	b13c      	cbz	r4, 80042d2 <_Bfree+0x3a>
 80042c2:	69eb      	ldr	r3, [r5, #28]
 80042c4:	6862      	ldr	r2, [r4, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042cc:	6021      	str	r1, [r4, #0]
 80042ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	080053bf 	.word	0x080053bf
 80042d8:	0800543f 	.word	0x0800543f

080042dc <__multadd>:
 80042dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e0:	690d      	ldr	r5, [r1, #16]
 80042e2:	4607      	mov	r7, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461e      	mov	r6, r3
 80042e8:	f101 0c14 	add.w	ip, r1, #20
 80042ec:	2000      	movs	r0, #0
 80042ee:	f8dc 3000 	ldr.w	r3, [ip]
 80042f2:	b299      	uxth	r1, r3
 80042f4:	fb02 6101 	mla	r1, r2, r1, r6
 80042f8:	0c1e      	lsrs	r6, r3, #16
 80042fa:	0c0b      	lsrs	r3, r1, #16
 80042fc:	fb02 3306 	mla	r3, r2, r6, r3
 8004300:	b289      	uxth	r1, r1
 8004302:	3001      	adds	r0, #1
 8004304:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004308:	4285      	cmp	r5, r0
 800430a:	f84c 1b04 	str.w	r1, [ip], #4
 800430e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004312:	dcec      	bgt.n	80042ee <__multadd+0x12>
 8004314:	b30e      	cbz	r6, 800435a <__multadd+0x7e>
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	42ab      	cmp	r3, r5
 800431a:	dc19      	bgt.n	8004350 <__multadd+0x74>
 800431c:	6861      	ldr	r1, [r4, #4]
 800431e:	4638      	mov	r0, r7
 8004320:	3101      	adds	r1, #1
 8004322:	f7ff ff79 	bl	8004218 <_Balloc>
 8004326:	4680      	mov	r8, r0
 8004328:	b928      	cbnz	r0, 8004336 <__multadd+0x5a>
 800432a:	4602      	mov	r2, r0
 800432c:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <__multadd+0x84>)
 800432e:	480d      	ldr	r0, [pc, #52]	@ (8004364 <__multadd+0x88>)
 8004330:	21ba      	movs	r1, #186	@ 0xba
 8004332:	f000 feed 	bl	8005110 <__assert_func>
 8004336:	6922      	ldr	r2, [r4, #16]
 8004338:	3202      	adds	r2, #2
 800433a:	f104 010c 	add.w	r1, r4, #12
 800433e:	0092      	lsls	r2, r2, #2
 8004340:	300c      	adds	r0, #12
 8004342:	f000 fed7 	bl	80050f4 <memcpy>
 8004346:	4621      	mov	r1, r4
 8004348:	4638      	mov	r0, r7
 800434a:	f7ff ffa5 	bl	8004298 <_Bfree>
 800434e:	4644      	mov	r4, r8
 8004350:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004354:	3501      	adds	r5, #1
 8004356:	615e      	str	r6, [r3, #20]
 8004358:	6125      	str	r5, [r4, #16]
 800435a:	4620      	mov	r0, r4
 800435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004360:	0800542e 	.word	0x0800542e
 8004364:	0800543f 	.word	0x0800543f

08004368 <__hi0bits>:
 8004368:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800436c:	4603      	mov	r3, r0
 800436e:	bf36      	itet	cc
 8004370:	0403      	lslcc	r3, r0, #16
 8004372:	2000      	movcs	r0, #0
 8004374:	2010      	movcc	r0, #16
 8004376:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800437a:	bf3c      	itt	cc
 800437c:	021b      	lslcc	r3, r3, #8
 800437e:	3008      	addcc	r0, #8
 8004380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004384:	bf3c      	itt	cc
 8004386:	011b      	lslcc	r3, r3, #4
 8004388:	3004      	addcc	r0, #4
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438e:	bf3c      	itt	cc
 8004390:	009b      	lslcc	r3, r3, #2
 8004392:	3002      	addcc	r0, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	db05      	blt.n	80043a4 <__hi0bits+0x3c>
 8004398:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800439c:	f100 0001 	add.w	r0, r0, #1
 80043a0:	bf08      	it	eq
 80043a2:	2020      	moveq	r0, #32
 80043a4:	4770      	bx	lr

080043a6 <__lo0bits>:
 80043a6:	6803      	ldr	r3, [r0, #0]
 80043a8:	4602      	mov	r2, r0
 80043aa:	f013 0007 	ands.w	r0, r3, #7
 80043ae:	d00b      	beq.n	80043c8 <__lo0bits+0x22>
 80043b0:	07d9      	lsls	r1, r3, #31
 80043b2:	d421      	bmi.n	80043f8 <__lo0bits+0x52>
 80043b4:	0798      	lsls	r0, r3, #30
 80043b6:	bf49      	itett	mi
 80043b8:	085b      	lsrmi	r3, r3, #1
 80043ba:	089b      	lsrpl	r3, r3, #2
 80043bc:	2001      	movmi	r0, #1
 80043be:	6013      	strmi	r3, [r2, #0]
 80043c0:	bf5c      	itt	pl
 80043c2:	6013      	strpl	r3, [r2, #0]
 80043c4:	2002      	movpl	r0, #2
 80043c6:	4770      	bx	lr
 80043c8:	b299      	uxth	r1, r3
 80043ca:	b909      	cbnz	r1, 80043d0 <__lo0bits+0x2a>
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	2010      	movs	r0, #16
 80043d0:	b2d9      	uxtb	r1, r3
 80043d2:	b909      	cbnz	r1, 80043d8 <__lo0bits+0x32>
 80043d4:	3008      	adds	r0, #8
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	0719      	lsls	r1, r3, #28
 80043da:	bf04      	itt	eq
 80043dc:	091b      	lsreq	r3, r3, #4
 80043de:	3004      	addeq	r0, #4
 80043e0:	0799      	lsls	r1, r3, #30
 80043e2:	bf04      	itt	eq
 80043e4:	089b      	lsreq	r3, r3, #2
 80043e6:	3002      	addeq	r0, #2
 80043e8:	07d9      	lsls	r1, r3, #31
 80043ea:	d403      	bmi.n	80043f4 <__lo0bits+0x4e>
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	f100 0001 	add.w	r0, r0, #1
 80043f2:	d003      	beq.n	80043fc <__lo0bits+0x56>
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4770      	bx	lr
 80043f8:	2000      	movs	r0, #0
 80043fa:	4770      	bx	lr
 80043fc:	2020      	movs	r0, #32
 80043fe:	4770      	bx	lr

08004400 <__i2b>:
 8004400:	b510      	push	{r4, lr}
 8004402:	460c      	mov	r4, r1
 8004404:	2101      	movs	r1, #1
 8004406:	f7ff ff07 	bl	8004218 <_Balloc>
 800440a:	4602      	mov	r2, r0
 800440c:	b928      	cbnz	r0, 800441a <__i2b+0x1a>
 800440e:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <__i2b+0x24>)
 8004410:	4805      	ldr	r0, [pc, #20]	@ (8004428 <__i2b+0x28>)
 8004412:	f240 1145 	movw	r1, #325	@ 0x145
 8004416:	f000 fe7b 	bl	8005110 <__assert_func>
 800441a:	2301      	movs	r3, #1
 800441c:	6144      	str	r4, [r0, #20]
 800441e:	6103      	str	r3, [r0, #16]
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	0800542e 	.word	0x0800542e
 8004428:	0800543f 	.word	0x0800543f

0800442c <__multiply>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	4617      	mov	r7, r2
 8004432:	690a      	ldr	r2, [r1, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	bfa8      	it	ge
 800443a:	463b      	movge	r3, r7
 800443c:	4689      	mov	r9, r1
 800443e:	bfa4      	itt	ge
 8004440:	460f      	movge	r7, r1
 8004442:	4699      	movge	r9, r3
 8004444:	693d      	ldr	r5, [r7, #16]
 8004446:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	eb05 060a 	add.w	r6, r5, sl
 8004452:	42b3      	cmp	r3, r6
 8004454:	b085      	sub	sp, #20
 8004456:	bfb8      	it	lt
 8004458:	3101      	addlt	r1, #1
 800445a:	f7ff fedd 	bl	8004218 <_Balloc>
 800445e:	b930      	cbnz	r0, 800446e <__multiply+0x42>
 8004460:	4602      	mov	r2, r0
 8004462:	4b41      	ldr	r3, [pc, #260]	@ (8004568 <__multiply+0x13c>)
 8004464:	4841      	ldr	r0, [pc, #260]	@ (800456c <__multiply+0x140>)
 8004466:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800446a:	f000 fe51 	bl	8005110 <__assert_func>
 800446e:	f100 0414 	add.w	r4, r0, #20
 8004472:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004476:	4623      	mov	r3, r4
 8004478:	2200      	movs	r2, #0
 800447a:	4573      	cmp	r3, lr
 800447c:	d320      	bcc.n	80044c0 <__multiply+0x94>
 800447e:	f107 0814 	add.w	r8, r7, #20
 8004482:	f109 0114 	add.w	r1, r9, #20
 8004486:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800448a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800448e:	9302      	str	r3, [sp, #8]
 8004490:	1beb      	subs	r3, r5, r7
 8004492:	3b15      	subs	r3, #21
 8004494:	f023 0303 	bic.w	r3, r3, #3
 8004498:	3304      	adds	r3, #4
 800449a:	3715      	adds	r7, #21
 800449c:	42bd      	cmp	r5, r7
 800449e:	bf38      	it	cc
 80044a0:	2304      	movcc	r3, #4
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	9b02      	ldr	r3, [sp, #8]
 80044a6:	9103      	str	r1, [sp, #12]
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d80c      	bhi.n	80044c6 <__multiply+0x9a>
 80044ac:	2e00      	cmp	r6, #0
 80044ae:	dd03      	ble.n	80044b8 <__multiply+0x8c>
 80044b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d055      	beq.n	8004564 <__multiply+0x138>
 80044b8:	6106      	str	r6, [r0, #16]
 80044ba:	b005      	add	sp, #20
 80044bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c0:	f843 2b04 	str.w	r2, [r3], #4
 80044c4:	e7d9      	b.n	800447a <__multiply+0x4e>
 80044c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80044ca:	f1ba 0f00 	cmp.w	sl, #0
 80044ce:	d01f      	beq.n	8004510 <__multiply+0xe4>
 80044d0:	46c4      	mov	ip, r8
 80044d2:	46a1      	mov	r9, r4
 80044d4:	2700      	movs	r7, #0
 80044d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80044da:	f8d9 3000 	ldr.w	r3, [r9]
 80044de:	fa1f fb82 	uxth.w	fp, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80044e8:	443b      	add	r3, r7
 80044ea:	f8d9 7000 	ldr.w	r7, [r9]
 80044ee:	0c12      	lsrs	r2, r2, #16
 80044f0:	0c3f      	lsrs	r7, r7, #16
 80044f2:	fb0a 7202 	mla	r2, sl, r2, r7
 80044f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004500:	4565      	cmp	r5, ip
 8004502:	f849 3b04 	str.w	r3, [r9], #4
 8004506:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800450a:	d8e4      	bhi.n	80044d6 <__multiply+0xaa>
 800450c:	9b01      	ldr	r3, [sp, #4]
 800450e:	50e7      	str	r7, [r4, r3]
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004516:	3104      	adds	r1, #4
 8004518:	f1b9 0f00 	cmp.w	r9, #0
 800451c:	d020      	beq.n	8004560 <__multiply+0x134>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	4647      	mov	r7, r8
 8004522:	46a4      	mov	ip, r4
 8004524:	f04f 0a00 	mov.w	sl, #0
 8004528:	f8b7 b000 	ldrh.w	fp, [r7]
 800452c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004530:	fb09 220b 	mla	r2, r9, fp, r2
 8004534:	4452      	add	r2, sl
 8004536:	b29b      	uxth	r3, r3
 8004538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800453c:	f84c 3b04 	str.w	r3, [ip], #4
 8004540:	f857 3b04 	ldr.w	r3, [r7], #4
 8004544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004548:	f8bc 3000 	ldrh.w	r3, [ip]
 800454c:	fb09 330a 	mla	r3, r9, sl, r3
 8004550:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004554:	42bd      	cmp	r5, r7
 8004556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800455a:	d8e5      	bhi.n	8004528 <__multiply+0xfc>
 800455c:	9a01      	ldr	r2, [sp, #4]
 800455e:	50a3      	str	r3, [r4, r2]
 8004560:	3404      	adds	r4, #4
 8004562:	e79f      	b.n	80044a4 <__multiply+0x78>
 8004564:	3e01      	subs	r6, #1
 8004566:	e7a1      	b.n	80044ac <__multiply+0x80>
 8004568:	0800542e 	.word	0x0800542e
 800456c:	0800543f 	.word	0x0800543f

08004570 <__pow5mult>:
 8004570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004574:	4615      	mov	r5, r2
 8004576:	f012 0203 	ands.w	r2, r2, #3
 800457a:	4607      	mov	r7, r0
 800457c:	460e      	mov	r6, r1
 800457e:	d007      	beq.n	8004590 <__pow5mult+0x20>
 8004580:	4c25      	ldr	r4, [pc, #148]	@ (8004618 <__pow5mult+0xa8>)
 8004582:	3a01      	subs	r2, #1
 8004584:	2300      	movs	r3, #0
 8004586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800458a:	f7ff fea7 	bl	80042dc <__multadd>
 800458e:	4606      	mov	r6, r0
 8004590:	10ad      	asrs	r5, r5, #2
 8004592:	d03d      	beq.n	8004610 <__pow5mult+0xa0>
 8004594:	69fc      	ldr	r4, [r7, #28]
 8004596:	b97c      	cbnz	r4, 80045b8 <__pow5mult+0x48>
 8004598:	2010      	movs	r0, #16
 800459a:	f7ff fd87 	bl	80040ac <malloc>
 800459e:	4602      	mov	r2, r0
 80045a0:	61f8      	str	r0, [r7, #28]
 80045a2:	b928      	cbnz	r0, 80045b0 <__pow5mult+0x40>
 80045a4:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <__pow5mult+0xac>)
 80045a6:	481e      	ldr	r0, [pc, #120]	@ (8004620 <__pow5mult+0xb0>)
 80045a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80045ac:	f000 fdb0 	bl	8005110 <__assert_func>
 80045b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045b4:	6004      	str	r4, [r0, #0]
 80045b6:	60c4      	str	r4, [r0, #12]
 80045b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80045bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045c0:	b94c      	cbnz	r4, 80045d6 <__pow5mult+0x66>
 80045c2:	f240 2171 	movw	r1, #625	@ 0x271
 80045c6:	4638      	mov	r0, r7
 80045c8:	f7ff ff1a 	bl	8004400 <__i2b>
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80045d2:	4604      	mov	r4, r0
 80045d4:	6003      	str	r3, [r0, #0]
 80045d6:	f04f 0900 	mov.w	r9, #0
 80045da:	07eb      	lsls	r3, r5, #31
 80045dc:	d50a      	bpl.n	80045f4 <__pow5mult+0x84>
 80045de:	4631      	mov	r1, r6
 80045e0:	4622      	mov	r2, r4
 80045e2:	4638      	mov	r0, r7
 80045e4:	f7ff ff22 	bl	800442c <__multiply>
 80045e8:	4631      	mov	r1, r6
 80045ea:	4680      	mov	r8, r0
 80045ec:	4638      	mov	r0, r7
 80045ee:	f7ff fe53 	bl	8004298 <_Bfree>
 80045f2:	4646      	mov	r6, r8
 80045f4:	106d      	asrs	r5, r5, #1
 80045f6:	d00b      	beq.n	8004610 <__pow5mult+0xa0>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	b938      	cbnz	r0, 800460c <__pow5mult+0x9c>
 80045fc:	4622      	mov	r2, r4
 80045fe:	4621      	mov	r1, r4
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff13 	bl	800442c <__multiply>
 8004606:	6020      	str	r0, [r4, #0]
 8004608:	f8c0 9000 	str.w	r9, [r0]
 800460c:	4604      	mov	r4, r0
 800460e:	e7e4      	b.n	80045da <__pow5mult+0x6a>
 8004610:	4630      	mov	r0, r6
 8004612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004616:	bf00      	nop
 8004618:	080054f0 	.word	0x080054f0
 800461c:	080053bf 	.word	0x080053bf
 8004620:	0800543f 	.word	0x0800543f

08004624 <__lshift>:
 8004624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	460c      	mov	r4, r1
 800462a:	6849      	ldr	r1, [r1, #4]
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004632:	68a3      	ldr	r3, [r4, #8]
 8004634:	4607      	mov	r7, r0
 8004636:	4691      	mov	r9, r2
 8004638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800463c:	f108 0601 	add.w	r6, r8, #1
 8004640:	42b3      	cmp	r3, r6
 8004642:	db0b      	blt.n	800465c <__lshift+0x38>
 8004644:	4638      	mov	r0, r7
 8004646:	f7ff fde7 	bl	8004218 <_Balloc>
 800464a:	4605      	mov	r5, r0
 800464c:	b948      	cbnz	r0, 8004662 <__lshift+0x3e>
 800464e:	4602      	mov	r2, r0
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <__lshift+0xd0>)
 8004652:	4829      	ldr	r0, [pc, #164]	@ (80046f8 <__lshift+0xd4>)
 8004654:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004658:	f000 fd5a 	bl	8005110 <__assert_func>
 800465c:	3101      	adds	r1, #1
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	e7ee      	b.n	8004640 <__lshift+0x1c>
 8004662:	2300      	movs	r3, #0
 8004664:	f100 0114 	add.w	r1, r0, #20
 8004668:	f100 0210 	add.w	r2, r0, #16
 800466c:	4618      	mov	r0, r3
 800466e:	4553      	cmp	r3, sl
 8004670:	db33      	blt.n	80046da <__lshift+0xb6>
 8004672:	6920      	ldr	r0, [r4, #16]
 8004674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004678:	f104 0314 	add.w	r3, r4, #20
 800467c:	f019 091f 	ands.w	r9, r9, #31
 8004680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004688:	d02b      	beq.n	80046e2 <__lshift+0xbe>
 800468a:	f1c9 0e20 	rsb	lr, r9, #32
 800468e:	468a      	mov	sl, r1
 8004690:	2200      	movs	r2, #0
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	fa00 f009 	lsl.w	r0, r0, r9
 8004698:	4310      	orrs	r0, r2
 800469a:	f84a 0b04 	str.w	r0, [sl], #4
 800469e:	f853 2b04 	ldr.w	r2, [r3], #4
 80046a2:	459c      	cmp	ip, r3
 80046a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80046a8:	d8f3      	bhi.n	8004692 <__lshift+0x6e>
 80046aa:	ebac 0304 	sub.w	r3, ip, r4
 80046ae:	3b15      	subs	r3, #21
 80046b0:	f023 0303 	bic.w	r3, r3, #3
 80046b4:	3304      	adds	r3, #4
 80046b6:	f104 0015 	add.w	r0, r4, #21
 80046ba:	4560      	cmp	r0, ip
 80046bc:	bf88      	it	hi
 80046be:	2304      	movhi	r3, #4
 80046c0:	50ca      	str	r2, [r1, r3]
 80046c2:	b10a      	cbz	r2, 80046c8 <__lshift+0xa4>
 80046c4:	f108 0602 	add.w	r6, r8, #2
 80046c8:	3e01      	subs	r6, #1
 80046ca:	4638      	mov	r0, r7
 80046cc:	612e      	str	r6, [r5, #16]
 80046ce:	4621      	mov	r1, r4
 80046d0:	f7ff fde2 	bl	8004298 <_Bfree>
 80046d4:	4628      	mov	r0, r5
 80046d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046da:	f842 0f04 	str.w	r0, [r2, #4]!
 80046de:	3301      	adds	r3, #1
 80046e0:	e7c5      	b.n	800466e <__lshift+0x4a>
 80046e2:	3904      	subs	r1, #4
 80046e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80046ec:	459c      	cmp	ip, r3
 80046ee:	d8f9      	bhi.n	80046e4 <__lshift+0xc0>
 80046f0:	e7ea      	b.n	80046c8 <__lshift+0xa4>
 80046f2:	bf00      	nop
 80046f4:	0800542e 	.word	0x0800542e
 80046f8:	0800543f 	.word	0x0800543f

080046fc <__mcmp>:
 80046fc:	690a      	ldr	r2, [r1, #16]
 80046fe:	4603      	mov	r3, r0
 8004700:	6900      	ldr	r0, [r0, #16]
 8004702:	1a80      	subs	r0, r0, r2
 8004704:	b530      	push	{r4, r5, lr}
 8004706:	d10e      	bne.n	8004726 <__mcmp+0x2a>
 8004708:	3314      	adds	r3, #20
 800470a:	3114      	adds	r1, #20
 800470c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004710:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004714:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004718:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800471c:	4295      	cmp	r5, r2
 800471e:	d003      	beq.n	8004728 <__mcmp+0x2c>
 8004720:	d205      	bcs.n	800472e <__mcmp+0x32>
 8004722:	f04f 30ff 	mov.w	r0, #4294967295
 8004726:	bd30      	pop	{r4, r5, pc}
 8004728:	42a3      	cmp	r3, r4
 800472a:	d3f3      	bcc.n	8004714 <__mcmp+0x18>
 800472c:	e7fb      	b.n	8004726 <__mcmp+0x2a>
 800472e:	2001      	movs	r0, #1
 8004730:	e7f9      	b.n	8004726 <__mcmp+0x2a>
	...

08004734 <__mdiff>:
 8004734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004738:	4689      	mov	r9, r1
 800473a:	4606      	mov	r6, r0
 800473c:	4611      	mov	r1, r2
 800473e:	4648      	mov	r0, r9
 8004740:	4614      	mov	r4, r2
 8004742:	f7ff ffdb 	bl	80046fc <__mcmp>
 8004746:	1e05      	subs	r5, r0, #0
 8004748:	d112      	bne.n	8004770 <__mdiff+0x3c>
 800474a:	4629      	mov	r1, r5
 800474c:	4630      	mov	r0, r6
 800474e:	f7ff fd63 	bl	8004218 <_Balloc>
 8004752:	4602      	mov	r2, r0
 8004754:	b928      	cbnz	r0, 8004762 <__mdiff+0x2e>
 8004756:	4b3f      	ldr	r3, [pc, #252]	@ (8004854 <__mdiff+0x120>)
 8004758:	f240 2137 	movw	r1, #567	@ 0x237
 800475c:	483e      	ldr	r0, [pc, #248]	@ (8004858 <__mdiff+0x124>)
 800475e:	f000 fcd7 	bl	8005110 <__assert_func>
 8004762:	2301      	movs	r3, #1
 8004764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004768:	4610      	mov	r0, r2
 800476a:	b003      	add	sp, #12
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	bfbc      	itt	lt
 8004772:	464b      	movlt	r3, r9
 8004774:	46a1      	movlt	r9, r4
 8004776:	4630      	mov	r0, r6
 8004778:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800477c:	bfba      	itte	lt
 800477e:	461c      	movlt	r4, r3
 8004780:	2501      	movlt	r5, #1
 8004782:	2500      	movge	r5, #0
 8004784:	f7ff fd48 	bl	8004218 <_Balloc>
 8004788:	4602      	mov	r2, r0
 800478a:	b918      	cbnz	r0, 8004794 <__mdiff+0x60>
 800478c:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <__mdiff+0x120>)
 800478e:	f240 2145 	movw	r1, #581	@ 0x245
 8004792:	e7e3      	b.n	800475c <__mdiff+0x28>
 8004794:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004798:	6926      	ldr	r6, [r4, #16]
 800479a:	60c5      	str	r5, [r0, #12]
 800479c:	f109 0310 	add.w	r3, r9, #16
 80047a0:	f109 0514 	add.w	r5, r9, #20
 80047a4:	f104 0e14 	add.w	lr, r4, #20
 80047a8:	f100 0b14 	add.w	fp, r0, #20
 80047ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80047b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	46d9      	mov	r9, fp
 80047b8:	f04f 0c00 	mov.w	ip, #0
 80047bc:	9b01      	ldr	r3, [sp, #4]
 80047be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80047c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	fa1f f38a 	uxth.w	r3, sl
 80047cc:	4619      	mov	r1, r3
 80047ce:	b283      	uxth	r3, r0
 80047d0:	1acb      	subs	r3, r1, r3
 80047d2:	0c00      	lsrs	r0, r0, #16
 80047d4:	4463      	add	r3, ip
 80047d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80047da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80047de:	b29b      	uxth	r3, r3
 80047e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80047e4:	4576      	cmp	r6, lr
 80047e6:	f849 3b04 	str.w	r3, [r9], #4
 80047ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80047ee:	d8e5      	bhi.n	80047bc <__mdiff+0x88>
 80047f0:	1b33      	subs	r3, r6, r4
 80047f2:	3b15      	subs	r3, #21
 80047f4:	f023 0303 	bic.w	r3, r3, #3
 80047f8:	3415      	adds	r4, #21
 80047fa:	3304      	adds	r3, #4
 80047fc:	42a6      	cmp	r6, r4
 80047fe:	bf38      	it	cc
 8004800:	2304      	movcc	r3, #4
 8004802:	441d      	add	r5, r3
 8004804:	445b      	add	r3, fp
 8004806:	461e      	mov	r6, r3
 8004808:	462c      	mov	r4, r5
 800480a:	4544      	cmp	r4, r8
 800480c:	d30e      	bcc.n	800482c <__mdiff+0xf8>
 800480e:	f108 0103 	add.w	r1, r8, #3
 8004812:	1b49      	subs	r1, r1, r5
 8004814:	f021 0103 	bic.w	r1, r1, #3
 8004818:	3d03      	subs	r5, #3
 800481a:	45a8      	cmp	r8, r5
 800481c:	bf38      	it	cc
 800481e:	2100      	movcc	r1, #0
 8004820:	440b      	add	r3, r1
 8004822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004826:	b191      	cbz	r1, 800484e <__mdiff+0x11a>
 8004828:	6117      	str	r7, [r2, #16]
 800482a:	e79d      	b.n	8004768 <__mdiff+0x34>
 800482c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004830:	46e6      	mov	lr, ip
 8004832:	0c08      	lsrs	r0, r1, #16
 8004834:	fa1c fc81 	uxtah	ip, ip, r1
 8004838:	4471      	add	r1, lr
 800483a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800483e:	b289      	uxth	r1, r1
 8004840:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004844:	f846 1b04 	str.w	r1, [r6], #4
 8004848:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800484c:	e7dd      	b.n	800480a <__mdiff+0xd6>
 800484e:	3f01      	subs	r7, #1
 8004850:	e7e7      	b.n	8004822 <__mdiff+0xee>
 8004852:	bf00      	nop
 8004854:	0800542e 	.word	0x0800542e
 8004858:	0800543f 	.word	0x0800543f

0800485c <__d2b>:
 800485c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004860:	460f      	mov	r7, r1
 8004862:	2101      	movs	r1, #1
 8004864:	ec59 8b10 	vmov	r8, r9, d0
 8004868:	4616      	mov	r6, r2
 800486a:	f7ff fcd5 	bl	8004218 <_Balloc>
 800486e:	4604      	mov	r4, r0
 8004870:	b930      	cbnz	r0, 8004880 <__d2b+0x24>
 8004872:	4602      	mov	r2, r0
 8004874:	4b23      	ldr	r3, [pc, #140]	@ (8004904 <__d2b+0xa8>)
 8004876:	4824      	ldr	r0, [pc, #144]	@ (8004908 <__d2b+0xac>)
 8004878:	f240 310f 	movw	r1, #783	@ 0x30f
 800487c:	f000 fc48 	bl	8005110 <__assert_func>
 8004880:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004884:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004888:	b10d      	cbz	r5, 800488e <__d2b+0x32>
 800488a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	f1b8 0300 	subs.w	r3, r8, #0
 8004894:	d023      	beq.n	80048de <__d2b+0x82>
 8004896:	4668      	mov	r0, sp
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	f7ff fd84 	bl	80043a6 <__lo0bits>
 800489e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80048a2:	b1d0      	cbz	r0, 80048da <__d2b+0x7e>
 80048a4:	f1c0 0320 	rsb	r3, r0, #32
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	430b      	orrs	r3, r1
 80048ae:	40c2      	lsrs	r2, r0
 80048b0:	6163      	str	r3, [r4, #20]
 80048b2:	9201      	str	r2, [sp, #4]
 80048b4:	9b01      	ldr	r3, [sp, #4]
 80048b6:	61a3      	str	r3, [r4, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2201      	moveq	r2, #1
 80048be:	2202      	movne	r2, #2
 80048c0:	6122      	str	r2, [r4, #16]
 80048c2:	b1a5      	cbz	r5, 80048ee <__d2b+0x92>
 80048c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80048c8:	4405      	add	r5, r0
 80048ca:	603d      	str	r5, [r7, #0]
 80048cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80048d0:	6030      	str	r0, [r6, #0]
 80048d2:	4620      	mov	r0, r4
 80048d4:	b003      	add	sp, #12
 80048d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048da:	6161      	str	r1, [r4, #20]
 80048dc:	e7ea      	b.n	80048b4 <__d2b+0x58>
 80048de:	a801      	add	r0, sp, #4
 80048e0:	f7ff fd61 	bl	80043a6 <__lo0bits>
 80048e4:	9b01      	ldr	r3, [sp, #4]
 80048e6:	6163      	str	r3, [r4, #20]
 80048e8:	3020      	adds	r0, #32
 80048ea:	2201      	movs	r2, #1
 80048ec:	e7e8      	b.n	80048c0 <__d2b+0x64>
 80048ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80048f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80048f6:	6038      	str	r0, [r7, #0]
 80048f8:	6918      	ldr	r0, [r3, #16]
 80048fa:	f7ff fd35 	bl	8004368 <__hi0bits>
 80048fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004902:	e7e5      	b.n	80048d0 <__d2b+0x74>
 8004904:	0800542e 	.word	0x0800542e
 8004908:	0800543f 	.word	0x0800543f

0800490c <__ssputs_r>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	688e      	ldr	r6, [r1, #8]
 8004912:	461f      	mov	r7, r3
 8004914:	42be      	cmp	r6, r7
 8004916:	680b      	ldr	r3, [r1, #0]
 8004918:	4682      	mov	sl, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4690      	mov	r8, r2
 800491e:	d82d      	bhi.n	800497c <__ssputs_r+0x70>
 8004920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004924:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004928:	d026      	beq.n	8004978 <__ssputs_r+0x6c>
 800492a:	6965      	ldr	r5, [r4, #20]
 800492c:	6909      	ldr	r1, [r1, #16]
 800492e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004932:	eba3 0901 	sub.w	r9, r3, r1
 8004936:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800493a:	1c7b      	adds	r3, r7, #1
 800493c:	444b      	add	r3, r9
 800493e:	106d      	asrs	r5, r5, #1
 8004940:	429d      	cmp	r5, r3
 8004942:	bf38      	it	cc
 8004944:	461d      	movcc	r5, r3
 8004946:	0553      	lsls	r3, r2, #21
 8004948:	d527      	bpl.n	800499a <__ssputs_r+0x8e>
 800494a:	4629      	mov	r1, r5
 800494c:	f7ff fbd8 	bl	8004100 <_malloc_r>
 8004950:	4606      	mov	r6, r0
 8004952:	b360      	cbz	r0, 80049ae <__ssputs_r+0xa2>
 8004954:	6921      	ldr	r1, [r4, #16]
 8004956:	464a      	mov	r2, r9
 8004958:	f000 fbcc 	bl	80050f4 <memcpy>
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	6126      	str	r6, [r4, #16]
 800496a:	6165      	str	r5, [r4, #20]
 800496c:	444e      	add	r6, r9
 800496e:	eba5 0509 	sub.w	r5, r5, r9
 8004972:	6026      	str	r6, [r4, #0]
 8004974:	60a5      	str	r5, [r4, #8]
 8004976:	463e      	mov	r6, r7
 8004978:	42be      	cmp	r6, r7
 800497a:	d900      	bls.n	800497e <__ssputs_r+0x72>
 800497c:	463e      	mov	r6, r7
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	4632      	mov	r2, r6
 8004982:	4641      	mov	r1, r8
 8004984:	f000 fb6a 	bl	800505c <memmove>
 8004988:	68a3      	ldr	r3, [r4, #8]
 800498a:	1b9b      	subs	r3, r3, r6
 800498c:	60a3      	str	r3, [r4, #8]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	4433      	add	r3, r6
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	462a      	mov	r2, r5
 800499c:	f000 fbfc 	bl	8005198 <_realloc_r>
 80049a0:	4606      	mov	r6, r0
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d1e0      	bne.n	8004968 <__ssputs_r+0x5c>
 80049a6:	6921      	ldr	r1, [r4, #16]
 80049a8:	4650      	mov	r0, sl
 80049aa:	f7ff fb35 	bl	8004018 <_free_r>
 80049ae:	230c      	movs	r3, #12
 80049b0:	f8ca 3000 	str.w	r3, [sl]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	e7e9      	b.n	8004996 <__ssputs_r+0x8a>
	...

080049c4 <_svfiprintf_r>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	4698      	mov	r8, r3
 80049ca:	898b      	ldrh	r3, [r1, #12]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	b09d      	sub	sp, #116	@ 0x74
 80049d0:	4607      	mov	r7, r0
 80049d2:	460d      	mov	r5, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	d510      	bpl.n	80049fa <_svfiprintf_r+0x36>
 80049d8:	690b      	ldr	r3, [r1, #16]
 80049da:	b973      	cbnz	r3, 80049fa <_svfiprintf_r+0x36>
 80049dc:	2140      	movs	r1, #64	@ 0x40
 80049de:	f7ff fb8f 	bl	8004100 <_malloc_r>
 80049e2:	6028      	str	r0, [r5, #0]
 80049e4:	6128      	str	r0, [r5, #16]
 80049e6:	b930      	cbnz	r0, 80049f6 <_svfiprintf_r+0x32>
 80049e8:	230c      	movs	r3, #12
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	b01d      	add	sp, #116	@ 0x74
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	2340      	movs	r3, #64	@ 0x40
 80049f8:	616b      	str	r3, [r5, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049fe:	2320      	movs	r3, #32
 8004a00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a08:	2330      	movs	r3, #48	@ 0x30
 8004a0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ba8 <_svfiprintf_r+0x1e4>
 8004a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a12:	f04f 0901 	mov.w	r9, #1
 8004a16:	4623      	mov	r3, r4
 8004a18:	469a      	mov	sl, r3
 8004a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a1e:	b10a      	cbz	r2, 8004a24 <_svfiprintf_r+0x60>
 8004a20:	2a25      	cmp	r2, #37	@ 0x25
 8004a22:	d1f9      	bne.n	8004a18 <_svfiprintf_r+0x54>
 8004a24:	ebba 0b04 	subs.w	fp, sl, r4
 8004a28:	d00b      	beq.n	8004a42 <_svfiprintf_r+0x7e>
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4638      	mov	r0, r7
 8004a32:	f7ff ff6b 	bl	800490c <__ssputs_r>
 8004a36:	3001      	adds	r0, #1
 8004a38:	f000 80a7 	beq.w	8004b8a <_svfiprintf_r+0x1c6>
 8004a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a3e:	445a      	add	r2, fp
 8004a40:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 809f 	beq.w	8004b8a <_svfiprintf_r+0x1c6>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a56:	f10a 0a01 	add.w	sl, sl, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	9307      	str	r3, [sp, #28]
 8004a5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a64:	4654      	mov	r4, sl
 8004a66:	2205      	movs	r2, #5
 8004a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6c:	484e      	ldr	r0, [pc, #312]	@ (8004ba8 <_svfiprintf_r+0x1e4>)
 8004a6e:	f7fb fbaf 	bl	80001d0 <memchr>
 8004a72:	9a04      	ldr	r2, [sp, #16]
 8004a74:	b9d8      	cbnz	r0, 8004aae <_svfiprintf_r+0xea>
 8004a76:	06d0      	lsls	r0, r2, #27
 8004a78:	bf44      	itt	mi
 8004a7a:	2320      	movmi	r3, #32
 8004a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a80:	0711      	lsls	r1, r2, #28
 8004a82:	bf44      	itt	mi
 8004a84:	232b      	movmi	r3, #43	@ 0x2b
 8004a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a90:	d015      	beq.n	8004abe <_svfiprintf_r+0xfa>
 8004a92:	9a07      	ldr	r2, [sp, #28]
 8004a94:	4654      	mov	r4, sl
 8004a96:	2000      	movs	r0, #0
 8004a98:	f04f 0c0a 	mov.w	ip, #10
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa2:	3b30      	subs	r3, #48	@ 0x30
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d94b      	bls.n	8004b40 <_svfiprintf_r+0x17c>
 8004aa8:	b1b0      	cbz	r0, 8004ad8 <_svfiprintf_r+0x114>
 8004aaa:	9207      	str	r2, [sp, #28]
 8004aac:	e014      	b.n	8004ad8 <_svfiprintf_r+0x114>
 8004aae:	eba0 0308 	sub.w	r3, r0, r8
 8004ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	46a2      	mov	sl, r4
 8004abc:	e7d2      	b.n	8004a64 <_svfiprintf_r+0xa0>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	1d19      	adds	r1, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9103      	str	r1, [sp, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfbb      	ittet	lt
 8004aca:	425b      	neglt	r3, r3
 8004acc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad0:	9307      	strge	r3, [sp, #28]
 8004ad2:	9307      	strlt	r3, [sp, #28]
 8004ad4:	bfb8      	it	lt
 8004ad6:	9204      	strlt	r2, [sp, #16]
 8004ad8:	7823      	ldrb	r3, [r4, #0]
 8004ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8004adc:	d10a      	bne.n	8004af4 <_svfiprintf_r+0x130>
 8004ade:	7863      	ldrb	r3, [r4, #1]
 8004ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae2:	d132      	bne.n	8004b4a <_svfiprintf_r+0x186>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	1d1a      	adds	r2, r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	9203      	str	r2, [sp, #12]
 8004aec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004af0:	3402      	adds	r4, #2
 8004af2:	9305      	str	r3, [sp, #20]
 8004af4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bb8 <_svfiprintf_r+0x1f4>
 8004af8:	7821      	ldrb	r1, [r4, #0]
 8004afa:	2203      	movs	r2, #3
 8004afc:	4650      	mov	r0, sl
 8004afe:	f7fb fb67 	bl	80001d0 <memchr>
 8004b02:	b138      	cbz	r0, 8004b14 <_svfiprintf_r+0x150>
 8004b04:	9b04      	ldr	r3, [sp, #16]
 8004b06:	eba0 000a 	sub.w	r0, r0, sl
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	4082      	lsls	r2, r0
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	3401      	adds	r4, #1
 8004b12:	9304      	str	r3, [sp, #16]
 8004b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b18:	4824      	ldr	r0, [pc, #144]	@ (8004bac <_svfiprintf_r+0x1e8>)
 8004b1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b1e:	2206      	movs	r2, #6
 8004b20:	f7fb fb56 	bl	80001d0 <memchr>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d036      	beq.n	8004b96 <_svfiprintf_r+0x1d2>
 8004b28:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <_svfiprintf_r+0x1ec>)
 8004b2a:	bb1b      	cbnz	r3, 8004b74 <_svfiprintf_r+0x1b0>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	3307      	adds	r3, #7
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	9303      	str	r3, [sp, #12]
 8004b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3a:	4433      	add	r3, r6
 8004b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3e:	e76a      	b.n	8004a16 <_svfiprintf_r+0x52>
 8004b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b44:	460c      	mov	r4, r1
 8004b46:	2001      	movs	r0, #1
 8004b48:	e7a8      	b.n	8004a9c <_svfiprintf_r+0xd8>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	9305      	str	r3, [sp, #20]
 8004b50:	4619      	mov	r1, r3
 8004b52:	f04f 0c0a 	mov.w	ip, #10
 8004b56:	4620      	mov	r0, r4
 8004b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5c:	3a30      	subs	r2, #48	@ 0x30
 8004b5e:	2a09      	cmp	r2, #9
 8004b60:	d903      	bls.n	8004b6a <_svfiprintf_r+0x1a6>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0c6      	beq.n	8004af4 <_svfiprintf_r+0x130>
 8004b66:	9105      	str	r1, [sp, #20]
 8004b68:	e7c4      	b.n	8004af4 <_svfiprintf_r+0x130>
 8004b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b6e:	4604      	mov	r4, r0
 8004b70:	2301      	movs	r3, #1
 8004b72:	e7f0      	b.n	8004b56 <_svfiprintf_r+0x192>
 8004b74:	ab03      	add	r3, sp, #12
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b7c:	a904      	add	r1, sp, #16
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f7fd fce4 	bl	800254c <_printf_float>
 8004b84:	1c42      	adds	r2, r0, #1
 8004b86:	4606      	mov	r6, r0
 8004b88:	d1d6      	bne.n	8004b38 <_svfiprintf_r+0x174>
 8004b8a:	89ab      	ldrh	r3, [r5, #12]
 8004b8c:	065b      	lsls	r3, r3, #25
 8004b8e:	f53f af2d 	bmi.w	80049ec <_svfiprintf_r+0x28>
 8004b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b94:	e72c      	b.n	80049f0 <_svfiprintf_r+0x2c>
 8004b96:	ab03      	add	r3, sp, #12
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	462a      	mov	r2, r5
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b9e:	a904      	add	r1, sp, #16
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f7fd ff6b 	bl	8002a7c <_printf_i>
 8004ba6:	e7ed      	b.n	8004b84 <_svfiprintf_r+0x1c0>
 8004ba8:	08005498 	.word	0x08005498
 8004bac:	080054a2 	.word	0x080054a2
 8004bb0:	0800254d 	.word	0x0800254d
 8004bb4:	0800490d 	.word	0x0800490d
 8004bb8:	0800549e 	.word	0x0800549e

08004bbc <__sfputc_r>:
 8004bbc:	6893      	ldr	r3, [r2, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	b410      	push	{r4}
 8004bc4:	6093      	str	r3, [r2, #8]
 8004bc6:	da08      	bge.n	8004bda <__sfputc_r+0x1e>
 8004bc8:	6994      	ldr	r4, [r2, #24]
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	db01      	blt.n	8004bd2 <__sfputc_r+0x16>
 8004bce:	290a      	cmp	r1, #10
 8004bd0:	d103      	bne.n	8004bda <__sfputc_r+0x1e>
 8004bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd6:	f7fe bac2 	b.w	800315e <__swbuf_r>
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	1c58      	adds	r0, r3, #1
 8004bde:	6010      	str	r0, [r2, #0]
 8004be0:	7019      	strb	r1, [r3, #0]
 8004be2:	4608      	mov	r0, r1
 8004be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <__sfputs_r>:
 8004bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bec:	4606      	mov	r6, r0
 8004bee:	460f      	mov	r7, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	18d5      	adds	r5, r2, r3
 8004bf4:	42ac      	cmp	r4, r5
 8004bf6:	d101      	bne.n	8004bfc <__sfputs_r+0x12>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e007      	b.n	8004c0c <__sfputs_r+0x22>
 8004bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c00:	463a      	mov	r2, r7
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff ffda 	bl	8004bbc <__sfputc_r>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d1f3      	bne.n	8004bf4 <__sfputs_r+0xa>
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c10 <_vfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	460d      	mov	r5, r1
 8004c16:	b09d      	sub	sp, #116	@ 0x74
 8004c18:	4614      	mov	r4, r2
 8004c1a:	4698      	mov	r8, r3
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	b118      	cbz	r0, 8004c28 <_vfiprintf_r+0x18>
 8004c20:	6a03      	ldr	r3, [r0, #32]
 8004c22:	b90b      	cbnz	r3, 8004c28 <_vfiprintf_r+0x18>
 8004c24:	f7fe f8d4 	bl	8002dd0 <__sinit>
 8004c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c2a:	07d9      	lsls	r1, r3, #31
 8004c2c:	d405      	bmi.n	8004c3a <_vfiprintf_r+0x2a>
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	059a      	lsls	r2, r3, #22
 8004c32:	d402      	bmi.n	8004c3a <_vfiprintf_r+0x2a>
 8004c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c36:	f7fe fb92 	bl	800335e <__retarget_lock_acquire_recursive>
 8004c3a:	89ab      	ldrh	r3, [r5, #12]
 8004c3c:	071b      	lsls	r3, r3, #28
 8004c3e:	d501      	bpl.n	8004c44 <_vfiprintf_r+0x34>
 8004c40:	692b      	ldr	r3, [r5, #16]
 8004c42:	b99b      	cbnz	r3, 8004c6c <_vfiprintf_r+0x5c>
 8004c44:	4629      	mov	r1, r5
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7fe fac8 	bl	80031dc <__swsetup_r>
 8004c4c:	b170      	cbz	r0, 8004c6c <_vfiprintf_r+0x5c>
 8004c4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c50:	07dc      	lsls	r4, r3, #31
 8004c52:	d504      	bpl.n	8004c5e <_vfiprintf_r+0x4e>
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	b01d      	add	sp, #116	@ 0x74
 8004c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	0598      	lsls	r0, r3, #22
 8004c62:	d4f7      	bmi.n	8004c54 <_vfiprintf_r+0x44>
 8004c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c66:	f7fe fb7b 	bl	8003360 <__retarget_lock_release_recursive>
 8004c6a:	e7f3      	b.n	8004c54 <_vfiprintf_r+0x44>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c70:	2320      	movs	r3, #32
 8004c72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c7a:	2330      	movs	r3, #48	@ 0x30
 8004c7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e2c <_vfiprintf_r+0x21c>
 8004c80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c84:	f04f 0901 	mov.w	r9, #1
 8004c88:	4623      	mov	r3, r4
 8004c8a:	469a      	mov	sl, r3
 8004c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c90:	b10a      	cbz	r2, 8004c96 <_vfiprintf_r+0x86>
 8004c92:	2a25      	cmp	r2, #37	@ 0x25
 8004c94:	d1f9      	bne.n	8004c8a <_vfiprintf_r+0x7a>
 8004c96:	ebba 0b04 	subs.w	fp, sl, r4
 8004c9a:	d00b      	beq.n	8004cb4 <_vfiprintf_r+0xa4>
 8004c9c:	465b      	mov	r3, fp
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7ff ffa1 	bl	8004bea <__sfputs_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f000 80a7 	beq.w	8004dfc <_vfiprintf_r+0x1ec>
 8004cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cb0:	445a      	add	r2, fp
 8004cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 809f 	beq.w	8004dfc <_vfiprintf_r+0x1ec>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cc8:	f10a 0a01 	add.w	sl, sl, #1
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	9307      	str	r3, [sp, #28]
 8004cd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cd6:	4654      	mov	r4, sl
 8004cd8:	2205      	movs	r2, #5
 8004cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cde:	4853      	ldr	r0, [pc, #332]	@ (8004e2c <_vfiprintf_r+0x21c>)
 8004ce0:	f7fb fa76 	bl	80001d0 <memchr>
 8004ce4:	9a04      	ldr	r2, [sp, #16]
 8004ce6:	b9d8      	cbnz	r0, 8004d20 <_vfiprintf_r+0x110>
 8004ce8:	06d1      	lsls	r1, r2, #27
 8004cea:	bf44      	itt	mi
 8004cec:	2320      	movmi	r3, #32
 8004cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cf2:	0713      	lsls	r3, r2, #28
 8004cf4:	bf44      	itt	mi
 8004cf6:	232b      	movmi	r3, #43	@ 0x2b
 8004cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d02:	d015      	beq.n	8004d30 <_vfiprintf_r+0x120>
 8004d04:	9a07      	ldr	r2, [sp, #28]
 8004d06:	4654      	mov	r4, sl
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f04f 0c0a 	mov.w	ip, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d14:	3b30      	subs	r3, #48	@ 0x30
 8004d16:	2b09      	cmp	r3, #9
 8004d18:	d94b      	bls.n	8004db2 <_vfiprintf_r+0x1a2>
 8004d1a:	b1b0      	cbz	r0, 8004d4a <_vfiprintf_r+0x13a>
 8004d1c:	9207      	str	r2, [sp, #28]
 8004d1e:	e014      	b.n	8004d4a <_vfiprintf_r+0x13a>
 8004d20:	eba0 0308 	sub.w	r3, r0, r8
 8004d24:	fa09 f303 	lsl.w	r3, r9, r3
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	46a2      	mov	sl, r4
 8004d2e:	e7d2      	b.n	8004cd6 <_vfiprintf_r+0xc6>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	1d19      	adds	r1, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	9103      	str	r1, [sp, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bfbb      	ittet	lt
 8004d3c:	425b      	neglt	r3, r3
 8004d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d42:	9307      	strge	r3, [sp, #28]
 8004d44:	9307      	strlt	r3, [sp, #28]
 8004d46:	bfb8      	it	lt
 8004d48:	9204      	strlt	r2, [sp, #16]
 8004d4a:	7823      	ldrb	r3, [r4, #0]
 8004d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d4e:	d10a      	bne.n	8004d66 <_vfiprintf_r+0x156>
 8004d50:	7863      	ldrb	r3, [r4, #1]
 8004d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d54:	d132      	bne.n	8004dbc <_vfiprintf_r+0x1ac>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	1d1a      	adds	r2, r3, #4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	9203      	str	r2, [sp, #12]
 8004d5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d62:	3402      	adds	r4, #2
 8004d64:	9305      	str	r3, [sp, #20]
 8004d66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e3c <_vfiprintf_r+0x22c>
 8004d6a:	7821      	ldrb	r1, [r4, #0]
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	4650      	mov	r0, sl
 8004d70:	f7fb fa2e 	bl	80001d0 <memchr>
 8004d74:	b138      	cbz	r0, 8004d86 <_vfiprintf_r+0x176>
 8004d76:	9b04      	ldr	r3, [sp, #16]
 8004d78:	eba0 000a 	sub.w	r0, r0, sl
 8004d7c:	2240      	movs	r2, #64	@ 0x40
 8004d7e:	4082      	lsls	r2, r0
 8004d80:	4313      	orrs	r3, r2
 8004d82:	3401      	adds	r4, #1
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8a:	4829      	ldr	r0, [pc, #164]	@ (8004e30 <_vfiprintf_r+0x220>)
 8004d8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d90:	2206      	movs	r2, #6
 8004d92:	f7fb fa1d 	bl	80001d0 <memchr>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d03f      	beq.n	8004e1a <_vfiprintf_r+0x20a>
 8004d9a:	4b26      	ldr	r3, [pc, #152]	@ (8004e34 <_vfiprintf_r+0x224>)
 8004d9c:	bb1b      	cbnz	r3, 8004de6 <_vfiprintf_r+0x1d6>
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	3307      	adds	r3, #7
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	3308      	adds	r3, #8
 8004da8:	9303      	str	r3, [sp, #12]
 8004daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dac:	443b      	add	r3, r7
 8004dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db0:	e76a      	b.n	8004c88 <_vfiprintf_r+0x78>
 8004db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004db6:	460c      	mov	r4, r1
 8004db8:	2001      	movs	r0, #1
 8004dba:	e7a8      	b.n	8004d0e <_vfiprintf_r+0xfe>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	3401      	adds	r4, #1
 8004dc0:	9305      	str	r3, [sp, #20]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f04f 0c0a 	mov.w	ip, #10
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dce:	3a30      	subs	r2, #48	@ 0x30
 8004dd0:	2a09      	cmp	r2, #9
 8004dd2:	d903      	bls.n	8004ddc <_vfiprintf_r+0x1cc>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0c6      	beq.n	8004d66 <_vfiprintf_r+0x156>
 8004dd8:	9105      	str	r1, [sp, #20]
 8004dda:	e7c4      	b.n	8004d66 <_vfiprintf_r+0x156>
 8004ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004de0:	4604      	mov	r4, r0
 8004de2:	2301      	movs	r3, #1
 8004de4:	e7f0      	b.n	8004dc8 <_vfiprintf_r+0x1b8>
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <_vfiprintf_r+0x228>)
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7fd fbab 	bl	800254c <_printf_float>
 8004df6:	4607      	mov	r7, r0
 8004df8:	1c78      	adds	r0, r7, #1
 8004dfa:	d1d6      	bne.n	8004daa <_vfiprintf_r+0x19a>
 8004dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dfe:	07d9      	lsls	r1, r3, #31
 8004e00:	d405      	bmi.n	8004e0e <_vfiprintf_r+0x1fe>
 8004e02:	89ab      	ldrh	r3, [r5, #12]
 8004e04:	059a      	lsls	r2, r3, #22
 8004e06:	d402      	bmi.n	8004e0e <_vfiprintf_r+0x1fe>
 8004e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e0a:	f7fe faa9 	bl	8003360 <__retarget_lock_release_recursive>
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	065b      	lsls	r3, r3, #25
 8004e12:	f53f af1f 	bmi.w	8004c54 <_vfiprintf_r+0x44>
 8004e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e18:	e71e      	b.n	8004c58 <_vfiprintf_r+0x48>
 8004e1a:	ab03      	add	r3, sp, #12
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	462a      	mov	r2, r5
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <_vfiprintf_r+0x228>)
 8004e22:	a904      	add	r1, sp, #16
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7fd fe29 	bl	8002a7c <_printf_i>
 8004e2a:	e7e4      	b.n	8004df6 <_vfiprintf_r+0x1e6>
 8004e2c:	08005498 	.word	0x08005498
 8004e30:	080054a2 	.word	0x080054a2
 8004e34:	0800254d 	.word	0x0800254d
 8004e38:	08004beb 	.word	0x08004beb
 8004e3c:	0800549e 	.word	0x0800549e

08004e40 <__sflush_r>:
 8004e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	0716      	lsls	r6, r2, #28
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	d454      	bmi.n	8004efa <__sflush_r+0xba>
 8004e50:	684b      	ldr	r3, [r1, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dc02      	bgt.n	8004e5c <__sflush_r+0x1c>
 8004e56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dd48      	ble.n	8004eee <__sflush_r+0xae>
 8004e5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e5e:	2e00      	cmp	r6, #0
 8004e60:	d045      	beq.n	8004eee <__sflush_r+0xae>
 8004e62:	2300      	movs	r3, #0
 8004e64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e68:	682f      	ldr	r7, [r5, #0]
 8004e6a:	6a21      	ldr	r1, [r4, #32]
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	d030      	beq.n	8004ed2 <__sflush_r+0x92>
 8004e70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	0759      	lsls	r1, r3, #29
 8004e76:	d505      	bpl.n	8004e84 <__sflush_r+0x44>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e7e:	b10b      	cbz	r3, 8004e84 <__sflush_r+0x44>
 8004e80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e88:	6a21      	ldr	r1, [r4, #32]
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b0      	blx	r6
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	d106      	bne.n	8004ea2 <__sflush_r+0x62>
 8004e94:	6829      	ldr	r1, [r5, #0]
 8004e96:	291d      	cmp	r1, #29
 8004e98:	d82b      	bhi.n	8004ef2 <__sflush_r+0xb2>
 8004e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f44 <__sflush_r+0x104>)
 8004e9c:	40ca      	lsrs	r2, r1
 8004e9e:	07d6      	lsls	r6, r2, #31
 8004ea0:	d527      	bpl.n	8004ef2 <__sflush_r+0xb2>
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	6062      	str	r2, [r4, #4]
 8004ea6:	04d9      	lsls	r1, r3, #19
 8004ea8:	6922      	ldr	r2, [r4, #16]
 8004eaa:	6022      	str	r2, [r4, #0]
 8004eac:	d504      	bpl.n	8004eb8 <__sflush_r+0x78>
 8004eae:	1c42      	adds	r2, r0, #1
 8004eb0:	d101      	bne.n	8004eb6 <__sflush_r+0x76>
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	b903      	cbnz	r3, 8004eb8 <__sflush_r+0x78>
 8004eb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eba:	602f      	str	r7, [r5, #0]
 8004ebc:	b1b9      	cbz	r1, 8004eee <__sflush_r+0xae>
 8004ebe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ec2:	4299      	cmp	r1, r3
 8004ec4:	d002      	beq.n	8004ecc <__sflush_r+0x8c>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f7ff f8a6 	bl	8004018 <_free_r>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ed0:	e00d      	b.n	8004eee <__sflush_r+0xae>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b0      	blx	r6
 8004ed8:	4602      	mov	r2, r0
 8004eda:	1c50      	adds	r0, r2, #1
 8004edc:	d1c9      	bne.n	8004e72 <__sflush_r+0x32>
 8004ede:	682b      	ldr	r3, [r5, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0c6      	beq.n	8004e72 <__sflush_r+0x32>
 8004ee4:	2b1d      	cmp	r3, #29
 8004ee6:	d001      	beq.n	8004eec <__sflush_r+0xac>
 8004ee8:	2b16      	cmp	r3, #22
 8004eea:	d11e      	bne.n	8004f2a <__sflush_r+0xea>
 8004eec:	602f      	str	r7, [r5, #0]
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e022      	b.n	8004f38 <__sflush_r+0xf8>
 8004ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ef6:	b21b      	sxth	r3, r3
 8004ef8:	e01b      	b.n	8004f32 <__sflush_r+0xf2>
 8004efa:	690f      	ldr	r7, [r1, #16]
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	d0f6      	beq.n	8004eee <__sflush_r+0xae>
 8004f00:	0793      	lsls	r3, r2, #30
 8004f02:	680e      	ldr	r6, [r1, #0]
 8004f04:	bf08      	it	eq
 8004f06:	694b      	ldreq	r3, [r1, #20]
 8004f08:	600f      	str	r7, [r1, #0]
 8004f0a:	bf18      	it	ne
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	eba6 0807 	sub.w	r8, r6, r7
 8004f12:	608b      	str	r3, [r1, #8]
 8004f14:	f1b8 0f00 	cmp.w	r8, #0
 8004f18:	dde9      	ble.n	8004eee <__sflush_r+0xae>
 8004f1a:	6a21      	ldr	r1, [r4, #32]
 8004f1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f1e:	4643      	mov	r3, r8
 8004f20:	463a      	mov	r2, r7
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b0      	blx	r6
 8004f26:	2800      	cmp	r0, #0
 8004f28:	dc08      	bgt.n	8004f3c <__sflush_r+0xfc>
 8004f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f3c:	4407      	add	r7, r0
 8004f3e:	eba8 0800 	sub.w	r8, r8, r0
 8004f42:	e7e7      	b.n	8004f14 <__sflush_r+0xd4>
 8004f44:	20400001 	.word	0x20400001

08004f48 <_fflush_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	690b      	ldr	r3, [r1, #16]
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	b913      	cbnz	r3, 8004f58 <_fflush_r+0x10>
 8004f52:	2500      	movs	r5, #0
 8004f54:	4628      	mov	r0, r5
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	b118      	cbz	r0, 8004f62 <_fflush_r+0x1a>
 8004f5a:	6a03      	ldr	r3, [r0, #32]
 8004f5c:	b90b      	cbnz	r3, 8004f62 <_fflush_r+0x1a>
 8004f5e:	f7fd ff37 	bl	8002dd0 <__sinit>
 8004f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f3      	beq.n	8004f52 <_fflush_r+0xa>
 8004f6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f6c:	07d0      	lsls	r0, r2, #31
 8004f6e:	d404      	bmi.n	8004f7a <_fflush_r+0x32>
 8004f70:	0599      	lsls	r1, r3, #22
 8004f72:	d402      	bmi.n	8004f7a <_fflush_r+0x32>
 8004f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f76:	f7fe f9f2 	bl	800335e <__retarget_lock_acquire_recursive>
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	f7ff ff5f 	bl	8004e40 <__sflush_r>
 8004f82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f84:	07da      	lsls	r2, r3, #31
 8004f86:	4605      	mov	r5, r0
 8004f88:	d4e4      	bmi.n	8004f54 <_fflush_r+0xc>
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	059b      	lsls	r3, r3, #22
 8004f8e:	d4e1      	bmi.n	8004f54 <_fflush_r+0xc>
 8004f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f92:	f7fe f9e5 	bl	8003360 <__retarget_lock_release_recursive>
 8004f96:	e7dd      	b.n	8004f54 <_fflush_r+0xc>

08004f98 <__swhatbuf_r>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	b096      	sub	sp, #88	@ 0x58
 8004fa4:	4615      	mov	r5, r2
 8004fa6:	461e      	mov	r6, r3
 8004fa8:	da0d      	bge.n	8004fc6 <__swhatbuf_r+0x2e>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	bf14      	ite	ne
 8004fb6:	2340      	movne	r3, #64	@ 0x40
 8004fb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	6031      	str	r1, [r6, #0]
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	b016      	add	sp, #88	@ 0x58
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	466a      	mov	r2, sp
 8004fc8:	f000 f862 	bl	8005090 <_fstat_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	dbec      	blt.n	8004faa <__swhatbuf_r+0x12>
 8004fd0:	9901      	ldr	r1, [sp, #4]
 8004fd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fda:	4259      	negs	r1, r3
 8004fdc:	4159      	adcs	r1, r3
 8004fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fe2:	e7eb      	b.n	8004fbc <__swhatbuf_r+0x24>

08004fe4 <__smakebuf_r>:
 8004fe4:	898b      	ldrh	r3, [r1, #12]
 8004fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe8:	079d      	lsls	r5, r3, #30
 8004fea:	4606      	mov	r6, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	d507      	bpl.n	8005000 <__smakebuf_r+0x1c>
 8004ff0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	6163      	str	r3, [r4, #20]
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005000:	ab01      	add	r3, sp, #4
 8005002:	466a      	mov	r2, sp
 8005004:	f7ff ffc8 	bl	8004f98 <__swhatbuf_r>
 8005008:	9f00      	ldr	r7, [sp, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	4639      	mov	r1, r7
 800500e:	4630      	mov	r0, r6
 8005010:	f7ff f876 	bl	8004100 <_malloc_r>
 8005014:	b948      	cbnz	r0, 800502a <__smakebuf_r+0x46>
 8005016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800501a:	059a      	lsls	r2, r3, #22
 800501c:	d4ee      	bmi.n	8004ffc <__smakebuf_r+0x18>
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	81a3      	strh	r3, [r4, #12]
 8005028:	e7e2      	b.n	8004ff0 <__smakebuf_r+0xc>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	6020      	str	r0, [r4, #0]
 800502e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800503a:	b15b      	cbz	r3, 8005054 <__smakebuf_r+0x70>
 800503c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005040:	4630      	mov	r0, r6
 8005042:	f000 f837 	bl	80050b4 <_isatty_r>
 8005046:	b128      	cbz	r0, 8005054 <__smakebuf_r+0x70>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	431d      	orrs	r5, r3
 8005058:	81a5      	strh	r5, [r4, #12]
 800505a:	e7cf      	b.n	8004ffc <__smakebuf_r+0x18>

0800505c <memmove>:
 800505c:	4288      	cmp	r0, r1
 800505e:	b510      	push	{r4, lr}
 8005060:	eb01 0402 	add.w	r4, r1, r2
 8005064:	d902      	bls.n	800506c <memmove+0x10>
 8005066:	4284      	cmp	r4, r0
 8005068:	4623      	mov	r3, r4
 800506a:	d807      	bhi.n	800507c <memmove+0x20>
 800506c:	1e43      	subs	r3, r0, #1
 800506e:	42a1      	cmp	r1, r4
 8005070:	d008      	beq.n	8005084 <memmove+0x28>
 8005072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507a:	e7f8      	b.n	800506e <memmove+0x12>
 800507c:	4402      	add	r2, r0
 800507e:	4601      	mov	r1, r0
 8005080:	428a      	cmp	r2, r1
 8005082:	d100      	bne.n	8005086 <memmove+0x2a>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800508e:	e7f7      	b.n	8005080 <memmove+0x24>

08005090 <_fstat_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d07      	ldr	r5, [pc, #28]	@ (80050b0 <_fstat_r+0x20>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f7fd f809 	bl	80020b4 <_fstat>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d102      	bne.n	80050ac <_fstat_r+0x1c>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	b103      	cbz	r3, 80050ac <_fstat_r+0x1c>
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	bd38      	pop	{r3, r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	20000428 	.word	0x20000428

080050b4 <_isatty_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d06      	ldr	r5, [pc, #24]	@ (80050d0 <_isatty_r+0x1c>)
 80050b8:	2300      	movs	r3, #0
 80050ba:	4604      	mov	r4, r0
 80050bc:	4608      	mov	r0, r1
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	f7fd f808 	bl	80020d4 <_isatty>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_isatty_r+0x1a>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_isatty_r+0x1a>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20000428 	.word	0x20000428

080050d4 <_sbrk_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d06      	ldr	r5, [pc, #24]	@ (80050f0 <_sbrk_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f000 f8fc 	bl	80052dc <_sbrk>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_sbrk_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_sbrk_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20000428 	.word	0x20000428

080050f4 <memcpy>:
 80050f4:	440a      	add	r2, r1
 80050f6:	4291      	cmp	r1, r2
 80050f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050fc:	d100      	bne.n	8005100 <memcpy+0xc>
 80050fe:	4770      	bx	lr
 8005100:	b510      	push	{r4, lr}
 8005102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800510a:	4291      	cmp	r1, r2
 800510c:	d1f9      	bne.n	8005102 <memcpy+0xe>
 800510e:	bd10      	pop	{r4, pc}

08005110 <__assert_func>:
 8005110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005112:	4614      	mov	r4, r2
 8005114:	461a      	mov	r2, r3
 8005116:	4b09      	ldr	r3, [pc, #36]	@ (800513c <__assert_func+0x2c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4605      	mov	r5, r0
 800511c:	68d8      	ldr	r0, [r3, #12]
 800511e:	b14c      	cbz	r4, 8005134 <__assert_func+0x24>
 8005120:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <__assert_func+0x30>)
 8005122:	9100      	str	r1, [sp, #0]
 8005124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005128:	4906      	ldr	r1, [pc, #24]	@ (8005144 <__assert_func+0x34>)
 800512a:	462b      	mov	r3, r5
 800512c:	f000 f870 	bl	8005210 <fiprintf>
 8005130:	f000 f880 	bl	8005234 <abort>
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <__assert_func+0x38>)
 8005136:	461c      	mov	r4, r3
 8005138:	e7f3      	b.n	8005122 <__assert_func+0x12>
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c
 8005140:	080054b3 	.word	0x080054b3
 8005144:	080054c0 	.word	0x080054c0
 8005148:	080054ee 	.word	0x080054ee

0800514c <_calloc_r>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	fba1 5402 	umull	r5, r4, r1, r2
 8005152:	b934      	cbnz	r4, 8005162 <_calloc_r+0x16>
 8005154:	4629      	mov	r1, r5
 8005156:	f7fe ffd3 	bl	8004100 <_malloc_r>
 800515a:	4606      	mov	r6, r0
 800515c:	b928      	cbnz	r0, 800516a <_calloc_r+0x1e>
 800515e:	4630      	mov	r0, r6
 8005160:	bd70      	pop	{r4, r5, r6, pc}
 8005162:	220c      	movs	r2, #12
 8005164:	6002      	str	r2, [r0, #0]
 8005166:	2600      	movs	r6, #0
 8005168:	e7f9      	b.n	800515e <_calloc_r+0x12>
 800516a:	462a      	mov	r2, r5
 800516c:	4621      	mov	r1, r4
 800516e:	f7fe f88b 	bl	8003288 <memset>
 8005172:	e7f4      	b.n	800515e <_calloc_r+0x12>

08005174 <__ascii_mbtowc>:
 8005174:	b082      	sub	sp, #8
 8005176:	b901      	cbnz	r1, 800517a <__ascii_mbtowc+0x6>
 8005178:	a901      	add	r1, sp, #4
 800517a:	b142      	cbz	r2, 800518e <__ascii_mbtowc+0x1a>
 800517c:	b14b      	cbz	r3, 8005192 <__ascii_mbtowc+0x1e>
 800517e:	7813      	ldrb	r3, [r2, #0]
 8005180:	600b      	str	r3, [r1, #0]
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	1e10      	subs	r0, r2, #0
 8005186:	bf18      	it	ne
 8005188:	2001      	movne	r0, #1
 800518a:	b002      	add	sp, #8
 800518c:	4770      	bx	lr
 800518e:	4610      	mov	r0, r2
 8005190:	e7fb      	b.n	800518a <__ascii_mbtowc+0x16>
 8005192:	f06f 0001 	mvn.w	r0, #1
 8005196:	e7f8      	b.n	800518a <__ascii_mbtowc+0x16>

08005198 <_realloc_r>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	4607      	mov	r7, r0
 800519e:	4614      	mov	r4, r2
 80051a0:	460d      	mov	r5, r1
 80051a2:	b921      	cbnz	r1, 80051ae <_realloc_r+0x16>
 80051a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	4611      	mov	r1, r2
 80051aa:	f7fe bfa9 	b.w	8004100 <_malloc_r>
 80051ae:	b92a      	cbnz	r2, 80051bc <_realloc_r+0x24>
 80051b0:	f7fe ff32 	bl	8004018 <_free_r>
 80051b4:	4625      	mov	r5, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	f000 f841 	bl	8005242 <_malloc_usable_size_r>
 80051c0:	4284      	cmp	r4, r0
 80051c2:	4606      	mov	r6, r0
 80051c4:	d802      	bhi.n	80051cc <_realloc_r+0x34>
 80051c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ca:	d8f4      	bhi.n	80051b6 <_realloc_r+0x1e>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4638      	mov	r0, r7
 80051d0:	f7fe ff96 	bl	8004100 <_malloc_r>
 80051d4:	4680      	mov	r8, r0
 80051d6:	b908      	cbnz	r0, 80051dc <_realloc_r+0x44>
 80051d8:	4645      	mov	r5, r8
 80051da:	e7ec      	b.n	80051b6 <_realloc_r+0x1e>
 80051dc:	42b4      	cmp	r4, r6
 80051de:	4622      	mov	r2, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	bf28      	it	cs
 80051e4:	4632      	movcs	r2, r6
 80051e6:	f7ff ff85 	bl	80050f4 <memcpy>
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7fe ff13 	bl	8004018 <_free_r>
 80051f2:	e7f1      	b.n	80051d8 <_realloc_r+0x40>

080051f4 <__ascii_wctomb>:
 80051f4:	4603      	mov	r3, r0
 80051f6:	4608      	mov	r0, r1
 80051f8:	b141      	cbz	r1, 800520c <__ascii_wctomb+0x18>
 80051fa:	2aff      	cmp	r2, #255	@ 0xff
 80051fc:	d904      	bls.n	8005208 <__ascii_wctomb+0x14>
 80051fe:	228a      	movs	r2, #138	@ 0x8a
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f04f 30ff 	mov.w	r0, #4294967295
 8005206:	4770      	bx	lr
 8005208:	700a      	strb	r2, [r1, #0]
 800520a:	2001      	movs	r0, #1
 800520c:	4770      	bx	lr
	...

08005210 <fiprintf>:
 8005210:	b40e      	push	{r1, r2, r3}
 8005212:	b503      	push	{r0, r1, lr}
 8005214:	4601      	mov	r1, r0
 8005216:	ab03      	add	r3, sp, #12
 8005218:	4805      	ldr	r0, [pc, #20]	@ (8005230 <fiprintf+0x20>)
 800521a:	f853 2b04 	ldr.w	r2, [r3], #4
 800521e:	6800      	ldr	r0, [r0, #0]
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	f7ff fcf5 	bl	8004c10 <_vfiprintf_r>
 8005226:	b002      	add	sp, #8
 8005228:	f85d eb04 	ldr.w	lr, [sp], #4
 800522c:	b003      	add	sp, #12
 800522e:	4770      	bx	lr
 8005230:	2000000c 	.word	0x2000000c

08005234 <abort>:
 8005234:	b508      	push	{r3, lr}
 8005236:	2006      	movs	r0, #6
 8005238:	f000 f834 	bl	80052a4 <raise>
 800523c:	2001      	movs	r0, #1
 800523e:	f7fc ff05 	bl	800204c <_exit>

08005242 <_malloc_usable_size_r>:
 8005242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005246:	1f18      	subs	r0, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfbc      	itt	lt
 800524c:	580b      	ldrlt	r3, [r1, r0]
 800524e:	18c0      	addlt	r0, r0, r3
 8005250:	4770      	bx	lr

08005252 <_raise_r>:
 8005252:	291f      	cmp	r1, #31
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4605      	mov	r5, r0
 8005258:	460c      	mov	r4, r1
 800525a:	d904      	bls.n	8005266 <_raise_r+0x14>
 800525c:	2316      	movs	r3, #22
 800525e:	6003      	str	r3, [r0, #0]
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005268:	b112      	cbz	r2, 8005270 <_raise_r+0x1e>
 800526a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800526e:	b94b      	cbnz	r3, 8005284 <_raise_r+0x32>
 8005270:	4628      	mov	r0, r5
 8005272:	f000 f831 	bl	80052d8 <_getpid_r>
 8005276:	4622      	mov	r2, r4
 8005278:	4601      	mov	r1, r0
 800527a:	4628      	mov	r0, r5
 800527c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005280:	f000 b818 	b.w	80052b4 <_kill_r>
 8005284:	2b01      	cmp	r3, #1
 8005286:	d00a      	beq.n	800529e <_raise_r+0x4c>
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	d103      	bne.n	8005294 <_raise_r+0x42>
 800528c:	2316      	movs	r3, #22
 800528e:	6003      	str	r3, [r0, #0]
 8005290:	2001      	movs	r0, #1
 8005292:	e7e7      	b.n	8005264 <_raise_r+0x12>
 8005294:	2100      	movs	r1, #0
 8005296:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800529a:	4620      	mov	r0, r4
 800529c:	4798      	blx	r3
 800529e:	2000      	movs	r0, #0
 80052a0:	e7e0      	b.n	8005264 <_raise_r+0x12>
	...

080052a4 <raise>:
 80052a4:	4b02      	ldr	r3, [pc, #8]	@ (80052b0 <raise+0xc>)
 80052a6:	4601      	mov	r1, r0
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f7ff bfd2 	b.w	8005252 <_raise_r>
 80052ae:	bf00      	nop
 80052b0:	2000000c 	.word	0x2000000c

080052b4 <_kill_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	@ (80052d4 <_kill_r+0x20>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f7fc feb3 	bl	800202c <_kill>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d102      	bne.n	80052d0 <_kill_r+0x1c>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	b103      	cbz	r3, 80052d0 <_kill_r+0x1c>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
 80052d2:	bf00      	nop
 80052d4:	20000428 	.word	0x20000428

080052d8 <_getpid_r>:
 80052d8:	f7fc bea0 	b.w	800201c <_getpid>

080052dc <_sbrk>:
 80052dc:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <_sbrk+0x14>)
 80052de:	6811      	ldr	r1, [r2, #0]
 80052e0:	4603      	mov	r3, r0
 80052e2:	b909      	cbnz	r1, 80052e8 <_sbrk+0xc>
 80052e4:	4903      	ldr	r1, [pc, #12]	@ (80052f4 <_sbrk+0x18>)
 80052e6:	6011      	str	r1, [r2, #0]
 80052e8:	6810      	ldr	r0, [r2, #0]
 80052ea:	4403      	add	r3, r0
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4770      	bx	lr
 80052f0:	20000438 	.word	0x20000438
 80052f4:	20000440 	.word	0x20000440

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
