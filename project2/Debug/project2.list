
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08005f28  08005f28  00006f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c4  080064c4  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064cc  080064cc  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080064d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001cc  080066a0  000081cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  080066a0  00008840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad02  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002285  00000000  00000000  00012efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00015188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122aa  00000000  00000000  00016a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f495  00000000  00000000  00028ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cdf2  00000000  00000000  0003817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00094f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  00094fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  00099ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f0c 	.word	0x08005f0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08005f0c 	.word	0x08005f0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <ADC_Init+0x80>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000bcc:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
  ADC_InitStruct->ADC_Resolution|                 
 8000bd2:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000bd8:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691b      	ldr	r3, [r3, #16]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000bde:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	695b      	ldr	r3, [r3, #20]
  ADC_InitStruct->ADC_DataAlign|                 
 8000be4:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_AutoInjMode;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	699b      	ldr	r3, [r3, #24]
  ADC_InitStruct->ADC_OverrunMode|        
 8000bea:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f023 030f 	bic.w	r3, r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	7f1b      	ldrb	r3, [r3, #28]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	631a      	str	r2, [r3, #48]	@ 0x30
   
}  
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	fdffc007 	.word	0xfdffc007

08000c2c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	771a      	strb	r2, [r3, #28]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
  }
}
 8000c8e:	e005      	b.n	8000c9c <ADC_Cmd+0x2c>
    ADCx->CR |= ADC_CR_ADDIS;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f043 0202 	orr.w	r2, r3, #2
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]

}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da02      	bge.n	8000d10 <ADC_GetCalibrationStatus+0x1a>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e001      	b.n	8000d14 <ADC_GetCalibrationStatus+0x1e>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <ADC_GetDisableCmdStatus+0x1e>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e001      	b.n	8000d44 <ADC_GetDisableCmdStatus+0x22>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
  }
}
 8000d7c:	e005      	b.n	8000d8a <ADC_VoltageRegulatorCmd+0x38>
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	4611      	mov	r1, r2
 8000da2:	461a      	mov	r2, r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	70fb      	strb	r3, [r7, #3]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70bb      	strb	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d821      	bhi.n	8000e02 <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000dc4:	78ba      	ldrb	r2, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	461a      	mov	r2, r3
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000de0:	78f9      	ldrb	r1, [r7, #3]
 8000de2:	78ba      	ldrb	r2, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e00:	e074      	b.n	8000eec <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000e02:	78bb      	ldrb	r3, [r7, #2]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d823      	bhi.n	8000e50 <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	1f5a      	subs	r2, r3, #5
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	231f      	movs	r3, #31
 8000e1e:	4093      	lsls	r3, r2
 8000e20:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000e2c:	78f9      	ldrb	r1, [r7, #3]
 8000e2e:	78bb      	ldrb	r3, [r7, #2]
 8000e30:	1f5a      	subs	r2, r3, #5
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e4e:	e04d      	b.n	8000eec <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000e50:	78bb      	ldrb	r3, [r7, #2]
 8000e52:	2b0e      	cmp	r3, #14
 8000e54:	d825      	bhi.n	8000ea2 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e5a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	f1a3 020a 	sub.w	r2, r3, #10
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	231f      	movs	r3, #31
 8000e6e:	4093      	lsls	r3, r2
 8000e70:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000e7c:	78f9      	ldrb	r1, [r7, #3]
 8000e7e:	78bb      	ldrb	r3, [r7, #2]
 8000e80:	f1a3 020a 	sub.w	r2, r3, #10
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ea0:	e024      	b.n	8000eec <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000ea8:	78bb      	ldrb	r3, [r7, #2]
 8000eaa:	f1a3 020f 	sub.w	r2, r3, #15
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	231f      	movs	r3, #31
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000ec8:	78f9      	ldrb	r1, [r7, #3]
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	f1a3 020f 	sub.w	r2, r3, #15
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	2b09      	cmp	r3, #9
 8000ef0:	d923      	bls.n	8000f3a <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	f1a3 020a 	sub.w	r2, r3, #10
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	2207      	movs	r2, #7
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699a      	ldr	r2, [r3, #24]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6999      	ldr	r1, [r3, #24]
 8000f1e:	7878      	ldrb	r0, [r7, #1]
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	f1a3 020a 	sub.w	r2, r3, #10
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f30:	ea41 0203 	orr.w	r2, r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8000f38:	e01f      	b.n	8000f7a <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	2238      	movs	r2, #56	@ 0x38
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6959      	ldr	r1, [r3, #20]
 8000f64:	7878      	ldrb	r0, [r7, #1]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	fa00 f303 	lsl.w	r3, r0, r3
 8000f72:	ea41 0203 	orr.w	r2, r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	615a      	str	r2, [r3, #20]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f043 0204 	orr.w	r2, r3, #4
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e001      	b.n	8000fe4 <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001000:	4b7b      	ldr	r3, [pc, #492]	@ (80011f0 <EXTI_Init+0x1fc>)
 8001002:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	799b      	ldrb	r3, [r3, #6]
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80d2 	beq.w	80011b2 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001018:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2201      	movs	r2, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 800103a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800103e:	015b      	lsls	r3, r3, #5
 8001040:	4618      	mov	r0, r3
 8001042:	ea01 0302 	and.w	r3, r1, r2
 8001046:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	4b68      	ldr	r3, [pc, #416]	@ (80011f4 <EXTI_Init+0x200>)
 8001052:	4413      	add	r3, r2
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2201      	movs	r2, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43da      	mvns	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	0158      	lsls	r0, r3, #5
 800106e:	4b61      	ldr	r3, [pc, #388]	@ (80011f4 <EXTI_Init+0x200>)
 8001070:	4403      	add	r3, r0
 8001072:	4618      	mov	r0, r3
 8001074:	ea01 0302 	and.w	r3, r1, r2
 8001078:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	095b      	lsrs	r3, r3, #5
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	4413      	add	r3, r2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 80010aa:	4b51      	ldr	r3, [pc, #324]	@ (80011f0 <EXTI_Init+0x1fc>)
 80010ac:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	015a      	lsls	r2, r3, #5
 80010b6:	4b50      	ldr	r3, [pc, #320]	@ (80011f8 <EXTI_Init+0x204>)
 80010b8:	4413      	add	r3, r2
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	2201      	movs	r2, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	0158      	lsls	r0, r3, #5
 80010d4:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <EXTI_Init+0x204>)
 80010d6:	4403      	add	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	ea01 0302 	and.w	r3, r1, r2
 80010de:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	4b44      	ldr	r3, [pc, #272]	@ (80011fc <EXTI_Init+0x208>)
 80010ea:	4413      	add	r3, r2
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2201      	movs	r2, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43da      	mvns	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	0158      	lsls	r0, r3, #5
 8001106:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <EXTI_Init+0x208>)
 8001108:	4403      	add	r3, r0
 800110a:	4618      	mov	r0, r3
 800110c:	ea01 0302 	and.w	r3, r1, r2
 8001110:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	2b10      	cmp	r3, #16
 8001118:	d132      	bne.n	8001180 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	015a      	lsls	r2, r3, #5
 8001122:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <EXTI_Init+0x204>)
 8001124:	4413      	add	r3, r2
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	4618      	mov	r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	0159      	lsls	r1, r3, #5
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <EXTI_Init+0x204>)
 8001142:	440b      	add	r3, r1
 8001144:	4619      	mov	r1, r3
 8001146:	ea42 0300 	orr.w	r3, r2, r0
 800114a:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	015a      	lsls	r2, r3, #5
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <EXTI_Init+0x208>)
 8001156:	4413      	add	r3, r2
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	4618      	mov	r0, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	0159      	lsls	r1, r3, #5
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <EXTI_Init+0x208>)
 8001174:	440b      	add	r3, r1
 8001176:	4619      	mov	r1, r3
 8001178:	ea42 0300 	orr.w	r3, r2, r0
 800117c:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 800117e:	e030      	b.n	80011e2 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	795b      	ldrb	r3, [r3, #5]
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	015b      	lsls	r3, r3, #5
 800118e:	4413      	add	r3, r2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	e017      	b.n	80011e2 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	4413      	add	r3, r2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	400a      	ands	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40010400 	.word	0x40010400
 80011f4:	40010404 	.word	0x40010404
 80011f8:	40010408 	.word	0x40010408
 80011fc:	4001040c 	.word	0x4001040c

08001200 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001218:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	f002 021f 	and.w	r2, r2, #31
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	015a      	lsls	r2, r3, #5
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <EXTI_GetITStatus+0x6c>)
 8001238:	4413      	add	r3, r2
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f002 021f 	and.w	r2, r2, #31
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <EXTI_GetITStatus+0x5a>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40010414 	.word	0x40010414

08001270 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2201      	movs	r2, #1
 8001280:	fa02 f103 	lsl.w	r1, r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	015a      	lsls	r2, r3, #5
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <EXTI_ClearITPendingBit+0x30>)
 800128c:	4413      	add	r3, r2
 800128e:	460a      	mov	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40010414 	.word	0x40010414

080012a4 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e07c      	b.n	80013ba <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80012c0:	2201      	movs	r2, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d16b      	bne.n	80013b4 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	791b      	ldrb	r3, [r3, #4]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <GPIO_Init+0x48>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d134      	bne.n	8001356 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2103      	movs	r1, #3
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	4619      	mov	r1, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	b29a      	uxth	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	2301      	movs	r3, #1
 8001328:	408b      	lsls	r3, r1
 800132a:	b29b      	uxth	r3, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	4013      	ands	r3, r2
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	889b      	ldrh	r3, [r3, #4]
 800133c:	b29a      	uxth	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	799b      	ldrb	r3, [r3, #6]
 8001342:	4619      	mov	r1, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	b29b      	uxth	r3, r3
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2103      	movs	r1, #3
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	4619      	mov	r1, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	b29b      	uxth	r3, r3
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2103      	movs	r1, #3
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	79db      	ldrb	r3, [r3, #7]
 80013a4:	4619      	mov	r1, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	f67f af7f 	bls.w	80012c0 <GPIO_Init+0x1c>
    }
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2202      	movs	r2, #2
 80013ea:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	71da      	strb	r2, [r3, #7]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001420:	e002      	b.n	8001428 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <NVIC_PriorityGroupConfig+0x24>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001448:	60d3      	str	r3, [r2, #12]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d03a      	beq.n	80014ee <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001478:	4b28      	ldr	r3, [pc, #160]	@ (800151c <NVIC_Init+0xc0>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f1c3 0304 	rsb	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa22 f303 	lsr.w	r3, r2, r3
 8001496:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	461a      	mov	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80014bc:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <NVIC_Init+0xc4>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	6979      	ldr	r1, [r7, #20]
 80014c4:	b2c9      	uxtb	r1, r1
 80014c6:	4413      	add	r3, r2
 80014c8:	460a      	mov	r2, r1
 80014ca:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014d6:	4912      	ldr	r1, [pc, #72]	@ (8001520 <NVIC_Init+0xc4>)
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	0952      	lsrs	r2, r2, #5
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014e2:	2201      	movs	r2, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014e8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80014ec:	e00f      	b.n	800150e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014f6:	490a      	ldr	r1, [pc, #40]	@ (8001520 <NVIC_Init+0xc4>)
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	0952      	lsrs	r2, r2, #5
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001502:	2201      	movs	r2, #1
 8001504:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001506:	f100 0320 	add.w	r3, r0, #32
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800150e:	bf00      	nop
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	e000e100 	.word	0xe000e100

08001524 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	@ 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800154c:	4b8b      	ldr	r3, [pc, #556]	@ (800177c <RCC_GetClocksFreq+0x258>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d011      	beq.n	8001580 <RCC_GetClocksFreq+0x5c>
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d837      	bhi.n	80015d2 <RCC_GetClocksFreq+0xae>
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <RCC_GetClocksFreq+0x4c>
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d004      	beq.n	8001578 <RCC_GetClocksFreq+0x54>
 800156e:	e030      	b.n	80015d2 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a83      	ldr	r2, [pc, #524]	@ (8001780 <RCC_GetClocksFreq+0x25c>)
 8001574:	601a      	str	r2, [r3, #0]
      break;
 8001576:	e030      	b.n	80015da <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a81      	ldr	r2, [pc, #516]	@ (8001780 <RCC_GetClocksFreq+0x25c>)
 800157c:	601a      	str	r2, [r3, #0]
      break;
 800157e:	e02c      	b.n	80015da <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001580:	4b7e      	ldr	r3, [pc, #504]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001588:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800158a:	4b7c      	ldr	r3, [pc, #496]	@ (800177c <RCC_GetClocksFreq+0x258>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001592:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	3302      	adds	r3, #2
 800159a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4a77      	ldr	r2, [pc, #476]	@ (8001784 <RCC_GetClocksFreq+0x260>)
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ac:	e00d      	b.n	80015ca <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80015ae:	4b73      	ldr	r3, [pc, #460]	@ (800177c <RCC_GetClocksFreq+0x258>)
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80015ba:	4a71      	ldr	r2, [pc, #452]	@ (8001780 <RCC_GetClocksFreq+0x25c>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fbb2 f2f3 	udiv	r2, r2, r3
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ce:	601a      	str	r2, [r3, #0]
      break;
 80015d0:	e003      	b.n	80015da <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001780 <RCC_GetClocksFreq+0x25c>)
 80015d6:	601a      	str	r2, [r3, #0]
      break;
 80015d8:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80015da:	4b68      	ldr	r3, [pc, #416]	@ (800177c <RCC_GetClocksFreq+0x258>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80015ea:	4a67      	ldr	r2, [pc, #412]	@ (8001788 <RCC_GetClocksFreq+0x264>)
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	40da      	lsrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001602:	4b5e      	ldr	r3, [pc, #376]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800160a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001612:	4a5d      	ldr	r2, [pc, #372]	@ (8001788 <RCC_GetClocksFreq+0x264>)
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	40da      	lsrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800162a:	4b54      	ldr	r3, [pc, #336]	@ (800177c <RCC_GetClocksFreq+0x258>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001632:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	0adb      	lsrs	r3, r3, #11
 8001638:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800163a:	4a53      	ldr	r2, [pc, #332]	@ (8001788 <RCC_GetClocksFreq+0x264>)
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	40da      	lsrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8001652:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001656:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800165a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001662:	4a4a      	ldr	r2, [pc, #296]	@ (800178c <RCC_GetClocksFreq+0x268>)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166a:	b29b      	uxth	r3, r3
 800166c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	e003      	b.n	800168e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8001696:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	0a5b      	lsrs	r3, r3, #9
 800169c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800169e:	4a3b      	ldr	r2, [pc, #236]	@ (800178c <RCC_GetClocksFreq+0x268>)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80016b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	e003      	b.n	80016ca <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80016ca:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <RCC_GetClocksFreq+0x258>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d003      	beq.n	80016de <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <RCC_GetClocksFreq+0x25c>)
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	e003      	b.n	80016e6 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <RCC_GetClocksFreq+0x258>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	d003      	beq.n	80016fa <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <RCC_GetClocksFreq+0x25c>)
 80016f6:	61da      	str	r2, [r3, #28]
 80016f8:	e003      	b.n	8001702 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800170e:	d10d      	bne.n	800172c <RCC_GetClocksFreq+0x208>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001716:	429a      	cmp	r2, r3
 8001718:	d108      	bne.n	800172c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d104      	bne.n	800172c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	621a      	str	r2, [r3, #32]
 800172a:	e003      	b.n	8001734 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800173c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001740:	d10d      	bne.n	800175e <RCC_GetClocksFreq+0x23a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	429a      	cmp	r2, r3
 800174a:	d108      	bne.n	800175e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d104      	bne.n	800175e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	005a      	lsls	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24
 800175c:	e003      	b.n	8001766 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <RCC_GetClocksFreq+0x258>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10e      	bne.n	8001790 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
 800177a:	e028      	b.n	80017ce <RCC_GetClocksFreq+0x2aa>
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200
 8001784:	003d0900 	.word	0x003d0900
 8001788:	08005f48 	.word	0x08005f48
 800178c:	08005f58 	.word	0x08005f58
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001790:	4b6c      	ldr	r3, [pc, #432]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d104      	bne.n	80017a6 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80017a4:	e013      	b.n	80017ce <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80017a6:	4b67      	ldr	r3, [pc, #412]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ba:	e008      	b.n	80017ce <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80017bc:	4b61      	ldr	r3, [pc, #388]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d102      	bne.n	80017ce <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001948 <RCC_GetClocksFreq+0x424>)
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80017ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d104      	bne.n	80017e4 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017e2:	e021      	b.n	8001828 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80017e4:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f0:	d104      	bne.n	80017fc <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017fa:	e015      	b.n	8001828 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80017fc:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001808:	d104      	bne.n	8001814 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001810:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001812:	e009      	b.n	8001828 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001814:	4b4b      	ldr	r3, [pc, #300]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800181c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001820:	d102      	bne.n	8001828 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a48      	ldr	r2, [pc, #288]	@ (8001948 <RCC_GetClocksFreq+0x424>)
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001828:	4b46      	ldr	r3, [pc, #280]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d104      	bne.n	800183e <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
 800183c:	e021      	b.n	8001882 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800183e:	4b41      	ldr	r3, [pc, #260]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001846:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800184a:	d104      	bne.n	8001856 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
 8001854:	e015      	b.n	8001882 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001856:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800185e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001862:	d104      	bne.n	800186e <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800186a:	631a      	str	r2, [r3, #48]	@ 0x30
 800186c:	e009      	b.n	8001882 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800186e:	4b35      	ldr	r3, [pc, #212]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001876:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800187a:	d102      	bne.n	8001882 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a32      	ldr	r2, [pc, #200]	@ (8001948 <RCC_GetClocksFreq+0x424>)
 8001880:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001882:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	635a      	str	r2, [r3, #52]	@ 0x34
 8001896:	e021      	b.n	80018dc <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001898:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80018a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018a4:	d104      	bne.n	80018b0 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ae:	e015      	b.n	80018dc <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80018b0:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80018b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018bc:	d104      	bne.n	80018c8 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c6:	e009      	b.n	80018dc <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80018d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80018d4:	d102      	bne.n	80018dc <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001948 <RCC_GetClocksFreq+0x424>)
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d104      	bne.n	80018f2 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80018f0:	e021      	b.n	8001936 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80018fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018fe:	d104      	bne.n	800190a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001908:	e015      	b.n	8001936 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001916:	d104      	bne.n	8001922 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800191e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001920:	e009      	b.n	8001936 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <RCC_GetClocksFreq+0x420>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800192a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800192e:	d102      	bne.n	8001936 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <RCC_GetClocksFreq+0x424>)
 8001934:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001936:	bf00      	nop
 8001938:	372c      	adds	r7, #44	@ 0x2c
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	007a1200 	.word	0x007a1200

0800194c <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	0f1b      	lsrs	r3, r3, #28
 800195c:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <RCC_ADCCLKConfig+0x4c>)
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <RCC_ADCCLKConfig+0x4c>)
 800196a:	f423 5378 	bic.w	r3, r3, #15872	@ 0x3e00
 800196e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001970:	e005      	b.n	800197e <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <RCC_ADCCLKConfig+0x4c>)
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <RCC_ADCCLKConfig+0x4c>)
 8001978:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 800197c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <RCC_ADCCLKConfig+0x4c>)
 8001980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001982:	4905      	ldr	r1, [pc, #20]	@ (8001998 <RCC_ADCCLKConfig+0x4c>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4313      	orrs	r3, r2
 8001988:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	4909      	ldr	r1, [pc, #36]	@ (80019d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80019ba:	e006      	b.n	80019ca <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4904      	ldr	r1, [pc, #16]	@ (80019d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	614b      	str	r3, [r1, #20]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <RCC_APB2PeriphClockCmd+0x3c>)
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	4909      	ldr	r1, [pc, #36]	@ (8001a18 <RCC_APB2PeriphClockCmd+0x3c>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80019fa:	e006      	b.n	8001a0a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <RCC_APB2PeriphClockCmd+0x3c>)
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <RCC_APB2PeriphClockCmd+0x3c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	618b      	str	r3, [r1, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	330c      	adds	r3, #12
 8001a34:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	701a      	strb	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	891b      	ldrh	r3, [r3, #8]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	4013      	ands	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e001      	b.n	8001a72 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	460a      	mov	r2, r1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <SYSCFG_EXTILineConfig+0x80>)
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <SYSCFG_EXTILineConfig+0x80>)
 8001ab8:	79b9      	ldrb	r1, [r7, #6]
 8001aba:	0889      	lsrs	r1, r1, #2
 8001abc:	b2c9      	uxtb	r1, r1
 8001abe:	401a      	ands	r2, r3
 8001ac0:	1c8b      	adds	r3, r1, #2
 8001ac2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <SYSCFG_EXTILineConfig+0x80>)
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ad4:	79f9      	ldrb	r1, [r7, #7]
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <SYSCFG_EXTILineConfig+0x80>)
 8001ae4:	79b9      	ldrb	r1, [r7, #6]
 8001ae6:	0889      	lsrs	r1, r1, #2
 8001ae8:	b2c9      	uxtb	r1, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	1c8b      	adds	r3, r1, #2
 8001aee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000

08001b04 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d103      	bne.n	8001b96 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	e005      	b.n	8001ba2 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d102      	bne.n	8001ba2 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001bb4:	e006      	b.n	8001bc4 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	3724      	adds	r7, #36	@ 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e001      	b.n	8001bf4 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b087      	sub	sp, #28
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4013      	ands	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e00d      	b.n	8001c64 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d105      	bne.n	8001c5a <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e004      	b.n	8001c64 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <USART_GetITStatus+0x8e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	74fb      	strb	r3, [r7, #19]
 8001c8e:	e001      	b.n	8001c94 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	fa02 f103 	lsl.w	r1, r2, r3
 8001cba:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <NVIC_EnableIRQ+0x30>)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <uart_put_char+0x30>)
 8001cea:	f7ff ff1d 	bl	8001b28 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001cee:	bf00      	nop
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <uart_put_char+0x30>)
 8001cf4:	f7ff ff6c 	bl	8001bd0 <USART_GetFlagStatus>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f8      	beq.n	8001cf0 <uart_put_char+0x18>
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40004400 	.word	0x40004400

08001d0c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e012      	b.n	8001d46 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	d102      	bne.n	8001d32 <_write_r+0x26>
            uart_put_char('\r');
 8001d2c:	200d      	movs	r0, #13
 8001d2e:	f7ff ffd3 	bl	8001cd8 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffcc 	bl	8001cd8 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbe8      	blt.n	8001d20 <_write_r+0x14>
    }

    return len;
 8001d4e:	683b      	ldr	r3, [r7, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001d5c:	4915      	ldr	r1, [pc, #84]	@ (8001db4 <USART2_IRQHandler+0x5c>)
 8001d5e:	4816      	ldr	r0, [pc, #88]	@ (8001db8 <USART2_IRQHandler+0x60>)
 8001d60:	f7ff ff4f 	bl	8001c02 <USART_GetITStatus>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d021      	beq.n	8001dae <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <USART2_IRQHandler+0x60>)
 8001d6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <USART2_IRQHandler+0x64>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	b2d0      	uxtb	r0, r2
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <USART2_IRQHandler+0x64>)
 8001d7c:	7010      	strb	r0, [r2, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	b2c9      	uxtb	r1, r1
 8001d82:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <USART2_IRQHandler+0x68>)
 8001d84:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <USART2_IRQHandler+0x6c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	@ 0xff
 8001d8e:	d107      	bne.n	8001da0 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <USART2_IRQHandler+0x70>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <USART2_IRQHandler+0x70>)
 8001d9c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001d9e:	e006      	b.n	8001dae <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <USART2_IRQHandler+0x6c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <USART2_IRQHandler+0x6c>)
 8001dac:	701a      	strb	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	00050105 	.word	0x00050105
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	200002e8 	.word	0x200002e8
 8001dc0:	200001e8 	.word	0x200001e8
 8001dc4:	200002ea 	.word	0x200002ea
 8001dc8:	200002e9 	.word	0x200002e9

08001dcc <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b094      	sub	sp, #80	@ 0x50
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001dd4:	4b86      	ldr	r3, [pc, #536]	@ (8001ff0 <uart_init+0x224>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f001 ff55 	bl	8003c8c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001de2:	4b83      	ldr	r3, [pc, #524]	@ (8001ff0 <uart_init+0x224>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 ff4e 	bl	8003c8c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001df0:	4b80      	ldr	r3, [pc, #512]	@ (8001ff4 <uart_init+0x228>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff4 <uart_init+0x228>)
 8001df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfa:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001dfc:	4b7d      	ldr	r3, [pc, #500]	@ (8001ff4 <uart_init+0x228>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a7c      	ldr	r2, [pc, #496]	@ (8001ff4 <uart_init+0x228>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e06:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001e08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e16:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001e18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e26:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001e28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e36:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001e38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e42:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001e46:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001e48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e56:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001e58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e62:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001e66:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001e68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e6c:	889b      	ldrh	r3, [r3, #4]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e74:	f023 030c 	bic.w	r3, r3, #12
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001e7c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e84:	8892      	ldrh	r2, [r2, #4]
 8001e86:	b292      	uxth	r2, r2
 8001e88:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001e8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e98:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001e9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ea4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ea8:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001eaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001eb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001eb8:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001eba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ec4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001ec8:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001eca:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <uart_init+0x22c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff8 <uart_init+0x22c>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001ed6:	4b48      	ldr	r3, [pc, #288]	@ (8001ff8 <uart_init+0x22c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a47      	ldr	r2, [pc, #284]	@ (8001ff8 <uart_init+0x22c>)
 8001edc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ee0:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001ee2:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <uart_init+0x22c>)
 8001ee4:	4a44      	ldr	r2, [pc, #272]	@ (8001ff8 <uart_init+0x22c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <uart_init+0x22c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a42      	ldr	r2, [pc, #264]	@ (8001ff8 <uart_init+0x22c>)
 8001ef0:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001ef4:	f023 030c 	bic.w	r3, r3, #12
 8001ef8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001efa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff8 <uart_init+0x22c>)
 8001efc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ff8 <uart_init+0x22c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001f02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <uart_init+0x22c>)
 8001f04:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff8 <uart_init+0x22c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <uart_init+0x22c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff8 <uart_init+0x22c>)
 8001f10:	f043 030c 	orr.w	r3, r3, #12
 8001f14:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <uart_init+0x22c>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4a37      	ldr	r2, [pc, #220]	@ (8001ff8 <uart_init+0x22c>)
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f20:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001f22:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <uart_init+0x22c>)
 8001f24:	4a34      	ldr	r2, [pc, #208]	@ (8001ff8 <uart_init+0x22c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f2e:	2300      	movs	r3, #0
 8001f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f32:	2300      	movs	r3, #0
 8001f34:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff faf2 	bl	8001524 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f42:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001f44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <uart_init+0x22c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f52:	005a      	lsls	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	fb01 f202 	mul.w	r2, r1, r2
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f70:	e00d      	b.n	8001f8e <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	fb01 f202 	mul.w	r2, r1, r2
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d302      	bcc.n	8001f9e <uart_init+0x1d2>
        divider++;
 8001f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001f9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <uart_init+0x22c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fb6:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001fba:	4013      	ands	r3, r2
 8001fbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <uart_init+0x22c>)
 8001fc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <uart_init+0x22c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <uart_init+0x22c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <uart_init+0x230>)
 8001fda:	4807      	ldr	r0, [pc, #28]	@ (8001ff8 <uart_init+0x22c>)
 8001fdc:	f7ff fdb6 	bl	8001b4c <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001fe0:	2026      	movs	r0, #38	@ 0x26
 8001fe2:	f7ff fe5f 	bl	8001ca4 <NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3750      	adds	r7, #80	@ 0x50
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	00050105 	.word	0x00050105

08002000 <ADC_setup_PA>:
 *      Author: fcadi
 */

#include "ADC.h"

void ADC_setup_PA(void) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	@ 0x30
 8002004:	af00      	add	r7, sp, #0

    RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8);
 8002006:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800200a:	f7ff fc9f 	bl	800194c <RCC_ADCCLKConfig>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 800200e:	2101      	movs	r1, #1
 8002010:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002014:	f7ff fcc2 	bl	800199c <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002018:	2101      	movs	r1, #1
 800201a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800201e:	f7ff fcbd 	bl	800199c <RCC_AHBPeriphClockCmd>
    GPIO_InitTypeDef gpio;
    GPIO_StructInit(&gpio);
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f9d2 	bl	80013d0 <GPIO_StructInit>
    gpio.GPIO_Pin  = GPIO_Pin_0 | GPIO_Pin_1;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    gpio.GPIO_Mode = GPIO_Mode_AN;
 8002030:	2303      	movs	r3, #3
 8002032:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    GPIO_Init(GPIOA, &gpio);
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002046:	f7ff f92d 	bl	80012a4 <GPIO_Init>

    ADC_InitTypeDef adc;
    ADC_StructInit(&adc);  // reset to defaults
 800204a:	463b      	mov	r3, r7
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fded 	bl	8000c2c <ADC_StructInit>
    adc.ADC_ContinuousConvMode    = DISABLE;                     // single conversion
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
    adc.ADC_Resolution            = ADC_Resolution_12b;          // 12-bit
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
    adc.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0; // SW trigger
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
    adc.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
    adc.ADC_DataAlign             = ADC_DataAlign_Right;         // right alignment
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
    adc.ADC_OverrunMode           = DISABLE;                     // simplest: overwrite off
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
    adc.ADC_AutoInjMode           = DISABLE;                     // no injected group
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
    adc.ADC_NbrOfRegChannel       = 1;                           // 1 channel only
 800206e:	2301      	movs	r3, #1
 8002070:	773b      	strb	r3, [r7, #28]
    ADC_Init(ADC1, &adc);
 8002072:	463b      	mov	r3, r7
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800207a:	f7fe fd95 	bl	8000ba8 <ADC_Init>

    ADC_Cmd(ADC1, ENABLE);
 800207e:	2101      	movs	r1, #1
 8002080:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002084:	f7fe fdf4 	bl	8000c70 <ADC_Cmd>
    while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 8002088:	bf00      	nop
 800208a:	2101      	movs	r1, #1
 800208c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002090:	f7fe ff96 	bl	8000fc0 <ADC_GetFlagStatus>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f7      	beq.n	800208a <ADC_setup_PA+0x8a>
	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 800209a:	2101      	movs	r1, #1
 800209c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020a0:	f7fe fe57 	bl	8000d52 <ADC_VoltageRegulatorCmd>
	for(uint32_t i = 0; i<10000;i++);
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a8:	e002      	b.n	80020b0 <ADC_setup_PA+0xb0>
 80020aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ac:	3301      	adds	r3, #1
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d9f7      	bls.n	80020aa <ADC_setup_PA+0xaa>


    ADC_Cmd(ADC1, DISABLE);
 80020ba:	2100      	movs	r1, #0
 80020bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020c0:	f7fe fdd6 	bl	8000c70 <ADC_Cmd>
    while (ADC_GetDisableCmdStatus(ADC1)) {}
 80020c4:	bf00      	nop
 80020c6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020ca:	f7fe fe2a 	bl	8000d22 <ADC_GetDisableCmdStatus>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f8      	bne.n	80020c6 <ADC_setup_PA+0xc6>
    ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 80020d4:	2100      	movs	r1, #0
 80020d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020da:	f7fe fdf5 	bl	8000cc8 <ADC_SelectCalibrationMode>
    ADC_StartCalibration(ADC1);
 80020de:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020e2:	f7fe fde1 	bl	8000ca8 <ADC_StartCalibration>
    while (ADC_GetCalibrationStatus(ADC1)) {}
 80020e6:	bf00      	nop
 80020e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020ec:	f7fe fe03 	bl	8000cf6 <ADC_GetCalibrationStatus>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f8      	bne.n	80020e8 <ADC_setup_PA+0xe8>
    for(uint32_t i = 0; i<100;i++);
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fa:	e002      	b.n	8002102 <ADC_setup_PA+0x102>
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	3301      	adds	r3, #1
 8002100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002104:	2b63      	cmp	r3, #99	@ 0x63
 8002106:	d9f9      	bls.n	80020fc <ADC_setup_PA+0xfc>

    ADC_Cmd(ADC1, ENABLE);
 8002108:	2101      	movs	r1, #1
 800210a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800210e:	f7fe fdaf 	bl	8000c70 <ADC_Cmd>
    while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 8002112:	bf00      	nop
 8002114:	2101      	movs	r1, #1
 8002116:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800211a:	f7fe ff51 	bl	8000fc0 <ADC_GetFlagStatus>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f7      	beq.n	8002114 <ADC_setup_PA+0x114>
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3730      	adds	r7, #48	@ 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ADC_measure_PA>:

// --- Measure PA0 (ch=1) or PA1 (ch=2) once ---
uint16_t ADC_measure_PA(uint8_t ch) {
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
    uint32_t channel = (ch == 1) ? ADC_Channel_1 : ADC_Channel_2;      // PA0->ch1, PA1->ch2
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <ADC_measure_PA+0x14>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <ADC_measure_PA+0x16>
 8002142:	2302      	movs	r3, #2
 8002144:	60fb      	str	r3, [r7, #12]
    ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_1Cycles5); // rank=1, Ts=1.5
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	2300      	movs	r3, #0
 800214c:	2201      	movs	r2, #1
 800214e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002152:	f7fe fe20 	bl	8000d96 <ADC_RegularChannelConfig>
    ADC_StartConversion(ADC1);                                         // start
 8002156:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800215a:	f7fe ff14 	bl	8000f86 <ADC_StartConversion>
    while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0) {}              // wait EOC
 800215e:	bf00      	nop
 8002160:	2104      	movs	r1, #4
 8002162:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002166:	f7fe ff2b 	bl	8000fc0 <ADC_GetFlagStatus>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f7      	beq.n	8002160 <ADC_measure_PA+0x32>
    return ADC_GetConversionValue(ADC1);                               // 0..4095
 8002170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002174:	f7fe ff17 	bl	8000fa6 <ADC_GetConversionValue>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <iniEXTIA4>:
#include "interrupt.h"

//Mostly template for now
//Keep in mind to switch the GPIOx port and EXTI_PinSourcex and the EXTI_Linex

void iniEXTIA4(){
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8002188:	2101      	movs	r1, #1
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff fc26 	bl	80019dc <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 8002190:	2104      	movs	r1, #4
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff fc74 	bl	8001a80 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 8002198:	2304      	movs	r3, #4
 800219a:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 80021a0:	2300      	movs	r3, #0
 80021a2:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 80021a4:	2308      	movs	r3, #8
 80021a6:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff21 	bl	8000ff4 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80021b2:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 80021b6:	f7ff f93d 	bl	8001434 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 80021ba:	230a      	movs	r3, #10
 80021bc:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f945 	bl	800145c <NVIC_Init>

}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <EXTI4_IRQHandler>:

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 80021de:	2004      	movs	r0, #4
 80021e0:	f7ff f80e 	bl	8001200 <EXTI_GetITStatus>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
    	setLed('m');
 80021ea:	206d      	movs	r0, #109	@ 0x6d
 80021ec:	f000 fc82 	bl	8002af4 <setLed>

        EXTI_ClearITPendingBit(EXTI_Line4);
 80021f0:	2004      	movs	r0, #4
 80021f2:	f7ff f83d 	bl	8001270 <EXTI_ClearITPendingBit>
    }

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8002202:	2101      	movs	r1, #1
 8002204:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002208:	f7ff fbc8 	bl	800199c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 800220c:	2101      	movs	r1, #1
 800220e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002212:	f7ff fbc3 	bl	800199c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8002216:	2101      	movs	r1, #1
 8002218:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800221c:	f7ff fbbe 	bl	800199c <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8002220:	463b      	mov	r3, r7
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f8d4 	bl	80013d0 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002228:	2300      	movs	r3, #0
 800222a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800222c:	2302      	movs	r3, #2
 800222e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8002230:	2310      	movs	r3, #16
 8002232:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8002234:	463b      	mov	r3, r7
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223c:	f7ff f832 	bl	80012a4 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8002240:	463b      	mov	r3, r7
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f8c4 	bl	80013d0 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002248:	2300      	movs	r3, #0
 800224a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800224c:	2302      	movs	r3, #2
 800224e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8002250:	2321      	movs	r3, #33	@ 0x21
 8002252:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8002254:	463b      	mov	r3, r7
 8002256:	4619      	mov	r1, r3
 8002258:	480a      	ldr	r0, [pc, #40]	@ (8002284 <initJoystick+0x88>)
 800225a:	f7ff f823 	bl	80012a4 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 800225e:	463b      	mov	r3, r7
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f8b5 	bl	80013d0 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002266:	2300      	movs	r3, #0
 8002268:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800226a:	2302      	movs	r3, #2
 800226c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800226e:	2303      	movs	r3, #3
 8002270:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8002272:	463b      	mov	r3, r7
 8002274:	4619      	mov	r1, r3
 8002276:	4804      	ldr	r0, [pc, #16]	@ (8002288 <initJoystick+0x8c>)
 8002278:	f7ff f814 	bl	80012a4 <GPIO_Init>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	48000400 	.word	0x48000400
 8002288:	48000800 	.word	0x48000800

0800228c <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8002296:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <lcd_transmit_byte+0x5c>)
 8002298:	8a9b      	ldrh	r3, [r3, #20]
 800229a:	b29b      	uxth	r3, r3
 800229c:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <lcd_transmit_byte+0x5c>)
 800229e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 80022a6:	bf00      	nop
 80022a8:	2102      	movs	r1, #2
 80022aa:	4810      	ldr	r0, [pc, #64]	@ (80022ec <lcd_transmit_byte+0x60>)
 80022ac:	f7ff fbcc 	bl	8001a48 <SPI_I2S_GetFlagStatus>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d1f8      	bne.n	80022a8 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4619      	mov	r1, r3
 80022ba:	480c      	ldr	r0, [pc, #48]	@ (80022ec <lcd_transmit_byte+0x60>)
 80022bc:	f7ff fbae 	bl	8001a1c <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 80022c0:	bf00      	nop
 80022c2:	2102      	movs	r1, #2
 80022c4:	4809      	ldr	r0, [pc, #36]	@ (80022ec <lcd_transmit_byte+0x60>)
 80022c6:	f7ff fbbf 	bl	8001a48 <SPI_I2S_GetFlagStatus>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d1f8      	bne.n	80022c2 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <lcd_transmit_byte+0x5c>)
 80022d2:	8a9b      	ldrh	r3, [r3, #20]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <lcd_transmit_byte+0x5c>)
 80022d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022dc:	b29b      	uxth	r3, r3
 80022de:	8293      	strh	r3, [r2, #20]
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	48000400 	.word	0x48000400
 80022ec:	40003800 	.word	0x40003800

080022f0 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    int i = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80022fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002300:	8a9b      	ldrh	r3, [r3, #20]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800230c:	b29b      	uxth	r3, r3
 800230e:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ffbb 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8002316:	2010      	movs	r0, #16
 8002318:	f7ff ffb8 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 800231c:	20b0      	movs	r0, #176	@ 0xb0
 800231e:	f7ff ffb5 	bl	800228c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002326:	8a9b      	ldrh	r3, [r3, #20]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	b29b      	uxth	r3, r3
 8002334:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e009      	b.n	8002350 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ffa1 	bl	800228c <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b7f      	cmp	r3, #127	@ 0x7f
 8002354:	ddf2      	ble.n	800233c <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8002356:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800235a:	8a9b      	ldrh	r3, [r3, #20]
 800235c:	b29b      	uxth	r3, r3
 800235e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002366:	b29b      	uxth	r3, r3
 8002368:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800236a:	2000      	movs	r0, #0
 800236c:	f7ff ff8e 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8002370:	2010      	movs	r0, #16
 8002372:	f7ff ff8b 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8002376:	20b1      	movs	r0, #177	@ 0xb1
 8002378:	f7ff ff88 	bl	800228c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 800237c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002380:	8a9b      	ldrh	r3, [r3, #20]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	b29b      	uxth	r3, r3
 800238e:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e009      	b.n	80023aa <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff74 	bl	800228c <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2bff      	cmp	r3, #255	@ 0xff
 80023ae:	ddf2      	ble.n	8002396 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80023b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80023b4:	8a9b      	ldrh	r3, [r3, #20]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80023bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff ff61 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80023ca:	2010      	movs	r0, #16
 80023cc:	f7ff ff5e 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 80023d0:	20b2      	movs	r0, #178	@ 0xb2
 80023d2:	f7ff ff5b 	bl	800228c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80023d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80023da:	8a9b      	ldrh	r3, [r3, #20]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80023e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 80023ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e009      	b.n	8002406 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff46 	bl	800228c <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800240c:	dbf1      	blt.n	80023f2 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800240e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002412:	8a9b      	ldrh	r3, [r3, #20]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800241a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800241e:	b29b      	uxth	r3, r3
 8002420:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff ff32 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8002428:	2010      	movs	r0, #16
 800242a:	f7ff ff2f 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 800242e:	20b3      	movs	r0, #179	@ 0xb3
 8002430:	f7ff ff2c 	bl	800228c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002434:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002438:	8a9b      	ldrh	r3, [r3, #20]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002444:	b29b      	uxth	r3, r3
 8002446:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8002448:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e009      	b.n	8002464 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff17 	bl	800228c <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3301      	adds	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800246a:	dbf1      	blt.n	8002450 <lcd_push_buffer+0x160>
    }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <lcd_reset>:

void lcd_reset()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 800247e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002482:	8a9b      	ldrh	r3, [r3, #20]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800248a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800248e:	b29b      	uxth	r3, r3
 8002490:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8002492:	4b2f      	ldr	r3, [pc, #188]	@ (8002550 <lcd_reset+0xd8>)
 8002494:	8a9b      	ldrh	r3, [r3, #20]
 8002496:	b29b      	uxth	r3, r3
 8002498:	4a2d      	ldr	r2, [pc, #180]	@ (8002550 <lcd_reset+0xd8>)
 800249a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 80024a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <lcd_reset+0xd8>)
 80024a4:	8a9b      	ldrh	r3, [r3, #20]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4a29      	ldr	r2, [pc, #164]	@ (8002550 <lcd_reset+0xd8>)
 80024aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	e003      	b.n	80024c0 <lcd_reset+0x48>
 80024b8:	bf00      	nop
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3301      	adds	r3, #1
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f241 2247 	movw	r2, #4679	@ 0x1247
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d9f6      	bls.n	80024b8 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 80024ca:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <lcd_reset+0xd8>)
 80024cc:	8a9b      	ldrh	r3, [r3, #20]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002550 <lcd_reset+0xd8>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	e003      	b.n	80024e8 <lcd_reset+0x70>
 80024e0:	bf00      	nop
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002554 <lcd_reset+0xdc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d9f7      	bls.n	80024e0 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80024f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80024f4:	8a9b      	ldrh	r3, [r3, #20]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80024fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002500:	b29b      	uxth	r3, r3
 8002502:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8002504:	20ae      	movs	r0, #174	@ 0xae
 8002506:	f7ff fec1 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 800250a:	20a2      	movs	r0, #162	@ 0xa2
 800250c:	f7ff febe 	bl	800228c <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8002510:	20a0      	movs	r0, #160	@ 0xa0
 8002512:	f7ff febb 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8002516:	20c8      	movs	r0, #200	@ 0xc8
 8002518:	f7ff feb8 	bl	800228c <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 800251c:	2022      	movs	r0, #34	@ 0x22
 800251e:	f7ff feb5 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8002522:	202f      	movs	r0, #47	@ 0x2f
 8002524:	f7ff feb2 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8002528:	2040      	movs	r0, #64	@ 0x40
 800252a:	f7ff feaf 	bl	800228c <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 800252e:	20af      	movs	r0, #175	@ 0xaf
 8002530:	f7ff feac 	bl	800228c <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8002534:	2081      	movs	r0, #129	@ 0x81
 8002536:	f7ff fea9 	bl	800228c <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 800253a:	2017      	movs	r0, #23
 800253c:	f7ff fea6 	bl	800228c <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8002540:	20a6      	movs	r0, #166	@ 0xa6
 8002542:	f7ff fea3 	bl	800228c <lcd_transmit_byte>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	48000400 	.word	0x48000400
 8002554:	0005f36f 	.word	0x0005f36f

08002558 <init_spi_lcd>:

void init_spi_lcd() {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 800255c:	4b9d      	ldr	r3, [pc, #628]	@ (80027d4 <init_spi_lcd+0x27c>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	4a9c      	ldr	r2, [pc, #624]	@ (80027d4 <init_spi_lcd+0x27c>)
 8002562:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8002566:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8002568:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <init_spi_lcd+0x27c>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	4a99      	ldr	r2, [pc, #612]	@ (80027d4 <init_spi_lcd+0x27c>)
 800256e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002572:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8002574:	4b98      	ldr	r3, [pc, #608]	@ (80027d8 <init_spi_lcd+0x280>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	4a97      	ldr	r2, [pc, #604]	@ (80027d8 <init_spi_lcd+0x280>)
 800257a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800257e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8002580:	4b95      	ldr	r3, [pc, #596]	@ (80027d8 <init_spi_lcd+0x280>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	4a94      	ldr	r2, [pc, #592]	@ (80027d8 <init_spi_lcd+0x280>)
 8002586:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800258a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 800258c:	4b92      	ldr	r3, [pc, #584]	@ (80027d8 <init_spi_lcd+0x280>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	4a91      	ldr	r2, [pc, #580]	@ (80027d8 <init_spi_lcd+0x280>)
 8002592:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002596:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8002598:	4b8f      	ldr	r3, [pc, #572]	@ (80027d8 <init_spi_lcd+0x280>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	4a8e      	ldr	r2, [pc, #568]	@ (80027d8 <init_spi_lcd+0x280>)
 800259e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80025a2:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 80025a4:	4b8c      	ldr	r3, [pc, #560]	@ (80027d8 <init_spi_lcd+0x280>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a8b      	ldr	r2, [pc, #556]	@ (80027d8 <init_spi_lcd+0x280>)
 80025aa:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 80025ae:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80025b0:	4b89      	ldr	r3, [pc, #548]	@ (80027d8 <init_spi_lcd+0x280>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a88      	ldr	r2, [pc, #544]	@ (80027d8 <init_spi_lcd+0x280>)
 80025b6:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80025ba:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 80025bc:	4b86      	ldr	r3, [pc, #536]	@ (80027d8 <init_spi_lcd+0x280>)
 80025be:	889b      	ldrh	r3, [r3, #4]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4985      	ldr	r1, [pc, #532]	@ (80027d8 <init_spi_lcd+0x280>)
 80025c4:	f645 73ff 	movw	r3, #24575	@ 0x5fff
 80025c8:	4013      	ands	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80025ce:	4a82      	ldr	r2, [pc, #520]	@ (80027d8 <init_spi_lcd+0x280>)
 80025d0:	4b81      	ldr	r3, [pc, #516]	@ (80027d8 <init_spi_lcd+0x280>)
 80025d2:	8892      	ldrh	r2, [r2, #4]
 80025d4:	b292      	uxth	r2, r2
 80025d6:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 80025d8:	4b7f      	ldr	r3, [pc, #508]	@ (80027d8 <init_spi_lcd+0x280>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7e      	ldr	r2, [pc, #504]	@ (80027d8 <init_spi_lcd+0x280>)
 80025de:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 80025e2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80025e4:	4b7c      	ldr	r3, [pc, #496]	@ (80027d8 <init_spi_lcd+0x280>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	@ (80027d8 <init_spi_lcd+0x280>)
 80025ea:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 80025ee:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 80025f0:	4b79      	ldr	r3, [pc, #484]	@ (80027d8 <init_spi_lcd+0x280>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a78      	ldr	r2, [pc, #480]	@ (80027d8 <init_spi_lcd+0x280>)
 80025f6:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 80025fa:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80025fc:	4b76      	ldr	r3, [pc, #472]	@ (80027d8 <init_spi_lcd+0x280>)
 80025fe:	4a76      	ldr	r2, [pc, #472]	@ (80027d8 <init_spi_lcd+0x280>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8002604:	4b74      	ldr	r3, [pc, #464]	@ (80027d8 <init_spi_lcd+0x280>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a73      	ldr	r2, [pc, #460]	@ (80027d8 <init_spi_lcd+0x280>)
 800260a:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 800260e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002610:	4b71      	ldr	r3, [pc, #452]	@ (80027d8 <init_spi_lcd+0x280>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a70      	ldr	r2, [pc, #448]	@ (80027d8 <init_spi_lcd+0x280>)
 8002616:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 800261a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 800261c:	4b6e      	ldr	r3, [pc, #440]	@ (80027d8 <init_spi_lcd+0x280>)
 800261e:	889b      	ldrh	r3, [r3, #4]
 8002620:	b29b      	uxth	r3, r3
 8002622:	4a6d      	ldr	r2, [pc, #436]	@ (80027d8 <init_spi_lcd+0x280>)
 8002624:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800262c:	b29b      	uxth	r3, r3
 800262e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002630:	4a69      	ldr	r2, [pc, #420]	@ (80027d8 <init_spi_lcd+0x280>)
 8002632:	4b69      	ldr	r3, [pc, #420]	@ (80027d8 <init_spi_lcd+0x280>)
 8002634:	8892      	ldrh	r2, [r2, #4]
 8002636:	b292      	uxth	r2, r2
 8002638:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 800263a:	4b67      	ldr	r3, [pc, #412]	@ (80027d8 <init_spi_lcd+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a66      	ldr	r2, [pc, #408]	@ (80027d8 <init_spi_lcd+0x280>)
 8002640:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 8002644:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002646:	4b64      	ldr	r3, [pc, #400]	@ (80027d8 <init_spi_lcd+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <init_spi_lcd+0x280>)
 800264c:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 8002650:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8002652:	4b61      	ldr	r3, [pc, #388]	@ (80027d8 <init_spi_lcd+0x280>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a60      	ldr	r2, [pc, #384]	@ (80027d8 <init_spi_lcd+0x280>)
 8002658:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 800265c:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800265e:	4b5e      	ldr	r3, [pc, #376]	@ (80027d8 <init_spi_lcd+0x280>)
 8002660:	4a5d      	ldr	r2, [pc, #372]	@ (80027d8 <init_spi_lcd+0x280>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8002666:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002670:	0c9b      	lsrs	r3, r3, #18
 8002672:	049b      	lsls	r3, r3, #18
 8002674:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002676:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8002686:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800268a:	889b      	ldrh	r3, [r3, #4]
 800268c:	b29b      	uxth	r3, r3
 800268e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002692:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	b29b      	uxth	r3, r3
 800269c:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800269e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026a6:	8892      	ldrh	r2, [r2, #4]
 80026a8:	b292      	uxth	r2, r2
 80026aa:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 80026ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	049b      	lsls	r3, r3, #18
 80026ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80026bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 80026cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026da:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80026dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026e6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80026ea:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80026ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	049b      	lsls	r3, r3, #18
 80026fa:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80026fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002700:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 8002708:	4b33      	ldr	r3, [pc, #204]	@ (80027d8 <init_spi_lcd+0x280>)
 800270a:	8a9b      	ldrh	r3, [r3, #20]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4a32      	ldr	r2, [pc, #200]	@ (80027d8 <init_spi_lcd+0x280>)
 8002710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002714:	b29b      	uxth	r3, r3
 8002716:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8002718:	4b30      	ldr	r3, [pc, #192]	@ (80027dc <init_spi_lcd+0x284>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	4a2f      	ldr	r2, [pc, #188]	@ (80027dc <init_spi_lcd+0x284>)
 8002720:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8002724:	b29b      	uxth	r3, r3
 8002726:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8002728:	4a2c      	ldr	r2, [pc, #176]	@ (80027dc <init_spi_lcd+0x284>)
 800272a:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <init_spi_lcd+0x284>)
 800272c:	8812      	ldrh	r2, [r2, #0]
 800272e:	b292      	uxth	r2, r2
 8002730:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8002732:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <init_spi_lcd+0x284>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <init_spi_lcd+0x284>)
 800273a:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 800273e:	b29b      	uxth	r3, r3
 8002740:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8002742:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <init_spi_lcd+0x284>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4a24      	ldr	r2, [pc, #144]	@ (80027dc <init_spi_lcd+0x284>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	b29b      	uxth	r3, r3
 8002750:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8002752:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <init_spi_lcd+0x284>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4a20      	ldr	r2, [pc, #128]	@ (80027dc <init_spi_lcd+0x284>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8002762:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <init_spi_lcd+0x284>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4a1c      	ldr	r2, [pc, #112]	@ (80027dc <init_spi_lcd+0x284>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800276e:	b29b      	uxth	r3, r3
 8002770:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <init_spi_lcd+0x284>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	4a18      	ldr	r2, [pc, #96]	@ (80027dc <init_spi_lcd+0x284>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	b29b      	uxth	r3, r3
 8002780:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8002782:	4a16      	ldr	r2, [pc, #88]	@ (80027dc <init_spi_lcd+0x284>)
 8002784:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <init_spi_lcd+0x284>)
 8002786:	8812      	ldrh	r2, [r2, #0]
 8002788:	b292      	uxth	r2, r2
 800278a:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <init_spi_lcd+0x284>)
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <init_spi_lcd+0x284>)
 8002794:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002798:	b29b      	uxth	r3, r3
 800279a:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <init_spi_lcd+0x284>)
 800279e:	889b      	ldrh	r3, [r3, #4]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4a0e      	ldr	r2, [pc, #56]	@ (80027dc <init_spi_lcd+0x284>)
 80027a4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <init_spi_lcd+0x284>)
 80027ae:	8b9b      	ldrh	r3, [r3, #28]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <init_spi_lcd+0x284>)
 80027b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <init_spi_lcd+0x284>)
 80027be:	2207      	movs	r2, #7
 80027c0:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <init_spi_lcd+0x284>)
 80027c4:	889b      	ldrh	r3, [r3, #4]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <init_spi_lcd+0x284>)
 80027ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	e006      	b.n	80027e0 <init_spi_lcd+0x288>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	48000400 	.word	0x48000400
 80027dc:	40003800 	.word	0x40003800
 80027e0:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <init_spi_lcd+0x2b4>)
 80027e4:	889b      	ldrh	r3, [r3, #4]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4a08      	ldr	r2, [pc, #32]	@ (800280c <init_spi_lcd+0x2b4>)
 80027ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <init_spi_lcd+0x2b4>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <init_spi_lcd+0x2b4>)
 80027fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fe:	b29b      	uxth	r3, r3
 8002800:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 8002802:	f7ff fe39 	bl	8002478 <lcd_reset>
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40003800 	.word	0x40003800

08002810 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e06d      	b.n	8002900 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d06c      	beq.n	800290a <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	0052      	lsls	r2, r2, #1
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f1a3 0220 	sub.w	r2, r3, #32
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	4419      	add	r1, r3
 8002850:	4831      	ldr	r0, [pc, #196]	@ (8002918 <generate_line_buff+0x108>)
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	4403      	add	r3, r0
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f1a3 0220 	sub.w	r2, r3, #32
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	3301      	adds	r3, #1
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	4419      	add	r1, r3
 8002872:	4829      	ldr	r0, [pc, #164]	@ (8002918 <generate_line_buff+0x108>)
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	4403      	add	r3, r0
 800287c:	3301      	adds	r3, #1
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	f1a3 0220 	sub.w	r2, r3, #32
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	3302      	adds	r3, #2
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	4419      	add	r1, r3
 8002896:	4820      	ldr	r0, [pc, #128]	@ (8002918 <generate_line_buff+0x108>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	4403      	add	r3, r0
 80028a0:	3302      	adds	r3, #2
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f1a3 0220 	sub.w	r2, r3, #32
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	3303      	adds	r3, #3
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	4419      	add	r1, r3
 80028ba:	4817      	ldr	r0, [pc, #92]	@ (8002918 <generate_line_buff+0x108>)
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	4403      	add	r3, r0
 80028c4:	3303      	adds	r3, #3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f1a3 0220 	sub.w	r2, r3, #32
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	3304      	adds	r3, #4
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	4419      	add	r1, r3
 80028de:	480e      	ldr	r0, [pc, #56]	@ (8002918 <generate_line_buff+0x108>)
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	4403      	add	r3, r0
 80028e8:	3304      	adds	r3, #4
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	3305      	adds	r3, #5
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4413      	add	r3, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3301      	adds	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	db8d      	blt.n	8002824 <generate_line_buff+0x14>
    }
}
 8002908:	e000      	b.n	800290c <generate_line_buff+0xfc>
            break;
 800290a:	bf00      	nop
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	08005f74 	.word	0x08005f74

0800291c <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	460b      	mov	r3, r1
 800292c:	71fb      	strb	r3, [r7, #7]
 800292e:	4613      	mov	r3, r2
 8002930:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 8002932:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]
 800293e:	e011      	b.n	8002964 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8002940:	7dfa      	ldrb	r2, [r7, #23]
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	4413      	add	r3, r2
 8002946:	b2db      	uxtb	r3, r3
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	441a      	add	r2, r3
 800294c:	7df9      	ldrb	r1, [r7, #23]
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	01db      	lsls	r3, r3, #7
 8002952:	440b      	add	r3, r1
 8002954:	4619      	mov	r1, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	440b      	add	r3, r1
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	3301      	adds	r3, #1
 8002962:	75fb      	strb	r3, [r7, #23]
 8002964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002968:	2b00      	cmp	r3, #0
 800296a:	dae9      	bge.n	8002940 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 800296c:	e00c      	b.n	8002988 <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	79ba      	ldrb	r2, [r7, #6]
 8002972:	01d2      	lsls	r2, r2, #7
 8002974:	4413      	add	r3, r2
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	18d0      	adds	r0, r2, r3
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002980:	461a      	mov	r2, r3
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	f001 fba5 	bl	80040d2 <memcpy>
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b0c7      	sub	sp, #284	@ 0x11c
 8002994:	af02      	add	r7, sp, #8
 8002996:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800299a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800299e:	6020      	str	r0, [r4, #0]
 80029a0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80029a4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80029a8:	6001      	str	r1, [r0, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029b0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029ba:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80029be:	460a      	mov	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fb13 	bl	8003ff8 <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 80029d2:	f107 0110 	add.w	r1, r7, #16
 80029d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029de:	22ff      	movs	r2, #255	@ 0xff
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	f7ff ff15 	bl	8002810 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 80029e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029ea:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80029ee:	781c      	ldrb	r4, [r3, #0]
 80029f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029f4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029fe:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002a02:	f107 0010 	add.w	r0, r7, #16
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	6809      	ldr	r1, [r1, #0]
 8002a0e:	f7ff ff85 	bl	800291c <write_line_buff>
}
 8002a12:	bf00      	nop
 8002a14:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd90      	pop	{r4, r7, pc}

08002a1c <lcd_init_and_print>:

/* Function added to the given lcd file
 * Can be called from main.c with this line before the while(1) loop:
 * lcd_init_and_print();
 */
void lcd_init_and_print(void) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
    static uint8_t lcdBuffer[LCD_BUFF_SIZE];	// Frame buffer for LCD

    init_spi_lcd();        // Initialize SPI + GPIOs and reset LCD
 8002a20:	f7ff fd9a 	bl	8002558 <init_spi_lcd>
    memset(lcdBuffer, 0x00, LCD_BUFF_SIZE);		// Clear buffer
 8002a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4807      	ldr	r0, [pc, #28]	@ (8002a48 <lcd_init_and_print+0x2c>)
 8002a2c:	f001 fae4 	bl	8003ff8 <memset>

    lcd_write_string((uint8_t *)buffer, lcdBuffer, 0, 0);
    */

    // Write "Hello" at x=0, y=0
    lcd_write_string((uint8_t *)"Hello", lcdBuffer, 0, 0);
 8002a30:	2300      	movs	r3, #0
 8002a32:	2200      	movs	r2, #0
 8002a34:	4904      	ldr	r1, [pc, #16]	@ (8002a48 <lcd_init_and_print+0x2c>)
 8002a36:	4805      	ldr	r0, [pc, #20]	@ (8002a4c <lcd_init_and_print+0x30>)
 8002a38:	f7ff ffaa 	bl	8002990 <lcd_write_string>

    // Push buffer content to LCD
    lcd_push_buffer(lcdBuffer);
 8002a3c:	4802      	ldr	r0, [pc, #8]	@ (8002a48 <lcd_init_and_print+0x2c>)
 8002a3e:	f7ff fc57 	bl	80022f0 <lcd_push_buffer>
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200002ec 	.word	0x200002ec
 8002a4c:	08005f28 	.word	0x08005f28

08002a50 <initLed>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLed() {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 8002a56:	2101      	movs	r1, #1
 8002a58:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002a5c:	f7fe ff9e 	bl	800199c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8002a60:	2101      	movs	r1, #1
 8002a62:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002a66:	f7fe ff99 	bl	800199c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002a70:	f7fe ff94 	bl	800199c <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8002a74:	463b      	mov	r3, r7
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fcaa 	bl	80013d0 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8002a80:	2300      	movs	r3, #0
 8002a82:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8002a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a88:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a96:	f7fe fc05 	bl	80012a4 <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8002a9a:	463b      	mov	r3, r7
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fc97 	bl	80013d0 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8002aaa:	2310      	movs	r3, #16
 8002aac:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	@ (8002aec <initLed+0x9c>)
 8002ab8:	f7fe fbf4 	bl	80012a4 <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8002abc:	463b      	mov	r3, r7
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fc86 	bl	80013d0 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <initLed+0xa0>)
 8002ada:	f7fe fbe3 	bl	80012a4 <GPIO_Init>

	// Initialize LED to off
	setLed('d');
 8002ade:	2064      	movs	r0, #100	@ 0x64
 8002ae0:	f000 f808 	bl	8002af4 <setLed>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000800 	.word	0x48000800

08002af4 <setLed>:

void setLed(char sel) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b72      	cmp	r3, #114	@ 0x72
 8002b02:	d111      	bne.n	8002b28 <setLed+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002b04:	2200      	movs	r2, #0
 8002b06:	2110      	movs	r1, #16
 8002b08:	4852      	ldr	r0, [pc, #328]	@ (8002c54 <setLed+0x160>)
 8002b0a:	f7fe fc7b 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2180      	movs	r1, #128	@ 0x80
 8002b12:	4851      	ldr	r0, [pc, #324]	@ (8002c58 <setLed+0x164>)
 8002b14:	f7fe fc76 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b22:	f7fe fc6f 	bl	8001404 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 8002b26:	e091      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'g') {
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b67      	cmp	r3, #103	@ 0x67
 8002b2c:	d111      	bne.n	8002b52 <setLed+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2110      	movs	r1, #16
 8002b32:	4848      	ldr	r0, [pc, #288]	@ (8002c54 <setLed+0x160>)
 8002b34:	f7fe fc66 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	@ 0x80
 8002b3c:	4846      	ldr	r0, [pc, #280]	@ (8002c58 <setLed+0x164>)
 8002b3e:	f7fe fc61 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b4c:	f7fe fc5a 	bl	8001404 <GPIO_WriteBit>
}
 8002b50:	e07c      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'b') {
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b62      	cmp	r3, #98	@ 0x62
 8002b56:	d111      	bne.n	8002b7c <setLed+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	483d      	ldr	r0, [pc, #244]	@ (8002c54 <setLed+0x160>)
 8002b5e:	f7fe fc51 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002b62:	2201      	movs	r2, #1
 8002b64:	2180      	movs	r1, #128	@ 0x80
 8002b66:	483c      	ldr	r0, [pc, #240]	@ (8002c58 <setLed+0x164>)
 8002b68:	f7fe fc4c 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b76:	f7fe fc45 	bl	8001404 <GPIO_WriteBit>
}
 8002b7a:	e067      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'c') {
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	2b63      	cmp	r3, #99	@ 0x63
 8002b80:	d111      	bne.n	8002ba6 <setLed+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002b82:	2201      	movs	r2, #1
 8002b84:	2110      	movs	r1, #16
 8002b86:	4833      	ldr	r0, [pc, #204]	@ (8002c54 <setLed+0x160>)
 8002b88:	f7fe fc3c 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2180      	movs	r1, #128	@ 0x80
 8002b90:	4831      	ldr	r0, [pc, #196]	@ (8002c58 <setLed+0x164>)
 8002b92:	f7fe fc37 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba0:	f7fe fc30 	bl	8001404 <GPIO_WriteBit>
}
 8002ba4:	e052      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'm') {
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b6d      	cmp	r3, #109	@ 0x6d
 8002baa:	d111      	bne.n	8002bd0 <setLed+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002bac:	2200      	movs	r2, #0
 8002bae:	2110      	movs	r1, #16
 8002bb0:	4828      	ldr	r0, [pc, #160]	@ (8002c54 <setLed+0x160>)
 8002bb2:	f7fe fc27 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	4827      	ldr	r0, [pc, #156]	@ (8002c58 <setLed+0x164>)
 8002bbc:	f7fe fc22 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bca:	f7fe fc1b 	bl	8001404 <GPIO_WriteBit>
}
 8002bce:	e03d      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'y') {
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b79      	cmp	r3, #121	@ 0x79
 8002bd4:	d111      	bne.n	8002bfa <setLed+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2110      	movs	r1, #16
 8002bda:	481e      	ldr	r0, [pc, #120]	@ (8002c54 <setLed+0x160>)
 8002bdc:	f7fe fc12 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002be0:	2200      	movs	r2, #0
 8002be2:	2180      	movs	r1, #128	@ 0x80
 8002be4:	481c      	ldr	r0, [pc, #112]	@ (8002c58 <setLed+0x164>)
 8002be6:	f7fe fc0d 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf4:	f7fe fc06 	bl	8001404 <GPIO_WriteBit>
}
 8002bf8:	e028      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'w') {
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2b77      	cmp	r3, #119	@ 0x77
 8002bfe:	d111      	bne.n	8002c24 <setLed+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002c00:	2200      	movs	r2, #0
 8002c02:	2110      	movs	r1, #16
 8002c04:	4813      	ldr	r0, [pc, #76]	@ (8002c54 <setLed+0x160>)
 8002c06:	f7fe fbfd 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2180      	movs	r1, #128	@ 0x80
 8002c0e:	4812      	ldr	r0, [pc, #72]	@ (8002c58 <setLed+0x164>)
 8002c10:	f7fe fbf8 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002c14:	2200      	movs	r2, #0
 8002c16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1e:	f7fe fbf1 	bl	8001404 <GPIO_WriteBit>
}
 8002c22:	e013      	b.n	8002c4c <setLed+0x158>
	} else if (sel == 'd') {
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d110      	bne.n	8002c4c <setLed+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4809      	ldr	r0, [pc, #36]	@ (8002c54 <setLed+0x160>)
 8002c30:	f7fe fbe8 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002c34:	2201      	movs	r2, #1
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	4807      	ldr	r0, [pc, #28]	@ (8002c58 <setLed+0x164>)
 8002c3a:	f7fe fbe3 	bl	8001404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c48:	f7fe fbdc 	bl	8001404 <GPIO_WriteBit>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800

08002c5c <main>:
#include "flash.h"
#include "adc.h"

static uint8_t lcdBuffer[LCD_BUFF_SIZE];

int main(void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	@ 0x38
 8002c60:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8002c62:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8002c66:	f7ff f8b1 	bl	8001dcc <uart_init>

	initJoystick();
 8002c6a:	f7ff fac7 	bl	80021fc <initJoystick>
	initLed();
 8002c6e:	f7ff feef 	bl	8002a50 <initLed>
	iniEXTIA4();
 8002c72:	f7ff fa86 	bl	8002182 <iniEXTIA4>
	initTimer();
 8002c76:	f000 f997 	bl	8002fa8 <initTimer>

	lcd_init_and_print();
 8002c7a:	f7ff fecf 	bl	8002a1c <lcd_init_and_print>
	ADC_setup_PA();
 8002c7e:	f7ff f9bf 	bl	8002000 <ADC_setup_PA>

	while(1) {
	    static uint8_t lastDeci = 255;
	    uint8_t curDeci = timeData.hundredths / 10;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <main+0x9c>)
 8002c84:	78db      	ldrb	r3, [r3, #3]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4a1c      	ldr	r2, [pc, #112]	@ (8002cfc <main+0xa0>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	08db      	lsrs	r3, r3, #3
 8002c90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    if (curDeci != lastDeci) {
 8002c94:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <main+0xa4>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d0f0      	beq.n	8002c82 <main+0x26>
	        lastDeci = curDeci;
 8002ca0:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <main+0xa4>)
 8002ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ca6:	7013      	strb	r3, [r2, #0]

	        uint16_t pa0 = ADC_measure_PA(1);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7ff fa40 	bl	800212e <ADC_measure_PA>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	86bb      	strh	r3, [r7, #52]	@ 0x34
	        uint16_t pa1 = ADC_measure_PA(2);
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f7ff fa3b 	bl	800212e <ADC_measure_PA>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	867b      	strh	r3, [r7, #50]	@ 0x32

	        char line0[24], line1[24];
	        sprintf(line0, "PA0: %4u", pa0);
 8002cbc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002cbe:	f107 0318 	add.w	r3, r7, #24
 8002cc2:	4910      	ldr	r1, [pc, #64]	@ (8002d04 <main+0xa8>)
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f89d 	bl	8003e04 <siprintf>
	        sprintf(line1, "PA1: %4u", pa1);
 8002cca:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002ccc:	463b      	mov	r3, r7
 8002cce:	490e      	ldr	r1, [pc, #56]	@ (8002d08 <main+0xac>)
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f897 	bl	8003e04 <siprintf>
	        lcd_write_string((uint8_t *)line0, lcdBuffer, 0, 1);
 8002cd6:	f107 0018 	add.w	r0, r7, #24
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	490b      	ldr	r1, [pc, #44]	@ (8002d0c <main+0xb0>)
 8002ce0:	f7ff fe56 	bl	8002990 <lcd_write_string>
	        lcd_write_string((uint8_t *)line1, lcdBuffer, 0, 2);
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <main+0xb0>)
 8002cec:	f7ff fe50 	bl	8002990 <lcd_write_string>
	        lcd_push_buffer(lcdBuffer);
 8002cf0:	4806      	ldr	r0, [pc, #24]	@ (8002d0c <main+0xb0>)
 8002cf2:	f7ff fafd 	bl	80022f0 <lcd_push_buffer>
	while(1) {
 8002cf6:	e7c4      	b.n	8002c82 <main+0x26>
 8002cf8:	200006ec 	.word	0x200006ec
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	20000000 	.word	0x20000000
 8002d04:	08005f30 	.word	0x08005f30
 8002d08:	08005f3c 	.word	0x08005f3c
 8002d0c:	200004ec 	.word	0x200004ec

08002d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
	return 1;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_kill>:

int _kill(int pid, int sig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2a:	f001 f9a5 	bl	8004078 <__errno>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2216      	movs	r2, #22
 8002d32:	601a      	str	r2, [r3, #0]
	return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_exit>:

void _exit (int status)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ffe7 	bl	8002d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <_exit+0x12>

08002d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e00a      	b.n	8002d7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d68:	f3af 8000 	nop.w
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	b2ca      	uxtb	r2, r1
 8002d76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbf0      	blt.n	8002d68 <_read+0x12>
	}

return len;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	return -1;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db8:	605a      	str	r2, [r3, #4]
	return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_isatty>:

int _isatty(int file)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd0:	2301      	movs	r3, #1
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
	return 0;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e7c <SystemInit+0x84>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e02:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <SystemInit+0x84>)
 8002e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <SystemInit+0x88>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <SystemInit+0x88>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <SystemInit+0x88>)
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4918      	ldr	r1, [pc, #96]	@ (8002e80 <SystemInit+0x88>)
 8002e1e:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <SystemInit+0x8c>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e24:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <SystemInit+0x88>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a15      	ldr	r2, [pc, #84]	@ (8002e80 <SystemInit+0x88>)
 8002e2a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e34:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <SystemInit+0x88>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <SystemInit+0x88>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <SystemInit+0x88>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a0e      	ldr	r2, [pc, #56]	@ (8002e80 <SystemInit+0x88>)
 8002e46:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8002e4a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <SystemInit+0x88>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	4a0b      	ldr	r2, [pc, #44]	@ (8002e80 <SystemInit+0x88>)
 8002e52:	f023 030f 	bic.w	r3, r3, #15
 8002e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <SystemInit+0x88>)
 8002e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e5c:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <SystemInit+0x88>)
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <SystemInit+0x90>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <SystemInit+0x88>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002e6a:	f000 f80f 	bl	8002e8c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e6e:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <SystemInit+0x84>)
 8002e70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e74:	609a      	str	r2, [r3, #8]
#endif  
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	f87fc00c 	.word	0xf87fc00c
 8002e88:	ff00fccc 	.word	0xff00fccc

08002e8c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <SetSysClock+0x8c>)
 8002e92:	2212      	movs	r2, #18
 8002e94:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002e96:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <SetSysClock+0x90>)
 8002e98:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <SetSysClock+0x90>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <SetSysClock+0x90>)
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f1c <SetSysClock+0x90>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <SetSysClock+0x90>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f1c <SetSysClock+0x90>)
 8002eac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <SetSysClock+0x90>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <SetSysClock+0x90>)
 8002eb8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002ebc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002ebe:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <SetSysClock+0x90>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <SetSysClock+0x90>)
 8002ec4:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 8002ec8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <SetSysClock+0x90>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a13      	ldr	r2, [pc, #76]	@ (8002f1c <SetSysClock+0x90>)
 8002ed0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002ed6:	bf00      	nop
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <SetSysClock+0x90>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f9      	beq.n	8002ed8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <SetSysClock+0x90>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8002f1c <SetSysClock+0x90>)
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <SetSysClock+0x90>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <SetSysClock+0x90>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002efc:	bf00      	nop
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <SetSysClock+0x90>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d1f9      	bne.n	8002efe <SetSysClock+0x72>
  {
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000

08002f20 <NVIC_EnableIRQ>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2201      	movs	r2, #1
 8002f32:	fa02 f103 	lsl.w	r1, r2, r3
 8002f36:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <NVIC_EnableIRQ+0x30>)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da0b      	bge.n	8002f80 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	@ (8002fa0 <NVIC_SetPriority+0x4c>)
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	3b04      	subs	r3, #4
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002f7e:	e009      	b.n	8002f94 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	4907      	ldr	r1, [pc, #28]	@ (8002fa4 <NVIC_SetPriority+0x50>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <initTimer>:
#include "timer.h"

timestruct_t timeData;

void initTimer() {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM2, ENABLE);
	 */
	// -------------------------------------------------

	// Set reload and prescale value for 1/100 s (100 Hz) interrupt
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;		// enable clock line to timer 2
 8002fae:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <initTimer+0x60>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <initTimer+0x60>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0001;		// configure timer 2
 8002fba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 0x03FF;		// set reload value
 8002fc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fc6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002fca:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 0x0270;		// set prescale value
 8002fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fd0:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8002fd4:	851a      	strh	r2, [r3, #40]	@ 0x28

	TIM2->DIER |= 0x0001;	// enable timer 2 interrupts
 8002fd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	60d3      	str	r3, [r2, #12]

	uint8_t priority = 2;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	4619      	mov	r1, r3
 8002fee:	201c      	movs	r0, #28
 8002ff0:	f7ff ffb0 	bl	8002f54 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 8002ff4:	201c      	movs	r0, #28
 8002ff6:	f7ff ff93 	bl	8002f20 <NVIC_EnableIRQ>

	TIM2_IRQHandler();
 8002ffa:	f000 f807 	bl	800300c <TIM2_IRQHandler>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000

0800300c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8003010:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003012:	78db      	ldrb	r3, [r3, #3]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800301c:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003020:	78db      	ldrb	r3, [r3, #3]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b64      	cmp	r3, #100	@ 0x64
 8003026:	d10a      	bne.n	800303e <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8003028:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800302a:	2200      	movs	r2, #0
 800302c:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 800302e:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003030:	789b      	ldrb	r3, [r3, #2]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800303a:	709a      	strb	r2, [r3, #2]
 800303c:	e030      	b.n	80030a0 <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 800303e:	4b1c      	ldr	r3, [pc, #112]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003040:	789b      	ldrb	r3, [r3, #2]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b3c      	cmp	r3, #60	@ 0x3c
 8003046:	d10a      	bne.n	800305e <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8003048:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800304a:	2200      	movs	r2, #0
 800304c:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 800304e:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3301      	adds	r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800305a:	705a      	strb	r2, [r3, #1]
 800305c:	e020      	b.n	80030a0 <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 800305e:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b3c      	cmp	r3, #60	@ 0x3c
 8003066:	d10a      	bne.n	800307e <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800306a:	2200      	movs	r2, #0
 800306c:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	3301      	adds	r3, #1
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e010      	b.n	80030a0 <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 800307e:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b18      	cmp	r3, #24
 8003086:	d10b      	bne.n	80030a0 <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800308a:	2200      	movs	r2, #0
 800308c:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003090:	2200      	movs	r2, #0
 8003092:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 8003096:	2200      	movs	r2, #0
 8003098:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 800309a:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <TIM2_IRQHandler+0xa4>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80030a0:	2101      	movs	r1, #1
 80030a2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80030a6:	f7fe fd2d 	bl	8001b04 <TIM_ClearITPendingBit>
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200006ec 	.word	0x200006ec

080030b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030b4:	480d      	ldr	r0, [pc, #52]	@ (80030ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b8:	480d      	ldr	r0, [pc, #52]	@ (80030f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ba:	490e      	ldr	r1, [pc, #56]	@ (80030f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030bc:	4a0e      	ldr	r2, [pc, #56]	@ (80030f8 <LoopForever+0xe>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c0:	e002      	b.n	80030c8 <LoopCopyDataInit>

080030c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c6:	3304      	adds	r3, #4

080030c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030cc:	d3f9      	bcc.n	80030c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ce:	4a0b      	ldr	r2, [pc, #44]	@ (80030fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80030d0:	4c0b      	ldr	r4, [pc, #44]	@ (8003100 <LoopForever+0x16>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d4:	e001      	b.n	80030da <LoopFillZerobss>

080030d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d8:	3204      	adds	r2, #4

080030da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030dc:	d3fb      	bcc.n	80030d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030de:	f7ff fe8b 	bl	8002df8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80030e2:	f000 ffcf 	bl	8004084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030e6:	f7ff fdb9 	bl	8002c5c <main>

080030ea <LoopForever>:

LoopForever:
    b LoopForever
 80030ea:	e7fe      	b.n	80030ea <LoopForever>
  ldr   r0, =_estack
 80030ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80030f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f4:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80030f8:	080064d4 	.word	0x080064d4
  ldr r2, =_sbss
 80030fc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8003100:	20000840 	.word	0x20000840

08003104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003104:	e7fe      	b.n	8003104 <ADC1_2_IRQHandler>

08003106 <__cvt>:
 8003106:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800310a:	ec57 6b10 	vmov	r6, r7, d0
 800310e:	2f00      	cmp	r7, #0
 8003110:	460c      	mov	r4, r1
 8003112:	4619      	mov	r1, r3
 8003114:	463b      	mov	r3, r7
 8003116:	bfbb      	ittet	lt
 8003118:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800311c:	461f      	movlt	r7, r3
 800311e:	2300      	movge	r3, #0
 8003120:	232d      	movlt	r3, #45	@ 0x2d
 8003122:	700b      	strb	r3, [r1, #0]
 8003124:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003126:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800312a:	4691      	mov	r9, r2
 800312c:	f023 0820 	bic.w	r8, r3, #32
 8003130:	bfbc      	itt	lt
 8003132:	4632      	movlt	r2, r6
 8003134:	4616      	movlt	r6, r2
 8003136:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800313a:	d005      	beq.n	8003148 <__cvt+0x42>
 800313c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003140:	d100      	bne.n	8003144 <__cvt+0x3e>
 8003142:	3401      	adds	r4, #1
 8003144:	2102      	movs	r1, #2
 8003146:	e000      	b.n	800314a <__cvt+0x44>
 8003148:	2103      	movs	r1, #3
 800314a:	ab03      	add	r3, sp, #12
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	ab02      	add	r3, sp, #8
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	ec47 6b10 	vmov	d0, r6, r7
 8003156:	4653      	mov	r3, sl
 8003158:	4622      	mov	r2, r4
 800315a:	f001 f851 	bl	8004200 <_dtoa_r>
 800315e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003162:	4605      	mov	r5, r0
 8003164:	d119      	bne.n	800319a <__cvt+0x94>
 8003166:	f019 0f01 	tst.w	r9, #1
 800316a:	d00e      	beq.n	800318a <__cvt+0x84>
 800316c:	eb00 0904 	add.w	r9, r0, r4
 8003170:	2200      	movs	r2, #0
 8003172:	2300      	movs	r3, #0
 8003174:	4630      	mov	r0, r6
 8003176:	4639      	mov	r1, r7
 8003178:	f7fd fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800317c:	b108      	cbz	r0, 8003182 <__cvt+0x7c>
 800317e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003182:	2230      	movs	r2, #48	@ 0x30
 8003184:	9b03      	ldr	r3, [sp, #12]
 8003186:	454b      	cmp	r3, r9
 8003188:	d31e      	bcc.n	80031c8 <__cvt+0xc2>
 800318a:	9b03      	ldr	r3, [sp, #12]
 800318c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800318e:	1b5b      	subs	r3, r3, r5
 8003190:	4628      	mov	r0, r5
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	b004      	add	sp, #16
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800319e:	eb00 0904 	add.w	r9, r0, r4
 80031a2:	d1e5      	bne.n	8003170 <__cvt+0x6a>
 80031a4:	7803      	ldrb	r3, [r0, #0]
 80031a6:	2b30      	cmp	r3, #48	@ 0x30
 80031a8:	d10a      	bne.n	80031c0 <__cvt+0xba>
 80031aa:	2200      	movs	r2, #0
 80031ac:	2300      	movs	r3, #0
 80031ae:	4630      	mov	r0, r6
 80031b0:	4639      	mov	r1, r7
 80031b2:	f7fd fc89 	bl	8000ac8 <__aeabi_dcmpeq>
 80031b6:	b918      	cbnz	r0, 80031c0 <__cvt+0xba>
 80031b8:	f1c4 0401 	rsb	r4, r4, #1
 80031bc:	f8ca 4000 	str.w	r4, [sl]
 80031c0:	f8da 3000 	ldr.w	r3, [sl]
 80031c4:	4499      	add	r9, r3
 80031c6:	e7d3      	b.n	8003170 <__cvt+0x6a>
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	9103      	str	r1, [sp, #12]
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e7d9      	b.n	8003184 <__cvt+0x7e>

080031d0 <__exponent>:
 80031d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031d2:	2900      	cmp	r1, #0
 80031d4:	bfba      	itte	lt
 80031d6:	4249      	neglt	r1, r1
 80031d8:	232d      	movlt	r3, #45	@ 0x2d
 80031da:	232b      	movge	r3, #43	@ 0x2b
 80031dc:	2909      	cmp	r1, #9
 80031de:	7002      	strb	r2, [r0, #0]
 80031e0:	7043      	strb	r3, [r0, #1]
 80031e2:	dd29      	ble.n	8003238 <__exponent+0x68>
 80031e4:	f10d 0307 	add.w	r3, sp, #7
 80031e8:	461d      	mov	r5, r3
 80031ea:	270a      	movs	r7, #10
 80031ec:	461a      	mov	r2, r3
 80031ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80031f2:	fb07 1416 	mls	r4, r7, r6, r1
 80031f6:	3430      	adds	r4, #48	@ 0x30
 80031f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80031fc:	460c      	mov	r4, r1
 80031fe:	2c63      	cmp	r4, #99	@ 0x63
 8003200:	f103 33ff 	add.w	r3, r3, #4294967295
 8003204:	4631      	mov	r1, r6
 8003206:	dcf1      	bgt.n	80031ec <__exponent+0x1c>
 8003208:	3130      	adds	r1, #48	@ 0x30
 800320a:	1e94      	subs	r4, r2, #2
 800320c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003210:	1c41      	adds	r1, r0, #1
 8003212:	4623      	mov	r3, r4
 8003214:	42ab      	cmp	r3, r5
 8003216:	d30a      	bcc.n	800322e <__exponent+0x5e>
 8003218:	f10d 0309 	add.w	r3, sp, #9
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	42ac      	cmp	r4, r5
 8003220:	bf88      	it	hi
 8003222:	2300      	movhi	r3, #0
 8003224:	3302      	adds	r3, #2
 8003226:	4403      	add	r3, r0
 8003228:	1a18      	subs	r0, r3, r0
 800322a:	b003      	add	sp, #12
 800322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003232:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003236:	e7ed      	b.n	8003214 <__exponent+0x44>
 8003238:	2330      	movs	r3, #48	@ 0x30
 800323a:	3130      	adds	r1, #48	@ 0x30
 800323c:	7083      	strb	r3, [r0, #2]
 800323e:	70c1      	strb	r1, [r0, #3]
 8003240:	1d03      	adds	r3, r0, #4
 8003242:	e7f1      	b.n	8003228 <__exponent+0x58>

08003244 <_printf_float>:
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	b08d      	sub	sp, #52	@ 0x34
 800324a:	460c      	mov	r4, r1
 800324c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003250:	4616      	mov	r6, r2
 8003252:	461f      	mov	r7, r3
 8003254:	4605      	mov	r5, r0
 8003256:	f000 fed7 	bl	8004008 <_localeconv_r>
 800325a:	6803      	ldr	r3, [r0, #0]
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f806 	bl	8000270 <strlen>
 8003264:	2300      	movs	r3, #0
 8003266:	930a      	str	r3, [sp, #40]	@ 0x28
 8003268:	f8d8 3000 	ldr.w	r3, [r8]
 800326c:	9005      	str	r0, [sp, #20]
 800326e:	3307      	adds	r3, #7
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	f103 0208 	add.w	r2, r3, #8
 8003278:	f894 a018 	ldrb.w	sl, [r4, #24]
 800327c:	f8d4 b000 	ldr.w	fp, [r4]
 8003280:	f8c8 2000 	str.w	r2, [r8]
 8003284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003288:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800328c:	9307      	str	r3, [sp, #28]
 800328e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003292:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800329a:	4b9c      	ldr	r3, [pc, #624]	@ (800350c <_printf_float+0x2c8>)
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	f7fd fc44 	bl	8000b2c <__aeabi_dcmpun>
 80032a4:	bb70      	cbnz	r0, 8003304 <_printf_float+0xc0>
 80032a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032aa:	4b98      	ldr	r3, [pc, #608]	@ (800350c <_printf_float+0x2c8>)
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	f7fd fc1e 	bl	8000af0 <__aeabi_dcmple>
 80032b4:	bb30      	cbnz	r0, 8003304 <_printf_float+0xc0>
 80032b6:	2200      	movs	r2, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	4640      	mov	r0, r8
 80032bc:	4649      	mov	r1, r9
 80032be:	f7fd fc0d 	bl	8000adc <__aeabi_dcmplt>
 80032c2:	b110      	cbz	r0, 80032ca <_printf_float+0x86>
 80032c4:	232d      	movs	r3, #45	@ 0x2d
 80032c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032ca:	4a91      	ldr	r2, [pc, #580]	@ (8003510 <_printf_float+0x2cc>)
 80032cc:	4b91      	ldr	r3, [pc, #580]	@ (8003514 <_printf_float+0x2d0>)
 80032ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80032d2:	bf8c      	ite	hi
 80032d4:	4690      	movhi	r8, r2
 80032d6:	4698      	movls	r8, r3
 80032d8:	2303      	movs	r3, #3
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	f02b 0304 	bic.w	r3, fp, #4
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	f04f 0900 	mov.w	r9, #0
 80032e6:	9700      	str	r7, [sp, #0]
 80032e8:	4633      	mov	r3, r6
 80032ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80032ec:	4621      	mov	r1, r4
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 f9d2 	bl	8003698 <_printf_common>
 80032f4:	3001      	adds	r0, #1
 80032f6:	f040 808d 	bne.w	8003414 <_printf_float+0x1d0>
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	b00d      	add	sp, #52	@ 0x34
 8003300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	4640      	mov	r0, r8
 800330a:	4649      	mov	r1, r9
 800330c:	f7fd fc0e 	bl	8000b2c <__aeabi_dcmpun>
 8003310:	b140      	cbz	r0, 8003324 <_printf_float+0xe0>
 8003312:	464b      	mov	r3, r9
 8003314:	2b00      	cmp	r3, #0
 8003316:	bfbc      	itt	lt
 8003318:	232d      	movlt	r3, #45	@ 0x2d
 800331a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800331e:	4a7e      	ldr	r2, [pc, #504]	@ (8003518 <_printf_float+0x2d4>)
 8003320:	4b7e      	ldr	r3, [pc, #504]	@ (800351c <_printf_float+0x2d8>)
 8003322:	e7d4      	b.n	80032ce <_printf_float+0x8a>
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800332a:	9206      	str	r2, [sp, #24]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	d13b      	bne.n	80033a8 <_printf_float+0x164>
 8003330:	2306      	movs	r3, #6
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003338:	2300      	movs	r3, #0
 800333a:	6022      	str	r2, [r4, #0]
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003340:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003344:	ab09      	add	r3, sp, #36	@ 0x24
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	6861      	ldr	r1, [r4, #4]
 800334a:	ec49 8b10 	vmov	d0, r8, r9
 800334e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003352:	4628      	mov	r0, r5
 8003354:	f7ff fed7 	bl	8003106 <__cvt>
 8003358:	9b06      	ldr	r3, [sp, #24]
 800335a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800335c:	2b47      	cmp	r3, #71	@ 0x47
 800335e:	4680      	mov	r8, r0
 8003360:	d129      	bne.n	80033b6 <_printf_float+0x172>
 8003362:	1cc8      	adds	r0, r1, #3
 8003364:	db02      	blt.n	800336c <_printf_float+0x128>
 8003366:	6863      	ldr	r3, [r4, #4]
 8003368:	4299      	cmp	r1, r3
 800336a:	dd41      	ble.n	80033f0 <_printf_float+0x1ac>
 800336c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003370:	fa5f fa8a 	uxtb.w	sl, sl
 8003374:	3901      	subs	r1, #1
 8003376:	4652      	mov	r2, sl
 8003378:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800337c:	9109      	str	r1, [sp, #36]	@ 0x24
 800337e:	f7ff ff27 	bl	80031d0 <__exponent>
 8003382:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003384:	1813      	adds	r3, r2, r0
 8003386:	2a01      	cmp	r2, #1
 8003388:	4681      	mov	r9, r0
 800338a:	6123      	str	r3, [r4, #16]
 800338c:	dc02      	bgt.n	8003394 <_printf_float+0x150>
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	07d2      	lsls	r2, r2, #31
 8003392:	d501      	bpl.n	8003398 <_printf_float+0x154>
 8003394:	3301      	adds	r3, #1
 8003396:	6123      	str	r3, [r4, #16]
 8003398:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0a2      	beq.n	80032e6 <_printf_float+0xa2>
 80033a0:	232d      	movs	r3, #45	@ 0x2d
 80033a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033a6:	e79e      	b.n	80032e6 <_printf_float+0xa2>
 80033a8:	9a06      	ldr	r2, [sp, #24]
 80033aa:	2a47      	cmp	r2, #71	@ 0x47
 80033ac:	d1c2      	bne.n	8003334 <_printf_float+0xf0>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1c0      	bne.n	8003334 <_printf_float+0xf0>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e7bd      	b.n	8003332 <_printf_float+0xee>
 80033b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033ba:	d9db      	bls.n	8003374 <_printf_float+0x130>
 80033bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80033c0:	d118      	bne.n	80033f4 <_printf_float+0x1b0>
 80033c2:	2900      	cmp	r1, #0
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	dd0b      	ble.n	80033e0 <_printf_float+0x19c>
 80033c8:	6121      	str	r1, [r4, #16]
 80033ca:	b913      	cbnz	r3, 80033d2 <_printf_float+0x18e>
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	07d0      	lsls	r0, r2, #31
 80033d0:	d502      	bpl.n	80033d8 <_printf_float+0x194>
 80033d2:	3301      	adds	r3, #1
 80033d4:	440b      	add	r3, r1
 80033d6:	6123      	str	r3, [r4, #16]
 80033d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80033da:	f04f 0900 	mov.w	r9, #0
 80033de:	e7db      	b.n	8003398 <_printf_float+0x154>
 80033e0:	b913      	cbnz	r3, 80033e8 <_printf_float+0x1a4>
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	07d2      	lsls	r2, r2, #31
 80033e6:	d501      	bpl.n	80033ec <_printf_float+0x1a8>
 80033e8:	3302      	adds	r3, #2
 80033ea:	e7f4      	b.n	80033d6 <_printf_float+0x192>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e7f2      	b.n	80033d6 <_printf_float+0x192>
 80033f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80033f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033f6:	4299      	cmp	r1, r3
 80033f8:	db05      	blt.n	8003406 <_printf_float+0x1c2>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	6121      	str	r1, [r4, #16]
 80033fe:	07d8      	lsls	r0, r3, #31
 8003400:	d5ea      	bpl.n	80033d8 <_printf_float+0x194>
 8003402:	1c4b      	adds	r3, r1, #1
 8003404:	e7e7      	b.n	80033d6 <_printf_float+0x192>
 8003406:	2900      	cmp	r1, #0
 8003408:	bfd4      	ite	le
 800340a:	f1c1 0202 	rsble	r2, r1, #2
 800340e:	2201      	movgt	r2, #1
 8003410:	4413      	add	r3, r2
 8003412:	e7e0      	b.n	80033d6 <_printf_float+0x192>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	055a      	lsls	r2, r3, #21
 8003418:	d407      	bmi.n	800342a <_printf_float+0x1e6>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	4642      	mov	r2, r8
 800341e:	4631      	mov	r1, r6
 8003420:	4628      	mov	r0, r5
 8003422:	47b8      	blx	r7
 8003424:	3001      	adds	r0, #1
 8003426:	d12b      	bne.n	8003480 <_printf_float+0x23c>
 8003428:	e767      	b.n	80032fa <_printf_float+0xb6>
 800342a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800342e:	f240 80dd 	bls.w	80035ec <_printf_float+0x3a8>
 8003432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003436:	2200      	movs	r2, #0
 8003438:	2300      	movs	r3, #0
 800343a:	f7fd fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800343e:	2800      	cmp	r0, #0
 8003440:	d033      	beq.n	80034aa <_printf_float+0x266>
 8003442:	4a37      	ldr	r2, [pc, #220]	@ (8003520 <_printf_float+0x2dc>)
 8003444:	2301      	movs	r3, #1
 8003446:	4631      	mov	r1, r6
 8003448:	4628      	mov	r0, r5
 800344a:	47b8      	blx	r7
 800344c:	3001      	adds	r0, #1
 800344e:	f43f af54 	beq.w	80032fa <_printf_float+0xb6>
 8003452:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003456:	4543      	cmp	r3, r8
 8003458:	db02      	blt.n	8003460 <_printf_float+0x21c>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	07d8      	lsls	r0, r3, #31
 800345e:	d50f      	bpl.n	8003480 <_printf_float+0x23c>
 8003460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003464:	4631      	mov	r1, r6
 8003466:	4628      	mov	r0, r5
 8003468:	47b8      	blx	r7
 800346a:	3001      	adds	r0, #1
 800346c:	f43f af45 	beq.w	80032fa <_printf_float+0xb6>
 8003470:	f04f 0900 	mov.w	r9, #0
 8003474:	f108 38ff 	add.w	r8, r8, #4294967295
 8003478:	f104 0a1a 	add.w	sl, r4, #26
 800347c:	45c8      	cmp	r8, r9
 800347e:	dc09      	bgt.n	8003494 <_printf_float+0x250>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	079b      	lsls	r3, r3, #30
 8003484:	f100 8103 	bmi.w	800368e <_printf_float+0x44a>
 8003488:	68e0      	ldr	r0, [r4, #12]
 800348a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800348c:	4298      	cmp	r0, r3
 800348e:	bfb8      	it	lt
 8003490:	4618      	movlt	r0, r3
 8003492:	e734      	b.n	80032fe <_printf_float+0xba>
 8003494:	2301      	movs	r3, #1
 8003496:	4652      	mov	r2, sl
 8003498:	4631      	mov	r1, r6
 800349a:	4628      	mov	r0, r5
 800349c:	47b8      	blx	r7
 800349e:	3001      	adds	r0, #1
 80034a0:	f43f af2b 	beq.w	80032fa <_printf_float+0xb6>
 80034a4:	f109 0901 	add.w	r9, r9, #1
 80034a8:	e7e8      	b.n	800347c <_printf_float+0x238>
 80034aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dc39      	bgt.n	8003524 <_printf_float+0x2e0>
 80034b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <_printf_float+0x2dc>)
 80034b2:	2301      	movs	r3, #1
 80034b4:	4631      	mov	r1, r6
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	f43f af1d 	beq.w	80032fa <_printf_float+0xb6>
 80034c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80034c4:	ea59 0303 	orrs.w	r3, r9, r3
 80034c8:	d102      	bne.n	80034d0 <_printf_float+0x28c>
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	07d9      	lsls	r1, r3, #31
 80034ce:	d5d7      	bpl.n	8003480 <_printf_float+0x23c>
 80034d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034d4:	4631      	mov	r1, r6
 80034d6:	4628      	mov	r0, r5
 80034d8:	47b8      	blx	r7
 80034da:	3001      	adds	r0, #1
 80034dc:	f43f af0d 	beq.w	80032fa <_printf_float+0xb6>
 80034e0:	f04f 0a00 	mov.w	sl, #0
 80034e4:	f104 0b1a 	add.w	fp, r4, #26
 80034e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ea:	425b      	negs	r3, r3
 80034ec:	4553      	cmp	r3, sl
 80034ee:	dc01      	bgt.n	80034f4 <_printf_float+0x2b0>
 80034f0:	464b      	mov	r3, r9
 80034f2:	e793      	b.n	800341c <_printf_float+0x1d8>
 80034f4:	2301      	movs	r3, #1
 80034f6:	465a      	mov	r2, fp
 80034f8:	4631      	mov	r1, r6
 80034fa:	4628      	mov	r0, r5
 80034fc:	47b8      	blx	r7
 80034fe:	3001      	adds	r0, #1
 8003500:	f43f aefb 	beq.w	80032fa <_printf_float+0xb6>
 8003504:	f10a 0a01 	add.w	sl, sl, #1
 8003508:	e7ee      	b.n	80034e8 <_printf_float+0x2a4>
 800350a:	bf00      	nop
 800350c:	7fefffff 	.word	0x7fefffff
 8003510:	08006153 	.word	0x08006153
 8003514:	0800614f 	.word	0x0800614f
 8003518:	0800615b 	.word	0x0800615b
 800351c:	08006157 	.word	0x08006157
 8003520:	0800615f 	.word	0x0800615f
 8003524:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003526:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800352a:	4553      	cmp	r3, sl
 800352c:	bfa8      	it	ge
 800352e:	4653      	movge	r3, sl
 8003530:	2b00      	cmp	r3, #0
 8003532:	4699      	mov	r9, r3
 8003534:	dc36      	bgt.n	80035a4 <_printf_float+0x360>
 8003536:	f04f 0b00 	mov.w	fp, #0
 800353a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800353e:	f104 021a 	add.w	r2, r4, #26
 8003542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003544:	9306      	str	r3, [sp, #24]
 8003546:	eba3 0309 	sub.w	r3, r3, r9
 800354a:	455b      	cmp	r3, fp
 800354c:	dc31      	bgt.n	80035b2 <_printf_float+0x36e>
 800354e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003550:	459a      	cmp	sl, r3
 8003552:	dc3a      	bgt.n	80035ca <_printf_float+0x386>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	07da      	lsls	r2, r3, #31
 8003558:	d437      	bmi.n	80035ca <_printf_float+0x386>
 800355a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800355c:	ebaa 0903 	sub.w	r9, sl, r3
 8003560:	9b06      	ldr	r3, [sp, #24]
 8003562:	ebaa 0303 	sub.w	r3, sl, r3
 8003566:	4599      	cmp	r9, r3
 8003568:	bfa8      	it	ge
 800356a:	4699      	movge	r9, r3
 800356c:	f1b9 0f00 	cmp.w	r9, #0
 8003570:	dc33      	bgt.n	80035da <_printf_float+0x396>
 8003572:	f04f 0800 	mov.w	r8, #0
 8003576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800357a:	f104 0b1a 	add.w	fp, r4, #26
 800357e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003580:	ebaa 0303 	sub.w	r3, sl, r3
 8003584:	eba3 0309 	sub.w	r3, r3, r9
 8003588:	4543      	cmp	r3, r8
 800358a:	f77f af79 	ble.w	8003480 <_printf_float+0x23c>
 800358e:	2301      	movs	r3, #1
 8003590:	465a      	mov	r2, fp
 8003592:	4631      	mov	r1, r6
 8003594:	4628      	mov	r0, r5
 8003596:	47b8      	blx	r7
 8003598:	3001      	adds	r0, #1
 800359a:	f43f aeae 	beq.w	80032fa <_printf_float+0xb6>
 800359e:	f108 0801 	add.w	r8, r8, #1
 80035a2:	e7ec      	b.n	800357e <_printf_float+0x33a>
 80035a4:	4642      	mov	r2, r8
 80035a6:	4631      	mov	r1, r6
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b8      	blx	r7
 80035ac:	3001      	adds	r0, #1
 80035ae:	d1c2      	bne.n	8003536 <_printf_float+0x2f2>
 80035b0:	e6a3      	b.n	80032fa <_printf_float+0xb6>
 80035b2:	2301      	movs	r3, #1
 80035b4:	4631      	mov	r1, r6
 80035b6:	4628      	mov	r0, r5
 80035b8:	9206      	str	r2, [sp, #24]
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f ae9c 	beq.w	80032fa <_printf_float+0xb6>
 80035c2:	9a06      	ldr	r2, [sp, #24]
 80035c4:	f10b 0b01 	add.w	fp, fp, #1
 80035c8:	e7bb      	b.n	8003542 <_printf_float+0x2fe>
 80035ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035ce:	4631      	mov	r1, r6
 80035d0:	4628      	mov	r0, r5
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	d1c0      	bne.n	800355a <_printf_float+0x316>
 80035d8:	e68f      	b.n	80032fa <_printf_float+0xb6>
 80035da:	9a06      	ldr	r2, [sp, #24]
 80035dc:	464b      	mov	r3, r9
 80035de:	4442      	add	r2, r8
 80035e0:	4631      	mov	r1, r6
 80035e2:	4628      	mov	r0, r5
 80035e4:	47b8      	blx	r7
 80035e6:	3001      	adds	r0, #1
 80035e8:	d1c3      	bne.n	8003572 <_printf_float+0x32e>
 80035ea:	e686      	b.n	80032fa <_printf_float+0xb6>
 80035ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80035f0:	f1ba 0f01 	cmp.w	sl, #1
 80035f4:	dc01      	bgt.n	80035fa <_printf_float+0x3b6>
 80035f6:	07db      	lsls	r3, r3, #31
 80035f8:	d536      	bpl.n	8003668 <_printf_float+0x424>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4642      	mov	r2, r8
 80035fe:	4631      	mov	r1, r6
 8003600:	4628      	mov	r0, r5
 8003602:	47b8      	blx	r7
 8003604:	3001      	adds	r0, #1
 8003606:	f43f ae78 	beq.w	80032fa <_printf_float+0xb6>
 800360a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	f43f ae70 	beq.w	80032fa <_printf_float+0xb6>
 800361a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800361e:	2200      	movs	r2, #0
 8003620:	2300      	movs	r3, #0
 8003622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003626:	f7fd fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800362a:	b9c0      	cbnz	r0, 800365e <_printf_float+0x41a>
 800362c:	4653      	mov	r3, sl
 800362e:	f108 0201 	add.w	r2, r8, #1
 8003632:	4631      	mov	r1, r6
 8003634:	4628      	mov	r0, r5
 8003636:	47b8      	blx	r7
 8003638:	3001      	adds	r0, #1
 800363a:	d10c      	bne.n	8003656 <_printf_float+0x412>
 800363c:	e65d      	b.n	80032fa <_printf_float+0xb6>
 800363e:	2301      	movs	r3, #1
 8003640:	465a      	mov	r2, fp
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae56 	beq.w	80032fa <_printf_float+0xb6>
 800364e:	f108 0801 	add.w	r8, r8, #1
 8003652:	45d0      	cmp	r8, sl
 8003654:	dbf3      	blt.n	800363e <_printf_float+0x3fa>
 8003656:	464b      	mov	r3, r9
 8003658:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800365c:	e6df      	b.n	800341e <_printf_float+0x1da>
 800365e:	f04f 0800 	mov.w	r8, #0
 8003662:	f104 0b1a 	add.w	fp, r4, #26
 8003666:	e7f4      	b.n	8003652 <_printf_float+0x40e>
 8003668:	2301      	movs	r3, #1
 800366a:	4642      	mov	r2, r8
 800366c:	e7e1      	b.n	8003632 <_printf_float+0x3ee>
 800366e:	2301      	movs	r3, #1
 8003670:	464a      	mov	r2, r9
 8003672:	4631      	mov	r1, r6
 8003674:	4628      	mov	r0, r5
 8003676:	47b8      	blx	r7
 8003678:	3001      	adds	r0, #1
 800367a:	f43f ae3e 	beq.w	80032fa <_printf_float+0xb6>
 800367e:	f108 0801 	add.w	r8, r8, #1
 8003682:	68e3      	ldr	r3, [r4, #12]
 8003684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003686:	1a5b      	subs	r3, r3, r1
 8003688:	4543      	cmp	r3, r8
 800368a:	dcf0      	bgt.n	800366e <_printf_float+0x42a>
 800368c:	e6fc      	b.n	8003488 <_printf_float+0x244>
 800368e:	f04f 0800 	mov.w	r8, #0
 8003692:	f104 0919 	add.w	r9, r4, #25
 8003696:	e7f4      	b.n	8003682 <_printf_float+0x43e>

08003698 <_printf_common>:
 8003698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800369c:	4616      	mov	r6, r2
 800369e:	4698      	mov	r8, r3
 80036a0:	688a      	ldr	r2, [r1, #8]
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bfb8      	it	lt
 80036ac:	4613      	movlt	r3, r2
 80036ae:	6033      	str	r3, [r6, #0]
 80036b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036b4:	4607      	mov	r7, r0
 80036b6:	460c      	mov	r4, r1
 80036b8:	b10a      	cbz	r2, 80036be <_printf_common+0x26>
 80036ba:	3301      	adds	r3, #1
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	0699      	lsls	r1, r3, #26
 80036c2:	bf42      	ittt	mi
 80036c4:	6833      	ldrmi	r3, [r6, #0]
 80036c6:	3302      	addmi	r3, #2
 80036c8:	6033      	strmi	r3, [r6, #0]
 80036ca:	6825      	ldr	r5, [r4, #0]
 80036cc:	f015 0506 	ands.w	r5, r5, #6
 80036d0:	d106      	bne.n	80036e0 <_printf_common+0x48>
 80036d2:	f104 0a19 	add.w	sl, r4, #25
 80036d6:	68e3      	ldr	r3, [r4, #12]
 80036d8:	6832      	ldr	r2, [r6, #0]
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	42ab      	cmp	r3, r5
 80036de:	dc26      	bgt.n	800372e <_printf_common+0x96>
 80036e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	3b00      	subs	r3, #0
 80036e8:	bf18      	it	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d42b      	bmi.n	8003748 <_printf_common+0xb0>
 80036f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036f4:	4641      	mov	r1, r8
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c8      	blx	r9
 80036fa:	3001      	adds	r0, #1
 80036fc:	d01e      	beq.n	800373c <_printf_common+0xa4>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	6922      	ldr	r2, [r4, #16]
 8003702:	f003 0306 	and.w	r3, r3, #6
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf02      	ittt	eq
 800370a:	68e5      	ldreq	r5, [r4, #12]
 800370c:	6833      	ldreq	r3, [r6, #0]
 800370e:	1aed      	subeq	r5, r5, r3
 8003710:	68a3      	ldr	r3, [r4, #8]
 8003712:	bf0c      	ite	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	2500      	movne	r5, #0
 800371a:	4293      	cmp	r3, r2
 800371c:	bfc4      	itt	gt
 800371e:	1a9b      	subgt	r3, r3, r2
 8003720:	18ed      	addgt	r5, r5, r3
 8003722:	2600      	movs	r6, #0
 8003724:	341a      	adds	r4, #26
 8003726:	42b5      	cmp	r5, r6
 8003728:	d11a      	bne.n	8003760 <_printf_common+0xc8>
 800372a:	2000      	movs	r0, #0
 800372c:	e008      	b.n	8003740 <_printf_common+0xa8>
 800372e:	2301      	movs	r3, #1
 8003730:	4652      	mov	r2, sl
 8003732:	4641      	mov	r1, r8
 8003734:	4638      	mov	r0, r7
 8003736:	47c8      	blx	r9
 8003738:	3001      	adds	r0, #1
 800373a:	d103      	bne.n	8003744 <_printf_common+0xac>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003744:	3501      	adds	r5, #1
 8003746:	e7c6      	b.n	80036d6 <_printf_common+0x3e>
 8003748:	18e1      	adds	r1, r4, r3
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	2030      	movs	r0, #48	@ 0x30
 800374e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003752:	4422      	add	r2, r4
 8003754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800375c:	3302      	adds	r3, #2
 800375e:	e7c7      	b.n	80036f0 <_printf_common+0x58>
 8003760:	2301      	movs	r3, #1
 8003762:	4622      	mov	r2, r4
 8003764:	4641      	mov	r1, r8
 8003766:	4638      	mov	r0, r7
 8003768:	47c8      	blx	r9
 800376a:	3001      	adds	r0, #1
 800376c:	d0e6      	beq.n	800373c <_printf_common+0xa4>
 800376e:	3601      	adds	r6, #1
 8003770:	e7d9      	b.n	8003726 <_printf_common+0x8e>
	...

08003774 <_printf_i>:
 8003774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	7e0f      	ldrb	r7, [r1, #24]
 800377a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800377c:	2f78      	cmp	r7, #120	@ 0x78
 800377e:	4691      	mov	r9, r2
 8003780:	4680      	mov	r8, r0
 8003782:	460c      	mov	r4, r1
 8003784:	469a      	mov	sl, r3
 8003786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800378a:	d807      	bhi.n	800379c <_printf_i+0x28>
 800378c:	2f62      	cmp	r7, #98	@ 0x62
 800378e:	d80a      	bhi.n	80037a6 <_printf_i+0x32>
 8003790:	2f00      	cmp	r7, #0
 8003792:	f000 80d1 	beq.w	8003938 <_printf_i+0x1c4>
 8003796:	2f58      	cmp	r7, #88	@ 0x58
 8003798:	f000 80b8 	beq.w	800390c <_printf_i+0x198>
 800379c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037a4:	e03a      	b.n	800381c <_printf_i+0xa8>
 80037a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037aa:	2b15      	cmp	r3, #21
 80037ac:	d8f6      	bhi.n	800379c <_printf_i+0x28>
 80037ae:	a101      	add	r1, pc, #4	@ (adr r1, 80037b4 <_printf_i+0x40>)
 80037b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	08003821 	.word	0x08003821
 80037bc:	0800379d 	.word	0x0800379d
 80037c0:	0800379d 	.word	0x0800379d
 80037c4:	0800379d 	.word	0x0800379d
 80037c8:	0800379d 	.word	0x0800379d
 80037cc:	08003821 	.word	0x08003821
 80037d0:	0800379d 	.word	0x0800379d
 80037d4:	0800379d 	.word	0x0800379d
 80037d8:	0800379d 	.word	0x0800379d
 80037dc:	0800379d 	.word	0x0800379d
 80037e0:	0800391f 	.word	0x0800391f
 80037e4:	0800384b 	.word	0x0800384b
 80037e8:	080038d9 	.word	0x080038d9
 80037ec:	0800379d 	.word	0x0800379d
 80037f0:	0800379d 	.word	0x0800379d
 80037f4:	08003941 	.word	0x08003941
 80037f8:	0800379d 	.word	0x0800379d
 80037fc:	0800384b 	.word	0x0800384b
 8003800:	0800379d 	.word	0x0800379d
 8003804:	0800379d 	.word	0x0800379d
 8003808:	080038e1 	.word	0x080038e1
 800380c:	6833      	ldr	r3, [r6, #0]
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6032      	str	r2, [r6, #0]
 8003814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800381c:	2301      	movs	r3, #1
 800381e:	e09c      	b.n	800395a <_printf_i+0x1e6>
 8003820:	6833      	ldr	r3, [r6, #0]
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	1d19      	adds	r1, r3, #4
 8003826:	6031      	str	r1, [r6, #0]
 8003828:	0606      	lsls	r6, r0, #24
 800382a:	d501      	bpl.n	8003830 <_printf_i+0xbc>
 800382c:	681d      	ldr	r5, [r3, #0]
 800382e:	e003      	b.n	8003838 <_printf_i+0xc4>
 8003830:	0645      	lsls	r5, r0, #25
 8003832:	d5fb      	bpl.n	800382c <_printf_i+0xb8>
 8003834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003838:	2d00      	cmp	r5, #0
 800383a:	da03      	bge.n	8003844 <_printf_i+0xd0>
 800383c:	232d      	movs	r3, #45	@ 0x2d
 800383e:	426d      	negs	r5, r5
 8003840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003844:	4858      	ldr	r0, [pc, #352]	@ (80039a8 <_printf_i+0x234>)
 8003846:	230a      	movs	r3, #10
 8003848:	e011      	b.n	800386e <_printf_i+0xfa>
 800384a:	6821      	ldr	r1, [r4, #0]
 800384c:	6833      	ldr	r3, [r6, #0]
 800384e:	0608      	lsls	r0, r1, #24
 8003850:	f853 5b04 	ldr.w	r5, [r3], #4
 8003854:	d402      	bmi.n	800385c <_printf_i+0xe8>
 8003856:	0649      	lsls	r1, r1, #25
 8003858:	bf48      	it	mi
 800385a:	b2ad      	uxthmi	r5, r5
 800385c:	2f6f      	cmp	r7, #111	@ 0x6f
 800385e:	4852      	ldr	r0, [pc, #328]	@ (80039a8 <_printf_i+0x234>)
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	bf14      	ite	ne
 8003864:	230a      	movne	r3, #10
 8003866:	2308      	moveq	r3, #8
 8003868:	2100      	movs	r1, #0
 800386a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800386e:	6866      	ldr	r6, [r4, #4]
 8003870:	60a6      	str	r6, [r4, #8]
 8003872:	2e00      	cmp	r6, #0
 8003874:	db05      	blt.n	8003882 <_printf_i+0x10e>
 8003876:	6821      	ldr	r1, [r4, #0]
 8003878:	432e      	orrs	r6, r5
 800387a:	f021 0104 	bic.w	r1, r1, #4
 800387e:	6021      	str	r1, [r4, #0]
 8003880:	d04b      	beq.n	800391a <_printf_i+0x1a6>
 8003882:	4616      	mov	r6, r2
 8003884:	fbb5 f1f3 	udiv	r1, r5, r3
 8003888:	fb03 5711 	mls	r7, r3, r1, r5
 800388c:	5dc7      	ldrb	r7, [r0, r7]
 800388e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003892:	462f      	mov	r7, r5
 8003894:	42bb      	cmp	r3, r7
 8003896:	460d      	mov	r5, r1
 8003898:	d9f4      	bls.n	8003884 <_printf_i+0x110>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10b      	bne.n	80038b6 <_printf_i+0x142>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07df      	lsls	r7, r3, #31
 80038a2:	d508      	bpl.n	80038b6 <_printf_i+0x142>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6861      	ldr	r1, [r4, #4]
 80038a8:	4299      	cmp	r1, r3
 80038aa:	bfde      	ittt	le
 80038ac:	2330      	movle	r3, #48	@ 0x30
 80038ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038b6:	1b92      	subs	r2, r2, r6
 80038b8:	6122      	str	r2, [r4, #16]
 80038ba:	f8cd a000 	str.w	sl, [sp]
 80038be:	464b      	mov	r3, r9
 80038c0:	aa03      	add	r2, sp, #12
 80038c2:	4621      	mov	r1, r4
 80038c4:	4640      	mov	r0, r8
 80038c6:	f7ff fee7 	bl	8003698 <_printf_common>
 80038ca:	3001      	adds	r0, #1
 80038cc:	d14a      	bne.n	8003964 <_printf_i+0x1f0>
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	b004      	add	sp, #16
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	4832      	ldr	r0, [pc, #200]	@ (80039ac <_printf_i+0x238>)
 80038e2:	2778      	movs	r7, #120	@ 0x78
 80038e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	6831      	ldr	r1, [r6, #0]
 80038ec:	061f      	lsls	r7, r3, #24
 80038ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80038f2:	d402      	bmi.n	80038fa <_printf_i+0x186>
 80038f4:	065f      	lsls	r7, r3, #25
 80038f6:	bf48      	it	mi
 80038f8:	b2ad      	uxthmi	r5, r5
 80038fa:	6031      	str	r1, [r6, #0]
 80038fc:	07d9      	lsls	r1, r3, #31
 80038fe:	bf44      	itt	mi
 8003900:	f043 0320 	orrmi.w	r3, r3, #32
 8003904:	6023      	strmi	r3, [r4, #0]
 8003906:	b11d      	cbz	r5, 8003910 <_printf_i+0x19c>
 8003908:	2310      	movs	r3, #16
 800390a:	e7ad      	b.n	8003868 <_printf_i+0xf4>
 800390c:	4826      	ldr	r0, [pc, #152]	@ (80039a8 <_printf_i+0x234>)
 800390e:	e7e9      	b.n	80038e4 <_printf_i+0x170>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	e7f6      	b.n	8003908 <_printf_i+0x194>
 800391a:	4616      	mov	r6, r2
 800391c:	e7bd      	b.n	800389a <_printf_i+0x126>
 800391e:	6833      	ldr	r3, [r6, #0]
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	6961      	ldr	r1, [r4, #20]
 8003924:	1d18      	adds	r0, r3, #4
 8003926:	6030      	str	r0, [r6, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	d501      	bpl.n	8003932 <_printf_i+0x1be>
 800392e:	6019      	str	r1, [r3, #0]
 8003930:	e002      	b.n	8003938 <_printf_i+0x1c4>
 8003932:	0668      	lsls	r0, r5, #25
 8003934:	d5fb      	bpl.n	800392e <_printf_i+0x1ba>
 8003936:	8019      	strh	r1, [r3, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	4616      	mov	r6, r2
 800393e:	e7bc      	b.n	80038ba <_printf_i+0x146>
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	6032      	str	r2, [r6, #0]
 8003946:	681e      	ldr	r6, [r3, #0]
 8003948:	6862      	ldr	r2, [r4, #4]
 800394a:	2100      	movs	r1, #0
 800394c:	4630      	mov	r0, r6
 800394e:	f7fc fc3f 	bl	80001d0 <memchr>
 8003952:	b108      	cbz	r0, 8003958 <_printf_i+0x1e4>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	6060      	str	r0, [r4, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003962:	e7aa      	b.n	80038ba <_printf_i+0x146>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	4632      	mov	r2, r6
 8003968:	4649      	mov	r1, r9
 800396a:	4640      	mov	r0, r8
 800396c:	47d0      	blx	sl
 800396e:	3001      	adds	r0, #1
 8003970:	d0ad      	beq.n	80038ce <_printf_i+0x15a>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	079b      	lsls	r3, r3, #30
 8003976:	d413      	bmi.n	80039a0 <_printf_i+0x22c>
 8003978:	68e0      	ldr	r0, [r4, #12]
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	4298      	cmp	r0, r3
 800397e:	bfb8      	it	lt
 8003980:	4618      	movlt	r0, r3
 8003982:	e7a6      	b.n	80038d2 <_printf_i+0x15e>
 8003984:	2301      	movs	r3, #1
 8003986:	4632      	mov	r2, r6
 8003988:	4649      	mov	r1, r9
 800398a:	4640      	mov	r0, r8
 800398c:	47d0      	blx	sl
 800398e:	3001      	adds	r0, #1
 8003990:	d09d      	beq.n	80038ce <_printf_i+0x15a>
 8003992:	3501      	adds	r5, #1
 8003994:	68e3      	ldr	r3, [r4, #12]
 8003996:	9903      	ldr	r1, [sp, #12]
 8003998:	1a5b      	subs	r3, r3, r1
 800399a:	42ab      	cmp	r3, r5
 800399c:	dcf2      	bgt.n	8003984 <_printf_i+0x210>
 800399e:	e7eb      	b.n	8003978 <_printf_i+0x204>
 80039a0:	2500      	movs	r5, #0
 80039a2:	f104 0619 	add.w	r6, r4, #25
 80039a6:	e7f5      	b.n	8003994 <_printf_i+0x220>
 80039a8:	08006161 	.word	0x08006161
 80039ac:	08006172 	.word	0x08006172

080039b0 <__sflush_r>:
 80039b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	0716      	lsls	r6, r2, #28
 80039ba:	4605      	mov	r5, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	d454      	bmi.n	8003a6a <__sflush_r+0xba>
 80039c0:	684b      	ldr	r3, [r1, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dc02      	bgt.n	80039cc <__sflush_r+0x1c>
 80039c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dd48      	ble.n	8003a5e <__sflush_r+0xae>
 80039cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d045      	beq.n	8003a5e <__sflush_r+0xae>
 80039d2:	2300      	movs	r3, #0
 80039d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039d8:	682f      	ldr	r7, [r5, #0]
 80039da:	6a21      	ldr	r1, [r4, #32]
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	d030      	beq.n	8003a42 <__sflush_r+0x92>
 80039e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	0759      	lsls	r1, r3, #29
 80039e6:	d505      	bpl.n	80039f4 <__sflush_r+0x44>
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	1ad2      	subs	r2, r2, r3
 80039ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039ee:	b10b      	cbz	r3, 80039f4 <__sflush_r+0x44>
 80039f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039f8:	6a21      	ldr	r1, [r4, #32]
 80039fa:	4628      	mov	r0, r5
 80039fc:	47b0      	blx	r6
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	d106      	bne.n	8003a12 <__sflush_r+0x62>
 8003a04:	6829      	ldr	r1, [r5, #0]
 8003a06:	291d      	cmp	r1, #29
 8003a08:	d82b      	bhi.n	8003a62 <__sflush_r+0xb2>
 8003a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <__sflush_r+0x104>)
 8003a0c:	40ca      	lsrs	r2, r1
 8003a0e:	07d6      	lsls	r6, r2, #31
 8003a10:	d527      	bpl.n	8003a62 <__sflush_r+0xb2>
 8003a12:	2200      	movs	r2, #0
 8003a14:	6062      	str	r2, [r4, #4]
 8003a16:	04d9      	lsls	r1, r3, #19
 8003a18:	6922      	ldr	r2, [r4, #16]
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	d504      	bpl.n	8003a28 <__sflush_r+0x78>
 8003a1e:	1c42      	adds	r2, r0, #1
 8003a20:	d101      	bne.n	8003a26 <__sflush_r+0x76>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	b903      	cbnz	r3, 8003a28 <__sflush_r+0x78>
 8003a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a2a:	602f      	str	r7, [r5, #0]
 8003a2c:	b1b9      	cbz	r1, 8003a5e <__sflush_r+0xae>
 8003a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a32:	4299      	cmp	r1, r3
 8003a34:	d002      	beq.n	8003a3c <__sflush_r+0x8c>
 8003a36:	4628      	mov	r0, r5
 8003a38:	f001 f9b2 	bl	8004da0 <_free_r>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a40:	e00d      	b.n	8003a5e <__sflush_r+0xae>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b0      	blx	r6
 8003a48:	4602      	mov	r2, r0
 8003a4a:	1c50      	adds	r0, r2, #1
 8003a4c:	d1c9      	bne.n	80039e2 <__sflush_r+0x32>
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0c6      	beq.n	80039e2 <__sflush_r+0x32>
 8003a54:	2b1d      	cmp	r3, #29
 8003a56:	d001      	beq.n	8003a5c <__sflush_r+0xac>
 8003a58:	2b16      	cmp	r3, #22
 8003a5a:	d11e      	bne.n	8003a9a <__sflush_r+0xea>
 8003a5c:	602f      	str	r7, [r5, #0]
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e022      	b.n	8003aa8 <__sflush_r+0xf8>
 8003a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	e01b      	b.n	8003aa2 <__sflush_r+0xf2>
 8003a6a:	690f      	ldr	r7, [r1, #16]
 8003a6c:	2f00      	cmp	r7, #0
 8003a6e:	d0f6      	beq.n	8003a5e <__sflush_r+0xae>
 8003a70:	0793      	lsls	r3, r2, #30
 8003a72:	680e      	ldr	r6, [r1, #0]
 8003a74:	bf08      	it	eq
 8003a76:	694b      	ldreq	r3, [r1, #20]
 8003a78:	600f      	str	r7, [r1, #0]
 8003a7a:	bf18      	it	ne
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	eba6 0807 	sub.w	r8, r6, r7
 8003a82:	608b      	str	r3, [r1, #8]
 8003a84:	f1b8 0f00 	cmp.w	r8, #0
 8003a88:	dde9      	ble.n	8003a5e <__sflush_r+0xae>
 8003a8a:	6a21      	ldr	r1, [r4, #32]
 8003a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a8e:	4643      	mov	r3, r8
 8003a90:	463a      	mov	r2, r7
 8003a92:	4628      	mov	r0, r5
 8003a94:	47b0      	blx	r6
 8003a96:	2800      	cmp	r0, #0
 8003a98:	dc08      	bgt.n	8003aac <__sflush_r+0xfc>
 8003a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa2:	81a3      	strh	r3, [r4, #12]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aac:	4407      	add	r7, r0
 8003aae:	eba8 0800 	sub.w	r8, r8, r0
 8003ab2:	e7e7      	b.n	8003a84 <__sflush_r+0xd4>
 8003ab4:	20400001 	.word	0x20400001

08003ab8 <_fflush_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	4605      	mov	r5, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b913      	cbnz	r3, 8003ac8 <_fflush_r+0x10>
 8003ac2:	2500      	movs	r5, #0
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	b118      	cbz	r0, 8003ad2 <_fflush_r+0x1a>
 8003aca:	6a03      	ldr	r3, [r0, #32]
 8003acc:	b90b      	cbnz	r3, 8003ad2 <_fflush_r+0x1a>
 8003ace:	f000 f8a7 	bl	8003c20 <__sinit>
 8003ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f3      	beq.n	8003ac2 <_fflush_r+0xa>
 8003ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003adc:	07d0      	lsls	r0, r2, #31
 8003ade:	d404      	bmi.n	8003aea <_fflush_r+0x32>
 8003ae0:	0599      	lsls	r1, r3, #22
 8003ae2:	d402      	bmi.n	8003aea <_fflush_r+0x32>
 8003ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ae6:	f000 faf2 	bl	80040ce <__retarget_lock_acquire_recursive>
 8003aea:	4628      	mov	r0, r5
 8003aec:	4621      	mov	r1, r4
 8003aee:	f7ff ff5f 	bl	80039b0 <__sflush_r>
 8003af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003af4:	07da      	lsls	r2, r3, #31
 8003af6:	4605      	mov	r5, r0
 8003af8:	d4e4      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	059b      	lsls	r3, r3, #22
 8003afe:	d4e1      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b02:	f000 fae5 	bl	80040d0 <__retarget_lock_release_recursive>
 8003b06:	e7dd      	b.n	8003ac4 <_fflush_r+0xc>

08003b08 <std>:
 8003b08:	2300      	movs	r3, #0
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	8181      	strh	r1, [r0, #12]
 8003b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b1c:	81c2      	strh	r2, [r0, #14]
 8003b1e:	6183      	str	r3, [r0, #24]
 8003b20:	4619      	mov	r1, r3
 8003b22:	2208      	movs	r2, #8
 8003b24:	305c      	adds	r0, #92	@ 0x5c
 8003b26:	f000 fa67 	bl	8003ff8 <memset>
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <std+0x58>)
 8003b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <std+0x5c>)
 8003b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <std+0x60>)
 8003b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <std+0x64>)
 8003b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <std+0x68>)
 8003b3c:	6224      	str	r4, [r4, #32]
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d006      	beq.n	8003b50 <std+0x48>
 8003b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b46:	4294      	cmp	r4, r2
 8003b48:	d002      	beq.n	8003b50 <std+0x48>
 8003b4a:	33d0      	adds	r3, #208	@ 0xd0
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d105      	bne.n	8003b5c <std+0x54>
 8003b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	f000 bab8 	b.w	80040cc <__retarget_lock_init_recursive>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	08003e49 	.word	0x08003e49
 8003b64:	08003e6b 	.word	0x08003e6b
 8003b68:	08003ea3 	.word	0x08003ea3
 8003b6c:	08003ec7 	.word	0x08003ec7
 8003b70:	200006f0 	.word	0x200006f0

08003b74 <stdio_exit_handler>:
 8003b74:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <stdio_exit_handler+0xc>)
 8003b76:	4903      	ldr	r1, [pc, #12]	@ (8003b84 <stdio_exit_handler+0x10>)
 8003b78:	4803      	ldr	r0, [pc, #12]	@ (8003b88 <stdio_exit_handler+0x14>)
 8003b7a:	f000 b869 	b.w	8003c50 <_fwalk_sglue>
 8003b7e:	bf00      	nop
 8003b80:	20000004 	.word	0x20000004
 8003b84:	08003ab9 	.word	0x08003ab9
 8003b88:	20000014 	.word	0x20000014

08003b8c <cleanup_stdio>:
 8003b8c:	6841      	ldr	r1, [r0, #4]
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <cleanup_stdio+0x34>)
 8003b90:	4299      	cmp	r1, r3
 8003b92:	b510      	push	{r4, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	d001      	beq.n	8003b9c <cleanup_stdio+0x10>
 8003b98:	f7ff ff8e 	bl	8003ab8 <_fflush_r>
 8003b9c:	68a1      	ldr	r1, [r4, #8]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <cleanup_stdio+0x38>)
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d002      	beq.n	8003baa <cleanup_stdio+0x1e>
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7ff ff87 	bl	8003ab8 <_fflush_r>
 8003baa:	68e1      	ldr	r1, [r4, #12]
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <cleanup_stdio+0x3c>)
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	d004      	beq.n	8003bbc <cleanup_stdio+0x30>
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	f7ff bf7e 	b.w	8003ab8 <_fflush_r>
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200006f0 	.word	0x200006f0
 8003bc4:	20000758 	.word	0x20000758
 8003bc8:	200007c0 	.word	0x200007c0

08003bcc <global_stdio_init.part.0>:
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <global_stdio_init.part.0+0x30>)
 8003bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8003c00 <global_stdio_init.part.0+0x34>)
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c04 <global_stdio_init.part.0+0x38>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2104      	movs	r1, #4
 8003bdc:	f7ff ff94 	bl	8003b08 <std>
 8003be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003be4:	2201      	movs	r2, #1
 8003be6:	2109      	movs	r1, #9
 8003be8:	f7ff ff8e 	bl	8003b08 <std>
 8003bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf6:	2112      	movs	r1, #18
 8003bf8:	f7ff bf86 	b.w	8003b08 <std>
 8003bfc:	20000828 	.word	0x20000828
 8003c00:	200006f0 	.word	0x200006f0
 8003c04:	08003b75 	.word	0x08003b75

08003c08 <__sfp_lock_acquire>:
 8003c08:	4801      	ldr	r0, [pc, #4]	@ (8003c10 <__sfp_lock_acquire+0x8>)
 8003c0a:	f000 ba60 	b.w	80040ce <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000831 	.word	0x20000831

08003c14 <__sfp_lock_release>:
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <__sfp_lock_release+0x8>)
 8003c16:	f000 ba5b 	b.w	80040d0 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000831 	.word	0x20000831

08003c20 <__sinit>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	f7ff fff0 	bl	8003c08 <__sfp_lock_acquire>
 8003c28:	6a23      	ldr	r3, [r4, #32]
 8003c2a:	b11b      	cbz	r3, 8003c34 <__sinit+0x14>
 8003c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c30:	f7ff bff0 	b.w	8003c14 <__sfp_lock_release>
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__sinit+0x28>)
 8003c36:	6223      	str	r3, [r4, #32]
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <__sinit+0x2c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f5      	bne.n	8003c2c <__sinit+0xc>
 8003c40:	f7ff ffc4 	bl	8003bcc <global_stdio_init.part.0>
 8003c44:	e7f2      	b.n	8003c2c <__sinit+0xc>
 8003c46:	bf00      	nop
 8003c48:	08003b8d 	.word	0x08003b8d
 8003c4c:	20000828 	.word	0x20000828

08003c50 <_fwalk_sglue>:
 8003c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c54:	4607      	mov	r7, r0
 8003c56:	4688      	mov	r8, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c60:	f1b9 0901 	subs.w	r9, r9, #1
 8003c64:	d505      	bpl.n	8003c72 <_fwalk_sglue+0x22>
 8003c66:	6824      	ldr	r4, [r4, #0]
 8003c68:	2c00      	cmp	r4, #0
 8003c6a:	d1f7      	bne.n	8003c5c <_fwalk_sglue+0xc>
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d907      	bls.n	8003c88 <_fwalk_sglue+0x38>
 8003c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	d003      	beq.n	8003c88 <_fwalk_sglue+0x38>
 8003c80:	4629      	mov	r1, r5
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c0      	blx	r8
 8003c86:	4306      	orrs	r6, r0
 8003c88:	3568      	adds	r5, #104	@ 0x68
 8003c8a:	e7e9      	b.n	8003c60 <_fwalk_sglue+0x10>

08003c8c <setbuf>:
 8003c8c:	fab1 f281 	clz	r2, r1
 8003c90:	0952      	lsrs	r2, r2, #5
 8003c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c96:	0052      	lsls	r2, r2, #1
 8003c98:	f000 b800 	b.w	8003c9c <setvbuf>

08003c9c <setvbuf>:
 8003c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	4b57      	ldr	r3, [pc, #348]	@ (8003e00 <setvbuf+0x164>)
 8003ca4:	681f      	ldr	r7, [r3, #0]
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	460e      	mov	r6, r1
 8003caa:	4690      	mov	r8, r2
 8003cac:	b127      	cbz	r7, 8003cb8 <setvbuf+0x1c>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	b913      	cbnz	r3, 8003cb8 <setvbuf+0x1c>
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	f7ff ffb4 	bl	8003c20 <__sinit>
 8003cb8:	f1b8 0f02 	cmp.w	r8, #2
 8003cbc:	d006      	beq.n	8003ccc <setvbuf+0x30>
 8003cbe:	f1b8 0f01 	cmp.w	r8, #1
 8003cc2:	f200 809a 	bhi.w	8003dfa <setvbuf+0x15e>
 8003cc6:	2d00      	cmp	r5, #0
 8003cc8:	f2c0 8097 	blt.w	8003dfa <setvbuf+0x15e>
 8003ccc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cce:	07d9      	lsls	r1, r3, #31
 8003cd0:	d405      	bmi.n	8003cde <setvbuf+0x42>
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	059a      	lsls	r2, r3, #22
 8003cd6:	d402      	bmi.n	8003cde <setvbuf+0x42>
 8003cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cda:	f000 f9f8 	bl	80040ce <__retarget_lock_acquire_recursive>
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f7ff fee9 	bl	8003ab8 <_fflush_r>
 8003ce6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ce8:	b141      	cbz	r1, 8003cfc <setvbuf+0x60>
 8003cea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cee:	4299      	cmp	r1, r3
 8003cf0:	d002      	beq.n	8003cf8 <setvbuf+0x5c>
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	f001 f854 	bl	8004da0 <_free_r>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61a3      	str	r3, [r4, #24]
 8003d00:	6063      	str	r3, [r4, #4]
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	d503      	bpl.n	8003d10 <setvbuf+0x74>
 8003d08:	6921      	ldr	r1, [r4, #16]
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f001 f848 	bl	8004da0 <_free_r>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	f1b8 0f02 	cmp.w	r8, #2
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	d061      	beq.n	8003de6 <setvbuf+0x14a>
 8003d22:	ab01      	add	r3, sp, #4
 8003d24:	466a      	mov	r2, sp
 8003d26:	4621      	mov	r1, r4
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f001 ff4d 	bl	8005bc8 <__swhatbuf_r>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	4318      	orrs	r0, r3
 8003d32:	81a0      	strh	r0, [r4, #12]
 8003d34:	bb2d      	cbnz	r5, 8003d82 <setvbuf+0xe6>
 8003d36:	9d00      	ldr	r5, [sp, #0]
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f001 f87b 	bl	8004e34 <malloc>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d152      	bne.n	8003dea <setvbuf+0x14e>
 8003d44:	f8dd 9000 	ldr.w	r9, [sp]
 8003d48:	45a9      	cmp	r9, r5
 8003d4a:	d140      	bne.n	8003dce <setvbuf+0x132>
 8003d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d54:	f043 0202 	orr.w	r2, r3, #2
 8003d58:	81a2      	strh	r2, [r4, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60a2      	str	r2, [r4, #8]
 8003d5e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	6122      	str	r2, [r4, #16]
 8003d66:	2201      	movs	r2, #1
 8003d68:	6162      	str	r2, [r4, #20]
 8003d6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d6c:	07d6      	lsls	r6, r2, #31
 8003d6e:	d404      	bmi.n	8003d7a <setvbuf+0xde>
 8003d70:	0598      	lsls	r0, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <setvbuf+0xde>
 8003d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d76:	f000 f9ab 	bl	80040d0 <__retarget_lock_release_recursive>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	b003      	add	sp, #12
 8003d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d82:	2e00      	cmp	r6, #0
 8003d84:	d0d8      	beq.n	8003d38 <setvbuf+0x9c>
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	b913      	cbnz	r3, 8003d90 <setvbuf+0xf4>
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	f7ff ff48 	bl	8003c20 <__sinit>
 8003d90:	f1b8 0f01 	cmp.w	r8, #1
 8003d94:	bf08      	it	eq
 8003d96:	89a3      	ldrheq	r3, [r4, #12]
 8003d98:	6026      	str	r6, [r4, #0]
 8003d9a:	bf04      	itt	eq
 8003d9c:	f043 0301 	orreq.w	r3, r3, #1
 8003da0:	81a3      	strheq	r3, [r4, #12]
 8003da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da6:	f013 0208 	ands.w	r2, r3, #8
 8003daa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003dae:	d01e      	beq.n	8003dee <setvbuf+0x152>
 8003db0:	07d9      	lsls	r1, r3, #31
 8003db2:	bf41      	itttt	mi
 8003db4:	2200      	movmi	r2, #0
 8003db6:	426d      	negmi	r5, r5
 8003db8:	60a2      	strmi	r2, [r4, #8]
 8003dba:	61a5      	strmi	r5, [r4, #24]
 8003dbc:	bf58      	it	pl
 8003dbe:	60a5      	strpl	r5, [r4, #8]
 8003dc0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003dc2:	07d2      	lsls	r2, r2, #31
 8003dc4:	d401      	bmi.n	8003dca <setvbuf+0x12e>
 8003dc6:	059b      	lsls	r3, r3, #22
 8003dc8:	d513      	bpl.n	8003df2 <setvbuf+0x156>
 8003dca:	2500      	movs	r5, #0
 8003dcc:	e7d5      	b.n	8003d7a <setvbuf+0xde>
 8003dce:	4648      	mov	r0, r9
 8003dd0:	f001 f830 	bl	8004e34 <malloc>
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d0b8      	beq.n	8003d4c <setvbuf+0xb0>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	464d      	mov	r5, r9
 8003de4:	e7cf      	b.n	8003d86 <setvbuf+0xea>
 8003de6:	2500      	movs	r5, #0
 8003de8:	e7b2      	b.n	8003d50 <setvbuf+0xb4>
 8003dea:	46a9      	mov	r9, r5
 8003dec:	e7f5      	b.n	8003dda <setvbuf+0x13e>
 8003dee:	60a2      	str	r2, [r4, #8]
 8003df0:	e7e6      	b.n	8003dc0 <setvbuf+0x124>
 8003df2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df4:	f000 f96c 	bl	80040d0 <__retarget_lock_release_recursive>
 8003df8:	e7e7      	b.n	8003dca <setvbuf+0x12e>
 8003dfa:	f04f 35ff 	mov.w	r5, #4294967295
 8003dfe:	e7bc      	b.n	8003d7a <setvbuf+0xde>
 8003e00:	20000010 	.word	0x20000010

08003e04 <siprintf>:
 8003e04:	b40e      	push	{r1, r2, r3}
 8003e06:	b510      	push	{r4, lr}
 8003e08:	b09d      	sub	sp, #116	@ 0x74
 8003e0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e0c:	9002      	str	r0, [sp, #8]
 8003e0e:	9006      	str	r0, [sp, #24]
 8003e10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e14:	480a      	ldr	r0, [pc, #40]	@ (8003e40 <siprintf+0x3c>)
 8003e16:	9107      	str	r1, [sp, #28]
 8003e18:	9104      	str	r1, [sp, #16]
 8003e1a:	490a      	ldr	r1, [pc, #40]	@ (8003e44 <siprintf+0x40>)
 8003e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e20:	9105      	str	r1, [sp, #20]
 8003e22:	2400      	movs	r4, #0
 8003e24:	a902      	add	r1, sp, #8
 8003e26:	6800      	ldr	r0, [r0, #0]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e2c:	f001 fc8e 	bl	800574c <_svfiprintf_r>
 8003e30:	9b02      	ldr	r3, [sp, #8]
 8003e32:	701c      	strb	r4, [r3, #0]
 8003e34:	b01d      	add	sp, #116	@ 0x74
 8003e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e3a:	b003      	add	sp, #12
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000010 	.word	0x20000010
 8003e44:	ffff0208 	.word	0xffff0208

08003e48 <__sread>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 f900 	bl	8004054 <_read_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	bfab      	itete	ge
 8003e58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e5c:	181b      	addge	r3, r3, r0
 8003e5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e62:	bfac      	ite	ge
 8003e64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e66:	81a3      	strhlt	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__swrite>:
 8003e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	461f      	mov	r7, r3
 8003e70:	898b      	ldrh	r3, [r1, #12]
 8003e72:	05db      	lsls	r3, r3, #23
 8003e74:	4605      	mov	r5, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4616      	mov	r6, r2
 8003e7a:	d505      	bpl.n	8003e88 <__swrite+0x1e>
 8003e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e80:	2302      	movs	r3, #2
 8003e82:	2200      	movs	r2, #0
 8003e84:	f000 f8d4 	bl	8004030 <_lseek_r>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	4632      	mov	r2, r6
 8003e96:	463b      	mov	r3, r7
 8003e98:	4628      	mov	r0, r5
 8003e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9e:	f7fd bf35 	b.w	8001d0c <_write_r>

08003ea2 <__sseek>:
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 f8c1 	bl	8004030 <_lseek_r>
 8003eae:	1c43      	adds	r3, r0, #1
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	bf15      	itete	ne
 8003eb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003eb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003eba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ebe:	81a3      	strheq	r3, [r4, #12]
 8003ec0:	bf18      	it	ne
 8003ec2:	81a3      	strhne	r3, [r4, #12]
 8003ec4:	bd10      	pop	{r4, pc}

08003ec6 <__sclose>:
 8003ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eca:	f000 b8a1 	b.w	8004010 <_close_r>

08003ece <__swbuf_r>:
 8003ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed0:	460e      	mov	r6, r1
 8003ed2:	4614      	mov	r4, r2
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	b118      	cbz	r0, 8003ee0 <__swbuf_r+0x12>
 8003ed8:	6a03      	ldr	r3, [r0, #32]
 8003eda:	b90b      	cbnz	r3, 8003ee0 <__swbuf_r+0x12>
 8003edc:	f7ff fea0 	bl	8003c20 <__sinit>
 8003ee0:	69a3      	ldr	r3, [r4, #24]
 8003ee2:	60a3      	str	r3, [r4, #8]
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	071a      	lsls	r2, r3, #28
 8003ee8:	d501      	bpl.n	8003eee <__swbuf_r+0x20>
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	b943      	cbnz	r3, 8003f00 <__swbuf_r+0x32>
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 f82b 	bl	8003f4c <__swsetup_r>
 8003ef6:	b118      	cbz	r0, 8003f00 <__swbuf_r+0x32>
 8003ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8003efc:	4638      	mov	r0, r7
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	6922      	ldr	r2, [r4, #16]
 8003f04:	1a98      	subs	r0, r3, r2
 8003f06:	6963      	ldr	r3, [r4, #20]
 8003f08:	b2f6      	uxtb	r6, r6
 8003f0a:	4283      	cmp	r3, r0
 8003f0c:	4637      	mov	r7, r6
 8003f0e:	dc05      	bgt.n	8003f1c <__swbuf_r+0x4e>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	f7ff fdd0 	bl	8003ab8 <_fflush_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d1ed      	bne.n	8003ef8 <__swbuf_r+0x2a>
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60a3      	str	r3, [r4, #8]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	6022      	str	r2, [r4, #0]
 8003f28:	701e      	strb	r6, [r3, #0]
 8003f2a:	6962      	ldr	r2, [r4, #20]
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d004      	beq.n	8003f3c <__swbuf_r+0x6e>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	07db      	lsls	r3, r3, #31
 8003f36:	d5e1      	bpl.n	8003efc <__swbuf_r+0x2e>
 8003f38:	2e0a      	cmp	r6, #10
 8003f3a:	d1df      	bne.n	8003efc <__swbuf_r+0x2e>
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7ff fdba 	bl	8003ab8 <_fflush_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d0d9      	beq.n	8003efc <__swbuf_r+0x2e>
 8003f48:	e7d6      	b.n	8003ef8 <__swbuf_r+0x2a>
	...

08003f4c <__swsetup_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <__swsetup_r+0xa8>)
 8003f50:	4605      	mov	r5, r0
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	460c      	mov	r4, r1
 8003f56:	b118      	cbz	r0, 8003f60 <__swsetup_r+0x14>
 8003f58:	6a03      	ldr	r3, [r0, #32]
 8003f5a:	b90b      	cbnz	r3, 8003f60 <__swsetup_r+0x14>
 8003f5c:	f7ff fe60 	bl	8003c20 <__sinit>
 8003f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f64:	0719      	lsls	r1, r3, #28
 8003f66:	d422      	bmi.n	8003fae <__swsetup_r+0x62>
 8003f68:	06da      	lsls	r2, r3, #27
 8003f6a:	d407      	bmi.n	8003f7c <__swsetup_r+0x30>
 8003f6c:	2209      	movs	r2, #9
 8003f6e:	602a      	str	r2, [r5, #0]
 8003f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f74:	81a3      	strh	r3, [r4, #12]
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7a:	e033      	b.n	8003fe4 <__swsetup_r+0x98>
 8003f7c:	0758      	lsls	r0, r3, #29
 8003f7e:	d512      	bpl.n	8003fa6 <__swsetup_r+0x5a>
 8003f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f82:	b141      	cbz	r1, 8003f96 <__swsetup_r+0x4a>
 8003f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d002      	beq.n	8003f92 <__swsetup_r+0x46>
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 ff07 	bl	8004da0 <_free_r>
 8003f92:	2300      	movs	r3, #0
 8003f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6063      	str	r3, [r4, #4]
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	b94b      	cbnz	r3, 8003fc6 <__swsetup_r+0x7a>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fbc:	d003      	beq.n	8003fc6 <__swsetup_r+0x7a>
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f001 fe27 	bl	8005c14 <__smakebuf_r>
 8003fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fca:	f013 0201 	ands.w	r2, r3, #1
 8003fce:	d00a      	beq.n	8003fe6 <__swsetup_r+0x9a>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	60a2      	str	r2, [r4, #8]
 8003fd4:	6962      	ldr	r2, [r4, #20]
 8003fd6:	4252      	negs	r2, r2
 8003fd8:	61a2      	str	r2, [r4, #24]
 8003fda:	6922      	ldr	r2, [r4, #16]
 8003fdc:	b942      	cbnz	r2, 8003ff0 <__swsetup_r+0xa4>
 8003fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003fe2:	d1c5      	bne.n	8003f70 <__swsetup_r+0x24>
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	0799      	lsls	r1, r3, #30
 8003fe8:	bf58      	it	pl
 8003fea:	6962      	ldrpl	r2, [r4, #20]
 8003fec:	60a2      	str	r2, [r4, #8]
 8003fee:	e7f4      	b.n	8003fda <__swsetup_r+0x8e>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e7f7      	b.n	8003fe4 <__swsetup_r+0x98>
 8003ff4:	20000010 	.word	0x20000010

08003ff8 <memset>:
 8003ff8:	4402      	add	r2, r0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <_localeconv_r>:
 8004008:	4800      	ldr	r0, [pc, #0]	@ (800400c <_localeconv_r+0x4>)
 800400a:	4770      	bx	lr
 800400c:	20000150 	.word	0x20000150

08004010 <_close_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d06      	ldr	r5, [pc, #24]	@ (800402c <_close_r+0x1c>)
 8004014:	2300      	movs	r3, #0
 8004016:	4604      	mov	r4, r0
 8004018:	4608      	mov	r0, r1
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	f7fe feb8 	bl	8002d90 <_close>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_close_r+0x1a>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_close_r+0x1a>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	2000082c 	.word	0x2000082c

08004030 <_lseek_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d07      	ldr	r5, [pc, #28]	@ (8004050 <_lseek_r+0x20>)
 8004034:	4604      	mov	r4, r0
 8004036:	4608      	mov	r0, r1
 8004038:	4611      	mov	r1, r2
 800403a:	2200      	movs	r2, #0
 800403c:	602a      	str	r2, [r5, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f7fe fecd 	bl	8002dde <_lseek>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_lseek_r+0x1e>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_lseek_r+0x1e>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	2000082c 	.word	0x2000082c

08004054 <_read_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d07      	ldr	r5, [pc, #28]	@ (8004074 <_read_r+0x20>)
 8004058:	4604      	mov	r4, r0
 800405a:	4608      	mov	r0, r1
 800405c:	4611      	mov	r1, r2
 800405e:	2200      	movs	r2, #0
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fe fe77 	bl	8002d56 <_read>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_read_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_read_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	2000082c 	.word	0x2000082c

08004078 <__errno>:
 8004078:	4b01      	ldr	r3, [pc, #4]	@ (8004080 <__errno+0x8>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000010 	.word	0x20000010

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	4d0d      	ldr	r5, [pc, #52]	@ (80040bc <__libc_init_array+0x38>)
 8004088:	4c0d      	ldr	r4, [pc, #52]	@ (80040c0 <__libc_init_array+0x3c>)
 800408a:	1b64      	subs	r4, r4, r5
 800408c:	10a4      	asrs	r4, r4, #2
 800408e:	2600      	movs	r6, #0
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	4d0b      	ldr	r5, [pc, #44]	@ (80040c4 <__libc_init_array+0x40>)
 8004096:	4c0c      	ldr	r4, [pc, #48]	@ (80040c8 <__libc_init_array+0x44>)
 8004098:	f001 ff38 	bl	8005f0c <_init>
 800409c:	1b64      	subs	r4, r4, r5
 800409e:	10a4      	asrs	r4, r4, #2
 80040a0:	2600      	movs	r6, #0
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	080064cc 	.word	0x080064cc
 80040c0:	080064cc 	.word	0x080064cc
 80040c4:	080064cc 	.word	0x080064cc
 80040c8:	080064d0 	.word	0x080064d0

080040cc <__retarget_lock_init_recursive>:
 80040cc:	4770      	bx	lr

080040ce <__retarget_lock_acquire_recursive>:
 80040ce:	4770      	bx	lr

080040d0 <__retarget_lock_release_recursive>:
 80040d0:	4770      	bx	lr

080040d2 <memcpy>:
 80040d2:	440a      	add	r2, r1
 80040d4:	4291      	cmp	r1, r2
 80040d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80040da:	d100      	bne.n	80040de <memcpy+0xc>
 80040dc:	4770      	bx	lr
 80040de:	b510      	push	{r4, lr}
 80040e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e8:	4291      	cmp	r1, r2
 80040ea:	d1f9      	bne.n	80040e0 <memcpy+0xe>
 80040ec:	bd10      	pop	{r4, pc}

080040ee <quorem>:
 80040ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f2:	6903      	ldr	r3, [r0, #16]
 80040f4:	690c      	ldr	r4, [r1, #16]
 80040f6:	42a3      	cmp	r3, r4
 80040f8:	4607      	mov	r7, r0
 80040fa:	db7e      	blt.n	80041fa <quorem+0x10c>
 80040fc:	3c01      	subs	r4, #1
 80040fe:	f101 0814 	add.w	r8, r1, #20
 8004102:	00a3      	lsls	r3, r4, #2
 8004104:	f100 0514 	add.w	r5, r0, #20
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004118:	3301      	adds	r3, #1
 800411a:	429a      	cmp	r2, r3
 800411c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004120:	fbb2 f6f3 	udiv	r6, r2, r3
 8004124:	d32e      	bcc.n	8004184 <quorem+0x96>
 8004126:	f04f 0a00 	mov.w	sl, #0
 800412a:	46c4      	mov	ip, r8
 800412c:	46ae      	mov	lr, r5
 800412e:	46d3      	mov	fp, sl
 8004130:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004134:	b298      	uxth	r0, r3
 8004136:	fb06 a000 	mla	r0, r6, r0, sl
 800413a:	0c02      	lsrs	r2, r0, #16
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	fb06 2303 	mla	r3, r6, r3, r2
 8004142:	f8de 2000 	ldr.w	r2, [lr]
 8004146:	b280      	uxth	r0, r0
 8004148:	b292      	uxth	r2, r2
 800414a:	1a12      	subs	r2, r2, r0
 800414c:	445a      	add	r2, fp
 800414e:	f8de 0000 	ldr.w	r0, [lr]
 8004152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004156:	b29b      	uxth	r3, r3
 8004158:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800415c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004160:	b292      	uxth	r2, r2
 8004162:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004166:	45e1      	cmp	r9, ip
 8004168:	f84e 2b04 	str.w	r2, [lr], #4
 800416c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004170:	d2de      	bcs.n	8004130 <quorem+0x42>
 8004172:	9b00      	ldr	r3, [sp, #0]
 8004174:	58eb      	ldr	r3, [r5, r3]
 8004176:	b92b      	cbnz	r3, 8004184 <quorem+0x96>
 8004178:	9b01      	ldr	r3, [sp, #4]
 800417a:	3b04      	subs	r3, #4
 800417c:	429d      	cmp	r5, r3
 800417e:	461a      	mov	r2, r3
 8004180:	d32f      	bcc.n	80041e2 <quorem+0xf4>
 8004182:	613c      	str	r4, [r7, #16]
 8004184:	4638      	mov	r0, r7
 8004186:	f001 f97d 	bl	8005484 <__mcmp>
 800418a:	2800      	cmp	r0, #0
 800418c:	db25      	blt.n	80041da <quorem+0xec>
 800418e:	4629      	mov	r1, r5
 8004190:	2000      	movs	r0, #0
 8004192:	f858 2b04 	ldr.w	r2, [r8], #4
 8004196:	f8d1 c000 	ldr.w	ip, [r1]
 800419a:	fa1f fe82 	uxth.w	lr, r2
 800419e:	fa1f f38c 	uxth.w	r3, ip
 80041a2:	eba3 030e 	sub.w	r3, r3, lr
 80041a6:	4403      	add	r3, r0
 80041a8:	0c12      	lsrs	r2, r2, #16
 80041aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80041ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041b8:	45c1      	cmp	r9, r8
 80041ba:	f841 3b04 	str.w	r3, [r1], #4
 80041be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041c2:	d2e6      	bcs.n	8004192 <quorem+0xa4>
 80041c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041cc:	b922      	cbnz	r2, 80041d8 <quorem+0xea>
 80041ce:	3b04      	subs	r3, #4
 80041d0:	429d      	cmp	r5, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	d30b      	bcc.n	80041ee <quorem+0x100>
 80041d6:	613c      	str	r4, [r7, #16]
 80041d8:	3601      	adds	r6, #1
 80041da:	4630      	mov	r0, r6
 80041dc:	b003      	add	sp, #12
 80041de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	3b04      	subs	r3, #4
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d1cb      	bne.n	8004182 <quorem+0x94>
 80041ea:	3c01      	subs	r4, #1
 80041ec:	e7c6      	b.n	800417c <quorem+0x8e>
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	d1ef      	bne.n	80041d6 <quorem+0xe8>
 80041f6:	3c01      	subs	r4, #1
 80041f8:	e7ea      	b.n	80041d0 <quorem+0xe2>
 80041fa:	2000      	movs	r0, #0
 80041fc:	e7ee      	b.n	80041dc <quorem+0xee>
	...

08004200 <_dtoa_r>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	69c7      	ldr	r7, [r0, #28]
 8004206:	b097      	sub	sp, #92	@ 0x5c
 8004208:	ed8d 0b04 	vstr	d0, [sp, #16]
 800420c:	ec55 4b10 	vmov	r4, r5, d0
 8004210:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	4681      	mov	r9, r0
 8004216:	920c      	str	r2, [sp, #48]	@ 0x30
 8004218:	9311      	str	r3, [sp, #68]	@ 0x44
 800421a:	b97f      	cbnz	r7, 800423c <_dtoa_r+0x3c>
 800421c:	2010      	movs	r0, #16
 800421e:	f000 fe09 	bl	8004e34 <malloc>
 8004222:	4602      	mov	r2, r0
 8004224:	f8c9 001c 	str.w	r0, [r9, #28]
 8004228:	b920      	cbnz	r0, 8004234 <_dtoa_r+0x34>
 800422a:	4ba9      	ldr	r3, [pc, #676]	@ (80044d0 <_dtoa_r+0x2d0>)
 800422c:	21ef      	movs	r1, #239	@ 0xef
 800422e:	48a9      	ldr	r0, [pc, #676]	@ (80044d4 <_dtoa_r+0x2d4>)
 8004230:	f001 fd78 	bl	8005d24 <__assert_func>
 8004234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004238:	6007      	str	r7, [r0, #0]
 800423a:	60c7      	str	r7, [r0, #12]
 800423c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004240:	6819      	ldr	r1, [r3, #0]
 8004242:	b159      	cbz	r1, 800425c <_dtoa_r+0x5c>
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	604a      	str	r2, [r1, #4]
 8004248:	2301      	movs	r3, #1
 800424a:	4093      	lsls	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
 800424e:	4648      	mov	r0, r9
 8004250:	f000 fee6 	bl	8005020 <_Bfree>
 8004254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	1e2b      	subs	r3, r5, #0
 800425e:	bfb9      	ittee	lt
 8004260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004264:	9305      	strlt	r3, [sp, #20]
 8004266:	2300      	movge	r3, #0
 8004268:	6033      	strge	r3, [r6, #0]
 800426a:	9f05      	ldr	r7, [sp, #20]
 800426c:	4b9a      	ldr	r3, [pc, #616]	@ (80044d8 <_dtoa_r+0x2d8>)
 800426e:	bfbc      	itt	lt
 8004270:	2201      	movlt	r2, #1
 8004272:	6032      	strlt	r2, [r6, #0]
 8004274:	43bb      	bics	r3, r7
 8004276:	d112      	bne.n	800429e <_dtoa_r+0x9e>
 8004278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800427a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004284:	4323      	orrs	r3, r4
 8004286:	f000 855a 	beq.w	8004d3e <_dtoa_r+0xb3e>
 800428a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800428c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80044ec <_dtoa_r+0x2ec>
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 855c 	beq.w	8004d4e <_dtoa_r+0xb4e>
 8004296:	f10a 0303 	add.w	r3, sl, #3
 800429a:	f000 bd56 	b.w	8004d4a <_dtoa_r+0xb4a>
 800429e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80042a2:	2200      	movs	r2, #0
 80042a4:	ec51 0b17 	vmov	r0, r1, d7
 80042a8:	2300      	movs	r3, #0
 80042aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80042ae:	f7fc fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80042b2:	4680      	mov	r8, r0
 80042b4:	b158      	cbz	r0, 80042ce <_dtoa_r+0xce>
 80042b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80042b8:	2301      	movs	r3, #1
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042be:	b113      	cbz	r3, 80042c6 <_dtoa_r+0xc6>
 80042c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80042c2:	4b86      	ldr	r3, [pc, #536]	@ (80044dc <_dtoa_r+0x2dc>)
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80044f0 <_dtoa_r+0x2f0>
 80042ca:	f000 bd40 	b.w	8004d4e <_dtoa_r+0xb4e>
 80042ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80042d2:	aa14      	add	r2, sp, #80	@ 0x50
 80042d4:	a915      	add	r1, sp, #84	@ 0x54
 80042d6:	4648      	mov	r0, r9
 80042d8:	f001 f984 	bl	80055e4 <__d2b>
 80042dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80042e0:	9002      	str	r0, [sp, #8]
 80042e2:	2e00      	cmp	r6, #0
 80042e4:	d078      	beq.n	80043d8 <_dtoa_r+0x1d8>
 80042e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80042ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80042f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80042f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80042fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004300:	4619      	mov	r1, r3
 8004302:	2200      	movs	r2, #0
 8004304:	4b76      	ldr	r3, [pc, #472]	@ (80044e0 <_dtoa_r+0x2e0>)
 8004306:	f7fb ffbf 	bl	8000288 <__aeabi_dsub>
 800430a:	a36b      	add	r3, pc, #428	@ (adr r3, 80044b8 <_dtoa_r+0x2b8>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fc f972 	bl	80005f8 <__aeabi_dmul>
 8004314:	a36a      	add	r3, pc, #424	@ (adr r3, 80044c0 <_dtoa_r+0x2c0>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fb ffb7 	bl	800028c <__adddf3>
 800431e:	4604      	mov	r4, r0
 8004320:	4630      	mov	r0, r6
 8004322:	460d      	mov	r5, r1
 8004324:	f7fc f8fe 	bl	8000524 <__aeabi_i2d>
 8004328:	a367      	add	r3, pc, #412	@ (adr r3, 80044c8 <_dtoa_r+0x2c8>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	f7fc f963 	bl	80005f8 <__aeabi_dmul>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4620      	mov	r0, r4
 8004338:	4629      	mov	r1, r5
 800433a:	f7fb ffa7 	bl	800028c <__adddf3>
 800433e:	4604      	mov	r4, r0
 8004340:	460d      	mov	r5, r1
 8004342:	f7fc fc09 	bl	8000b58 <__aeabi_d2iz>
 8004346:	2200      	movs	r2, #0
 8004348:	4607      	mov	r7, r0
 800434a:	2300      	movs	r3, #0
 800434c:	4620      	mov	r0, r4
 800434e:	4629      	mov	r1, r5
 8004350:	f7fc fbc4 	bl	8000adc <__aeabi_dcmplt>
 8004354:	b140      	cbz	r0, 8004368 <_dtoa_r+0x168>
 8004356:	4638      	mov	r0, r7
 8004358:	f7fc f8e4 	bl	8000524 <__aeabi_i2d>
 800435c:	4622      	mov	r2, r4
 800435e:	462b      	mov	r3, r5
 8004360:	f7fc fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004364:	b900      	cbnz	r0, 8004368 <_dtoa_r+0x168>
 8004366:	3f01      	subs	r7, #1
 8004368:	2f16      	cmp	r7, #22
 800436a:	d852      	bhi.n	8004412 <_dtoa_r+0x212>
 800436c:	4b5d      	ldr	r3, [pc, #372]	@ (80044e4 <_dtoa_r+0x2e4>)
 800436e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800437a:	f7fc fbaf 	bl	8000adc <__aeabi_dcmplt>
 800437e:	2800      	cmp	r0, #0
 8004380:	d049      	beq.n	8004416 <_dtoa_r+0x216>
 8004382:	3f01      	subs	r7, #1
 8004384:	2300      	movs	r3, #0
 8004386:	9310      	str	r3, [sp, #64]	@ 0x40
 8004388:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800438a:	1b9b      	subs	r3, r3, r6
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	bf45      	ittet	mi
 8004390:	f1c3 0301 	rsbmi	r3, r3, #1
 8004394:	9300      	strmi	r3, [sp, #0]
 8004396:	2300      	movpl	r3, #0
 8004398:	2300      	movmi	r3, #0
 800439a:	9206      	str	r2, [sp, #24]
 800439c:	bf54      	ite	pl
 800439e:	9300      	strpl	r3, [sp, #0]
 80043a0:	9306      	strmi	r3, [sp, #24]
 80043a2:	2f00      	cmp	r7, #0
 80043a4:	db39      	blt.n	800441a <_dtoa_r+0x21a>
 80043a6:	9b06      	ldr	r3, [sp, #24]
 80043a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80043aa:	443b      	add	r3, r7
 80043ac:	9306      	str	r3, [sp, #24]
 80043ae:	2300      	movs	r3, #0
 80043b0:	9308      	str	r3, [sp, #32]
 80043b2:	9b07      	ldr	r3, [sp, #28]
 80043b4:	2b09      	cmp	r3, #9
 80043b6:	d863      	bhi.n	8004480 <_dtoa_r+0x280>
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	bfc4      	itt	gt
 80043bc:	3b04      	subgt	r3, #4
 80043be:	9307      	strgt	r3, [sp, #28]
 80043c0:	9b07      	ldr	r3, [sp, #28]
 80043c2:	f1a3 0302 	sub.w	r3, r3, #2
 80043c6:	bfcc      	ite	gt
 80043c8:	2400      	movgt	r4, #0
 80043ca:	2401      	movle	r4, #1
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d863      	bhi.n	8004498 <_dtoa_r+0x298>
 80043d0:	e8df f003 	tbb	[pc, r3]
 80043d4:	2b375452 	.word	0x2b375452
 80043d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80043dc:	441e      	add	r6, r3
 80043de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	bfc1      	itttt	gt
 80043e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80043ea:	409f      	lslgt	r7, r3
 80043ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80043f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80043f4:	bfd6      	itet	le
 80043f6:	f1c3 0320 	rsble	r3, r3, #32
 80043fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80043fe:	fa04 f003 	lslle.w	r0, r4, r3
 8004402:	f7fc f87f 	bl	8000504 <__aeabi_ui2d>
 8004406:	2201      	movs	r2, #1
 8004408:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800440c:	3e01      	subs	r6, #1
 800440e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004410:	e776      	b.n	8004300 <_dtoa_r+0x100>
 8004412:	2301      	movs	r3, #1
 8004414:	e7b7      	b.n	8004386 <_dtoa_r+0x186>
 8004416:	9010      	str	r0, [sp, #64]	@ 0x40
 8004418:	e7b6      	b.n	8004388 <_dtoa_r+0x188>
 800441a:	9b00      	ldr	r3, [sp, #0]
 800441c:	1bdb      	subs	r3, r3, r7
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	427b      	negs	r3, r7
 8004422:	9308      	str	r3, [sp, #32]
 8004424:	2300      	movs	r3, #0
 8004426:	930d      	str	r3, [sp, #52]	@ 0x34
 8004428:	e7c3      	b.n	80043b2 <_dtoa_r+0x1b2>
 800442a:	2301      	movs	r3, #1
 800442c:	9309      	str	r3, [sp, #36]	@ 0x24
 800442e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004430:	eb07 0b03 	add.w	fp, r7, r3
 8004434:	f10b 0301 	add.w	r3, fp, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	9303      	str	r3, [sp, #12]
 800443c:	bfb8      	it	lt
 800443e:	2301      	movlt	r3, #1
 8004440:	e006      	b.n	8004450 <_dtoa_r+0x250>
 8004442:	2301      	movs	r3, #1
 8004444:	9309      	str	r3, [sp, #36]	@ 0x24
 8004446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004448:	2b00      	cmp	r3, #0
 800444a:	dd28      	ble.n	800449e <_dtoa_r+0x29e>
 800444c:	469b      	mov	fp, r3
 800444e:	9303      	str	r3, [sp, #12]
 8004450:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004454:	2100      	movs	r1, #0
 8004456:	2204      	movs	r2, #4
 8004458:	f102 0514 	add.w	r5, r2, #20
 800445c:	429d      	cmp	r5, r3
 800445e:	d926      	bls.n	80044ae <_dtoa_r+0x2ae>
 8004460:	6041      	str	r1, [r0, #4]
 8004462:	4648      	mov	r0, r9
 8004464:	f000 fd9c 	bl	8004fa0 <_Balloc>
 8004468:	4682      	mov	sl, r0
 800446a:	2800      	cmp	r0, #0
 800446c:	d142      	bne.n	80044f4 <_dtoa_r+0x2f4>
 800446e:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <_dtoa_r+0x2e8>)
 8004470:	4602      	mov	r2, r0
 8004472:	f240 11af 	movw	r1, #431	@ 0x1af
 8004476:	e6da      	b.n	800422e <_dtoa_r+0x2e>
 8004478:	2300      	movs	r3, #0
 800447a:	e7e3      	b.n	8004444 <_dtoa_r+0x244>
 800447c:	2300      	movs	r3, #0
 800447e:	e7d5      	b.n	800442c <_dtoa_r+0x22c>
 8004480:	2401      	movs	r4, #1
 8004482:	2300      	movs	r3, #0
 8004484:	9307      	str	r3, [sp, #28]
 8004486:	9409      	str	r4, [sp, #36]	@ 0x24
 8004488:	f04f 3bff 	mov.w	fp, #4294967295
 800448c:	2200      	movs	r2, #0
 800448e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004492:	2312      	movs	r3, #18
 8004494:	920c      	str	r2, [sp, #48]	@ 0x30
 8004496:	e7db      	b.n	8004450 <_dtoa_r+0x250>
 8004498:	2301      	movs	r3, #1
 800449a:	9309      	str	r3, [sp, #36]	@ 0x24
 800449c:	e7f4      	b.n	8004488 <_dtoa_r+0x288>
 800449e:	f04f 0b01 	mov.w	fp, #1
 80044a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80044a6:	465b      	mov	r3, fp
 80044a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80044ac:	e7d0      	b.n	8004450 <_dtoa_r+0x250>
 80044ae:	3101      	adds	r1, #1
 80044b0:	0052      	lsls	r2, r2, #1
 80044b2:	e7d1      	b.n	8004458 <_dtoa_r+0x258>
 80044b4:	f3af 8000 	nop.w
 80044b8:	636f4361 	.word	0x636f4361
 80044bc:	3fd287a7 	.word	0x3fd287a7
 80044c0:	8b60c8b3 	.word	0x8b60c8b3
 80044c4:	3fc68a28 	.word	0x3fc68a28
 80044c8:	509f79fb 	.word	0x509f79fb
 80044cc:	3fd34413 	.word	0x3fd34413
 80044d0:	08006190 	.word	0x08006190
 80044d4:	080061a7 	.word	0x080061a7
 80044d8:	7ff00000 	.word	0x7ff00000
 80044dc:	08006160 	.word	0x08006160
 80044e0:	3ff80000 	.word	0x3ff80000
 80044e4:	080062f8 	.word	0x080062f8
 80044e8:	080061ff 	.word	0x080061ff
 80044ec:	0800618c 	.word	0x0800618c
 80044f0:	0800615f 	.word	0x0800615f
 80044f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80044f8:	6018      	str	r0, [r3, #0]
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	2b0e      	cmp	r3, #14
 80044fe:	f200 80a1 	bhi.w	8004644 <_dtoa_r+0x444>
 8004502:	2c00      	cmp	r4, #0
 8004504:	f000 809e 	beq.w	8004644 <_dtoa_r+0x444>
 8004508:	2f00      	cmp	r7, #0
 800450a:	dd33      	ble.n	8004574 <_dtoa_r+0x374>
 800450c:	4b9c      	ldr	r3, [pc, #624]	@ (8004780 <_dtoa_r+0x580>)
 800450e:	f007 020f 	and.w	r2, r7, #15
 8004512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004516:	ed93 7b00 	vldr	d7, [r3]
 800451a:	05f8      	lsls	r0, r7, #23
 800451c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004524:	d516      	bpl.n	8004554 <_dtoa_r+0x354>
 8004526:	4b97      	ldr	r3, [pc, #604]	@ (8004784 <_dtoa_r+0x584>)
 8004528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800452c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004530:	f7fc f98c 	bl	800084c <__aeabi_ddiv>
 8004534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004538:	f004 040f 	and.w	r4, r4, #15
 800453c:	2603      	movs	r6, #3
 800453e:	4d91      	ldr	r5, [pc, #580]	@ (8004784 <_dtoa_r+0x584>)
 8004540:	b954      	cbnz	r4, 8004558 <_dtoa_r+0x358>
 8004542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800454a:	f7fc f97f 	bl	800084c <__aeabi_ddiv>
 800454e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004552:	e028      	b.n	80045a6 <_dtoa_r+0x3a6>
 8004554:	2602      	movs	r6, #2
 8004556:	e7f2      	b.n	800453e <_dtoa_r+0x33e>
 8004558:	07e1      	lsls	r1, r4, #31
 800455a:	d508      	bpl.n	800456e <_dtoa_r+0x36e>
 800455c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004564:	f7fc f848 	bl	80005f8 <__aeabi_dmul>
 8004568:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800456c:	3601      	adds	r6, #1
 800456e:	1064      	asrs	r4, r4, #1
 8004570:	3508      	adds	r5, #8
 8004572:	e7e5      	b.n	8004540 <_dtoa_r+0x340>
 8004574:	f000 80af 	beq.w	80046d6 <_dtoa_r+0x4d6>
 8004578:	427c      	negs	r4, r7
 800457a:	4b81      	ldr	r3, [pc, #516]	@ (8004780 <_dtoa_r+0x580>)
 800457c:	4d81      	ldr	r5, [pc, #516]	@ (8004784 <_dtoa_r+0x584>)
 800457e:	f004 020f 	and.w	r2, r4, #15
 8004582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800458e:	f7fc f833 	bl	80005f8 <__aeabi_dmul>
 8004592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004596:	1124      	asrs	r4, r4, #4
 8004598:	2300      	movs	r3, #0
 800459a:	2602      	movs	r6, #2
 800459c:	2c00      	cmp	r4, #0
 800459e:	f040 808f 	bne.w	80046c0 <_dtoa_r+0x4c0>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1d3      	bne.n	800454e <_dtoa_r+0x34e>
 80045a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80045a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8094 	beq.w	80046da <_dtoa_r+0x4da>
 80045b2:	4b75      	ldr	r3, [pc, #468]	@ (8004788 <_dtoa_r+0x588>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fc fa8f 	bl	8000adc <__aeabi_dcmplt>
 80045be:	2800      	cmp	r0, #0
 80045c0:	f000 808b 	beq.w	80046da <_dtoa_r+0x4da>
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <_dtoa_r+0x4da>
 80045cc:	f1bb 0f00 	cmp.w	fp, #0
 80045d0:	dd34      	ble.n	800463c <_dtoa_r+0x43c>
 80045d2:	4620      	mov	r0, r4
 80045d4:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <_dtoa_r+0x58c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fc f80d 	bl	80005f8 <__aeabi_dmul>
 80045de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80045e6:	3601      	adds	r6, #1
 80045e8:	465c      	mov	r4, fp
 80045ea:	4630      	mov	r0, r6
 80045ec:	f7fb ff9a 	bl	8000524 <__aeabi_i2d>
 80045f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f4:	f7fc f800 	bl	80005f8 <__aeabi_dmul>
 80045f8:	4b65      	ldr	r3, [pc, #404]	@ (8004790 <_dtoa_r+0x590>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	f7fb fe46 	bl	800028c <__adddf3>
 8004600:	4605      	mov	r5, r0
 8004602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004606:	2c00      	cmp	r4, #0
 8004608:	d16a      	bne.n	80046e0 <_dtoa_r+0x4e0>
 800460a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800460e:	4b61      	ldr	r3, [pc, #388]	@ (8004794 <_dtoa_r+0x594>)
 8004610:	2200      	movs	r2, #0
 8004612:	f7fb fe39 	bl	8000288 <__aeabi_dsub>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800461e:	462a      	mov	r2, r5
 8004620:	4633      	mov	r3, r6
 8004622:	f7fc fa79 	bl	8000b18 <__aeabi_dcmpgt>
 8004626:	2800      	cmp	r0, #0
 8004628:	f040 8298 	bne.w	8004b5c <_dtoa_r+0x95c>
 800462c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004630:	462a      	mov	r2, r5
 8004632:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004636:	f7fc fa51 	bl	8000adc <__aeabi_dcmplt>
 800463a:	bb38      	cbnz	r0, 800468c <_dtoa_r+0x48c>
 800463c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004640:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	f2c0 8157 	blt.w	80048fa <_dtoa_r+0x6fa>
 800464c:	2f0e      	cmp	r7, #14
 800464e:	f300 8154 	bgt.w	80048fa <_dtoa_r+0x6fa>
 8004652:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <_dtoa_r+0x580>)
 8004654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004658:	ed93 7b00 	vldr	d7, [r3]
 800465c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800465e:	2b00      	cmp	r3, #0
 8004660:	ed8d 7b00 	vstr	d7, [sp]
 8004664:	f280 80e5 	bge.w	8004832 <_dtoa_r+0x632>
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f300 80e1 	bgt.w	8004832 <_dtoa_r+0x632>
 8004670:	d10c      	bne.n	800468c <_dtoa_r+0x48c>
 8004672:	4b48      	ldr	r3, [pc, #288]	@ (8004794 <_dtoa_r+0x594>)
 8004674:	2200      	movs	r2, #0
 8004676:	ec51 0b17 	vmov	r0, r1, d7
 800467a:	f7fb ffbd 	bl	80005f8 <__aeabi_dmul>
 800467e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004682:	f7fc fa3f 	bl	8000b04 <__aeabi_dcmpge>
 8004686:	2800      	cmp	r0, #0
 8004688:	f000 8266 	beq.w	8004b58 <_dtoa_r+0x958>
 800468c:	2400      	movs	r4, #0
 800468e:	4625      	mov	r5, r4
 8004690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004692:	4656      	mov	r6, sl
 8004694:	ea6f 0803 	mvn.w	r8, r3
 8004698:	2700      	movs	r7, #0
 800469a:	4621      	mov	r1, r4
 800469c:	4648      	mov	r0, r9
 800469e:	f000 fcbf 	bl	8005020 <_Bfree>
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	f000 80bd 	beq.w	8004822 <_dtoa_r+0x622>
 80046a8:	b12f      	cbz	r7, 80046b6 <_dtoa_r+0x4b6>
 80046aa:	42af      	cmp	r7, r5
 80046ac:	d003      	beq.n	80046b6 <_dtoa_r+0x4b6>
 80046ae:	4639      	mov	r1, r7
 80046b0:	4648      	mov	r0, r9
 80046b2:	f000 fcb5 	bl	8005020 <_Bfree>
 80046b6:	4629      	mov	r1, r5
 80046b8:	4648      	mov	r0, r9
 80046ba:	f000 fcb1 	bl	8005020 <_Bfree>
 80046be:	e0b0      	b.n	8004822 <_dtoa_r+0x622>
 80046c0:	07e2      	lsls	r2, r4, #31
 80046c2:	d505      	bpl.n	80046d0 <_dtoa_r+0x4d0>
 80046c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046c8:	f7fb ff96 	bl	80005f8 <__aeabi_dmul>
 80046cc:	3601      	adds	r6, #1
 80046ce:	2301      	movs	r3, #1
 80046d0:	1064      	asrs	r4, r4, #1
 80046d2:	3508      	adds	r5, #8
 80046d4:	e762      	b.n	800459c <_dtoa_r+0x39c>
 80046d6:	2602      	movs	r6, #2
 80046d8:	e765      	b.n	80045a6 <_dtoa_r+0x3a6>
 80046da:	9c03      	ldr	r4, [sp, #12]
 80046dc:	46b8      	mov	r8, r7
 80046de:	e784      	b.n	80045ea <_dtoa_r+0x3ea>
 80046e0:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <_dtoa_r+0x580>)
 80046e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80046e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046ec:	4454      	add	r4, sl
 80046ee:	2900      	cmp	r1, #0
 80046f0:	d054      	beq.n	800479c <_dtoa_r+0x59c>
 80046f2:	4929      	ldr	r1, [pc, #164]	@ (8004798 <_dtoa_r+0x598>)
 80046f4:	2000      	movs	r0, #0
 80046f6:	f7fc f8a9 	bl	800084c <__aeabi_ddiv>
 80046fa:	4633      	mov	r3, r6
 80046fc:	462a      	mov	r2, r5
 80046fe:	f7fb fdc3 	bl	8000288 <__aeabi_dsub>
 8004702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004706:	4656      	mov	r6, sl
 8004708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800470c:	f7fc fa24 	bl	8000b58 <__aeabi_d2iz>
 8004710:	4605      	mov	r5, r0
 8004712:	f7fb ff07 	bl	8000524 <__aeabi_i2d>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800471e:	f7fb fdb3 	bl	8000288 <__aeabi_dsub>
 8004722:	3530      	adds	r5, #48	@ 0x30
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800472c:	f806 5b01 	strb.w	r5, [r6], #1
 8004730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004734:	f7fc f9d2 	bl	8000adc <__aeabi_dcmplt>
 8004738:	2800      	cmp	r0, #0
 800473a:	d172      	bne.n	8004822 <_dtoa_r+0x622>
 800473c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004740:	4911      	ldr	r1, [pc, #68]	@ (8004788 <_dtoa_r+0x588>)
 8004742:	2000      	movs	r0, #0
 8004744:	f7fb fda0 	bl	8000288 <__aeabi_dsub>
 8004748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800474c:	f7fc f9c6 	bl	8000adc <__aeabi_dcmplt>
 8004750:	2800      	cmp	r0, #0
 8004752:	f040 80b4 	bne.w	80048be <_dtoa_r+0x6be>
 8004756:	42a6      	cmp	r6, r4
 8004758:	f43f af70 	beq.w	800463c <_dtoa_r+0x43c>
 800475c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <_dtoa_r+0x58c>)
 8004762:	2200      	movs	r2, #0
 8004764:	f7fb ff48 	bl	80005f8 <__aeabi_dmul>
 8004768:	4b08      	ldr	r3, [pc, #32]	@ (800478c <_dtoa_r+0x58c>)
 800476a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800476e:	2200      	movs	r2, #0
 8004770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004774:	f7fb ff40 	bl	80005f8 <__aeabi_dmul>
 8004778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800477c:	e7c4      	b.n	8004708 <_dtoa_r+0x508>
 800477e:	bf00      	nop
 8004780:	080062f8 	.word	0x080062f8
 8004784:	080062d0 	.word	0x080062d0
 8004788:	3ff00000 	.word	0x3ff00000
 800478c:	40240000 	.word	0x40240000
 8004790:	401c0000 	.word	0x401c0000
 8004794:	40140000 	.word	0x40140000
 8004798:	3fe00000 	.word	0x3fe00000
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	f7fb ff2a 	bl	80005f8 <__aeabi_dmul>
 80047a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80047a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80047aa:	4656      	mov	r6, sl
 80047ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047b0:	f7fc f9d2 	bl	8000b58 <__aeabi_d2iz>
 80047b4:	4605      	mov	r5, r0
 80047b6:	f7fb feb5 	bl	8000524 <__aeabi_i2d>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047c2:	f7fb fd61 	bl	8000288 <__aeabi_dsub>
 80047c6:	3530      	adds	r5, #48	@ 0x30
 80047c8:	f806 5b01 	strb.w	r5, [r6], #1
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	42a6      	cmp	r6, r4
 80047d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	d124      	bne.n	8004826 <_dtoa_r+0x626>
 80047dc:	4baf      	ldr	r3, [pc, #700]	@ (8004a9c <_dtoa_r+0x89c>)
 80047de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80047e2:	f7fb fd53 	bl	800028c <__adddf3>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047ee:	f7fc f993 	bl	8000b18 <__aeabi_dcmpgt>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d163      	bne.n	80048be <_dtoa_r+0x6be>
 80047f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80047fa:	49a8      	ldr	r1, [pc, #672]	@ (8004a9c <_dtoa_r+0x89c>)
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7fb fd43 	bl	8000288 <__aeabi_dsub>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800480a:	f7fc f967 	bl	8000adc <__aeabi_dcmplt>
 800480e:	2800      	cmp	r0, #0
 8004810:	f43f af14 	beq.w	800463c <_dtoa_r+0x43c>
 8004814:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004816:	1e73      	subs	r3, r6, #1
 8004818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800481a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800481e:	2b30      	cmp	r3, #48	@ 0x30
 8004820:	d0f8      	beq.n	8004814 <_dtoa_r+0x614>
 8004822:	4647      	mov	r7, r8
 8004824:	e03b      	b.n	800489e <_dtoa_r+0x69e>
 8004826:	4b9e      	ldr	r3, [pc, #632]	@ (8004aa0 <_dtoa_r+0x8a0>)
 8004828:	f7fb fee6 	bl	80005f8 <__aeabi_dmul>
 800482c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004830:	e7bc      	b.n	80047ac <_dtoa_r+0x5ac>
 8004832:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004836:	4656      	mov	r6, sl
 8004838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800483c:	4620      	mov	r0, r4
 800483e:	4629      	mov	r1, r5
 8004840:	f7fc f804 	bl	800084c <__aeabi_ddiv>
 8004844:	f7fc f988 	bl	8000b58 <__aeabi_d2iz>
 8004848:	4680      	mov	r8, r0
 800484a:	f7fb fe6b 	bl	8000524 <__aeabi_i2d>
 800484e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004852:	f7fb fed1 	bl	80005f8 <__aeabi_dmul>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004862:	f7fb fd11 	bl	8000288 <__aeabi_dsub>
 8004866:	f806 4b01 	strb.w	r4, [r6], #1
 800486a:	9d03      	ldr	r5, [sp, #12]
 800486c:	eba6 040a 	sub.w	r4, r6, sl
 8004870:	42a5      	cmp	r5, r4
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	d133      	bne.n	80048e0 <_dtoa_r+0x6e0>
 8004878:	f7fb fd08 	bl	800028c <__adddf3>
 800487c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004880:	4604      	mov	r4, r0
 8004882:	460d      	mov	r5, r1
 8004884:	f7fc f948 	bl	8000b18 <__aeabi_dcmpgt>
 8004888:	b9c0      	cbnz	r0, 80048bc <_dtoa_r+0x6bc>
 800488a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fc f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8004896:	b110      	cbz	r0, 800489e <_dtoa_r+0x69e>
 8004898:	f018 0f01 	tst.w	r8, #1
 800489c:	d10e      	bne.n	80048bc <_dtoa_r+0x6bc>
 800489e:	9902      	ldr	r1, [sp, #8]
 80048a0:	4648      	mov	r0, r9
 80048a2:	f000 fbbd 	bl	8005020 <_Bfree>
 80048a6:	2300      	movs	r3, #0
 80048a8:	7033      	strb	r3, [r6, #0]
 80048aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048ac:	3701      	adds	r7, #1
 80048ae:	601f      	str	r7, [r3, #0]
 80048b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 824b 	beq.w	8004d4e <_dtoa_r+0xb4e>
 80048b8:	601e      	str	r6, [r3, #0]
 80048ba:	e248      	b.n	8004d4e <_dtoa_r+0xb4e>
 80048bc:	46b8      	mov	r8, r7
 80048be:	4633      	mov	r3, r6
 80048c0:	461e      	mov	r6, r3
 80048c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048c6:	2a39      	cmp	r2, #57	@ 0x39
 80048c8:	d106      	bne.n	80048d8 <_dtoa_r+0x6d8>
 80048ca:	459a      	cmp	sl, r3
 80048cc:	d1f8      	bne.n	80048c0 <_dtoa_r+0x6c0>
 80048ce:	2230      	movs	r2, #48	@ 0x30
 80048d0:	f108 0801 	add.w	r8, r8, #1
 80048d4:	f88a 2000 	strb.w	r2, [sl]
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	3201      	adds	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e7a0      	b.n	8004822 <_dtoa_r+0x622>
 80048e0:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa0 <_dtoa_r+0x8a0>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	f7fb fe88 	bl	80005f8 <__aeabi_dmul>
 80048e8:	2200      	movs	r2, #0
 80048ea:	2300      	movs	r3, #0
 80048ec:	4604      	mov	r4, r0
 80048ee:	460d      	mov	r5, r1
 80048f0:	f7fc f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d09f      	beq.n	8004838 <_dtoa_r+0x638>
 80048f8:	e7d1      	b.n	800489e <_dtoa_r+0x69e>
 80048fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048fc:	2a00      	cmp	r2, #0
 80048fe:	f000 80ea 	beq.w	8004ad6 <_dtoa_r+0x8d6>
 8004902:	9a07      	ldr	r2, [sp, #28]
 8004904:	2a01      	cmp	r2, #1
 8004906:	f300 80cd 	bgt.w	8004aa4 <_dtoa_r+0x8a4>
 800490a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800490c:	2a00      	cmp	r2, #0
 800490e:	f000 80c1 	beq.w	8004a94 <_dtoa_r+0x894>
 8004912:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004916:	9c08      	ldr	r4, [sp, #32]
 8004918:	9e00      	ldr	r6, [sp, #0]
 800491a:	9a00      	ldr	r2, [sp, #0]
 800491c:	441a      	add	r2, r3
 800491e:	9200      	str	r2, [sp, #0]
 8004920:	9a06      	ldr	r2, [sp, #24]
 8004922:	2101      	movs	r1, #1
 8004924:	441a      	add	r2, r3
 8004926:	4648      	mov	r0, r9
 8004928:	9206      	str	r2, [sp, #24]
 800492a:	f000 fc2d 	bl	8005188 <__i2b>
 800492e:	4605      	mov	r5, r0
 8004930:	b166      	cbz	r6, 800494c <_dtoa_r+0x74c>
 8004932:	9b06      	ldr	r3, [sp, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dd09      	ble.n	800494c <_dtoa_r+0x74c>
 8004938:	42b3      	cmp	r3, r6
 800493a:	9a00      	ldr	r2, [sp, #0]
 800493c:	bfa8      	it	ge
 800493e:	4633      	movge	r3, r6
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	9200      	str	r2, [sp, #0]
 8004944:	9a06      	ldr	r2, [sp, #24]
 8004946:	1af6      	subs	r6, r6, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	9306      	str	r3, [sp, #24]
 800494c:	9b08      	ldr	r3, [sp, #32]
 800494e:	b30b      	cbz	r3, 8004994 <_dtoa_r+0x794>
 8004950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80c6 	beq.w	8004ae4 <_dtoa_r+0x8e4>
 8004958:	2c00      	cmp	r4, #0
 800495a:	f000 80c0 	beq.w	8004ade <_dtoa_r+0x8de>
 800495e:	4629      	mov	r1, r5
 8004960:	4622      	mov	r2, r4
 8004962:	4648      	mov	r0, r9
 8004964:	f000 fcc8 	bl	80052f8 <__pow5mult>
 8004968:	9a02      	ldr	r2, [sp, #8]
 800496a:	4601      	mov	r1, r0
 800496c:	4605      	mov	r5, r0
 800496e:	4648      	mov	r0, r9
 8004970:	f000 fc20 	bl	80051b4 <__multiply>
 8004974:	9902      	ldr	r1, [sp, #8]
 8004976:	4680      	mov	r8, r0
 8004978:	4648      	mov	r0, r9
 800497a:	f000 fb51 	bl	8005020 <_Bfree>
 800497e:	9b08      	ldr	r3, [sp, #32]
 8004980:	1b1b      	subs	r3, r3, r4
 8004982:	9308      	str	r3, [sp, #32]
 8004984:	f000 80b1 	beq.w	8004aea <_dtoa_r+0x8ea>
 8004988:	9a08      	ldr	r2, [sp, #32]
 800498a:	4641      	mov	r1, r8
 800498c:	4648      	mov	r0, r9
 800498e:	f000 fcb3 	bl	80052f8 <__pow5mult>
 8004992:	9002      	str	r0, [sp, #8]
 8004994:	2101      	movs	r1, #1
 8004996:	4648      	mov	r0, r9
 8004998:	f000 fbf6 	bl	8005188 <__i2b>
 800499c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800499e:	4604      	mov	r4, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 81d8 	beq.w	8004d56 <_dtoa_r+0xb56>
 80049a6:	461a      	mov	r2, r3
 80049a8:	4601      	mov	r1, r0
 80049aa:	4648      	mov	r0, r9
 80049ac:	f000 fca4 	bl	80052f8 <__pow5mult>
 80049b0:	9b07      	ldr	r3, [sp, #28]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	4604      	mov	r4, r0
 80049b6:	f300 809f 	bgt.w	8004af8 <_dtoa_r+0x8f8>
 80049ba:	9b04      	ldr	r3, [sp, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 8097 	bne.w	8004af0 <_dtoa_r+0x8f0>
 80049c2:	9b05      	ldr	r3, [sp, #20]
 80049c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 8093 	bne.w	8004af4 <_dtoa_r+0x8f4>
 80049ce:	9b05      	ldr	r3, [sp, #20]
 80049d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049d4:	0d1b      	lsrs	r3, r3, #20
 80049d6:	051b      	lsls	r3, r3, #20
 80049d8:	b133      	cbz	r3, 80049e8 <_dtoa_r+0x7e8>
 80049da:	9b00      	ldr	r3, [sp, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	9b06      	ldr	r3, [sp, #24]
 80049e2:	3301      	adds	r3, #1
 80049e4:	9306      	str	r3, [sp, #24]
 80049e6:	2301      	movs	r3, #1
 80049e8:	9308      	str	r3, [sp, #32]
 80049ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 81b8 	beq.w	8004d62 <_dtoa_r+0xb62>
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049f8:	6918      	ldr	r0, [r3, #16]
 80049fa:	f000 fb79 	bl	80050f0 <__hi0bits>
 80049fe:	f1c0 0020 	rsb	r0, r0, #32
 8004a02:	9b06      	ldr	r3, [sp, #24]
 8004a04:	4418      	add	r0, r3
 8004a06:	f010 001f 	ands.w	r0, r0, #31
 8004a0a:	f000 8082 	beq.w	8004b12 <_dtoa_r+0x912>
 8004a0e:	f1c0 0320 	rsb	r3, r0, #32
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	dd73      	ble.n	8004afe <_dtoa_r+0x8fe>
 8004a16:	9b00      	ldr	r3, [sp, #0]
 8004a18:	f1c0 001c 	rsb	r0, r0, #28
 8004a1c:	4403      	add	r3, r0
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	9b06      	ldr	r3, [sp, #24]
 8004a22:	4403      	add	r3, r0
 8004a24:	4406      	add	r6, r0
 8004a26:	9306      	str	r3, [sp, #24]
 8004a28:	9b00      	ldr	r3, [sp, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dd05      	ble.n	8004a3a <_dtoa_r+0x83a>
 8004a2e:	9902      	ldr	r1, [sp, #8]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4648      	mov	r0, r9
 8004a34:	f000 fcba 	bl	80053ac <__lshift>
 8004a38:	9002      	str	r0, [sp, #8]
 8004a3a:	9b06      	ldr	r3, [sp, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	dd05      	ble.n	8004a4c <_dtoa_r+0x84c>
 8004a40:	4621      	mov	r1, r4
 8004a42:	461a      	mov	r2, r3
 8004a44:	4648      	mov	r0, r9
 8004a46:	f000 fcb1 	bl	80053ac <__lshift>
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d061      	beq.n	8004b16 <_dtoa_r+0x916>
 8004a52:	9802      	ldr	r0, [sp, #8]
 8004a54:	4621      	mov	r1, r4
 8004a56:	f000 fd15 	bl	8005484 <__mcmp>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	da5b      	bge.n	8004b16 <_dtoa_r+0x916>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9902      	ldr	r1, [sp, #8]
 8004a62:	220a      	movs	r2, #10
 8004a64:	4648      	mov	r0, r9
 8004a66:	f000 fafd 	bl	8005064 <__multadd>
 8004a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6c:	9002      	str	r0, [sp, #8]
 8004a6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8177 	beq.w	8004d66 <_dtoa_r+0xb66>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	220a      	movs	r2, #10
 8004a7e:	4648      	mov	r0, r9
 8004a80:	f000 faf0 	bl	8005064 <__multadd>
 8004a84:	f1bb 0f00 	cmp.w	fp, #0
 8004a88:	4605      	mov	r5, r0
 8004a8a:	dc6f      	bgt.n	8004b6c <_dtoa_r+0x96c>
 8004a8c:	9b07      	ldr	r3, [sp, #28]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	dc49      	bgt.n	8004b26 <_dtoa_r+0x926>
 8004a92:	e06b      	b.n	8004b6c <_dtoa_r+0x96c>
 8004a94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004a9a:	e73c      	b.n	8004916 <_dtoa_r+0x716>
 8004a9c:	3fe00000 	.word	0x3fe00000
 8004aa0:	40240000 	.word	0x40240000
 8004aa4:	9b03      	ldr	r3, [sp, #12]
 8004aa6:	1e5c      	subs	r4, r3, #1
 8004aa8:	9b08      	ldr	r3, [sp, #32]
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	db09      	blt.n	8004ac2 <_dtoa_r+0x8c2>
 8004aae:	1b1c      	subs	r4, r3, r4
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f6bf af30 	bge.w	8004918 <_dtoa_r+0x718>
 8004ab8:	9b00      	ldr	r3, [sp, #0]
 8004aba:	9a03      	ldr	r2, [sp, #12]
 8004abc:	1a9e      	subs	r6, r3, r2
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e72b      	b.n	800491a <_dtoa_r+0x71a>
 8004ac2:	9b08      	ldr	r3, [sp, #32]
 8004ac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004ac6:	9408      	str	r4, [sp, #32]
 8004ac8:	1ae3      	subs	r3, r4, r3
 8004aca:	441a      	add	r2, r3
 8004acc:	9e00      	ldr	r6, [sp, #0]
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	920d      	str	r2, [sp, #52]	@ 0x34
 8004ad2:	2400      	movs	r4, #0
 8004ad4:	e721      	b.n	800491a <_dtoa_r+0x71a>
 8004ad6:	9c08      	ldr	r4, [sp, #32]
 8004ad8:	9e00      	ldr	r6, [sp, #0]
 8004ada:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004adc:	e728      	b.n	8004930 <_dtoa_r+0x730>
 8004ade:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004ae2:	e751      	b.n	8004988 <_dtoa_r+0x788>
 8004ae4:	9a08      	ldr	r2, [sp, #32]
 8004ae6:	9902      	ldr	r1, [sp, #8]
 8004ae8:	e750      	b.n	800498c <_dtoa_r+0x78c>
 8004aea:	f8cd 8008 	str.w	r8, [sp, #8]
 8004aee:	e751      	b.n	8004994 <_dtoa_r+0x794>
 8004af0:	2300      	movs	r3, #0
 8004af2:	e779      	b.n	80049e8 <_dtoa_r+0x7e8>
 8004af4:	9b04      	ldr	r3, [sp, #16]
 8004af6:	e777      	b.n	80049e8 <_dtoa_r+0x7e8>
 8004af8:	2300      	movs	r3, #0
 8004afa:	9308      	str	r3, [sp, #32]
 8004afc:	e779      	b.n	80049f2 <_dtoa_r+0x7f2>
 8004afe:	d093      	beq.n	8004a28 <_dtoa_r+0x828>
 8004b00:	9a00      	ldr	r2, [sp, #0]
 8004b02:	331c      	adds	r3, #28
 8004b04:	441a      	add	r2, r3
 8004b06:	9200      	str	r2, [sp, #0]
 8004b08:	9a06      	ldr	r2, [sp, #24]
 8004b0a:	441a      	add	r2, r3
 8004b0c:	441e      	add	r6, r3
 8004b0e:	9206      	str	r2, [sp, #24]
 8004b10:	e78a      	b.n	8004a28 <_dtoa_r+0x828>
 8004b12:	4603      	mov	r3, r0
 8004b14:	e7f4      	b.n	8004b00 <_dtoa_r+0x900>
 8004b16:	9b03      	ldr	r3, [sp, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	46b8      	mov	r8, r7
 8004b1c:	dc20      	bgt.n	8004b60 <_dtoa_r+0x960>
 8004b1e:	469b      	mov	fp, r3
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	dd1e      	ble.n	8004b64 <_dtoa_r+0x964>
 8004b26:	f1bb 0f00 	cmp.w	fp, #0
 8004b2a:	f47f adb1 	bne.w	8004690 <_dtoa_r+0x490>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	465b      	mov	r3, fp
 8004b32:	2205      	movs	r2, #5
 8004b34:	4648      	mov	r0, r9
 8004b36:	f000 fa95 	bl	8005064 <__multadd>
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	9802      	ldr	r0, [sp, #8]
 8004b40:	f000 fca0 	bl	8005484 <__mcmp>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	f77f ada3 	ble.w	8004690 <_dtoa_r+0x490>
 8004b4a:	4656      	mov	r6, sl
 8004b4c:	2331      	movs	r3, #49	@ 0x31
 8004b4e:	f806 3b01 	strb.w	r3, [r6], #1
 8004b52:	f108 0801 	add.w	r8, r8, #1
 8004b56:	e59f      	b.n	8004698 <_dtoa_r+0x498>
 8004b58:	9c03      	ldr	r4, [sp, #12]
 8004b5a:	46b8      	mov	r8, r7
 8004b5c:	4625      	mov	r5, r4
 8004b5e:	e7f4      	b.n	8004b4a <_dtoa_r+0x94a>
 8004b60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8101 	beq.w	8004d6e <_dtoa_r+0xb6e>
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	dd05      	ble.n	8004b7c <_dtoa_r+0x97c>
 8004b70:	4629      	mov	r1, r5
 8004b72:	4632      	mov	r2, r6
 8004b74:	4648      	mov	r0, r9
 8004b76:	f000 fc19 	bl	80053ac <__lshift>
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	9b08      	ldr	r3, [sp, #32]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d05c      	beq.n	8004c3c <_dtoa_r+0xa3c>
 8004b82:	6869      	ldr	r1, [r5, #4]
 8004b84:	4648      	mov	r0, r9
 8004b86:	f000 fa0b 	bl	8004fa0 <_Balloc>
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	b928      	cbnz	r0, 8004b9a <_dtoa_r+0x99a>
 8004b8e:	4b82      	ldr	r3, [pc, #520]	@ (8004d98 <_dtoa_r+0xb98>)
 8004b90:	4602      	mov	r2, r0
 8004b92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004b96:	f7ff bb4a 	b.w	800422e <_dtoa_r+0x2e>
 8004b9a:	692a      	ldr	r2, [r5, #16]
 8004b9c:	3202      	adds	r2, #2
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	f105 010c 	add.w	r1, r5, #12
 8004ba4:	300c      	adds	r0, #12
 8004ba6:	f7ff fa94 	bl	80040d2 <memcpy>
 8004baa:	2201      	movs	r2, #1
 8004bac:	4631      	mov	r1, r6
 8004bae:	4648      	mov	r0, r9
 8004bb0:	f000 fbfc 	bl	80053ac <__lshift>
 8004bb4:	f10a 0301 	add.w	r3, sl, #1
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	eb0a 030b 	add.w	r3, sl, fp
 8004bbe:	9308      	str	r3, [sp, #32]
 8004bc0:	9b04      	ldr	r3, [sp, #16]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	462f      	mov	r7, r5
 8004bc8:	9306      	str	r3, [sp, #24]
 8004bca:	4605      	mov	r5, r0
 8004bcc:	9b00      	ldr	r3, [sp, #0]
 8004bce:	9802      	ldr	r0, [sp, #8]
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8004bd6:	f7ff fa8a 	bl	80040ee <quorem>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	3330      	adds	r3, #48	@ 0x30
 8004bde:	9003      	str	r0, [sp, #12]
 8004be0:	4639      	mov	r1, r7
 8004be2:	9802      	ldr	r0, [sp, #8]
 8004be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be6:	f000 fc4d 	bl	8005484 <__mcmp>
 8004bea:	462a      	mov	r2, r5
 8004bec:	9004      	str	r0, [sp, #16]
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4648      	mov	r0, r9
 8004bf2:	f000 fc63 	bl	80054bc <__mdiff>
 8004bf6:	68c2      	ldr	r2, [r0, #12]
 8004bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	bb02      	cbnz	r2, 8004c40 <_dtoa_r+0xa40>
 8004bfe:	4601      	mov	r1, r0
 8004c00:	9802      	ldr	r0, [sp, #8]
 8004c02:	f000 fc3f 	bl	8005484 <__mcmp>
 8004c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4648      	mov	r0, r9
 8004c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c12:	f000 fa05 	bl	8005020 <_Bfree>
 8004c16:	9b07      	ldr	r3, [sp, #28]
 8004c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c1a:	9e00      	ldr	r6, [sp, #0]
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	9b06      	ldr	r3, [sp, #24]
 8004c22:	4319      	orrs	r1, r3
 8004c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c26:	d10d      	bne.n	8004c44 <_dtoa_r+0xa44>
 8004c28:	2b39      	cmp	r3, #57	@ 0x39
 8004c2a:	d027      	beq.n	8004c7c <_dtoa_r+0xa7c>
 8004c2c:	9a04      	ldr	r2, [sp, #16]
 8004c2e:	2a00      	cmp	r2, #0
 8004c30:	dd01      	ble.n	8004c36 <_dtoa_r+0xa36>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	3331      	adds	r3, #49	@ 0x31
 8004c36:	f88b 3000 	strb.w	r3, [fp]
 8004c3a:	e52e      	b.n	800469a <_dtoa_r+0x49a>
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	e7b9      	b.n	8004bb4 <_dtoa_r+0x9b4>
 8004c40:	2201      	movs	r2, #1
 8004c42:	e7e2      	b.n	8004c0a <_dtoa_r+0xa0a>
 8004c44:	9904      	ldr	r1, [sp, #16]
 8004c46:	2900      	cmp	r1, #0
 8004c48:	db04      	blt.n	8004c54 <_dtoa_r+0xa54>
 8004c4a:	9807      	ldr	r0, [sp, #28]
 8004c4c:	4301      	orrs	r1, r0
 8004c4e:	9806      	ldr	r0, [sp, #24]
 8004c50:	4301      	orrs	r1, r0
 8004c52:	d120      	bne.n	8004c96 <_dtoa_r+0xa96>
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	ddee      	ble.n	8004c36 <_dtoa_r+0xa36>
 8004c58:	9902      	ldr	r1, [sp, #8]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4648      	mov	r0, r9
 8004c60:	f000 fba4 	bl	80053ac <__lshift>
 8004c64:	4621      	mov	r1, r4
 8004c66:	9002      	str	r0, [sp, #8]
 8004c68:	f000 fc0c 	bl	8005484 <__mcmp>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	9b00      	ldr	r3, [sp, #0]
 8004c70:	dc02      	bgt.n	8004c78 <_dtoa_r+0xa78>
 8004c72:	d1e0      	bne.n	8004c36 <_dtoa_r+0xa36>
 8004c74:	07da      	lsls	r2, r3, #31
 8004c76:	d5de      	bpl.n	8004c36 <_dtoa_r+0xa36>
 8004c78:	2b39      	cmp	r3, #57	@ 0x39
 8004c7a:	d1da      	bne.n	8004c32 <_dtoa_r+0xa32>
 8004c7c:	2339      	movs	r3, #57	@ 0x39
 8004c7e:	f88b 3000 	strb.w	r3, [fp]
 8004c82:	4633      	mov	r3, r6
 8004c84:	461e      	mov	r6, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c8c:	2a39      	cmp	r2, #57	@ 0x39
 8004c8e:	d04e      	beq.n	8004d2e <_dtoa_r+0xb2e>
 8004c90:	3201      	adds	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e501      	b.n	800469a <_dtoa_r+0x49a>
 8004c96:	2a00      	cmp	r2, #0
 8004c98:	dd03      	ble.n	8004ca2 <_dtoa_r+0xaa2>
 8004c9a:	2b39      	cmp	r3, #57	@ 0x39
 8004c9c:	d0ee      	beq.n	8004c7c <_dtoa_r+0xa7c>
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	e7c9      	b.n	8004c36 <_dtoa_r+0xa36>
 8004ca2:	9a00      	ldr	r2, [sp, #0]
 8004ca4:	9908      	ldr	r1, [sp, #32]
 8004ca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004caa:	428a      	cmp	r2, r1
 8004cac:	d028      	beq.n	8004d00 <_dtoa_r+0xb00>
 8004cae:	9902      	ldr	r1, [sp, #8]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	220a      	movs	r2, #10
 8004cb4:	4648      	mov	r0, r9
 8004cb6:	f000 f9d5 	bl	8005064 <__multadd>
 8004cba:	42af      	cmp	r7, r5
 8004cbc:	9002      	str	r0, [sp, #8]
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	f04f 020a 	mov.w	r2, #10
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	4648      	mov	r0, r9
 8004cca:	d107      	bne.n	8004cdc <_dtoa_r+0xadc>
 8004ccc:	f000 f9ca 	bl	8005064 <__multadd>
 8004cd0:	4607      	mov	r7, r0
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	9b00      	ldr	r3, [sp, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	e777      	b.n	8004bcc <_dtoa_r+0x9cc>
 8004cdc:	f000 f9c2 	bl	8005064 <__multadd>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	220a      	movs	r2, #10
 8004ce8:	4648      	mov	r0, r9
 8004cea:	f000 f9bb 	bl	8005064 <__multadd>
 8004cee:	4605      	mov	r5, r0
 8004cf0:	e7f0      	b.n	8004cd4 <_dtoa_r+0xad4>
 8004cf2:	f1bb 0f00 	cmp.w	fp, #0
 8004cf6:	bfcc      	ite	gt
 8004cf8:	465e      	movgt	r6, fp
 8004cfa:	2601      	movle	r6, #1
 8004cfc:	4456      	add	r6, sl
 8004cfe:	2700      	movs	r7, #0
 8004d00:	9902      	ldr	r1, [sp, #8]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4648      	mov	r0, r9
 8004d08:	f000 fb50 	bl	80053ac <__lshift>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	9002      	str	r0, [sp, #8]
 8004d10:	f000 fbb8 	bl	8005484 <__mcmp>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	dcb4      	bgt.n	8004c82 <_dtoa_r+0xa82>
 8004d18:	d102      	bne.n	8004d20 <_dtoa_r+0xb20>
 8004d1a:	9b00      	ldr	r3, [sp, #0]
 8004d1c:	07db      	lsls	r3, r3, #31
 8004d1e:	d4b0      	bmi.n	8004c82 <_dtoa_r+0xa82>
 8004d20:	4633      	mov	r3, r6
 8004d22:	461e      	mov	r6, r3
 8004d24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d28:	2a30      	cmp	r2, #48	@ 0x30
 8004d2a:	d0fa      	beq.n	8004d22 <_dtoa_r+0xb22>
 8004d2c:	e4b5      	b.n	800469a <_dtoa_r+0x49a>
 8004d2e:	459a      	cmp	sl, r3
 8004d30:	d1a8      	bne.n	8004c84 <_dtoa_r+0xa84>
 8004d32:	2331      	movs	r3, #49	@ 0x31
 8004d34:	f108 0801 	add.w	r8, r8, #1
 8004d38:	f88a 3000 	strb.w	r3, [sl]
 8004d3c:	e4ad      	b.n	800469a <_dtoa_r+0x49a>
 8004d3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004d9c <_dtoa_r+0xb9c>
 8004d44:	b11b      	cbz	r3, 8004d4e <_dtoa_r+0xb4e>
 8004d46:	f10a 0308 	add.w	r3, sl, #8
 8004d4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4650      	mov	r0, sl
 8004d50:	b017      	add	sp, #92	@ 0x5c
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d56:	9b07      	ldr	r3, [sp, #28]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	f77f ae2e 	ble.w	80049ba <_dtoa_r+0x7ba>
 8004d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d60:	9308      	str	r3, [sp, #32]
 8004d62:	2001      	movs	r0, #1
 8004d64:	e64d      	b.n	8004a02 <_dtoa_r+0x802>
 8004d66:	f1bb 0f00 	cmp.w	fp, #0
 8004d6a:	f77f aed9 	ble.w	8004b20 <_dtoa_r+0x920>
 8004d6e:	4656      	mov	r6, sl
 8004d70:	9802      	ldr	r0, [sp, #8]
 8004d72:	4621      	mov	r1, r4
 8004d74:	f7ff f9bb 	bl	80040ee <quorem>
 8004d78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8004d80:	eba6 020a 	sub.w	r2, r6, sl
 8004d84:	4593      	cmp	fp, r2
 8004d86:	ddb4      	ble.n	8004cf2 <_dtoa_r+0xaf2>
 8004d88:	9902      	ldr	r1, [sp, #8]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	220a      	movs	r2, #10
 8004d8e:	4648      	mov	r0, r9
 8004d90:	f000 f968 	bl	8005064 <__multadd>
 8004d94:	9002      	str	r0, [sp, #8]
 8004d96:	e7eb      	b.n	8004d70 <_dtoa_r+0xb70>
 8004d98:	080061ff 	.word	0x080061ff
 8004d9c:	08006183 	.word	0x08006183

08004da0 <_free_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4605      	mov	r5, r0
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d041      	beq.n	8004e2c <_free_r+0x8c>
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f0c      	subs	r4, r1, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfb8      	it	lt
 8004db2:	18e4      	addlt	r4, r4, r3
 8004db4:	f000 f8e8 	bl	8004f88 <__malloc_lock>
 8004db8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e30 <_free_r+0x90>)
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	b933      	cbnz	r3, 8004dcc <_free_r+0x2c>
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	6014      	str	r4, [r2, #0]
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dc8:	f000 b8e4 	b.w	8004f94 <__malloc_unlock>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d908      	bls.n	8004de2 <_free_r+0x42>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	1821      	adds	r1, r4, r0
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	bf01      	itttt	eq
 8004dd8:	6819      	ldreq	r1, [r3, #0]
 8004dda:	685b      	ldreq	r3, [r3, #4]
 8004ddc:	1809      	addeq	r1, r1, r0
 8004dde:	6021      	streq	r1, [r4, #0]
 8004de0:	e7ed      	b.n	8004dbe <_free_r+0x1e>
 8004de2:	461a      	mov	r2, r3
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b10b      	cbz	r3, 8004dec <_free_r+0x4c>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d9fa      	bls.n	8004de2 <_free_r+0x42>
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	1850      	adds	r0, r2, r1
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d10b      	bne.n	8004e0c <_free_r+0x6c>
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	4401      	add	r1, r0
 8004df8:	1850      	adds	r0, r2, r1
 8004dfa:	4283      	cmp	r3, r0
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	d1e0      	bne.n	8004dc2 <_free_r+0x22>
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	4408      	add	r0, r1
 8004e08:	6010      	str	r0, [r2, #0]
 8004e0a:	e7da      	b.n	8004dc2 <_free_r+0x22>
 8004e0c:	d902      	bls.n	8004e14 <_free_r+0x74>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	e7d6      	b.n	8004dc2 <_free_r+0x22>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	1821      	adds	r1, r4, r0
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf04      	itt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	bf04      	itt	eq
 8004e24:	1809      	addeq	r1, r1, r0
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	6054      	str	r4, [r2, #4]
 8004e2a:	e7ca      	b.n	8004dc2 <_free_r+0x22>
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000838 	.word	0x20000838

08004e34 <malloc>:
 8004e34:	4b02      	ldr	r3, [pc, #8]	@ (8004e40 <malloc+0xc>)
 8004e36:	4601      	mov	r1, r0
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	f000 b825 	b.w	8004e88 <_malloc_r>
 8004e3e:	bf00      	nop
 8004e40:	20000010 	.word	0x20000010

08004e44 <sbrk_aligned>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4e0f      	ldr	r6, [pc, #60]	@ (8004e84 <sbrk_aligned+0x40>)
 8004e48:	460c      	mov	r4, r1
 8004e4a:	6831      	ldr	r1, [r6, #0]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b911      	cbnz	r1, 8004e56 <sbrk_aligned+0x12>
 8004e50:	f000 ff58 	bl	8005d04 <_sbrk_r>
 8004e54:	6030      	str	r0, [r6, #0]
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 ff53 	bl	8005d04 <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d103      	bne.n	8004e6a <sbrk_aligned+0x26>
 8004e62:	f04f 34ff 	mov.w	r4, #4294967295
 8004e66:	4620      	mov	r0, r4
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	1cc4      	adds	r4, r0, #3
 8004e6c:	f024 0403 	bic.w	r4, r4, #3
 8004e70:	42a0      	cmp	r0, r4
 8004e72:	d0f8      	beq.n	8004e66 <sbrk_aligned+0x22>
 8004e74:	1a21      	subs	r1, r4, r0
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 ff44 	bl	8005d04 <_sbrk_r>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d1f2      	bne.n	8004e66 <sbrk_aligned+0x22>
 8004e80:	e7ef      	b.n	8004e62 <sbrk_aligned+0x1e>
 8004e82:	bf00      	nop
 8004e84:	20000834 	.word	0x20000834

08004e88 <_malloc_r>:
 8004e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	1ccd      	adds	r5, r1, #3
 8004e8e:	f025 0503 	bic.w	r5, r5, #3
 8004e92:	3508      	adds	r5, #8
 8004e94:	2d0c      	cmp	r5, #12
 8004e96:	bf38      	it	cc
 8004e98:	250c      	movcc	r5, #12
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	db01      	blt.n	8004ea4 <_malloc_r+0x1c>
 8004ea0:	42a9      	cmp	r1, r5
 8004ea2:	d904      	bls.n	8004eae <_malloc_r+0x26>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f84 <_malloc_r+0xfc>
 8004eb2:	f000 f869 	bl	8004f88 <__malloc_lock>
 8004eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eba:	461c      	mov	r4, r3
 8004ebc:	bb44      	cbnz	r4, 8004f10 <_malloc_r+0x88>
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7ff ffbf 	bl	8004e44 <sbrk_aligned>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	4604      	mov	r4, r0
 8004eca:	d158      	bne.n	8004f7e <_malloc_r+0xf6>
 8004ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed0:	4627      	mov	r7, r4
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	d143      	bne.n	8004f5e <_malloc_r+0xd6>
 8004ed6:	2c00      	cmp	r4, #0
 8004ed8:	d04b      	beq.n	8004f72 <_malloc_r+0xea>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4639      	mov	r1, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	eb04 0903 	add.w	r9, r4, r3
 8004ee4:	f000 ff0e 	bl	8005d04 <_sbrk_r>
 8004ee8:	4581      	cmp	r9, r0
 8004eea:	d142      	bne.n	8004f72 <_malloc_r+0xea>
 8004eec:	6821      	ldr	r1, [r4, #0]
 8004eee:	1a6d      	subs	r5, r5, r1
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff ffa6 	bl	8004e44 <sbrk_aligned>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d03a      	beq.n	8004f72 <_malloc_r+0xea>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	442b      	add	r3, r5
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	f8d8 3000 	ldr.w	r3, [r8]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	bb62      	cbnz	r2, 8004f64 <_malloc_r+0xdc>
 8004f0a:	f8c8 7000 	str.w	r7, [r8]
 8004f0e:	e00f      	b.n	8004f30 <_malloc_r+0xa8>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	1b52      	subs	r2, r2, r5
 8004f14:	d420      	bmi.n	8004f58 <_malloc_r+0xd0>
 8004f16:	2a0b      	cmp	r2, #11
 8004f18:	d917      	bls.n	8004f4a <_malloc_r+0xc2>
 8004f1a:	1961      	adds	r1, r4, r5
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	6025      	str	r5, [r4, #0]
 8004f20:	bf18      	it	ne
 8004f22:	6059      	strne	r1, [r3, #4]
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	bf08      	it	eq
 8004f28:	f8c8 1000 	streq.w	r1, [r8]
 8004f2c:	5162      	str	r2, [r4, r5]
 8004f2e:	604b      	str	r3, [r1, #4]
 8004f30:	4630      	mov	r0, r6
 8004f32:	f000 f82f 	bl	8004f94 <__malloc_unlock>
 8004f36:	f104 000b 	add.w	r0, r4, #11
 8004f3a:	1d23      	adds	r3, r4, #4
 8004f3c:	f020 0007 	bic.w	r0, r0, #7
 8004f40:	1ac2      	subs	r2, r0, r3
 8004f42:	bf1c      	itt	ne
 8004f44:	1a1b      	subne	r3, r3, r0
 8004f46:	50a3      	strne	r3, [r4, r2]
 8004f48:	e7af      	b.n	8004eaa <_malloc_r+0x22>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	bf0c      	ite	eq
 8004f50:	f8c8 2000 	streq.w	r2, [r8]
 8004f54:	605a      	strne	r2, [r3, #4]
 8004f56:	e7eb      	b.n	8004f30 <_malloc_r+0xa8>
 8004f58:	4623      	mov	r3, r4
 8004f5a:	6864      	ldr	r4, [r4, #4]
 8004f5c:	e7ae      	b.n	8004ebc <_malloc_r+0x34>
 8004f5e:	463c      	mov	r4, r7
 8004f60:	687f      	ldr	r7, [r7, #4]
 8004f62:	e7b6      	b.n	8004ed2 <_malloc_r+0x4a>
 8004f64:	461a      	mov	r2, r3
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d1fb      	bne.n	8004f64 <_malloc_r+0xdc>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6053      	str	r3, [r2, #4]
 8004f70:	e7de      	b.n	8004f30 <_malloc_r+0xa8>
 8004f72:	230c      	movs	r3, #12
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f80c 	bl	8004f94 <__malloc_unlock>
 8004f7c:	e794      	b.n	8004ea8 <_malloc_r+0x20>
 8004f7e:	6005      	str	r5, [r0, #0]
 8004f80:	e7d6      	b.n	8004f30 <_malloc_r+0xa8>
 8004f82:	bf00      	nop
 8004f84:	20000838 	.word	0x20000838

08004f88 <__malloc_lock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	@ (8004f90 <__malloc_lock+0x8>)
 8004f8a:	f7ff b8a0 	b.w	80040ce <__retarget_lock_acquire_recursive>
 8004f8e:	bf00      	nop
 8004f90:	20000830 	.word	0x20000830

08004f94 <__malloc_unlock>:
 8004f94:	4801      	ldr	r0, [pc, #4]	@ (8004f9c <__malloc_unlock+0x8>)
 8004f96:	f7ff b89b 	b.w	80040d0 <__retarget_lock_release_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	20000830 	.word	0x20000830

08004fa0 <_Balloc>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	69c6      	ldr	r6, [r0, #28]
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	b976      	cbnz	r6, 8004fc8 <_Balloc+0x28>
 8004faa:	2010      	movs	r0, #16
 8004fac:	f7ff ff42 	bl	8004e34 <malloc>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	61e0      	str	r0, [r4, #28]
 8004fb4:	b920      	cbnz	r0, 8004fc0 <_Balloc+0x20>
 8004fb6:	4b18      	ldr	r3, [pc, #96]	@ (8005018 <_Balloc+0x78>)
 8004fb8:	4818      	ldr	r0, [pc, #96]	@ (800501c <_Balloc+0x7c>)
 8004fba:	216b      	movs	r1, #107	@ 0x6b
 8004fbc:	f000 feb2 	bl	8005d24 <__assert_func>
 8004fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fc4:	6006      	str	r6, [r0, #0]
 8004fc6:	60c6      	str	r6, [r0, #12]
 8004fc8:	69e6      	ldr	r6, [r4, #28]
 8004fca:	68f3      	ldr	r3, [r6, #12]
 8004fcc:	b183      	cbz	r3, 8004ff0 <_Balloc+0x50>
 8004fce:	69e3      	ldr	r3, [r4, #28]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fd6:	b9b8      	cbnz	r0, 8005008 <_Balloc+0x68>
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f605 	lsl.w	r6, r1, r5
 8004fde:	1d72      	adds	r2, r6, #5
 8004fe0:	0092      	lsls	r2, r2, #2
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 febc 	bl	8005d60 <_calloc_r>
 8004fe8:	b160      	cbz	r0, 8005004 <_Balloc+0x64>
 8004fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fee:	e00e      	b.n	800500e <_Balloc+0x6e>
 8004ff0:	2221      	movs	r2, #33	@ 0x21
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 feb3 	bl	8005d60 <_calloc_r>
 8004ffa:	69e3      	ldr	r3, [r4, #28]
 8004ffc:	60f0      	str	r0, [r6, #12]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e4      	bne.n	8004fce <_Balloc+0x2e>
 8005004:	2000      	movs	r0, #0
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	6802      	ldr	r2, [r0, #0]
 800500a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800500e:	2300      	movs	r3, #0
 8005010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005014:	e7f7      	b.n	8005006 <_Balloc+0x66>
 8005016:	bf00      	nop
 8005018:	08006190 	.word	0x08006190
 800501c:	08006210 	.word	0x08006210

08005020 <_Bfree>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	69c6      	ldr	r6, [r0, #28]
 8005024:	4605      	mov	r5, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b976      	cbnz	r6, 8005048 <_Bfree+0x28>
 800502a:	2010      	movs	r0, #16
 800502c:	f7ff ff02 	bl	8004e34 <malloc>
 8005030:	4602      	mov	r2, r0
 8005032:	61e8      	str	r0, [r5, #28]
 8005034:	b920      	cbnz	r0, 8005040 <_Bfree+0x20>
 8005036:	4b09      	ldr	r3, [pc, #36]	@ (800505c <_Bfree+0x3c>)
 8005038:	4809      	ldr	r0, [pc, #36]	@ (8005060 <_Bfree+0x40>)
 800503a:	218f      	movs	r1, #143	@ 0x8f
 800503c:	f000 fe72 	bl	8005d24 <__assert_func>
 8005040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005044:	6006      	str	r6, [r0, #0]
 8005046:	60c6      	str	r6, [r0, #12]
 8005048:	b13c      	cbz	r4, 800505a <_Bfree+0x3a>
 800504a:	69eb      	ldr	r3, [r5, #28]
 800504c:	6862      	ldr	r2, [r4, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005054:	6021      	str	r1, [r4, #0]
 8005056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	08006190 	.word	0x08006190
 8005060:	08006210 	.word	0x08006210

08005064 <__multadd>:
 8005064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005068:	690d      	ldr	r5, [r1, #16]
 800506a:	4607      	mov	r7, r0
 800506c:	460c      	mov	r4, r1
 800506e:	461e      	mov	r6, r3
 8005070:	f101 0c14 	add.w	ip, r1, #20
 8005074:	2000      	movs	r0, #0
 8005076:	f8dc 3000 	ldr.w	r3, [ip]
 800507a:	b299      	uxth	r1, r3
 800507c:	fb02 6101 	mla	r1, r2, r1, r6
 8005080:	0c1e      	lsrs	r6, r3, #16
 8005082:	0c0b      	lsrs	r3, r1, #16
 8005084:	fb02 3306 	mla	r3, r2, r6, r3
 8005088:	b289      	uxth	r1, r1
 800508a:	3001      	adds	r0, #1
 800508c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005090:	4285      	cmp	r5, r0
 8005092:	f84c 1b04 	str.w	r1, [ip], #4
 8005096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800509a:	dcec      	bgt.n	8005076 <__multadd+0x12>
 800509c:	b30e      	cbz	r6, 80050e2 <__multadd+0x7e>
 800509e:	68a3      	ldr	r3, [r4, #8]
 80050a0:	42ab      	cmp	r3, r5
 80050a2:	dc19      	bgt.n	80050d8 <__multadd+0x74>
 80050a4:	6861      	ldr	r1, [r4, #4]
 80050a6:	4638      	mov	r0, r7
 80050a8:	3101      	adds	r1, #1
 80050aa:	f7ff ff79 	bl	8004fa0 <_Balloc>
 80050ae:	4680      	mov	r8, r0
 80050b0:	b928      	cbnz	r0, 80050be <__multadd+0x5a>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <__multadd+0x84>)
 80050b6:	480d      	ldr	r0, [pc, #52]	@ (80050ec <__multadd+0x88>)
 80050b8:	21ba      	movs	r1, #186	@ 0xba
 80050ba:	f000 fe33 	bl	8005d24 <__assert_func>
 80050be:	6922      	ldr	r2, [r4, #16]
 80050c0:	3202      	adds	r2, #2
 80050c2:	f104 010c 	add.w	r1, r4, #12
 80050c6:	0092      	lsls	r2, r2, #2
 80050c8:	300c      	adds	r0, #12
 80050ca:	f7ff f802 	bl	80040d2 <memcpy>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4638      	mov	r0, r7
 80050d2:	f7ff ffa5 	bl	8005020 <_Bfree>
 80050d6:	4644      	mov	r4, r8
 80050d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050dc:	3501      	adds	r5, #1
 80050de:	615e      	str	r6, [r3, #20]
 80050e0:	6125      	str	r5, [r4, #16]
 80050e2:	4620      	mov	r0, r4
 80050e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e8:	080061ff 	.word	0x080061ff
 80050ec:	08006210 	.word	0x08006210

080050f0 <__hi0bits>:
 80050f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80050f4:	4603      	mov	r3, r0
 80050f6:	bf36      	itet	cc
 80050f8:	0403      	lslcc	r3, r0, #16
 80050fa:	2000      	movcs	r0, #0
 80050fc:	2010      	movcc	r0, #16
 80050fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005102:	bf3c      	itt	cc
 8005104:	021b      	lslcc	r3, r3, #8
 8005106:	3008      	addcc	r0, #8
 8005108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800510c:	bf3c      	itt	cc
 800510e:	011b      	lslcc	r3, r3, #4
 8005110:	3004      	addcc	r0, #4
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005116:	bf3c      	itt	cc
 8005118:	009b      	lslcc	r3, r3, #2
 800511a:	3002      	addcc	r0, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	db05      	blt.n	800512c <__hi0bits+0x3c>
 8005120:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005124:	f100 0001 	add.w	r0, r0, #1
 8005128:	bf08      	it	eq
 800512a:	2020      	moveq	r0, #32
 800512c:	4770      	bx	lr

0800512e <__lo0bits>:
 800512e:	6803      	ldr	r3, [r0, #0]
 8005130:	4602      	mov	r2, r0
 8005132:	f013 0007 	ands.w	r0, r3, #7
 8005136:	d00b      	beq.n	8005150 <__lo0bits+0x22>
 8005138:	07d9      	lsls	r1, r3, #31
 800513a:	d421      	bmi.n	8005180 <__lo0bits+0x52>
 800513c:	0798      	lsls	r0, r3, #30
 800513e:	bf49      	itett	mi
 8005140:	085b      	lsrmi	r3, r3, #1
 8005142:	089b      	lsrpl	r3, r3, #2
 8005144:	2001      	movmi	r0, #1
 8005146:	6013      	strmi	r3, [r2, #0]
 8005148:	bf5c      	itt	pl
 800514a:	6013      	strpl	r3, [r2, #0]
 800514c:	2002      	movpl	r0, #2
 800514e:	4770      	bx	lr
 8005150:	b299      	uxth	r1, r3
 8005152:	b909      	cbnz	r1, 8005158 <__lo0bits+0x2a>
 8005154:	0c1b      	lsrs	r3, r3, #16
 8005156:	2010      	movs	r0, #16
 8005158:	b2d9      	uxtb	r1, r3
 800515a:	b909      	cbnz	r1, 8005160 <__lo0bits+0x32>
 800515c:	3008      	adds	r0, #8
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	0719      	lsls	r1, r3, #28
 8005162:	bf04      	itt	eq
 8005164:	091b      	lsreq	r3, r3, #4
 8005166:	3004      	addeq	r0, #4
 8005168:	0799      	lsls	r1, r3, #30
 800516a:	bf04      	itt	eq
 800516c:	089b      	lsreq	r3, r3, #2
 800516e:	3002      	addeq	r0, #2
 8005170:	07d9      	lsls	r1, r3, #31
 8005172:	d403      	bmi.n	800517c <__lo0bits+0x4e>
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	f100 0001 	add.w	r0, r0, #1
 800517a:	d003      	beq.n	8005184 <__lo0bits+0x56>
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4770      	bx	lr
 8005180:	2000      	movs	r0, #0
 8005182:	4770      	bx	lr
 8005184:	2020      	movs	r0, #32
 8005186:	4770      	bx	lr

08005188 <__i2b>:
 8005188:	b510      	push	{r4, lr}
 800518a:	460c      	mov	r4, r1
 800518c:	2101      	movs	r1, #1
 800518e:	f7ff ff07 	bl	8004fa0 <_Balloc>
 8005192:	4602      	mov	r2, r0
 8005194:	b928      	cbnz	r0, 80051a2 <__i2b+0x1a>
 8005196:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <__i2b+0x24>)
 8005198:	4805      	ldr	r0, [pc, #20]	@ (80051b0 <__i2b+0x28>)
 800519a:	f240 1145 	movw	r1, #325	@ 0x145
 800519e:	f000 fdc1 	bl	8005d24 <__assert_func>
 80051a2:	2301      	movs	r3, #1
 80051a4:	6144      	str	r4, [r0, #20]
 80051a6:	6103      	str	r3, [r0, #16]
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	080061ff 	.word	0x080061ff
 80051b0:	08006210 	.word	0x08006210

080051b4 <__multiply>:
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	4617      	mov	r7, r2
 80051ba:	690a      	ldr	r2, [r1, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bfa8      	it	ge
 80051c2:	463b      	movge	r3, r7
 80051c4:	4689      	mov	r9, r1
 80051c6:	bfa4      	itt	ge
 80051c8:	460f      	movge	r7, r1
 80051ca:	4699      	movge	r9, r3
 80051cc:	693d      	ldr	r5, [r7, #16]
 80051ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	eb05 060a 	add.w	r6, r5, sl
 80051da:	42b3      	cmp	r3, r6
 80051dc:	b085      	sub	sp, #20
 80051de:	bfb8      	it	lt
 80051e0:	3101      	addlt	r1, #1
 80051e2:	f7ff fedd 	bl	8004fa0 <_Balloc>
 80051e6:	b930      	cbnz	r0, 80051f6 <__multiply+0x42>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b41      	ldr	r3, [pc, #260]	@ (80052f0 <__multiply+0x13c>)
 80051ec:	4841      	ldr	r0, [pc, #260]	@ (80052f4 <__multiply+0x140>)
 80051ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80051f2:	f000 fd97 	bl	8005d24 <__assert_func>
 80051f6:	f100 0414 	add.w	r4, r0, #20
 80051fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80051fe:	4623      	mov	r3, r4
 8005200:	2200      	movs	r2, #0
 8005202:	4573      	cmp	r3, lr
 8005204:	d320      	bcc.n	8005248 <__multiply+0x94>
 8005206:	f107 0814 	add.w	r8, r7, #20
 800520a:	f109 0114 	add.w	r1, r9, #20
 800520e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005212:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005216:	9302      	str	r3, [sp, #8]
 8005218:	1beb      	subs	r3, r5, r7
 800521a:	3b15      	subs	r3, #21
 800521c:	f023 0303 	bic.w	r3, r3, #3
 8005220:	3304      	adds	r3, #4
 8005222:	3715      	adds	r7, #21
 8005224:	42bd      	cmp	r5, r7
 8005226:	bf38      	it	cc
 8005228:	2304      	movcc	r3, #4
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	9b02      	ldr	r3, [sp, #8]
 800522e:	9103      	str	r1, [sp, #12]
 8005230:	428b      	cmp	r3, r1
 8005232:	d80c      	bhi.n	800524e <__multiply+0x9a>
 8005234:	2e00      	cmp	r6, #0
 8005236:	dd03      	ble.n	8005240 <__multiply+0x8c>
 8005238:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800523c:	2b00      	cmp	r3, #0
 800523e:	d055      	beq.n	80052ec <__multiply+0x138>
 8005240:	6106      	str	r6, [r0, #16]
 8005242:	b005      	add	sp, #20
 8005244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005248:	f843 2b04 	str.w	r2, [r3], #4
 800524c:	e7d9      	b.n	8005202 <__multiply+0x4e>
 800524e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005252:	f1ba 0f00 	cmp.w	sl, #0
 8005256:	d01f      	beq.n	8005298 <__multiply+0xe4>
 8005258:	46c4      	mov	ip, r8
 800525a:	46a1      	mov	r9, r4
 800525c:	2700      	movs	r7, #0
 800525e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005262:	f8d9 3000 	ldr.w	r3, [r9]
 8005266:	fa1f fb82 	uxth.w	fp, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005270:	443b      	add	r3, r7
 8005272:	f8d9 7000 	ldr.w	r7, [r9]
 8005276:	0c12      	lsrs	r2, r2, #16
 8005278:	0c3f      	lsrs	r7, r7, #16
 800527a:	fb0a 7202 	mla	r2, sl, r2, r7
 800527e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005282:	b29b      	uxth	r3, r3
 8005284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005288:	4565      	cmp	r5, ip
 800528a:	f849 3b04 	str.w	r3, [r9], #4
 800528e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005292:	d8e4      	bhi.n	800525e <__multiply+0xaa>
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	50e7      	str	r7, [r4, r3]
 8005298:	9b03      	ldr	r3, [sp, #12]
 800529a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800529e:	3104      	adds	r1, #4
 80052a0:	f1b9 0f00 	cmp.w	r9, #0
 80052a4:	d020      	beq.n	80052e8 <__multiply+0x134>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	4647      	mov	r7, r8
 80052aa:	46a4      	mov	ip, r4
 80052ac:	f04f 0a00 	mov.w	sl, #0
 80052b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80052b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80052b8:	fb09 220b 	mla	r2, r9, fp, r2
 80052bc:	4452      	add	r2, sl
 80052be:	b29b      	uxth	r3, r3
 80052c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c4:	f84c 3b04 	str.w	r3, [ip], #4
 80052c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80052cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80052d4:	fb09 330a 	mla	r3, r9, sl, r3
 80052d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80052dc:	42bd      	cmp	r5, r7
 80052de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052e2:	d8e5      	bhi.n	80052b0 <__multiply+0xfc>
 80052e4:	9a01      	ldr	r2, [sp, #4]
 80052e6:	50a3      	str	r3, [r4, r2]
 80052e8:	3404      	adds	r4, #4
 80052ea:	e79f      	b.n	800522c <__multiply+0x78>
 80052ec:	3e01      	subs	r6, #1
 80052ee:	e7a1      	b.n	8005234 <__multiply+0x80>
 80052f0:	080061ff 	.word	0x080061ff
 80052f4:	08006210 	.word	0x08006210

080052f8 <__pow5mult>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4615      	mov	r5, r2
 80052fe:	f012 0203 	ands.w	r2, r2, #3
 8005302:	4607      	mov	r7, r0
 8005304:	460e      	mov	r6, r1
 8005306:	d007      	beq.n	8005318 <__pow5mult+0x20>
 8005308:	4c25      	ldr	r4, [pc, #148]	@ (80053a0 <__pow5mult+0xa8>)
 800530a:	3a01      	subs	r2, #1
 800530c:	2300      	movs	r3, #0
 800530e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005312:	f7ff fea7 	bl	8005064 <__multadd>
 8005316:	4606      	mov	r6, r0
 8005318:	10ad      	asrs	r5, r5, #2
 800531a:	d03d      	beq.n	8005398 <__pow5mult+0xa0>
 800531c:	69fc      	ldr	r4, [r7, #28]
 800531e:	b97c      	cbnz	r4, 8005340 <__pow5mult+0x48>
 8005320:	2010      	movs	r0, #16
 8005322:	f7ff fd87 	bl	8004e34 <malloc>
 8005326:	4602      	mov	r2, r0
 8005328:	61f8      	str	r0, [r7, #28]
 800532a:	b928      	cbnz	r0, 8005338 <__pow5mult+0x40>
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <__pow5mult+0xac>)
 800532e:	481e      	ldr	r0, [pc, #120]	@ (80053a8 <__pow5mult+0xb0>)
 8005330:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005334:	f000 fcf6 	bl	8005d24 <__assert_func>
 8005338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800533c:	6004      	str	r4, [r0, #0]
 800533e:	60c4      	str	r4, [r0, #12]
 8005340:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005348:	b94c      	cbnz	r4, 800535e <__pow5mult+0x66>
 800534a:	f240 2171 	movw	r1, #625	@ 0x271
 800534e:	4638      	mov	r0, r7
 8005350:	f7ff ff1a 	bl	8005188 <__i2b>
 8005354:	2300      	movs	r3, #0
 8005356:	f8c8 0008 	str.w	r0, [r8, #8]
 800535a:	4604      	mov	r4, r0
 800535c:	6003      	str	r3, [r0, #0]
 800535e:	f04f 0900 	mov.w	r9, #0
 8005362:	07eb      	lsls	r3, r5, #31
 8005364:	d50a      	bpl.n	800537c <__pow5mult+0x84>
 8005366:	4631      	mov	r1, r6
 8005368:	4622      	mov	r2, r4
 800536a:	4638      	mov	r0, r7
 800536c:	f7ff ff22 	bl	80051b4 <__multiply>
 8005370:	4631      	mov	r1, r6
 8005372:	4680      	mov	r8, r0
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff fe53 	bl	8005020 <_Bfree>
 800537a:	4646      	mov	r6, r8
 800537c:	106d      	asrs	r5, r5, #1
 800537e:	d00b      	beq.n	8005398 <__pow5mult+0xa0>
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	b938      	cbnz	r0, 8005394 <__pow5mult+0x9c>
 8005384:	4622      	mov	r2, r4
 8005386:	4621      	mov	r1, r4
 8005388:	4638      	mov	r0, r7
 800538a:	f7ff ff13 	bl	80051b4 <__multiply>
 800538e:	6020      	str	r0, [r4, #0]
 8005390:	f8c0 9000 	str.w	r9, [r0]
 8005394:	4604      	mov	r4, r0
 8005396:	e7e4      	b.n	8005362 <__pow5mult+0x6a>
 8005398:	4630      	mov	r0, r6
 800539a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800539e:	bf00      	nop
 80053a0:	080062c0 	.word	0x080062c0
 80053a4:	08006190 	.word	0x08006190
 80053a8:	08006210 	.word	0x08006210

080053ac <__lshift>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	6849      	ldr	r1, [r1, #4]
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	4607      	mov	r7, r0
 80053be:	4691      	mov	r9, r2
 80053c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053c4:	f108 0601 	add.w	r6, r8, #1
 80053c8:	42b3      	cmp	r3, r6
 80053ca:	db0b      	blt.n	80053e4 <__lshift+0x38>
 80053cc:	4638      	mov	r0, r7
 80053ce:	f7ff fde7 	bl	8004fa0 <_Balloc>
 80053d2:	4605      	mov	r5, r0
 80053d4:	b948      	cbnz	r0, 80053ea <__lshift+0x3e>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b28      	ldr	r3, [pc, #160]	@ (800547c <__lshift+0xd0>)
 80053da:	4829      	ldr	r0, [pc, #164]	@ (8005480 <__lshift+0xd4>)
 80053dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80053e0:	f000 fca0 	bl	8005d24 <__assert_func>
 80053e4:	3101      	adds	r1, #1
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	e7ee      	b.n	80053c8 <__lshift+0x1c>
 80053ea:	2300      	movs	r3, #0
 80053ec:	f100 0114 	add.w	r1, r0, #20
 80053f0:	f100 0210 	add.w	r2, r0, #16
 80053f4:	4618      	mov	r0, r3
 80053f6:	4553      	cmp	r3, sl
 80053f8:	db33      	blt.n	8005462 <__lshift+0xb6>
 80053fa:	6920      	ldr	r0, [r4, #16]
 80053fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005400:	f104 0314 	add.w	r3, r4, #20
 8005404:	f019 091f 	ands.w	r9, r9, #31
 8005408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800540c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005410:	d02b      	beq.n	800546a <__lshift+0xbe>
 8005412:	f1c9 0e20 	rsb	lr, r9, #32
 8005416:	468a      	mov	sl, r1
 8005418:	2200      	movs	r2, #0
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	fa00 f009 	lsl.w	r0, r0, r9
 8005420:	4310      	orrs	r0, r2
 8005422:	f84a 0b04 	str.w	r0, [sl], #4
 8005426:	f853 2b04 	ldr.w	r2, [r3], #4
 800542a:	459c      	cmp	ip, r3
 800542c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005430:	d8f3      	bhi.n	800541a <__lshift+0x6e>
 8005432:	ebac 0304 	sub.w	r3, ip, r4
 8005436:	3b15      	subs	r3, #21
 8005438:	f023 0303 	bic.w	r3, r3, #3
 800543c:	3304      	adds	r3, #4
 800543e:	f104 0015 	add.w	r0, r4, #21
 8005442:	4560      	cmp	r0, ip
 8005444:	bf88      	it	hi
 8005446:	2304      	movhi	r3, #4
 8005448:	50ca      	str	r2, [r1, r3]
 800544a:	b10a      	cbz	r2, 8005450 <__lshift+0xa4>
 800544c:	f108 0602 	add.w	r6, r8, #2
 8005450:	3e01      	subs	r6, #1
 8005452:	4638      	mov	r0, r7
 8005454:	612e      	str	r6, [r5, #16]
 8005456:	4621      	mov	r1, r4
 8005458:	f7ff fde2 	bl	8005020 <_Bfree>
 800545c:	4628      	mov	r0, r5
 800545e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005462:	f842 0f04 	str.w	r0, [r2, #4]!
 8005466:	3301      	adds	r3, #1
 8005468:	e7c5      	b.n	80053f6 <__lshift+0x4a>
 800546a:	3904      	subs	r1, #4
 800546c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005470:	f841 2f04 	str.w	r2, [r1, #4]!
 8005474:	459c      	cmp	ip, r3
 8005476:	d8f9      	bhi.n	800546c <__lshift+0xc0>
 8005478:	e7ea      	b.n	8005450 <__lshift+0xa4>
 800547a:	bf00      	nop
 800547c:	080061ff 	.word	0x080061ff
 8005480:	08006210 	.word	0x08006210

08005484 <__mcmp>:
 8005484:	690a      	ldr	r2, [r1, #16]
 8005486:	4603      	mov	r3, r0
 8005488:	6900      	ldr	r0, [r0, #16]
 800548a:	1a80      	subs	r0, r0, r2
 800548c:	b530      	push	{r4, r5, lr}
 800548e:	d10e      	bne.n	80054ae <__mcmp+0x2a>
 8005490:	3314      	adds	r3, #20
 8005492:	3114      	adds	r1, #20
 8005494:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005498:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800549c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80054a4:	4295      	cmp	r5, r2
 80054a6:	d003      	beq.n	80054b0 <__mcmp+0x2c>
 80054a8:	d205      	bcs.n	80054b6 <__mcmp+0x32>
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	bd30      	pop	{r4, r5, pc}
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d3f3      	bcc.n	800549c <__mcmp+0x18>
 80054b4:	e7fb      	b.n	80054ae <__mcmp+0x2a>
 80054b6:	2001      	movs	r0, #1
 80054b8:	e7f9      	b.n	80054ae <__mcmp+0x2a>
	...

080054bc <__mdiff>:
 80054bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	4689      	mov	r9, r1
 80054c2:	4606      	mov	r6, r0
 80054c4:	4611      	mov	r1, r2
 80054c6:	4648      	mov	r0, r9
 80054c8:	4614      	mov	r4, r2
 80054ca:	f7ff ffdb 	bl	8005484 <__mcmp>
 80054ce:	1e05      	subs	r5, r0, #0
 80054d0:	d112      	bne.n	80054f8 <__mdiff+0x3c>
 80054d2:	4629      	mov	r1, r5
 80054d4:	4630      	mov	r0, r6
 80054d6:	f7ff fd63 	bl	8004fa0 <_Balloc>
 80054da:	4602      	mov	r2, r0
 80054dc:	b928      	cbnz	r0, 80054ea <__mdiff+0x2e>
 80054de:	4b3f      	ldr	r3, [pc, #252]	@ (80055dc <__mdiff+0x120>)
 80054e0:	f240 2137 	movw	r1, #567	@ 0x237
 80054e4:	483e      	ldr	r0, [pc, #248]	@ (80055e0 <__mdiff+0x124>)
 80054e6:	f000 fc1d 	bl	8005d24 <__assert_func>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054f0:	4610      	mov	r0, r2
 80054f2:	b003      	add	sp, #12
 80054f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f8:	bfbc      	itt	lt
 80054fa:	464b      	movlt	r3, r9
 80054fc:	46a1      	movlt	r9, r4
 80054fe:	4630      	mov	r0, r6
 8005500:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005504:	bfba      	itte	lt
 8005506:	461c      	movlt	r4, r3
 8005508:	2501      	movlt	r5, #1
 800550a:	2500      	movge	r5, #0
 800550c:	f7ff fd48 	bl	8004fa0 <_Balloc>
 8005510:	4602      	mov	r2, r0
 8005512:	b918      	cbnz	r0, 800551c <__mdiff+0x60>
 8005514:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <__mdiff+0x120>)
 8005516:	f240 2145 	movw	r1, #581	@ 0x245
 800551a:	e7e3      	b.n	80054e4 <__mdiff+0x28>
 800551c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005520:	6926      	ldr	r6, [r4, #16]
 8005522:	60c5      	str	r5, [r0, #12]
 8005524:	f109 0310 	add.w	r3, r9, #16
 8005528:	f109 0514 	add.w	r5, r9, #20
 800552c:	f104 0e14 	add.w	lr, r4, #20
 8005530:	f100 0b14 	add.w	fp, r0, #20
 8005534:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005538:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	46d9      	mov	r9, fp
 8005540:	f04f 0c00 	mov.w	ip, #0
 8005544:	9b01      	ldr	r3, [sp, #4]
 8005546:	f85e 0b04 	ldr.w	r0, [lr], #4
 800554a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	fa1f f38a 	uxth.w	r3, sl
 8005554:	4619      	mov	r1, r3
 8005556:	b283      	uxth	r3, r0
 8005558:	1acb      	subs	r3, r1, r3
 800555a:	0c00      	lsrs	r0, r0, #16
 800555c:	4463      	add	r3, ip
 800555e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005562:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005566:	b29b      	uxth	r3, r3
 8005568:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800556c:	4576      	cmp	r6, lr
 800556e:	f849 3b04 	str.w	r3, [r9], #4
 8005572:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005576:	d8e5      	bhi.n	8005544 <__mdiff+0x88>
 8005578:	1b33      	subs	r3, r6, r4
 800557a:	3b15      	subs	r3, #21
 800557c:	f023 0303 	bic.w	r3, r3, #3
 8005580:	3415      	adds	r4, #21
 8005582:	3304      	adds	r3, #4
 8005584:	42a6      	cmp	r6, r4
 8005586:	bf38      	it	cc
 8005588:	2304      	movcc	r3, #4
 800558a:	441d      	add	r5, r3
 800558c:	445b      	add	r3, fp
 800558e:	461e      	mov	r6, r3
 8005590:	462c      	mov	r4, r5
 8005592:	4544      	cmp	r4, r8
 8005594:	d30e      	bcc.n	80055b4 <__mdiff+0xf8>
 8005596:	f108 0103 	add.w	r1, r8, #3
 800559a:	1b49      	subs	r1, r1, r5
 800559c:	f021 0103 	bic.w	r1, r1, #3
 80055a0:	3d03      	subs	r5, #3
 80055a2:	45a8      	cmp	r8, r5
 80055a4:	bf38      	it	cc
 80055a6:	2100      	movcc	r1, #0
 80055a8:	440b      	add	r3, r1
 80055aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80055ae:	b191      	cbz	r1, 80055d6 <__mdiff+0x11a>
 80055b0:	6117      	str	r7, [r2, #16]
 80055b2:	e79d      	b.n	80054f0 <__mdiff+0x34>
 80055b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80055b8:	46e6      	mov	lr, ip
 80055ba:	0c08      	lsrs	r0, r1, #16
 80055bc:	fa1c fc81 	uxtah	ip, ip, r1
 80055c0:	4471      	add	r1, lr
 80055c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80055c6:	b289      	uxth	r1, r1
 80055c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055cc:	f846 1b04 	str.w	r1, [r6], #4
 80055d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055d4:	e7dd      	b.n	8005592 <__mdiff+0xd6>
 80055d6:	3f01      	subs	r7, #1
 80055d8:	e7e7      	b.n	80055aa <__mdiff+0xee>
 80055da:	bf00      	nop
 80055dc:	080061ff 	.word	0x080061ff
 80055e0:	08006210 	.word	0x08006210

080055e4 <__d2b>:
 80055e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	460f      	mov	r7, r1
 80055ea:	2101      	movs	r1, #1
 80055ec:	ec59 8b10 	vmov	r8, r9, d0
 80055f0:	4616      	mov	r6, r2
 80055f2:	f7ff fcd5 	bl	8004fa0 <_Balloc>
 80055f6:	4604      	mov	r4, r0
 80055f8:	b930      	cbnz	r0, 8005608 <__d2b+0x24>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b23      	ldr	r3, [pc, #140]	@ (800568c <__d2b+0xa8>)
 80055fe:	4824      	ldr	r0, [pc, #144]	@ (8005690 <__d2b+0xac>)
 8005600:	f240 310f 	movw	r1, #783	@ 0x30f
 8005604:	f000 fb8e 	bl	8005d24 <__assert_func>
 8005608:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800560c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005610:	b10d      	cbz	r5, 8005616 <__d2b+0x32>
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	f1b8 0300 	subs.w	r3, r8, #0
 800561c:	d023      	beq.n	8005666 <__d2b+0x82>
 800561e:	4668      	mov	r0, sp
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	f7ff fd84 	bl	800512e <__lo0bits>
 8005626:	e9dd 1200 	ldrd	r1, r2, [sp]
 800562a:	b1d0      	cbz	r0, 8005662 <__d2b+0x7e>
 800562c:	f1c0 0320 	rsb	r3, r0, #32
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	430b      	orrs	r3, r1
 8005636:	40c2      	lsrs	r2, r0
 8005638:	6163      	str	r3, [r4, #20]
 800563a:	9201      	str	r2, [sp, #4]
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	61a3      	str	r3, [r4, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2201      	moveq	r2, #1
 8005646:	2202      	movne	r2, #2
 8005648:	6122      	str	r2, [r4, #16]
 800564a:	b1a5      	cbz	r5, 8005676 <__d2b+0x92>
 800564c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005650:	4405      	add	r5, r0
 8005652:	603d      	str	r5, [r7, #0]
 8005654:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005658:	6030      	str	r0, [r6, #0]
 800565a:	4620      	mov	r0, r4
 800565c:	b003      	add	sp, #12
 800565e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005662:	6161      	str	r1, [r4, #20]
 8005664:	e7ea      	b.n	800563c <__d2b+0x58>
 8005666:	a801      	add	r0, sp, #4
 8005668:	f7ff fd61 	bl	800512e <__lo0bits>
 800566c:	9b01      	ldr	r3, [sp, #4]
 800566e:	6163      	str	r3, [r4, #20]
 8005670:	3020      	adds	r0, #32
 8005672:	2201      	movs	r2, #1
 8005674:	e7e8      	b.n	8005648 <__d2b+0x64>
 8005676:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800567a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800567e:	6038      	str	r0, [r7, #0]
 8005680:	6918      	ldr	r0, [r3, #16]
 8005682:	f7ff fd35 	bl	80050f0 <__hi0bits>
 8005686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800568a:	e7e5      	b.n	8005658 <__d2b+0x74>
 800568c:	080061ff 	.word	0x080061ff
 8005690:	08006210 	.word	0x08006210

08005694 <__ssputs_r>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	688e      	ldr	r6, [r1, #8]
 800569a:	461f      	mov	r7, r3
 800569c:	42be      	cmp	r6, r7
 800569e:	680b      	ldr	r3, [r1, #0]
 80056a0:	4682      	mov	sl, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4690      	mov	r8, r2
 80056a6:	d82d      	bhi.n	8005704 <__ssputs_r+0x70>
 80056a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056b0:	d026      	beq.n	8005700 <__ssputs_r+0x6c>
 80056b2:	6965      	ldr	r5, [r4, #20]
 80056b4:	6909      	ldr	r1, [r1, #16]
 80056b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ba:	eba3 0901 	sub.w	r9, r3, r1
 80056be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c2:	1c7b      	adds	r3, r7, #1
 80056c4:	444b      	add	r3, r9
 80056c6:	106d      	asrs	r5, r5, #1
 80056c8:	429d      	cmp	r5, r3
 80056ca:	bf38      	it	cc
 80056cc:	461d      	movcc	r5, r3
 80056ce:	0553      	lsls	r3, r2, #21
 80056d0:	d527      	bpl.n	8005722 <__ssputs_r+0x8e>
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7ff fbd8 	bl	8004e88 <_malloc_r>
 80056d8:	4606      	mov	r6, r0
 80056da:	b360      	cbz	r0, 8005736 <__ssputs_r+0xa2>
 80056dc:	6921      	ldr	r1, [r4, #16]
 80056de:	464a      	mov	r2, r9
 80056e0:	f7fe fcf7 	bl	80040d2 <memcpy>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	6126      	str	r6, [r4, #16]
 80056f2:	6165      	str	r5, [r4, #20]
 80056f4:	444e      	add	r6, r9
 80056f6:	eba5 0509 	sub.w	r5, r5, r9
 80056fa:	6026      	str	r6, [r4, #0]
 80056fc:	60a5      	str	r5, [r4, #8]
 80056fe:	463e      	mov	r6, r7
 8005700:	42be      	cmp	r6, r7
 8005702:	d900      	bls.n	8005706 <__ssputs_r+0x72>
 8005704:	463e      	mov	r6, r7
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	4632      	mov	r2, r6
 800570a:	4641      	mov	r1, r8
 800570c:	f000 fabe 	bl	8005c8c <memmove>
 8005710:	68a3      	ldr	r3, [r4, #8]
 8005712:	1b9b      	subs	r3, r3, r6
 8005714:	60a3      	str	r3, [r4, #8]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	4433      	add	r3, r6
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	2000      	movs	r0, #0
 800571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005722:	462a      	mov	r2, r5
 8005724:	f000 fb42 	bl	8005dac <_realloc_r>
 8005728:	4606      	mov	r6, r0
 800572a:	2800      	cmp	r0, #0
 800572c:	d1e0      	bne.n	80056f0 <__ssputs_r+0x5c>
 800572e:	6921      	ldr	r1, [r4, #16]
 8005730:	4650      	mov	r0, sl
 8005732:	f7ff fb35 	bl	8004da0 <_free_r>
 8005736:	230c      	movs	r3, #12
 8005738:	f8ca 3000 	str.w	r3, [sl]
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	e7e9      	b.n	800571e <__ssputs_r+0x8a>
	...

0800574c <_svfiprintf_r>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	4698      	mov	r8, r3
 8005752:	898b      	ldrh	r3, [r1, #12]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	b09d      	sub	sp, #116	@ 0x74
 8005758:	4607      	mov	r7, r0
 800575a:	460d      	mov	r5, r1
 800575c:	4614      	mov	r4, r2
 800575e:	d510      	bpl.n	8005782 <_svfiprintf_r+0x36>
 8005760:	690b      	ldr	r3, [r1, #16]
 8005762:	b973      	cbnz	r3, 8005782 <_svfiprintf_r+0x36>
 8005764:	2140      	movs	r1, #64	@ 0x40
 8005766:	f7ff fb8f 	bl	8004e88 <_malloc_r>
 800576a:	6028      	str	r0, [r5, #0]
 800576c:	6128      	str	r0, [r5, #16]
 800576e:	b930      	cbnz	r0, 800577e <_svfiprintf_r+0x32>
 8005770:	230c      	movs	r3, #12
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	b01d      	add	sp, #116	@ 0x74
 800577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577e:	2340      	movs	r3, #64	@ 0x40
 8005780:	616b      	str	r3, [r5, #20]
 8005782:	2300      	movs	r3, #0
 8005784:	9309      	str	r3, [sp, #36]	@ 0x24
 8005786:	2320      	movs	r3, #32
 8005788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800578c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005790:	2330      	movs	r3, #48	@ 0x30
 8005792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005930 <_svfiprintf_r+0x1e4>
 8005796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800579a:	f04f 0901 	mov.w	r9, #1
 800579e:	4623      	mov	r3, r4
 80057a0:	469a      	mov	sl, r3
 80057a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a6:	b10a      	cbz	r2, 80057ac <_svfiprintf_r+0x60>
 80057a8:	2a25      	cmp	r2, #37	@ 0x25
 80057aa:	d1f9      	bne.n	80057a0 <_svfiprintf_r+0x54>
 80057ac:	ebba 0b04 	subs.w	fp, sl, r4
 80057b0:	d00b      	beq.n	80057ca <_svfiprintf_r+0x7e>
 80057b2:	465b      	mov	r3, fp
 80057b4:	4622      	mov	r2, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	4638      	mov	r0, r7
 80057ba:	f7ff ff6b 	bl	8005694 <__ssputs_r>
 80057be:	3001      	adds	r0, #1
 80057c0:	f000 80a7 	beq.w	8005912 <_svfiprintf_r+0x1c6>
 80057c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c6:	445a      	add	r2, fp
 80057c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80057ca:	f89a 3000 	ldrb.w	r3, [sl]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 809f 	beq.w	8005912 <_svfiprintf_r+0x1c6>
 80057d4:	2300      	movs	r3, #0
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295
 80057da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057de:	f10a 0a01 	add.w	sl, sl, #1
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	9307      	str	r3, [sp, #28]
 80057e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80057ec:	4654      	mov	r4, sl
 80057ee:	2205      	movs	r2, #5
 80057f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f4:	484e      	ldr	r0, [pc, #312]	@ (8005930 <_svfiprintf_r+0x1e4>)
 80057f6:	f7fa fceb 	bl	80001d0 <memchr>
 80057fa:	9a04      	ldr	r2, [sp, #16]
 80057fc:	b9d8      	cbnz	r0, 8005836 <_svfiprintf_r+0xea>
 80057fe:	06d0      	lsls	r0, r2, #27
 8005800:	bf44      	itt	mi
 8005802:	2320      	movmi	r3, #32
 8005804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005808:	0711      	lsls	r1, r2, #28
 800580a:	bf44      	itt	mi
 800580c:	232b      	movmi	r3, #43	@ 0x2b
 800580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005812:	f89a 3000 	ldrb.w	r3, [sl]
 8005816:	2b2a      	cmp	r3, #42	@ 0x2a
 8005818:	d015      	beq.n	8005846 <_svfiprintf_r+0xfa>
 800581a:	9a07      	ldr	r2, [sp, #28]
 800581c:	4654      	mov	r4, sl
 800581e:	2000      	movs	r0, #0
 8005820:	f04f 0c0a 	mov.w	ip, #10
 8005824:	4621      	mov	r1, r4
 8005826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582a:	3b30      	subs	r3, #48	@ 0x30
 800582c:	2b09      	cmp	r3, #9
 800582e:	d94b      	bls.n	80058c8 <_svfiprintf_r+0x17c>
 8005830:	b1b0      	cbz	r0, 8005860 <_svfiprintf_r+0x114>
 8005832:	9207      	str	r2, [sp, #28]
 8005834:	e014      	b.n	8005860 <_svfiprintf_r+0x114>
 8005836:	eba0 0308 	sub.w	r3, r0, r8
 800583a:	fa09 f303 	lsl.w	r3, r9, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	46a2      	mov	sl, r4
 8005844:	e7d2      	b.n	80057ec <_svfiprintf_r+0xa0>
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	1d19      	adds	r1, r3, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfbb      	ittet	lt
 8005852:	425b      	neglt	r3, r3
 8005854:	f042 0202 	orrlt.w	r2, r2, #2
 8005858:	9307      	strge	r3, [sp, #28]
 800585a:	9307      	strlt	r3, [sp, #28]
 800585c:	bfb8      	it	lt
 800585e:	9204      	strlt	r2, [sp, #16]
 8005860:	7823      	ldrb	r3, [r4, #0]
 8005862:	2b2e      	cmp	r3, #46	@ 0x2e
 8005864:	d10a      	bne.n	800587c <_svfiprintf_r+0x130>
 8005866:	7863      	ldrb	r3, [r4, #1]
 8005868:	2b2a      	cmp	r3, #42	@ 0x2a
 800586a:	d132      	bne.n	80058d2 <_svfiprintf_r+0x186>
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	9203      	str	r2, [sp, #12]
 8005874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005878:	3402      	adds	r4, #2
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005940 <_svfiprintf_r+0x1f4>
 8005880:	7821      	ldrb	r1, [r4, #0]
 8005882:	2203      	movs	r2, #3
 8005884:	4650      	mov	r0, sl
 8005886:	f7fa fca3 	bl	80001d0 <memchr>
 800588a:	b138      	cbz	r0, 800589c <_svfiprintf_r+0x150>
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	eba0 000a 	sub.w	r0, r0, sl
 8005892:	2240      	movs	r2, #64	@ 0x40
 8005894:	4082      	lsls	r2, r0
 8005896:	4313      	orrs	r3, r2
 8005898:	3401      	adds	r4, #1
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a0:	4824      	ldr	r0, [pc, #144]	@ (8005934 <_svfiprintf_r+0x1e8>)
 80058a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058a6:	2206      	movs	r2, #6
 80058a8:	f7fa fc92 	bl	80001d0 <memchr>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d036      	beq.n	800591e <_svfiprintf_r+0x1d2>
 80058b0:	4b21      	ldr	r3, [pc, #132]	@ (8005938 <_svfiprintf_r+0x1ec>)
 80058b2:	bb1b      	cbnz	r3, 80058fc <_svfiprintf_r+0x1b0>
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	3307      	adds	r3, #7
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	3308      	adds	r3, #8
 80058be:	9303      	str	r3, [sp, #12]
 80058c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c2:	4433      	add	r3, r6
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	e76a      	b.n	800579e <_svfiprintf_r+0x52>
 80058c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058cc:	460c      	mov	r4, r1
 80058ce:	2001      	movs	r0, #1
 80058d0:	e7a8      	b.n	8005824 <_svfiprintf_r+0xd8>
 80058d2:	2300      	movs	r3, #0
 80058d4:	3401      	adds	r4, #1
 80058d6:	9305      	str	r3, [sp, #20]
 80058d8:	4619      	mov	r1, r3
 80058da:	f04f 0c0a 	mov.w	ip, #10
 80058de:	4620      	mov	r0, r4
 80058e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e4:	3a30      	subs	r2, #48	@ 0x30
 80058e6:	2a09      	cmp	r2, #9
 80058e8:	d903      	bls.n	80058f2 <_svfiprintf_r+0x1a6>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c6      	beq.n	800587c <_svfiprintf_r+0x130>
 80058ee:	9105      	str	r1, [sp, #20]
 80058f0:	e7c4      	b.n	800587c <_svfiprintf_r+0x130>
 80058f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f6:	4604      	mov	r4, r0
 80058f8:	2301      	movs	r3, #1
 80058fa:	e7f0      	b.n	80058de <_svfiprintf_r+0x192>
 80058fc:	ab03      	add	r3, sp, #12
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	462a      	mov	r2, r5
 8005902:	4b0e      	ldr	r3, [pc, #56]	@ (800593c <_svfiprintf_r+0x1f0>)
 8005904:	a904      	add	r1, sp, #16
 8005906:	4638      	mov	r0, r7
 8005908:	f7fd fc9c 	bl	8003244 <_printf_float>
 800590c:	1c42      	adds	r2, r0, #1
 800590e:	4606      	mov	r6, r0
 8005910:	d1d6      	bne.n	80058c0 <_svfiprintf_r+0x174>
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	065b      	lsls	r3, r3, #25
 8005916:	f53f af2d 	bmi.w	8005774 <_svfiprintf_r+0x28>
 800591a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800591c:	e72c      	b.n	8005778 <_svfiprintf_r+0x2c>
 800591e:	ab03      	add	r3, sp, #12
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	462a      	mov	r2, r5
 8005924:	4b05      	ldr	r3, [pc, #20]	@ (800593c <_svfiprintf_r+0x1f0>)
 8005926:	a904      	add	r1, sp, #16
 8005928:	4638      	mov	r0, r7
 800592a:	f7fd ff23 	bl	8003774 <_printf_i>
 800592e:	e7ed      	b.n	800590c <_svfiprintf_r+0x1c0>
 8005930:	08006269 	.word	0x08006269
 8005934:	08006273 	.word	0x08006273
 8005938:	08003245 	.word	0x08003245
 800593c:	08005695 	.word	0x08005695
 8005940:	0800626f 	.word	0x0800626f

08005944 <__sfputc_r>:
 8005944:	6893      	ldr	r3, [r2, #8]
 8005946:	3b01      	subs	r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	b410      	push	{r4}
 800594c:	6093      	str	r3, [r2, #8]
 800594e:	da08      	bge.n	8005962 <__sfputc_r+0x1e>
 8005950:	6994      	ldr	r4, [r2, #24]
 8005952:	42a3      	cmp	r3, r4
 8005954:	db01      	blt.n	800595a <__sfputc_r+0x16>
 8005956:	290a      	cmp	r1, #10
 8005958:	d103      	bne.n	8005962 <__sfputc_r+0x1e>
 800595a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800595e:	f7fe bab6 	b.w	8003ece <__swbuf_r>
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	1c58      	adds	r0, r3, #1
 8005966:	6010      	str	r0, [r2, #0]
 8005968:	7019      	strb	r1, [r3, #0]
 800596a:	4608      	mov	r0, r1
 800596c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005970:	4770      	bx	lr

08005972 <__sfputs_r>:
 8005972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005974:	4606      	mov	r6, r0
 8005976:	460f      	mov	r7, r1
 8005978:	4614      	mov	r4, r2
 800597a:	18d5      	adds	r5, r2, r3
 800597c:	42ac      	cmp	r4, r5
 800597e:	d101      	bne.n	8005984 <__sfputs_r+0x12>
 8005980:	2000      	movs	r0, #0
 8005982:	e007      	b.n	8005994 <__sfputs_r+0x22>
 8005984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005988:	463a      	mov	r2, r7
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ffda 	bl	8005944 <__sfputc_r>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d1f3      	bne.n	800597c <__sfputs_r+0xa>
 8005994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005998 <_vfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	460d      	mov	r5, r1
 800599e:	b09d      	sub	sp, #116	@ 0x74
 80059a0:	4614      	mov	r4, r2
 80059a2:	4698      	mov	r8, r3
 80059a4:	4606      	mov	r6, r0
 80059a6:	b118      	cbz	r0, 80059b0 <_vfiprintf_r+0x18>
 80059a8:	6a03      	ldr	r3, [r0, #32]
 80059aa:	b90b      	cbnz	r3, 80059b0 <_vfiprintf_r+0x18>
 80059ac:	f7fe f938 	bl	8003c20 <__sinit>
 80059b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059b2:	07d9      	lsls	r1, r3, #31
 80059b4:	d405      	bmi.n	80059c2 <_vfiprintf_r+0x2a>
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	059a      	lsls	r2, r3, #22
 80059ba:	d402      	bmi.n	80059c2 <_vfiprintf_r+0x2a>
 80059bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059be:	f7fe fb86 	bl	80040ce <__retarget_lock_acquire_recursive>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	071b      	lsls	r3, r3, #28
 80059c6:	d501      	bpl.n	80059cc <_vfiprintf_r+0x34>
 80059c8:	692b      	ldr	r3, [r5, #16]
 80059ca:	b99b      	cbnz	r3, 80059f4 <_vfiprintf_r+0x5c>
 80059cc:	4629      	mov	r1, r5
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7fe fabc 	bl	8003f4c <__swsetup_r>
 80059d4:	b170      	cbz	r0, 80059f4 <_vfiprintf_r+0x5c>
 80059d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059d8:	07dc      	lsls	r4, r3, #31
 80059da:	d504      	bpl.n	80059e6 <_vfiprintf_r+0x4e>
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	b01d      	add	sp, #116	@ 0x74
 80059e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	0598      	lsls	r0, r3, #22
 80059ea:	d4f7      	bmi.n	80059dc <_vfiprintf_r+0x44>
 80059ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ee:	f7fe fb6f 	bl	80040d0 <__retarget_lock_release_recursive>
 80059f2:	e7f3      	b.n	80059dc <_vfiprintf_r+0x44>
 80059f4:	2300      	movs	r3, #0
 80059f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059f8:	2320      	movs	r3, #32
 80059fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a02:	2330      	movs	r3, #48	@ 0x30
 8005a04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bb4 <_vfiprintf_r+0x21c>
 8005a08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a0c:	f04f 0901 	mov.w	r9, #1
 8005a10:	4623      	mov	r3, r4
 8005a12:	469a      	mov	sl, r3
 8005a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a18:	b10a      	cbz	r2, 8005a1e <_vfiprintf_r+0x86>
 8005a1a:	2a25      	cmp	r2, #37	@ 0x25
 8005a1c:	d1f9      	bne.n	8005a12 <_vfiprintf_r+0x7a>
 8005a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a22:	d00b      	beq.n	8005a3c <_vfiprintf_r+0xa4>
 8005a24:	465b      	mov	r3, fp
 8005a26:	4622      	mov	r2, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f7ff ffa1 	bl	8005972 <__sfputs_r>
 8005a30:	3001      	adds	r0, #1
 8005a32:	f000 80a7 	beq.w	8005b84 <_vfiprintf_r+0x1ec>
 8005a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a38:	445a      	add	r2, fp
 8005a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 809f 	beq.w	8005b84 <_vfiprintf_r+0x1ec>
 8005a46:	2300      	movs	r3, #0
 8005a48:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a50:	f10a 0a01 	add.w	sl, sl, #1
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	9307      	str	r3, [sp, #28]
 8005a58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a5e:	4654      	mov	r4, sl
 8005a60:	2205      	movs	r2, #5
 8005a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a66:	4853      	ldr	r0, [pc, #332]	@ (8005bb4 <_vfiprintf_r+0x21c>)
 8005a68:	f7fa fbb2 	bl	80001d0 <memchr>
 8005a6c:	9a04      	ldr	r2, [sp, #16]
 8005a6e:	b9d8      	cbnz	r0, 8005aa8 <_vfiprintf_r+0x110>
 8005a70:	06d1      	lsls	r1, r2, #27
 8005a72:	bf44      	itt	mi
 8005a74:	2320      	movmi	r3, #32
 8005a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a7a:	0713      	lsls	r3, r2, #28
 8005a7c:	bf44      	itt	mi
 8005a7e:	232b      	movmi	r3, #43	@ 0x2b
 8005a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a84:	f89a 3000 	ldrb.w	r3, [sl]
 8005a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a8a:	d015      	beq.n	8005ab8 <_vfiprintf_r+0x120>
 8005a8c:	9a07      	ldr	r2, [sp, #28]
 8005a8e:	4654      	mov	r4, sl
 8005a90:	2000      	movs	r0, #0
 8005a92:	f04f 0c0a 	mov.w	ip, #10
 8005a96:	4621      	mov	r1, r4
 8005a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a9c:	3b30      	subs	r3, #48	@ 0x30
 8005a9e:	2b09      	cmp	r3, #9
 8005aa0:	d94b      	bls.n	8005b3a <_vfiprintf_r+0x1a2>
 8005aa2:	b1b0      	cbz	r0, 8005ad2 <_vfiprintf_r+0x13a>
 8005aa4:	9207      	str	r2, [sp, #28]
 8005aa6:	e014      	b.n	8005ad2 <_vfiprintf_r+0x13a>
 8005aa8:	eba0 0308 	sub.w	r3, r0, r8
 8005aac:	fa09 f303 	lsl.w	r3, r9, r3
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	9304      	str	r3, [sp, #16]
 8005ab4:	46a2      	mov	sl, r4
 8005ab6:	e7d2      	b.n	8005a5e <_vfiprintf_r+0xc6>
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	9103      	str	r1, [sp, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bfbb      	ittet	lt
 8005ac4:	425b      	neglt	r3, r3
 8005ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aca:	9307      	strge	r3, [sp, #28]
 8005acc:	9307      	strlt	r3, [sp, #28]
 8005ace:	bfb8      	it	lt
 8005ad0:	9204      	strlt	r2, [sp, #16]
 8005ad2:	7823      	ldrb	r3, [r4, #0]
 8005ad4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ad6:	d10a      	bne.n	8005aee <_vfiprintf_r+0x156>
 8005ad8:	7863      	ldrb	r3, [r4, #1]
 8005ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8005adc:	d132      	bne.n	8005b44 <_vfiprintf_r+0x1ac>
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	9203      	str	r2, [sp, #12]
 8005ae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aea:	3402      	adds	r4, #2
 8005aec:	9305      	str	r3, [sp, #20]
 8005aee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005bc4 <_vfiprintf_r+0x22c>
 8005af2:	7821      	ldrb	r1, [r4, #0]
 8005af4:	2203      	movs	r2, #3
 8005af6:	4650      	mov	r0, sl
 8005af8:	f7fa fb6a 	bl	80001d0 <memchr>
 8005afc:	b138      	cbz	r0, 8005b0e <_vfiprintf_r+0x176>
 8005afe:	9b04      	ldr	r3, [sp, #16]
 8005b00:	eba0 000a 	sub.w	r0, r0, sl
 8005b04:	2240      	movs	r2, #64	@ 0x40
 8005b06:	4082      	lsls	r2, r0
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	3401      	adds	r4, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b12:	4829      	ldr	r0, [pc, #164]	@ (8005bb8 <_vfiprintf_r+0x220>)
 8005b14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b18:	2206      	movs	r2, #6
 8005b1a:	f7fa fb59 	bl	80001d0 <memchr>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d03f      	beq.n	8005ba2 <_vfiprintf_r+0x20a>
 8005b22:	4b26      	ldr	r3, [pc, #152]	@ (8005bbc <_vfiprintf_r+0x224>)
 8005b24:	bb1b      	cbnz	r3, 8005b6e <_vfiprintf_r+0x1d6>
 8005b26:	9b03      	ldr	r3, [sp, #12]
 8005b28:	3307      	adds	r3, #7
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	3308      	adds	r3, #8
 8005b30:	9303      	str	r3, [sp, #12]
 8005b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b34:	443b      	add	r3, r7
 8005b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b38:	e76a      	b.n	8005a10 <_vfiprintf_r+0x78>
 8005b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b3e:	460c      	mov	r4, r1
 8005b40:	2001      	movs	r0, #1
 8005b42:	e7a8      	b.n	8005a96 <_vfiprintf_r+0xfe>
 8005b44:	2300      	movs	r3, #0
 8005b46:	3401      	adds	r4, #1
 8005b48:	9305      	str	r3, [sp, #20]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0c0a 	mov.w	ip, #10
 8005b50:	4620      	mov	r0, r4
 8005b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b56:	3a30      	subs	r2, #48	@ 0x30
 8005b58:	2a09      	cmp	r2, #9
 8005b5a:	d903      	bls.n	8005b64 <_vfiprintf_r+0x1cc>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0c6      	beq.n	8005aee <_vfiprintf_r+0x156>
 8005b60:	9105      	str	r1, [sp, #20]
 8005b62:	e7c4      	b.n	8005aee <_vfiprintf_r+0x156>
 8005b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b68:	4604      	mov	r4, r0
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e7f0      	b.n	8005b50 <_vfiprintf_r+0x1b8>
 8005b6e:	ab03      	add	r3, sp, #12
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	462a      	mov	r2, r5
 8005b74:	4b12      	ldr	r3, [pc, #72]	@ (8005bc0 <_vfiprintf_r+0x228>)
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f7fd fb63 	bl	8003244 <_printf_float>
 8005b7e:	4607      	mov	r7, r0
 8005b80:	1c78      	adds	r0, r7, #1
 8005b82:	d1d6      	bne.n	8005b32 <_vfiprintf_r+0x19a>
 8005b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b86:	07d9      	lsls	r1, r3, #31
 8005b88:	d405      	bmi.n	8005b96 <_vfiprintf_r+0x1fe>
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	059a      	lsls	r2, r3, #22
 8005b8e:	d402      	bmi.n	8005b96 <_vfiprintf_r+0x1fe>
 8005b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b92:	f7fe fa9d 	bl	80040d0 <__retarget_lock_release_recursive>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	065b      	lsls	r3, r3, #25
 8005b9a:	f53f af1f 	bmi.w	80059dc <_vfiprintf_r+0x44>
 8005b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ba0:	e71e      	b.n	80059e0 <_vfiprintf_r+0x48>
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <_vfiprintf_r+0x228>)
 8005baa:	a904      	add	r1, sp, #16
 8005bac:	4630      	mov	r0, r6
 8005bae:	f7fd fde1 	bl	8003774 <_printf_i>
 8005bb2:	e7e4      	b.n	8005b7e <_vfiprintf_r+0x1e6>
 8005bb4:	08006269 	.word	0x08006269
 8005bb8:	08006273 	.word	0x08006273
 8005bbc:	08003245 	.word	0x08003245
 8005bc0:	08005973 	.word	0x08005973
 8005bc4:	0800626f 	.word	0x0800626f

08005bc8 <__swhatbuf_r>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	b096      	sub	sp, #88	@ 0x58
 8005bd4:	4615      	mov	r5, r2
 8005bd6:	461e      	mov	r6, r3
 8005bd8:	da0d      	bge.n	8005bf6 <__swhatbuf_r+0x2e>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005be0:	f04f 0100 	mov.w	r1, #0
 8005be4:	bf14      	ite	ne
 8005be6:	2340      	movne	r3, #64	@ 0x40
 8005be8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bec:	2000      	movs	r0, #0
 8005bee:	6031      	str	r1, [r6, #0]
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	b016      	add	sp, #88	@ 0x58
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	466a      	mov	r2, sp
 8005bf8:	f000 f862 	bl	8005cc0 <_fstat_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	dbec      	blt.n	8005bda <__swhatbuf_r+0x12>
 8005c00:	9901      	ldr	r1, [sp, #4]
 8005c02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c0a:	4259      	negs	r1, r3
 8005c0c:	4159      	adcs	r1, r3
 8005c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c12:	e7eb      	b.n	8005bec <__swhatbuf_r+0x24>

08005c14 <__smakebuf_r>:
 8005c14:	898b      	ldrh	r3, [r1, #12]
 8005c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c18:	079d      	lsls	r5, r3, #30
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	d507      	bpl.n	8005c30 <__smakebuf_r+0x1c>
 8005c20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6163      	str	r3, [r4, #20]
 8005c2c:	b003      	add	sp, #12
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c30:	ab01      	add	r3, sp, #4
 8005c32:	466a      	mov	r2, sp
 8005c34:	f7ff ffc8 	bl	8005bc8 <__swhatbuf_r>
 8005c38:	9f00      	ldr	r7, [sp, #0]
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff f922 	bl	8004e88 <_malloc_r>
 8005c44:	b948      	cbnz	r0, 8005c5a <__smakebuf_r+0x46>
 8005c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4a:	059a      	lsls	r2, r3, #22
 8005c4c:	d4ee      	bmi.n	8005c2c <__smakebuf_r+0x18>
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	f043 0302 	orr.w	r3, r3, #2
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	e7e2      	b.n	8005c20 <__smakebuf_r+0xc>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	6020      	str	r0, [r4, #0]
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	9b01      	ldr	r3, [sp, #4]
 8005c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c6a:	b15b      	cbz	r3, 8005c84 <__smakebuf_r+0x70>
 8005c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 f837 	bl	8005ce4 <_isatty_r>
 8005c76:	b128      	cbz	r0, 8005c84 <__smakebuf_r+0x70>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	431d      	orrs	r5, r3
 8005c88:	81a5      	strh	r5, [r4, #12]
 8005c8a:	e7cf      	b.n	8005c2c <__smakebuf_r+0x18>

08005c8c <memmove>:
 8005c8c:	4288      	cmp	r0, r1
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	eb01 0402 	add.w	r4, r1, r2
 8005c94:	d902      	bls.n	8005c9c <memmove+0x10>
 8005c96:	4284      	cmp	r4, r0
 8005c98:	4623      	mov	r3, r4
 8005c9a:	d807      	bhi.n	8005cac <memmove+0x20>
 8005c9c:	1e43      	subs	r3, r0, #1
 8005c9e:	42a1      	cmp	r1, r4
 8005ca0:	d008      	beq.n	8005cb4 <memmove+0x28>
 8005ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005caa:	e7f8      	b.n	8005c9e <memmove+0x12>
 8005cac:	4402      	add	r2, r0
 8005cae:	4601      	mov	r1, r0
 8005cb0:	428a      	cmp	r2, r1
 8005cb2:	d100      	bne.n	8005cb6 <memmove+0x2a>
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cbe:	e7f7      	b.n	8005cb0 <memmove+0x24>

08005cc0 <_fstat_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4d07      	ldr	r5, [pc, #28]	@ (8005ce0 <_fstat_r+0x20>)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	f7fd f86b 	bl	8002da8 <_fstat>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d102      	bne.n	8005cdc <_fstat_r+0x1c>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	b103      	cbz	r3, 8005cdc <_fstat_r+0x1c>
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	bd38      	pop	{r3, r4, r5, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000082c 	.word	0x2000082c

08005ce4 <_isatty_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	@ (8005d00 <_isatty_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fd f86a 	bl	8002dc8 <_isatty>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_isatty_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_isatty_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	2000082c 	.word	0x2000082c

08005d04 <_sbrk_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	@ (8005d20 <_sbrk_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f000 f8ee 	bl	8005ef0 <_sbrk>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_sbrk_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_sbrk_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	2000082c 	.word	0x2000082c

08005d24 <__assert_func>:
 8005d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d26:	4614      	mov	r4, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <__assert_func+0x2c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4605      	mov	r5, r0
 8005d30:	68d8      	ldr	r0, [r3, #12]
 8005d32:	b14c      	cbz	r4, 8005d48 <__assert_func+0x24>
 8005d34:	4b07      	ldr	r3, [pc, #28]	@ (8005d54 <__assert_func+0x30>)
 8005d36:	9100      	str	r1, [sp, #0]
 8005d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d3c:	4906      	ldr	r1, [pc, #24]	@ (8005d58 <__assert_func+0x34>)
 8005d3e:	462b      	mov	r3, r5
 8005d40:	f000 f870 	bl	8005e24 <fiprintf>
 8005d44:	f000 f880 	bl	8005e48 <abort>
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <__assert_func+0x38>)
 8005d4a:	461c      	mov	r4, r3
 8005d4c:	e7f3      	b.n	8005d36 <__assert_func+0x12>
 8005d4e:	bf00      	nop
 8005d50:	20000010 	.word	0x20000010
 8005d54:	08006284 	.word	0x08006284
 8005d58:	08006291 	.word	0x08006291
 8005d5c:	080062bf 	.word	0x080062bf

08005d60 <_calloc_r>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	fba1 5402 	umull	r5, r4, r1, r2
 8005d66:	b934      	cbnz	r4, 8005d76 <_calloc_r+0x16>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7ff f88d 	bl	8004e88 <_malloc_r>
 8005d6e:	4606      	mov	r6, r0
 8005d70:	b928      	cbnz	r0, 8005d7e <_calloc_r+0x1e>
 8005d72:	4630      	mov	r0, r6
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
 8005d76:	220c      	movs	r2, #12
 8005d78:	6002      	str	r2, [r0, #0]
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	e7f9      	b.n	8005d72 <_calloc_r+0x12>
 8005d7e:	462a      	mov	r2, r5
 8005d80:	4621      	mov	r1, r4
 8005d82:	f7fe f939 	bl	8003ff8 <memset>
 8005d86:	e7f4      	b.n	8005d72 <_calloc_r+0x12>

08005d88 <__ascii_mbtowc>:
 8005d88:	b082      	sub	sp, #8
 8005d8a:	b901      	cbnz	r1, 8005d8e <__ascii_mbtowc+0x6>
 8005d8c:	a901      	add	r1, sp, #4
 8005d8e:	b142      	cbz	r2, 8005da2 <__ascii_mbtowc+0x1a>
 8005d90:	b14b      	cbz	r3, 8005da6 <__ascii_mbtowc+0x1e>
 8005d92:	7813      	ldrb	r3, [r2, #0]
 8005d94:	600b      	str	r3, [r1, #0]
 8005d96:	7812      	ldrb	r2, [r2, #0]
 8005d98:	1e10      	subs	r0, r2, #0
 8005d9a:	bf18      	it	ne
 8005d9c:	2001      	movne	r0, #1
 8005d9e:	b002      	add	sp, #8
 8005da0:	4770      	bx	lr
 8005da2:	4610      	mov	r0, r2
 8005da4:	e7fb      	b.n	8005d9e <__ascii_mbtowc+0x16>
 8005da6:	f06f 0001 	mvn.w	r0, #1
 8005daa:	e7f8      	b.n	8005d9e <__ascii_mbtowc+0x16>

08005dac <_realloc_r>:
 8005dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	4607      	mov	r7, r0
 8005db2:	4614      	mov	r4, r2
 8005db4:	460d      	mov	r5, r1
 8005db6:	b921      	cbnz	r1, 8005dc2 <_realloc_r+0x16>
 8005db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	f7ff b863 	b.w	8004e88 <_malloc_r>
 8005dc2:	b92a      	cbnz	r2, 8005dd0 <_realloc_r+0x24>
 8005dc4:	f7fe ffec 	bl	8004da0 <_free_r>
 8005dc8:	4625      	mov	r5, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd0:	f000 f841 	bl	8005e56 <_malloc_usable_size_r>
 8005dd4:	4284      	cmp	r4, r0
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	d802      	bhi.n	8005de0 <_realloc_r+0x34>
 8005dda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dde:	d8f4      	bhi.n	8005dca <_realloc_r+0x1e>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4638      	mov	r0, r7
 8005de4:	f7ff f850 	bl	8004e88 <_malloc_r>
 8005de8:	4680      	mov	r8, r0
 8005dea:	b908      	cbnz	r0, 8005df0 <_realloc_r+0x44>
 8005dec:	4645      	mov	r5, r8
 8005dee:	e7ec      	b.n	8005dca <_realloc_r+0x1e>
 8005df0:	42b4      	cmp	r4, r6
 8005df2:	4622      	mov	r2, r4
 8005df4:	4629      	mov	r1, r5
 8005df6:	bf28      	it	cs
 8005df8:	4632      	movcs	r2, r6
 8005dfa:	f7fe f96a 	bl	80040d2 <memcpy>
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4638      	mov	r0, r7
 8005e02:	f7fe ffcd 	bl	8004da0 <_free_r>
 8005e06:	e7f1      	b.n	8005dec <_realloc_r+0x40>

08005e08 <__ascii_wctomb>:
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	b141      	cbz	r1, 8005e20 <__ascii_wctomb+0x18>
 8005e0e:	2aff      	cmp	r2, #255	@ 0xff
 8005e10:	d904      	bls.n	8005e1c <__ascii_wctomb+0x14>
 8005e12:	228a      	movs	r2, #138	@ 0x8a
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1a:	4770      	bx	lr
 8005e1c:	700a      	strb	r2, [r1, #0]
 8005e1e:	2001      	movs	r0, #1
 8005e20:	4770      	bx	lr
	...

08005e24 <fiprintf>:
 8005e24:	b40e      	push	{r1, r2, r3}
 8005e26:	b503      	push	{r0, r1, lr}
 8005e28:	4601      	mov	r1, r0
 8005e2a:	ab03      	add	r3, sp, #12
 8005e2c:	4805      	ldr	r0, [pc, #20]	@ (8005e44 <fiprintf+0x20>)
 8005e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e32:	6800      	ldr	r0, [r0, #0]
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	f7ff fdaf 	bl	8005998 <_vfiprintf_r>
 8005e3a:	b002      	add	sp, #8
 8005e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e40:	b003      	add	sp, #12
 8005e42:	4770      	bx	lr
 8005e44:	20000010 	.word	0x20000010

08005e48 <abort>:
 8005e48:	b508      	push	{r3, lr}
 8005e4a:	2006      	movs	r0, #6
 8005e4c:	f000 f834 	bl	8005eb8 <raise>
 8005e50:	2001      	movs	r0, #1
 8005e52:	f7fc ff75 	bl	8002d40 <_exit>

08005e56 <_malloc_usable_size_r>:
 8005e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e5a:	1f18      	subs	r0, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfbc      	itt	lt
 8005e60:	580b      	ldrlt	r3, [r1, r0]
 8005e62:	18c0      	addlt	r0, r0, r3
 8005e64:	4770      	bx	lr

08005e66 <_raise_r>:
 8005e66:	291f      	cmp	r1, #31
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	d904      	bls.n	8005e7a <_raise_r+0x14>
 8005e70:	2316      	movs	r3, #22
 8005e72:	6003      	str	r3, [r0, #0]
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e7c:	b112      	cbz	r2, 8005e84 <_raise_r+0x1e>
 8005e7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e82:	b94b      	cbnz	r3, 8005e98 <_raise_r+0x32>
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 f831 	bl	8005eec <_getpid_r>
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	4601      	mov	r1, r0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e94:	f000 b818 	b.w	8005ec8 <_kill_r>
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d00a      	beq.n	8005eb2 <_raise_r+0x4c>
 8005e9c:	1c59      	adds	r1, r3, #1
 8005e9e:	d103      	bne.n	8005ea8 <_raise_r+0x42>
 8005ea0:	2316      	movs	r3, #22
 8005ea2:	6003      	str	r3, [r0, #0]
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	e7e7      	b.n	8005e78 <_raise_r+0x12>
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4798      	blx	r3
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e7e0      	b.n	8005e78 <_raise_r+0x12>
	...

08005eb8 <raise>:
 8005eb8:	4b02      	ldr	r3, [pc, #8]	@ (8005ec4 <raise+0xc>)
 8005eba:	4601      	mov	r1, r0
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	f7ff bfd2 	b.w	8005e66 <_raise_r>
 8005ec2:	bf00      	nop
 8005ec4:	20000010 	.word	0x20000010

08005ec8 <_kill_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d07      	ldr	r5, [pc, #28]	@ (8005ee8 <_kill_r+0x20>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	f7fc ff23 	bl	8002d20 <_kill>
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	d102      	bne.n	8005ee4 <_kill_r+0x1c>
 8005ede:	682b      	ldr	r3, [r5, #0]
 8005ee0:	b103      	cbz	r3, 8005ee4 <_kill_r+0x1c>
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	bf00      	nop
 8005ee8:	2000082c 	.word	0x2000082c

08005eec <_getpid_r>:
 8005eec:	f7fc bf10 	b.w	8002d10 <_getpid>

08005ef0 <_sbrk>:
 8005ef0:	4a04      	ldr	r2, [pc, #16]	@ (8005f04 <_sbrk+0x14>)
 8005ef2:	6811      	ldr	r1, [r2, #0]
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	b909      	cbnz	r1, 8005efc <_sbrk+0xc>
 8005ef8:	4903      	ldr	r1, [pc, #12]	@ (8005f08 <_sbrk+0x18>)
 8005efa:	6011      	str	r1, [r2, #0]
 8005efc:	6810      	ldr	r0, [r2, #0]
 8005efe:	4403      	add	r3, r0
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4770      	bx	lr
 8005f04:	2000083c 	.word	0x2000083c
 8005f08:	20000840 	.word	0x20000840

08005f0c <_init>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr

08005f18 <_fini>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr
