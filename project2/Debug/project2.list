
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e00  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f88  08001f88  00002f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fb4  08001fb4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fb4  08001fb4  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fb4  08001fb4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fb4  08001fb4  00002fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fb8  08001fb8  00002fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001fbc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08002018  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002018  000032cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056bd  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168e  00000000  00000000  00008749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00009dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d1  00000000  00000000  0000a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000405b  00000000  00000000  0000a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000959d  00000000  00000000  0000e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005af6c  00000000  00000000  00017f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00072eb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  00072ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  00074f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f70 	.word	0x08001f70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08001f70 	.word	0x08001f70

080001c8 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80001d4:	4b7b      	ldr	r3, [pc, #492]	@ (80003c4 <EXTI_Init+0x1fc>)
 80001d6:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	799b      	ldrb	r3, [r3, #6]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	f000 80d2 	beq.w	8000386 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80001ec:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80001f0:	015b      	lsls	r3, r3, #5
 80001f2:	6819      	ldr	r1, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f003 031f 	and.w	r3, r3, #31
 80001fc:	2201      	movs	r2, #1
 80001fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000202:	43da      	mvns	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 800020e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000212:	015b      	lsls	r3, r3, #5
 8000214:	4618      	mov	r0, r3
 8000216:	ea01 0302 	and.w	r3, r1, r2
 800021a:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	095b      	lsrs	r3, r3, #5
 8000222:	015a      	lsls	r2, r3, #5
 8000224:	4b68      	ldr	r3, [pc, #416]	@ (80003c8 <EXTI_Init+0x200>)
 8000226:	4413      	add	r3, r2
 8000228:	6819      	ldr	r1, [r3, #0]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f003 031f 	and.w	r3, r3, #31
 8000232:	2201      	movs	r2, #1
 8000234:	fa02 f303 	lsl.w	r3, r2, r3
 8000238:	43da      	mvns	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	0158      	lsls	r0, r3, #5
 8000242:	4b61      	ldr	r3, [pc, #388]	@ (80003c8 <EXTI_Init+0x200>)
 8000244:	4403      	add	r3, r0
 8000246:	4618      	mov	r0, r3
 8000248:	ea01 0302 	and.w	r3, r1, r2
 800024c:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	791b      	ldrb	r3, [r3, #4]
 8000252:	461a      	mov	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	095b      	lsrs	r3, r3, #5
 800025a:	015b      	lsls	r3, r3, #5
 800025c:	4413      	add	r3, r2
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	4413      	add	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
 8000276:	4619      	mov	r1, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 800027e:	4b51      	ldr	r3, [pc, #324]	@ (80003c4 <EXTI_Init+0x1fc>)
 8000280:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	015a      	lsls	r2, r3, #5
 800028a:	4b50      	ldr	r3, [pc, #320]	@ (80003cc <EXTI_Init+0x204>)
 800028c:	4413      	add	r3, r2
 800028e:	6819      	ldr	r1, [r3, #0]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 031f 	and.w	r3, r3, #31
 8000298:	2201      	movs	r2, #1
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	43da      	mvns	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	095b      	lsrs	r3, r3, #5
 80002a6:	0158      	lsls	r0, r3, #5
 80002a8:	4b48      	ldr	r3, [pc, #288]	@ (80003cc <EXTI_Init+0x204>)
 80002aa:	4403      	add	r3, r0
 80002ac:	4618      	mov	r0, r3
 80002ae:	ea01 0302 	and.w	r3, r1, r2
 80002b2:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	095b      	lsrs	r3, r3, #5
 80002ba:	015a      	lsls	r2, r3, #5
 80002bc:	4b44      	ldr	r3, [pc, #272]	@ (80003d0 <EXTI_Init+0x208>)
 80002be:	4413      	add	r3, r2
 80002c0:	6819      	ldr	r1, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 031f 	and.w	r3, r3, #31
 80002ca:	2201      	movs	r2, #1
 80002cc:	fa02 f303 	lsl.w	r3, r2, r3
 80002d0:	43da      	mvns	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	0158      	lsls	r0, r3, #5
 80002da:	4b3d      	ldr	r3, [pc, #244]	@ (80003d0 <EXTI_Init+0x208>)
 80002dc:	4403      	add	r3, r0
 80002de:	4618      	mov	r0, r3
 80002e0:	ea01 0302 	and.w	r3, r1, r2
 80002e4:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	2b10      	cmp	r3, #16
 80002ec:	d132      	bne.n	8000354 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	095b      	lsrs	r3, r3, #5
 80002f4:	015a      	lsls	r2, r3, #5
 80002f6:	4b35      	ldr	r3, [pc, #212]	@ (80003cc <EXTI_Init+0x204>)
 80002f8:	4413      	add	r3, r2
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 031f 	and.w	r3, r3, #31
 8000304:	2101      	movs	r1, #1
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	4618      	mov	r0, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	095b      	lsrs	r3, r3, #5
 8000312:	0159      	lsls	r1, r3, #5
 8000314:	4b2d      	ldr	r3, [pc, #180]	@ (80003cc <EXTI_Init+0x204>)
 8000316:	440b      	add	r3, r1
 8000318:	4619      	mov	r1, r3
 800031a:	ea42 0300 	orr.w	r3, r2, r0
 800031e:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	095b      	lsrs	r3, r3, #5
 8000326:	015a      	lsls	r2, r3, #5
 8000328:	4b29      	ldr	r3, [pc, #164]	@ (80003d0 <EXTI_Init+0x208>)
 800032a:	4413      	add	r3, r2
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 031f 	and.w	r3, r3, #31
 8000336:	2101      	movs	r1, #1
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	4618      	mov	r0, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	095b      	lsrs	r3, r3, #5
 8000344:	0159      	lsls	r1, r3, #5
 8000346:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <EXTI_Init+0x208>)
 8000348:	440b      	add	r3, r1
 800034a:	4619      	mov	r1, r3
 800034c:	ea42 0300 	orr.w	r3, r2, r0
 8000350:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000352:	e030      	b.n	80003b6 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	461a      	mov	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	095b      	lsrs	r3, r3, #5
 8000360:	015b      	lsls	r3, r3, #5
 8000362:	4413      	add	r3, r2
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	4413      	add	r3, r2
 8000368:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 031f 	and.w	r3, r3, #31
 8000376:	2101      	movs	r1, #1
 8000378:	fa01 f303 	lsl.w	r3, r1, r3
 800037c:	4619      	mov	r1, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	430a      	orrs	r2, r1
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	e017      	b.n	80003b6 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	461a      	mov	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	095b      	lsrs	r3, r3, #5
 8000392:	015b      	lsls	r3, r3, #5
 8000394:	4413      	add	r3, r2
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	4413      	add	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 031f 	and.w	r3, r3, #31
 80003a8:	2201      	movs	r2, #1
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	43da      	mvns	r2, r3
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	400a      	ands	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40010400 	.word	0x40010400
 80003c8:	40010404 	.word	0x40010404
 80003cc:	40010408 	.word	0x40010408
 80003d0:	4001040c 	.word	0x4001040c

080003d4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	095b      	lsrs	r3, r3, #5
 80003e8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80003ec:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80003f0:	015b      	lsls	r3, r3, #5
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	f002 021f 	and.w	r2, r2, #31
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	4013      	ands	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	095b      	lsrs	r3, r3, #5
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <EXTI_GetITStatus+0x6c>)
 800040c:	4413      	add	r3, r2
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	f002 021f 	and.w	r2, r2, #31
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d005      	beq.n	800042e <EXTI_GetITStatus+0x5a>
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000428:	2301      	movs	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]
 800042c:	e001      	b.n	8000432 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000432:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000434:	4618      	mov	r0, r3
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40010414 	.word	0x40010414

08000444 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f003 031f 	and.w	r3, r3, #31
 8000452:	2201      	movs	r2, #1
 8000454:	fa02 f103 	lsl.w	r1, r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	095b      	lsrs	r3, r3, #5
 800045c:	015a      	lsls	r2, r3, #5
 800045e:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <EXTI_ClearITPendingBit+0x30>)
 8000460:	4413      	add	r3, r2
 8000462:	460a      	mov	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40010414 	.word	0x40010414

08000478 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e07c      	b.n	800058e <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000494:	2201      	movs	r2, #1
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d16b      	bne.n	8000588 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d003      	beq.n	80004c0 <GPIO_Init+0x48>
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d134      	bne.n	800052a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689a      	ldr	r2, [r3, #8]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	2103      	movs	r1, #3
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43db      	mvns	r3, r3
 80004d0:	401a      	ands	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	689a      	ldr	r2, [r3, #8]
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	4619      	mov	r1, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	2301      	movs	r3, #1
 80004fc:	408b      	lsls	r3, r1
 80004fe:	b29b      	uxth	r3, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	b29b      	uxth	r3, r3
 8000504:	4013      	ands	r3, r2
 8000506:	b29a      	uxth	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	889b      	ldrh	r3, [r3, #4]
 8000510:	b29a      	uxth	r2, r3
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	799b      	ldrb	r3, [r3, #6]
 8000516:	4619      	mov	r1, r3
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	b29b      	uxth	r3, r3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	b29b      	uxth	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b29a      	uxth	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2103      	movs	r1, #3
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	401a      	ands	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	4619      	mov	r1, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	431a      	orrs	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	b29b      	uxth	r3, r3
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	2103      	movs	r1, #3
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	401a      	ands	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	79db      	ldrb	r3, [r3, #7]
 8000578:	4619      	mov	r1, r3
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	431a      	orrs	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	f67f af7f 	bls.w	8000494 <GPIO_Init+0x1c>
    }
  }
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	371c      	adds	r7, #28
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2202      	movs	r2, #2
 80005be:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	71da      	strb	r2, [r3, #7]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	8a1b      	ldrh	r3, [r3, #16]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	4013      	ands	r3, r2
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e001      	b.n	8000602 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
 800061c:	4613      	mov	r3, r2
 800061e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000620:	787b      	ldrb	r3, [r7, #1]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000626:	887a      	ldrh	r2, [r7, #2]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800062c:	e002      	b.n	8000634 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	887a      	ldrh	r2, [r7, #2]
 8000632:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000648:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <NVIC_PriorityGroupConfig+0x24>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	60d3      	str	r3, [r2, #12]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000668:	b480      	push	{r7}
 800066a:	b087      	sub	sp, #28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d03a      	beq.n	80006fa <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <NVIC_Init+0xc0>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	43db      	mvns	r3, r3
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	f003 0307 	and.w	r3, r3, #7
 8000690:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	f1c3 0304 	rsb	r3, r3, #4
 8000698:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa22 f303 	lsr.w	r3, r2, r3
 80006a2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	461a      	mov	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4013      	ands	r3, r2
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	4313      	orrs	r3, r2
 80006c0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006c8:	4a18      	ldr	r2, [pc, #96]	@ (800072c <NVIC_Init+0xc4>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	6979      	ldr	r1, [r7, #20]
 80006d0:	b2c9      	uxtb	r1, r1
 80006d2:	4413      	add	r3, r2
 80006d4:	460a      	mov	r2, r1
 80006d6:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006e2:	4912      	ldr	r1, [pc, #72]	@ (800072c <NVIC_Init+0xc4>)
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	0952      	lsrs	r2, r2, #5
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006ee:	2201      	movs	r2, #1
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006f4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80006f8:	e00f      	b.n	800071a <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000702:	490a      	ldr	r1, [pc, #40]	@ (800072c <NVIC_Init+0xc4>)
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	0952      	lsrs	r2, r2, #5
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800070e:	2201      	movs	r2, #1
 8000710:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000712:	f100 0320 	add.w	r3, r0, #32
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800071a:	bf00      	nop
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	e000e100 	.word	0xe000e100

08000730 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000730:	b480      	push	{r7}
 8000732:	b08b      	sub	sp, #44	@ 0x2c
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000758:	4b8b      	ldr	r3, [pc, #556]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f003 030c 	and.w	r3, r3, #12
 8000760:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	2b08      	cmp	r3, #8
 8000766:	d011      	beq.n	800078c <RCC_GetClocksFreq+0x5c>
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	2b08      	cmp	r3, #8
 800076c:	d837      	bhi.n	80007de <RCC_GetClocksFreq+0xae>
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <RCC_GetClocksFreq+0x4c>
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d004      	beq.n	8000784 <RCC_GetClocksFreq+0x54>
 800077a:	e030      	b.n	80007de <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a83      	ldr	r2, [pc, #524]	@ (800098c <RCC_GetClocksFreq+0x25c>)
 8000780:	601a      	str	r2, [r3, #0]
      break;
 8000782:	e030      	b.n	80007e6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a81      	ldr	r2, [pc, #516]	@ (800098c <RCC_GetClocksFreq+0x25c>)
 8000788:	601a      	str	r2, [r3, #0]
      break;
 800078a:	e02c      	b.n	80007e6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800078c:	4b7e      	ldr	r3, [pc, #504]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000794:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000796:	4b7c      	ldr	r3, [pc, #496]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800079e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	0c9b      	lsrs	r3, r3, #18
 80007a4:	3302      	adds	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d105      	bne.n	80007ba <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	4a77      	ldr	r2, [pc, #476]	@ (8000990 <RCC_GetClocksFreq+0x260>)
 80007b2:	fb02 f303 	mul.w	r3, r2, r3
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b8:	e00d      	b.n	80007d6 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80007ba:	4b73      	ldr	r3, [pc, #460]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3301      	adds	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80007c6:	4a71      	ldr	r2, [pc, #452]	@ (800098c <RCC_GetClocksFreq+0x25c>)
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007da:	601a      	str	r2, [r3, #0]
      break;
 80007dc:	e003      	b.n	80007e6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a6a      	ldr	r2, [pc, #424]	@ (800098c <RCC_GetClocksFreq+0x25c>)
 80007e2:	601a      	str	r2, [r3, #0]
      break;
 80007e4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80007e6:	4b68      	ldr	r3, [pc, #416]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80007ee:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	091b      	lsrs	r3, r3, #4
 80007f4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80007f6:	4a67      	ldr	r2, [pc, #412]	@ (8000994 <RCC_GetClocksFreq+0x264>)
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	40da      	lsrs	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800080e:	4b5e      	ldr	r3, [pc, #376]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000816:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800081e:	4a5d      	ldr	r2, [pc, #372]	@ (8000994 <RCC_GetClocksFreq+0x264>)
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	40da      	lsrs	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000836:	4b54      	ldr	r3, [pc, #336]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800083e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	0adb      	lsrs	r3, r3, #11
 8000844:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000846:	4a53      	ldr	r2, [pc, #332]	@ (8000994 <RCC_GetClocksFreq+0x264>)
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	40da      	lsrs	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800085e:	4b4a      	ldr	r3, [pc, #296]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000862:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000866:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	091b      	lsrs	r3, r3, #4
 800086c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800086e:	4a4a      	ldr	r2, [pc, #296]	@ (8000998 <RCC_GetClocksFreq+0x268>)
 8000870:	6a3b      	ldr	r3, [r7, #32]
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	b29b      	uxth	r3, r3
 8000878:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	fbb2 f2f3 	udiv	r2, r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	e003      	b.n	800089a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800089a:	4b3b      	ldr	r3, [pc, #236]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 800089c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089e:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80008a2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	0a5b      	lsrs	r3, r3, #9
 80008a8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80008aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000998 <RCC_GetClocksFreq+0x268>)
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80008c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	e003      	b.n	80008d6 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	2b10      	cmp	r3, #16
 80008e0:	d003      	beq.n	80008ea <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a29      	ldr	r2, [pc, #164]	@ (800098c <RCC_GetClocksFreq+0x25c>)
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	e003      	b.n	80008f2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	2b20      	cmp	r3, #32
 80008fc:	d003      	beq.n	8000906 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a22      	ldr	r2, [pc, #136]	@ (800098c <RCC_GetClocksFreq+0x25c>)
 8000902:	61da      	str	r2, [r3, #28]
 8000904:	e003      	b.n	800090e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800091a:	d10d      	bne.n	8000938 <RCC_GetClocksFreq+0x208>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000922:	429a      	cmp	r2, r3
 8000924:	d108      	bne.n	8000938 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	429a      	cmp	r2, r3
 800092c:	d104      	bne.n	8000938 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800092e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000930:	005a      	lsls	r2, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	621a      	str	r2, [r3, #32]
 8000936:	e003      	b.n	8000940 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68da      	ldr	r2, [r3, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800094c:	d10d      	bne.n	800096a <RCC_GetClocksFreq+0x23a>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000954:	429a      	cmp	r2, r3
 8000956:	d108      	bne.n	800096a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	429a      	cmp	r2, r3
 800095e:	d104      	bne.n	800096a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	005a      	lsls	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24
 8000968:	e003      	b.n	8000972 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <RCC_GetClocksFreq+0x258>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10e      	bne.n	800099c <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68da      	ldr	r2, [r3, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
 8000986:	e028      	b.n	80009da <RCC_GetClocksFreq+0x2aa>
 8000988:	40021000 	.word	0x40021000
 800098c:	007a1200 	.word	0x007a1200
 8000990:	003d0900 	.word	0x003d0900
 8000994:	08001f88 	.word	0x08001f88
 8000998:	08001f98 	.word	0x08001f98
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800099c:	4b6c      	ldr	r3, [pc, #432]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d104      	bne.n	80009b2 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80009b0:	e013      	b.n	80009da <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d104      	bne.n	80009c8 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80009c6:	e008      	b.n	80009da <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80009c8:	4b61      	ldr	r3, [pc, #388]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d102      	bne.n	80009da <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a5f      	ldr	r2, [pc, #380]	@ (8000b54 <RCC_GetClocksFreq+0x424>)
 80009d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80009da:	4b5d      	ldr	r3, [pc, #372]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d104      	bne.n	80009f0 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ee:	e021      	b.n	8000a34 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80009f0:	4b57      	ldr	r3, [pc, #348]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009fc:	d104      	bne.n	8000a08 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a06:	e015      	b.n	8000a34 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000a08:	4b51      	ldr	r3, [pc, #324]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000a14:	d104      	bne.n	8000a20 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a1e:	e009      	b.n	8000a34 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000a20:	4b4b      	ldr	r3, [pc, #300]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8000a2c:	d102      	bne.n	8000a34 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a48      	ldr	r2, [pc, #288]	@ (8000b54 <RCC_GetClocksFreq+0x424>)
 8000a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000a34:	4b46      	ldr	r3, [pc, #280]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a48:	e021      	b.n	8000a8e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000a4a:	4b41      	ldr	r3, [pc, #260]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000a56:	d104      	bne.n	8000a62 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a60:	e015      	b.n	8000a8e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000a62:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000a6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000a6e:	d104      	bne.n	8000a7a <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a76:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a78:	e009      	b.n	8000a8e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000a7a:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000a82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000a86:	d102      	bne.n	8000a8e <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <RCC_GetClocksFreq+0x424>)
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000a8e:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa2:	e021      	b.n	8000ae8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000aac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000ab0:	d104      	bne.n	8000abc <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aba:	e015      	b.n	8000ae8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000ac4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000ac8:	d104      	bne.n	8000ad4 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad2:	e009      	b.n	8000ae8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000adc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8000ae0:	d102      	bne.n	8000ae8 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <RCC_GetClocksFreq+0x424>)
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000afc:	e021      	b.n	8000b42 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b0a:	d104      	bne.n	8000b16 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b14:	e015      	b.n	8000b42 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000b22:	d104      	bne.n	8000b2e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b2a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b2c:	e009      	b.n	8000b42 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <RCC_GetClocksFreq+0x420>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000b36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000b3a:	d102      	bne.n	8000b42 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <RCC_GetClocksFreq+0x424>)
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000b42:	bf00      	nop
 8000b44:	372c      	adds	r7, #44	@ 0x2c
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	007a1200 	.word	0x007a1200

08000b58 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <RCC_AHBPeriphClockCmd+0x3c>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4909      	ldr	r1, [pc, #36]	@ (8000b94 <RCC_AHBPeriphClockCmd+0x3c>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000b76:	e006      	b.n	8000b86 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <RCC_AHBPeriphClockCmd+0x3c>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4904      	ldr	r1, [pc, #16]	@ (8000b94 <RCC_AHBPeriphClockCmd+0x3c>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	614b      	str	r3, [r1, #20]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d006      	beq.n	8000bb8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000bb6:	e006      	b.n	8000bc6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bba:	699a      	ldr	r2, [r3, #24]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4904      	ldr	r1, [pc, #16]	@ (8000bd4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	618b      	str	r3, [r1, #24]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	220f      	movs	r2, #15
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000bfc:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <SYSCFG_EXTILineConfig+0x80>)
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3302      	adds	r3, #2
 8000c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <SYSCFG_EXTILineConfig+0x80>)
 8000c10:	79b9      	ldrb	r1, [r7, #6]
 8000c12:	0889      	lsrs	r1, r1, #2
 8000c14:	b2c9      	uxtb	r1, r1
 8000c16:	401a      	ands	r2, r3
 8000c18:	1c8b      	adds	r3, r1, #2
 8000c1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <SYSCFG_EXTILineConfig+0x80>)
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c2c:	79f9      	ldrb	r1, [r7, #7]
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <SYSCFG_EXTILineConfig+0x80>)
 8000c3c:	79b9      	ldrb	r1, [r7, #6]
 8000c3e:	0889      	lsrs	r1, r1, #2
 8000c40:	b2c9      	uxtb	r1, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	1c8b      	adds	r3, r1, #2
 8000c46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40010000 	.word	0x40010000

08000c5c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	@ 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d103      	bne.n	8000cca <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	e005      	b.n	8000cd6 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d102      	bne.n	8000cd6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ce8:	e006      	b.n	8000cf8 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	@ 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69da      	ldr	r2, [r3, #28]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e001      	b.n	8000d28 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b087      	sub	sp, #28
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000d60:	2201      	movs	r2, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d105      	bne.n	8000d7c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	4013      	ands	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e00d      	b.n	8000d98 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d105      	bne.n	8000d8e <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e004      	b.n	8000d98 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4013      	ands	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	0c1b      	lsrs	r3, r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <USART_GetITStatus+0x8e>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	74fb      	strb	r3, [r7, #19]
 8000dc2:	e001      	b.n	8000dc8 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	2201      	movs	r2, #1
 8000dea:	fa02 f103 	lsl.w	r1, r2, r3
 8000dee:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <NVIC_EnableIRQ+0x30>)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	095b      	lsrs	r3, r3, #5
 8000df6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <uart_put_char+0x30>)
 8000e1e:	f7ff ff1d 	bl	8000c5c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000e22:	bf00      	nop
 8000e24:	2180      	movs	r1, #128	@ 0x80
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <uart_put_char+0x30>)
 8000e28:	f7ff ff6c 	bl	8000d04 <USART_GetFlagStatus>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f8      	beq.n	8000e24 <uart_put_char+0x18>
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40004400 	.word	0x40004400

08000e40 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e012      	b.n	8000e7a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b0a      	cmp	r3, #10
 8000e5e:	d102      	bne.n	8000e66 <_write_r+0x26>
            uart_put_char('\r');
 8000e60:	200d      	movs	r0, #13
 8000e62:	f7ff ffd3 	bl	8000e0c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ffcc 	bl	8000e0c <uart_put_char>
    for (n = 0; n < len; n++) {
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbe8      	blt.n	8000e54 <_write_r+0x14>
    }

    return len;
 8000e82:	683b      	ldr	r3, [r7, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000e90:	4915      	ldr	r1, [pc, #84]	@ (8000ee8 <USART2_IRQHandler+0x5c>)
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <USART2_IRQHandler+0x60>)
 8000e94:	f7ff ff4f 	bl	8000d36 <USART_GetITStatus>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d021      	beq.n	8000ee2 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <USART2_IRQHandler+0x60>)
 8000ea0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ea2:	b299      	uxth	r1, r3
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <USART2_IRQHandler+0x64>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	b2d0      	uxtb	r0, r2
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <USART2_IRQHandler+0x64>)
 8000eb0:	7010      	strb	r0, [r2, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <USART2_IRQHandler+0x68>)
 8000eb8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <USART2_IRQHandler+0x6c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2bff      	cmp	r3, #255	@ 0xff
 8000ec2:	d107      	bne.n	8000ed4 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <USART2_IRQHandler+0x70>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <USART2_IRQHandler+0x70>)
 8000ed0:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000ed2:	e006      	b.n	8000ee2 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <USART2_IRQHandler+0x6c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <USART2_IRQHandler+0x6c>)
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	00050105 	.word	0x00050105
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	20000178 	.word	0x20000178
 8000ef4:	20000078 	.word	0x20000078
 8000ef8:	2000017a 	.word	0x2000017a
 8000efc:	20000179 	.word	0x20000179

08000f00 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	@ 0x50
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000f08:	4b86      	ldr	r3, [pc, #536]	@ (8001124 <uart_init+0x224>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fcc7 	bl	80018a4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000f16:	4b83      	ldr	r3, [pc, #524]	@ (8001124 <uart_init+0x224>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fcc0 	bl	80018a4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000f24:	4b80      	ldr	r3, [pc, #512]	@ (8001128 <uart_init+0x228>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a7f      	ldr	r2, [pc, #508]	@ (8001128 <uart_init+0x228>)
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000f30:	4b7d      	ldr	r3, [pc, #500]	@ (8001128 <uart_init+0x228>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a7c      	ldr	r2, [pc, #496]	@ (8001128 <uart_init+0x228>)
 8000f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f4a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000f4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f5a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000f6a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000f6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f76:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000f7a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000f7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f8a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f96:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000f9a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000f9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fa8:	f023 030c 	bic.w	r3, r3, #12
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000fb0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fb8:	8892      	ldrh	r2, [r2, #4]
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000fbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000fcc:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000fce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fd8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000fdc:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000fde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fe8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000fec:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000fee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ff8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000ffc:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <uart_init+0x22c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a4a      	ldr	r2, [pc, #296]	@ (800112c <uart_init+0x22c>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800100a:	4b48      	ldr	r3, [pc, #288]	@ (800112c <uart_init+0x22c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4a47      	ldr	r2, [pc, #284]	@ (800112c <uart_init+0x22c>)
 8001010:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001014:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001016:	4b45      	ldr	r3, [pc, #276]	@ (800112c <uart_init+0x22c>)
 8001018:	4a44      	ldr	r2, [pc, #272]	@ (800112c <uart_init+0x22c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800101e:	4b43      	ldr	r3, [pc, #268]	@ (800112c <uart_init+0x22c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a42      	ldr	r2, [pc, #264]	@ (800112c <uart_init+0x22c>)
 8001024:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001028:	f023 030c 	bic.w	r3, r3, #12
 800102c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800102e:	4b3f      	ldr	r3, [pc, #252]	@ (800112c <uart_init+0x22c>)
 8001030:	4a3e      	ldr	r2, [pc, #248]	@ (800112c <uart_init+0x22c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <uart_init+0x22c>)
 8001038:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <uart_init+0x22c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <uart_init+0x22c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a3a      	ldr	r2, [pc, #232]	@ (800112c <uart_init+0x22c>)
 8001044:	f043 030c 	orr.w	r3, r3, #12
 8001048:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800104a:	4b38      	ldr	r3, [pc, #224]	@ (800112c <uart_init+0x22c>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a37      	ldr	r2, [pc, #220]	@ (800112c <uart_init+0x22c>)
 8001050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001054:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001056:	4b35      	ldr	r3, [pc, #212]	@ (800112c <uart_init+0x22c>)
 8001058:	4a34      	ldr	r2, [pc, #208]	@ (800112c <uart_init+0x22c>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001062:	2300      	movs	r3, #0
 8001064:	647b      	str	r3, [r7, #68]	@ 0x44
 8001066:	2300      	movs	r3, #0
 8001068:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fb5e 	bl	8000730 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001076:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001078:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <uart_init+0x22c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d010      	beq.n	80010a6 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001086:	005a      	lsls	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	fbb3 f2f2 	udiv	r2, r3, r2
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	fb01 f202 	mul.w	r2, r1, r2
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010a4:	e00d      	b.n	80010c2 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80010a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 80010b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	fb01 f202 	mul.w	r2, r1, r2
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d302      	bcc.n	80010d2 <uart_init+0x1d2>
        divider++;
 80010cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ce:	3301      	adds	r3, #1
 80010d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <uart_init+0x22c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80010de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80010e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010ea:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80010ee:	4013      	ands	r3, r2
 80010f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80010f2:	4313      	orrs	r3, r2
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <uart_init+0x22c>)
 80010f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010fa:	b292      	uxth	r2, r2
 80010fc:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <uart_init+0x22c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <uart_init+0x22c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800110a:	2201      	movs	r2, #1
 800110c:	4908      	ldr	r1, [pc, #32]	@ (8001130 <uart_init+0x230>)
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <uart_init+0x22c>)
 8001110:	f7ff fdb6 	bl	8000c80 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001114:	2026      	movs	r0, #38	@ 0x26
 8001116:	f7ff fe5f 	bl	8000dd8 <NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	@ 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000000c 	.word	0x2000000c
 8001128:	40021000 	.word	0x40021000
 800112c:	40004400 	.word	0x40004400
 8001130:	00050105 	.word	0x00050105

08001134 <iniEXTIA4>:
 */

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h"

void iniEXTIA4(){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 800113a:	2101      	movs	r1, #1
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff fd2b 	bl	8000b98 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 8001142:	2104      	movs	r1, #4
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fd47 	bl	8000bd8 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 800114a:	2304      	movs	r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 800114e:	2301      	movs	r3, #1
 8001150:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 8001152:	2300      	movs	r3, #0
 8001154:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 8001156:	2308      	movs	r3, #8
 8001158:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f832 	bl	80001c8 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001164:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 8001168:	f7ff fa6a 	bl	8000640 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 800116c:	230a      	movs	r3, #10
 800116e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 8001170:	2301      	movs	r3, #1
 8001172:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fa72 	bl	8000668 <NVIC_Init>

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001190:	2004      	movs	r0, #4
 8001192:	f7ff f91f 	bl	80003d4 <EXTI_GetITStatus>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
        setLED('r');
 800119c:	2072      	movs	r0, #114	@ 0x72
 800119e:	f000 f8f3 	bl	8001388 <setLED>
        EXTI_ClearITPendingBit(EXTI_Line4);
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff f94e 	bl	8000444 <EXTI_ClearITPendingBit>
    }

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 80011b2:	2101      	movs	r1, #1
 80011b4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80011b8:	f7ff fcce 	bl	8000b58 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 80011bc:	2101      	movs	r1, #1
 80011be:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011c2:	f7ff fcc9 	bl	8000b58 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 80011c6:	2101      	movs	r1, #1
 80011c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80011cc:	f7ff fcc4 	bl	8000b58 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 80011d0:	463b      	mov	r3, r7
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9e6 	bl	80005a4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 80011d8:	2300      	movs	r3, #0
 80011da:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 80011dc:	2302      	movs	r3, #2
 80011de:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 80011e0:	2310      	movs	r3, #16
 80011e2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f7ff f944 	bl	8000478 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 80011f0:	463b      	mov	r3, r7
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f9d6 	bl	80005a4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 80011f8:	2300      	movs	r3, #0
 80011fa:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 80011fc:	2302      	movs	r3, #2
 80011fe:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8001200:	2321      	movs	r3, #33	@ 0x21
 8001202:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	480a      	ldr	r0, [pc, #40]	@ (8001234 <initJoystick+0x88>)
 800120a:	f7ff f935 	bl	8000478 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 800120e:	463b      	mov	r3, r7
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9c7 	bl	80005a4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001216:	2300      	movs	r3, #0
 8001218:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800121a:	2302      	movs	r3, #2
 800121c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800121e:	2303      	movs	r3, #3
 8001220:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4804      	ldr	r0, [pc, #16]	@ (8001238 <initJoystick+0x8c>)
 8001228:	f7ff f926 	bl	8000478 <GPIO_Init>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800

0800123c <readJoystick>:


int8_t readJoystick(){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8001246:	2110      	movs	r1, #16
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f7ff f9c4 	bl	80005d8 <GPIO_ReadInputDataBit>
 8001250:	4603      	mov	r3, r0
 8001252:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8001254:	2120      	movs	r1, #32
 8001256:	4821      	ldr	r0, [pc, #132]	@ (80012dc <readJoystick+0xa0>)
 8001258:	f7ff f9be 	bl	80005d8 <GPIO_ReadInputDataBit>
 800125c:	4603      	mov	r3, r0
 800125e:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8001260:	2101      	movs	r1, #1
 8001262:	481e      	ldr	r0, [pc, #120]	@ (80012dc <readJoystick+0xa0>)
 8001264:	f7ff f9b8 	bl	80005d8 <GPIO_ReadInputDataBit>
 8001268:	4603      	mov	r3, r0
 800126a:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 800126c:	2102      	movs	r1, #2
 800126e:	481c      	ldr	r0, [pc, #112]	@ (80012e0 <readJoystick+0xa4>)
 8001270:	f7ff f9b2 	bl	80005d8 <GPIO_ReadInputDataBit>
 8001274:	4603      	mov	r3, r0
 8001276:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 8001278:	2101      	movs	r1, #1
 800127a:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <readJoystick+0xa4>)
 800127c:	f7ff f9ac 	bl	80005d8 <GPIO_ReadInputDataBit>
 8001280:	4603      	mov	r3, r0
 8001282:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 8001284:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <readJoystick+0x56>
		bit = Up;
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	e01e      	b.n	80012d0 <readJoystick+0x94>
	} else if (Down == 1){
 8001292:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d103      	bne.n	80012a2 <readJoystick+0x66>
		bit = Down << 1;
 800129a:	793b      	ldrb	r3, [r7, #4]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	e016      	b.n	80012d0 <readJoystick+0x94>
	} else if (Left == 1){
 80012a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d103      	bne.n	80012b2 <readJoystick+0x76>
		bit = Left << 2;
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	e00e      	b.n	80012d0 <readJoystick+0x94>
	} else if (Right == 1){
 80012b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d103      	bne.n	80012c2 <readJoystick+0x86>
		bit = Right << 3;
 80012ba:	78bb      	ldrb	r3, [r7, #2]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e006      	b.n	80012d0 <readJoystick+0x94>
	} else if (Center == 1){
 80012c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d102      	bne.n	80012d0 <readJoystick+0x94>
		bit = Center << 4;
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800

080012e4 <initLED>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLED() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 80012ea:	2101      	movs	r1, #1
 80012ec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80012f0:	f7ff fc32 	bl	8000b58 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 80012f4:	2101      	movs	r1, #1
 80012f6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80012fa:	f7ff fc2d 	bl	8000b58 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 80012fe:	2101      	movs	r1, #1
 8001300:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001304:	f7ff fc28 	bl	8000b58 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8001308:	463b      	mov	r3, r7
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f94a 	bl	80005a4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8001310:	2301      	movs	r3, #1
 8001312:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8001314:	2300      	movs	r3, #0
 8001316:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8001318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800131c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 800131e:	2302      	movs	r3, #2
 8001320:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f7ff f8a5 	bl	8000478 <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f937 	bl	80005a4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001336:	2301      	movs	r3, #1
 8001338:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 800133a:	2300      	movs	r3, #0
 800133c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 800133e:	2310      	movs	r3, #16
 8001340:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001342:	2302      	movs	r3, #2
 8001344:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <initLED+0x9c>)
 800134c:	f7ff f894 	bl	8000478 <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f926 	bl	80005a4 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001358:	2301      	movs	r3, #1
 800135a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 800135c:	2300      	movs	r3, #0
 800135e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001364:	2302      	movs	r3, #2
 8001366:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <initLED+0xa0>)
 800136e:	f7ff f883 	bl	8000478 <GPIO_Init>

	// Initialize LED to off
	setLED('d');
 8001372:	2064      	movs	r0, #100	@ 0x64
 8001374:	f000 f808 	bl	8001388 <setLED>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800

08001388 <setLED>:

void setLED(char sel) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b72      	cmp	r3, #114	@ 0x72
 8001396:	d111      	bne.n	80013bc <setLED+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001398:	2200      	movs	r2, #0
 800139a:	2110      	movs	r1, #16
 800139c:	4852      	ldr	r0, [pc, #328]	@ (80014e8 <setLED+0x160>)
 800139e:	f7ff f937 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80013a2:	2201      	movs	r2, #1
 80013a4:	2180      	movs	r1, #128	@ 0x80
 80013a6:	4851      	ldr	r0, [pc, #324]	@ (80014ec <setLED+0x164>)
 80013a8:	f7ff f932 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f7ff f92b 	bl	8000610 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 80013ba:	e091      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'g') {
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b67      	cmp	r3, #103	@ 0x67
 80013c0:	d111      	bne.n	80013e6 <setLED+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80013c2:	2201      	movs	r2, #1
 80013c4:	2110      	movs	r1, #16
 80013c6:	4848      	ldr	r0, [pc, #288]	@ (80014e8 <setLED+0x160>)
 80013c8:	f7ff f922 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80013cc:	2200      	movs	r2, #0
 80013ce:	2180      	movs	r1, #128	@ 0x80
 80013d0:	4846      	ldr	r0, [pc, #280]	@ (80014ec <setLED+0x164>)
 80013d2:	f7ff f91d 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e0:	f7ff f916 	bl	8000610 <GPIO_WriteBit>
}
 80013e4:	e07c      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'b') {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b62      	cmp	r3, #98	@ 0x62
 80013ea:	d111      	bne.n	8001410 <setLED+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80013ec:	2201      	movs	r2, #1
 80013ee:	2110      	movs	r1, #16
 80013f0:	483d      	ldr	r0, [pc, #244]	@ (80014e8 <setLED+0x160>)
 80013f2:	f7ff f90d 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80013f6:	2201      	movs	r2, #1
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	483c      	ldr	r0, [pc, #240]	@ (80014ec <setLED+0x164>)
 80013fc:	f7ff f908 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140a:	f7ff f901 	bl	8000610 <GPIO_WriteBit>
}
 800140e:	e067      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'c') {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b63      	cmp	r3, #99	@ 0x63
 8001414:	d111      	bne.n	800143a <setLED+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001416:	2201      	movs	r2, #1
 8001418:	2110      	movs	r1, #16
 800141a:	4833      	ldr	r0, [pc, #204]	@ (80014e8 <setLED+0x160>)
 800141c:	f7ff f8f8 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001420:	2200      	movs	r2, #0
 8001422:	2180      	movs	r1, #128	@ 0x80
 8001424:	4831      	ldr	r0, [pc, #196]	@ (80014ec <setLED+0x164>)
 8001426:	f7ff f8f3 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001434:	f7ff f8ec 	bl	8000610 <GPIO_WriteBit>
}
 8001438:	e052      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'm') {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b6d      	cmp	r3, #109	@ 0x6d
 800143e:	d111      	bne.n	8001464 <setLED+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	4828      	ldr	r0, [pc, #160]	@ (80014e8 <setLED+0x160>)
 8001446:	f7ff f8e3 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800144a:	2201      	movs	r2, #1
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	4827      	ldr	r0, [pc, #156]	@ (80014ec <setLED+0x164>)
 8001450:	f7ff f8de 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f7ff f8d7 	bl	8000610 <GPIO_WriteBit>
}
 8001462:	e03d      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'y') {
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b79      	cmp	r3, #121	@ 0x79
 8001468:	d111      	bne.n	800148e <setLED+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800146a:	2200      	movs	r2, #0
 800146c:	2110      	movs	r1, #16
 800146e:	481e      	ldr	r0, [pc, #120]	@ (80014e8 <setLED+0x160>)
 8001470:	f7ff f8ce 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001474:	2200      	movs	r2, #0
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	481c      	ldr	r0, [pc, #112]	@ (80014ec <setLED+0x164>)
 800147a:	f7ff f8c9 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001488:	f7ff f8c2 	bl	8000610 <GPIO_WriteBit>
}
 800148c:	e028      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'w') {
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b77      	cmp	r3, #119	@ 0x77
 8001492:	d111      	bne.n	80014b8 <setLED+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001494:	2200      	movs	r2, #0
 8001496:	2110      	movs	r1, #16
 8001498:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <setLED+0x160>)
 800149a:	f7ff f8b9 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 800149e:	2200      	movs	r2, #0
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	4812      	ldr	r0, [pc, #72]	@ (80014ec <setLED+0x164>)
 80014a4:	f7ff f8b4 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b2:	f7ff f8ad 	bl	8000610 <GPIO_WriteBit>
}
 80014b6:	e013      	b.n	80014e0 <setLED+0x158>
	} else if (sel == 'd') {
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2b64      	cmp	r3, #100	@ 0x64
 80014bc:	d110      	bne.n	80014e0 <setLED+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80014be:	2201      	movs	r2, #1
 80014c0:	2110      	movs	r1, #16
 80014c2:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <setLED+0x160>)
 80014c4:	f7ff f8a4 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80014c8:	2201      	movs	r2, #1
 80014ca:	2180      	movs	r1, #128	@ 0x80
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <setLED+0x164>)
 80014ce:	f7ff f89f 	bl	8000610 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014dc:	f7ff f898 	bl	8000610 <GPIO_WriteBit>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800

080014f0 <main>:
#include "30010_io.h" 		// Input/output library for this course
#include "joystick.h"
#include "led.h"
#include "interrupt.h"

int main(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 80014f6:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80014fa:	f7ff fd01 	bl	8000f00 <uart_init>

	initJoystick();
 80014fe:	f7ff fe55 	bl	80011ac <initJoystick>
	initLED();
 8001502:	f7ff feef 	bl	80012e4 <initLED>
	iniEXTIA4();
 8001506:	f7ff fe15 	bl	8001134 <iniEXTIA4>


	int8_t prev_state = readJoystick();
 800150a:	f7ff fe97 	bl	800123c <readJoystick>
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	int8_t current_state;

	while(1) {
 8001512:	bf00      	nop
 8001514:	e7fd      	b.n	8001512 <main+0x22>

08001516 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e00a      	b.n	800153e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001528:	f3af 8000 	nop.w
 800152c:	4601      	mov	r1, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	b2ca      	uxtb	r2, r1
 8001536:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbf0      	blt.n	8001528 <_read+0x12>
	}

return len;
 8001546:	687b      	ldr	r3, [r7, #4]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001578:	605a      	str	r2, [r3, #4]
	return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <SystemInit+0x84>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001628 <SystemInit+0x84>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <SystemInit+0x88>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a1b      	ldr	r2, [pc, #108]	@ (800162c <SystemInit+0x88>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80015c4:	4b19      	ldr	r3, [pc, #100]	@ (800162c <SystemInit+0x88>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4918      	ldr	r1, [pc, #96]	@ (800162c <SystemInit+0x88>)
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <SystemInit+0x8c>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <SystemInit+0x88>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a15      	ldr	r2, [pc, #84]	@ (800162c <SystemInit+0x88>)
 80015d6:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80015da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <SystemInit+0x88>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a11      	ldr	r2, [pc, #68]	@ (800162c <SystemInit+0x88>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <SystemInit+0x88>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <SystemInit+0x88>)
 80015f2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80015f6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <SystemInit+0x88>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <SystemInit+0x88>)
 80015fe:	f023 030f 	bic.w	r3, r3, #15
 8001602:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <SystemInit+0x88>)
 8001606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001608:	4908      	ldr	r1, [pc, #32]	@ (800162c <SystemInit+0x88>)
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <SystemInit+0x90>)
 800160c:	4013      	ands	r3, r2
 800160e:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <SystemInit+0x88>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001616:	f000 f80f 	bl	8001638 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800161a:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <SystemInit+0x84>)
 800161c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001620:	609a      	str	r2, [r3, #8]
#endif  
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00
 800162c:	40021000 	.word	0x40021000
 8001630:	f87fc00c 	.word	0xf87fc00c
 8001634:	ff00fccc 	.word	0xff00fccc

08001638 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <SetSysClock+0x8c>)
 800163e:	2212      	movs	r2, #18
 8001640:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <SetSysClock+0x90>)
 8001644:	4a20      	ldr	r2, [pc, #128]	@ (80016c8 <SetSysClock+0x90>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800164a:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <SetSysClock+0x90>)
 800164c:	4a1e      	ldr	r2, [pc, #120]	@ (80016c8 <SetSysClock+0x90>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <SetSysClock+0x90>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <SetSysClock+0x90>)
 8001658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <SetSysClock+0x90>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <SetSysClock+0x90>)
 8001664:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001668:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <SetSysClock+0x90>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <SetSysClock+0x90>)
 8001670:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 8001674:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <SetSysClock+0x90>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <SetSysClock+0x90>)
 800167c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001680:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001682:	bf00      	nop
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <SetSysClock+0x90>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f9      	beq.n	8001684 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <SetSysClock+0x90>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <SetSysClock+0x90>)
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <SetSysClock+0x90>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <SetSysClock+0x90>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80016a8:	bf00      	nop
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <SetSysClock+0x90>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d1f9      	bne.n	80016aa <SetSysClock+0x72>
  {
  }
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021000 	.word	0x40021000

080016cc <Reset_Handler>:
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <LoopForever+0x2>)
 80016ce:	4685      	mov	sp, r0
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <LoopForever+0x6>)
 80016d2:	490e      	ldr	r1, [pc, #56]	@ (800170c <LoopForever+0xa>)
 80016d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <LoopForever+0xe>)
 80016d6:	2300      	movs	r3, #0
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:
 80016da:	58d4      	ldr	r4, [r2, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:
 80016e0:	18c4      	adds	r4, r0, r3
 80016e2:	428c      	cmp	r4, r1
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
 80016e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <LoopForever+0x12>)
 80016e8:	4c0b      	ldr	r4, [pc, #44]	@ (8001718 <LoopForever+0x16>)
 80016ea:	2300      	movs	r3, #0
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:
 80016f2:	42a2      	cmp	r2, r4
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>
 80016f6:	f7ff ff55 	bl	80015a4 <SystemInit>
 80016fa:	f000 fa0f 	bl	8001b1c <__libc_init_array>
 80016fe:	f7ff fef7 	bl	80014f0 <main>

08001702 <LoopForever>:
 8001702:	e7fe      	b.n	8001702 <LoopForever>
 8001704:	20004000 	.word	0x20004000
 8001708:	20000000 	.word	0x20000000
 800170c:	2000005c 	.word	0x2000005c
 8001710:	08001fbc 	.word	0x08001fbc
 8001714:	2000005c 	.word	0x2000005c
 8001718:	200002cc 	.word	0x200002cc

0800171c <ADC1_2_IRQHandler>:
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <std>:
 8001720:	2300      	movs	r3, #0
 8001722:	b510      	push	{r4, lr}
 8001724:	4604      	mov	r4, r0
 8001726:	e9c0 3300 	strd	r3, r3, [r0]
 800172a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800172e:	6083      	str	r3, [r0, #8]
 8001730:	8181      	strh	r1, [r0, #12]
 8001732:	6643      	str	r3, [r0, #100]	@ 0x64
 8001734:	81c2      	strh	r2, [r0, #14]
 8001736:	6183      	str	r3, [r0, #24]
 8001738:	4619      	mov	r1, r3
 800173a:	2208      	movs	r2, #8
 800173c:	305c      	adds	r0, #92	@ 0x5c
 800173e:	f000 f9b0 	bl	8001aa2 <memset>
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <std+0x58>)
 8001744:	6263      	str	r3, [r4, #36]	@ 0x24
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <std+0x5c>)
 8001748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <std+0x60>)
 800174c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <std+0x64>)
 8001750:	6323      	str	r3, [r4, #48]	@ 0x30
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <std+0x68>)
 8001754:	6224      	str	r4, [r4, #32]
 8001756:	429c      	cmp	r4, r3
 8001758:	d006      	beq.n	8001768 <std+0x48>
 800175a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800175e:	4294      	cmp	r4, r2
 8001760:	d002      	beq.n	8001768 <std+0x48>
 8001762:	33d0      	adds	r3, #208	@ 0xd0
 8001764:	429c      	cmp	r4, r3
 8001766:	d105      	bne.n	8001774 <std+0x54>
 8001768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001770:	f000 b9f8 	b.w	8001b64 <__retarget_lock_init_recursive>
 8001774:	bd10      	pop	{r4, pc}
 8001776:	bf00      	nop
 8001778:	08001a1d 	.word	0x08001a1d
 800177c:	08001a3f 	.word	0x08001a3f
 8001780:	08001a77 	.word	0x08001a77
 8001784:	08001a9b 	.word	0x08001a9b
 8001788:	2000017c 	.word	0x2000017c

0800178c <stdio_exit_handler>:
 800178c:	4a02      	ldr	r2, [pc, #8]	@ (8001798 <stdio_exit_handler+0xc>)
 800178e:	4903      	ldr	r1, [pc, #12]	@ (800179c <stdio_exit_handler+0x10>)
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <stdio_exit_handler+0x14>)
 8001792:	f000 b869 	b.w	8001868 <_fwalk_sglue>
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000
 800179c:	08001e75 	.word	0x08001e75
 80017a0:	20000010 	.word	0x20000010

080017a4 <cleanup_stdio>:
 80017a4:	6841      	ldr	r1, [r0, #4]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <cleanup_stdio+0x34>)
 80017a8:	4299      	cmp	r1, r3
 80017aa:	b510      	push	{r4, lr}
 80017ac:	4604      	mov	r4, r0
 80017ae:	d001      	beq.n	80017b4 <cleanup_stdio+0x10>
 80017b0:	f000 fb60 	bl	8001e74 <_fflush_r>
 80017b4:	68a1      	ldr	r1, [r4, #8]
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <cleanup_stdio+0x38>)
 80017b8:	4299      	cmp	r1, r3
 80017ba:	d002      	beq.n	80017c2 <cleanup_stdio+0x1e>
 80017bc:	4620      	mov	r0, r4
 80017be:	f000 fb59 	bl	8001e74 <_fflush_r>
 80017c2:	68e1      	ldr	r1, [r4, #12]
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <cleanup_stdio+0x3c>)
 80017c6:	4299      	cmp	r1, r3
 80017c8:	d004      	beq.n	80017d4 <cleanup_stdio+0x30>
 80017ca:	4620      	mov	r0, r4
 80017cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d0:	f000 bb50 	b.w	8001e74 <_fflush_r>
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	bf00      	nop
 80017d8:	2000017c 	.word	0x2000017c
 80017dc:	200001e4 	.word	0x200001e4
 80017e0:	2000024c 	.word	0x2000024c

080017e4 <global_stdio_init.part.0>:
 80017e4:	b510      	push	{r4, lr}
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <global_stdio_init.part.0+0x30>)
 80017e8:	4c0b      	ldr	r4, [pc, #44]	@ (8001818 <global_stdio_init.part.0+0x34>)
 80017ea:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <global_stdio_init.part.0+0x38>)
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	4620      	mov	r0, r4
 80017f0:	2200      	movs	r2, #0
 80017f2:	2104      	movs	r1, #4
 80017f4:	f7ff ff94 	bl	8001720 <std>
 80017f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80017fc:	2201      	movs	r2, #1
 80017fe:	2109      	movs	r1, #9
 8001800:	f7ff ff8e 	bl	8001720 <std>
 8001804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001808:	2202      	movs	r2, #2
 800180a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180e:	2112      	movs	r1, #18
 8001810:	f7ff bf86 	b.w	8001720 <std>
 8001814:	200002b4 	.word	0x200002b4
 8001818:	2000017c 	.word	0x2000017c
 800181c:	0800178d 	.word	0x0800178d

08001820 <__sfp_lock_acquire>:
 8001820:	4801      	ldr	r0, [pc, #4]	@ (8001828 <__sfp_lock_acquire+0x8>)
 8001822:	f000 b9a0 	b.w	8001b66 <__retarget_lock_acquire_recursive>
 8001826:	bf00      	nop
 8001828:	200002bd 	.word	0x200002bd

0800182c <__sfp_lock_release>:
 800182c:	4801      	ldr	r0, [pc, #4]	@ (8001834 <__sfp_lock_release+0x8>)
 800182e:	f000 b99b 	b.w	8001b68 <__retarget_lock_release_recursive>
 8001832:	bf00      	nop
 8001834:	200002bd 	.word	0x200002bd

08001838 <__sinit>:
 8001838:	b510      	push	{r4, lr}
 800183a:	4604      	mov	r4, r0
 800183c:	f7ff fff0 	bl	8001820 <__sfp_lock_acquire>
 8001840:	6a23      	ldr	r3, [r4, #32]
 8001842:	b11b      	cbz	r3, 800184c <__sinit+0x14>
 8001844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001848:	f7ff bff0 	b.w	800182c <__sfp_lock_release>
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <__sinit+0x28>)
 800184e:	6223      	str	r3, [r4, #32]
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__sinit+0x2c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f5      	bne.n	8001844 <__sinit+0xc>
 8001858:	f7ff ffc4 	bl	80017e4 <global_stdio_init.part.0>
 800185c:	e7f2      	b.n	8001844 <__sinit+0xc>
 800185e:	bf00      	nop
 8001860:	080017a5 	.word	0x080017a5
 8001864:	200002b4 	.word	0x200002b4

08001868 <_fwalk_sglue>:
 8001868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800186c:	4607      	mov	r7, r0
 800186e:	4688      	mov	r8, r1
 8001870:	4614      	mov	r4, r2
 8001872:	2600      	movs	r6, #0
 8001874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001878:	f1b9 0901 	subs.w	r9, r9, #1
 800187c:	d505      	bpl.n	800188a <_fwalk_sglue+0x22>
 800187e:	6824      	ldr	r4, [r4, #0]
 8001880:	2c00      	cmp	r4, #0
 8001882:	d1f7      	bne.n	8001874 <_fwalk_sglue+0xc>
 8001884:	4630      	mov	r0, r6
 8001886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800188a:	89ab      	ldrh	r3, [r5, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d907      	bls.n	80018a0 <_fwalk_sglue+0x38>
 8001890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001894:	3301      	adds	r3, #1
 8001896:	d003      	beq.n	80018a0 <_fwalk_sglue+0x38>
 8001898:	4629      	mov	r1, r5
 800189a:	4638      	mov	r0, r7
 800189c:	47c0      	blx	r8
 800189e:	4306      	orrs	r6, r0
 80018a0:	3568      	adds	r5, #104	@ 0x68
 80018a2:	e7e9      	b.n	8001878 <_fwalk_sglue+0x10>

080018a4 <setbuf>:
 80018a4:	fab1 f281 	clz	r2, r1
 80018a8:	0952      	lsrs	r2, r2, #5
 80018aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ae:	0052      	lsls	r2, r2, #1
 80018b0:	f000 b800 	b.w	80018b4 <setvbuf>

080018b4 <setvbuf>:
 80018b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018b8:	461d      	mov	r5, r3
 80018ba:	4b57      	ldr	r3, [pc, #348]	@ (8001a18 <setvbuf+0x164>)
 80018bc:	681f      	ldr	r7, [r3, #0]
 80018be:	4604      	mov	r4, r0
 80018c0:	460e      	mov	r6, r1
 80018c2:	4690      	mov	r8, r2
 80018c4:	b127      	cbz	r7, 80018d0 <setvbuf+0x1c>
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	b913      	cbnz	r3, 80018d0 <setvbuf+0x1c>
 80018ca:	4638      	mov	r0, r7
 80018cc:	f7ff ffb4 	bl	8001838 <__sinit>
 80018d0:	f1b8 0f02 	cmp.w	r8, #2
 80018d4:	d006      	beq.n	80018e4 <setvbuf+0x30>
 80018d6:	f1b8 0f01 	cmp.w	r8, #1
 80018da:	f200 809a 	bhi.w	8001a12 <setvbuf+0x15e>
 80018de:	2d00      	cmp	r5, #0
 80018e0:	f2c0 8097 	blt.w	8001a12 <setvbuf+0x15e>
 80018e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018e6:	07d9      	lsls	r1, r3, #31
 80018e8:	d405      	bmi.n	80018f6 <setvbuf+0x42>
 80018ea:	89a3      	ldrh	r3, [r4, #12]
 80018ec:	059a      	lsls	r2, r3, #22
 80018ee:	d402      	bmi.n	80018f6 <setvbuf+0x42>
 80018f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018f2:	f000 f938 	bl	8001b66 <__retarget_lock_acquire_recursive>
 80018f6:	4621      	mov	r1, r4
 80018f8:	4638      	mov	r0, r7
 80018fa:	f000 fabb 	bl	8001e74 <_fflush_r>
 80018fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001900:	b141      	cbz	r1, 8001914 <setvbuf+0x60>
 8001902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001906:	4299      	cmp	r1, r3
 8001908:	d002      	beq.n	8001910 <setvbuf+0x5c>
 800190a:	4638      	mov	r0, r7
 800190c:	f000 f92e 	bl	8001b6c <_free_r>
 8001910:	2300      	movs	r3, #0
 8001912:	6363      	str	r3, [r4, #52]	@ 0x34
 8001914:	2300      	movs	r3, #0
 8001916:	61a3      	str	r3, [r4, #24]
 8001918:	6063      	str	r3, [r4, #4]
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	d503      	bpl.n	8001928 <setvbuf+0x74>
 8001920:	6921      	ldr	r1, [r4, #16]
 8001922:	4638      	mov	r0, r7
 8001924:	f000 f922 	bl	8001b6c <_free_r>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	f1b8 0f02 	cmp.w	r8, #2
 8001936:	81a3      	strh	r3, [r4, #12]
 8001938:	d061      	beq.n	80019fe <setvbuf+0x14a>
 800193a:	ab01      	add	r3, sp, #4
 800193c:	466a      	mov	r2, sp
 800193e:	4621      	mov	r1, r4
 8001940:	4638      	mov	r0, r7
 8001942:	f000 fabf 	bl	8001ec4 <__swhatbuf_r>
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	4318      	orrs	r0, r3
 800194a:	81a0      	strh	r0, [r4, #12]
 800194c:	bb2d      	cbnz	r5, 800199a <setvbuf+0xe6>
 800194e:	9d00      	ldr	r5, [sp, #0]
 8001950:	4628      	mov	r0, r5
 8001952:	f000 f955 	bl	8001c00 <malloc>
 8001956:	4606      	mov	r6, r0
 8001958:	2800      	cmp	r0, #0
 800195a:	d152      	bne.n	8001a02 <setvbuf+0x14e>
 800195c:	f8dd 9000 	ldr.w	r9, [sp]
 8001960:	45a9      	cmp	r9, r5
 8001962:	d140      	bne.n	80019e6 <setvbuf+0x132>
 8001964:	f04f 35ff 	mov.w	r5, #4294967295
 8001968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800196c:	f043 0202 	orr.w	r2, r3, #2
 8001970:	81a2      	strh	r2, [r4, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	60a2      	str	r2, [r4, #8]
 8001976:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800197a:	6022      	str	r2, [r4, #0]
 800197c:	6122      	str	r2, [r4, #16]
 800197e:	2201      	movs	r2, #1
 8001980:	6162      	str	r2, [r4, #20]
 8001982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001984:	07d6      	lsls	r6, r2, #31
 8001986:	d404      	bmi.n	8001992 <setvbuf+0xde>
 8001988:	0598      	lsls	r0, r3, #22
 800198a:	d402      	bmi.n	8001992 <setvbuf+0xde>
 800198c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800198e:	f000 f8eb 	bl	8001b68 <__retarget_lock_release_recursive>
 8001992:	4628      	mov	r0, r5
 8001994:	b003      	add	sp, #12
 8001996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800199a:	2e00      	cmp	r6, #0
 800199c:	d0d8      	beq.n	8001950 <setvbuf+0x9c>
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	b913      	cbnz	r3, 80019a8 <setvbuf+0xf4>
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff ff48 	bl	8001838 <__sinit>
 80019a8:	f1b8 0f01 	cmp.w	r8, #1
 80019ac:	bf08      	it	eq
 80019ae:	89a3      	ldrheq	r3, [r4, #12]
 80019b0:	6026      	str	r6, [r4, #0]
 80019b2:	bf04      	itt	eq
 80019b4:	f043 0301 	orreq.w	r3, r3, #1
 80019b8:	81a3      	strheq	r3, [r4, #12]
 80019ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019be:	f013 0208 	ands.w	r2, r3, #8
 80019c2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80019c6:	d01e      	beq.n	8001a06 <setvbuf+0x152>
 80019c8:	07d9      	lsls	r1, r3, #31
 80019ca:	bf41      	itttt	mi
 80019cc:	2200      	movmi	r2, #0
 80019ce:	426d      	negmi	r5, r5
 80019d0:	60a2      	strmi	r2, [r4, #8]
 80019d2:	61a5      	strmi	r5, [r4, #24]
 80019d4:	bf58      	it	pl
 80019d6:	60a5      	strpl	r5, [r4, #8]
 80019d8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019da:	07d2      	lsls	r2, r2, #31
 80019dc:	d401      	bmi.n	80019e2 <setvbuf+0x12e>
 80019de:	059b      	lsls	r3, r3, #22
 80019e0:	d513      	bpl.n	8001a0a <setvbuf+0x156>
 80019e2:	2500      	movs	r5, #0
 80019e4:	e7d5      	b.n	8001992 <setvbuf+0xde>
 80019e6:	4648      	mov	r0, r9
 80019e8:	f000 f90a 	bl	8001c00 <malloc>
 80019ec:	4606      	mov	r6, r0
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d0b8      	beq.n	8001964 <setvbuf+0xb0>
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f8:	81a3      	strh	r3, [r4, #12]
 80019fa:	464d      	mov	r5, r9
 80019fc:	e7cf      	b.n	800199e <setvbuf+0xea>
 80019fe:	2500      	movs	r5, #0
 8001a00:	e7b2      	b.n	8001968 <setvbuf+0xb4>
 8001a02:	46a9      	mov	r9, r5
 8001a04:	e7f5      	b.n	80019f2 <setvbuf+0x13e>
 8001a06:	60a2      	str	r2, [r4, #8]
 8001a08:	e7e6      	b.n	80019d8 <setvbuf+0x124>
 8001a0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a0c:	f000 f8ac 	bl	8001b68 <__retarget_lock_release_recursive>
 8001a10:	e7e7      	b.n	80019e2 <setvbuf+0x12e>
 8001a12:	f04f 35ff 	mov.w	r5, #4294967295
 8001a16:	e7bc      	b.n	8001992 <setvbuf+0xde>
 8001a18:	2000000c 	.word	0x2000000c

08001a1c <__sread>:
 8001a1c:	b510      	push	{r4, lr}
 8001a1e:	460c      	mov	r4, r1
 8001a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a24:	f000 f868 	bl	8001af8 <_read_r>
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	bfab      	itete	ge
 8001a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a30:	181b      	addge	r3, r3, r0
 8001a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a36:	bfac      	ite	ge
 8001a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a3a:	81a3      	strhlt	r3, [r4, #12]
 8001a3c:	bd10      	pop	{r4, pc}

08001a3e <__swrite>:
 8001a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a42:	461f      	mov	r7, r3
 8001a44:	898b      	ldrh	r3, [r1, #12]
 8001a46:	05db      	lsls	r3, r3, #23
 8001a48:	4605      	mov	r5, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	4616      	mov	r6, r2
 8001a4e:	d505      	bpl.n	8001a5c <__swrite+0x1e>
 8001a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a54:	2302      	movs	r3, #2
 8001a56:	2200      	movs	r2, #0
 8001a58:	f000 f83c 	bl	8001ad4 <_lseek_r>
 8001a5c:	89a3      	ldrh	r3, [r4, #12]
 8001a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a66:	81a3      	strh	r3, [r4, #12]
 8001a68:	4632      	mov	r2, r6
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a72:	f7ff b9e5 	b.w	8000e40 <_write_r>

08001a76 <__sseek>:
 8001a76:	b510      	push	{r4, lr}
 8001a78:	460c      	mov	r4, r1
 8001a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a7e:	f000 f829 	bl	8001ad4 <_lseek_r>
 8001a82:	1c43      	adds	r3, r0, #1
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	bf15      	itete	ne
 8001a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a92:	81a3      	strheq	r3, [r4, #12]
 8001a94:	bf18      	it	ne
 8001a96:	81a3      	strhne	r3, [r4, #12]
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <__sclose>:
 8001a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9e:	f000 b809 	b.w	8001ab4 <_close_r>

08001aa2 <memset>:
 8001aa2:	4402      	add	r2, r0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d100      	bne.n	8001aac <memset+0xa>
 8001aaa:	4770      	bx	lr
 8001aac:	f803 1b01 	strb.w	r1, [r3], #1
 8001ab0:	e7f9      	b.n	8001aa6 <memset+0x4>
	...

08001ab4 <_close_r>:
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	4d06      	ldr	r5, [pc, #24]	@ (8001ad0 <_close_r+0x1c>)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	602b      	str	r3, [r5, #0]
 8001ac0:	f7ff fd46 	bl	8001550 <_close>
 8001ac4:	1c43      	adds	r3, r0, #1
 8001ac6:	d102      	bne.n	8001ace <_close_r+0x1a>
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	b103      	cbz	r3, 8001ace <_close_r+0x1a>
 8001acc:	6023      	str	r3, [r4, #0]
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	200002b8 	.word	0x200002b8

08001ad4 <_lseek_r>:
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	4d07      	ldr	r5, [pc, #28]	@ (8001af4 <_lseek_r+0x20>)
 8001ad8:	4604      	mov	r4, r0
 8001ada:	4608      	mov	r0, r1
 8001adc:	4611      	mov	r1, r2
 8001ade:	2200      	movs	r2, #0
 8001ae0:	602a      	str	r2, [r5, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f7ff fd50 	bl	8001588 <_lseek>
 8001ae8:	1c43      	adds	r3, r0, #1
 8001aea:	d102      	bne.n	8001af2 <_lseek_r+0x1e>
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	b103      	cbz	r3, 8001af2 <_lseek_r+0x1e>
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	bd38      	pop	{r3, r4, r5, pc}
 8001af4:	200002b8 	.word	0x200002b8

08001af8 <_read_r>:
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4d07      	ldr	r5, [pc, #28]	@ (8001b18 <_read_r+0x20>)
 8001afc:	4604      	mov	r4, r0
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	2200      	movs	r2, #0
 8001b04:	602a      	str	r2, [r5, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f7ff fd05 	bl	8001516 <_read>
 8001b0c:	1c43      	adds	r3, r0, #1
 8001b0e:	d102      	bne.n	8001b16 <_read_r+0x1e>
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	b103      	cbz	r3, 8001b16 <_read_r+0x1e>
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	bd38      	pop	{r3, r4, r5, pc}
 8001b18:	200002b8 	.word	0x200002b8

08001b1c <__libc_init_array>:
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8001b54 <__libc_init_array+0x38>)
 8001b20:	4c0d      	ldr	r4, [pc, #52]	@ (8001b58 <__libc_init_array+0x3c>)
 8001b22:	1b64      	subs	r4, r4, r5
 8001b24:	10a4      	asrs	r4, r4, #2
 8001b26:	2600      	movs	r6, #0
 8001b28:	42a6      	cmp	r6, r4
 8001b2a:	d109      	bne.n	8001b40 <__libc_init_array+0x24>
 8001b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8001b5c <__libc_init_array+0x40>)
 8001b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8001b60 <__libc_init_array+0x44>)
 8001b30:	f000 fa1e 	bl	8001f70 <_init>
 8001b34:	1b64      	subs	r4, r4, r5
 8001b36:	10a4      	asrs	r4, r4, #2
 8001b38:	2600      	movs	r6, #0
 8001b3a:	42a6      	cmp	r6, r4
 8001b3c:	d105      	bne.n	8001b4a <__libc_init_array+0x2e>
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b44:	4798      	blx	r3
 8001b46:	3601      	adds	r6, #1
 8001b48:	e7ee      	b.n	8001b28 <__libc_init_array+0xc>
 8001b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4e:	4798      	blx	r3
 8001b50:	3601      	adds	r6, #1
 8001b52:	e7f2      	b.n	8001b3a <__libc_init_array+0x1e>
 8001b54:	08001fb4 	.word	0x08001fb4
 8001b58:	08001fb4 	.word	0x08001fb4
 8001b5c:	08001fb4 	.word	0x08001fb4
 8001b60:	08001fb8 	.word	0x08001fb8

08001b64 <__retarget_lock_init_recursive>:
 8001b64:	4770      	bx	lr

08001b66 <__retarget_lock_acquire_recursive>:
 8001b66:	4770      	bx	lr

08001b68 <__retarget_lock_release_recursive>:
 8001b68:	4770      	bx	lr
	...

08001b6c <_free_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4605      	mov	r5, r0
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d041      	beq.n	8001bf8 <_free_r+0x8c>
 8001b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b78:	1f0c      	subs	r4, r1, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfb8      	it	lt
 8001b7e:	18e4      	addlt	r4, r4, r3
 8001b80:	f000 f8e8 	bl	8001d54 <__malloc_lock>
 8001b84:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <_free_r+0x90>)
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	b933      	cbnz	r3, 8001b98 <_free_r+0x2c>
 8001b8a:	6063      	str	r3, [r4, #4]
 8001b8c:	6014      	str	r4, [r2, #0]
 8001b8e:	4628      	mov	r0, r5
 8001b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b94:	f000 b8e4 	b.w	8001d60 <__malloc_unlock>
 8001b98:	42a3      	cmp	r3, r4
 8001b9a:	d908      	bls.n	8001bae <_free_r+0x42>
 8001b9c:	6820      	ldr	r0, [r4, #0]
 8001b9e:	1821      	adds	r1, r4, r0
 8001ba0:	428b      	cmp	r3, r1
 8001ba2:	bf01      	itttt	eq
 8001ba4:	6819      	ldreq	r1, [r3, #0]
 8001ba6:	685b      	ldreq	r3, [r3, #4]
 8001ba8:	1809      	addeq	r1, r1, r0
 8001baa:	6021      	streq	r1, [r4, #0]
 8001bac:	e7ed      	b.n	8001b8a <_free_r+0x1e>
 8001bae:	461a      	mov	r2, r3
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	b10b      	cbz	r3, 8001bb8 <_free_r+0x4c>
 8001bb4:	42a3      	cmp	r3, r4
 8001bb6:	d9fa      	bls.n	8001bae <_free_r+0x42>
 8001bb8:	6811      	ldr	r1, [r2, #0]
 8001bba:	1850      	adds	r0, r2, r1
 8001bbc:	42a0      	cmp	r0, r4
 8001bbe:	d10b      	bne.n	8001bd8 <_free_r+0x6c>
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	4401      	add	r1, r0
 8001bc4:	1850      	adds	r0, r2, r1
 8001bc6:	4283      	cmp	r3, r0
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	d1e0      	bne.n	8001b8e <_free_r+0x22>
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6053      	str	r3, [r2, #4]
 8001bd2:	4408      	add	r0, r1
 8001bd4:	6010      	str	r0, [r2, #0]
 8001bd6:	e7da      	b.n	8001b8e <_free_r+0x22>
 8001bd8:	d902      	bls.n	8001be0 <_free_r+0x74>
 8001bda:	230c      	movs	r3, #12
 8001bdc:	602b      	str	r3, [r5, #0]
 8001bde:	e7d6      	b.n	8001b8e <_free_r+0x22>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	1821      	adds	r1, r4, r0
 8001be4:	428b      	cmp	r3, r1
 8001be6:	bf04      	itt	eq
 8001be8:	6819      	ldreq	r1, [r3, #0]
 8001bea:	685b      	ldreq	r3, [r3, #4]
 8001bec:	6063      	str	r3, [r4, #4]
 8001bee:	bf04      	itt	eq
 8001bf0:	1809      	addeq	r1, r1, r0
 8001bf2:	6021      	streq	r1, [r4, #0]
 8001bf4:	6054      	str	r4, [r2, #4]
 8001bf6:	e7ca      	b.n	8001b8e <_free_r+0x22>
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200002c4 	.word	0x200002c4

08001c00 <malloc>:
 8001c00:	4b02      	ldr	r3, [pc, #8]	@ (8001c0c <malloc+0xc>)
 8001c02:	4601      	mov	r1, r0
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f000 b825 	b.w	8001c54 <_malloc_r>
 8001c0a:	bf00      	nop
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <sbrk_aligned>:
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4e0f      	ldr	r6, [pc, #60]	@ (8001c50 <sbrk_aligned+0x40>)
 8001c14:	460c      	mov	r4, r1
 8001c16:	6831      	ldr	r1, [r6, #0]
 8001c18:	4605      	mov	r5, r0
 8001c1a:	b911      	cbnz	r1, 8001c22 <sbrk_aligned+0x12>
 8001c1c:	f000 f98a 	bl	8001f34 <_sbrk_r>
 8001c20:	6030      	str	r0, [r6, #0]
 8001c22:	4621      	mov	r1, r4
 8001c24:	4628      	mov	r0, r5
 8001c26:	f000 f985 	bl	8001f34 <_sbrk_r>
 8001c2a:	1c43      	adds	r3, r0, #1
 8001c2c:	d103      	bne.n	8001c36 <sbrk_aligned+0x26>
 8001c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001c32:	4620      	mov	r0, r4
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
 8001c36:	1cc4      	adds	r4, r0, #3
 8001c38:	f024 0403 	bic.w	r4, r4, #3
 8001c3c:	42a0      	cmp	r0, r4
 8001c3e:	d0f8      	beq.n	8001c32 <sbrk_aligned+0x22>
 8001c40:	1a21      	subs	r1, r4, r0
 8001c42:	4628      	mov	r0, r5
 8001c44:	f000 f976 	bl	8001f34 <_sbrk_r>
 8001c48:	3001      	adds	r0, #1
 8001c4a:	d1f2      	bne.n	8001c32 <sbrk_aligned+0x22>
 8001c4c:	e7ef      	b.n	8001c2e <sbrk_aligned+0x1e>
 8001c4e:	bf00      	nop
 8001c50:	200002c0 	.word	0x200002c0

08001c54 <_malloc_r>:
 8001c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c58:	1ccd      	adds	r5, r1, #3
 8001c5a:	f025 0503 	bic.w	r5, r5, #3
 8001c5e:	3508      	adds	r5, #8
 8001c60:	2d0c      	cmp	r5, #12
 8001c62:	bf38      	it	cc
 8001c64:	250c      	movcc	r5, #12
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	4606      	mov	r6, r0
 8001c6a:	db01      	blt.n	8001c70 <_malloc_r+0x1c>
 8001c6c:	42a9      	cmp	r1, r5
 8001c6e:	d904      	bls.n	8001c7a <_malloc_r+0x26>
 8001c70:	230c      	movs	r3, #12
 8001c72:	6033      	str	r3, [r6, #0]
 8001c74:	2000      	movs	r0, #0
 8001c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d50 <_malloc_r+0xfc>
 8001c7e:	f000 f869 	bl	8001d54 <__malloc_lock>
 8001c82:	f8d8 3000 	ldr.w	r3, [r8]
 8001c86:	461c      	mov	r4, r3
 8001c88:	bb44      	cbnz	r4, 8001cdc <_malloc_r+0x88>
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f7ff ffbf 	bl	8001c10 <sbrk_aligned>
 8001c92:	1c43      	adds	r3, r0, #1
 8001c94:	4604      	mov	r4, r0
 8001c96:	d158      	bne.n	8001d4a <_malloc_r+0xf6>
 8001c98:	f8d8 4000 	ldr.w	r4, [r8]
 8001c9c:	4627      	mov	r7, r4
 8001c9e:	2f00      	cmp	r7, #0
 8001ca0:	d143      	bne.n	8001d2a <_malloc_r+0xd6>
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d04b      	beq.n	8001d3e <_malloc_r+0xea>
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	4639      	mov	r1, r7
 8001caa:	4630      	mov	r0, r6
 8001cac:	eb04 0903 	add.w	r9, r4, r3
 8001cb0:	f000 f940 	bl	8001f34 <_sbrk_r>
 8001cb4:	4581      	cmp	r9, r0
 8001cb6:	d142      	bne.n	8001d3e <_malloc_r+0xea>
 8001cb8:	6821      	ldr	r1, [r4, #0]
 8001cba:	1a6d      	subs	r5, r5, r1
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f7ff ffa6 	bl	8001c10 <sbrk_aligned>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d03a      	beq.n	8001d3e <_malloc_r+0xea>
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	442b      	add	r3, r5
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	f8d8 3000 	ldr.w	r3, [r8]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	bb62      	cbnz	r2, 8001d30 <_malloc_r+0xdc>
 8001cd6:	f8c8 7000 	str.w	r7, [r8]
 8001cda:	e00f      	b.n	8001cfc <_malloc_r+0xa8>
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	1b52      	subs	r2, r2, r5
 8001ce0:	d420      	bmi.n	8001d24 <_malloc_r+0xd0>
 8001ce2:	2a0b      	cmp	r2, #11
 8001ce4:	d917      	bls.n	8001d16 <_malloc_r+0xc2>
 8001ce6:	1961      	adds	r1, r4, r5
 8001ce8:	42a3      	cmp	r3, r4
 8001cea:	6025      	str	r5, [r4, #0]
 8001cec:	bf18      	it	ne
 8001cee:	6059      	strne	r1, [r3, #4]
 8001cf0:	6863      	ldr	r3, [r4, #4]
 8001cf2:	bf08      	it	eq
 8001cf4:	f8c8 1000 	streq.w	r1, [r8]
 8001cf8:	5162      	str	r2, [r4, r5]
 8001cfa:	604b      	str	r3, [r1, #4]
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f000 f82f 	bl	8001d60 <__malloc_unlock>
 8001d02:	f104 000b 	add.w	r0, r4, #11
 8001d06:	1d23      	adds	r3, r4, #4
 8001d08:	f020 0007 	bic.w	r0, r0, #7
 8001d0c:	1ac2      	subs	r2, r0, r3
 8001d0e:	bf1c      	itt	ne
 8001d10:	1a1b      	subne	r3, r3, r0
 8001d12:	50a3      	strne	r3, [r4, r2]
 8001d14:	e7af      	b.n	8001c76 <_malloc_r+0x22>
 8001d16:	6862      	ldr	r2, [r4, #4]
 8001d18:	42a3      	cmp	r3, r4
 8001d1a:	bf0c      	ite	eq
 8001d1c:	f8c8 2000 	streq.w	r2, [r8]
 8001d20:	605a      	strne	r2, [r3, #4]
 8001d22:	e7eb      	b.n	8001cfc <_malloc_r+0xa8>
 8001d24:	4623      	mov	r3, r4
 8001d26:	6864      	ldr	r4, [r4, #4]
 8001d28:	e7ae      	b.n	8001c88 <_malloc_r+0x34>
 8001d2a:	463c      	mov	r4, r7
 8001d2c:	687f      	ldr	r7, [r7, #4]
 8001d2e:	e7b6      	b.n	8001c9e <_malloc_r+0x4a>
 8001d30:	461a      	mov	r2, r3
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	42a3      	cmp	r3, r4
 8001d36:	d1fb      	bne.n	8001d30 <_malloc_r+0xdc>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	6053      	str	r3, [r2, #4]
 8001d3c:	e7de      	b.n	8001cfc <_malloc_r+0xa8>
 8001d3e:	230c      	movs	r3, #12
 8001d40:	6033      	str	r3, [r6, #0]
 8001d42:	4630      	mov	r0, r6
 8001d44:	f000 f80c 	bl	8001d60 <__malloc_unlock>
 8001d48:	e794      	b.n	8001c74 <_malloc_r+0x20>
 8001d4a:	6005      	str	r5, [r0, #0]
 8001d4c:	e7d6      	b.n	8001cfc <_malloc_r+0xa8>
 8001d4e:	bf00      	nop
 8001d50:	200002c4 	.word	0x200002c4

08001d54 <__malloc_lock>:
 8001d54:	4801      	ldr	r0, [pc, #4]	@ (8001d5c <__malloc_lock+0x8>)
 8001d56:	f7ff bf06 	b.w	8001b66 <__retarget_lock_acquire_recursive>
 8001d5a:	bf00      	nop
 8001d5c:	200002bc 	.word	0x200002bc

08001d60 <__malloc_unlock>:
 8001d60:	4801      	ldr	r0, [pc, #4]	@ (8001d68 <__malloc_unlock+0x8>)
 8001d62:	f7ff bf01 	b.w	8001b68 <__retarget_lock_release_recursive>
 8001d66:	bf00      	nop
 8001d68:	200002bc 	.word	0x200002bc

08001d6c <__sflush_r>:
 8001d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	0716      	lsls	r6, r2, #28
 8001d76:	4605      	mov	r5, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	d454      	bmi.n	8001e26 <__sflush_r+0xba>
 8001d7c:	684b      	ldr	r3, [r1, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	dc02      	bgt.n	8001d88 <__sflush_r+0x1c>
 8001d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	dd48      	ble.n	8001e1a <__sflush_r+0xae>
 8001d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	d045      	beq.n	8001e1a <__sflush_r+0xae>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d94:	682f      	ldr	r7, [r5, #0]
 8001d96:	6a21      	ldr	r1, [r4, #32]
 8001d98:	602b      	str	r3, [r5, #0]
 8001d9a:	d030      	beq.n	8001dfe <__sflush_r+0x92>
 8001d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d9e:	89a3      	ldrh	r3, [r4, #12]
 8001da0:	0759      	lsls	r1, r3, #29
 8001da2:	d505      	bpl.n	8001db0 <__sflush_r+0x44>
 8001da4:	6863      	ldr	r3, [r4, #4]
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001daa:	b10b      	cbz	r3, 8001db0 <__sflush_r+0x44>
 8001dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001db4:	6a21      	ldr	r1, [r4, #32]
 8001db6:	4628      	mov	r0, r5
 8001db8:	47b0      	blx	r6
 8001dba:	1c43      	adds	r3, r0, #1
 8001dbc:	89a3      	ldrh	r3, [r4, #12]
 8001dbe:	d106      	bne.n	8001dce <__sflush_r+0x62>
 8001dc0:	6829      	ldr	r1, [r5, #0]
 8001dc2:	291d      	cmp	r1, #29
 8001dc4:	d82b      	bhi.n	8001e1e <__sflush_r+0xb2>
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001e70 <__sflush_r+0x104>)
 8001dc8:	40ca      	lsrs	r2, r1
 8001dca:	07d6      	lsls	r6, r2, #31
 8001dcc:	d527      	bpl.n	8001e1e <__sflush_r+0xb2>
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6062      	str	r2, [r4, #4]
 8001dd2:	04d9      	lsls	r1, r3, #19
 8001dd4:	6922      	ldr	r2, [r4, #16]
 8001dd6:	6022      	str	r2, [r4, #0]
 8001dd8:	d504      	bpl.n	8001de4 <__sflush_r+0x78>
 8001dda:	1c42      	adds	r2, r0, #1
 8001ddc:	d101      	bne.n	8001de2 <__sflush_r+0x76>
 8001dde:	682b      	ldr	r3, [r5, #0]
 8001de0:	b903      	cbnz	r3, 8001de4 <__sflush_r+0x78>
 8001de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001de6:	602f      	str	r7, [r5, #0]
 8001de8:	b1b9      	cbz	r1, 8001e1a <__sflush_r+0xae>
 8001dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001dee:	4299      	cmp	r1, r3
 8001df0:	d002      	beq.n	8001df8 <__sflush_r+0x8c>
 8001df2:	4628      	mov	r0, r5
 8001df4:	f7ff feba 	bl	8001b6c <_free_r>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dfc:	e00d      	b.n	8001e1a <__sflush_r+0xae>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	4628      	mov	r0, r5
 8001e02:	47b0      	blx	r6
 8001e04:	4602      	mov	r2, r0
 8001e06:	1c50      	adds	r0, r2, #1
 8001e08:	d1c9      	bne.n	8001d9e <__sflush_r+0x32>
 8001e0a:	682b      	ldr	r3, [r5, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0c6      	beq.n	8001d9e <__sflush_r+0x32>
 8001e10:	2b1d      	cmp	r3, #29
 8001e12:	d001      	beq.n	8001e18 <__sflush_r+0xac>
 8001e14:	2b16      	cmp	r3, #22
 8001e16:	d11e      	bne.n	8001e56 <__sflush_r+0xea>
 8001e18:	602f      	str	r7, [r5, #0]
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e022      	b.n	8001e64 <__sflush_r+0xf8>
 8001e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	e01b      	b.n	8001e5e <__sflush_r+0xf2>
 8001e26:	690f      	ldr	r7, [r1, #16]
 8001e28:	2f00      	cmp	r7, #0
 8001e2a:	d0f6      	beq.n	8001e1a <__sflush_r+0xae>
 8001e2c:	0793      	lsls	r3, r2, #30
 8001e2e:	680e      	ldr	r6, [r1, #0]
 8001e30:	bf08      	it	eq
 8001e32:	694b      	ldreq	r3, [r1, #20]
 8001e34:	600f      	str	r7, [r1, #0]
 8001e36:	bf18      	it	ne
 8001e38:	2300      	movne	r3, #0
 8001e3a:	eba6 0807 	sub.w	r8, r6, r7
 8001e3e:	608b      	str	r3, [r1, #8]
 8001e40:	f1b8 0f00 	cmp.w	r8, #0
 8001e44:	dde9      	ble.n	8001e1a <__sflush_r+0xae>
 8001e46:	6a21      	ldr	r1, [r4, #32]
 8001e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e4a:	4643      	mov	r3, r8
 8001e4c:	463a      	mov	r2, r7
 8001e4e:	4628      	mov	r0, r5
 8001e50:	47b0      	blx	r6
 8001e52:	2800      	cmp	r0, #0
 8001e54:	dc08      	bgt.n	8001e68 <__sflush_r+0xfc>
 8001e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5e:	81a3      	strh	r3, [r4, #12]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e68:	4407      	add	r7, r0
 8001e6a:	eba8 0800 	sub.w	r8, r8, r0
 8001e6e:	e7e7      	b.n	8001e40 <__sflush_r+0xd4>
 8001e70:	20400001 	.word	0x20400001

08001e74 <_fflush_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	690b      	ldr	r3, [r1, #16]
 8001e78:	4605      	mov	r5, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	b913      	cbnz	r3, 8001e84 <_fflush_r+0x10>
 8001e7e:	2500      	movs	r5, #0
 8001e80:	4628      	mov	r0, r5
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	b118      	cbz	r0, 8001e8e <_fflush_r+0x1a>
 8001e86:	6a03      	ldr	r3, [r0, #32]
 8001e88:	b90b      	cbnz	r3, 8001e8e <_fflush_r+0x1a>
 8001e8a:	f7ff fcd5 	bl	8001838 <__sinit>
 8001e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f3      	beq.n	8001e7e <_fflush_r+0xa>
 8001e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e98:	07d0      	lsls	r0, r2, #31
 8001e9a:	d404      	bmi.n	8001ea6 <_fflush_r+0x32>
 8001e9c:	0599      	lsls	r1, r3, #22
 8001e9e:	d402      	bmi.n	8001ea6 <_fflush_r+0x32>
 8001ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ea2:	f7ff fe60 	bl	8001b66 <__retarget_lock_acquire_recursive>
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f7ff ff5f 	bl	8001d6c <__sflush_r>
 8001eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001eb0:	07da      	lsls	r2, r3, #31
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	d4e4      	bmi.n	8001e80 <_fflush_r+0xc>
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	059b      	lsls	r3, r3, #22
 8001eba:	d4e1      	bmi.n	8001e80 <_fflush_r+0xc>
 8001ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ebe:	f7ff fe53 	bl	8001b68 <__retarget_lock_release_recursive>
 8001ec2:	e7dd      	b.n	8001e80 <_fflush_r+0xc>

08001ec4 <__swhatbuf_r>:
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	b096      	sub	sp, #88	@ 0x58
 8001ed0:	4615      	mov	r5, r2
 8001ed2:	461e      	mov	r6, r3
 8001ed4:	da0d      	bge.n	8001ef2 <__swhatbuf_r+0x2e>
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2340      	movne	r3, #64	@ 0x40
 8001ee4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001ee8:	2000      	movs	r0, #0
 8001eea:	6031      	str	r1, [r6, #0]
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	b016      	add	sp, #88	@ 0x58
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
 8001ef2:	466a      	mov	r2, sp
 8001ef4:	f000 f80c 	bl	8001f10 <_fstat_r>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	dbec      	blt.n	8001ed6 <__swhatbuf_r+0x12>
 8001efc:	9901      	ldr	r1, [sp, #4]
 8001efe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f06:	4259      	negs	r1, r3
 8001f08:	4159      	adcs	r1, r3
 8001f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f0e:	e7eb      	b.n	8001ee8 <__swhatbuf_r+0x24>

08001f10 <_fstat_r>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	4d07      	ldr	r5, [pc, #28]	@ (8001f30 <_fstat_r+0x20>)
 8001f14:	2300      	movs	r3, #0
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	602b      	str	r3, [r5, #0]
 8001f1e:	f7ff fb23 	bl	8001568 <_fstat>
 8001f22:	1c43      	adds	r3, r0, #1
 8001f24:	d102      	bne.n	8001f2c <_fstat_r+0x1c>
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	b103      	cbz	r3, 8001f2c <_fstat_r+0x1c>
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002b8 	.word	0x200002b8

08001f34 <_sbrk_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4d06      	ldr	r5, [pc, #24]	@ (8001f50 <_sbrk_r+0x1c>)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	602b      	str	r3, [r5, #0]
 8001f40:	f000 f808 	bl	8001f54 <_sbrk>
 8001f44:	1c43      	adds	r3, r0, #1
 8001f46:	d102      	bne.n	8001f4e <_sbrk_r+0x1a>
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	b103      	cbz	r3, 8001f4e <_sbrk_r+0x1a>
 8001f4c:	6023      	str	r3, [r4, #0]
 8001f4e:	bd38      	pop	{r3, r4, r5, pc}
 8001f50:	200002b8 	.word	0x200002b8

08001f54 <_sbrk>:
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <_sbrk+0x14>)
 8001f56:	6811      	ldr	r1, [r2, #0]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b909      	cbnz	r1, 8001f60 <_sbrk+0xc>
 8001f5c:	4903      	ldr	r1, [pc, #12]	@ (8001f6c <_sbrk+0x18>)
 8001f5e:	6011      	str	r1, [r2, #0]
 8001f60:	6810      	ldr	r0, [r2, #0]
 8001f62:	4403      	add	r3, r0
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4770      	bx	lr
 8001f68:	200002c8 	.word	0x200002c8
 8001f6c:	200002d0 	.word	0x200002d0

08001f70 <_init>:
 8001f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f72:	bf00      	nop
 8001f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f76:	bc08      	pop	{r3}
 8001f78:	469e      	mov	lr, r3
 8001f7a:	4770      	bx	lr

08001f7c <_fini>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	bf00      	nop
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr
