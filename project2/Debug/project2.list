
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001ebc  08001ebc  00002ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f0c  08001f0c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f0c  08001f0c  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f0c  08001f0c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f0c  08001f0c  00002f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f10  08001f10  00002f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001f14  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08001f70  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08001f70  000032cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004dfa  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000134c  00000000  00000000  00007e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  000091d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000443  00000000  00000000  000097b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a93  00000000  00000000  00009bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081ac  00000000  00000000  0000d68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aa2b  00000000  00000000  0001583a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00070265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e38  00000000  00000000  000702a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  000720e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ea4 	.word	0x08001ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08001ea4 	.word	0x08001ea4

080001c8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	095b      	lsrs	r3, r3, #5
 80001dc:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80001e0:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80001e4:	015b      	lsls	r3, r3, #5
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	f002 021f 	and.w	r2, r2, #31
 80001ee:	2101      	movs	r1, #1
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	4013      	ands	r3, r2
 80001f6:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	015a      	lsls	r2, r3, #5
 80001fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000234 <EXTI_GetITStatus+0x6c>)
 8000200:	4413      	add	r3, r2
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	f002 021f 	and.w	r2, r2, #31
 800020a:	2101      	movs	r1, #1
 800020c:	fa01 f202 	lsl.w	r2, r1, r2
 8000210:	4013      	ands	r3, r2
 8000212:	2b00      	cmp	r3, #0
 8000214:	d005      	beq.n	8000222 <EXTI_GetITStatus+0x5a>
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 800021c:	2301      	movs	r3, #1
 800021e:	73fb      	strb	r3, [r7, #15]
 8000220:	e001      	b.n	8000226 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000222:	2300      	movs	r3, #0
 8000224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000226:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000228:	4618      	mov	r0, r3
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40010414 	.word	0x40010414

08000238 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f003 031f 	and.w	r3, r3, #31
 8000246:	2201      	movs	r2, #1
 8000248:	fa02 f103 	lsl.w	r1, r2, r3
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	095b      	lsrs	r3, r3, #5
 8000250:	015a      	lsls	r2, r3, #5
 8000252:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <EXTI_ClearITPendingBit+0x30>)
 8000254:	4413      	add	r3, r2
 8000256:	460a      	mov	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40010414 	.word	0x40010414

0800026c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 800026c:	b480      	push	{r7}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	e07c      	b.n	8000382 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000288:	2201      	movs	r2, #1
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	fa02 f303 	lsl.w	r3, r2, r3
 8000290:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	693a      	ldr	r2, [r7, #16]
 8000298:	4013      	ands	r3, r2
 800029a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d16b      	bne.n	800037c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	791b      	ldrb	r3, [r3, #4]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d003      	beq.n	80002b4 <GPIO_Init+0x48>
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	791b      	ldrb	r3, [r3, #4]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d134      	bne.n	800031e <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	689a      	ldr	r2, [r3, #8]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	2103      	movs	r1, #3
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	43db      	mvns	r3, r3
 80002c4:	401a      	ands	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	689a      	ldr	r2, [r3, #8]
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	795b      	ldrb	r3, [r3, #5]
 80002d2:	4619      	mov	r1, r3
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	431a      	orrs	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	889b      	ldrh	r3, [r3, #4]
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	2301      	movs	r3, #1
 80002f0:	408b      	lsls	r3, r1
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	43db      	mvns	r3, r3
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	4013      	ands	r3, r2
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	889b      	ldrh	r3, [r3, #4]
 8000304:	b29a      	uxth	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	799b      	ldrb	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	b29b      	uxth	r3, r3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b29b      	uxth	r3, r3
 8000316:	4313      	orrs	r3, r2
 8000318:	b29a      	uxth	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	2103      	movs	r1, #3
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	43db      	mvns	r3, r3
 800032e:	401a      	ands	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	4619      	mov	r1, r3
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	431a      	orrs	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68da      	ldr	r2, [r3, #12]
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	b29b      	uxth	r3, r3
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	2103      	movs	r1, #3
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	43db      	mvns	r3, r3
 800035e:	401a      	ands	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68da      	ldr	r2, [r3, #12]
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	79db      	ldrb	r3, [r3, #7]
 800036c:	4619      	mov	r1, r3
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	2b0f      	cmp	r3, #15
 8000386:	f67f af7f 	bls.w	8000288 <GPIO_Init+0x1c>
    }
  }
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	371c      	adds	r7, #28
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2202      	movs	r2, #2
 80003b2:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2200      	movs	r2, #0
 80003b8:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	71da      	strb	r2, [r3, #7]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	8a1b      	ldrh	r3, [r3, #16]
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	4013      	ands	r3, r2
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	807b      	strh	r3, [r7, #2]
 8000410:	4613      	mov	r3, r2
 8000412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000414:	787b      	ldrb	r3, [r7, #1]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800041a:	887a      	ldrh	r2, [r7, #2]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000420:	e002      	b.n	8000428 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	887a      	ldrh	r2, [r7, #2]
 8000426:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000434:	b480      	push	{r7}
 8000436:	b08b      	sub	sp, #44	@ 0x2c
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	2300      	movs	r3, #0
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800045c:	4b8b      	ldr	r3, [pc, #556]	@ (800068c <RCC_GetClocksFreq+0x258>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	f003 030c 	and.w	r3, r3, #12
 8000464:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000466:	6a3b      	ldr	r3, [r7, #32]
 8000468:	2b08      	cmp	r3, #8
 800046a:	d011      	beq.n	8000490 <RCC_GetClocksFreq+0x5c>
 800046c:	6a3b      	ldr	r3, [r7, #32]
 800046e:	2b08      	cmp	r3, #8
 8000470:	d837      	bhi.n	80004e2 <RCC_GetClocksFreq+0xae>
 8000472:	6a3b      	ldr	r3, [r7, #32]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d003      	beq.n	8000480 <RCC_GetClocksFreq+0x4c>
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	2b04      	cmp	r3, #4
 800047c:	d004      	beq.n	8000488 <RCC_GetClocksFreq+0x54>
 800047e:	e030      	b.n	80004e2 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a83      	ldr	r2, [pc, #524]	@ (8000690 <RCC_GetClocksFreq+0x25c>)
 8000484:	601a      	str	r2, [r3, #0]
      break;
 8000486:	e030      	b.n	80004ea <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a81      	ldr	r2, [pc, #516]	@ (8000690 <RCC_GetClocksFreq+0x25c>)
 800048c:	601a      	str	r2, [r3, #0]
      break;
 800048e:	e02c      	b.n	80004ea <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000490:	4b7e      	ldr	r3, [pc, #504]	@ (800068c <RCC_GetClocksFreq+0x258>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000498:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800049a:	4b7c      	ldr	r3, [pc, #496]	@ (800068c <RCC_GetClocksFreq+0x258>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004a2:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80004a4:	69fb      	ldr	r3, [r7, #28]
 80004a6:	0c9b      	lsrs	r3, r3, #18
 80004a8:	3302      	adds	r3, #2
 80004aa:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d105      	bne.n	80004be <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80004b2:	69fb      	ldr	r3, [r7, #28]
 80004b4:	4a77      	ldr	r2, [pc, #476]	@ (8000694 <RCC_GetClocksFreq+0x260>)
 80004b6:	fb02 f303 	mul.w	r3, r2, r3
 80004ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80004bc:	e00d      	b.n	80004da <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80004be:	4b73      	ldr	r3, [pc, #460]	@ (800068c <RCC_GetClocksFreq+0x258>)
 80004c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c2:	f003 030f 	and.w	r3, r3, #15
 80004c6:	3301      	adds	r3, #1
 80004c8:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80004ca:	4a71      	ldr	r2, [pc, #452]	@ (8000690 <RCC_GetClocksFreq+0x25c>)
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80004de:	601a      	str	r2, [r3, #0]
      break;
 80004e0:	e003      	b.n	80004ea <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a6a      	ldr	r2, [pc, #424]	@ (8000690 <RCC_GetClocksFreq+0x25c>)
 80004e6:	601a      	str	r2, [r3, #0]
      break;
 80004e8:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004ea:	4b68      	ldr	r3, [pc, #416]	@ (800068c <RCC_GetClocksFreq+0x258>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80004f2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80004f4:	6a3b      	ldr	r3, [r7, #32]
 80004f6:	091b      	lsrs	r3, r3, #4
 80004f8:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80004fa:	4a67      	ldr	r2, [pc, #412]	@ (8000698 <RCC_GetClocksFreq+0x264>)
 80004fc:	6a3b      	ldr	r3, [r7, #32]
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	40da      	lsrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000512:	4b5e      	ldr	r3, [pc, #376]	@ (800068c <RCC_GetClocksFreq+0x258>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800051a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800051c:	6a3b      	ldr	r3, [r7, #32]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000522:	4a5d      	ldr	r2, [pc, #372]	@ (8000698 <RCC_GetClocksFreq+0x264>)
 8000524:	6a3b      	ldr	r3, [r7, #32]
 8000526:	4413      	add	r3, r2
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	40da      	lsrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800053a:	4b54      	ldr	r3, [pc, #336]	@ (800068c <RCC_GetClocksFreq+0x258>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000542:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	0adb      	lsrs	r3, r3, #11
 8000548:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800054a:	4a53      	ldr	r2, [pc, #332]	@ (8000698 <RCC_GetClocksFreq+0x264>)
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	4413      	add	r3, r2
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	40da      	lsrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000562:	4b4a      	ldr	r3, [pc, #296]	@ (800068c <RCC_GetClocksFreq+0x258>)
 8000564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000566:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800056a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	091b      	lsrs	r3, r3, #4
 8000570:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000572:	4a4a      	ldr	r2, [pc, #296]	@ (800069c <RCC_GetClocksFreq+0x268>)
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057a:	b29b      	uxth	r3, r3
 800057c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	2b00      	cmp	r3, #0
 8000586:	d006      	beq.n	8000596 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	e003      	b.n	800059e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800059e:	4b3b      	ldr	r3, [pc, #236]	@ (800068c <RCC_GetClocksFreq+0x258>)
 80005a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a2:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80005a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	0a5b      	lsrs	r3, r3, #9
 80005ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80005ae:	4a3b      	ldr	r2, [pc, #236]	@ (800069c <RCC_GetClocksFreq+0x268>)
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80005c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	e003      	b.n	80005da <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005da:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <RCC_GetClocksFreq+0x258>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	2b10      	cmp	r3, #16
 80005e4:	d003      	beq.n	80005ee <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a29      	ldr	r2, [pc, #164]	@ (8000690 <RCC_GetClocksFreq+0x25c>)
 80005ea:	619a      	str	r2, [r3, #24]
 80005ec:	e003      	b.n	80005f6 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80005f6:	4b25      	ldr	r3, [pc, #148]	@ (800068c <RCC_GetClocksFreq+0x258>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d003      	beq.n	800060a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <RCC_GetClocksFreq+0x25c>)
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	e003      	b.n	8000612 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <RCC_GetClocksFreq+0x258>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800061a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800061e:	d10d      	bne.n	800063c <RCC_GetClocksFreq+0x208>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000626:	429a      	cmp	r2, r3
 8000628:	d108      	bne.n	800063c <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	429a      	cmp	r2, r3
 8000630:	d104      	bne.n	800063c <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000634:	005a      	lsls	r2, r3, #1
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	621a      	str	r2, [r3, #32]
 800063a:	e003      	b.n	8000644 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <RCC_GetClocksFreq+0x258>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800064c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000650:	d10d      	bne.n	800066e <RCC_GetClocksFreq+0x23a>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000658:	429a      	cmp	r2, r3
 800065a:	d108      	bne.n	800066e <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	429a      	cmp	r2, r3
 8000662:	d104      	bne.n	800066e <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	005a      	lsls	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
 800066c:	e003      	b.n	8000676 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000676:	4b05      	ldr	r3, [pc, #20]	@ (800068c <RCC_GetClocksFreq+0x258>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0303 	and.w	r3, r3, #3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10e      	bne.n	80006a0 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
 800068a:	e028      	b.n	80006de <RCC_GetClocksFreq+0x2aa>
 800068c:	40021000 	.word	0x40021000
 8000690:	007a1200 	.word	0x007a1200
 8000694:	003d0900 	.word	0x003d0900
 8000698:	08001ee0 	.word	0x08001ee0
 800069c:	08001ef0 	.word	0x08001ef0
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80006a0:	4b6c      	ldr	r3, [pc, #432]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a4:	f003 0303 	and.w	r3, r3, #3
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d104      	bne.n	80006b6 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80006b4:	e013      	b.n	80006de <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80006b6:	4b67      	ldr	r3, [pc, #412]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0303 	and.w	r3, r3, #3
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d104      	bne.n	80006cc <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80006ca:	e008      	b.n	80006de <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80006cc:	4b61      	ldr	r3, [pc, #388]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d102      	bne.n	80006de <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a5f      	ldr	r2, [pc, #380]	@ (8000858 <RCC_GetClocksFreq+0x424>)
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80006de:	4b5d      	ldr	r3, [pc, #372]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d104      	bne.n	80006f4 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006f2:	e021      	b.n	8000738 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80006f4:	4b57      	ldr	r3, [pc, #348]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80006fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000700:	d104      	bne.n	800070c <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800070a:	e015      	b.n	8000738 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800070c:	4b51      	ldr	r3, [pc, #324]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000718:	d104      	bne.n	8000724 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000720:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000722:	e009      	b.n	8000738 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000724:	4b4b      	ldr	r3, [pc, #300]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800072c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8000730:	d102      	bne.n	8000738 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a48      	ldr	r2, [pc, #288]	@ (8000858 <RCC_GetClocksFreq+0x424>)
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000738:	4b46      	ldr	r3, [pc, #280]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d104      	bne.n	800074e <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	631a      	str	r2, [r3, #48]	@ 0x30
 800074c:	e021      	b.n	8000792 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800074e:	4b41      	ldr	r3, [pc, #260]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800075a:	d104      	bne.n	8000766 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	631a      	str	r2, [r3, #48]	@ 0x30
 8000764:	e015      	b.n	8000792 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000766:	4b3b      	ldr	r3, [pc, #236]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800076e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000772:	d104      	bne.n	800077e <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
 800077c:	e009      	b.n	8000792 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800077e:	4b35      	ldr	r3, [pc, #212]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000786:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800078a:	d102      	bne.n	8000792 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a32      	ldr	r2, [pc, #200]	@ (8000858 <RCC_GetClocksFreq+0x424>)
 8000790:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d104      	bne.n	80007a8 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a6:	e021      	b.n	80007ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80007a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80007b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80007b4:	d104      	bne.n	80007c0 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007be:	e015      	b.n	80007ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80007c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80007cc:	d104      	bne.n	80007d8 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d6:	e009      	b.n	80007ec <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80007e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80007e4:	d102      	bne.n	80007ec <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <RCC_GetClocksFreq+0x424>)
 80007ea:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d104      	bne.n	8000802 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000800:	e021      	b.n	8000846 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800080a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800080e:	d104      	bne.n	800081a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000818:	e015      	b.n	8000846 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000822:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000826:	d104      	bne.n	8000832 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800082e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000830:	e009      	b.n	8000846 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <RCC_GetClocksFreq+0x420>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800083a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800083e:	d102      	bne.n	8000846 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <RCC_GetClocksFreq+0x424>)
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000846:	bf00      	nop
 8000848:	372c      	adds	r7, #44	@ 0x2c
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	007a1200 	.word	0x007a1200

0800085c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <RCC_AHBPeriphClockCmd+0x3c>)
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	4909      	ldr	r1, [pc, #36]	@ (8000898 <RCC_AHBPeriphClockCmd+0x3c>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4313      	orrs	r3, r2
 8000878:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800087a:	e006      	b.n	800088a <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <RCC_AHBPeriphClockCmd+0x3c>)
 800087e:	695a      	ldr	r2, [r3, #20]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	43db      	mvns	r3, r3
 8000884:	4904      	ldr	r1, [pc, #16]	@ (8000898 <RCC_AHBPeriphClockCmd+0x3c>)
 8000886:	4013      	ands	r3, r2
 8000888:	614b      	str	r3, [r1, #20]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	4613      	mov	r3, r2
 80008cc:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d103      	bne.n	800090a <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	e005      	b.n	8000916 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d102      	bne.n	8000916 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	3308      	adds	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000928:	e006      	b.n	8000938 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	6819      	ldr	r1, [r3, #0]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	43da      	mvns	r2, r3
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	400a      	ands	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	3724      	adds	r7, #36	@ 0x24
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	4013      	ands	r3, r2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e001      	b.n	8000968 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000976:	b480      	push	{r7}
 8000978:	b087      	sub	sp, #28
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b29b      	uxth	r3, r3
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80009a0:	2201      	movs	r2, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d105      	bne.n	80009bc <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	4013      	ands	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e00d      	b.n	80009d8 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d105      	bne.n	80009ce <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4013      	ands	r3, r2
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e004      	b.n	80009d8 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	4013      	ands	r3, r2
 80009d6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009de:	2201      	movs	r2, #1
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4013      	ands	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d005      	beq.n	8000a04 <USART_GetITStatus+0x8e>
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80009fe:	2301      	movs	r3, #1
 8000a00:	74fb      	strb	r3, [r7, #19]
 8000a02:	e001      	b.n	8000a08 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a08:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	371c      	adds	r7, #28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 031f 	and.w	r3, r3, #31
 8000a28:	2201      	movs	r2, #1
 8000a2a:	fa02 f103 	lsl.w	r1, r2, r3
 8000a2e:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <NVIC_EnableIRQ+0x30>)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	095b      	lsrs	r3, r3, #5
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <uart_put_char+0x30>)
 8000a5e:	f7ff ff1d 	bl	800089c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a62:	bf00      	nop
 8000a64:	2180      	movs	r1, #128	@ 0x80
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <uart_put_char+0x30>)
 8000a68:	f7ff ff6c 	bl	8000944 <USART_GetFlagStatus>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f8      	beq.n	8000a64 <uart_put_char+0x18>
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40004400 	.word	0x40004400

08000a80 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e012      	b.n	8000aba <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b0a      	cmp	r3, #10
 8000a9e:	d102      	bne.n	8000aa6 <_write_r+0x26>
            uart_put_char('\r');
 8000aa0:	200d      	movs	r0, #13
 8000aa2:	f7ff ffd3 	bl	8000a4c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffcc 	bl	8000a4c <uart_put_char>
    for (n = 0; n < len; n++) {
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dbe8      	blt.n	8000a94 <_write_r+0x14>
    }

    return len;
 8000ac2:	683b      	ldr	r3, [r7, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000ad0:	4915      	ldr	r1, [pc, #84]	@ (8000b28 <USART2_IRQHandler+0x5c>)
 8000ad2:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <USART2_IRQHandler+0x60>)
 8000ad4:	f7ff ff4f 	bl	8000976 <USART_GetITStatus>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d021      	beq.n	8000b22 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <USART2_IRQHandler+0x60>)
 8000ae0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ae2:	b299      	uxth	r1, r3
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <USART2_IRQHandler+0x64>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	b2d0      	uxtb	r0, r2
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <USART2_IRQHandler+0x64>)
 8000af0:	7010      	strb	r0, [r2, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	b2c9      	uxtb	r1, r1
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <USART2_IRQHandler+0x68>)
 8000af8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <USART2_IRQHandler+0x6c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2bff      	cmp	r3, #255	@ 0xff
 8000b02:	d107      	bne.n	8000b14 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <USART2_IRQHandler+0x70>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <USART2_IRQHandler+0x70>)
 8000b10:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000b12:	e006      	b.n	8000b22 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <USART2_IRQHandler+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <USART2_IRQHandler+0x6c>)
 8000b20:	701a      	strb	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	00050105 	.word	0x00050105
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	20000178 	.word	0x20000178
 8000b34:	20000078 	.word	0x20000078
 8000b38:	2000017a 	.word	0x2000017a
 8000b3c:	20000179 	.word	0x20000179

08000b40 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000b48:	4b86      	ldr	r3, [pc, #536]	@ (8000d64 <uart_init+0x224>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fd61 	bl	8001618 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000b56:	4b83      	ldr	r3, [pc, #524]	@ (8000d64 <uart_init+0x224>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fd5a 	bl	8001618 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000b64:	4b80      	ldr	r3, [pc, #512]	@ (8000d68 <uart_init+0x228>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	4a7f      	ldr	r2, [pc, #508]	@ (8000d68 <uart_init+0x228>)
 8000b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000b70:	4b7d      	ldr	r3, [pc, #500]	@ (8000d68 <uart_init+0x228>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	4a7c      	ldr	r2, [pc, #496]	@ (8000d68 <uart_init+0x228>)
 8000b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000b7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000b8a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000b8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000b9a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000b9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ba6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000baa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000bac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bb6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000bba:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000bbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000bca:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bd6:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000bda:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000bdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be0:	889b      	ldrh	r3, [r3, #4]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000be8:	f023 030c 	bic.w	r3, r3, #12
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000bf0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bf8:	8892      	ldrh	r2, [r2, #4]
 8000bfa:	b292      	uxth	r2, r2
 8000bfc:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000bfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c0c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000c0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c18:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000c1c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000c1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c2c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000c2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c38:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000c3c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d6c <uart_init+0x22c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a4a      	ldr	r2, [pc, #296]	@ (8000d6c <uart_init+0x22c>)
 8000c44:	f023 0301 	bic.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000c4a:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <uart_init+0x22c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4a47      	ldr	r2, [pc, #284]	@ (8000d6c <uart_init+0x22c>)
 8000c50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c54:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000c56:	4b45      	ldr	r3, [pc, #276]	@ (8000d6c <uart_init+0x22c>)
 8000c58:	4a44      	ldr	r2, [pc, #272]	@ (8000d6c <uart_init+0x22c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000c5e:	4b43      	ldr	r3, [pc, #268]	@ (8000d6c <uart_init+0x22c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a42      	ldr	r2, [pc, #264]	@ (8000d6c <uart_init+0x22c>)
 8000c64:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8000c68:	f023 030c 	bic.w	r3, r3, #12
 8000c6c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d6c <uart_init+0x22c>)
 8000c70:	4a3e      	ldr	r2, [pc, #248]	@ (8000d6c <uart_init+0x22c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000c76:	4b3d      	ldr	r3, [pc, #244]	@ (8000d6c <uart_init+0x22c>)
 8000c78:	4a3c      	ldr	r2, [pc, #240]	@ (8000d6c <uart_init+0x22c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d6c <uart_init+0x22c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a3a      	ldr	r2, [pc, #232]	@ (8000d6c <uart_init+0x22c>)
 8000c84:	f043 030c 	orr.w	r3, r3, #12
 8000c88:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000c8a:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <uart_init+0x22c>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	4a37      	ldr	r2, [pc, #220]	@ (8000d6c <uart_init+0x22c>)
 8000c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c94:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000c96:	4b35      	ldr	r3, [pc, #212]	@ (8000d6c <uart_init+0x22c>)
 8000c98:	4a34      	ldr	r2, [pc, #208]	@ (8000d6c <uart_init+0x22c>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fbc0 	bl	8000434 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb6:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <uart_init+0x22c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d010      	beq.n	8000ce6 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cc6:	005a      	lsls	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	fb01 f202 	mul.w	r2, r1, r2
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ce4:	e00d      	b.n	8000d02 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8000cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	fb01 f202 	mul.w	r2, r1, r2
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d302      	bcc.n	8000d12 <uart_init+0x1d2>
        divider++;
 8000d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d0e:	3301      	adds	r3, #1
 8000d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <uart_init+0x22c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00b      	beq.n	8000d36 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d20:	085b      	lsrs	r3, r3, #1
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d2a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000d2e:	4013      	ands	r3, r2
 8000d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d32:	4313      	orrs	r3, r2
 8000d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <uart_init+0x22c>)
 8000d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d3a:	b292      	uxth	r2, r2
 8000d3c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <uart_init+0x22c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <uart_init+0x22c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <uart_init+0x230>)
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <uart_init+0x22c>)
 8000d50:	f7ff fdb6 	bl	80008c0 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000d54:	2026      	movs	r0, #38	@ 0x26
 8000d56:	f7ff fe5f 	bl	8000a18 <NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	@ 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	00050105 	.word	0x00050105

08000d74 <EXTI4_IRQHandler>:
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_InitStructureUp);

}

void EXTI4_IRQHandler(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff fa25 	bl	80001c8 <EXTI_GetITStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
        setLED('r');
 8000d84:	2072      	movs	r0, #114	@ 0x72
 8000d86:	f000 f951 	bl	800102c <setLED>
        EXTI_ClearITPendingBit(EXTI_Line4);
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f7ff fa54 	bl	8000238 <EXTI_ClearITPendingBit>
    }

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000da0:	f7ff fd5c 	bl	800085c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 8000da4:	2101      	movs	r1, #1
 8000da6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000daa:	f7ff fd57 	bl	800085c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8000dae:	2101      	movs	r1, #1
 8000db0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000db4:	f7ff fd52 	bl	800085c <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8000db8:	463b      	mov	r3, r7
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff faec 	bl	8000398 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f7ff fa4a 	bl	800026c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fadc 	bl	8000398 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000de0:	2300      	movs	r3, #0
 8000de2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000de4:	2302      	movs	r3, #2
 8000de6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8000de8:	2321      	movs	r3, #33	@ 0x21
 8000dea:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	480a      	ldr	r0, [pc, #40]	@ (8000e1c <initJoystick+0x88>)
 8000df2:	f7ff fa3b 	bl	800026c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8000df6:	463b      	mov	r3, r7
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff facd 	bl	8000398 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000e02:	2302      	movs	r3, #2
 8000e04:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000e06:	2303      	movs	r3, #3
 8000e08:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <initJoystick+0x8c>)
 8000e10:	f7ff fa2c 	bl	800026c <GPIO_Init>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800

08000e24 <readJoystick>:


int8_t readJoystick(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8000e2e:	2110      	movs	r1, #16
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e34:	f7ff faca 	bl	80003cc <GPIO_ReadInputDataBit>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4821      	ldr	r0, [pc, #132]	@ (8000ec4 <readJoystick+0xa0>)
 8000e40:	f7ff fac4 	bl	80003cc <GPIO_ReadInputDataBit>
 8000e44:	4603      	mov	r3, r0
 8000e46:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	481e      	ldr	r0, [pc, #120]	@ (8000ec4 <readJoystick+0xa0>)
 8000e4c:	f7ff fabe 	bl	80003cc <GPIO_ReadInputDataBit>
 8000e50:	4603      	mov	r3, r0
 8000e52:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 8000e54:	2102      	movs	r1, #2
 8000e56:	481c      	ldr	r0, [pc, #112]	@ (8000ec8 <readJoystick+0xa4>)
 8000e58:	f7ff fab8 	bl	80003cc <GPIO_ReadInputDataBit>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 8000e60:	2101      	movs	r1, #1
 8000e62:	4819      	ldr	r0, [pc, #100]	@ (8000ec8 <readJoystick+0xa4>)
 8000e64:	f7ff fab2 	bl	80003cc <GPIO_ReadInputDataBit>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 8000e6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d102      	bne.n	8000e7a <readJoystick+0x56>
		bit = Up;
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	e01e      	b.n	8000eb8 <readJoystick+0x94>
	} else if (Down == 1){
 8000e7a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d103      	bne.n	8000e8a <readJoystick+0x66>
		bit = Down << 1;
 8000e82:	793b      	ldrb	r3, [r7, #4]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e016      	b.n	8000eb8 <readJoystick+0x94>
	} else if (Left == 1){
 8000e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d103      	bne.n	8000e9a <readJoystick+0x76>
		bit = Left << 2;
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	e00e      	b.n	8000eb8 <readJoystick+0x94>
	} else if (Right == 1){
 8000e9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d103      	bne.n	8000eaa <readJoystick+0x86>
		bit = Right << 3;
 8000ea2:	78bb      	ldrb	r3, [r7, #2]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	e006      	b.n	8000eb8 <readJoystick+0x94>
	} else if (Center == 1){
 8000eaa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d102      	bne.n	8000eb8 <readJoystick+0x94>
		bit = Center << 4;
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800

08000ecc <handleJoystick>:

void handleJoystick(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0

	static int8_t currentState = 0;  // remember last state

	int8_t nextState = readJoystick();
 8000ed2:	f7ff ffa7 	bl	8000e24 <readJoystick>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
//	if ((newState != 0) && (currentState != newState)){

    if (nextState!= currentState) {
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <handleJoystick+0xa4>)
 8000edc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d03c      	beq.n	8000f62 <handleJoystick+0x96>

		switch(nextState){
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	d836      	bhi.n	8000f60 <handleJoystick+0x94>
 8000ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef8 <handleJoystick+0x2c>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f39 	.word	0x08000f39
 8000efc:	08000f41 	.word	0x08000f41
 8000f00:	08000f61 	.word	0x08000f61
 8000f04:	08000f49 	.word	0x08000f49
 8000f08:	08000f61 	.word	0x08000f61
 8000f0c:	08000f61 	.word	0x08000f61
 8000f10:	08000f61 	.word	0x08000f61
 8000f14:	08000f51 	.word	0x08000f51
 8000f18:	08000f61 	.word	0x08000f61
 8000f1c:	08000f61 	.word	0x08000f61
 8000f20:	08000f61 	.word	0x08000f61
 8000f24:	08000f61 	.word	0x08000f61
 8000f28:	08000f61 	.word	0x08000f61
 8000f2c:	08000f61 	.word	0x08000f61
 8000f30:	08000f61 	.word	0x08000f61
 8000f34:	08000f59 	.word	0x08000f59

		default:
			break;

		case 0x1:
			printf("Up\n");
 8000f38:	480e      	ldr	r0, [pc, #56]	@ (8000f74 <handleJoystick+0xa8>)
 8000f3a:	f000 fb65 	bl	8001608 <puts>
			break;
 8000f3e:	e010      	b.n	8000f62 <handleJoystick+0x96>

		case 0x2:
			printf("Down\n");
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <handleJoystick+0xac>)
 8000f42:	f000 fb61 	bl	8001608 <puts>
			break;
 8000f46:	e00c      	b.n	8000f62 <handleJoystick+0x96>

		case 0x4:
			printf("Left\n");
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <handleJoystick+0xb0>)
 8000f4a:	f000 fb5d 	bl	8001608 <puts>
			break;
 8000f4e:	e008      	b.n	8000f62 <handleJoystick+0x96>

		case 0x8:
			printf("Right\n");
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <handleJoystick+0xb4>)
 8000f52:	f000 fb59 	bl	8001608 <puts>
			break;
 8000f56:	e004      	b.n	8000f62 <handleJoystick+0x96>

		case 0x10:
			printf("Center\n");
 8000f58:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <handleJoystick+0xb8>)
 8000f5a:	f000 fb55 	bl	8001608 <puts>
			break;
 8000f5e:	e000      	b.n	8000f62 <handleJoystick+0x96>
			break;
 8000f60:	bf00      	nop

		}
	}

	currentState = nextState;
 8000f62:	4a03      	ldr	r2, [pc, #12]	@ (8000f70 <handleJoystick+0xa4>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	7013      	strb	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000017b 	.word	0x2000017b
 8000f74:	08001ebc 	.word	0x08001ebc
 8000f78:	08001ec0 	.word	0x08001ec0
 8000f7c:	08001ec8 	.word	0x08001ec8
 8000f80:	08001ed0 	.word	0x08001ed0
 8000f84:	08001ed8 	.word	0x08001ed8

08000f88 <initLED>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLED() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 8000f8e:	2101      	movs	r1, #1
 8000f90:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000f94:	f7ff fc62 	bl	800085c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8000f98:	2101      	movs	r1, #1
 8000f9a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000f9e:	f7ff fc5d 	bl	800085c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000fa8:	f7ff fc58 	bl	800085c <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8000fac:	463b      	mov	r3, r7
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f9f2 	bl	8000398 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8000fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc0:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f7ff f94d 	bl	800026c <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f9df 	bl	8000398 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <initLED+0x9c>)
 8000ff0:	f7ff f93c 	bl	800026c <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f9ce 	bl	8000398 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001000:	2300      	movs	r3, #0
 8001002:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001008:	2302      	movs	r3, #2
 800100a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <initLED+0xa0>)
 8001012:	f7ff f92b 	bl	800026c <GPIO_Init>

	// Initialize LED to off
	setLED('d');
 8001016:	2064      	movs	r0, #100	@ 0x64
 8001018:	f000 f808 	bl	800102c <setLED>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800

0800102c <setLED>:

void setLED(char sel) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b72      	cmp	r3, #114	@ 0x72
 800103a:	d111      	bne.n	8001060 <setLED+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800103c:	2200      	movs	r2, #0
 800103e:	2110      	movs	r1, #16
 8001040:	4852      	ldr	r0, [pc, #328]	@ (800118c <setLED+0x160>)
 8001042:	f7ff f9df 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001046:	2201      	movs	r2, #1
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	4851      	ldr	r0, [pc, #324]	@ (8001190 <setLED+0x164>)
 800104c:	f7ff f9da 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105a:	f7ff f9d3 	bl	8000404 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 800105e:	e091      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'g') {
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b67      	cmp	r3, #103	@ 0x67
 8001064:	d111      	bne.n	800108a <setLED+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	4848      	ldr	r0, [pc, #288]	@ (800118c <setLED+0x160>)
 800106c:	f7ff f9ca 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001070:	2200      	movs	r2, #0
 8001072:	2180      	movs	r1, #128	@ 0x80
 8001074:	4846      	ldr	r0, [pc, #280]	@ (8001190 <setLED+0x164>)
 8001076:	f7ff f9c5 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001084:	f7ff f9be 	bl	8000404 <GPIO_WriteBit>
}
 8001088:	e07c      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'b') {
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b62      	cmp	r3, #98	@ 0x62
 800108e:	d111      	bne.n	80010b4 <setLED+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	483d      	ldr	r0, [pc, #244]	@ (800118c <setLED+0x160>)
 8001096:	f7ff f9b5 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800109a:	2201      	movs	r2, #1
 800109c:	2180      	movs	r1, #128	@ 0x80
 800109e:	483c      	ldr	r0, [pc, #240]	@ (8001190 <setLED+0x164>)
 80010a0:	f7ff f9b0 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ae:	f7ff f9a9 	bl	8000404 <GPIO_WriteBit>
}
 80010b2:	e067      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'c') {
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b63      	cmp	r3, #99	@ 0x63
 80010b8:	d111      	bne.n	80010de <setLED+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80010ba:	2201      	movs	r2, #1
 80010bc:	2110      	movs	r1, #16
 80010be:	4833      	ldr	r0, [pc, #204]	@ (800118c <setLED+0x160>)
 80010c0:	f7ff f9a0 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	@ 0x80
 80010c8:	4831      	ldr	r0, [pc, #196]	@ (8001190 <setLED+0x164>)
 80010ca:	f7ff f99b 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f7ff f994 	bl	8000404 <GPIO_WriteBit>
}
 80010dc:	e052      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'm') {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b6d      	cmp	r3, #109	@ 0x6d
 80010e2:	d111      	bne.n	8001108 <setLED+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80010e4:	2200      	movs	r2, #0
 80010e6:	2110      	movs	r1, #16
 80010e8:	4828      	ldr	r0, [pc, #160]	@ (800118c <setLED+0x160>)
 80010ea:	f7ff f98b 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80010ee:	2201      	movs	r2, #1
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	4827      	ldr	r0, [pc, #156]	@ (8001190 <setLED+0x164>)
 80010f4:	f7ff f986 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f7ff f97f 	bl	8000404 <GPIO_WriteBit>
}
 8001106:	e03d      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'y') {
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b79      	cmp	r3, #121	@ 0x79
 800110c:	d111      	bne.n	8001132 <setLED+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	481e      	ldr	r0, [pc, #120]	@ (800118c <setLED+0x160>)
 8001114:	f7ff f976 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001118:	2200      	movs	r2, #0
 800111a:	2180      	movs	r1, #128	@ 0x80
 800111c:	481c      	ldr	r0, [pc, #112]	@ (8001190 <setLED+0x164>)
 800111e:	f7ff f971 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f7ff f96a 	bl	8000404 <GPIO_WriteBit>
}
 8001130:	e028      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'w') {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b77      	cmp	r3, #119	@ 0x77
 8001136:	d111      	bne.n	800115c <setLED+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	4813      	ldr	r0, [pc, #76]	@ (800118c <setLED+0x160>)
 800113e:	f7ff f961 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <setLED+0x164>)
 8001148:	f7ff f95c 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f7ff f955 	bl	8000404 <GPIO_WriteBit>
}
 800115a:	e013      	b.n	8001184 <setLED+0x158>
	} else if (sel == 'd') {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d110      	bne.n	8001184 <setLED+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001162:	2201      	movs	r2, #1
 8001164:	2110      	movs	r1, #16
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <setLED+0x160>)
 8001168:	f7ff f94c 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800116c:	2201      	movs	r2, #1
 800116e:	2180      	movs	r1, #128	@ 0x80
 8001170:	4807      	ldr	r0, [pc, #28]	@ (8001190 <setLED+0x164>)
 8001172:	f7ff f947 	bl	8000404 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f7ff f940 	bl	8000404 <GPIO_WriteBit>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	48000400 	.word	0x48000400
 8001190:	48000800 	.word	0x48000800

08001194 <main>:
#include "30010_io.h" 		// Input/output library for this course
#include "joystick.h"
#include "led.h"
#include "interrupt.h"

int main(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 800119a:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800119e:	f7ff fccf 	bl	8000b40 <uart_init>

	initJoystick();
 80011a2:	f7ff fdf7 	bl	8000d94 <initJoystick>
	initLED();
 80011a6:	f7ff feef 	bl	8000f88 <initLED>
//	iniEXTIA4();

	int8_t prev_state = readJoystick();
 80011aa:	f7ff fe3b 	bl	8000e24 <readJoystick>
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	int8_t current_state;

	while(1) {
		handleJoystick();
 80011b2:	f7ff fe8b 	bl	8000ecc <handleJoystick>
 80011b6:	e7fc      	b.n	80011b2 <main+0x1e>

080011b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00a      	b.n	80011e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ca:	f3af 8000 	nop.w
 80011ce:	4601      	mov	r1, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	b2ca      	uxtb	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbf0      	blt.n	80011ca <_read+0x12>
	}

return len;
 80011e8:	687b      	ldr	r3, [r7, #4]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800121a:	605a      	str	r2, [r3, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_isatty>:

int _isatty(int file)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
	return 1;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <SystemInit+0x84>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <SystemInit+0x84>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <SystemInit+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <SystemInit+0x88>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <SystemInit+0x88>)
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4918      	ldr	r1, [pc, #96]	@ (80012e4 <SystemInit+0x88>)
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <SystemInit+0x8c>)
 8001284:	4013      	ands	r3, r2
 8001286:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <SystemInit+0x88>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a15      	ldr	r2, [pc, #84]	@ (80012e4 <SystemInit+0x88>)
 800128e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <SystemInit+0x88>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <SystemInit+0x88>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <SystemInit+0x88>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <SystemInit+0x88>)
 80012aa:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80012ae:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <SystemInit+0x88>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b4:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <SystemInit+0x88>)
 80012b6:	f023 030f 	bic.w	r3, r3, #15
 80012ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <SystemInit+0x88>)
 80012be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012c0:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <SystemInit+0x88>)
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <SystemInit+0x90>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <SystemInit+0x88>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80012ce:	f000 f80f 	bl	80012f0 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012d2:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <SystemInit+0x84>)
 80012d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012d8:	609a      	str	r2, [r3, #8]
#endif  
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	f87fc00c 	.word	0xf87fc00c
 80012ec:	ff00fccc 	.word	0xff00fccc

080012f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <SetSysClock+0x8c>)
 80012f6:	2212      	movs	r2, #18
 80012f8:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <SetSysClock+0x90>)
 80012fc:	4a20      	ldr	r2, [pc, #128]	@ (8001380 <SetSysClock+0x90>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001302:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <SetSysClock+0x90>)
 8001304:	4a1e      	ldr	r2, [pc, #120]	@ (8001380 <SetSysClock+0x90>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <SetSysClock+0x90>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <SetSysClock+0x90>)
 8001310:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001314:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <SetSysClock+0x90>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <SetSysClock+0x90>)
 800131c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001320:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <SetSysClock+0x90>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <SetSysClock+0x90>)
 8001328:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 800132c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <SetSysClock+0x90>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <SetSysClock+0x90>)
 8001334:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001338:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800133a:	bf00      	nop
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <SetSysClock+0x90>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f9      	beq.n	800133c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <SetSysClock+0x90>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <SetSysClock+0x90>)
 800134e:	f023 0303 	bic.w	r3, r3, #3
 8001352:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <SetSysClock+0x90>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SetSysClock+0x90>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001360:	bf00      	nop
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <SetSysClock+0x90>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d1f9      	bne.n	8001362 <SetSysClock+0x72>
  {
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000
 8001380:	40021000 	.word	0x40021000

08001384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001386:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490e      	ldr	r1, [pc, #56]	@ (80013c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0b      	ldr	r4, [pc, #44]	@ (80013d0 <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013ae:	f7ff ff55 	bl	800125c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013b2:	f000 fb01 	bl	80019b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b6:	f7ff feed 	bl	8001194 <main>

080013ba <LoopForever>:

LoopForever:
    b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   r0, =_estack
 80013bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013c8:	08001f14 	.word	0x08001f14
  ldr r2, =_sbss
 80013cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013d0:	200002cc 	.word	0x200002cc

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <std>:
 80013d8:	2300      	movs	r3, #0
 80013da:	b510      	push	{r4, lr}
 80013dc:	4604      	mov	r4, r0
 80013de:	e9c0 3300 	strd	r3, r3, [r0]
 80013e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013e6:	6083      	str	r3, [r0, #8]
 80013e8:	8181      	strh	r1, [r0, #12]
 80013ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80013ec:	81c2      	strh	r2, [r0, #14]
 80013ee:	6183      	str	r3, [r0, #24]
 80013f0:	4619      	mov	r1, r3
 80013f2:	2208      	movs	r2, #8
 80013f4:	305c      	adds	r0, #92	@ 0x5c
 80013f6:	f000 faa3 	bl	8001940 <memset>
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <std+0x58>)
 80013fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <std+0x5c>)
 8001400:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <std+0x60>)
 8001404:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <std+0x64>)
 8001408:	6323      	str	r3, [r4, #48]	@ 0x30
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <std+0x68>)
 800140c:	6224      	str	r4, [r4, #32]
 800140e:	429c      	cmp	r4, r3
 8001410:	d006      	beq.n	8001420 <std+0x48>
 8001412:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001416:	4294      	cmp	r4, r2
 8001418:	d002      	beq.n	8001420 <std+0x48>
 800141a:	33d0      	adds	r3, #208	@ 0xd0
 800141c:	429c      	cmp	r4, r3
 800141e:	d105      	bne.n	800142c <std+0x54>
 8001420:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001428:	f000 baea 	b.w	8001a00 <__retarget_lock_init_recursive>
 800142c:	bd10      	pop	{r4, pc}
 800142e:	bf00      	nop
 8001430:	08001791 	.word	0x08001791
 8001434:	080017b3 	.word	0x080017b3
 8001438:	080017eb 	.word	0x080017eb
 800143c:	0800180f 	.word	0x0800180f
 8001440:	2000017c 	.word	0x2000017c

08001444 <stdio_exit_handler>:
 8001444:	4a02      	ldr	r2, [pc, #8]	@ (8001450 <stdio_exit_handler+0xc>)
 8001446:	4903      	ldr	r1, [pc, #12]	@ (8001454 <stdio_exit_handler+0x10>)
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <stdio_exit_handler+0x14>)
 800144a:	f000 b869 	b.w	8001520 <_fwalk_sglue>
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000
 8001454:	08001d11 	.word	0x08001d11
 8001458:	20000010 	.word	0x20000010

0800145c <cleanup_stdio>:
 800145c:	6841      	ldr	r1, [r0, #4]
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <cleanup_stdio+0x34>)
 8001460:	4299      	cmp	r1, r3
 8001462:	b510      	push	{r4, lr}
 8001464:	4604      	mov	r4, r0
 8001466:	d001      	beq.n	800146c <cleanup_stdio+0x10>
 8001468:	f000 fc52 	bl	8001d10 <_fflush_r>
 800146c:	68a1      	ldr	r1, [r4, #8]
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <cleanup_stdio+0x38>)
 8001470:	4299      	cmp	r1, r3
 8001472:	d002      	beq.n	800147a <cleanup_stdio+0x1e>
 8001474:	4620      	mov	r0, r4
 8001476:	f000 fc4b 	bl	8001d10 <_fflush_r>
 800147a:	68e1      	ldr	r1, [r4, #12]
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <cleanup_stdio+0x3c>)
 800147e:	4299      	cmp	r1, r3
 8001480:	d004      	beq.n	800148c <cleanup_stdio+0x30>
 8001482:	4620      	mov	r0, r4
 8001484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001488:	f000 bc42 	b.w	8001d10 <_fflush_r>
 800148c:	bd10      	pop	{r4, pc}
 800148e:	bf00      	nop
 8001490:	2000017c 	.word	0x2000017c
 8001494:	200001e4 	.word	0x200001e4
 8001498:	2000024c 	.word	0x2000024c

0800149c <global_stdio_init.part.0>:
 800149c:	b510      	push	{r4, lr}
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <global_stdio_init.part.0+0x30>)
 80014a0:	4c0b      	ldr	r4, [pc, #44]	@ (80014d0 <global_stdio_init.part.0+0x34>)
 80014a2:	4a0c      	ldr	r2, [pc, #48]	@ (80014d4 <global_stdio_init.part.0+0x38>)
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	4620      	mov	r0, r4
 80014a8:	2200      	movs	r2, #0
 80014aa:	2104      	movs	r1, #4
 80014ac:	f7ff ff94 	bl	80013d8 <std>
 80014b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80014b4:	2201      	movs	r2, #1
 80014b6:	2109      	movs	r1, #9
 80014b8:	f7ff ff8e 	bl	80013d8 <std>
 80014bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80014c0:	2202      	movs	r2, #2
 80014c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c6:	2112      	movs	r1, #18
 80014c8:	f7ff bf86 	b.w	80013d8 <std>
 80014cc:	200002b4 	.word	0x200002b4
 80014d0:	2000017c 	.word	0x2000017c
 80014d4:	08001445 	.word	0x08001445

080014d8 <__sfp_lock_acquire>:
 80014d8:	4801      	ldr	r0, [pc, #4]	@ (80014e0 <__sfp_lock_acquire+0x8>)
 80014da:	f000 ba92 	b.w	8001a02 <__retarget_lock_acquire_recursive>
 80014de:	bf00      	nop
 80014e0:	200002bd 	.word	0x200002bd

080014e4 <__sfp_lock_release>:
 80014e4:	4801      	ldr	r0, [pc, #4]	@ (80014ec <__sfp_lock_release+0x8>)
 80014e6:	f000 ba8d 	b.w	8001a04 <__retarget_lock_release_recursive>
 80014ea:	bf00      	nop
 80014ec:	200002bd 	.word	0x200002bd

080014f0 <__sinit>:
 80014f0:	b510      	push	{r4, lr}
 80014f2:	4604      	mov	r4, r0
 80014f4:	f7ff fff0 	bl	80014d8 <__sfp_lock_acquire>
 80014f8:	6a23      	ldr	r3, [r4, #32]
 80014fa:	b11b      	cbz	r3, 8001504 <__sinit+0x14>
 80014fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001500:	f7ff bff0 	b.w	80014e4 <__sfp_lock_release>
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <__sinit+0x28>)
 8001506:	6223      	str	r3, [r4, #32]
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <__sinit+0x2c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f5      	bne.n	80014fc <__sinit+0xc>
 8001510:	f7ff ffc4 	bl	800149c <global_stdio_init.part.0>
 8001514:	e7f2      	b.n	80014fc <__sinit+0xc>
 8001516:	bf00      	nop
 8001518:	0800145d 	.word	0x0800145d
 800151c:	200002b4 	.word	0x200002b4

08001520 <_fwalk_sglue>:
 8001520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001524:	4607      	mov	r7, r0
 8001526:	4688      	mov	r8, r1
 8001528:	4614      	mov	r4, r2
 800152a:	2600      	movs	r6, #0
 800152c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001530:	f1b9 0901 	subs.w	r9, r9, #1
 8001534:	d505      	bpl.n	8001542 <_fwalk_sglue+0x22>
 8001536:	6824      	ldr	r4, [r4, #0]
 8001538:	2c00      	cmp	r4, #0
 800153a:	d1f7      	bne.n	800152c <_fwalk_sglue+0xc>
 800153c:	4630      	mov	r0, r6
 800153e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001542:	89ab      	ldrh	r3, [r5, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d907      	bls.n	8001558 <_fwalk_sglue+0x38>
 8001548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800154c:	3301      	adds	r3, #1
 800154e:	d003      	beq.n	8001558 <_fwalk_sglue+0x38>
 8001550:	4629      	mov	r1, r5
 8001552:	4638      	mov	r0, r7
 8001554:	47c0      	blx	r8
 8001556:	4306      	orrs	r6, r0
 8001558:	3568      	adds	r5, #104	@ 0x68
 800155a:	e7e9      	b.n	8001530 <_fwalk_sglue+0x10>

0800155c <_puts_r>:
 800155c:	6a03      	ldr	r3, [r0, #32]
 800155e:	b570      	push	{r4, r5, r6, lr}
 8001560:	6884      	ldr	r4, [r0, #8]
 8001562:	4605      	mov	r5, r0
 8001564:	460e      	mov	r6, r1
 8001566:	b90b      	cbnz	r3, 800156c <_puts_r+0x10>
 8001568:	f7ff ffc2 	bl	80014f0 <__sinit>
 800156c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800156e:	07db      	lsls	r3, r3, #31
 8001570:	d405      	bmi.n	800157e <_puts_r+0x22>
 8001572:	89a3      	ldrh	r3, [r4, #12]
 8001574:	0598      	lsls	r0, r3, #22
 8001576:	d402      	bmi.n	800157e <_puts_r+0x22>
 8001578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800157a:	f000 fa42 	bl	8001a02 <__retarget_lock_acquire_recursive>
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	0719      	lsls	r1, r3, #28
 8001582:	d502      	bpl.n	800158a <_puts_r+0x2e>
 8001584:	6923      	ldr	r3, [r4, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d135      	bne.n	80015f6 <_puts_r+0x9a>
 800158a:	4621      	mov	r1, r4
 800158c:	4628      	mov	r0, r5
 800158e:	f000 f981 	bl	8001894 <__swsetup_r>
 8001592:	b380      	cbz	r0, 80015f6 <_puts_r+0x9a>
 8001594:	f04f 35ff 	mov.w	r5, #4294967295
 8001598:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800159a:	07da      	lsls	r2, r3, #31
 800159c:	d405      	bmi.n	80015aa <_puts_r+0x4e>
 800159e:	89a3      	ldrh	r3, [r4, #12]
 80015a0:	059b      	lsls	r3, r3, #22
 80015a2:	d402      	bmi.n	80015aa <_puts_r+0x4e>
 80015a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015a6:	f000 fa2d 	bl	8001a04 <__retarget_lock_release_recursive>
 80015aa:	4628      	mov	r0, r5
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da04      	bge.n	80015bc <_puts_r+0x60>
 80015b2:	69a2      	ldr	r2, [r4, #24]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dc17      	bgt.n	80015e8 <_puts_r+0x8c>
 80015b8:	290a      	cmp	r1, #10
 80015ba:	d015      	beq.n	80015e8 <_puts_r+0x8c>
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	6022      	str	r2, [r4, #0]
 80015c2:	7019      	strb	r1, [r3, #0]
 80015c4:	68a3      	ldr	r3, [r4, #8]
 80015c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80015ca:	3b01      	subs	r3, #1
 80015cc:	60a3      	str	r3, [r4, #8]
 80015ce:	2900      	cmp	r1, #0
 80015d0:	d1ed      	bne.n	80015ae <_puts_r+0x52>
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da11      	bge.n	80015fa <_puts_r+0x9e>
 80015d6:	4622      	mov	r2, r4
 80015d8:	210a      	movs	r1, #10
 80015da:	4628      	mov	r0, r5
 80015dc:	f000 f91b 	bl	8001816 <__swbuf_r>
 80015e0:	3001      	adds	r0, #1
 80015e2:	d0d7      	beq.n	8001594 <_puts_r+0x38>
 80015e4:	250a      	movs	r5, #10
 80015e6:	e7d7      	b.n	8001598 <_puts_r+0x3c>
 80015e8:	4622      	mov	r2, r4
 80015ea:	4628      	mov	r0, r5
 80015ec:	f000 f913 	bl	8001816 <__swbuf_r>
 80015f0:	3001      	adds	r0, #1
 80015f2:	d1e7      	bne.n	80015c4 <_puts_r+0x68>
 80015f4:	e7ce      	b.n	8001594 <_puts_r+0x38>
 80015f6:	3e01      	subs	r6, #1
 80015f8:	e7e4      	b.n	80015c4 <_puts_r+0x68>
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	6022      	str	r2, [r4, #0]
 8001600:	220a      	movs	r2, #10
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e7ee      	b.n	80015e4 <_puts_r+0x88>
	...

08001608 <puts>:
 8001608:	4b02      	ldr	r3, [pc, #8]	@ (8001614 <puts+0xc>)
 800160a:	4601      	mov	r1, r0
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	f7ff bfa5 	b.w	800155c <_puts_r>
 8001612:	bf00      	nop
 8001614:	2000000c 	.word	0x2000000c

08001618 <setbuf>:
 8001618:	fab1 f281 	clz	r2, r1
 800161c:	0952      	lsrs	r2, r2, #5
 800161e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001622:	0052      	lsls	r2, r2, #1
 8001624:	f000 b800 	b.w	8001628 <setvbuf>

08001628 <setvbuf>:
 8001628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800162c:	461d      	mov	r5, r3
 800162e:	4b57      	ldr	r3, [pc, #348]	@ (800178c <setvbuf+0x164>)
 8001630:	681f      	ldr	r7, [r3, #0]
 8001632:	4604      	mov	r4, r0
 8001634:	460e      	mov	r6, r1
 8001636:	4690      	mov	r8, r2
 8001638:	b127      	cbz	r7, 8001644 <setvbuf+0x1c>
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	b913      	cbnz	r3, 8001644 <setvbuf+0x1c>
 800163e:	4638      	mov	r0, r7
 8001640:	f7ff ff56 	bl	80014f0 <__sinit>
 8001644:	f1b8 0f02 	cmp.w	r8, #2
 8001648:	d006      	beq.n	8001658 <setvbuf+0x30>
 800164a:	f1b8 0f01 	cmp.w	r8, #1
 800164e:	f200 809a 	bhi.w	8001786 <setvbuf+0x15e>
 8001652:	2d00      	cmp	r5, #0
 8001654:	f2c0 8097 	blt.w	8001786 <setvbuf+0x15e>
 8001658:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800165a:	07d9      	lsls	r1, r3, #31
 800165c:	d405      	bmi.n	800166a <setvbuf+0x42>
 800165e:	89a3      	ldrh	r3, [r4, #12]
 8001660:	059a      	lsls	r2, r3, #22
 8001662:	d402      	bmi.n	800166a <setvbuf+0x42>
 8001664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001666:	f000 f9cc 	bl	8001a02 <__retarget_lock_acquire_recursive>
 800166a:	4621      	mov	r1, r4
 800166c:	4638      	mov	r0, r7
 800166e:	f000 fb4f 	bl	8001d10 <_fflush_r>
 8001672:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001674:	b141      	cbz	r1, 8001688 <setvbuf+0x60>
 8001676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800167a:	4299      	cmp	r1, r3
 800167c:	d002      	beq.n	8001684 <setvbuf+0x5c>
 800167e:	4638      	mov	r0, r7
 8001680:	f000 f9c2 	bl	8001a08 <_free_r>
 8001684:	2300      	movs	r3, #0
 8001686:	6363      	str	r3, [r4, #52]	@ 0x34
 8001688:	2300      	movs	r3, #0
 800168a:	61a3      	str	r3, [r4, #24]
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	89a3      	ldrh	r3, [r4, #12]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	d503      	bpl.n	800169c <setvbuf+0x74>
 8001694:	6921      	ldr	r1, [r4, #16]
 8001696:	4638      	mov	r0, r7
 8001698:	f000 f9b6 	bl	8001a08 <_free_r>
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	f1b8 0f02 	cmp.w	r8, #2
 80016aa:	81a3      	strh	r3, [r4, #12]
 80016ac:	d061      	beq.n	8001772 <setvbuf+0x14a>
 80016ae:	ab01      	add	r3, sp, #4
 80016b0:	466a      	mov	r2, sp
 80016b2:	4621      	mov	r1, r4
 80016b4:	4638      	mov	r0, r7
 80016b6:	f000 fb53 	bl	8001d60 <__swhatbuf_r>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	4318      	orrs	r0, r3
 80016be:	81a0      	strh	r0, [r4, #12]
 80016c0:	bb2d      	cbnz	r5, 800170e <setvbuf+0xe6>
 80016c2:	9d00      	ldr	r5, [sp, #0]
 80016c4:	4628      	mov	r0, r5
 80016c6:	f000 f9e9 	bl	8001a9c <malloc>
 80016ca:	4606      	mov	r6, r0
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d152      	bne.n	8001776 <setvbuf+0x14e>
 80016d0:	f8dd 9000 	ldr.w	r9, [sp]
 80016d4:	45a9      	cmp	r9, r5
 80016d6:	d140      	bne.n	800175a <setvbuf+0x132>
 80016d8:	f04f 35ff 	mov.w	r5, #4294967295
 80016dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016e0:	f043 0202 	orr.w	r2, r3, #2
 80016e4:	81a2      	strh	r2, [r4, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	60a2      	str	r2, [r4, #8]
 80016ea:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80016ee:	6022      	str	r2, [r4, #0]
 80016f0:	6122      	str	r2, [r4, #16]
 80016f2:	2201      	movs	r2, #1
 80016f4:	6162      	str	r2, [r4, #20]
 80016f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80016f8:	07d6      	lsls	r6, r2, #31
 80016fa:	d404      	bmi.n	8001706 <setvbuf+0xde>
 80016fc:	0598      	lsls	r0, r3, #22
 80016fe:	d402      	bmi.n	8001706 <setvbuf+0xde>
 8001700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001702:	f000 f97f 	bl	8001a04 <__retarget_lock_release_recursive>
 8001706:	4628      	mov	r0, r5
 8001708:	b003      	add	sp, #12
 800170a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800170e:	2e00      	cmp	r6, #0
 8001710:	d0d8      	beq.n	80016c4 <setvbuf+0x9c>
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	b913      	cbnz	r3, 800171c <setvbuf+0xf4>
 8001716:	4638      	mov	r0, r7
 8001718:	f7ff feea 	bl	80014f0 <__sinit>
 800171c:	f1b8 0f01 	cmp.w	r8, #1
 8001720:	bf08      	it	eq
 8001722:	89a3      	ldrheq	r3, [r4, #12]
 8001724:	6026      	str	r6, [r4, #0]
 8001726:	bf04      	itt	eq
 8001728:	f043 0301 	orreq.w	r3, r3, #1
 800172c:	81a3      	strheq	r3, [r4, #12]
 800172e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001732:	f013 0208 	ands.w	r2, r3, #8
 8001736:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800173a:	d01e      	beq.n	800177a <setvbuf+0x152>
 800173c:	07d9      	lsls	r1, r3, #31
 800173e:	bf41      	itttt	mi
 8001740:	2200      	movmi	r2, #0
 8001742:	426d      	negmi	r5, r5
 8001744:	60a2      	strmi	r2, [r4, #8]
 8001746:	61a5      	strmi	r5, [r4, #24]
 8001748:	bf58      	it	pl
 800174a:	60a5      	strpl	r5, [r4, #8]
 800174c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800174e:	07d2      	lsls	r2, r2, #31
 8001750:	d401      	bmi.n	8001756 <setvbuf+0x12e>
 8001752:	059b      	lsls	r3, r3, #22
 8001754:	d513      	bpl.n	800177e <setvbuf+0x156>
 8001756:	2500      	movs	r5, #0
 8001758:	e7d5      	b.n	8001706 <setvbuf+0xde>
 800175a:	4648      	mov	r0, r9
 800175c:	f000 f99e 	bl	8001a9c <malloc>
 8001760:	4606      	mov	r6, r0
 8001762:	2800      	cmp	r0, #0
 8001764:	d0b8      	beq.n	80016d8 <setvbuf+0xb0>
 8001766:	89a3      	ldrh	r3, [r4, #12]
 8001768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176c:	81a3      	strh	r3, [r4, #12]
 800176e:	464d      	mov	r5, r9
 8001770:	e7cf      	b.n	8001712 <setvbuf+0xea>
 8001772:	2500      	movs	r5, #0
 8001774:	e7b2      	b.n	80016dc <setvbuf+0xb4>
 8001776:	46a9      	mov	r9, r5
 8001778:	e7f5      	b.n	8001766 <setvbuf+0x13e>
 800177a:	60a2      	str	r2, [r4, #8]
 800177c:	e7e6      	b.n	800174c <setvbuf+0x124>
 800177e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001780:	f000 f940 	bl	8001a04 <__retarget_lock_release_recursive>
 8001784:	e7e7      	b.n	8001756 <setvbuf+0x12e>
 8001786:	f04f 35ff 	mov.w	r5, #4294967295
 800178a:	e7bc      	b.n	8001706 <setvbuf+0xde>
 800178c:	2000000c 	.word	0x2000000c

08001790 <__sread>:
 8001790:	b510      	push	{r4, lr}
 8001792:	460c      	mov	r4, r1
 8001794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001798:	f000 f8fc 	bl	8001994 <_read_r>
 800179c:	2800      	cmp	r0, #0
 800179e:	bfab      	itete	ge
 80017a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017a2:	89a3      	ldrhlt	r3, [r4, #12]
 80017a4:	181b      	addge	r3, r3, r0
 80017a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017aa:	bfac      	ite	ge
 80017ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017ae:	81a3      	strhlt	r3, [r4, #12]
 80017b0:	bd10      	pop	{r4, pc}

080017b2 <__swrite>:
 80017b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b6:	461f      	mov	r7, r3
 80017b8:	898b      	ldrh	r3, [r1, #12]
 80017ba:	05db      	lsls	r3, r3, #23
 80017bc:	4605      	mov	r5, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	4616      	mov	r6, r2
 80017c2:	d505      	bpl.n	80017d0 <__swrite+0x1e>
 80017c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c8:	2302      	movs	r3, #2
 80017ca:	2200      	movs	r2, #0
 80017cc:	f000 f8d0 	bl	8001970 <_lseek_r>
 80017d0:	89a3      	ldrh	r3, [r4, #12]
 80017d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017da:	81a3      	strh	r3, [r4, #12]
 80017dc:	4632      	mov	r2, r6
 80017de:	463b      	mov	r3, r7
 80017e0:	4628      	mov	r0, r5
 80017e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017e6:	f7ff b94b 	b.w	8000a80 <_write_r>

080017ea <__sseek>:
 80017ea:	b510      	push	{r4, lr}
 80017ec:	460c      	mov	r4, r1
 80017ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017f2:	f000 f8bd 	bl	8001970 <_lseek_r>
 80017f6:	1c43      	adds	r3, r0, #1
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	bf15      	itete	ne
 80017fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80017fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001806:	81a3      	strheq	r3, [r4, #12]
 8001808:	bf18      	it	ne
 800180a:	81a3      	strhne	r3, [r4, #12]
 800180c:	bd10      	pop	{r4, pc}

0800180e <__sclose>:
 800180e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001812:	f000 b89d 	b.w	8001950 <_close_r>

08001816 <__swbuf_r>:
 8001816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001818:	460e      	mov	r6, r1
 800181a:	4614      	mov	r4, r2
 800181c:	4605      	mov	r5, r0
 800181e:	b118      	cbz	r0, 8001828 <__swbuf_r+0x12>
 8001820:	6a03      	ldr	r3, [r0, #32]
 8001822:	b90b      	cbnz	r3, 8001828 <__swbuf_r+0x12>
 8001824:	f7ff fe64 	bl	80014f0 <__sinit>
 8001828:	69a3      	ldr	r3, [r4, #24]
 800182a:	60a3      	str	r3, [r4, #8]
 800182c:	89a3      	ldrh	r3, [r4, #12]
 800182e:	071a      	lsls	r2, r3, #28
 8001830:	d501      	bpl.n	8001836 <__swbuf_r+0x20>
 8001832:	6923      	ldr	r3, [r4, #16]
 8001834:	b943      	cbnz	r3, 8001848 <__swbuf_r+0x32>
 8001836:	4621      	mov	r1, r4
 8001838:	4628      	mov	r0, r5
 800183a:	f000 f82b 	bl	8001894 <__swsetup_r>
 800183e:	b118      	cbz	r0, 8001848 <__swbuf_r+0x32>
 8001840:	f04f 37ff 	mov.w	r7, #4294967295
 8001844:	4638      	mov	r0, r7
 8001846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	6922      	ldr	r2, [r4, #16]
 800184c:	1a98      	subs	r0, r3, r2
 800184e:	6963      	ldr	r3, [r4, #20]
 8001850:	b2f6      	uxtb	r6, r6
 8001852:	4283      	cmp	r3, r0
 8001854:	4637      	mov	r7, r6
 8001856:	dc05      	bgt.n	8001864 <__swbuf_r+0x4e>
 8001858:	4621      	mov	r1, r4
 800185a:	4628      	mov	r0, r5
 800185c:	f000 fa58 	bl	8001d10 <_fflush_r>
 8001860:	2800      	cmp	r0, #0
 8001862:	d1ed      	bne.n	8001840 <__swbuf_r+0x2a>
 8001864:	68a3      	ldr	r3, [r4, #8]
 8001866:	3b01      	subs	r3, #1
 8001868:	60a3      	str	r3, [r4, #8]
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	6022      	str	r2, [r4, #0]
 8001870:	701e      	strb	r6, [r3, #0]
 8001872:	6962      	ldr	r2, [r4, #20]
 8001874:	1c43      	adds	r3, r0, #1
 8001876:	429a      	cmp	r2, r3
 8001878:	d004      	beq.n	8001884 <__swbuf_r+0x6e>
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	07db      	lsls	r3, r3, #31
 800187e:	d5e1      	bpl.n	8001844 <__swbuf_r+0x2e>
 8001880:	2e0a      	cmp	r6, #10
 8001882:	d1df      	bne.n	8001844 <__swbuf_r+0x2e>
 8001884:	4621      	mov	r1, r4
 8001886:	4628      	mov	r0, r5
 8001888:	f000 fa42 	bl	8001d10 <_fflush_r>
 800188c:	2800      	cmp	r0, #0
 800188e:	d0d9      	beq.n	8001844 <__swbuf_r+0x2e>
 8001890:	e7d6      	b.n	8001840 <__swbuf_r+0x2a>
	...

08001894 <__swsetup_r>:
 8001894:	b538      	push	{r3, r4, r5, lr}
 8001896:	4b29      	ldr	r3, [pc, #164]	@ (800193c <__swsetup_r+0xa8>)
 8001898:	4605      	mov	r5, r0
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	460c      	mov	r4, r1
 800189e:	b118      	cbz	r0, 80018a8 <__swsetup_r+0x14>
 80018a0:	6a03      	ldr	r3, [r0, #32]
 80018a2:	b90b      	cbnz	r3, 80018a8 <__swsetup_r+0x14>
 80018a4:	f7ff fe24 	bl	80014f0 <__sinit>
 80018a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ac:	0719      	lsls	r1, r3, #28
 80018ae:	d422      	bmi.n	80018f6 <__swsetup_r+0x62>
 80018b0:	06da      	lsls	r2, r3, #27
 80018b2:	d407      	bmi.n	80018c4 <__swsetup_r+0x30>
 80018b4:	2209      	movs	r2, #9
 80018b6:	602a      	str	r2, [r5, #0]
 80018b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018bc:	81a3      	strh	r3, [r4, #12]
 80018be:	f04f 30ff 	mov.w	r0, #4294967295
 80018c2:	e033      	b.n	800192c <__swsetup_r+0x98>
 80018c4:	0758      	lsls	r0, r3, #29
 80018c6:	d512      	bpl.n	80018ee <__swsetup_r+0x5a>
 80018c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018ca:	b141      	cbz	r1, 80018de <__swsetup_r+0x4a>
 80018cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018d0:	4299      	cmp	r1, r3
 80018d2:	d002      	beq.n	80018da <__swsetup_r+0x46>
 80018d4:	4628      	mov	r0, r5
 80018d6:	f000 f897 	bl	8001a08 <_free_r>
 80018da:	2300      	movs	r3, #0
 80018dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80018de:	89a3      	ldrh	r3, [r4, #12]
 80018e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	2300      	movs	r3, #0
 80018e8:	6063      	str	r3, [r4, #4]
 80018ea:	6923      	ldr	r3, [r4, #16]
 80018ec:	6023      	str	r3, [r4, #0]
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	81a3      	strh	r3, [r4, #12]
 80018f6:	6923      	ldr	r3, [r4, #16]
 80018f8:	b94b      	cbnz	r3, 800190e <__swsetup_r+0x7a>
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001904:	d003      	beq.n	800190e <__swsetup_r+0x7a>
 8001906:	4621      	mov	r1, r4
 8001908:	4628      	mov	r0, r5
 800190a:	f000 fa4f 	bl	8001dac <__smakebuf_r>
 800190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001912:	f013 0201 	ands.w	r2, r3, #1
 8001916:	d00a      	beq.n	800192e <__swsetup_r+0x9a>
 8001918:	2200      	movs	r2, #0
 800191a:	60a2      	str	r2, [r4, #8]
 800191c:	6962      	ldr	r2, [r4, #20]
 800191e:	4252      	negs	r2, r2
 8001920:	61a2      	str	r2, [r4, #24]
 8001922:	6922      	ldr	r2, [r4, #16]
 8001924:	b942      	cbnz	r2, 8001938 <__swsetup_r+0xa4>
 8001926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800192a:	d1c5      	bne.n	80018b8 <__swsetup_r+0x24>
 800192c:	bd38      	pop	{r3, r4, r5, pc}
 800192e:	0799      	lsls	r1, r3, #30
 8001930:	bf58      	it	pl
 8001932:	6962      	ldrpl	r2, [r4, #20]
 8001934:	60a2      	str	r2, [r4, #8]
 8001936:	e7f4      	b.n	8001922 <__swsetup_r+0x8e>
 8001938:	2000      	movs	r0, #0
 800193a:	e7f7      	b.n	800192c <__swsetup_r+0x98>
 800193c:	2000000c 	.word	0x2000000c

08001940 <memset>:
 8001940:	4402      	add	r2, r0
 8001942:	4603      	mov	r3, r0
 8001944:	4293      	cmp	r3, r2
 8001946:	d100      	bne.n	800194a <memset+0xa>
 8001948:	4770      	bx	lr
 800194a:	f803 1b01 	strb.w	r1, [r3], #1
 800194e:	e7f9      	b.n	8001944 <memset+0x4>

08001950 <_close_r>:
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4d06      	ldr	r5, [pc, #24]	@ (800196c <_close_r+0x1c>)
 8001954:	2300      	movs	r3, #0
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	602b      	str	r3, [r5, #0]
 800195c:	f7ff fc49 	bl	80011f2 <_close>
 8001960:	1c43      	adds	r3, r0, #1
 8001962:	d102      	bne.n	800196a <_close_r+0x1a>
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	b103      	cbz	r3, 800196a <_close_r+0x1a>
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	bd38      	pop	{r3, r4, r5, pc}
 800196c:	200002b8 	.word	0x200002b8

08001970 <_lseek_r>:
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	4d07      	ldr	r5, [pc, #28]	@ (8001990 <_lseek_r+0x20>)
 8001974:	4604      	mov	r4, r0
 8001976:	4608      	mov	r0, r1
 8001978:	4611      	mov	r1, r2
 800197a:	2200      	movs	r2, #0
 800197c:	602a      	str	r2, [r5, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	f7ff fc5e 	bl	8001240 <_lseek>
 8001984:	1c43      	adds	r3, r0, #1
 8001986:	d102      	bne.n	800198e <_lseek_r+0x1e>
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	b103      	cbz	r3, 800198e <_lseek_r+0x1e>
 800198c:	6023      	str	r3, [r4, #0]
 800198e:	bd38      	pop	{r3, r4, r5, pc}
 8001990:	200002b8 	.word	0x200002b8

08001994 <_read_r>:
 8001994:	b538      	push	{r3, r4, r5, lr}
 8001996:	4d07      	ldr	r5, [pc, #28]	@ (80019b4 <_read_r+0x20>)
 8001998:	4604      	mov	r4, r0
 800199a:	4608      	mov	r0, r1
 800199c:	4611      	mov	r1, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	602a      	str	r2, [r5, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f7ff fc08 	bl	80011b8 <_read>
 80019a8:	1c43      	adds	r3, r0, #1
 80019aa:	d102      	bne.n	80019b2 <_read_r+0x1e>
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	b103      	cbz	r3, 80019b2 <_read_r+0x1e>
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	bd38      	pop	{r3, r4, r5, pc}
 80019b4:	200002b8 	.word	0x200002b8

080019b8 <__libc_init_array>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	4d0d      	ldr	r5, [pc, #52]	@ (80019f0 <__libc_init_array+0x38>)
 80019bc:	4c0d      	ldr	r4, [pc, #52]	@ (80019f4 <__libc_init_array+0x3c>)
 80019be:	1b64      	subs	r4, r4, r5
 80019c0:	10a4      	asrs	r4, r4, #2
 80019c2:	2600      	movs	r6, #0
 80019c4:	42a6      	cmp	r6, r4
 80019c6:	d109      	bne.n	80019dc <__libc_init_array+0x24>
 80019c8:	4d0b      	ldr	r5, [pc, #44]	@ (80019f8 <__libc_init_array+0x40>)
 80019ca:	4c0c      	ldr	r4, [pc, #48]	@ (80019fc <__libc_init_array+0x44>)
 80019cc:	f000 fa6a 	bl	8001ea4 <_init>
 80019d0:	1b64      	subs	r4, r4, r5
 80019d2:	10a4      	asrs	r4, r4, #2
 80019d4:	2600      	movs	r6, #0
 80019d6:	42a6      	cmp	r6, r4
 80019d8:	d105      	bne.n	80019e6 <__libc_init_array+0x2e>
 80019da:	bd70      	pop	{r4, r5, r6, pc}
 80019dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e0:	4798      	blx	r3
 80019e2:	3601      	adds	r6, #1
 80019e4:	e7ee      	b.n	80019c4 <__libc_init_array+0xc>
 80019e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ea:	4798      	blx	r3
 80019ec:	3601      	adds	r6, #1
 80019ee:	e7f2      	b.n	80019d6 <__libc_init_array+0x1e>
 80019f0:	08001f0c 	.word	0x08001f0c
 80019f4:	08001f0c 	.word	0x08001f0c
 80019f8:	08001f0c 	.word	0x08001f0c
 80019fc:	08001f10 	.word	0x08001f10

08001a00 <__retarget_lock_init_recursive>:
 8001a00:	4770      	bx	lr

08001a02 <__retarget_lock_acquire_recursive>:
 8001a02:	4770      	bx	lr

08001a04 <__retarget_lock_release_recursive>:
 8001a04:	4770      	bx	lr
	...

08001a08 <_free_r>:
 8001a08:	b538      	push	{r3, r4, r5, lr}
 8001a0a:	4605      	mov	r5, r0
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d041      	beq.n	8001a94 <_free_r+0x8c>
 8001a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a14:	1f0c      	subs	r4, r1, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bfb8      	it	lt
 8001a1a:	18e4      	addlt	r4, r4, r3
 8001a1c:	f000 f8e8 	bl	8001bf0 <__malloc_lock>
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <_free_r+0x90>)
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	b933      	cbnz	r3, 8001a34 <_free_r+0x2c>
 8001a26:	6063      	str	r3, [r4, #4]
 8001a28:	6014      	str	r4, [r2, #0]
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a30:	f000 b8e4 	b.w	8001bfc <__malloc_unlock>
 8001a34:	42a3      	cmp	r3, r4
 8001a36:	d908      	bls.n	8001a4a <_free_r+0x42>
 8001a38:	6820      	ldr	r0, [r4, #0]
 8001a3a:	1821      	adds	r1, r4, r0
 8001a3c:	428b      	cmp	r3, r1
 8001a3e:	bf01      	itttt	eq
 8001a40:	6819      	ldreq	r1, [r3, #0]
 8001a42:	685b      	ldreq	r3, [r3, #4]
 8001a44:	1809      	addeq	r1, r1, r0
 8001a46:	6021      	streq	r1, [r4, #0]
 8001a48:	e7ed      	b.n	8001a26 <_free_r+0x1e>
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	b10b      	cbz	r3, 8001a54 <_free_r+0x4c>
 8001a50:	42a3      	cmp	r3, r4
 8001a52:	d9fa      	bls.n	8001a4a <_free_r+0x42>
 8001a54:	6811      	ldr	r1, [r2, #0]
 8001a56:	1850      	adds	r0, r2, r1
 8001a58:	42a0      	cmp	r0, r4
 8001a5a:	d10b      	bne.n	8001a74 <_free_r+0x6c>
 8001a5c:	6820      	ldr	r0, [r4, #0]
 8001a5e:	4401      	add	r1, r0
 8001a60:	1850      	adds	r0, r2, r1
 8001a62:	4283      	cmp	r3, r0
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	d1e0      	bne.n	8001a2a <_free_r+0x22>
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	6053      	str	r3, [r2, #4]
 8001a6e:	4408      	add	r0, r1
 8001a70:	6010      	str	r0, [r2, #0]
 8001a72:	e7da      	b.n	8001a2a <_free_r+0x22>
 8001a74:	d902      	bls.n	8001a7c <_free_r+0x74>
 8001a76:	230c      	movs	r3, #12
 8001a78:	602b      	str	r3, [r5, #0]
 8001a7a:	e7d6      	b.n	8001a2a <_free_r+0x22>
 8001a7c:	6820      	ldr	r0, [r4, #0]
 8001a7e:	1821      	adds	r1, r4, r0
 8001a80:	428b      	cmp	r3, r1
 8001a82:	bf04      	itt	eq
 8001a84:	6819      	ldreq	r1, [r3, #0]
 8001a86:	685b      	ldreq	r3, [r3, #4]
 8001a88:	6063      	str	r3, [r4, #4]
 8001a8a:	bf04      	itt	eq
 8001a8c:	1809      	addeq	r1, r1, r0
 8001a8e:	6021      	streq	r1, [r4, #0]
 8001a90:	6054      	str	r4, [r2, #4]
 8001a92:	e7ca      	b.n	8001a2a <_free_r+0x22>
 8001a94:	bd38      	pop	{r3, r4, r5, pc}
 8001a96:	bf00      	nop
 8001a98:	200002c4 	.word	0x200002c4

08001a9c <malloc>:
 8001a9c:	4b02      	ldr	r3, [pc, #8]	@ (8001aa8 <malloc+0xc>)
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f000 b825 	b.w	8001af0 <_malloc_r>
 8001aa6:	bf00      	nop
 8001aa8:	2000000c 	.word	0x2000000c

08001aac <sbrk_aligned>:
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	4e0f      	ldr	r6, [pc, #60]	@ (8001aec <sbrk_aligned+0x40>)
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	6831      	ldr	r1, [r6, #0]
 8001ab4:	4605      	mov	r5, r0
 8001ab6:	b911      	cbnz	r1, 8001abe <sbrk_aligned+0x12>
 8001ab8:	f000 f9d6 	bl	8001e68 <_sbrk_r>
 8001abc:	6030      	str	r0, [r6, #0]
 8001abe:	4621      	mov	r1, r4
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f000 f9d1 	bl	8001e68 <_sbrk_r>
 8001ac6:	1c43      	adds	r3, r0, #1
 8001ac8:	d103      	bne.n	8001ad2 <sbrk_aligned+0x26>
 8001aca:	f04f 34ff 	mov.w	r4, #4294967295
 8001ace:	4620      	mov	r0, r4
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
 8001ad2:	1cc4      	adds	r4, r0, #3
 8001ad4:	f024 0403 	bic.w	r4, r4, #3
 8001ad8:	42a0      	cmp	r0, r4
 8001ada:	d0f8      	beq.n	8001ace <sbrk_aligned+0x22>
 8001adc:	1a21      	subs	r1, r4, r0
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f000 f9c2 	bl	8001e68 <_sbrk_r>
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	d1f2      	bne.n	8001ace <sbrk_aligned+0x22>
 8001ae8:	e7ef      	b.n	8001aca <sbrk_aligned+0x1e>
 8001aea:	bf00      	nop
 8001aec:	200002c0 	.word	0x200002c0

08001af0 <_malloc_r>:
 8001af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001af4:	1ccd      	adds	r5, r1, #3
 8001af6:	f025 0503 	bic.w	r5, r5, #3
 8001afa:	3508      	adds	r5, #8
 8001afc:	2d0c      	cmp	r5, #12
 8001afe:	bf38      	it	cc
 8001b00:	250c      	movcc	r5, #12
 8001b02:	2d00      	cmp	r5, #0
 8001b04:	4606      	mov	r6, r0
 8001b06:	db01      	blt.n	8001b0c <_malloc_r+0x1c>
 8001b08:	42a9      	cmp	r1, r5
 8001b0a:	d904      	bls.n	8001b16 <_malloc_r+0x26>
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	6033      	str	r3, [r6, #0]
 8001b10:	2000      	movs	r0, #0
 8001b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001bec <_malloc_r+0xfc>
 8001b1a:	f000 f869 	bl	8001bf0 <__malloc_lock>
 8001b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b22:	461c      	mov	r4, r3
 8001b24:	bb44      	cbnz	r4, 8001b78 <_malloc_r+0x88>
 8001b26:	4629      	mov	r1, r5
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f7ff ffbf 	bl	8001aac <sbrk_aligned>
 8001b2e:	1c43      	adds	r3, r0, #1
 8001b30:	4604      	mov	r4, r0
 8001b32:	d158      	bne.n	8001be6 <_malloc_r+0xf6>
 8001b34:	f8d8 4000 	ldr.w	r4, [r8]
 8001b38:	4627      	mov	r7, r4
 8001b3a:	2f00      	cmp	r7, #0
 8001b3c:	d143      	bne.n	8001bc6 <_malloc_r+0xd6>
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d04b      	beq.n	8001bda <_malloc_r+0xea>
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	4639      	mov	r1, r7
 8001b46:	4630      	mov	r0, r6
 8001b48:	eb04 0903 	add.w	r9, r4, r3
 8001b4c:	f000 f98c 	bl	8001e68 <_sbrk_r>
 8001b50:	4581      	cmp	r9, r0
 8001b52:	d142      	bne.n	8001bda <_malloc_r+0xea>
 8001b54:	6821      	ldr	r1, [r4, #0]
 8001b56:	1a6d      	subs	r5, r5, r1
 8001b58:	4629      	mov	r1, r5
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	f7ff ffa6 	bl	8001aac <sbrk_aligned>
 8001b60:	3001      	adds	r0, #1
 8001b62:	d03a      	beq.n	8001bda <_malloc_r+0xea>
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	442b      	add	r3, r5
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	bb62      	cbnz	r2, 8001bcc <_malloc_r+0xdc>
 8001b72:	f8c8 7000 	str.w	r7, [r8]
 8001b76:	e00f      	b.n	8001b98 <_malloc_r+0xa8>
 8001b78:	6822      	ldr	r2, [r4, #0]
 8001b7a:	1b52      	subs	r2, r2, r5
 8001b7c:	d420      	bmi.n	8001bc0 <_malloc_r+0xd0>
 8001b7e:	2a0b      	cmp	r2, #11
 8001b80:	d917      	bls.n	8001bb2 <_malloc_r+0xc2>
 8001b82:	1961      	adds	r1, r4, r5
 8001b84:	42a3      	cmp	r3, r4
 8001b86:	6025      	str	r5, [r4, #0]
 8001b88:	bf18      	it	ne
 8001b8a:	6059      	strne	r1, [r3, #4]
 8001b8c:	6863      	ldr	r3, [r4, #4]
 8001b8e:	bf08      	it	eq
 8001b90:	f8c8 1000 	streq.w	r1, [r8]
 8001b94:	5162      	str	r2, [r4, r5]
 8001b96:	604b      	str	r3, [r1, #4]
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f000 f82f 	bl	8001bfc <__malloc_unlock>
 8001b9e:	f104 000b 	add.w	r0, r4, #11
 8001ba2:	1d23      	adds	r3, r4, #4
 8001ba4:	f020 0007 	bic.w	r0, r0, #7
 8001ba8:	1ac2      	subs	r2, r0, r3
 8001baa:	bf1c      	itt	ne
 8001bac:	1a1b      	subne	r3, r3, r0
 8001bae:	50a3      	strne	r3, [r4, r2]
 8001bb0:	e7af      	b.n	8001b12 <_malloc_r+0x22>
 8001bb2:	6862      	ldr	r2, [r4, #4]
 8001bb4:	42a3      	cmp	r3, r4
 8001bb6:	bf0c      	ite	eq
 8001bb8:	f8c8 2000 	streq.w	r2, [r8]
 8001bbc:	605a      	strne	r2, [r3, #4]
 8001bbe:	e7eb      	b.n	8001b98 <_malloc_r+0xa8>
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	6864      	ldr	r4, [r4, #4]
 8001bc4:	e7ae      	b.n	8001b24 <_malloc_r+0x34>
 8001bc6:	463c      	mov	r4, r7
 8001bc8:	687f      	ldr	r7, [r7, #4]
 8001bca:	e7b6      	b.n	8001b3a <_malloc_r+0x4a>
 8001bcc:	461a      	mov	r2, r3
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	d1fb      	bne.n	8001bcc <_malloc_r+0xdc>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6053      	str	r3, [r2, #4]
 8001bd8:	e7de      	b.n	8001b98 <_malloc_r+0xa8>
 8001bda:	230c      	movs	r3, #12
 8001bdc:	6033      	str	r3, [r6, #0]
 8001bde:	4630      	mov	r0, r6
 8001be0:	f000 f80c 	bl	8001bfc <__malloc_unlock>
 8001be4:	e794      	b.n	8001b10 <_malloc_r+0x20>
 8001be6:	6005      	str	r5, [r0, #0]
 8001be8:	e7d6      	b.n	8001b98 <_malloc_r+0xa8>
 8001bea:	bf00      	nop
 8001bec:	200002c4 	.word	0x200002c4

08001bf0 <__malloc_lock>:
 8001bf0:	4801      	ldr	r0, [pc, #4]	@ (8001bf8 <__malloc_lock+0x8>)
 8001bf2:	f7ff bf06 	b.w	8001a02 <__retarget_lock_acquire_recursive>
 8001bf6:	bf00      	nop
 8001bf8:	200002bc 	.word	0x200002bc

08001bfc <__malloc_unlock>:
 8001bfc:	4801      	ldr	r0, [pc, #4]	@ (8001c04 <__malloc_unlock+0x8>)
 8001bfe:	f7ff bf01 	b.w	8001a04 <__retarget_lock_release_recursive>
 8001c02:	bf00      	nop
 8001c04:	200002bc 	.word	0x200002bc

08001c08 <__sflush_r>:
 8001c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c10:	0716      	lsls	r6, r2, #28
 8001c12:	4605      	mov	r5, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	d454      	bmi.n	8001cc2 <__sflush_r+0xba>
 8001c18:	684b      	ldr	r3, [r1, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	dc02      	bgt.n	8001c24 <__sflush_r+0x1c>
 8001c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	dd48      	ble.n	8001cb6 <__sflush_r+0xae>
 8001c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c26:	2e00      	cmp	r6, #0
 8001c28:	d045      	beq.n	8001cb6 <__sflush_r+0xae>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c30:	682f      	ldr	r7, [r5, #0]
 8001c32:	6a21      	ldr	r1, [r4, #32]
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	d030      	beq.n	8001c9a <__sflush_r+0x92>
 8001c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	0759      	lsls	r1, r3, #29
 8001c3e:	d505      	bpl.n	8001c4c <__sflush_r+0x44>
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c46:	b10b      	cbz	r3, 8001c4c <__sflush_r+0x44>
 8001c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c4a:	1ad2      	subs	r2, r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c50:	6a21      	ldr	r1, [r4, #32]
 8001c52:	4628      	mov	r0, r5
 8001c54:	47b0      	blx	r6
 8001c56:	1c43      	adds	r3, r0, #1
 8001c58:	89a3      	ldrh	r3, [r4, #12]
 8001c5a:	d106      	bne.n	8001c6a <__sflush_r+0x62>
 8001c5c:	6829      	ldr	r1, [r5, #0]
 8001c5e:	291d      	cmp	r1, #29
 8001c60:	d82b      	bhi.n	8001cba <__sflush_r+0xb2>
 8001c62:	4a2a      	ldr	r2, [pc, #168]	@ (8001d0c <__sflush_r+0x104>)
 8001c64:	40ca      	lsrs	r2, r1
 8001c66:	07d6      	lsls	r6, r2, #31
 8001c68:	d527      	bpl.n	8001cba <__sflush_r+0xb2>
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	6062      	str	r2, [r4, #4]
 8001c6e:	04d9      	lsls	r1, r3, #19
 8001c70:	6922      	ldr	r2, [r4, #16]
 8001c72:	6022      	str	r2, [r4, #0]
 8001c74:	d504      	bpl.n	8001c80 <__sflush_r+0x78>
 8001c76:	1c42      	adds	r2, r0, #1
 8001c78:	d101      	bne.n	8001c7e <__sflush_r+0x76>
 8001c7a:	682b      	ldr	r3, [r5, #0]
 8001c7c:	b903      	cbnz	r3, 8001c80 <__sflush_r+0x78>
 8001c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c82:	602f      	str	r7, [r5, #0]
 8001c84:	b1b9      	cbz	r1, 8001cb6 <__sflush_r+0xae>
 8001c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001c8a:	4299      	cmp	r1, r3
 8001c8c:	d002      	beq.n	8001c94 <__sflush_r+0x8c>
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f7ff feba 	bl	8001a08 <_free_r>
 8001c94:	2300      	movs	r3, #0
 8001c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c98:	e00d      	b.n	8001cb6 <__sflush_r+0xae>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	47b0      	blx	r6
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	1c50      	adds	r0, r2, #1
 8001ca4:	d1c9      	bne.n	8001c3a <__sflush_r+0x32>
 8001ca6:	682b      	ldr	r3, [r5, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0c6      	beq.n	8001c3a <__sflush_r+0x32>
 8001cac:	2b1d      	cmp	r3, #29
 8001cae:	d001      	beq.n	8001cb4 <__sflush_r+0xac>
 8001cb0:	2b16      	cmp	r3, #22
 8001cb2:	d11e      	bne.n	8001cf2 <__sflush_r+0xea>
 8001cb4:	602f      	str	r7, [r5, #0]
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e022      	b.n	8001d00 <__sflush_r+0xf8>
 8001cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	e01b      	b.n	8001cfa <__sflush_r+0xf2>
 8001cc2:	690f      	ldr	r7, [r1, #16]
 8001cc4:	2f00      	cmp	r7, #0
 8001cc6:	d0f6      	beq.n	8001cb6 <__sflush_r+0xae>
 8001cc8:	0793      	lsls	r3, r2, #30
 8001cca:	680e      	ldr	r6, [r1, #0]
 8001ccc:	bf08      	it	eq
 8001cce:	694b      	ldreq	r3, [r1, #20]
 8001cd0:	600f      	str	r7, [r1, #0]
 8001cd2:	bf18      	it	ne
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	eba6 0807 	sub.w	r8, r6, r7
 8001cda:	608b      	str	r3, [r1, #8]
 8001cdc:	f1b8 0f00 	cmp.w	r8, #0
 8001ce0:	dde9      	ble.n	8001cb6 <__sflush_r+0xae>
 8001ce2:	6a21      	ldr	r1, [r4, #32]
 8001ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001ce6:	4643      	mov	r3, r8
 8001ce8:	463a      	mov	r2, r7
 8001cea:	4628      	mov	r0, r5
 8001cec:	47b0      	blx	r6
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	dc08      	bgt.n	8001d04 <__sflush_r+0xfc>
 8001cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cfa:	81a3      	strh	r3, [r4, #12]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d04:	4407      	add	r7, r0
 8001d06:	eba8 0800 	sub.w	r8, r8, r0
 8001d0a:	e7e7      	b.n	8001cdc <__sflush_r+0xd4>
 8001d0c:	20400001 	.word	0x20400001

08001d10 <_fflush_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	690b      	ldr	r3, [r1, #16]
 8001d14:	4605      	mov	r5, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	b913      	cbnz	r3, 8001d20 <_fflush_r+0x10>
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	b118      	cbz	r0, 8001d2a <_fflush_r+0x1a>
 8001d22:	6a03      	ldr	r3, [r0, #32]
 8001d24:	b90b      	cbnz	r3, 8001d2a <_fflush_r+0x1a>
 8001d26:	f7ff fbe3 	bl	80014f0 <__sinit>
 8001d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f3      	beq.n	8001d1a <_fflush_r+0xa>
 8001d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d34:	07d0      	lsls	r0, r2, #31
 8001d36:	d404      	bmi.n	8001d42 <_fflush_r+0x32>
 8001d38:	0599      	lsls	r1, r3, #22
 8001d3a:	d402      	bmi.n	8001d42 <_fflush_r+0x32>
 8001d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d3e:	f7ff fe60 	bl	8001a02 <__retarget_lock_acquire_recursive>
 8001d42:	4628      	mov	r0, r5
 8001d44:	4621      	mov	r1, r4
 8001d46:	f7ff ff5f 	bl	8001c08 <__sflush_r>
 8001d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d4c:	07da      	lsls	r2, r3, #31
 8001d4e:	4605      	mov	r5, r0
 8001d50:	d4e4      	bmi.n	8001d1c <_fflush_r+0xc>
 8001d52:	89a3      	ldrh	r3, [r4, #12]
 8001d54:	059b      	lsls	r3, r3, #22
 8001d56:	d4e1      	bmi.n	8001d1c <_fflush_r+0xc>
 8001d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d5a:	f7ff fe53 	bl	8001a04 <__retarget_lock_release_recursive>
 8001d5e:	e7dd      	b.n	8001d1c <_fflush_r+0xc>

08001d60 <__swhatbuf_r>:
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	460c      	mov	r4, r1
 8001d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d68:	2900      	cmp	r1, #0
 8001d6a:	b096      	sub	sp, #88	@ 0x58
 8001d6c:	4615      	mov	r5, r2
 8001d6e:	461e      	mov	r6, r3
 8001d70:	da0d      	bge.n	8001d8e <__swhatbuf_r+0x2e>
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2340      	movne	r3, #64	@ 0x40
 8001d80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001d84:	2000      	movs	r0, #0
 8001d86:	6031      	str	r1, [r6, #0]
 8001d88:	602b      	str	r3, [r5, #0]
 8001d8a:	b016      	add	sp, #88	@ 0x58
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
 8001d8e:	466a      	mov	r2, sp
 8001d90:	f000 f848 	bl	8001e24 <_fstat_r>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	dbec      	blt.n	8001d72 <__swhatbuf_r+0x12>
 8001d98:	9901      	ldr	r1, [sp, #4]
 8001d9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001d9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001da2:	4259      	negs	r1, r3
 8001da4:	4159      	adcs	r1, r3
 8001da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001daa:	e7eb      	b.n	8001d84 <__swhatbuf_r+0x24>

08001dac <__smakebuf_r>:
 8001dac:	898b      	ldrh	r3, [r1, #12]
 8001dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001db0:	079d      	lsls	r5, r3, #30
 8001db2:	4606      	mov	r6, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	d507      	bpl.n	8001dc8 <__smakebuf_r+0x1c>
 8001db8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001dbc:	6023      	str	r3, [r4, #0]
 8001dbe:	6123      	str	r3, [r4, #16]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	6163      	str	r3, [r4, #20]
 8001dc4:	b003      	add	sp, #12
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc8:	ab01      	add	r3, sp, #4
 8001dca:	466a      	mov	r2, sp
 8001dcc:	f7ff ffc8 	bl	8001d60 <__swhatbuf_r>
 8001dd0:	9f00      	ldr	r7, [sp, #0]
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	4639      	mov	r1, r7
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fe8a 	bl	8001af0 <_malloc_r>
 8001ddc:	b948      	cbnz	r0, 8001df2 <__smakebuf_r+0x46>
 8001dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001de2:	059a      	lsls	r2, r3, #22
 8001de4:	d4ee      	bmi.n	8001dc4 <__smakebuf_r+0x18>
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	81a3      	strh	r3, [r4, #12]
 8001df0:	e7e2      	b.n	8001db8 <__smakebuf_r+0xc>
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	6020      	str	r0, [r4, #0]
 8001df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dfa:	81a3      	strh	r3, [r4, #12]
 8001dfc:	9b01      	ldr	r3, [sp, #4]
 8001dfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e02:	b15b      	cbz	r3, 8001e1c <__smakebuf_r+0x70>
 8001e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e08:	4630      	mov	r0, r6
 8001e0a:	f000 f81d 	bl	8001e48 <_isatty_r>
 8001e0e:	b128      	cbz	r0, 8001e1c <__smakebuf_r+0x70>
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	81a3      	strh	r3, [r4, #12]
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	431d      	orrs	r5, r3
 8001e20:	81a5      	strh	r5, [r4, #12]
 8001e22:	e7cf      	b.n	8001dc4 <__smakebuf_r+0x18>

08001e24 <_fstat_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4d07      	ldr	r5, [pc, #28]	@ (8001e44 <_fstat_r+0x20>)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	f7ff f9ea 	bl	800120a <_fstat>
 8001e36:	1c43      	adds	r3, r0, #1
 8001e38:	d102      	bne.n	8001e40 <_fstat_r+0x1c>
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	b103      	cbz	r3, 8001e40 <_fstat_r+0x1c>
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
 8001e42:	bf00      	nop
 8001e44:	200002b8 	.word	0x200002b8

08001e48 <_isatty_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4d06      	ldr	r5, [pc, #24]	@ (8001e64 <_isatty_r+0x1c>)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	602b      	str	r3, [r5, #0]
 8001e54:	f7ff f9e9 	bl	800122a <_isatty>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_isatty_r+0x1a>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_isatty_r+0x1a>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	200002b8 	.word	0x200002b8

08001e68 <_sbrk_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4d06      	ldr	r5, [pc, #24]	@ (8001e84 <_sbrk_r+0x1c>)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	602b      	str	r3, [r5, #0]
 8001e74:	f000 f808 	bl	8001e88 <_sbrk>
 8001e78:	1c43      	adds	r3, r0, #1
 8001e7a:	d102      	bne.n	8001e82 <_sbrk_r+0x1a>
 8001e7c:	682b      	ldr	r3, [r5, #0]
 8001e7e:	b103      	cbz	r3, 8001e82 <_sbrk_r+0x1a>
 8001e80:	6023      	str	r3, [r4, #0]
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	200002b8 	.word	0x200002b8

08001e88 <_sbrk>:
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <_sbrk+0x14>)
 8001e8a:	6811      	ldr	r1, [r2, #0]
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b909      	cbnz	r1, 8001e94 <_sbrk+0xc>
 8001e90:	4903      	ldr	r1, [pc, #12]	@ (8001ea0 <_sbrk+0x18>)
 8001e92:	6011      	str	r1, [r2, #0]
 8001e94:	6810      	ldr	r0, [r2, #0]
 8001e96:	4403      	add	r3, r0
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4770      	bx	lr
 8001e9c:	200002c8 	.word	0x200002c8
 8001ea0:	200002d0 	.word	0x200002d0

08001ea4 <_init>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr

08001eb0 <_fini>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr
