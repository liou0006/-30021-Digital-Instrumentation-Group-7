
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002140  08002140  00003140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c4  080021c4  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080021c4  080021c4  000031c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021cc  080021cc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021cc  080021cc  000031cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d0  080021d0  000031d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080021d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08002230  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002230  000042cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000420d  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea5  00000000  00000000  00008299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  00009140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003d1  00000000  00000000  00009678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032da  00000000  00000000  00009a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005eed  00000000  00000000  0000cd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6d2  00000000  00000000  00012c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d7c  00000000  00000000  0006d328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  0006f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002128 	.word	0x08002128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002128 	.word	0x08002128

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e07c      	b.n	8000386 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800028c:	2201      	movs	r2, #1
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	fa02 f303 	lsl.w	r3, r2, r3
 8000294:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	4013      	ands	r3, r2
 800029e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d16b      	bne.n	8000380 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d003      	beq.n	80002b8 <GPIO_Init+0x48>
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d134      	bne.n	8000322 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	2103      	movs	r1, #3
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	401a      	ands	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	795b      	ldrb	r3, [r3, #5]
 80002d6:	4619      	mov	r1, r3
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	431a      	orrs	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	889b      	ldrh	r3, [r3, #4]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	2301      	movs	r3, #1
 80002f4:	408b      	lsls	r3, r1
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	43db      	mvns	r3, r3
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	4013      	ands	r3, r2
 80002fe:	b29a      	uxth	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	889b      	ldrh	r3, [r3, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	799b      	ldrb	r3, [r3, #6]
 800030e:	4619      	mov	r1, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	b29b      	uxth	r3, r3
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	4313      	orrs	r3, r2
 800031c:	b29a      	uxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	b29b      	uxth	r3, r3
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	2103      	movs	r1, #3
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	401a      	ands	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	4619      	mov	r1, r3
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3301      	adds	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	2b0f      	cmp	r3, #15
 800038a:	f67f af7f 	bls.w	800028c <GPIO_Init+0x1c>
    }
  }
}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2202      	movs	r2, #2
 80003b6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	71da      	strb	r2, [r3, #7]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	8a1b      	ldrh	r3, [r3, #16]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	4013      	ands	r3, r2
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f0:	2301      	movs	r3, #1
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	e001      	b.n	80003fa <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000408:	b480      	push	{r7}
 800040a:	b08b      	sub	sp, #44	@ 0x2c
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000430:	4b8b      	ldr	r3, [pc, #556]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f003 030c 	and.w	r3, r3, #12
 8000438:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800043a:	6a3b      	ldr	r3, [r7, #32]
 800043c:	2b08      	cmp	r3, #8
 800043e:	d011      	beq.n	8000464 <RCC_GetClocksFreq+0x5c>
 8000440:	6a3b      	ldr	r3, [r7, #32]
 8000442:	2b08      	cmp	r3, #8
 8000444:	d837      	bhi.n	80004b6 <RCC_GetClocksFreq+0xae>
 8000446:	6a3b      	ldr	r3, [r7, #32]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d003      	beq.n	8000454 <RCC_GetClocksFreq+0x4c>
 800044c:	6a3b      	ldr	r3, [r7, #32]
 800044e:	2b04      	cmp	r3, #4
 8000450:	d004      	beq.n	800045c <RCC_GetClocksFreq+0x54>
 8000452:	e030      	b.n	80004b6 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a83      	ldr	r2, [pc, #524]	@ (8000664 <RCC_GetClocksFreq+0x25c>)
 8000458:	601a      	str	r2, [r3, #0]
      break;
 800045a:	e030      	b.n	80004be <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a81      	ldr	r2, [pc, #516]	@ (8000664 <RCC_GetClocksFreq+0x25c>)
 8000460:	601a      	str	r2, [r3, #0]
      break;
 8000462:	e02c      	b.n	80004be <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000464:	4b7e      	ldr	r3, [pc, #504]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800046c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800046e:	4b7c      	ldr	r3, [pc, #496]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000476:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	0c9b      	lsrs	r3, r3, #18
 800047c:	3302      	adds	r3, #2
 800047e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d105      	bne.n	8000492 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	4a77      	ldr	r2, [pc, #476]	@ (8000668 <RCC_GetClocksFreq+0x260>)
 800048a:	fb02 f303 	mul.w	r3, r2, r3
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000490:	e00d      	b.n	80004ae <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000492:	4b73      	ldr	r3, [pc, #460]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000496:	f003 030f 	and.w	r3, r3, #15
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800049e:	4a71      	ldr	r2, [pc, #452]	@ (8000664 <RCC_GetClocksFreq+0x25c>)
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80004b2:	601a      	str	r2, [r3, #0]
      break;
 80004b4:	e003      	b.n	80004be <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a6a      	ldr	r2, [pc, #424]	@ (8000664 <RCC_GetClocksFreq+0x25c>)
 80004ba:	601a      	str	r2, [r3, #0]
      break;
 80004bc:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004be:	4b68      	ldr	r3, [pc, #416]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80004c6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80004c8:	6a3b      	ldr	r3, [r7, #32]
 80004ca:	091b      	lsrs	r3, r3, #4
 80004cc:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80004ce:	4a67      	ldr	r2, [pc, #412]	@ (800066c <RCC_GetClocksFreq+0x264>)
 80004d0:	6a3b      	ldr	r3, [r7, #32]
 80004d2:	4413      	add	r3, r2
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	40da      	lsrs	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80004e6:	4b5e      	ldr	r3, [pc, #376]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80004ee:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80004f0:	6a3b      	ldr	r3, [r7, #32]
 80004f2:	0a1b      	lsrs	r3, r3, #8
 80004f4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80004f6:	4a5d      	ldr	r2, [pc, #372]	@ (800066c <RCC_GetClocksFreq+0x264>)
 80004f8:	6a3b      	ldr	r3, [r7, #32]
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	40da      	lsrs	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800050e:	4b54      	ldr	r3, [pc, #336]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000516:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	0adb      	lsrs	r3, r3, #11
 800051c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800051e:	4a53      	ldr	r2, [pc, #332]	@ (800066c <RCC_GetClocksFreq+0x264>)
 8000520:	6a3b      	ldr	r3, [r7, #32]
 8000522:	4413      	add	r3, r2
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	40da      	lsrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000536:	4b4a      	ldr	r3, [pc, #296]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800053a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800053e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000540:	6a3b      	ldr	r3, [r7, #32]
 8000542:	091b      	lsrs	r3, r3, #4
 8000544:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000546:	4a4a      	ldr	r2, [pc, #296]	@ (8000670 <RCC_GetClocksFreq+0x268>)
 8000548:	6a3b      	ldr	r3, [r7, #32]
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	b29b      	uxth	r3, r3
 8000550:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	f003 0310 	and.w	r3, r3, #16
 8000558:	2b00      	cmp	r3, #0
 800055a:	d006      	beq.n	800056a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800055c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	fbb2 f2f3 	udiv	r2, r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	e003      	b.n	8000572 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000572:	4b3b      	ldr	r3, [pc, #236]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 8000574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000576:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800057a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	0a5b      	lsrs	r3, r3, #9
 8000580:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000582:	4a3b      	ldr	r2, [pc, #236]	@ (8000670 <RCC_GetClocksFreq+0x268>)
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	b29b      	uxth	r3, r3
 800058c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	f003 0310 	and.w	r3, r3, #16
 8000594:	2b00      	cmp	r3, #0
 8000596:	d006      	beq.n	80005a6 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	fbb2 f2f3 	udiv	r2, r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	e003      	b.n	80005ae <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	2b10      	cmp	r3, #16
 80005b8:	d003      	beq.n	80005c2 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <RCC_GetClocksFreq+0x25c>)
 80005be:	619a      	str	r2, [r3, #24]
 80005c0:	e003      	b.n	80005ca <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	2b20      	cmp	r3, #32
 80005d4:	d003      	beq.n	80005de <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <RCC_GetClocksFreq+0x25c>)
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	e003      	b.n	80005e6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005f2:	d10d      	bne.n	8000610 <RCC_GetClocksFreq+0x208>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d108      	bne.n	8000610 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	429a      	cmp	r2, r3
 8000604:	d104      	bne.n	8000610 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	005a      	lsls	r2, r3, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	621a      	str	r2, [r3, #32]
 800060e:	e003      	b.n	8000618 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000624:	d10d      	bne.n	8000642 <RCC_GetClocksFreq+0x23a>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800062c:	429a      	cmp	r2, r3
 800062e:	d108      	bne.n	8000642 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d104      	bne.n	8000642 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063a:	005a      	lsls	r2, r3, #1
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000640:	e003      	b.n	800064a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <RCC_GetClocksFreq+0x258>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10e      	bne.n	8000674 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28
 800065e:	e028      	b.n	80006b2 <RCC_GetClocksFreq+0x2aa>
 8000660:	40021000 	.word	0x40021000
 8000664:	007a1200 	.word	0x007a1200
 8000668:	003d0900 	.word	0x003d0900
 800066c:	08002164 	.word	0x08002164
 8000670:	08002174 	.word	0x08002174
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000674:	4b6c      	ldr	r3, [pc, #432]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000678:	f003 0303 	and.w	r3, r3, #3
 800067c:	2b01      	cmp	r3, #1
 800067e:	d104      	bne.n	800068a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	629a      	str	r2, [r3, #40]	@ 0x28
 8000688:	e013      	b.n	80006b2 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800068a:	4b67      	ldr	r3, [pc, #412]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	2b02      	cmp	r3, #2
 8000694:	d104      	bne.n	80006a0 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
 800069e:	e008      	b.n	80006b2 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80006a0:	4b61      	ldr	r3, [pc, #388]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a4:	f003 0303 	and.w	r3, r3, #3
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d102      	bne.n	80006b2 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a5f      	ldr	r2, [pc, #380]	@ (800082c <RCC_GetClocksFreq+0x424>)
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80006b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d104      	bne.n	80006c8 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006c6:	e021      	b.n	800070c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80006c8:	4b57      	ldr	r3, [pc, #348]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80006d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80006d4:	d104      	bne.n	80006e0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006de:	e015      	b.n	800070c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80006e0:	4b51      	ldr	r3, [pc, #324]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80006e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80006ec:	d104      	bne.n	80006f8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006f6:	e009      	b.n	800070c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80006f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000700:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8000704:	d102      	bne.n	800070c <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a48      	ldr	r2, [pc, #288]	@ (800082c <RCC_GetClocksFreq+0x424>)
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800070c:	4b46      	ldr	r3, [pc, #280]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d104      	bne.n	8000722 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689a      	ldr	r2, [r3, #8]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000720:	e021      	b.n	8000766 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000722:	4b41      	ldr	r3, [pc, #260]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800072a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800072e:	d104      	bne.n	800073a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
 8000738:	e015      	b.n	8000766 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800073a:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000742:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000746:	d104      	bne.n	8000752 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000750:	e009      	b.n	8000766 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800075a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800075e:	d102      	bne.n	8000766 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a32      	ldr	r2, [pc, #200]	@ (800082c <RCC_GetClocksFreq+0x424>)
 8000764:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000766:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d104      	bne.n	800077c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	635a      	str	r2, [r3, #52]	@ 0x34
 800077a:	e021      	b.n	80007c0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000788:	d104      	bne.n	8000794 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	635a      	str	r2, [r3, #52]	@ 0x34
 8000792:	e015      	b.n	80007c0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000794:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800079c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80007a0:	d104      	bne.n	80007ac <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007aa:	e009      	b.n	80007c0 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80007b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80007b8:	d102      	bne.n	80007c0 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <RCC_GetClocksFreq+0x424>)
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80007d4:	e021      	b.n	800081a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80007de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80007e2:	d104      	bne.n	80007ee <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80007ec:	e015      	b.n	800081a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80007f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80007fa:	d104      	bne.n	8000806 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000802:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000804:	e009      	b.n	800081a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <RCC_GetClocksFreq+0x420>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800080e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000812:	d102      	bne.n	800081a <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <RCC_GetClocksFreq+0x424>)
 8000818:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800081a:	bf00      	nop
 800081c:	372c      	adds	r7, #44	@ 0x2c
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	007a1200 	.word	0x007a1200

08000830 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <RCC_AHBPeriphClockCmd+0x3c>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4909      	ldr	r1, [pc, #36]	@ (800086c <RCC_AHBPeriphClockCmd+0x3c>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4313      	orrs	r3, r2
 800084c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800084e:	e006      	b.n	800085e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <RCC_AHBPeriphClockCmd+0x3c>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	43db      	mvns	r3, r3
 8000858:	4904      	ldr	r1, [pc, #16]	@ (800086c <RCC_AHBPeriphClockCmd+0x3c>)
 800085a:	4013      	ands	r3, r2
 800085c:	614b      	str	r3, [r1, #20]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000882:	b29a      	uxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	@ 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4613      	mov	r3, r2
 80008a0:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80008c6:	2201      	movs	r2, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d103      	bne.n	80008de <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	61fb      	str	r3, [r7, #28]
 80008dc:	e005      	b.n	80008ea <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d102      	bne.n	80008ea <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	3308      	adds	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	6819      	ldr	r1, [r3, #0]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80008fc:	e006      	b.n	800090c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	43da      	mvns	r2, r3
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3724      	adds	r7, #36	@ 0x24
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	4013      	ands	r3, r2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e001      	b.n	800093c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800094a:	b480      	push	{r7}
 800094c:	b087      	sub	sp, #28
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b29b      	uxth	r3, r3
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000974:	2201      	movs	r2, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	4013      	ands	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e00d      	b.n	80009ac <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d105      	bne.n	80009a2 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4013      	ands	r3, r2
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e004      	b.n	80009ac <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4013      	ands	r3, r2
 80009aa:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	0c1b      	lsrs	r3, r3, #16
 80009b0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009b2:	2201      	movs	r2, #1
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	4013      	ands	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d005      	beq.n	80009d8 <USART_GetITStatus+0x8e>
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80009d2:	2301      	movs	r3, #1
 80009d4:	74fb      	strb	r3, [r7, #19]
 80009d6:	e001      	b.n	80009dc <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	371c      	adds	r7, #28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000a02:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <NVIC_EnableIRQ+0x30>)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	095b      	lsrs	r3, r3, #5
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <uart_put_char+0x30>)
 8000a32:	f7ff ff1d 	bl	8000870 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a36:	bf00      	nop
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <uart_put_char+0x30>)
 8000a3c:	f7ff ff6c 	bl	8000918 <USART_GetFlagStatus>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f8      	beq.n	8000a38 <uart_put_char+0x18>
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004400 	.word	0x40004400

08000a54 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e012      	b.n	8000a8e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	d102      	bne.n	8000a7a <_write_r+0x26>
            uart_put_char('\r');
 8000a74:	200d      	movs	r0, #13
 8000a76:	f7ff ffd3 	bl	8000a20 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ffcc 	bl	8000a20 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dbe8      	blt.n	8000a68 <_write_r+0x14>
    }

    return len;
 8000a96:	683b      	ldr	r3, [r7, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000aa4:	4915      	ldr	r1, [pc, #84]	@ (8000afc <USART2_IRQHandler+0x5c>)
 8000aa6:	4816      	ldr	r0, [pc, #88]	@ (8000b00 <USART2_IRQHandler+0x60>)
 8000aa8:	f7ff ff4f 	bl	800094a <USART_GetITStatus>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d021      	beq.n	8000af6 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <USART2_IRQHandler+0x60>)
 8000ab4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <USART2_IRQHandler+0x64>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	b2d0      	uxtb	r0, r2
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <USART2_IRQHandler+0x64>)
 8000ac4:	7010      	strb	r0, [r2, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	b2c9      	uxtb	r1, r1
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <USART2_IRQHandler+0x68>)
 8000acc:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <USART2_IRQHandler+0x6c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2bff      	cmp	r3, #255	@ 0xff
 8000ad6:	d107      	bne.n	8000ae8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <USART2_IRQHandler+0x70>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <USART2_IRQHandler+0x70>)
 8000ae4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000ae6:	e006      	b.n	8000af6 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <USART2_IRQHandler+0x6c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <USART2_IRQHandler+0x6c>)
 8000af4:	701a      	strb	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	00050105 	.word	0x00050105
 8000b00:	40004400 	.word	0x40004400
 8000b04:	20000178 	.word	0x20000178
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	2000017a 	.word	0x2000017a
 8000b10:	20000179 	.word	0x20000179

08000b14 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	@ 0x50
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000b1c:	4b86      	ldr	r3, [pc, #536]	@ (8000d38 <uart_init+0x224>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fbeb 	bl	8001300 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000b2a:	4b83      	ldr	r3, [pc, #524]	@ (8000d38 <uart_init+0x224>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fbe4 	bl	8001300 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000b38:	4b80      	ldr	r3, [pc, #512]	@ (8000d3c <uart_init+0x228>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d3c <uart_init+0x228>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b42:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000b44:	4b7d      	ldr	r3, [pc, #500]	@ (8000d3c <uart_init+0x228>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a7c      	ldr	r2, [pc, #496]	@ (8000d3c <uart_init+0x228>)
 8000b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000b50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000b5e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000b60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000b6e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000b70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000b7e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000b80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b8a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000b8e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000b90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b9e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000baa:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000bae:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000bb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bb4:	889b      	ldrh	r3, [r3, #4]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bbc:	f023 030c 	bic.w	r3, r3, #12
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000bc4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bcc:	8892      	ldrh	r2, [r2, #4]
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000bd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000be0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000be2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bec:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000bf0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000bf2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c00:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000c02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c0c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000c10:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000c12:	4b4b      	ldr	r3, [pc, #300]	@ (8000d40 <uart_init+0x22c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a4a      	ldr	r2, [pc, #296]	@ (8000d40 <uart_init+0x22c>)
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000c1e:	4b48      	ldr	r3, [pc, #288]	@ (8000d40 <uart_init+0x22c>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a47      	ldr	r2, [pc, #284]	@ (8000d40 <uart_init+0x22c>)
 8000c24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c28:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000c2a:	4b45      	ldr	r3, [pc, #276]	@ (8000d40 <uart_init+0x22c>)
 8000c2c:	4a44      	ldr	r2, [pc, #272]	@ (8000d40 <uart_init+0x22c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000c32:	4b43      	ldr	r3, [pc, #268]	@ (8000d40 <uart_init+0x22c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a42      	ldr	r2, [pc, #264]	@ (8000d40 <uart_init+0x22c>)
 8000c38:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8000c3c:	f023 030c 	bic.w	r3, r3, #12
 8000c40:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000c42:	4b3f      	ldr	r3, [pc, #252]	@ (8000d40 <uart_init+0x22c>)
 8000c44:	4a3e      	ldr	r2, [pc, #248]	@ (8000d40 <uart_init+0x22c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d40 <uart_init+0x22c>)
 8000c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000d40 <uart_init+0x22c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000c52:	4b3b      	ldr	r3, [pc, #236]	@ (8000d40 <uart_init+0x22c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a3a      	ldr	r2, [pc, #232]	@ (8000d40 <uart_init+0x22c>)
 8000c58:	f043 030c 	orr.w	r3, r3, #12
 8000c5c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000c5e:	4b38      	ldr	r3, [pc, #224]	@ (8000d40 <uart_init+0x22c>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	4a37      	ldr	r2, [pc, #220]	@ (8000d40 <uart_init+0x22c>)
 8000c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c68:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000c6a:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <uart_init+0x22c>)
 8000c6c:	4a34      	ldr	r2, [pc, #208]	@ (8000d40 <uart_init+0x22c>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fbc0 	bl	8000408 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8a:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <uart_init+0x22c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d010      	beq.n	8000cba <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c9a:	005a      	lsls	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	fb01 f202 	mul.w	r2, r1, r2
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cb8:	e00d      	b.n	8000cd6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8000cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	fb01 f202 	mul.w	r2, r1, r2
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d302      	bcc.n	8000ce6 <uart_init+0x1d2>
        divider++;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <uart_init+0x22c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cfe:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000d02:	4013      	ands	r3, r2
 8000d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d06:	4313      	orrs	r3, r2
 8000d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <uart_init+0x22c>)
 8000d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <uart_init+0x22c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <uart_init+0x22c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4908      	ldr	r1, [pc, #32]	@ (8000d44 <uart_init+0x230>)
 8000d22:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <uart_init+0x22c>)
 8000d24:	f7ff fdb6 	bl	8000894 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000d28:	2026      	movs	r0, #38	@ 0x26
 8000d2a:	f7ff fe5f 	bl	80009ec <NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	@ 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40004400 	.word	0x40004400
 8000d44:	00050105 	.word	0x00050105

08000d48 <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000d54:	f7ff fd6c 	bl	8000830 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000d5e:	f7ff fd67 	bl	8000830 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8000d62:	2101      	movs	r1, #1
 8000d64:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000d68:	f7ff fd62 	bl	8000830 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fb14 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000d74:	2300      	movs	r3, #0
 8000d76:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d88:	f7ff fa72 	bl	8000270 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb04 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000d94:	2300      	movs	r3, #0
 8000d96:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8000d9c:	2321      	movs	r3, #33	@ 0x21
 8000d9e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <initJoystick+0x88>)
 8000da6:	f7ff fa63 	bl	8000270 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8000daa:	463b      	mov	r3, r7
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff faf5 	bl	800039c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000db2:	2300      	movs	r3, #0
 8000db4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000db6:	2302      	movs	r3, #2
 8000db8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <initJoystick+0x8c>)
 8000dc4:	f7ff fa54 	bl	8000270 <GPIO_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <readJoystick>:


int8_t readJoystick(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8000de2:	2110      	movs	r1, #16
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de8:	f7ff faf2 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000dec:	4603      	mov	r3, r0
 8000dee:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8000df0:	2120      	movs	r1, #32
 8000df2:	4821      	ldr	r0, [pc, #132]	@ (8000e78 <readJoystick+0xa0>)
 8000df4:	f7ff faec 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	481e      	ldr	r0, [pc, #120]	@ (8000e78 <readJoystick+0xa0>)
 8000e00:	f7ff fae6 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000e04:	4603      	mov	r3, r0
 8000e06:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 8000e08:	2102      	movs	r1, #2
 8000e0a:	481c      	ldr	r0, [pc, #112]	@ (8000e7c <readJoystick+0xa4>)
 8000e0c:	f7ff fae0 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000e10:	4603      	mov	r3, r0
 8000e12:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 8000e14:	2101      	movs	r1, #1
 8000e16:	4819      	ldr	r0, [pc, #100]	@ (8000e7c <readJoystick+0xa4>)
 8000e18:	f7ff fada 	bl	80003d0 <GPIO_ReadInputDataBit>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 8000e20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d102      	bne.n	8000e2e <readJoystick+0x56>
		bit = Up;
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e01e      	b.n	8000e6c <readJoystick+0x94>
	} else if (Down == 1){
 8000e2e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d103      	bne.n	8000e3e <readJoystick+0x66>
		bit = Down << 1;
 8000e36:	793b      	ldrb	r3, [r7, #4]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	e016      	b.n	8000e6c <readJoystick+0x94>
	} else if (Left == 1){
 8000e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d103      	bne.n	8000e4e <readJoystick+0x76>
		bit = Left << 2;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e00e      	b.n	8000e6c <readJoystick+0x94>
	} else if (Right == 1){
 8000e4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d103      	bne.n	8000e5e <readJoystick+0x86>
		bit = Right << 3;
 8000e56:	78bb      	ldrb	r3, [r7, #2]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	e006      	b.n	8000e6c <readJoystick+0x94>
	} else if (Center == 1){
 8000e5e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d102      	bne.n	8000e6c <readJoystick+0x94>
		bit = Center << 4;
 8000e66:	797b      	ldrb	r3, [r7, #5]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48000800 	.word	0x48000800

08000e80 <handleJoystick>:

void handleJoystick(int8_t currentState){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]

	int8_t newState = readJoystick();
 8000e8a:	f7ff ffa5 	bl	8000dd8 <readJoystick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
	if ((newState != 0) && (currentState != newState)){
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d02f      	beq.n	8000efa <handleJoystick+0x7a>
 8000e9a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d029      	beq.n	8000efa <handleJoystick+0x7a>
		if (newState == 0x1){
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d103      	bne.n	8000eb6 <handleJoystick+0x36>
			printf("Up");
 8000eae:	4818      	ldr	r0, [pc, #96]	@ (8000f10 <handleJoystick+0x90>)
 8000eb0:	f000 fa14 	bl	80012dc <iprintf>
 8000eb4:	e01e      	b.n	8000ef4 <handleJoystick+0x74>
		} else if (newState == 0x2){
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d103      	bne.n	8000ec6 <handleJoystick+0x46>
			printf("Down");
 8000ebe:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <handleJoystick+0x94>)
 8000ec0:	f000 fa0c 	bl	80012dc <iprintf>
 8000ec4:	e016      	b.n	8000ef4 <handleJoystick+0x74>
		} else if (newState == 0x4){
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d103      	bne.n	8000ed6 <handleJoystick+0x56>
			printf("Left");
 8000ece:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <handleJoystick+0x98>)
 8000ed0:	f000 fa04 	bl	80012dc <iprintf>
 8000ed4:	e00e      	b.n	8000ef4 <handleJoystick+0x74>
		} else if (newState == 0x8){
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d103      	bne.n	8000ee6 <handleJoystick+0x66>
			printf("Right");
 8000ede:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <handleJoystick+0x9c>)
 8000ee0:	f000 f9fc 	bl	80012dc <iprintf>
 8000ee4:	e006      	b.n	8000ef4 <handleJoystick+0x74>
		} else if (newState == 0x10){
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d102      	bne.n	8000ef4 <handleJoystick+0x74>
			printf("Center");
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <handleJoystick+0xa0>)
 8000ef0:	f000 f9f4 	bl	80012dc <iprintf>
		}

		currentState = newState;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	71fb      	strb	r3, [r7, #7]

	} else if (newState == 0){
		currentState = 0;
	}
}
 8000ef8:	e005      	b.n	8000f06 <handleJoystick+0x86>
	} else if (newState == 0){
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <handleJoystick+0x86>
		currentState = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08002140 	.word	0x08002140
 8000f14:	08002144 	.word	0x08002144
 8000f18:	0800214c 	.word	0x0800214c
 8000f1c:	08002154 	.word	0x08002154
 8000f20:	0800215c 	.word	0x0800215c

08000f24 <main>:
#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course
#include "joystick.h"

int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8000f28:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000f2c:	f7ff fdf2 	bl	8000b14 <uart_init>
	initJoystick();
 8000f30:	f7ff ff0a 	bl	8000d48 <initJoystick>

	while(1){
		handleJoystick();
 8000f34:	f7ff ffa4 	bl	8000e80 <handleJoystick>
 8000f38:	e7fc      	b.n	8000f34 <main+0x10>

08000f3a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e00a      	b.n	8000f62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4c:	f3af 8000 	nop.w
 8000f50:	4601      	mov	r1, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	60ba      	str	r2, [r7, #8]
 8000f58:	b2ca      	uxtb	r2, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dbf0      	blt.n	8000f4c <_read+0x12>
	}

return len;
 8000f6a:	687b      	ldr	r3, [r7, #4]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_isatty>:

int _isatty(int file)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	return 1;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
	return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <SystemInit+0x84>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <SystemInit+0x84>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <SystemInit+0x88>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8001064 <SystemInit+0x88>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <SystemInit+0x88>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4918      	ldr	r1, [pc, #96]	@ (8001064 <SystemInit+0x88>)
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <SystemInit+0x8c>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <SystemInit+0x88>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <SystemInit+0x88>)
 800100e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <SystemInit+0x88>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a11      	ldr	r2, [pc, #68]	@ (8001064 <SystemInit+0x88>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <SystemInit+0x88>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <SystemInit+0x88>)
 800102a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800102e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <SystemInit+0x88>)
 8001032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001034:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <SystemInit+0x88>)
 8001036:	f023 030f 	bic.w	r3, r3, #15
 800103a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <SystemInit+0x88>)
 800103e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001040:	4908      	ldr	r1, [pc, #32]	@ (8001064 <SystemInit+0x88>)
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <SystemInit+0x90>)
 8001044:	4013      	ands	r3, r2
 8001046:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x88>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800104e:	f000 f80f 	bl	8001070 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001052:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <SystemInit+0x84>)
 8001054:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001058:	609a      	str	r2, [r3, #8]
#endif  
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	40021000 	.word	0x40021000
 8001068:	f87fc00c 	.word	0xf87fc00c
 800106c:	ff00fccc 	.word	0xff00fccc

08001070 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <SetSysClock+0x8c>)
 8001076:	2212      	movs	r2, #18
 8001078:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <SetSysClock+0x90>)
 800107c:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <SetSysClock+0x90>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <SetSysClock+0x90>)
 8001084:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <SetSysClock+0x90>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <SetSysClock+0x90>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <SetSysClock+0x90>)
 8001090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001094:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <SetSysClock+0x90>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <SetSysClock+0x90>)
 800109c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80010a0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <SetSysClock+0x90>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a16      	ldr	r2, [pc, #88]	@ (8001100 <SetSysClock+0x90>)
 80010a8:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 80010ac:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <SetSysClock+0x90>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <SetSysClock+0x90>)
 80010b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010b8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80010ba:	bf00      	nop
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <SetSysClock+0x90>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f9      	beq.n	80010bc <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <SetSysClock+0x90>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <SetSysClock+0x90>)
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <SetSysClock+0x90>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <SetSysClock+0x90>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80010e0:	bf00      	nop
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <SetSysClock+0x90>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d1f9      	bne.n	80010e2 <SetSysClock+0x72>
  {
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40022000 	.word	0x40022000
 8001100:	40021000 	.word	0x40021000

08001104 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001106:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	@ (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	@ (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	@ (8001148 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	@ (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800112e:	f7ff ff55 	bl	8000fdc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001132:	f000 fa21 	bl	8001578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001136:	f7ff fef5 	bl	8000f24 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   r0, =_estack
 800113c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001148:	080021d4 	.word	0x080021d4
  ldr r2, =_sbss
 800114c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001150:	200002cc 	.word	0x200002cc

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <std>:
 8001158:	2300      	movs	r3, #0
 800115a:	b510      	push	{r4, lr}
 800115c:	4604      	mov	r4, r0
 800115e:	e9c0 3300 	strd	r3, r3, [r0]
 8001162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001166:	6083      	str	r3, [r0, #8]
 8001168:	8181      	strh	r1, [r0, #12]
 800116a:	6643      	str	r3, [r0, #100]	@ 0x64
 800116c:	81c2      	strh	r2, [r0, #14]
 800116e:	6183      	str	r3, [r0, #24]
 8001170:	4619      	mov	r1, r3
 8001172:	2208      	movs	r2, #8
 8001174:	305c      	adds	r0, #92	@ 0x5c
 8001176:	f000 f9c2 	bl	80014fe <memset>
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <std+0x58>)
 800117c:	6263      	str	r3, [r4, #36]	@ 0x24
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <std+0x5c>)
 8001180:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <std+0x60>)
 8001184:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <std+0x64>)
 8001188:	6323      	str	r3, [r4, #48]	@ 0x30
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <std+0x68>)
 800118c:	6224      	str	r4, [r4, #32]
 800118e:	429c      	cmp	r4, r3
 8001190:	d006      	beq.n	80011a0 <std+0x48>
 8001192:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001196:	4294      	cmp	r4, r2
 8001198:	d002      	beq.n	80011a0 <std+0x48>
 800119a:	33d0      	adds	r3, #208	@ 0xd0
 800119c:	429c      	cmp	r4, r3
 800119e:	d105      	bne.n	80011ac <std+0x54>
 80011a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80011a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a8:	f000 ba0a 	b.w	80015c0 <__retarget_lock_init_recursive>
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	bf00      	nop
 80011b0:	08001479 	.word	0x08001479
 80011b4:	0800149b 	.word	0x0800149b
 80011b8:	080014d3 	.word	0x080014d3
 80011bc:	080014f7 	.word	0x080014f7
 80011c0:	2000017c 	.word	0x2000017c

080011c4 <stdio_exit_handler>:
 80011c4:	4a02      	ldr	r2, [pc, #8]	@ (80011d0 <stdio_exit_handler+0xc>)
 80011c6:	4903      	ldr	r1, [pc, #12]	@ (80011d4 <stdio_exit_handler+0x10>)
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <stdio_exit_handler+0x14>)
 80011ca:	f000 b869 	b.w	80012a0 <_fwalk_sglue>
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000
 80011d4:	08001e6d 	.word	0x08001e6d
 80011d8:	20000010 	.word	0x20000010

080011dc <cleanup_stdio>:
 80011dc:	6841      	ldr	r1, [r0, #4]
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <cleanup_stdio+0x34>)
 80011e0:	4299      	cmp	r1, r3
 80011e2:	b510      	push	{r4, lr}
 80011e4:	4604      	mov	r4, r0
 80011e6:	d001      	beq.n	80011ec <cleanup_stdio+0x10>
 80011e8:	f000 fe40 	bl	8001e6c <_fflush_r>
 80011ec:	68a1      	ldr	r1, [r4, #8]
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <cleanup_stdio+0x38>)
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d002      	beq.n	80011fa <cleanup_stdio+0x1e>
 80011f4:	4620      	mov	r0, r4
 80011f6:	f000 fe39 	bl	8001e6c <_fflush_r>
 80011fa:	68e1      	ldr	r1, [r4, #12]
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <cleanup_stdio+0x3c>)
 80011fe:	4299      	cmp	r1, r3
 8001200:	d004      	beq.n	800120c <cleanup_stdio+0x30>
 8001202:	4620      	mov	r0, r4
 8001204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001208:	f000 be30 	b.w	8001e6c <_fflush_r>
 800120c:	bd10      	pop	{r4, pc}
 800120e:	bf00      	nop
 8001210:	2000017c 	.word	0x2000017c
 8001214:	200001e4 	.word	0x200001e4
 8001218:	2000024c 	.word	0x2000024c

0800121c <global_stdio_init.part.0>:
 800121c:	b510      	push	{r4, lr}
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <global_stdio_init.part.0+0x30>)
 8001220:	4c0b      	ldr	r4, [pc, #44]	@ (8001250 <global_stdio_init.part.0+0x34>)
 8001222:	4a0c      	ldr	r2, [pc, #48]	@ (8001254 <global_stdio_init.part.0+0x38>)
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	4620      	mov	r0, r4
 8001228:	2200      	movs	r2, #0
 800122a:	2104      	movs	r1, #4
 800122c:	f7ff ff94 	bl	8001158 <std>
 8001230:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001234:	2201      	movs	r2, #1
 8001236:	2109      	movs	r1, #9
 8001238:	f7ff ff8e 	bl	8001158 <std>
 800123c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001240:	2202      	movs	r2, #2
 8001242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001246:	2112      	movs	r1, #18
 8001248:	f7ff bf86 	b.w	8001158 <std>
 800124c:	200002b4 	.word	0x200002b4
 8001250:	2000017c 	.word	0x2000017c
 8001254:	080011c5 	.word	0x080011c5

08001258 <__sfp_lock_acquire>:
 8001258:	4801      	ldr	r0, [pc, #4]	@ (8001260 <__sfp_lock_acquire+0x8>)
 800125a:	f000 b9b2 	b.w	80015c2 <__retarget_lock_acquire_recursive>
 800125e:	bf00      	nop
 8001260:	200002bd 	.word	0x200002bd

08001264 <__sfp_lock_release>:
 8001264:	4801      	ldr	r0, [pc, #4]	@ (800126c <__sfp_lock_release+0x8>)
 8001266:	f000 b9ad 	b.w	80015c4 <__retarget_lock_release_recursive>
 800126a:	bf00      	nop
 800126c:	200002bd 	.word	0x200002bd

08001270 <__sinit>:
 8001270:	b510      	push	{r4, lr}
 8001272:	4604      	mov	r4, r0
 8001274:	f7ff fff0 	bl	8001258 <__sfp_lock_acquire>
 8001278:	6a23      	ldr	r3, [r4, #32]
 800127a:	b11b      	cbz	r3, 8001284 <__sinit+0x14>
 800127c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001280:	f7ff bff0 	b.w	8001264 <__sfp_lock_release>
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__sinit+0x28>)
 8001286:	6223      	str	r3, [r4, #32]
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__sinit+0x2c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f5      	bne.n	800127c <__sinit+0xc>
 8001290:	f7ff ffc4 	bl	800121c <global_stdio_init.part.0>
 8001294:	e7f2      	b.n	800127c <__sinit+0xc>
 8001296:	bf00      	nop
 8001298:	080011dd 	.word	0x080011dd
 800129c:	200002b4 	.word	0x200002b4

080012a0 <_fwalk_sglue>:
 80012a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012a4:	4607      	mov	r7, r0
 80012a6:	4688      	mov	r8, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	2600      	movs	r6, #0
 80012ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012b0:	f1b9 0901 	subs.w	r9, r9, #1
 80012b4:	d505      	bpl.n	80012c2 <_fwalk_sglue+0x22>
 80012b6:	6824      	ldr	r4, [r4, #0]
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d1f7      	bne.n	80012ac <_fwalk_sglue+0xc>
 80012bc:	4630      	mov	r0, r6
 80012be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012c2:	89ab      	ldrh	r3, [r5, #12]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d907      	bls.n	80012d8 <_fwalk_sglue+0x38>
 80012c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012cc:	3301      	adds	r3, #1
 80012ce:	d003      	beq.n	80012d8 <_fwalk_sglue+0x38>
 80012d0:	4629      	mov	r1, r5
 80012d2:	4638      	mov	r0, r7
 80012d4:	47c0      	blx	r8
 80012d6:	4306      	orrs	r6, r0
 80012d8:	3568      	adds	r5, #104	@ 0x68
 80012da:	e7e9      	b.n	80012b0 <_fwalk_sglue+0x10>

080012dc <iprintf>:
 80012dc:	b40f      	push	{r0, r1, r2, r3}
 80012de:	b507      	push	{r0, r1, r2, lr}
 80012e0:	4906      	ldr	r1, [pc, #24]	@ (80012fc <iprintf+0x20>)
 80012e2:	ab04      	add	r3, sp, #16
 80012e4:	6808      	ldr	r0, [r1, #0]
 80012e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80012ea:	6881      	ldr	r1, [r0, #8]
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f000 fa95 	bl	800181c <_vfiprintf_r>
 80012f2:	b003      	add	sp, #12
 80012f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80012f8:	b004      	add	sp, #16
 80012fa:	4770      	bx	lr
 80012fc:	2000000c 	.word	0x2000000c

08001300 <setbuf>:
 8001300:	fab1 f281 	clz	r2, r1
 8001304:	0952      	lsrs	r2, r2, #5
 8001306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130a:	0052      	lsls	r2, r2, #1
 800130c:	f000 b800 	b.w	8001310 <setvbuf>

08001310 <setvbuf>:
 8001310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001314:	461d      	mov	r5, r3
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <setvbuf+0x164>)
 8001318:	681f      	ldr	r7, [r3, #0]
 800131a:	4604      	mov	r4, r0
 800131c:	460e      	mov	r6, r1
 800131e:	4690      	mov	r8, r2
 8001320:	b127      	cbz	r7, 800132c <setvbuf+0x1c>
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	b913      	cbnz	r3, 800132c <setvbuf+0x1c>
 8001326:	4638      	mov	r0, r7
 8001328:	f7ff ffa2 	bl	8001270 <__sinit>
 800132c:	f1b8 0f02 	cmp.w	r8, #2
 8001330:	d006      	beq.n	8001340 <setvbuf+0x30>
 8001332:	f1b8 0f01 	cmp.w	r8, #1
 8001336:	f200 809a 	bhi.w	800146e <setvbuf+0x15e>
 800133a:	2d00      	cmp	r5, #0
 800133c:	f2c0 8097 	blt.w	800146e <setvbuf+0x15e>
 8001340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001342:	07d9      	lsls	r1, r3, #31
 8001344:	d405      	bmi.n	8001352 <setvbuf+0x42>
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	059a      	lsls	r2, r3, #22
 800134a:	d402      	bmi.n	8001352 <setvbuf+0x42>
 800134c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800134e:	f000 f938 	bl	80015c2 <__retarget_lock_acquire_recursive>
 8001352:	4621      	mov	r1, r4
 8001354:	4638      	mov	r0, r7
 8001356:	f000 fd89 	bl	8001e6c <_fflush_r>
 800135a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800135c:	b141      	cbz	r1, 8001370 <setvbuf+0x60>
 800135e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001362:	4299      	cmp	r1, r3
 8001364:	d002      	beq.n	800136c <setvbuf+0x5c>
 8001366:	4638      	mov	r0, r7
 8001368:	f000 f92e 	bl	80015c8 <_free_r>
 800136c:	2300      	movs	r3, #0
 800136e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001370:	2300      	movs	r3, #0
 8001372:	61a3      	str	r3, [r4, #24]
 8001374:	6063      	str	r3, [r4, #4]
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	061b      	lsls	r3, r3, #24
 800137a:	d503      	bpl.n	8001384 <setvbuf+0x74>
 800137c:	6921      	ldr	r1, [r4, #16]
 800137e:	4638      	mov	r0, r7
 8001380:	f000 f922 	bl	80015c8 <_free_r>
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800138a:	f023 0303 	bic.w	r3, r3, #3
 800138e:	f1b8 0f02 	cmp.w	r8, #2
 8001392:	81a3      	strh	r3, [r4, #12]
 8001394:	d061      	beq.n	800145a <setvbuf+0x14a>
 8001396:	ab01      	add	r3, sp, #4
 8001398:	466a      	mov	r2, sp
 800139a:	4621      	mov	r1, r4
 800139c:	4638      	mov	r0, r7
 800139e:	f000 fd8d 	bl	8001ebc <__swhatbuf_r>
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	4318      	orrs	r0, r3
 80013a6:	81a0      	strh	r0, [r4, #12]
 80013a8:	bb2d      	cbnz	r5, 80013f6 <setvbuf+0xe6>
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	4628      	mov	r0, r5
 80013ae:	f000 f955 	bl	800165c <malloc>
 80013b2:	4606      	mov	r6, r0
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d152      	bne.n	800145e <setvbuf+0x14e>
 80013b8:	f8dd 9000 	ldr.w	r9, [sp]
 80013bc:	45a9      	cmp	r9, r5
 80013be:	d140      	bne.n	8001442 <setvbuf+0x132>
 80013c0:	f04f 35ff 	mov.w	r5, #4294967295
 80013c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c8:	f043 0202 	orr.w	r2, r3, #2
 80013cc:	81a2      	strh	r2, [r4, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	60a2      	str	r2, [r4, #8]
 80013d2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80013d6:	6022      	str	r2, [r4, #0]
 80013d8:	6122      	str	r2, [r4, #16]
 80013da:	2201      	movs	r2, #1
 80013dc:	6162      	str	r2, [r4, #20]
 80013de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013e0:	07d6      	lsls	r6, r2, #31
 80013e2:	d404      	bmi.n	80013ee <setvbuf+0xde>
 80013e4:	0598      	lsls	r0, r3, #22
 80013e6:	d402      	bmi.n	80013ee <setvbuf+0xde>
 80013e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013ea:	f000 f8eb 	bl	80015c4 <__retarget_lock_release_recursive>
 80013ee:	4628      	mov	r0, r5
 80013f0:	b003      	add	sp, #12
 80013f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	d0d8      	beq.n	80013ac <setvbuf+0x9c>
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	b913      	cbnz	r3, 8001404 <setvbuf+0xf4>
 80013fe:	4638      	mov	r0, r7
 8001400:	f7ff ff36 	bl	8001270 <__sinit>
 8001404:	f1b8 0f01 	cmp.w	r8, #1
 8001408:	bf08      	it	eq
 800140a:	89a3      	ldrheq	r3, [r4, #12]
 800140c:	6026      	str	r6, [r4, #0]
 800140e:	bf04      	itt	eq
 8001410:	f043 0301 	orreq.w	r3, r3, #1
 8001414:	81a3      	strheq	r3, [r4, #12]
 8001416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141a:	f013 0208 	ands.w	r2, r3, #8
 800141e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001422:	d01e      	beq.n	8001462 <setvbuf+0x152>
 8001424:	07d9      	lsls	r1, r3, #31
 8001426:	bf41      	itttt	mi
 8001428:	2200      	movmi	r2, #0
 800142a:	426d      	negmi	r5, r5
 800142c:	60a2      	strmi	r2, [r4, #8]
 800142e:	61a5      	strmi	r5, [r4, #24]
 8001430:	bf58      	it	pl
 8001432:	60a5      	strpl	r5, [r4, #8]
 8001434:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001436:	07d2      	lsls	r2, r2, #31
 8001438:	d401      	bmi.n	800143e <setvbuf+0x12e>
 800143a:	059b      	lsls	r3, r3, #22
 800143c:	d513      	bpl.n	8001466 <setvbuf+0x156>
 800143e:	2500      	movs	r5, #0
 8001440:	e7d5      	b.n	80013ee <setvbuf+0xde>
 8001442:	4648      	mov	r0, r9
 8001444:	f000 f90a 	bl	800165c <malloc>
 8001448:	4606      	mov	r6, r0
 800144a:	2800      	cmp	r0, #0
 800144c:	d0b8      	beq.n	80013c0 <setvbuf+0xb0>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001454:	81a3      	strh	r3, [r4, #12]
 8001456:	464d      	mov	r5, r9
 8001458:	e7cf      	b.n	80013fa <setvbuf+0xea>
 800145a:	2500      	movs	r5, #0
 800145c:	e7b2      	b.n	80013c4 <setvbuf+0xb4>
 800145e:	46a9      	mov	r9, r5
 8001460:	e7f5      	b.n	800144e <setvbuf+0x13e>
 8001462:	60a2      	str	r2, [r4, #8]
 8001464:	e7e6      	b.n	8001434 <setvbuf+0x124>
 8001466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001468:	f000 f8ac 	bl	80015c4 <__retarget_lock_release_recursive>
 800146c:	e7e7      	b.n	800143e <setvbuf+0x12e>
 800146e:	f04f 35ff 	mov.w	r5, #4294967295
 8001472:	e7bc      	b.n	80013ee <setvbuf+0xde>
 8001474:	2000000c 	.word	0x2000000c

08001478 <__sread>:
 8001478:	b510      	push	{r4, lr}
 800147a:	460c      	mov	r4, r1
 800147c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001480:	f000 f868 	bl	8001554 <_read_r>
 8001484:	2800      	cmp	r0, #0
 8001486:	bfab      	itete	ge
 8001488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800148a:	89a3      	ldrhlt	r3, [r4, #12]
 800148c:	181b      	addge	r3, r3, r0
 800148e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001492:	bfac      	ite	ge
 8001494:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001496:	81a3      	strhlt	r3, [r4, #12]
 8001498:	bd10      	pop	{r4, pc}

0800149a <__swrite>:
 800149a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800149e:	461f      	mov	r7, r3
 80014a0:	898b      	ldrh	r3, [r1, #12]
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	4605      	mov	r5, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4616      	mov	r6, r2
 80014aa:	d505      	bpl.n	80014b8 <__swrite+0x1e>
 80014ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014b0:	2302      	movs	r3, #2
 80014b2:	2200      	movs	r2, #0
 80014b4:	f000 f83c 	bl	8001530 <_lseek_r>
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014c2:	81a3      	strh	r3, [r4, #12]
 80014c4:	4632      	mov	r2, r6
 80014c6:	463b      	mov	r3, r7
 80014c8:	4628      	mov	r0, r5
 80014ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014ce:	f7ff bac1 	b.w	8000a54 <_write_r>

080014d2 <__sseek>:
 80014d2:	b510      	push	{r4, lr}
 80014d4:	460c      	mov	r4, r1
 80014d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014da:	f000 f829 	bl	8001530 <_lseek_r>
 80014de:	1c43      	adds	r3, r0, #1
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	bf15      	itete	ne
 80014e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80014e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80014ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80014ee:	81a3      	strheq	r3, [r4, #12]
 80014f0:	bf18      	it	ne
 80014f2:	81a3      	strhne	r3, [r4, #12]
 80014f4:	bd10      	pop	{r4, pc}

080014f6 <__sclose>:
 80014f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014fa:	f000 b809 	b.w	8001510 <_close_r>

080014fe <memset>:
 80014fe:	4402      	add	r2, r0
 8001500:	4603      	mov	r3, r0
 8001502:	4293      	cmp	r3, r2
 8001504:	d100      	bne.n	8001508 <memset+0xa>
 8001506:	4770      	bx	lr
 8001508:	f803 1b01 	strb.w	r1, [r3], #1
 800150c:	e7f9      	b.n	8001502 <memset+0x4>
	...

08001510 <_close_r>:
 8001510:	b538      	push	{r3, r4, r5, lr}
 8001512:	4d06      	ldr	r5, [pc, #24]	@ (800152c <_close_r+0x1c>)
 8001514:	2300      	movs	r3, #0
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	602b      	str	r3, [r5, #0]
 800151c:	f7ff fd2a 	bl	8000f74 <_close>
 8001520:	1c43      	adds	r3, r0, #1
 8001522:	d102      	bne.n	800152a <_close_r+0x1a>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	b103      	cbz	r3, 800152a <_close_r+0x1a>
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	200002b8 	.word	0x200002b8

08001530 <_lseek_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d07      	ldr	r5, [pc, #28]	@ (8001550 <_lseek_r+0x20>)
 8001534:	4604      	mov	r4, r0
 8001536:	4608      	mov	r0, r1
 8001538:	4611      	mov	r1, r2
 800153a:	2200      	movs	r2, #0
 800153c:	602a      	str	r2, [r5, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	f7ff fd3f 	bl	8000fc2 <_lseek>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d102      	bne.n	800154e <_lseek_r+0x1e>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	b103      	cbz	r3, 800154e <_lseek_r+0x1e>
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	200002b8 	.word	0x200002b8

08001554 <_read_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4d07      	ldr	r5, [pc, #28]	@ (8001574 <_read_r+0x20>)
 8001558:	4604      	mov	r4, r0
 800155a:	4608      	mov	r0, r1
 800155c:	4611      	mov	r1, r2
 800155e:	2200      	movs	r2, #0
 8001560:	602a      	str	r2, [r5, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	f7ff fce9 	bl	8000f3a <_read>
 8001568:	1c43      	adds	r3, r0, #1
 800156a:	d102      	bne.n	8001572 <_read_r+0x1e>
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	b103      	cbz	r3, 8001572 <_read_r+0x1e>
 8001570:	6023      	str	r3, [r4, #0]
 8001572:	bd38      	pop	{r3, r4, r5, pc}
 8001574:	200002b8 	.word	0x200002b8

08001578 <__libc_init_array>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4d0d      	ldr	r5, [pc, #52]	@ (80015b0 <__libc_init_array+0x38>)
 800157c:	4c0d      	ldr	r4, [pc, #52]	@ (80015b4 <__libc_init_array+0x3c>)
 800157e:	1b64      	subs	r4, r4, r5
 8001580:	10a4      	asrs	r4, r4, #2
 8001582:	2600      	movs	r6, #0
 8001584:	42a6      	cmp	r6, r4
 8001586:	d109      	bne.n	800159c <__libc_init_array+0x24>
 8001588:	4d0b      	ldr	r5, [pc, #44]	@ (80015b8 <__libc_init_array+0x40>)
 800158a:	4c0c      	ldr	r4, [pc, #48]	@ (80015bc <__libc_init_array+0x44>)
 800158c:	f000 fdcc 	bl	8002128 <_init>
 8001590:	1b64      	subs	r4, r4, r5
 8001592:	10a4      	asrs	r4, r4, #2
 8001594:	2600      	movs	r6, #0
 8001596:	42a6      	cmp	r6, r4
 8001598:	d105      	bne.n	80015a6 <__libc_init_array+0x2e>
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a0:	4798      	blx	r3
 80015a2:	3601      	adds	r6, #1
 80015a4:	e7ee      	b.n	8001584 <__libc_init_array+0xc>
 80015a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015aa:	4798      	blx	r3
 80015ac:	3601      	adds	r6, #1
 80015ae:	e7f2      	b.n	8001596 <__libc_init_array+0x1e>
 80015b0:	080021cc 	.word	0x080021cc
 80015b4:	080021cc 	.word	0x080021cc
 80015b8:	080021cc 	.word	0x080021cc
 80015bc:	080021d0 	.word	0x080021d0

080015c0 <__retarget_lock_init_recursive>:
 80015c0:	4770      	bx	lr

080015c2 <__retarget_lock_acquire_recursive>:
 80015c2:	4770      	bx	lr

080015c4 <__retarget_lock_release_recursive>:
 80015c4:	4770      	bx	lr
	...

080015c8 <_free_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4605      	mov	r5, r0
 80015cc:	2900      	cmp	r1, #0
 80015ce:	d041      	beq.n	8001654 <_free_r+0x8c>
 80015d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015d4:	1f0c      	subs	r4, r1, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bfb8      	it	lt
 80015da:	18e4      	addlt	r4, r4, r3
 80015dc:	f000 f8e8 	bl	80017b0 <__malloc_lock>
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <_free_r+0x90>)
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	b933      	cbnz	r3, 80015f4 <_free_r+0x2c>
 80015e6:	6063      	str	r3, [r4, #4]
 80015e8:	6014      	str	r4, [r2, #0]
 80015ea:	4628      	mov	r0, r5
 80015ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015f0:	f000 b8e4 	b.w	80017bc <__malloc_unlock>
 80015f4:	42a3      	cmp	r3, r4
 80015f6:	d908      	bls.n	800160a <_free_r+0x42>
 80015f8:	6820      	ldr	r0, [r4, #0]
 80015fa:	1821      	adds	r1, r4, r0
 80015fc:	428b      	cmp	r3, r1
 80015fe:	bf01      	itttt	eq
 8001600:	6819      	ldreq	r1, [r3, #0]
 8001602:	685b      	ldreq	r3, [r3, #4]
 8001604:	1809      	addeq	r1, r1, r0
 8001606:	6021      	streq	r1, [r4, #0]
 8001608:	e7ed      	b.n	80015e6 <_free_r+0x1e>
 800160a:	461a      	mov	r2, r3
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	b10b      	cbz	r3, 8001614 <_free_r+0x4c>
 8001610:	42a3      	cmp	r3, r4
 8001612:	d9fa      	bls.n	800160a <_free_r+0x42>
 8001614:	6811      	ldr	r1, [r2, #0]
 8001616:	1850      	adds	r0, r2, r1
 8001618:	42a0      	cmp	r0, r4
 800161a:	d10b      	bne.n	8001634 <_free_r+0x6c>
 800161c:	6820      	ldr	r0, [r4, #0]
 800161e:	4401      	add	r1, r0
 8001620:	1850      	adds	r0, r2, r1
 8001622:	4283      	cmp	r3, r0
 8001624:	6011      	str	r1, [r2, #0]
 8001626:	d1e0      	bne.n	80015ea <_free_r+0x22>
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	6053      	str	r3, [r2, #4]
 800162e:	4408      	add	r0, r1
 8001630:	6010      	str	r0, [r2, #0]
 8001632:	e7da      	b.n	80015ea <_free_r+0x22>
 8001634:	d902      	bls.n	800163c <_free_r+0x74>
 8001636:	230c      	movs	r3, #12
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	e7d6      	b.n	80015ea <_free_r+0x22>
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	1821      	adds	r1, r4, r0
 8001640:	428b      	cmp	r3, r1
 8001642:	bf04      	itt	eq
 8001644:	6819      	ldreq	r1, [r3, #0]
 8001646:	685b      	ldreq	r3, [r3, #4]
 8001648:	6063      	str	r3, [r4, #4]
 800164a:	bf04      	itt	eq
 800164c:	1809      	addeq	r1, r1, r0
 800164e:	6021      	streq	r1, [r4, #0]
 8001650:	6054      	str	r4, [r2, #4]
 8001652:	e7ca      	b.n	80015ea <_free_r+0x22>
 8001654:	bd38      	pop	{r3, r4, r5, pc}
 8001656:	bf00      	nop
 8001658:	200002c4 	.word	0x200002c4

0800165c <malloc>:
 800165c:	4b02      	ldr	r3, [pc, #8]	@ (8001668 <malloc+0xc>)
 800165e:	4601      	mov	r1, r0
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	f000 b825 	b.w	80016b0 <_malloc_r>
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c

0800166c <sbrk_aligned>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	4e0f      	ldr	r6, [pc, #60]	@ (80016ac <sbrk_aligned+0x40>)
 8001670:	460c      	mov	r4, r1
 8001672:	6831      	ldr	r1, [r6, #0]
 8001674:	4605      	mov	r5, r0
 8001676:	b911      	cbnz	r1, 800167e <sbrk_aligned+0x12>
 8001678:	f000 fd38 	bl	80020ec <_sbrk_r>
 800167c:	6030      	str	r0, [r6, #0]
 800167e:	4621      	mov	r1, r4
 8001680:	4628      	mov	r0, r5
 8001682:	f000 fd33 	bl	80020ec <_sbrk_r>
 8001686:	1c43      	adds	r3, r0, #1
 8001688:	d103      	bne.n	8001692 <sbrk_aligned+0x26>
 800168a:	f04f 34ff 	mov.w	r4, #4294967295
 800168e:	4620      	mov	r0, r4
 8001690:	bd70      	pop	{r4, r5, r6, pc}
 8001692:	1cc4      	adds	r4, r0, #3
 8001694:	f024 0403 	bic.w	r4, r4, #3
 8001698:	42a0      	cmp	r0, r4
 800169a:	d0f8      	beq.n	800168e <sbrk_aligned+0x22>
 800169c:	1a21      	subs	r1, r4, r0
 800169e:	4628      	mov	r0, r5
 80016a0:	f000 fd24 	bl	80020ec <_sbrk_r>
 80016a4:	3001      	adds	r0, #1
 80016a6:	d1f2      	bne.n	800168e <sbrk_aligned+0x22>
 80016a8:	e7ef      	b.n	800168a <sbrk_aligned+0x1e>
 80016aa:	bf00      	nop
 80016ac:	200002c0 	.word	0x200002c0

080016b0 <_malloc_r>:
 80016b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016b4:	1ccd      	adds	r5, r1, #3
 80016b6:	f025 0503 	bic.w	r5, r5, #3
 80016ba:	3508      	adds	r5, #8
 80016bc:	2d0c      	cmp	r5, #12
 80016be:	bf38      	it	cc
 80016c0:	250c      	movcc	r5, #12
 80016c2:	2d00      	cmp	r5, #0
 80016c4:	4606      	mov	r6, r0
 80016c6:	db01      	blt.n	80016cc <_malloc_r+0x1c>
 80016c8:	42a9      	cmp	r1, r5
 80016ca:	d904      	bls.n	80016d6 <_malloc_r+0x26>
 80016cc:	230c      	movs	r3, #12
 80016ce:	6033      	str	r3, [r6, #0]
 80016d0:	2000      	movs	r0, #0
 80016d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017ac <_malloc_r+0xfc>
 80016da:	f000 f869 	bl	80017b0 <__malloc_lock>
 80016de:	f8d8 3000 	ldr.w	r3, [r8]
 80016e2:	461c      	mov	r4, r3
 80016e4:	bb44      	cbnz	r4, 8001738 <_malloc_r+0x88>
 80016e6:	4629      	mov	r1, r5
 80016e8:	4630      	mov	r0, r6
 80016ea:	f7ff ffbf 	bl	800166c <sbrk_aligned>
 80016ee:	1c43      	adds	r3, r0, #1
 80016f0:	4604      	mov	r4, r0
 80016f2:	d158      	bne.n	80017a6 <_malloc_r+0xf6>
 80016f4:	f8d8 4000 	ldr.w	r4, [r8]
 80016f8:	4627      	mov	r7, r4
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	d143      	bne.n	8001786 <_malloc_r+0xd6>
 80016fe:	2c00      	cmp	r4, #0
 8001700:	d04b      	beq.n	800179a <_malloc_r+0xea>
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	4639      	mov	r1, r7
 8001706:	4630      	mov	r0, r6
 8001708:	eb04 0903 	add.w	r9, r4, r3
 800170c:	f000 fcee 	bl	80020ec <_sbrk_r>
 8001710:	4581      	cmp	r9, r0
 8001712:	d142      	bne.n	800179a <_malloc_r+0xea>
 8001714:	6821      	ldr	r1, [r4, #0]
 8001716:	1a6d      	subs	r5, r5, r1
 8001718:	4629      	mov	r1, r5
 800171a:	4630      	mov	r0, r6
 800171c:	f7ff ffa6 	bl	800166c <sbrk_aligned>
 8001720:	3001      	adds	r0, #1
 8001722:	d03a      	beq.n	800179a <_malloc_r+0xea>
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	442b      	add	r3, r5
 8001728:	6023      	str	r3, [r4, #0]
 800172a:	f8d8 3000 	ldr.w	r3, [r8]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	bb62      	cbnz	r2, 800178c <_malloc_r+0xdc>
 8001732:	f8c8 7000 	str.w	r7, [r8]
 8001736:	e00f      	b.n	8001758 <_malloc_r+0xa8>
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	1b52      	subs	r2, r2, r5
 800173c:	d420      	bmi.n	8001780 <_malloc_r+0xd0>
 800173e:	2a0b      	cmp	r2, #11
 8001740:	d917      	bls.n	8001772 <_malloc_r+0xc2>
 8001742:	1961      	adds	r1, r4, r5
 8001744:	42a3      	cmp	r3, r4
 8001746:	6025      	str	r5, [r4, #0]
 8001748:	bf18      	it	ne
 800174a:	6059      	strne	r1, [r3, #4]
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	bf08      	it	eq
 8001750:	f8c8 1000 	streq.w	r1, [r8]
 8001754:	5162      	str	r2, [r4, r5]
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	4630      	mov	r0, r6
 800175a:	f000 f82f 	bl	80017bc <__malloc_unlock>
 800175e:	f104 000b 	add.w	r0, r4, #11
 8001762:	1d23      	adds	r3, r4, #4
 8001764:	f020 0007 	bic.w	r0, r0, #7
 8001768:	1ac2      	subs	r2, r0, r3
 800176a:	bf1c      	itt	ne
 800176c:	1a1b      	subne	r3, r3, r0
 800176e:	50a3      	strne	r3, [r4, r2]
 8001770:	e7af      	b.n	80016d2 <_malloc_r+0x22>
 8001772:	6862      	ldr	r2, [r4, #4]
 8001774:	42a3      	cmp	r3, r4
 8001776:	bf0c      	ite	eq
 8001778:	f8c8 2000 	streq.w	r2, [r8]
 800177c:	605a      	strne	r2, [r3, #4]
 800177e:	e7eb      	b.n	8001758 <_malloc_r+0xa8>
 8001780:	4623      	mov	r3, r4
 8001782:	6864      	ldr	r4, [r4, #4]
 8001784:	e7ae      	b.n	80016e4 <_malloc_r+0x34>
 8001786:	463c      	mov	r4, r7
 8001788:	687f      	ldr	r7, [r7, #4]
 800178a:	e7b6      	b.n	80016fa <_malloc_r+0x4a>
 800178c:	461a      	mov	r2, r3
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	42a3      	cmp	r3, r4
 8001792:	d1fb      	bne.n	800178c <_malloc_r+0xdc>
 8001794:	2300      	movs	r3, #0
 8001796:	6053      	str	r3, [r2, #4]
 8001798:	e7de      	b.n	8001758 <_malloc_r+0xa8>
 800179a:	230c      	movs	r3, #12
 800179c:	6033      	str	r3, [r6, #0]
 800179e:	4630      	mov	r0, r6
 80017a0:	f000 f80c 	bl	80017bc <__malloc_unlock>
 80017a4:	e794      	b.n	80016d0 <_malloc_r+0x20>
 80017a6:	6005      	str	r5, [r0, #0]
 80017a8:	e7d6      	b.n	8001758 <_malloc_r+0xa8>
 80017aa:	bf00      	nop
 80017ac:	200002c4 	.word	0x200002c4

080017b0 <__malloc_lock>:
 80017b0:	4801      	ldr	r0, [pc, #4]	@ (80017b8 <__malloc_lock+0x8>)
 80017b2:	f7ff bf06 	b.w	80015c2 <__retarget_lock_acquire_recursive>
 80017b6:	bf00      	nop
 80017b8:	200002bc 	.word	0x200002bc

080017bc <__malloc_unlock>:
 80017bc:	4801      	ldr	r0, [pc, #4]	@ (80017c4 <__malloc_unlock+0x8>)
 80017be:	f7ff bf01 	b.w	80015c4 <__retarget_lock_release_recursive>
 80017c2:	bf00      	nop
 80017c4:	200002bc 	.word	0x200002bc

080017c8 <__sfputc_r>:
 80017c8:	6893      	ldr	r3, [r2, #8]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	b410      	push	{r4}
 80017d0:	6093      	str	r3, [r2, #8]
 80017d2:	da08      	bge.n	80017e6 <__sfputc_r+0x1e>
 80017d4:	6994      	ldr	r4, [r2, #24]
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	db01      	blt.n	80017de <__sfputc_r+0x16>
 80017da:	290a      	cmp	r1, #10
 80017dc:	d103      	bne.n	80017e6 <__sfputc_r+0x1e>
 80017de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017e2:	f000 bbcd 	b.w	8001f80 <__swbuf_r>
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	1c58      	adds	r0, r3, #1
 80017ea:	6010      	str	r0, [r2, #0]
 80017ec:	7019      	strb	r1, [r3, #0]
 80017ee:	4608      	mov	r0, r1
 80017f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <__sfputs_r>:
 80017f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f8:	4606      	mov	r6, r0
 80017fa:	460f      	mov	r7, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	18d5      	adds	r5, r2, r3
 8001800:	42ac      	cmp	r4, r5
 8001802:	d101      	bne.n	8001808 <__sfputs_r+0x12>
 8001804:	2000      	movs	r0, #0
 8001806:	e007      	b.n	8001818 <__sfputs_r+0x22>
 8001808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800180c:	463a      	mov	r2, r7
 800180e:	4630      	mov	r0, r6
 8001810:	f7ff ffda 	bl	80017c8 <__sfputc_r>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d1f3      	bne.n	8001800 <__sfputs_r+0xa>
 8001818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800181c <_vfiprintf_r>:
 800181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001820:	460d      	mov	r5, r1
 8001822:	b09d      	sub	sp, #116	@ 0x74
 8001824:	4614      	mov	r4, r2
 8001826:	4698      	mov	r8, r3
 8001828:	4606      	mov	r6, r0
 800182a:	b118      	cbz	r0, 8001834 <_vfiprintf_r+0x18>
 800182c:	6a03      	ldr	r3, [r0, #32]
 800182e:	b90b      	cbnz	r3, 8001834 <_vfiprintf_r+0x18>
 8001830:	f7ff fd1e 	bl	8001270 <__sinit>
 8001834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001836:	07d9      	lsls	r1, r3, #31
 8001838:	d405      	bmi.n	8001846 <_vfiprintf_r+0x2a>
 800183a:	89ab      	ldrh	r3, [r5, #12]
 800183c:	059a      	lsls	r2, r3, #22
 800183e:	d402      	bmi.n	8001846 <_vfiprintf_r+0x2a>
 8001840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001842:	f7ff febe 	bl	80015c2 <__retarget_lock_acquire_recursive>
 8001846:	89ab      	ldrh	r3, [r5, #12]
 8001848:	071b      	lsls	r3, r3, #28
 800184a:	d501      	bpl.n	8001850 <_vfiprintf_r+0x34>
 800184c:	692b      	ldr	r3, [r5, #16]
 800184e:	b99b      	cbnz	r3, 8001878 <_vfiprintf_r+0x5c>
 8001850:	4629      	mov	r1, r5
 8001852:	4630      	mov	r0, r6
 8001854:	f000 fbd2 	bl	8001ffc <__swsetup_r>
 8001858:	b170      	cbz	r0, 8001878 <_vfiprintf_r+0x5c>
 800185a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800185c:	07dc      	lsls	r4, r3, #31
 800185e:	d504      	bpl.n	800186a <_vfiprintf_r+0x4e>
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	b01d      	add	sp, #116	@ 0x74
 8001866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800186a:	89ab      	ldrh	r3, [r5, #12]
 800186c:	0598      	lsls	r0, r3, #22
 800186e:	d4f7      	bmi.n	8001860 <_vfiprintf_r+0x44>
 8001870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001872:	f7ff fea7 	bl	80015c4 <__retarget_lock_release_recursive>
 8001876:	e7f3      	b.n	8001860 <_vfiprintf_r+0x44>
 8001878:	2300      	movs	r3, #0
 800187a:	9309      	str	r3, [sp, #36]	@ 0x24
 800187c:	2320      	movs	r3, #32
 800187e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001882:	f8cd 800c 	str.w	r8, [sp, #12]
 8001886:	2330      	movs	r3, #48	@ 0x30
 8001888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001a38 <_vfiprintf_r+0x21c>
 800188c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001890:	f04f 0901 	mov.w	r9, #1
 8001894:	4623      	mov	r3, r4
 8001896:	469a      	mov	sl, r3
 8001898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800189c:	b10a      	cbz	r2, 80018a2 <_vfiprintf_r+0x86>
 800189e:	2a25      	cmp	r2, #37	@ 0x25
 80018a0:	d1f9      	bne.n	8001896 <_vfiprintf_r+0x7a>
 80018a2:	ebba 0b04 	subs.w	fp, sl, r4
 80018a6:	d00b      	beq.n	80018c0 <_vfiprintf_r+0xa4>
 80018a8:	465b      	mov	r3, fp
 80018aa:	4622      	mov	r2, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	4630      	mov	r0, r6
 80018b0:	f7ff ffa1 	bl	80017f6 <__sfputs_r>
 80018b4:	3001      	adds	r0, #1
 80018b6:	f000 80a7 	beq.w	8001a08 <_vfiprintf_r+0x1ec>
 80018ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80018bc:	445a      	add	r2, fp
 80018be:	9209      	str	r2, [sp, #36]	@ 0x24
 80018c0:	f89a 3000 	ldrb.w	r3, [sl]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 809f 	beq.w	8001a08 <_vfiprintf_r+0x1ec>
 80018ca:	2300      	movs	r3, #0
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018d4:	f10a 0a01 	add.w	sl, sl, #1
 80018d8:	9304      	str	r3, [sp, #16]
 80018da:	9307      	str	r3, [sp, #28]
 80018dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80018e2:	4654      	mov	r4, sl
 80018e4:	2205      	movs	r2, #5
 80018e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ea:	4853      	ldr	r0, [pc, #332]	@ (8001a38 <_vfiprintf_r+0x21c>)
 80018ec:	f7fe fc70 	bl	80001d0 <memchr>
 80018f0:	9a04      	ldr	r2, [sp, #16]
 80018f2:	b9d8      	cbnz	r0, 800192c <_vfiprintf_r+0x110>
 80018f4:	06d1      	lsls	r1, r2, #27
 80018f6:	bf44      	itt	mi
 80018f8:	2320      	movmi	r3, #32
 80018fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018fe:	0713      	lsls	r3, r2, #28
 8001900:	bf44      	itt	mi
 8001902:	232b      	movmi	r3, #43	@ 0x2b
 8001904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001908:	f89a 3000 	ldrb.w	r3, [sl]
 800190c:	2b2a      	cmp	r3, #42	@ 0x2a
 800190e:	d015      	beq.n	800193c <_vfiprintf_r+0x120>
 8001910:	9a07      	ldr	r2, [sp, #28]
 8001912:	4654      	mov	r4, sl
 8001914:	2000      	movs	r0, #0
 8001916:	f04f 0c0a 	mov.w	ip, #10
 800191a:	4621      	mov	r1, r4
 800191c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001920:	3b30      	subs	r3, #48	@ 0x30
 8001922:	2b09      	cmp	r3, #9
 8001924:	d94b      	bls.n	80019be <_vfiprintf_r+0x1a2>
 8001926:	b1b0      	cbz	r0, 8001956 <_vfiprintf_r+0x13a>
 8001928:	9207      	str	r2, [sp, #28]
 800192a:	e014      	b.n	8001956 <_vfiprintf_r+0x13a>
 800192c:	eba0 0308 	sub.w	r3, r0, r8
 8001930:	fa09 f303 	lsl.w	r3, r9, r3
 8001934:	4313      	orrs	r3, r2
 8001936:	9304      	str	r3, [sp, #16]
 8001938:	46a2      	mov	sl, r4
 800193a:	e7d2      	b.n	80018e2 <_vfiprintf_r+0xc6>
 800193c:	9b03      	ldr	r3, [sp, #12]
 800193e:	1d19      	adds	r1, r3, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	9103      	str	r1, [sp, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	bfbb      	ittet	lt
 8001948:	425b      	neglt	r3, r3
 800194a:	f042 0202 	orrlt.w	r2, r2, #2
 800194e:	9307      	strge	r3, [sp, #28]
 8001950:	9307      	strlt	r3, [sp, #28]
 8001952:	bfb8      	it	lt
 8001954:	9204      	strlt	r2, [sp, #16]
 8001956:	7823      	ldrb	r3, [r4, #0]
 8001958:	2b2e      	cmp	r3, #46	@ 0x2e
 800195a:	d10a      	bne.n	8001972 <_vfiprintf_r+0x156>
 800195c:	7863      	ldrb	r3, [r4, #1]
 800195e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001960:	d132      	bne.n	80019c8 <_vfiprintf_r+0x1ac>
 8001962:	9b03      	ldr	r3, [sp, #12]
 8001964:	1d1a      	adds	r2, r3, #4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	9203      	str	r2, [sp, #12]
 800196a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800196e:	3402      	adds	r4, #2
 8001970:	9305      	str	r3, [sp, #20]
 8001972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001a48 <_vfiprintf_r+0x22c>
 8001976:	7821      	ldrb	r1, [r4, #0]
 8001978:	2203      	movs	r2, #3
 800197a:	4650      	mov	r0, sl
 800197c:	f7fe fc28 	bl	80001d0 <memchr>
 8001980:	b138      	cbz	r0, 8001992 <_vfiprintf_r+0x176>
 8001982:	9b04      	ldr	r3, [sp, #16]
 8001984:	eba0 000a 	sub.w	r0, r0, sl
 8001988:	2240      	movs	r2, #64	@ 0x40
 800198a:	4082      	lsls	r2, r0
 800198c:	4313      	orrs	r3, r2
 800198e:	3401      	adds	r4, #1
 8001990:	9304      	str	r3, [sp, #16]
 8001992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001996:	4829      	ldr	r0, [pc, #164]	@ (8001a3c <_vfiprintf_r+0x220>)
 8001998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800199c:	2206      	movs	r2, #6
 800199e:	f7fe fc17 	bl	80001d0 <memchr>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d03f      	beq.n	8001a26 <_vfiprintf_r+0x20a>
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <_vfiprintf_r+0x224>)
 80019a8:	bb1b      	cbnz	r3, 80019f2 <_vfiprintf_r+0x1d6>
 80019aa:	9b03      	ldr	r3, [sp, #12]
 80019ac:	3307      	adds	r3, #7
 80019ae:	f023 0307 	bic.w	r3, r3, #7
 80019b2:	3308      	adds	r3, #8
 80019b4:	9303      	str	r3, [sp, #12]
 80019b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019b8:	443b      	add	r3, r7
 80019ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80019bc:	e76a      	b.n	8001894 <_vfiprintf_r+0x78>
 80019be:	fb0c 3202 	mla	r2, ip, r2, r3
 80019c2:	460c      	mov	r4, r1
 80019c4:	2001      	movs	r0, #1
 80019c6:	e7a8      	b.n	800191a <_vfiprintf_r+0xfe>
 80019c8:	2300      	movs	r3, #0
 80019ca:	3401      	adds	r4, #1
 80019cc:	9305      	str	r3, [sp, #20]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 0c0a 	mov.w	ip, #10
 80019d4:	4620      	mov	r0, r4
 80019d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019da:	3a30      	subs	r2, #48	@ 0x30
 80019dc:	2a09      	cmp	r2, #9
 80019de:	d903      	bls.n	80019e8 <_vfiprintf_r+0x1cc>
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0c6      	beq.n	8001972 <_vfiprintf_r+0x156>
 80019e4:	9105      	str	r1, [sp, #20]
 80019e6:	e7c4      	b.n	8001972 <_vfiprintf_r+0x156>
 80019e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80019ec:	4604      	mov	r4, r0
 80019ee:	2301      	movs	r3, #1
 80019f0:	e7f0      	b.n	80019d4 <_vfiprintf_r+0x1b8>
 80019f2:	ab03      	add	r3, sp, #12
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	462a      	mov	r2, r5
 80019f8:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <_vfiprintf_r+0x228>)
 80019fa:	a904      	add	r1, sp, #16
 80019fc:	4630      	mov	r0, r6
 80019fe:	f3af 8000 	nop.w
 8001a02:	4607      	mov	r7, r0
 8001a04:	1c78      	adds	r0, r7, #1
 8001a06:	d1d6      	bne.n	80019b6 <_vfiprintf_r+0x19a>
 8001a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a0a:	07d9      	lsls	r1, r3, #31
 8001a0c:	d405      	bmi.n	8001a1a <_vfiprintf_r+0x1fe>
 8001a0e:	89ab      	ldrh	r3, [r5, #12]
 8001a10:	059a      	lsls	r2, r3, #22
 8001a12:	d402      	bmi.n	8001a1a <_vfiprintf_r+0x1fe>
 8001a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a16:	f7ff fdd5 	bl	80015c4 <__retarget_lock_release_recursive>
 8001a1a:	89ab      	ldrh	r3, [r5, #12]
 8001a1c:	065b      	lsls	r3, r3, #25
 8001a1e:	f53f af1f 	bmi.w	8001860 <_vfiprintf_r+0x44>
 8001a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a24:	e71e      	b.n	8001864 <_vfiprintf_r+0x48>
 8001a26:	ab03      	add	r3, sp, #12
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	462a      	mov	r2, r5
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <_vfiprintf_r+0x228>)
 8001a2e:	a904      	add	r1, sp, #16
 8001a30:	4630      	mov	r0, r6
 8001a32:	f000 f879 	bl	8001b28 <_printf_i>
 8001a36:	e7e4      	b.n	8001a02 <_vfiprintf_r+0x1e6>
 8001a38:	0800218e 	.word	0x0800218e
 8001a3c:	08002198 	.word	0x08002198
 8001a40:	00000000 	.word	0x00000000
 8001a44:	080017f7 	.word	0x080017f7
 8001a48:	08002194 	.word	0x08002194

08001a4c <_printf_common>:
 8001a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	4616      	mov	r6, r2
 8001a52:	4698      	mov	r8, r3
 8001a54:	688a      	ldr	r2, [r1, #8]
 8001a56:	690b      	ldr	r3, [r1, #16]
 8001a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bfb8      	it	lt
 8001a60:	4613      	movlt	r3, r2
 8001a62:	6033      	str	r3, [r6, #0]
 8001a64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a68:	4607      	mov	r7, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	b10a      	cbz	r2, 8001a72 <_printf_common+0x26>
 8001a6e:	3301      	adds	r3, #1
 8001a70:	6033      	str	r3, [r6, #0]
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	0699      	lsls	r1, r3, #26
 8001a76:	bf42      	ittt	mi
 8001a78:	6833      	ldrmi	r3, [r6, #0]
 8001a7a:	3302      	addmi	r3, #2
 8001a7c:	6033      	strmi	r3, [r6, #0]
 8001a7e:	6825      	ldr	r5, [r4, #0]
 8001a80:	f015 0506 	ands.w	r5, r5, #6
 8001a84:	d106      	bne.n	8001a94 <_printf_common+0x48>
 8001a86:	f104 0a19 	add.w	sl, r4, #25
 8001a8a:	68e3      	ldr	r3, [r4, #12]
 8001a8c:	6832      	ldr	r2, [r6, #0]
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	42ab      	cmp	r3, r5
 8001a92:	dc26      	bgt.n	8001ae2 <_printf_common+0x96>
 8001a94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	3b00      	subs	r3, #0
 8001a9c:	bf18      	it	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	0692      	lsls	r2, r2, #26
 8001aa2:	d42b      	bmi.n	8001afc <_printf_common+0xb0>
 8001aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	4638      	mov	r0, r7
 8001aac:	47c8      	blx	r9
 8001aae:	3001      	adds	r0, #1
 8001ab0:	d01e      	beq.n	8001af0 <_printf_common+0xa4>
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	6922      	ldr	r2, [r4, #16]
 8001ab6:	f003 0306 	and.w	r3, r3, #6
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf02      	ittt	eq
 8001abe:	68e5      	ldreq	r5, [r4, #12]
 8001ac0:	6833      	ldreq	r3, [r6, #0]
 8001ac2:	1aed      	subeq	r5, r5, r3
 8001ac4:	68a3      	ldr	r3, [r4, #8]
 8001ac6:	bf0c      	ite	eq
 8001ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001acc:	2500      	movne	r5, #0
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	bfc4      	itt	gt
 8001ad2:	1a9b      	subgt	r3, r3, r2
 8001ad4:	18ed      	addgt	r5, r5, r3
 8001ad6:	2600      	movs	r6, #0
 8001ad8:	341a      	adds	r4, #26
 8001ada:	42b5      	cmp	r5, r6
 8001adc:	d11a      	bne.n	8001b14 <_printf_common+0xc8>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e008      	b.n	8001af4 <_printf_common+0xa8>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	4638      	mov	r0, r7
 8001aea:	47c8      	blx	r9
 8001aec:	3001      	adds	r0, #1
 8001aee:	d103      	bne.n	8001af8 <_printf_common+0xac>
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af8:	3501      	adds	r5, #1
 8001afa:	e7c6      	b.n	8001a8a <_printf_common+0x3e>
 8001afc:	18e1      	adds	r1, r4, r3
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	2030      	movs	r0, #48	@ 0x30
 8001b02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b06:	4422      	add	r2, r4
 8001b08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b10:	3302      	adds	r3, #2
 8001b12:	e7c7      	b.n	8001aa4 <_printf_common+0x58>
 8001b14:	2301      	movs	r3, #1
 8001b16:	4622      	mov	r2, r4
 8001b18:	4641      	mov	r1, r8
 8001b1a:	4638      	mov	r0, r7
 8001b1c:	47c8      	blx	r9
 8001b1e:	3001      	adds	r0, #1
 8001b20:	d0e6      	beq.n	8001af0 <_printf_common+0xa4>
 8001b22:	3601      	adds	r6, #1
 8001b24:	e7d9      	b.n	8001ada <_printf_common+0x8e>
	...

08001b28 <_printf_i>:
 8001b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b2c:	7e0f      	ldrb	r7, [r1, #24]
 8001b2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b30:	2f78      	cmp	r7, #120	@ 0x78
 8001b32:	4691      	mov	r9, r2
 8001b34:	4680      	mov	r8, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	469a      	mov	sl, r3
 8001b3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b3e:	d807      	bhi.n	8001b50 <_printf_i+0x28>
 8001b40:	2f62      	cmp	r7, #98	@ 0x62
 8001b42:	d80a      	bhi.n	8001b5a <_printf_i+0x32>
 8001b44:	2f00      	cmp	r7, #0
 8001b46:	f000 80d1 	beq.w	8001cec <_printf_i+0x1c4>
 8001b4a:	2f58      	cmp	r7, #88	@ 0x58
 8001b4c:	f000 80b8 	beq.w	8001cc0 <_printf_i+0x198>
 8001b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b58:	e03a      	b.n	8001bd0 <_printf_i+0xa8>
 8001b5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b5e:	2b15      	cmp	r3, #21
 8001b60:	d8f6      	bhi.n	8001b50 <_printf_i+0x28>
 8001b62:	a101      	add	r1, pc, #4	@ (adr r1, 8001b68 <_printf_i+0x40>)
 8001b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b68:	08001bc1 	.word	0x08001bc1
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001b51 	.word	0x08001b51
 8001b74:	08001b51 	.word	0x08001b51
 8001b78:	08001b51 	.word	0x08001b51
 8001b7c:	08001b51 	.word	0x08001b51
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001b51 	.word	0x08001b51
 8001b88:	08001b51 	.word	0x08001b51
 8001b8c:	08001b51 	.word	0x08001b51
 8001b90:	08001b51 	.word	0x08001b51
 8001b94:	08001cd3 	.word	0x08001cd3
 8001b98:	08001bff 	.word	0x08001bff
 8001b9c:	08001c8d 	.word	0x08001c8d
 8001ba0:	08001b51 	.word	0x08001b51
 8001ba4:	08001b51 	.word	0x08001b51
 8001ba8:	08001cf5 	.word	0x08001cf5
 8001bac:	08001b51 	.word	0x08001b51
 8001bb0:	08001bff 	.word	0x08001bff
 8001bb4:	08001b51 	.word	0x08001b51
 8001bb8:	08001b51 	.word	0x08001b51
 8001bbc:	08001c95 	.word	0x08001c95
 8001bc0:	6833      	ldr	r3, [r6, #0]
 8001bc2:	1d1a      	adds	r2, r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6032      	str	r2, [r6, #0]
 8001bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001bcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e09c      	b.n	8001d0e <_printf_i+0x1e6>
 8001bd4:	6833      	ldr	r3, [r6, #0]
 8001bd6:	6820      	ldr	r0, [r4, #0]
 8001bd8:	1d19      	adds	r1, r3, #4
 8001bda:	6031      	str	r1, [r6, #0]
 8001bdc:	0606      	lsls	r6, r0, #24
 8001bde:	d501      	bpl.n	8001be4 <_printf_i+0xbc>
 8001be0:	681d      	ldr	r5, [r3, #0]
 8001be2:	e003      	b.n	8001bec <_printf_i+0xc4>
 8001be4:	0645      	lsls	r5, r0, #25
 8001be6:	d5fb      	bpl.n	8001be0 <_printf_i+0xb8>
 8001be8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001bec:	2d00      	cmp	r5, #0
 8001bee:	da03      	bge.n	8001bf8 <_printf_i+0xd0>
 8001bf0:	232d      	movs	r3, #45	@ 0x2d
 8001bf2:	426d      	negs	r5, r5
 8001bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bf8:	4858      	ldr	r0, [pc, #352]	@ (8001d5c <_printf_i+0x234>)
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	e011      	b.n	8001c22 <_printf_i+0xfa>
 8001bfe:	6821      	ldr	r1, [r4, #0]
 8001c00:	6833      	ldr	r3, [r6, #0]
 8001c02:	0608      	lsls	r0, r1, #24
 8001c04:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c08:	d402      	bmi.n	8001c10 <_printf_i+0xe8>
 8001c0a:	0649      	lsls	r1, r1, #25
 8001c0c:	bf48      	it	mi
 8001c0e:	b2ad      	uxthmi	r5, r5
 8001c10:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c12:	4852      	ldr	r0, [pc, #328]	@ (8001d5c <_printf_i+0x234>)
 8001c14:	6033      	str	r3, [r6, #0]
 8001c16:	bf14      	ite	ne
 8001c18:	230a      	movne	r3, #10
 8001c1a:	2308      	moveq	r3, #8
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c22:	6866      	ldr	r6, [r4, #4]
 8001c24:	60a6      	str	r6, [r4, #8]
 8001c26:	2e00      	cmp	r6, #0
 8001c28:	db05      	blt.n	8001c36 <_printf_i+0x10e>
 8001c2a:	6821      	ldr	r1, [r4, #0]
 8001c2c:	432e      	orrs	r6, r5
 8001c2e:	f021 0104 	bic.w	r1, r1, #4
 8001c32:	6021      	str	r1, [r4, #0]
 8001c34:	d04b      	beq.n	8001cce <_printf_i+0x1a6>
 8001c36:	4616      	mov	r6, r2
 8001c38:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c3c:	fb03 5711 	mls	r7, r3, r1, r5
 8001c40:	5dc7      	ldrb	r7, [r0, r7]
 8001c42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c46:	462f      	mov	r7, r5
 8001c48:	42bb      	cmp	r3, r7
 8001c4a:	460d      	mov	r5, r1
 8001c4c:	d9f4      	bls.n	8001c38 <_printf_i+0x110>
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d10b      	bne.n	8001c6a <_printf_i+0x142>
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	07df      	lsls	r7, r3, #31
 8001c56:	d508      	bpl.n	8001c6a <_printf_i+0x142>
 8001c58:	6923      	ldr	r3, [r4, #16]
 8001c5a:	6861      	ldr	r1, [r4, #4]
 8001c5c:	4299      	cmp	r1, r3
 8001c5e:	bfde      	ittt	le
 8001c60:	2330      	movle	r3, #48	@ 0x30
 8001c62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c6a:	1b92      	subs	r2, r2, r6
 8001c6c:	6122      	str	r2, [r4, #16]
 8001c6e:	f8cd a000 	str.w	sl, [sp]
 8001c72:	464b      	mov	r3, r9
 8001c74:	aa03      	add	r2, sp, #12
 8001c76:	4621      	mov	r1, r4
 8001c78:	4640      	mov	r0, r8
 8001c7a:	f7ff fee7 	bl	8001a4c <_printf_common>
 8001c7e:	3001      	adds	r0, #1
 8001c80:	d14a      	bne.n	8001d18 <_printf_i+0x1f0>
 8001c82:	f04f 30ff 	mov.w	r0, #4294967295
 8001c86:	b004      	add	sp, #16
 8001c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	f043 0320 	orr.w	r3, r3, #32
 8001c92:	6023      	str	r3, [r4, #0]
 8001c94:	4832      	ldr	r0, [pc, #200]	@ (8001d60 <_printf_i+0x238>)
 8001c96:	2778      	movs	r7, #120	@ 0x78
 8001c98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	6831      	ldr	r1, [r6, #0]
 8001ca0:	061f      	lsls	r7, r3, #24
 8001ca2:	f851 5b04 	ldr.w	r5, [r1], #4
 8001ca6:	d402      	bmi.n	8001cae <_printf_i+0x186>
 8001ca8:	065f      	lsls	r7, r3, #25
 8001caa:	bf48      	it	mi
 8001cac:	b2ad      	uxthmi	r5, r5
 8001cae:	6031      	str	r1, [r6, #0]
 8001cb0:	07d9      	lsls	r1, r3, #31
 8001cb2:	bf44      	itt	mi
 8001cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8001cb8:	6023      	strmi	r3, [r4, #0]
 8001cba:	b11d      	cbz	r5, 8001cc4 <_printf_i+0x19c>
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	e7ad      	b.n	8001c1c <_printf_i+0xf4>
 8001cc0:	4826      	ldr	r0, [pc, #152]	@ (8001d5c <_printf_i+0x234>)
 8001cc2:	e7e9      	b.n	8001c98 <_printf_i+0x170>
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	f023 0320 	bic.w	r3, r3, #32
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	e7f6      	b.n	8001cbc <_printf_i+0x194>
 8001cce:	4616      	mov	r6, r2
 8001cd0:	e7bd      	b.n	8001c4e <_printf_i+0x126>
 8001cd2:	6833      	ldr	r3, [r6, #0]
 8001cd4:	6825      	ldr	r5, [r4, #0]
 8001cd6:	6961      	ldr	r1, [r4, #20]
 8001cd8:	1d18      	adds	r0, r3, #4
 8001cda:	6030      	str	r0, [r6, #0]
 8001cdc:	062e      	lsls	r6, r5, #24
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	d501      	bpl.n	8001ce6 <_printf_i+0x1be>
 8001ce2:	6019      	str	r1, [r3, #0]
 8001ce4:	e002      	b.n	8001cec <_printf_i+0x1c4>
 8001ce6:	0668      	lsls	r0, r5, #25
 8001ce8:	d5fb      	bpl.n	8001ce2 <_printf_i+0x1ba>
 8001cea:	8019      	strh	r1, [r3, #0]
 8001cec:	2300      	movs	r3, #0
 8001cee:	6123      	str	r3, [r4, #16]
 8001cf0:	4616      	mov	r6, r2
 8001cf2:	e7bc      	b.n	8001c6e <_printf_i+0x146>
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	1d1a      	adds	r2, r3, #4
 8001cf8:	6032      	str	r2, [r6, #0]
 8001cfa:	681e      	ldr	r6, [r3, #0]
 8001cfc:	6862      	ldr	r2, [r4, #4]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4630      	mov	r0, r6
 8001d02:	f7fe fa65 	bl	80001d0 <memchr>
 8001d06:	b108      	cbz	r0, 8001d0c <_printf_i+0x1e4>
 8001d08:	1b80      	subs	r0, r0, r6
 8001d0a:	6060      	str	r0, [r4, #4]
 8001d0c:	6863      	ldr	r3, [r4, #4]
 8001d0e:	6123      	str	r3, [r4, #16]
 8001d10:	2300      	movs	r3, #0
 8001d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d16:	e7aa      	b.n	8001c6e <_printf_i+0x146>
 8001d18:	6923      	ldr	r3, [r4, #16]
 8001d1a:	4632      	mov	r2, r6
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	4640      	mov	r0, r8
 8001d20:	47d0      	blx	sl
 8001d22:	3001      	adds	r0, #1
 8001d24:	d0ad      	beq.n	8001c82 <_printf_i+0x15a>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	079b      	lsls	r3, r3, #30
 8001d2a:	d413      	bmi.n	8001d54 <_printf_i+0x22c>
 8001d2c:	68e0      	ldr	r0, [r4, #12]
 8001d2e:	9b03      	ldr	r3, [sp, #12]
 8001d30:	4298      	cmp	r0, r3
 8001d32:	bfb8      	it	lt
 8001d34:	4618      	movlt	r0, r3
 8001d36:	e7a6      	b.n	8001c86 <_printf_i+0x15e>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4632      	mov	r2, r6
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	4640      	mov	r0, r8
 8001d40:	47d0      	blx	sl
 8001d42:	3001      	adds	r0, #1
 8001d44:	d09d      	beq.n	8001c82 <_printf_i+0x15a>
 8001d46:	3501      	adds	r5, #1
 8001d48:	68e3      	ldr	r3, [r4, #12]
 8001d4a:	9903      	ldr	r1, [sp, #12]
 8001d4c:	1a5b      	subs	r3, r3, r1
 8001d4e:	42ab      	cmp	r3, r5
 8001d50:	dcf2      	bgt.n	8001d38 <_printf_i+0x210>
 8001d52:	e7eb      	b.n	8001d2c <_printf_i+0x204>
 8001d54:	2500      	movs	r5, #0
 8001d56:	f104 0619 	add.w	r6, r4, #25
 8001d5a:	e7f5      	b.n	8001d48 <_printf_i+0x220>
 8001d5c:	0800219f 	.word	0x0800219f
 8001d60:	080021b0 	.word	0x080021b0

08001d64 <__sflush_r>:
 8001d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6c:	0716      	lsls	r6, r2, #28
 8001d6e:	4605      	mov	r5, r0
 8001d70:	460c      	mov	r4, r1
 8001d72:	d454      	bmi.n	8001e1e <__sflush_r+0xba>
 8001d74:	684b      	ldr	r3, [r1, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	dc02      	bgt.n	8001d80 <__sflush_r+0x1c>
 8001d7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dd48      	ble.n	8001e12 <__sflush_r+0xae>
 8001d80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d82:	2e00      	cmp	r6, #0
 8001d84:	d045      	beq.n	8001e12 <__sflush_r+0xae>
 8001d86:	2300      	movs	r3, #0
 8001d88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d8c:	682f      	ldr	r7, [r5, #0]
 8001d8e:	6a21      	ldr	r1, [r4, #32]
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	d030      	beq.n	8001df6 <__sflush_r+0x92>
 8001d94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	0759      	lsls	r1, r3, #29
 8001d9a:	d505      	bpl.n	8001da8 <__sflush_r+0x44>
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001da2:	b10b      	cbz	r3, 8001da8 <__sflush_r+0x44>
 8001da4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001dac:	6a21      	ldr	r1, [r4, #32]
 8001dae:	4628      	mov	r0, r5
 8001db0:	47b0      	blx	r6
 8001db2:	1c43      	adds	r3, r0, #1
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	d106      	bne.n	8001dc6 <__sflush_r+0x62>
 8001db8:	6829      	ldr	r1, [r5, #0]
 8001dba:	291d      	cmp	r1, #29
 8001dbc:	d82b      	bhi.n	8001e16 <__sflush_r+0xb2>
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001e68 <__sflush_r+0x104>)
 8001dc0:	40ca      	lsrs	r2, r1
 8001dc2:	07d6      	lsls	r6, r2, #31
 8001dc4:	d527      	bpl.n	8001e16 <__sflush_r+0xb2>
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	6062      	str	r2, [r4, #4]
 8001dca:	04d9      	lsls	r1, r3, #19
 8001dcc:	6922      	ldr	r2, [r4, #16]
 8001dce:	6022      	str	r2, [r4, #0]
 8001dd0:	d504      	bpl.n	8001ddc <__sflush_r+0x78>
 8001dd2:	1c42      	adds	r2, r0, #1
 8001dd4:	d101      	bne.n	8001dda <__sflush_r+0x76>
 8001dd6:	682b      	ldr	r3, [r5, #0]
 8001dd8:	b903      	cbnz	r3, 8001ddc <__sflush_r+0x78>
 8001dda:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dde:	602f      	str	r7, [r5, #0]
 8001de0:	b1b9      	cbz	r1, 8001e12 <__sflush_r+0xae>
 8001de2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001de6:	4299      	cmp	r1, r3
 8001de8:	d002      	beq.n	8001df0 <__sflush_r+0x8c>
 8001dea:	4628      	mov	r0, r5
 8001dec:	f7ff fbec 	bl	80015c8 <_free_r>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6363      	str	r3, [r4, #52]	@ 0x34
 8001df4:	e00d      	b.n	8001e12 <__sflush_r+0xae>
 8001df6:	2301      	movs	r3, #1
 8001df8:	4628      	mov	r0, r5
 8001dfa:	47b0      	blx	r6
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	1c50      	adds	r0, r2, #1
 8001e00:	d1c9      	bne.n	8001d96 <__sflush_r+0x32>
 8001e02:	682b      	ldr	r3, [r5, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0c6      	beq.n	8001d96 <__sflush_r+0x32>
 8001e08:	2b1d      	cmp	r3, #29
 8001e0a:	d001      	beq.n	8001e10 <__sflush_r+0xac>
 8001e0c:	2b16      	cmp	r3, #22
 8001e0e:	d11e      	bne.n	8001e4e <__sflush_r+0xea>
 8001e10:	602f      	str	r7, [r5, #0]
 8001e12:	2000      	movs	r0, #0
 8001e14:	e022      	b.n	8001e5c <__sflush_r+0xf8>
 8001e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	e01b      	b.n	8001e56 <__sflush_r+0xf2>
 8001e1e:	690f      	ldr	r7, [r1, #16]
 8001e20:	2f00      	cmp	r7, #0
 8001e22:	d0f6      	beq.n	8001e12 <__sflush_r+0xae>
 8001e24:	0793      	lsls	r3, r2, #30
 8001e26:	680e      	ldr	r6, [r1, #0]
 8001e28:	bf08      	it	eq
 8001e2a:	694b      	ldreq	r3, [r1, #20]
 8001e2c:	600f      	str	r7, [r1, #0]
 8001e2e:	bf18      	it	ne
 8001e30:	2300      	movne	r3, #0
 8001e32:	eba6 0807 	sub.w	r8, r6, r7
 8001e36:	608b      	str	r3, [r1, #8]
 8001e38:	f1b8 0f00 	cmp.w	r8, #0
 8001e3c:	dde9      	ble.n	8001e12 <__sflush_r+0xae>
 8001e3e:	6a21      	ldr	r1, [r4, #32]
 8001e40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e42:	4643      	mov	r3, r8
 8001e44:	463a      	mov	r2, r7
 8001e46:	4628      	mov	r0, r5
 8001e48:	47b0      	blx	r6
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	dc08      	bgt.n	8001e60 <__sflush_r+0xfc>
 8001e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e56:	81a3      	strh	r3, [r4, #12]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e60:	4407      	add	r7, r0
 8001e62:	eba8 0800 	sub.w	r8, r8, r0
 8001e66:	e7e7      	b.n	8001e38 <__sflush_r+0xd4>
 8001e68:	20400001 	.word	0x20400001

08001e6c <_fflush_r>:
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	690b      	ldr	r3, [r1, #16]
 8001e70:	4605      	mov	r5, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	b913      	cbnz	r3, 8001e7c <_fflush_r+0x10>
 8001e76:	2500      	movs	r5, #0
 8001e78:	4628      	mov	r0, r5
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	b118      	cbz	r0, 8001e86 <_fflush_r+0x1a>
 8001e7e:	6a03      	ldr	r3, [r0, #32]
 8001e80:	b90b      	cbnz	r3, 8001e86 <_fflush_r+0x1a>
 8001e82:	f7ff f9f5 	bl	8001270 <__sinit>
 8001e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f3      	beq.n	8001e76 <_fflush_r+0xa>
 8001e8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e90:	07d0      	lsls	r0, r2, #31
 8001e92:	d404      	bmi.n	8001e9e <_fflush_r+0x32>
 8001e94:	0599      	lsls	r1, r3, #22
 8001e96:	d402      	bmi.n	8001e9e <_fflush_r+0x32>
 8001e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e9a:	f7ff fb92 	bl	80015c2 <__retarget_lock_acquire_recursive>
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	f7ff ff5f 	bl	8001d64 <__sflush_r>
 8001ea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ea8:	07da      	lsls	r2, r3, #31
 8001eaa:	4605      	mov	r5, r0
 8001eac:	d4e4      	bmi.n	8001e78 <_fflush_r+0xc>
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	059b      	lsls	r3, r3, #22
 8001eb2:	d4e1      	bmi.n	8001e78 <_fflush_r+0xc>
 8001eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eb6:	f7ff fb85 	bl	80015c4 <__retarget_lock_release_recursive>
 8001eba:	e7dd      	b.n	8001e78 <_fflush_r+0xc>

08001ebc <__swhatbuf_r>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec4:	2900      	cmp	r1, #0
 8001ec6:	b096      	sub	sp, #88	@ 0x58
 8001ec8:	4615      	mov	r5, r2
 8001eca:	461e      	mov	r6, r3
 8001ecc:	da0d      	bge.n	8001eea <__swhatbuf_r+0x2e>
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2340      	movne	r3, #64	@ 0x40
 8001edc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	6031      	str	r1, [r6, #0]
 8001ee4:	602b      	str	r3, [r5, #0]
 8001ee6:	b016      	add	sp, #88	@ 0x58
 8001ee8:	bd70      	pop	{r4, r5, r6, pc}
 8001eea:	466a      	mov	r2, sp
 8001eec:	f000 f8dc 	bl	80020a8 <_fstat_r>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	dbec      	blt.n	8001ece <__swhatbuf_r+0x12>
 8001ef4:	9901      	ldr	r1, [sp, #4]
 8001ef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001efa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001efe:	4259      	negs	r1, r3
 8001f00:	4159      	adcs	r1, r3
 8001f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f06:	e7eb      	b.n	8001ee0 <__swhatbuf_r+0x24>

08001f08 <__smakebuf_r>:
 8001f08:	898b      	ldrh	r3, [r1, #12]
 8001f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f0c:	079d      	lsls	r5, r3, #30
 8001f0e:	4606      	mov	r6, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	d507      	bpl.n	8001f24 <__smakebuf_r+0x1c>
 8001f14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	6123      	str	r3, [r4, #16]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	6163      	str	r3, [r4, #20]
 8001f20:	b003      	add	sp, #12
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f24:	ab01      	add	r3, sp, #4
 8001f26:	466a      	mov	r2, sp
 8001f28:	f7ff ffc8 	bl	8001ebc <__swhatbuf_r>
 8001f2c:	9f00      	ldr	r7, [sp, #0]
 8001f2e:	4605      	mov	r5, r0
 8001f30:	4639      	mov	r1, r7
 8001f32:	4630      	mov	r0, r6
 8001f34:	f7ff fbbc 	bl	80016b0 <_malloc_r>
 8001f38:	b948      	cbnz	r0, 8001f4e <__smakebuf_r+0x46>
 8001f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f3e:	059a      	lsls	r2, r3, #22
 8001f40:	d4ee      	bmi.n	8001f20 <__smakebuf_r+0x18>
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	81a3      	strh	r3, [r4, #12]
 8001f4c:	e7e2      	b.n	8001f14 <__smakebuf_r+0xc>
 8001f4e:	89a3      	ldrh	r3, [r4, #12]
 8001f50:	6020      	str	r0, [r4, #0]
 8001f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f56:	81a3      	strh	r3, [r4, #12]
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001f5e:	b15b      	cbz	r3, 8001f78 <__smakebuf_r+0x70>
 8001f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f64:	4630      	mov	r0, r6
 8001f66:	f000 f8b1 	bl	80020cc <_isatty_r>
 8001f6a:	b128      	cbz	r0, 8001f78 <__smakebuf_r+0x70>
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	81a3      	strh	r3, [r4, #12]
 8001f78:	89a3      	ldrh	r3, [r4, #12]
 8001f7a:	431d      	orrs	r5, r3
 8001f7c:	81a5      	strh	r5, [r4, #12]
 8001f7e:	e7cf      	b.n	8001f20 <__smakebuf_r+0x18>

08001f80 <__swbuf_r>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	460e      	mov	r6, r1
 8001f84:	4614      	mov	r4, r2
 8001f86:	4605      	mov	r5, r0
 8001f88:	b118      	cbz	r0, 8001f92 <__swbuf_r+0x12>
 8001f8a:	6a03      	ldr	r3, [r0, #32]
 8001f8c:	b90b      	cbnz	r3, 8001f92 <__swbuf_r+0x12>
 8001f8e:	f7ff f96f 	bl	8001270 <__sinit>
 8001f92:	69a3      	ldr	r3, [r4, #24]
 8001f94:	60a3      	str	r3, [r4, #8]
 8001f96:	89a3      	ldrh	r3, [r4, #12]
 8001f98:	071a      	lsls	r2, r3, #28
 8001f9a:	d501      	bpl.n	8001fa0 <__swbuf_r+0x20>
 8001f9c:	6923      	ldr	r3, [r4, #16]
 8001f9e:	b943      	cbnz	r3, 8001fb2 <__swbuf_r+0x32>
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f000 f82a 	bl	8001ffc <__swsetup_r>
 8001fa8:	b118      	cbz	r0, 8001fb2 <__swbuf_r+0x32>
 8001faa:	f04f 37ff 	mov.w	r7, #4294967295
 8001fae:	4638      	mov	r0, r7
 8001fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	6922      	ldr	r2, [r4, #16]
 8001fb6:	1a98      	subs	r0, r3, r2
 8001fb8:	6963      	ldr	r3, [r4, #20]
 8001fba:	b2f6      	uxtb	r6, r6
 8001fbc:	4283      	cmp	r3, r0
 8001fbe:	4637      	mov	r7, r6
 8001fc0:	dc05      	bgt.n	8001fce <__swbuf_r+0x4e>
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	f7ff ff51 	bl	8001e6c <_fflush_r>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d1ed      	bne.n	8001faa <__swbuf_r+0x2a>
 8001fce:	68a3      	ldr	r3, [r4, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60a3      	str	r3, [r4, #8]
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	6022      	str	r2, [r4, #0]
 8001fda:	701e      	strb	r6, [r3, #0]
 8001fdc:	6962      	ldr	r2, [r4, #20]
 8001fde:	1c43      	adds	r3, r0, #1
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d004      	beq.n	8001fee <__swbuf_r+0x6e>
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	07db      	lsls	r3, r3, #31
 8001fe8:	d5e1      	bpl.n	8001fae <__swbuf_r+0x2e>
 8001fea:	2e0a      	cmp	r6, #10
 8001fec:	d1df      	bne.n	8001fae <__swbuf_r+0x2e>
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7ff ff3b 	bl	8001e6c <_fflush_r>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0d9      	beq.n	8001fae <__swbuf_r+0x2e>
 8001ffa:	e7d6      	b.n	8001faa <__swbuf_r+0x2a>

08001ffc <__swsetup_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <__swsetup_r+0xa8>)
 8002000:	4605      	mov	r5, r0
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	460c      	mov	r4, r1
 8002006:	b118      	cbz	r0, 8002010 <__swsetup_r+0x14>
 8002008:	6a03      	ldr	r3, [r0, #32]
 800200a:	b90b      	cbnz	r3, 8002010 <__swsetup_r+0x14>
 800200c:	f7ff f930 	bl	8001270 <__sinit>
 8002010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002014:	0719      	lsls	r1, r3, #28
 8002016:	d422      	bmi.n	800205e <__swsetup_r+0x62>
 8002018:	06da      	lsls	r2, r3, #27
 800201a:	d407      	bmi.n	800202c <__swsetup_r+0x30>
 800201c:	2209      	movs	r2, #9
 800201e:	602a      	str	r2, [r5, #0]
 8002020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002024:	81a3      	strh	r3, [r4, #12]
 8002026:	f04f 30ff 	mov.w	r0, #4294967295
 800202a:	e033      	b.n	8002094 <__swsetup_r+0x98>
 800202c:	0758      	lsls	r0, r3, #29
 800202e:	d512      	bpl.n	8002056 <__swsetup_r+0x5a>
 8002030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002032:	b141      	cbz	r1, 8002046 <__swsetup_r+0x4a>
 8002034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002038:	4299      	cmp	r1, r3
 800203a:	d002      	beq.n	8002042 <__swsetup_r+0x46>
 800203c:	4628      	mov	r0, r5
 800203e:	f7ff fac3 	bl	80015c8 <_free_r>
 8002042:	2300      	movs	r3, #0
 8002044:	6363      	str	r3, [r4, #52]	@ 0x34
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800204c:	81a3      	strh	r3, [r4, #12]
 800204e:	2300      	movs	r3, #0
 8002050:	6063      	str	r3, [r4, #4]
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	81a3      	strh	r3, [r4, #12]
 800205e:	6923      	ldr	r3, [r4, #16]
 8002060:	b94b      	cbnz	r3, 8002076 <__swsetup_r+0x7a>
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206c:	d003      	beq.n	8002076 <__swsetup_r+0x7a>
 800206e:	4621      	mov	r1, r4
 8002070:	4628      	mov	r0, r5
 8002072:	f7ff ff49 	bl	8001f08 <__smakebuf_r>
 8002076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800207a:	f013 0201 	ands.w	r2, r3, #1
 800207e:	d00a      	beq.n	8002096 <__swsetup_r+0x9a>
 8002080:	2200      	movs	r2, #0
 8002082:	60a2      	str	r2, [r4, #8]
 8002084:	6962      	ldr	r2, [r4, #20]
 8002086:	4252      	negs	r2, r2
 8002088:	61a2      	str	r2, [r4, #24]
 800208a:	6922      	ldr	r2, [r4, #16]
 800208c:	b942      	cbnz	r2, 80020a0 <__swsetup_r+0xa4>
 800208e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002092:	d1c5      	bne.n	8002020 <__swsetup_r+0x24>
 8002094:	bd38      	pop	{r3, r4, r5, pc}
 8002096:	0799      	lsls	r1, r3, #30
 8002098:	bf58      	it	pl
 800209a:	6962      	ldrpl	r2, [r4, #20]
 800209c:	60a2      	str	r2, [r4, #8]
 800209e:	e7f4      	b.n	800208a <__swsetup_r+0x8e>
 80020a0:	2000      	movs	r0, #0
 80020a2:	e7f7      	b.n	8002094 <__swsetup_r+0x98>
 80020a4:	2000000c 	.word	0x2000000c

080020a8 <_fstat_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	4d07      	ldr	r5, [pc, #28]	@ (80020c8 <_fstat_r+0x20>)
 80020ac:	2300      	movs	r3, #0
 80020ae:	4604      	mov	r4, r0
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	602b      	str	r3, [r5, #0]
 80020b6:	f7fe ff69 	bl	8000f8c <_fstat>
 80020ba:	1c43      	adds	r3, r0, #1
 80020bc:	d102      	bne.n	80020c4 <_fstat_r+0x1c>
 80020be:	682b      	ldr	r3, [r5, #0]
 80020c0:	b103      	cbz	r3, 80020c4 <_fstat_r+0x1c>
 80020c2:	6023      	str	r3, [r4, #0]
 80020c4:	bd38      	pop	{r3, r4, r5, pc}
 80020c6:	bf00      	nop
 80020c8:	200002b8 	.word	0x200002b8

080020cc <_isatty_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	4d06      	ldr	r5, [pc, #24]	@ (80020e8 <_isatty_r+0x1c>)
 80020d0:	2300      	movs	r3, #0
 80020d2:	4604      	mov	r4, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	602b      	str	r3, [r5, #0]
 80020d8:	f7fe ff68 	bl	8000fac <_isatty>
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	d102      	bne.n	80020e6 <_isatty_r+0x1a>
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	b103      	cbz	r3, 80020e6 <_isatty_r+0x1a>
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	bd38      	pop	{r3, r4, r5, pc}
 80020e8:	200002b8 	.word	0x200002b8

080020ec <_sbrk_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4d06      	ldr	r5, [pc, #24]	@ (8002108 <_sbrk_r+0x1c>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	4604      	mov	r4, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	f000 f808 	bl	800210c <_sbrk>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d102      	bne.n	8002106 <_sbrk_r+0x1a>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	b103      	cbz	r3, 8002106 <_sbrk_r+0x1a>
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	200002b8 	.word	0x200002b8

0800210c <_sbrk>:
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <_sbrk+0x14>)
 800210e:	6811      	ldr	r1, [r2, #0]
 8002110:	4603      	mov	r3, r0
 8002112:	b909      	cbnz	r1, 8002118 <_sbrk+0xc>
 8002114:	4903      	ldr	r1, [pc, #12]	@ (8002124 <_sbrk+0x18>)
 8002116:	6011      	str	r1, [r2, #0]
 8002118:	6810      	ldr	r0, [r2, #0]
 800211a:	4403      	add	r3, r0
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4770      	bx	lr
 8002120:	200002c8 	.word	0x200002c8
 8002124:	200002d0 	.word	0x200002d0

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
