
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002854  08002854  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002854  08002854  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002854  08002854  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800285c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000090  080028ec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080028ec  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a08e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017af  00000000  00000000  0002a14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044a4  00000000  00000000  0002cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dba  00000000  00000000  00030fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b1c8  00000000  00000000  00039d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00094f2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  00094f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080026fc 	.word	0x080026fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080026fc 	.word	0x080026fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e07c      	b.n	8000396 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800029c:	2201      	movs	r2, #1
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	fa02 f303 	lsl.w	r3, r2, r3
 80002a4:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	693a      	ldr	r2, [r7, #16]
 80002ac:	4013      	ands	r3, r2
 80002ae:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d16b      	bne.n	8000390 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d003      	beq.n	80002c8 <GPIO_Init+0x48>
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	791b      	ldrb	r3, [r3, #4]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d134      	bne.n	8000332 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	795b      	ldrb	r3, [r3, #5]
 80002e6:	4619      	mov	r1, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	431a      	orrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	889b      	ldrh	r3, [r3, #4]
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	4619      	mov	r1, r3
 8000302:	2301      	movs	r3, #1
 8000304:	408b      	lsls	r3, r1
 8000306:	b29b      	uxth	r3, r3
 8000308:	43db      	mvns	r3, r3
 800030a:	b29b      	uxth	r3, r3
 800030c:	4013      	ands	r3, r2
 800030e:	b29a      	uxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	889b      	ldrh	r3, [r3, #4]
 8000318:	b29a      	uxth	r2, r3
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	4619      	mov	r1, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	b29b      	uxth	r3, r3
 8000324:	fa01 f303 	lsl.w	r3, r1, r3
 8000328:	b29b      	uxth	r3, r3
 800032a:	4313      	orrs	r3, r2
 800032c:	b29a      	uxth	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	2103      	movs	r1, #3
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	401a      	ands	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	4619      	mov	r1, r3
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29b      	uxth	r3, r3
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	79db      	ldrb	r3, [r3, #7]
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	f67f af7f 	bls.w	800029c <GPIO_Init+0x1c>
    }
  }
}
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	371c      	adds	r7, #28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2202      	movs	r2, #2
 80003c6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2200      	movs	r2, #0
 80003cc:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	71da      	strb	r2, [r3, #7]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	8a1b      	ldrh	r3, [r3, #16]
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	887b      	ldrh	r3, [r7, #2]
 80003f8:	4013      	ands	r3, r2
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000400:	2301      	movs	r3, #1
 8000402:	73fb      	strb	r3, [r7, #15]
 8000404:	e001      	b.n	800040a <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000406:	2300      	movs	r3, #0
 8000408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800040a:	7bfb      	ldrb	r3, [r7, #15]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000418:	b480      	push	{r7}
 800041a:	b08b      	sub	sp, #44	; 0x2c
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	2300      	movs	r3, #0
 8000436:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000440:	4b91      	ldr	r3, [pc, #580]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f003 030c 	and.w	r3, r3, #12
 8000448:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	2b08      	cmp	r3, #8
 800044e:	d011      	beq.n	8000474 <RCC_GetClocksFreq+0x5c>
 8000450:	6a3b      	ldr	r3, [r7, #32]
 8000452:	2b08      	cmp	r3, #8
 8000454:	d837      	bhi.n	80004c6 <RCC_GetClocksFreq+0xae>
 8000456:	6a3b      	ldr	r3, [r7, #32]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d003      	beq.n	8000464 <RCC_GetClocksFreq+0x4c>
 800045c:	6a3b      	ldr	r3, [r7, #32]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d004      	beq.n	800046c <RCC_GetClocksFreq+0x54>
 8000462:	e030      	b.n	80004c6 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a89      	ldr	r2, [pc, #548]	; (800068c <RCC_GetClocksFreq+0x274>)
 8000468:	601a      	str	r2, [r3, #0]
      break;
 800046a:	e030      	b.n	80004ce <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a87      	ldr	r2, [pc, #540]	; (800068c <RCC_GetClocksFreq+0x274>)
 8000470:	601a      	str	r2, [r3, #0]
      break;
 8000472:	e02c      	b.n	80004ce <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000474:	4b84      	ldr	r3, [pc, #528]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800047c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800047e:	4b82      	ldr	r3, [pc, #520]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000486:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	0c9b      	lsrs	r3, r3, #18
 800048c:	3302      	adds	r3, #2
 800048e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d105      	bne.n	80004a2 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	4a7d      	ldr	r2, [pc, #500]	; (8000690 <RCC_GetClocksFreq+0x278>)
 800049a:	fb02 f303 	mul.w	r3, r2, r3
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
 80004a0:	e00d      	b.n	80004be <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80004a2:	4b79      	ldr	r3, [pc, #484]	; (8000688 <RCC_GetClocksFreq+0x270>)
 80004a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	3301      	adds	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80004ae:	4a77      	ldr	r2, [pc, #476]	; (800068c <RCC_GetClocksFreq+0x274>)
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	fb02 f303 	mul.w	r3, r2, r3
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004c2:	601a      	str	r2, [r3, #0]
      break;
 80004c4:	e003      	b.n	80004ce <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a70      	ldr	r2, [pc, #448]	; (800068c <RCC_GetClocksFreq+0x274>)
 80004ca:	601a      	str	r2, [r3, #0]
      break;
 80004cc:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004ce:	4b6e      	ldr	r3, [pc, #440]	; (8000688 <RCC_GetClocksFreq+0x270>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004d6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80004d8:	6a3b      	ldr	r3, [r7, #32]
 80004da:	091b      	lsrs	r3, r3, #4
 80004dc:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80004de:	4a6d      	ldr	r2, [pc, #436]	; (8000694 <RCC_GetClocksFreq+0x27c>)
 80004e0:	6a3b      	ldr	r3, [r7, #32]
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	40da      	lsrs	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80004f6:	4b64      	ldr	r3, [pc, #400]	; (8000688 <RCC_GetClocksFreq+0x270>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004fe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000500:	6a3b      	ldr	r3, [r7, #32]
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000506:	4a63      	ldr	r2, [pc, #396]	; (8000694 <RCC_GetClocksFreq+0x27c>)
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	40da      	lsrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800051e:	4b5a      	ldr	r3, [pc, #360]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000526:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000528:	6a3b      	ldr	r3, [r7, #32]
 800052a:	0adb      	lsrs	r3, r3, #11
 800052c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 800052e:	4a59      	ldr	r2, [pc, #356]	; (8000694 <RCC_GetClocksFreq+0x27c>)
 8000530:	6a3b      	ldr	r3, [r7, #32]
 8000532:	4413      	add	r3, r2
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	40da      	lsrs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000546:	4b50      	ldr	r3, [pc, #320]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800054e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	091b      	lsrs	r3, r3, #4
 8000554:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000556:	4a50      	ldr	r2, [pc, #320]	; (8000698 <RCC_GetClocksFreq+0x280>)
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	b29b      	uxth	r3, r3
 8000560:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	f003 0310 	and.w	r3, r3, #16
 8000568:	2b00      	cmp	r3, #0
 800056a:	d006      	beq.n	800057a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800056c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	fbb2 f2f3 	udiv	r2, r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	611a      	str	r2, [r3, #16]
 8000578:	e003      	b.n	8000582 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000582:	4b41      	ldr	r3, [pc, #260]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000586:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800058a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800058c:	6a3b      	ldr	r3, [r7, #32]
 800058e:	0a5b      	lsrs	r3, r3, #9
 8000590:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000592:	4a41      	ldr	r2, [pc, #260]	; (8000698 <RCC_GetClocksFreq+0x280>)
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059a:	b29b      	uxth	r3, r3
 800059c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	f003 0310 	and.w	r3, r3, #16
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d006      	beq.n	80005b6 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80005a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	e003      	b.n	80005be <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <RCC_GetClocksFreq+0x270>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0310 	and.w	r3, r3, #16
 80005c6:	2b10      	cmp	r3, #16
 80005c8:	d003      	beq.n	80005d2 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a2f      	ldr	r2, [pc, #188]	; (800068c <RCC_GetClocksFreq+0x274>)
 80005ce:	619a      	str	r2, [r3, #24]
 80005d0:	e003      	b.n	80005da <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <RCC_GetClocksFreq+0x270>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	2b20      	cmp	r3, #32
 80005e4:	d003      	beq.n	80005ee <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <RCC_GetClocksFreq+0x274>)
 80005ea:	61da      	str	r2, [r3, #28]
 80005ec:	e003      	b.n	80005f6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <RCC_GetClocksFreq+0x270>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000602:	d10d      	bne.n	8000620 <RCC_GetClocksFreq+0x208>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800060a:	429a      	cmp	r2, r3
 800060c:	d108      	bne.n	8000620 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	d104      	bne.n	8000620 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	005a      	lsls	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	621a      	str	r2, [r3, #32]
 800061e:	e003      	b.n	8000628 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <RCC_GetClocksFreq+0x270>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000634:	d10d      	bne.n	8000652 <RCC_GetClocksFreq+0x23a>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800063c:	429a      	cmp	r2, r3
 800063e:	d108      	bne.n	8000652 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d104      	bne.n	8000652 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	005a      	lsls	r2, r3, #1
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
 8000650:	e003      	b.n	800065a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <RCC_GetClocksFreq+0x270>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d104      	bne.n	8000670 <RCC_GetClocksFreq+0x258>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68da      	ldr	r2, [r3, #12]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
 800066e:	e029      	b.n	80006c4 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <RCC_GetClocksFreq+0x270>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10f      	bne.n	800069c <RCC_GetClocksFreq+0x284>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
 8000684:	e01e      	b.n	80006c4 <RCC_GetClocksFreq+0x2ac>
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	007a1200 	.word	0x007a1200
 8000690:	003d0900 	.word	0x003d0900
 8000694:	20000000 	.word	0x20000000
 8000698:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800069c:	4b66      	ldr	r3, [pc, #408]	; (8000838 <RCC_GetClocksFreq+0x420>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d104      	bne.n	80006b2 <RCC_GetClocksFreq+0x29a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
 80006b0:	e008      	b.n	80006c4 <RCC_GetClocksFreq+0x2ac>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80006b2:	4b61      	ldr	r3, [pc, #388]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d102      	bne.n	80006c4 <RCC_GetClocksFreq+0x2ac>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a5e      	ldr	r2, [pc, #376]	; (800083c <RCC_GetClocksFreq+0x424>)
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80006c4:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <RCC_GetClocksFreq+0x2c2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80006d8:	e021      	b.n	800071e <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80006e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e6:	d104      	bne.n	80006f2 <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f0:	e015      	b.n	800071e <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80006fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006fe:	d104      	bne.n	800070a <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
 8000708:	e009      	b.n	800071e <RCC_GetClocksFreq+0x306>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <RCC_GetClocksFreq+0x420>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000716:	d102      	bne.n	800071e <RCC_GetClocksFreq+0x306>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a48      	ldr	r2, [pc, #288]	; (800083c <RCC_GetClocksFreq+0x424>)
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 800071e:	4b46      	ldr	r3, [pc, #280]	; (8000838 <RCC_GetClocksFreq+0x420>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d104      	bne.n	8000734 <RCC_GetClocksFreq+0x31c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	631a      	str	r2, [r3, #48]	; 0x30
 8000732:	e021      	b.n	8000778 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000734:	4b40      	ldr	r3, [pc, #256]	; (8000838 <RCC_GetClocksFreq+0x420>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800073c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000740:	d104      	bne.n	800074c <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
 800074a:	e015      	b.n	8000778 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800074c:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <RCC_GetClocksFreq+0x420>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000754:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000758:	d104      	bne.n	8000764 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000760:	631a      	str	r2, [r3, #48]	; 0x30
 8000762:	e009      	b.n	8000778 <RCC_GetClocksFreq+0x360>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <RCC_GetClocksFreq+0x420>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800076c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000770:	d102      	bne.n	8000778 <RCC_GetClocksFreq+0x360>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a31      	ldr	r2, [pc, #196]	; (800083c <RCC_GetClocksFreq+0x424>)
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <RCC_GetClocksFreq+0x420>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000780:	2b00      	cmp	r3, #0
 8000782:	d104      	bne.n	800078e <RCC_GetClocksFreq+0x376>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	689a      	ldr	r2, [r3, #8]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
 800078c:	e021      	b.n	80007d2 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <RCC_GetClocksFreq+0x420>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800079a:	d104      	bne.n	80007a6 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
 80007a4:	e015      	b.n	80007d2 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80007b2:	d104      	bne.n	80007be <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
 80007bc:	e009      	b.n	80007d2 <RCC_GetClocksFreq+0x3ba>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80007c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80007ca:	d102      	bne.n	80007d2 <RCC_GetClocksFreq+0x3ba>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <RCC_GetClocksFreq+0x424>)
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d104      	bne.n	80007e8 <RCC_GetClocksFreq+0x3d0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80007e6:	e021      	b.n	800082c <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <RCC_GetClocksFreq+0x420>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80007f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007f4:	d104      	bne.n	8000800 <RCC_GetClocksFreq+0x3e8>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007fe:	e015      	b.n	800082c <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <RCC_GetClocksFreq+0x420>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800080c:	d104      	bne.n	8000818 <RCC_GetClocksFreq+0x400>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000814:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000816:	e009      	b.n	800082c <RCC_GetClocksFreq+0x414>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <RCC_GetClocksFreq+0x420>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000820:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000824:	d102      	bne.n	800082c <RCC_GetClocksFreq+0x414>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <RCC_GetClocksFreq+0x424>)
 800082a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800082c:	bf00      	nop
 800082e:	372c      	adds	r7, #44	; 0x2c
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000
 800083c:	007a1200 	.word	0x007a1200

08000840 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <RCC_AHBPeriphClockCmd+0x3c>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4909      	ldr	r1, [pc, #36]	; (800087c <RCC_AHBPeriphClockCmd+0x3c>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4313      	orrs	r3, r2
 800085c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800085e:	e006      	b.n	800086e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <RCC_AHBPeriphClockCmd+0x3c>)
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	43db      	mvns	r3, r3
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <RCC_AHBPeriphClockCmd+0x3c>)
 800086a:	4013      	ands	r3, r2
 800086c:	614b      	str	r3, [r1, #20]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	43db      	mvns	r3, r3
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	611a      	str	r2, [r3, #16]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80008fa:	2201      	movs	r2, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d103      	bne.n	8000912 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	e005      	b.n	800091e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d102      	bne.n	800091e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	3308      	adds	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	6819      	ldr	r1, [r3, #0]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000930:	e006      	b.n	8000940 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	43da      	mvns	r2, r3
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	400a      	ands	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	bf00      	nop
 8000942:	3724      	adds	r7, #36	; 0x24
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	4013      	ands	r3, r2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e001      	b.n	8000970 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800097e:	b480      	push	{r7}
 8000980:	b087      	sub	sp, #28
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80009a8:	2201      	movs	r2, #1
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	4013      	ands	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e00d      	b.n	80009e0 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d105      	bne.n	80009d6 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4013      	ands	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e004      	b.n	80009e0 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	4013      	ands	r3, r2
 80009de:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	0c1b      	lsrs	r3, r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009e6:	2201      	movs	r2, #1
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <USART_GetITStatus+0x8e>
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	74fb      	strb	r3, [r7, #19]
 8000a0a:	e001      	b.n	8000a10 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 031f 	and.w	r3, r3, #31
 8000a30:	2201      	movs	r2, #1
 8000a32:	fa02 f103 	lsl.w	r1, r2, r3
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <NVIC_EnableIRQ+0x30>)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	095b      	lsrs	r3, r3, #5
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <uart_put_char+0x30>)
 8000a66:	f7ff ff1d 	bl	80008a4 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000a6a:	bf00      	nop
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <uart_put_char+0x30>)
 8000a70:	f7ff ff6c 	bl	800094c <USART_GetFlagStatus>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f8      	beq.n	8000a6c <uart_put_char+0x18>
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40004400 	.word	0x40004400

08000a88 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e012      	b.n	8000ac2 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d102      	bne.n	8000aae <_write_r+0x26>
            uart_put_char('\r');
 8000aa8:	200d      	movs	r0, #13
 8000aaa:	f7ff ffd3 	bl	8000a54 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffcc 	bl	8000a54 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbe8      	blt.n	8000a9c <_write_r+0x14>
    }

    return len;
 8000aca:	683b      	ldr	r3, [r7, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000ad8:	4915      	ldr	r1, [pc, #84]	; (8000b30 <USART2_IRQHandler+0x5c>)
 8000ada:	4816      	ldr	r0, [pc, #88]	; (8000b34 <USART2_IRQHandler+0x60>)
 8000adc:	f7ff ff4f 	bl	800097e <USART_GetITStatus>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d021      	beq.n	8000b2a <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <USART2_IRQHandler+0x60>)
 8000ae8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000aea:	b299      	uxth	r1, r3
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <USART2_IRQHandler+0x64>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	b2d0      	uxtb	r0, r2
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <USART2_IRQHandler+0x64>)
 8000af8:	7010      	strb	r0, [r2, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	b2c9      	uxtb	r1, r1
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <USART2_IRQHandler+0x68>)
 8000b00:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <USART2_IRQHandler+0x6c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d107      	bne.n	8000b1c <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <USART2_IRQHandler+0x70>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <USART2_IRQHandler+0x70>)
 8000b18:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000b1a:	e006      	b.n	8000b2a <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <USART2_IRQHandler+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <USART2_IRQHandler+0x6c>)
 8000b28:	701a      	strb	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	00050105 	.word	0x00050105
 8000b34:	40004400 	.word	0x40004400
 8000b38:	200001ac 	.word	0x200001ac
 8000b3c:	200000ac 	.word	0x200000ac
 8000b40:	200001ae 	.word	0x200001ae
 8000b44:	200001ad 	.word	0x200001ad

08000b48 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	; 0x50
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000b50:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <uart_init+0x224>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 ffeb 	bl	8001b34 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000b5e:	4b83      	ldr	r3, [pc, #524]	; (8000d6c <uart_init+0x224>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ffe4 	bl	8001b34 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000b6c:	4b80      	ldr	r3, [pc, #512]	; (8000d70 <uart_init+0x228>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4a7f      	ldr	r2, [pc, #508]	; (8000d70 <uart_init+0x228>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000b78:	4b7d      	ldr	r3, [pc, #500]	; (8000d70 <uart_init+0x228>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a7c      	ldr	r2, [pc, #496]	; (8000d70 <uart_init+0x228>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000b84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b92:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000b94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ba2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000ba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000bb2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000bb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bbe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bc2:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000bc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bd2:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bde:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000be2:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000be8:	889b      	ldrh	r3, [r3, #4]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf0:	f023 030c 	bic.w	r3, r3, #12
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000bf8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c00:	8892      	ldrh	r2, [r2, #4]
 8000c02:	b292      	uxth	r2, r2
 8000c04:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000c06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c14:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c20:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c24:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000c26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c34:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c40:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000c44:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000c46:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <uart_init+0x22c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <uart_init+0x22c>)
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000c52:	4b48      	ldr	r3, [pc, #288]	; (8000d74 <uart_init+0x22c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <uart_init+0x22c>)
 8000c58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c5c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000c5e:	4b45      	ldr	r3, [pc, #276]	; (8000d74 <uart_init+0x22c>)
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <uart_init+0x22c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <uart_init+0x22c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a42      	ldr	r2, [pc, #264]	; (8000d74 <uart_init+0x22c>)
 8000c6c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c70:	f023 030c 	bic.w	r3, r3, #12
 8000c74:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <uart_init+0x22c>)
 8000c78:	4a3e      	ldr	r2, [pc, #248]	; (8000d74 <uart_init+0x22c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <uart_init+0x22c>)
 8000c80:	4a3c      	ldr	r2, [pc, #240]	; (8000d74 <uart_init+0x22c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000c86:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <uart_init+0x22c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a3a      	ldr	r2, [pc, #232]	; (8000d74 <uart_init+0x22c>)
 8000c8c:	f043 030c 	orr.w	r3, r3, #12
 8000c90:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000c92:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <uart_init+0x22c>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4a37      	ldr	r2, [pc, #220]	; (8000d74 <uart_init+0x22c>)
 8000c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c9c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <uart_init+0x22c>)
 8000ca0:	4a34      	ldr	r2, [pc, #208]	; (8000d74 <uart_init+0x22c>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000caa:	2300      	movs	r3, #0
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
 8000cae:	2300      	movs	r3, #0
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fbae 	bl	8000418 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <uart_init+0x22c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d010      	beq.n	8000cee <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cce:	005a      	lsls	r2, r3, #1
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	fb01 f202 	mul.w	r2, r1, r2
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cec:	e00d      	b.n	8000d0a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	fb01 f202 	mul.w	r2, r1, r2
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d302      	bcc.n	8000d1a <uart_init+0x1d2>
        divider++;
 8000d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d16:	3301      	adds	r3, #1
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <uart_init+0x22c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00b      	beq.n	8000d3e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d32:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000d36:	4013      	ands	r3, r2
 8000d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <uart_init+0x22c>)
 8000d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d42:	b292      	uxth	r2, r2
 8000d44:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <uart_init+0x22c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <uart_init+0x22c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000d52:	2201      	movs	r2, #1
 8000d54:	4908      	ldr	r1, [pc, #32]	; (8000d78 <uart_init+0x230>)
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <uart_init+0x22c>)
 8000d58:	f7ff fdb6 	bl	80008c8 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000d5c:	2026      	movs	r0, #38	; 0x26
 8000d5e:	f7ff fe5f 	bl	8000a20 <NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	; 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000002c 	.word	0x2000002c
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40004400 	.word	0x40004400
 8000d78:	00050105 	.word	0x00050105

08000d7c <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8000d82:	2101      	movs	r1, #1
 8000d84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d88:	f7ff fd5a 	bl	8000840 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d92:	f7ff fd55 	bl	8000840 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d9c:	f7ff fd50 	bl	8000840 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb02 	bl	80003ac <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000da8:	2300      	movs	r3, #0
 8000daa:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000dac:	2302      	movs	r3, #2
 8000dae:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8000db0:	2310      	movs	r3, #16
 8000db2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f7ff fa60 	bl	8000280 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff faf2 	bl	80003ac <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8000dd0:	2321      	movs	r3, #33	; 0x21
 8000dd2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <initJoystick+0x88>)
 8000dda:	f7ff fa51 	bl	8000280 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fae3 	bl	80003ac <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8000de6:	2300      	movs	r3, #0
 8000de8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000dea:	2302      	movs	r3, #2
 8000dec:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000dee:	2303      	movs	r3, #3
 8000df0:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <initJoystick+0x8c>)
 8000df8:	f7ff fa42 	bl	8000280 <GPIO_Init>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	48000400 	.word	0x48000400
 8000e08:	48000800 	.word	0x48000800

08000e0c <readJoystick>:


int8_t readJoystick(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8000e16:	2110      	movs	r1, #16
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f7ff fae0 	bl	80003e0 <GPIO_ReadInputDataBit>
 8000e20:	4603      	mov	r3, r0
 8000e22:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8000e24:	2120      	movs	r1, #32
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <readJoystick+0xa8>)
 8000e28:	f7ff fada 	bl	80003e0 <GPIO_ReadInputDataBit>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4820      	ldr	r0, [pc, #128]	; (8000eb4 <readJoystick+0xa8>)
 8000e34:	f7ff fad4 	bl	80003e0 <GPIO_ReadInputDataBit>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <readJoystick+0xac>)
 8000e40:	f7ff face 	bl	80003e0 <GPIO_ReadInputDataBit>
 8000e44:	4603      	mov	r3, r0
 8000e46:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <readJoystick+0xac>)
 8000e4c:	f7ff fac8 	bl	80003e0 <GPIO_ReadInputDataBit>
 8000e50:	4603      	mov	r3, r0
 8000e52:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 8000e54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <readJoystick+0x56>
		bit = Up;
 8000e5c:	79bb      	ldrb	r3, [r7, #6]
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	e022      	b.n	8000ea8 <readJoystick+0x9c>
	} else if (Down == 1){
 8000e62:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d104      	bne.n	8000e74 <readJoystick+0x68>
		bit = Down << 1;
 8000e6a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	e019      	b.n	8000ea8 <readJoystick+0x9c>
	} else if (Left == 1){
 8000e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d104      	bne.n	8000e86 <readJoystick+0x7a>
		bit = Left << 2;
 8000e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	e010      	b.n	8000ea8 <readJoystick+0x9c>
	} else if (Right == 1){
 8000e86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d104      	bne.n	8000e98 <readJoystick+0x8c>
		bit = Right << 3;
 8000e8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	e007      	b.n	8000ea8 <readJoystick+0x9c>
	} else if (Center == 1){
 8000e98:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d103      	bne.n	8000ea8 <readJoystick+0x9c>
		bit = Center << 4;
 8000ea0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	48000800 	.word	0x48000800

08000ebc <main>:
#include "led.h"
#include "timer.h"
#include "window.h"

int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8000ec2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000ec6:	f7ff fe3f 	bl	8000b48 <uart_init>

	// --------------- TIMER ---------------
	initStopWatchWindow();
 8000eca:	f000 fa75 	bl	80013b8 <initStopWatchWindow>
	printf("\033[3;1H");	// moves cursor to row 3 column 1
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <main+0x50>)
 8000ed0:	f000 fd7c 	bl	80019cc <iprintf>
	printf("Time since start:  \n");
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <main+0x54>)
 8000ed6:	f000 fe15 	bl	8001b04 <puts>
	printf("Split time 1:      \n");
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <main+0x58>)
 8000edc:	f000 fe12 	bl	8001b04 <puts>
	printf("Split time 2:      ");
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <main+0x5c>)
 8000ee2:	f000 fd73 	bl	80019cc <iprintf>

	initTimer();
 8000ee6:	f000 f95f 	bl	80011a8 <initTimer>
	initJoystick();
 8000eea:	f7ff ff47 	bl	8000d7c <initJoystick>

	uint8_t flag = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]

	TIM2_IRQHandler();
 8000ef2:	f000 f989 	bl	8001208 <TIM2_IRQHandler>

	while(1) {
		stopWatch(&flag);
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9d9 	bl	80012b0 <stopWatch>

		printf("\033[3;20H");	// moves cursor to row 3 column 20
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <main+0x60>)
 8000f00:	f000 fd64 	bl	80019cc <iprintf>
		printTime();
 8000f04:	f000 fa22 	bl	800134c <printTime>
		stopWatch(&flag);
 8000f08:	e7f5      	b.n	8000ef6 <main+0x3a>
 8000f0a:	bf00      	nop
 8000f0c:	08002714 	.word	0x08002714
 8000f10:	0800271c 	.word	0x0800271c
 8000f14:	08002730 	.word	0x08002730
 8000f18:	08002744 	.word	0x08002744
 8000f1c:	08002758 	.word	0x08002758

08000f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
	}

return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return -1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f82:	605a      	str	r2, [r3, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_isatty>:

int _isatty(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <SystemInit+0x84>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <SystemInit+0x84>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <SystemInit+0x88>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	; (800104c <SystemInit+0x88>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <SystemInit+0x88>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	4918      	ldr	r1, [pc, #96]	; (800104c <SystemInit+0x88>)
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <SystemInit+0x8c>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <SystemInit+0x88>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a15      	ldr	r2, [pc, #84]	; (800104c <SystemInit+0x88>)
 8000ff6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <SystemInit+0x88>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SystemInit+0x88>)
 8001006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <SystemInit+0x88>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <SystemInit+0x88>)
 8001012:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001016:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <SystemInit+0x88>)
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <SystemInit+0x88>)
 800101e:	f023 030f 	bic.w	r3, r3, #15
 8001022:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <SystemInit+0x88>)
 8001026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001028:	4908      	ldr	r1, [pc, #32]	; (800104c <SystemInit+0x88>)
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <SystemInit+0x90>)
 800102c:	4013      	ands	r3, r2
 800102e:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x88>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001036:	f000 f80f 	bl	8001058 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800103a:	4b03      	ldr	r3, [pc, #12]	; (8001048 <SystemInit+0x84>)
 800103c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001040:	609a      	str	r2, [r3, #8]
#endif  
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	40021000 	.word	0x40021000
 8001050:	f87fc00c 	.word	0xf87fc00c
 8001054:	ff00fccc 	.word	0xff00fccc

08001058 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <SetSysClock+0x8c>)
 800105e:	2212      	movs	r2, #18
 8001060:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <SetSysClock+0x90>)
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <SetSysClock+0x90>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <SetSysClock+0x90>)
 800106c:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <SetSysClock+0x90>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <SetSysClock+0x90>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <SetSysClock+0x90>)
 8001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <SetSysClock+0x90>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <SetSysClock+0x90>)
 8001084:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001088:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <SetSysClock+0x90>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <SetSysClock+0x90>)
 8001090:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001094:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <SetSysClock+0x90>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <SetSysClock+0x90>)
 800109c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80010a2:	bf00      	nop
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SetSysClock+0x90>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f9      	beq.n	80010a4 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <SetSysClock+0x90>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <SetSysClock+0x90>)
 80010b6:	f023 0303 	bic.w	r3, r3, #3
 80010ba:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <SetSysClock+0x90>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <SetSysClock+0x90>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80010c8:	bf00      	nop
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <SetSysClock+0x90>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d1f9      	bne.n	80010ca <SetSysClock+0x72>
  {
  }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40022000 	.word	0x40022000
 80010e8:	40021000 	.word	0x40021000

080010ec <NVIC_EnableIRQ>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	2201      	movs	r2, #1
 80010fe:	fa02 f103 	lsl.w	r1, r2, r3
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <NVIC_EnableIRQ+0x30>)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	095b      	lsrs	r3, r3, #5
 800110a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	2201      	movs	r2, #1
 8001132:	fa02 f103 	lsl.w	r1, r2, r3
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <NVIC_DisableIRQ+0x30>)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	3320      	adds	r3, #32
 8001140:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da0b      	bge.n	8001180 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <NVIC_SetPriority+0x4c>)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	3b04      	subs	r3, #4
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800117e:	e009      	b.n	8001194 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <NVIC_SetPriority+0x50>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <initTimer>:
#include "timer.h"

void initTimer() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM2, ENABLE);
	*/
	// -------------------------------------------------

	// Set reload and prescale value for 1/100 s (100 Hz) interrupt
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;		// enable clock line to timer 2
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <initTimer+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <initTimer+0x5c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0001;		// configure timer 2
 80011ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011be:	2201      	movs	r2, #1
 80011c0:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 0x03FF;		// set reload value
 80011c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 0x0270;		// set prescale value
 80011cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80011d4:	851a      	strh	r2, [r3, #40]	; 0x28

	TIM2->DIER |= 0x0001;	// enable timer 2 interrupts
 80011d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	60d3      	str	r3, [r2, #12]

	uint8_t priority = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4619      	mov	r1, r3
 80011ee:	201c      	movs	r0, #28
 80011f0:	f7ff ffb0 	bl	8001154 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 80011f4:	201c      	movs	r0, #28
 80011f6:	f7ff ff79 	bl	80010ec <NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800120e:	78db      	ldrb	r3, [r3, #3]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3301      	adds	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001218:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800121c:	78db      	ldrb	r3, [r3, #3]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d10a      	bne.n	800123a <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001236:	709a      	strb	r2, [r3, #2]
 8001238:	e030      	b.n	800129c <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b3c      	cmp	r3, #60	; 0x3c
 8001242:	d10a      	bne.n	800125a <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001256:	705a      	strb	r2, [r3, #1]
 8001258:	e020      	b.n	800129c <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b3c      	cmp	r3, #60	; 0x3c
 8001262:	d10a      	bne.n	800127a <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e010      	b.n	800129c <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b18      	cmp	r3, #24
 8001282:	d10b      	bne.n	800129c <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <TIM2_IRQHandler+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <TIM2_IRQHandler+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 800129c:	2101      	movs	r1, #1
 800129e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012a2:	f7ff faed 	bl	8000880 <TIM_ClearITPendingBit>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001bc 	.word	0x200001bc

080012b0 <stopWatch>:

void stopWatch(uint8_t *flag) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	uint8_t state = readJoystick();				// read joystick state
 80012b8:	f7ff fda8 	bl	8000e0c <readJoystick>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]

	// Joystick state determines action
	if (state == 2) {			// DOWN = Stop clock and set time to 00:00
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d112      	bne.n	80012ec <stopWatch+0x3c>
		NVIC_DisableIRQ(TIM2_IRQn);				// disable interrupt
 80012c6:	201c      	movs	r0, #28
 80012c8:	f7ff ff2a 	bl	8001120 <NVIC_DisableIRQ>
		*flag = 0;								// reset flag
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
		timeData.hundredths = 0;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <stopWatch+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <stopWatch+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <stopWatch+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <stopWatch+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		} else {
			NVIC_EnableIRQ(TIM2_IRQn);	// enable interrupt
			*flag = 1;
		}
	}
}
 80012ea:	e025      	b.n	8001338 <stopWatch+0x88>
	} else if (state == 4) {	// LEFT = Split time 1
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d105      	bne.n	80012fe <stopWatch+0x4e>
		printf("\033[4;20H");	// moves cursor to row 4 column 20
 80012f2:	4814      	ldr	r0, [pc, #80]	; (8001344 <stopWatch+0x94>)
 80012f4:	f000 fb6a 	bl	80019cc <iprintf>
		printTime();
 80012f8:	f000 f828 	bl	800134c <printTime>
}
 80012fc:	e01c      	b.n	8001338 <stopWatch+0x88>
	} else if (state == 8) {	// RIGHT = Split time 2
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d105      	bne.n	8001310 <stopWatch+0x60>
		printf("\033[5;20H");	// moves cursor to row 5 column 20
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <stopWatch+0x98>)
 8001306:	f000 fb61 	bl	80019cc <iprintf>
		printTime();
 800130a:	f000 f81f 	bl	800134c <printTime>
}
 800130e:	e013      	b.n	8001338 <stopWatch+0x88>
	} else if (state == 16) {	// CENTER = Start/stop
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d110      	bne.n	8001338 <stopWatch+0x88>
		if (*flag) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <stopWatch+0x7c>
			NVIC_DisableIRQ(TIM2_IRQn);	// disable interrupt
 800131e:	201c      	movs	r0, #28
 8001320:	f7ff fefe 	bl	8001120 <NVIC_DisableIRQ>
			*flag = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	e005      	b.n	8001338 <stopWatch+0x88>
			NVIC_EnableIRQ(TIM2_IRQn);	// enable interrupt
 800132c:	201c      	movs	r0, #28
 800132e:	f7ff fedd 	bl	80010ec <NVIC_EnableIRQ>
			*flag = 1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001bc 	.word	0x200001bc
 8001344:	08002760 	.word	0x08002760
 8001348:	08002768 	.word	0x08002768

0800134c <printTime>:

void printTime() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af02      	add	r7, sp, #8
	printf("\033[0m");		// white text on black background
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <printTime+0x3c>)
 8001354:	f000 fb3a 	bl	80019cc <iprintf>
	printf("%d:%02d:%02d:%02d", timeData.hours, timeData.minutes, timeData.seconds, timeData.hundredths);
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <printTime+0x40>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <printTime+0x40>)
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <printTime+0x40>)
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <printTime+0x40>)
 8001372:	78db      	ldrb	r3, [r3, #3]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <printTime+0x44>)
 800137c:	f000 fb26 	bl	80019cc <iprintf>
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	08002770 	.word	0x08002770
 800138c:	200001bc 	.word	0x200001bc
 8001390:	08002778 	.word	0x08002778

08001394 <clrscr>:
#include "window.h"

void clrscr(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	/* ANSI escape sequence:
	 * 	\033[2J clears screen
	 * 	\033[H moves cursor to top left
	 */
	printf("\033[2J\033[H");
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <clrscr+0x1c>)
 800139a:	f000 fb17 	bl	80019cc <iprintf>
	fflush(stdout);
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <clrscr+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f92f 	bl	8001608 <fflush>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800278c 	.word	0x0800278c
 80013b4:	2000002c 	.word	0x2000002c

080013b8 <initStopWatchWindow>:

void initStopWatchWindow() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	clrscr();
 80013bc:	f7ff ffea 	bl	8001394 <clrscr>

	printf("\033[37;40m");	// set terminal to white text on black background
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <initStopWatchWindow+0x1c>)
 80013c2:	f000 fb03 	bl	80019cc <iprintf>

	// Print title bar of width 40
	printTitleBar("Stop watch", 40);
 80013c6:	2128      	movs	r1, #40	; 0x28
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <initStopWatchWindow+0x20>)
 80013ca:	f000 f807 	bl	80013dc <printTitleBar>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08002794 	.word	0x08002794
 80013d8:	080027a0 	.word	0x080027a0

080013dc <printTitleBar>:

void printTitleBar(const char *title, int width) {
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	int padding = width - strlen(title);
 80013e6:	683c      	ldr	r4, [r7, #0]
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7fe fef1 	bl	80001d0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	1ae3      	subs	r3, r4, r3
 80013f2:	60bb      	str	r3, [r7, #8]

	// Title with inverted colours
	printf("\033[7m %s", title);
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <printTitleBar+0x4c>)
 80013f8:	f000 fae8 	bl	80019cc <iprintf>

	// Fill rest with spaces
	for (int i = 0; i < padding - 1; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e005      	b.n	800140e <printTitleBar+0x32>
		printf(" ");
 8001402:	2020      	movs	r0, #32
 8001404:	f000 fafa 	bl	80019fc <putchar>
	for (int i = 0; i < padding - 1; i++) {
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf4      	blt.n	8001402 <printTitleBar+0x26>
	}

	// Reset the color (white text on black background)
	printf("\033[0m\n");
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <printTitleBar+0x50>)
 800141a:	f000 fb73 	bl	8001b04 <puts>
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	080027ac 	.word	0x080027ac
 800142c:	080027b4 	.word	0x080027b4

08001430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001432:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800145a:	f7ff fdb3 	bl	8000fc4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800145e:	f000 f9db 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7ff fd2b 	bl	8000ebc <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   r0, =_estack
 8001468:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001474:	0800285c 	.word	0x0800285c
  ldr r2, =_sbss
 8001478:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800147c:	200001d0 	.word	0x200001d0

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <__sflush_r>:
 8001484:	898a      	ldrh	r2, [r1, #12]
 8001486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148a:	4605      	mov	r5, r0
 800148c:	0710      	lsls	r0, r2, #28
 800148e:	460c      	mov	r4, r1
 8001490:	d458      	bmi.n	8001544 <__sflush_r+0xc0>
 8001492:	684b      	ldr	r3, [r1, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dc05      	bgt.n	80014a4 <__sflush_r+0x20>
 8001498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	dc02      	bgt.n	80014a4 <__sflush_r+0x20>
 800149e:	2000      	movs	r0, #0
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014a6:	2e00      	cmp	r6, #0
 80014a8:	d0f9      	beq.n	800149e <__sflush_r+0x1a>
 80014aa:	2300      	movs	r3, #0
 80014ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014b0:	682f      	ldr	r7, [r5, #0]
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	d032      	beq.n	800151c <__sflush_r+0x98>
 80014b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	075a      	lsls	r2, r3, #29
 80014bc:	d505      	bpl.n	80014ca <__sflush_r+0x46>
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	1ac0      	subs	r0, r0, r3
 80014c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014c4:	b10b      	cbz	r3, 80014ca <__sflush_r+0x46>
 80014c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c8:	1ac0      	subs	r0, r0, r3
 80014ca:	2300      	movs	r3, #0
 80014cc:	4602      	mov	r2, r0
 80014ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014d0:	6a21      	ldr	r1, [r4, #32]
 80014d2:	4628      	mov	r0, r5
 80014d4:	47b0      	blx	r6
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	d106      	bne.n	80014ea <__sflush_r+0x66>
 80014dc:	6829      	ldr	r1, [r5, #0]
 80014de:	291d      	cmp	r1, #29
 80014e0:	d82c      	bhi.n	800153c <__sflush_r+0xb8>
 80014e2:	4a2a      	ldr	r2, [pc, #168]	; (800158c <__sflush_r+0x108>)
 80014e4:	40ca      	lsrs	r2, r1
 80014e6:	07d6      	lsls	r6, r2, #31
 80014e8:	d528      	bpl.n	800153c <__sflush_r+0xb8>
 80014ea:	2200      	movs	r2, #0
 80014ec:	6062      	str	r2, [r4, #4]
 80014ee:	04d9      	lsls	r1, r3, #19
 80014f0:	6922      	ldr	r2, [r4, #16]
 80014f2:	6022      	str	r2, [r4, #0]
 80014f4:	d504      	bpl.n	8001500 <__sflush_r+0x7c>
 80014f6:	1c42      	adds	r2, r0, #1
 80014f8:	d101      	bne.n	80014fe <__sflush_r+0x7a>
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	b903      	cbnz	r3, 8001500 <__sflush_r+0x7c>
 80014fe:	6560      	str	r0, [r4, #84]	; 0x54
 8001500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001502:	602f      	str	r7, [r5, #0]
 8001504:	2900      	cmp	r1, #0
 8001506:	d0ca      	beq.n	800149e <__sflush_r+0x1a>
 8001508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800150c:	4299      	cmp	r1, r3
 800150e:	d002      	beq.n	8001516 <__sflush_r+0x92>
 8001510:	4628      	mov	r0, r5
 8001512:	f000 f9b1 	bl	8001878 <_free_r>
 8001516:	2000      	movs	r0, #0
 8001518:	6360      	str	r0, [r4, #52]	; 0x34
 800151a:	e7c1      	b.n	80014a0 <__sflush_r+0x1c>
 800151c:	6a21      	ldr	r1, [r4, #32]
 800151e:	2301      	movs	r3, #1
 8001520:	4628      	mov	r0, r5
 8001522:	47b0      	blx	r6
 8001524:	1c41      	adds	r1, r0, #1
 8001526:	d1c7      	bne.n	80014b8 <__sflush_r+0x34>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0c4      	beq.n	80014b8 <__sflush_r+0x34>
 800152e:	2b1d      	cmp	r3, #29
 8001530:	d001      	beq.n	8001536 <__sflush_r+0xb2>
 8001532:	2b16      	cmp	r3, #22
 8001534:	d101      	bne.n	800153a <__sflush_r+0xb6>
 8001536:	602f      	str	r7, [r5, #0]
 8001538:	e7b1      	b.n	800149e <__sflush_r+0x1a>
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	e7ad      	b.n	80014a0 <__sflush_r+0x1c>
 8001544:	690f      	ldr	r7, [r1, #16]
 8001546:	2f00      	cmp	r7, #0
 8001548:	d0a9      	beq.n	800149e <__sflush_r+0x1a>
 800154a:	0793      	lsls	r3, r2, #30
 800154c:	680e      	ldr	r6, [r1, #0]
 800154e:	bf08      	it	eq
 8001550:	694b      	ldreq	r3, [r1, #20]
 8001552:	600f      	str	r7, [r1, #0]
 8001554:	bf18      	it	ne
 8001556:	2300      	movne	r3, #0
 8001558:	eba6 0807 	sub.w	r8, r6, r7
 800155c:	608b      	str	r3, [r1, #8]
 800155e:	f1b8 0f00 	cmp.w	r8, #0
 8001562:	dd9c      	ble.n	800149e <__sflush_r+0x1a>
 8001564:	6a21      	ldr	r1, [r4, #32]
 8001566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001568:	4643      	mov	r3, r8
 800156a:	463a      	mov	r2, r7
 800156c:	4628      	mov	r0, r5
 800156e:	47b0      	blx	r6
 8001570:	2800      	cmp	r0, #0
 8001572:	dc06      	bgt.n	8001582 <__sflush_r+0xfe>
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	e78e      	b.n	80014a0 <__sflush_r+0x1c>
 8001582:	4407      	add	r7, r0
 8001584:	eba8 0800 	sub.w	r8, r8, r0
 8001588:	e7e9      	b.n	800155e <__sflush_r+0xda>
 800158a:	bf00      	nop
 800158c:	20400001 	.word	0x20400001

08001590 <_fflush_r>:
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	690b      	ldr	r3, [r1, #16]
 8001594:	4605      	mov	r5, r0
 8001596:	460c      	mov	r4, r1
 8001598:	b913      	cbnz	r3, 80015a0 <_fflush_r+0x10>
 800159a:	2500      	movs	r5, #0
 800159c:	4628      	mov	r0, r5
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	b118      	cbz	r0, 80015aa <_fflush_r+0x1a>
 80015a2:	6983      	ldr	r3, [r0, #24]
 80015a4:	b90b      	cbnz	r3, 80015aa <_fflush_r+0x1a>
 80015a6:	f000 f899 	bl	80016dc <__sinit>
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <_fflush_r+0x6c>)
 80015ac:	429c      	cmp	r4, r3
 80015ae:	d11b      	bne.n	80015e8 <_fflush_r+0x58>
 80015b0:	686c      	ldr	r4, [r5, #4]
 80015b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0ef      	beq.n	800159a <_fflush_r+0xa>
 80015ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015bc:	07d0      	lsls	r0, r2, #31
 80015be:	d404      	bmi.n	80015ca <_fflush_r+0x3a>
 80015c0:	0599      	lsls	r1, r3, #22
 80015c2:	d402      	bmi.n	80015ca <_fflush_r+0x3a>
 80015c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015c6:	f000 f94c 	bl	8001862 <__retarget_lock_acquire_recursive>
 80015ca:	4628      	mov	r0, r5
 80015cc:	4621      	mov	r1, r4
 80015ce:	f7ff ff59 	bl	8001484 <__sflush_r>
 80015d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015d4:	07da      	lsls	r2, r3, #31
 80015d6:	4605      	mov	r5, r0
 80015d8:	d4e0      	bmi.n	800159c <_fflush_r+0xc>
 80015da:	89a3      	ldrh	r3, [r4, #12]
 80015dc:	059b      	lsls	r3, r3, #22
 80015de:	d4dd      	bmi.n	800159c <_fflush_r+0xc>
 80015e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e2:	f000 f93f 	bl	8001864 <__retarget_lock_release_recursive>
 80015e6:	e7d9      	b.n	800159c <_fflush_r+0xc>
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <_fflush_r+0x70>)
 80015ea:	429c      	cmp	r4, r3
 80015ec:	d101      	bne.n	80015f2 <_fflush_r+0x62>
 80015ee:	68ac      	ldr	r4, [r5, #8]
 80015f0:	e7df      	b.n	80015b2 <_fflush_r+0x22>
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <_fflush_r+0x74>)
 80015f4:	429c      	cmp	r4, r3
 80015f6:	bf08      	it	eq
 80015f8:	68ec      	ldreq	r4, [r5, #12]
 80015fa:	e7da      	b.n	80015b2 <_fflush_r+0x22>
 80015fc:	080027dc 	.word	0x080027dc
 8001600:	080027fc 	.word	0x080027fc
 8001604:	080027bc 	.word	0x080027bc

08001608 <fflush>:
 8001608:	4601      	mov	r1, r0
 800160a:	b920      	cbnz	r0, 8001616 <fflush+0xe>
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <fflush+0x18>)
 800160e:	4905      	ldr	r1, [pc, #20]	; (8001624 <fflush+0x1c>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f000 b8e1 	b.w	80017d8 <_fwalk_reent>
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <fflush+0x20>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f7ff bfb9 	b.w	8001590 <_fflush_r>
 800161e:	bf00      	nop
 8001620:	0800281c 	.word	0x0800281c
 8001624:	08001591 	.word	0x08001591
 8001628:	2000002c 	.word	0x2000002c

0800162c <std>:
 800162c:	2300      	movs	r3, #0
 800162e:	b510      	push	{r4, lr}
 8001630:	4604      	mov	r4, r0
 8001632:	e9c0 3300 	strd	r3, r3, [r0]
 8001636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800163a:	6083      	str	r3, [r0, #8]
 800163c:	8181      	strh	r1, [r0, #12]
 800163e:	6643      	str	r3, [r0, #100]	; 0x64
 8001640:	81c2      	strh	r2, [r0, #14]
 8001642:	6183      	str	r3, [r0, #24]
 8001644:	4619      	mov	r1, r3
 8001646:	2208      	movs	r2, #8
 8001648:	305c      	adds	r0, #92	; 0x5c
 800164a:	f000 f90c 	bl	8001866 <memset>
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <std+0x38>)
 8001650:	6263      	str	r3, [r4, #36]	; 0x24
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <std+0x3c>)
 8001654:	62a3      	str	r3, [r4, #40]	; 0x28
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <std+0x40>)
 8001658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <std+0x44>)
 800165c:	6224      	str	r4, [r4, #32]
 800165e:	6323      	str	r3, [r4, #48]	; 0x30
 8001660:	bd10      	pop	{r4, pc}
 8001662:	bf00      	nop
 8001664:	08001cd1 	.word	0x08001cd1
 8001668:	08001cf3 	.word	0x08001cf3
 800166c:	08001d2b 	.word	0x08001d2b
 8001670:	08001d4f 	.word	0x08001d4f

08001674 <_cleanup_r>:
 8001674:	4901      	ldr	r1, [pc, #4]	; (800167c <_cleanup_r+0x8>)
 8001676:	f000 b8af 	b.w	80017d8 <_fwalk_reent>
 800167a:	bf00      	nop
 800167c:	08001591 	.word	0x08001591

08001680 <__sfmoreglue>:
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	1e4a      	subs	r2, r1, #1
 8001684:	2568      	movs	r5, #104	; 0x68
 8001686:	4355      	muls	r5, r2
 8001688:	460e      	mov	r6, r1
 800168a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800168e:	f000 f943 	bl	8001918 <_malloc_r>
 8001692:	4604      	mov	r4, r0
 8001694:	b140      	cbz	r0, 80016a8 <__sfmoreglue+0x28>
 8001696:	2100      	movs	r1, #0
 8001698:	e9c0 1600 	strd	r1, r6, [r0]
 800169c:	300c      	adds	r0, #12
 800169e:	60a0      	str	r0, [r4, #8]
 80016a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016a4:	f000 f8df 	bl	8001866 <memset>
 80016a8:	4620      	mov	r0, r4
 80016aa:	bd70      	pop	{r4, r5, r6, pc}

080016ac <__sfp_lock_acquire>:
 80016ac:	4801      	ldr	r0, [pc, #4]	; (80016b4 <__sfp_lock_acquire+0x8>)
 80016ae:	f000 b8d8 	b.w	8001862 <__retarget_lock_acquire_recursive>
 80016b2:	bf00      	nop
 80016b4:	200001c8 	.word	0x200001c8

080016b8 <__sfp_lock_release>:
 80016b8:	4801      	ldr	r0, [pc, #4]	; (80016c0 <__sfp_lock_release+0x8>)
 80016ba:	f000 b8d3 	b.w	8001864 <__retarget_lock_release_recursive>
 80016be:	bf00      	nop
 80016c0:	200001c8 	.word	0x200001c8

080016c4 <__sinit_lock_acquire>:
 80016c4:	4801      	ldr	r0, [pc, #4]	; (80016cc <__sinit_lock_acquire+0x8>)
 80016c6:	f000 b8cc 	b.w	8001862 <__retarget_lock_acquire_recursive>
 80016ca:	bf00      	nop
 80016cc:	200001c3 	.word	0x200001c3

080016d0 <__sinit_lock_release>:
 80016d0:	4801      	ldr	r0, [pc, #4]	; (80016d8 <__sinit_lock_release+0x8>)
 80016d2:	f000 b8c7 	b.w	8001864 <__retarget_lock_release_recursive>
 80016d6:	bf00      	nop
 80016d8:	200001c3 	.word	0x200001c3

080016dc <__sinit>:
 80016dc:	b510      	push	{r4, lr}
 80016de:	4604      	mov	r4, r0
 80016e0:	f7ff fff0 	bl	80016c4 <__sinit_lock_acquire>
 80016e4:	69a3      	ldr	r3, [r4, #24]
 80016e6:	b11b      	cbz	r3, 80016f0 <__sinit+0x14>
 80016e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ec:	f7ff bff0 	b.w	80016d0 <__sinit_lock_release>
 80016f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80016f4:	6523      	str	r3, [r4, #80]	; 0x50
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <__sinit+0x68>)
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <__sinit+0x6c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80016fe:	42a3      	cmp	r3, r4
 8001700:	bf04      	itt	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	61a3      	streq	r3, [r4, #24]
 8001706:	4620      	mov	r0, r4
 8001708:	f000 f820 	bl	800174c <__sfp>
 800170c:	6060      	str	r0, [r4, #4]
 800170e:	4620      	mov	r0, r4
 8001710:	f000 f81c 	bl	800174c <__sfp>
 8001714:	60a0      	str	r0, [r4, #8]
 8001716:	4620      	mov	r0, r4
 8001718:	f000 f818 	bl	800174c <__sfp>
 800171c:	2200      	movs	r2, #0
 800171e:	60e0      	str	r0, [r4, #12]
 8001720:	2104      	movs	r1, #4
 8001722:	6860      	ldr	r0, [r4, #4]
 8001724:	f7ff ff82 	bl	800162c <std>
 8001728:	68a0      	ldr	r0, [r4, #8]
 800172a:	2201      	movs	r2, #1
 800172c:	2109      	movs	r1, #9
 800172e:	f7ff ff7d 	bl	800162c <std>
 8001732:	68e0      	ldr	r0, [r4, #12]
 8001734:	2202      	movs	r2, #2
 8001736:	2112      	movs	r1, #18
 8001738:	f7ff ff78 	bl	800162c <std>
 800173c:	2301      	movs	r3, #1
 800173e:	61a3      	str	r3, [r4, #24]
 8001740:	e7d2      	b.n	80016e8 <__sinit+0xc>
 8001742:	bf00      	nop
 8001744:	0800281c 	.word	0x0800281c
 8001748:	08001675 	.word	0x08001675

0800174c <__sfp>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	4607      	mov	r7, r0
 8001750:	f7ff ffac 	bl	80016ac <__sfp_lock_acquire>
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <__sfp+0x84>)
 8001756:	681e      	ldr	r6, [r3, #0]
 8001758:	69b3      	ldr	r3, [r6, #24]
 800175a:	b913      	cbnz	r3, 8001762 <__sfp+0x16>
 800175c:	4630      	mov	r0, r6
 800175e:	f7ff ffbd 	bl	80016dc <__sinit>
 8001762:	3648      	adds	r6, #72	; 0x48
 8001764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001768:	3b01      	subs	r3, #1
 800176a:	d503      	bpl.n	8001774 <__sfp+0x28>
 800176c:	6833      	ldr	r3, [r6, #0]
 800176e:	b30b      	cbz	r3, 80017b4 <__sfp+0x68>
 8001770:	6836      	ldr	r6, [r6, #0]
 8001772:	e7f7      	b.n	8001764 <__sfp+0x18>
 8001774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001778:	b9d5      	cbnz	r5, 80017b0 <__sfp+0x64>
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <__sfp+0x88>)
 800177c:	60e3      	str	r3, [r4, #12]
 800177e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001782:	6665      	str	r5, [r4, #100]	; 0x64
 8001784:	f000 f86c 	bl	8001860 <__retarget_lock_init_recursive>
 8001788:	f7ff ff96 	bl	80016b8 <__sfp_lock_release>
 800178c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001794:	6025      	str	r5, [r4, #0]
 8001796:	61a5      	str	r5, [r4, #24]
 8001798:	2208      	movs	r2, #8
 800179a:	4629      	mov	r1, r5
 800179c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017a0:	f000 f861 	bl	8001866 <memset>
 80017a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017ac:	4620      	mov	r0, r4
 80017ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b0:	3468      	adds	r4, #104	; 0x68
 80017b2:	e7d9      	b.n	8001768 <__sfp+0x1c>
 80017b4:	2104      	movs	r1, #4
 80017b6:	4638      	mov	r0, r7
 80017b8:	f7ff ff62 	bl	8001680 <__sfmoreglue>
 80017bc:	4604      	mov	r4, r0
 80017be:	6030      	str	r0, [r6, #0]
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d1d5      	bne.n	8001770 <__sfp+0x24>
 80017c4:	f7ff ff78 	bl	80016b8 <__sfp_lock_release>
 80017c8:	230c      	movs	r3, #12
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	e7ee      	b.n	80017ac <__sfp+0x60>
 80017ce:	bf00      	nop
 80017d0:	0800281c 	.word	0x0800281c
 80017d4:	ffff0001 	.word	0xffff0001

080017d8 <_fwalk_reent>:
 80017d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017dc:	4606      	mov	r6, r0
 80017de:	4688      	mov	r8, r1
 80017e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017e4:	2700      	movs	r7, #0
 80017e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017ea:	f1b9 0901 	subs.w	r9, r9, #1
 80017ee:	d505      	bpl.n	80017fc <_fwalk_reent+0x24>
 80017f0:	6824      	ldr	r4, [r4, #0]
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	d1f7      	bne.n	80017e6 <_fwalk_reent+0xe>
 80017f6:	4638      	mov	r0, r7
 80017f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017fc:	89ab      	ldrh	r3, [r5, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d907      	bls.n	8001812 <_fwalk_reent+0x3a>
 8001802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001806:	3301      	adds	r3, #1
 8001808:	d003      	beq.n	8001812 <_fwalk_reent+0x3a>
 800180a:	4629      	mov	r1, r5
 800180c:	4630      	mov	r0, r6
 800180e:	47c0      	blx	r8
 8001810:	4307      	orrs	r7, r0
 8001812:	3568      	adds	r5, #104	; 0x68
 8001814:	e7e9      	b.n	80017ea <_fwalk_reent+0x12>
	...

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4d0d      	ldr	r5, [pc, #52]	; (8001850 <__libc_init_array+0x38>)
 800181c:	4c0d      	ldr	r4, [pc, #52]	; (8001854 <__libc_init_array+0x3c>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	2600      	movs	r6, #0
 8001824:	42a6      	cmp	r6, r4
 8001826:	d109      	bne.n	800183c <__libc_init_array+0x24>
 8001828:	4d0b      	ldr	r5, [pc, #44]	; (8001858 <__libc_init_array+0x40>)
 800182a:	4c0c      	ldr	r4, [pc, #48]	; (800185c <__libc_init_array+0x44>)
 800182c:	f000 ff66 	bl	80026fc <_init>
 8001830:	1b64      	subs	r4, r4, r5
 8001832:	10a4      	asrs	r4, r4, #2
 8001834:	2600      	movs	r6, #0
 8001836:	42a6      	cmp	r6, r4
 8001838:	d105      	bne.n	8001846 <__libc_init_array+0x2e>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001840:	4798      	blx	r3
 8001842:	3601      	adds	r6, #1
 8001844:	e7ee      	b.n	8001824 <__libc_init_array+0xc>
 8001846:	f855 3b04 	ldr.w	r3, [r5], #4
 800184a:	4798      	blx	r3
 800184c:	3601      	adds	r6, #1
 800184e:	e7f2      	b.n	8001836 <__libc_init_array+0x1e>
 8001850:	08002854 	.word	0x08002854
 8001854:	08002854 	.word	0x08002854
 8001858:	08002854 	.word	0x08002854
 800185c:	08002858 	.word	0x08002858

08001860 <__retarget_lock_init_recursive>:
 8001860:	4770      	bx	lr

08001862 <__retarget_lock_acquire_recursive>:
 8001862:	4770      	bx	lr

08001864 <__retarget_lock_release_recursive>:
 8001864:	4770      	bx	lr

08001866 <memset>:
 8001866:	4402      	add	r2, r0
 8001868:	4603      	mov	r3, r0
 800186a:	4293      	cmp	r3, r2
 800186c:	d100      	bne.n	8001870 <memset+0xa>
 800186e:	4770      	bx	lr
 8001870:	f803 1b01 	strb.w	r1, [r3], #1
 8001874:	e7f9      	b.n	800186a <memset+0x4>
	...

08001878 <_free_r>:
 8001878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800187a:	2900      	cmp	r1, #0
 800187c:	d048      	beq.n	8001910 <_free_r+0x98>
 800187e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001882:	9001      	str	r0, [sp, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f1a1 0404 	sub.w	r4, r1, #4
 800188a:	bfb8      	it	lt
 800188c:	18e4      	addlt	r4, r4, r3
 800188e:	f000 fbb1 	bl	8001ff4 <__malloc_lock>
 8001892:	4a20      	ldr	r2, [pc, #128]	; (8001914 <_free_r+0x9c>)
 8001894:	9801      	ldr	r0, [sp, #4]
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	4615      	mov	r5, r2
 800189a:	b933      	cbnz	r3, 80018aa <_free_r+0x32>
 800189c:	6063      	str	r3, [r4, #4]
 800189e:	6014      	str	r4, [r2, #0]
 80018a0:	b003      	add	sp, #12
 80018a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018a6:	f000 bbab 	b.w	8002000 <__malloc_unlock>
 80018aa:	42a3      	cmp	r3, r4
 80018ac:	d90b      	bls.n	80018c6 <_free_r+0x4e>
 80018ae:	6821      	ldr	r1, [r4, #0]
 80018b0:	1862      	adds	r2, r4, r1
 80018b2:	4293      	cmp	r3, r2
 80018b4:	bf04      	itt	eq
 80018b6:	681a      	ldreq	r2, [r3, #0]
 80018b8:	685b      	ldreq	r3, [r3, #4]
 80018ba:	6063      	str	r3, [r4, #4]
 80018bc:	bf04      	itt	eq
 80018be:	1852      	addeq	r2, r2, r1
 80018c0:	6022      	streq	r2, [r4, #0]
 80018c2:	602c      	str	r4, [r5, #0]
 80018c4:	e7ec      	b.n	80018a0 <_free_r+0x28>
 80018c6:	461a      	mov	r2, r3
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b10b      	cbz	r3, 80018d0 <_free_r+0x58>
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	d9fa      	bls.n	80018c6 <_free_r+0x4e>
 80018d0:	6811      	ldr	r1, [r2, #0]
 80018d2:	1855      	adds	r5, r2, r1
 80018d4:	42a5      	cmp	r5, r4
 80018d6:	d10b      	bne.n	80018f0 <_free_r+0x78>
 80018d8:	6824      	ldr	r4, [r4, #0]
 80018da:	4421      	add	r1, r4
 80018dc:	1854      	adds	r4, r2, r1
 80018de:	42a3      	cmp	r3, r4
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	d1dd      	bne.n	80018a0 <_free_r+0x28>
 80018e4:	681c      	ldr	r4, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	6053      	str	r3, [r2, #4]
 80018ea:	4421      	add	r1, r4
 80018ec:	6011      	str	r1, [r2, #0]
 80018ee:	e7d7      	b.n	80018a0 <_free_r+0x28>
 80018f0:	d902      	bls.n	80018f8 <_free_r+0x80>
 80018f2:	230c      	movs	r3, #12
 80018f4:	6003      	str	r3, [r0, #0]
 80018f6:	e7d3      	b.n	80018a0 <_free_r+0x28>
 80018f8:	6825      	ldr	r5, [r4, #0]
 80018fa:	1961      	adds	r1, r4, r5
 80018fc:	428b      	cmp	r3, r1
 80018fe:	bf04      	itt	eq
 8001900:	6819      	ldreq	r1, [r3, #0]
 8001902:	685b      	ldreq	r3, [r3, #4]
 8001904:	6063      	str	r3, [r4, #4]
 8001906:	bf04      	itt	eq
 8001908:	1949      	addeq	r1, r1, r5
 800190a:	6021      	streq	r1, [r4, #0]
 800190c:	6054      	str	r4, [r2, #4]
 800190e:	e7c7      	b.n	80018a0 <_free_r+0x28>
 8001910:	b003      	add	sp, #12
 8001912:	bd30      	pop	{r4, r5, pc}
 8001914:	200001b0 	.word	0x200001b0

08001918 <_malloc_r>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	1ccd      	adds	r5, r1, #3
 800191c:	f025 0503 	bic.w	r5, r5, #3
 8001920:	3508      	adds	r5, #8
 8001922:	2d0c      	cmp	r5, #12
 8001924:	bf38      	it	cc
 8001926:	250c      	movcc	r5, #12
 8001928:	2d00      	cmp	r5, #0
 800192a:	4606      	mov	r6, r0
 800192c:	db01      	blt.n	8001932 <_malloc_r+0x1a>
 800192e:	42a9      	cmp	r1, r5
 8001930:	d903      	bls.n	800193a <_malloc_r+0x22>
 8001932:	230c      	movs	r3, #12
 8001934:	6033      	str	r3, [r6, #0]
 8001936:	2000      	movs	r0, #0
 8001938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800193a:	f000 fb5b 	bl	8001ff4 <__malloc_lock>
 800193e:	4921      	ldr	r1, [pc, #132]	; (80019c4 <_malloc_r+0xac>)
 8001940:	680a      	ldr	r2, [r1, #0]
 8001942:	4614      	mov	r4, r2
 8001944:	b99c      	cbnz	r4, 800196e <_malloc_r+0x56>
 8001946:	4f20      	ldr	r7, [pc, #128]	; (80019c8 <_malloc_r+0xb0>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b923      	cbnz	r3, 8001956 <_malloc_r+0x3e>
 800194c:	4621      	mov	r1, r4
 800194e:	4630      	mov	r0, r6
 8001950:	f000 f8e0 	bl	8001b14 <_sbrk_r>
 8001954:	6038      	str	r0, [r7, #0]
 8001956:	4629      	mov	r1, r5
 8001958:	4630      	mov	r0, r6
 800195a:	f000 f8db 	bl	8001b14 <_sbrk_r>
 800195e:	1c43      	adds	r3, r0, #1
 8001960:	d123      	bne.n	80019aa <_malloc_r+0x92>
 8001962:	230c      	movs	r3, #12
 8001964:	6033      	str	r3, [r6, #0]
 8001966:	4630      	mov	r0, r6
 8001968:	f000 fb4a 	bl	8002000 <__malloc_unlock>
 800196c:	e7e3      	b.n	8001936 <_malloc_r+0x1e>
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	1b5b      	subs	r3, r3, r5
 8001972:	d417      	bmi.n	80019a4 <_malloc_r+0x8c>
 8001974:	2b0b      	cmp	r3, #11
 8001976:	d903      	bls.n	8001980 <_malloc_r+0x68>
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	441c      	add	r4, r3
 800197c:	6025      	str	r5, [r4, #0]
 800197e:	e004      	b.n	800198a <_malloc_r+0x72>
 8001980:	6863      	ldr	r3, [r4, #4]
 8001982:	42a2      	cmp	r2, r4
 8001984:	bf0c      	ite	eq
 8001986:	600b      	streq	r3, [r1, #0]
 8001988:	6053      	strne	r3, [r2, #4]
 800198a:	4630      	mov	r0, r6
 800198c:	f000 fb38 	bl	8002000 <__malloc_unlock>
 8001990:	f104 000b 	add.w	r0, r4, #11
 8001994:	1d23      	adds	r3, r4, #4
 8001996:	f020 0007 	bic.w	r0, r0, #7
 800199a:	1ac2      	subs	r2, r0, r3
 800199c:	d0cc      	beq.n	8001938 <_malloc_r+0x20>
 800199e:	1a1b      	subs	r3, r3, r0
 80019a0:	50a3      	str	r3, [r4, r2]
 80019a2:	e7c9      	b.n	8001938 <_malloc_r+0x20>
 80019a4:	4622      	mov	r2, r4
 80019a6:	6864      	ldr	r4, [r4, #4]
 80019a8:	e7cc      	b.n	8001944 <_malloc_r+0x2c>
 80019aa:	1cc4      	adds	r4, r0, #3
 80019ac:	f024 0403 	bic.w	r4, r4, #3
 80019b0:	42a0      	cmp	r0, r4
 80019b2:	d0e3      	beq.n	800197c <_malloc_r+0x64>
 80019b4:	1a21      	subs	r1, r4, r0
 80019b6:	4630      	mov	r0, r6
 80019b8:	f000 f8ac 	bl	8001b14 <_sbrk_r>
 80019bc:	3001      	adds	r0, #1
 80019be:	d1dd      	bne.n	800197c <_malloc_r+0x64>
 80019c0:	e7cf      	b.n	8001962 <_malloc_r+0x4a>
 80019c2:	bf00      	nop
 80019c4:	200001b0 	.word	0x200001b0
 80019c8:	200001b4 	.word	0x200001b4

080019cc <iprintf>:
 80019cc:	b40f      	push	{r0, r1, r2, r3}
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <iprintf+0x2c>)
 80019d0:	b513      	push	{r0, r1, r4, lr}
 80019d2:	681c      	ldr	r4, [r3, #0]
 80019d4:	b124      	cbz	r4, 80019e0 <iprintf+0x14>
 80019d6:	69a3      	ldr	r3, [r4, #24]
 80019d8:	b913      	cbnz	r3, 80019e0 <iprintf+0x14>
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff fe7e 	bl	80016dc <__sinit>
 80019e0:	ab05      	add	r3, sp, #20
 80019e2:	9a04      	ldr	r2, [sp, #16]
 80019e4:	68a1      	ldr	r1, [r4, #8]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	4620      	mov	r0, r4
 80019ea:	f000 fb39 	bl	8002060 <_vfiprintf_r>
 80019ee:	b002      	add	sp, #8
 80019f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019f4:	b004      	add	sp, #16
 80019f6:	4770      	bx	lr
 80019f8:	2000002c 	.word	0x2000002c

080019fc <putchar>:
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <putchar+0x28>)
 80019fe:	b513      	push	{r0, r1, r4, lr}
 8001a00:	681c      	ldr	r4, [r3, #0]
 8001a02:	4601      	mov	r1, r0
 8001a04:	b134      	cbz	r4, 8001a14 <putchar+0x18>
 8001a06:	69a3      	ldr	r3, [r4, #24]
 8001a08:	b923      	cbnz	r3, 8001a14 <putchar+0x18>
 8001a0a:	9001      	str	r0, [sp, #4]
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff fe65 	bl	80016dc <__sinit>
 8001a12:	9901      	ldr	r1, [sp, #4]
 8001a14:	68a2      	ldr	r2, [r4, #8]
 8001a16:	4620      	mov	r0, r4
 8001a18:	b002      	add	sp, #8
 8001a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a1e:	f000 bde3 	b.w	80025e8 <_putc_r>
 8001a22:	bf00      	nop
 8001a24:	2000002c 	.word	0x2000002c

08001a28 <_puts_r>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	460e      	mov	r6, r1
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	b118      	cbz	r0, 8001a38 <_puts_r+0x10>
 8001a30:	6983      	ldr	r3, [r0, #24]
 8001a32:	b90b      	cbnz	r3, 8001a38 <_puts_r+0x10>
 8001a34:	f7ff fe52 	bl	80016dc <__sinit>
 8001a38:	69ab      	ldr	r3, [r5, #24]
 8001a3a:	68ac      	ldr	r4, [r5, #8]
 8001a3c:	b913      	cbnz	r3, 8001a44 <_puts_r+0x1c>
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f7ff fe4c 	bl	80016dc <__sinit>
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <_puts_r+0xd0>)
 8001a46:	429c      	cmp	r4, r3
 8001a48:	d120      	bne.n	8001a8c <_puts_r+0x64>
 8001a4a:	686c      	ldr	r4, [r5, #4]
 8001a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a4e:	07db      	lsls	r3, r3, #31
 8001a50:	d405      	bmi.n	8001a5e <_puts_r+0x36>
 8001a52:	89a3      	ldrh	r3, [r4, #12]
 8001a54:	0598      	lsls	r0, r3, #22
 8001a56:	d402      	bmi.n	8001a5e <_puts_r+0x36>
 8001a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a5a:	f7ff ff02 	bl	8001862 <__retarget_lock_acquire_recursive>
 8001a5e:	89a3      	ldrh	r3, [r4, #12]
 8001a60:	0719      	lsls	r1, r3, #28
 8001a62:	d51d      	bpl.n	8001aa0 <_puts_r+0x78>
 8001a64:	6923      	ldr	r3, [r4, #16]
 8001a66:	b1db      	cbz	r3, 8001aa0 <_puts_r+0x78>
 8001a68:	3e01      	subs	r6, #1
 8001a6a:	68a3      	ldr	r3, [r4, #8]
 8001a6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60a3      	str	r3, [r4, #8]
 8001a74:	bb39      	cbnz	r1, 8001ac6 <_puts_r+0x9e>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da38      	bge.n	8001aec <_puts_r+0xc4>
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	210a      	movs	r1, #10
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f000 f96a 	bl	8001d58 <__swbuf_r>
 8001a84:	3001      	adds	r0, #1
 8001a86:	d011      	beq.n	8001aac <_puts_r+0x84>
 8001a88:	250a      	movs	r5, #10
 8001a8a:	e011      	b.n	8001ab0 <_puts_r+0x88>
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <_puts_r+0xd4>)
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	d101      	bne.n	8001a96 <_puts_r+0x6e>
 8001a92:	68ac      	ldr	r4, [r5, #8]
 8001a94:	e7da      	b.n	8001a4c <_puts_r+0x24>
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <_puts_r+0xd8>)
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	bf08      	it	eq
 8001a9c:	68ec      	ldreq	r4, [r5, #12]
 8001a9e:	e7d5      	b.n	8001a4c <_puts_r+0x24>
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f000 f9aa 	bl	8001dfc <__swsetup_r>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d0dd      	beq.n	8001a68 <_puts_r+0x40>
 8001aac:	f04f 35ff 	mov.w	r5, #4294967295
 8001ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ab2:	07da      	lsls	r2, r3, #31
 8001ab4:	d405      	bmi.n	8001ac2 <_puts_r+0x9a>
 8001ab6:	89a3      	ldrh	r3, [r4, #12]
 8001ab8:	059b      	lsls	r3, r3, #22
 8001aba:	d402      	bmi.n	8001ac2 <_puts_r+0x9a>
 8001abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001abe:	f7ff fed1 	bl	8001864 <__retarget_lock_release_recursive>
 8001ac2:	4628      	mov	r0, r5
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da04      	bge.n	8001ad4 <_puts_r+0xac>
 8001aca:	69a2      	ldr	r2, [r4, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dc06      	bgt.n	8001ade <_puts_r+0xb6>
 8001ad0:	290a      	cmp	r1, #10
 8001ad2:	d004      	beq.n	8001ade <_puts_r+0xb6>
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	6022      	str	r2, [r4, #0]
 8001ada:	7019      	strb	r1, [r3, #0]
 8001adc:	e7c5      	b.n	8001a6a <_puts_r+0x42>
 8001ade:	4622      	mov	r2, r4
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	f000 f939 	bl	8001d58 <__swbuf_r>
 8001ae6:	3001      	adds	r0, #1
 8001ae8:	d1bf      	bne.n	8001a6a <_puts_r+0x42>
 8001aea:	e7df      	b.n	8001aac <_puts_r+0x84>
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	250a      	movs	r5, #10
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	6022      	str	r2, [r4, #0]
 8001af4:	701d      	strb	r5, [r3, #0]
 8001af6:	e7db      	b.n	8001ab0 <_puts_r+0x88>
 8001af8:	080027dc 	.word	0x080027dc
 8001afc:	080027fc 	.word	0x080027fc
 8001b00:	080027bc 	.word	0x080027bc

08001b04 <puts>:
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <puts+0xc>)
 8001b06:	4601      	mov	r1, r0
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f7ff bf8d 	b.w	8001a28 <_puts_r>
 8001b0e:	bf00      	nop
 8001b10:	2000002c 	.word	0x2000002c

08001b14 <_sbrk_r>:
 8001b14:	b538      	push	{r3, r4, r5, lr}
 8001b16:	4d06      	ldr	r5, [pc, #24]	; (8001b30 <_sbrk_r+0x1c>)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	602b      	str	r3, [r5, #0]
 8001b20:	f000 fdde 	bl	80026e0 <_sbrk>
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	d102      	bne.n	8001b2e <_sbrk_r+0x1a>
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	b103      	cbz	r3, 8001b2e <_sbrk_r+0x1a>
 8001b2c:	6023      	str	r3, [r4, #0]
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	200001cc 	.word	0x200001cc

08001b34 <setbuf>:
 8001b34:	2900      	cmp	r1, #0
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2202      	moveq	r2, #2
 8001b3e:	2200      	movne	r2, #0
 8001b40:	f000 b800 	b.w	8001b44 <setvbuf>

08001b44 <setvbuf>:
 8001b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001b48:	461d      	mov	r5, r3
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <setvbuf+0x17c>)
 8001b4c:	681f      	ldr	r7, [r3, #0]
 8001b4e:	4604      	mov	r4, r0
 8001b50:	460e      	mov	r6, r1
 8001b52:	4690      	mov	r8, r2
 8001b54:	b127      	cbz	r7, 8001b60 <setvbuf+0x1c>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	b913      	cbnz	r3, 8001b60 <setvbuf+0x1c>
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f7ff fdbe 	bl	80016dc <__sinit>
 8001b60:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <setvbuf+0x180>)
 8001b62:	429c      	cmp	r4, r3
 8001b64:	d167      	bne.n	8001c36 <setvbuf+0xf2>
 8001b66:	687c      	ldr	r4, [r7, #4]
 8001b68:	f1b8 0f02 	cmp.w	r8, #2
 8001b6c:	d006      	beq.n	8001b7c <setvbuf+0x38>
 8001b6e:	f1b8 0f01 	cmp.w	r8, #1
 8001b72:	f200 809f 	bhi.w	8001cb4 <setvbuf+0x170>
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	f2c0 809c 	blt.w	8001cb4 <setvbuf+0x170>
 8001b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b7e:	07db      	lsls	r3, r3, #31
 8001b80:	d405      	bmi.n	8001b8e <setvbuf+0x4a>
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	0598      	lsls	r0, r3, #22
 8001b86:	d402      	bmi.n	8001b8e <setvbuf+0x4a>
 8001b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b8a:	f7ff fe6a 	bl	8001862 <__retarget_lock_acquire_recursive>
 8001b8e:	4621      	mov	r1, r4
 8001b90:	4638      	mov	r0, r7
 8001b92:	f7ff fcfd 	bl	8001590 <_fflush_r>
 8001b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b98:	b141      	cbz	r1, 8001bac <setvbuf+0x68>
 8001b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b9e:	4299      	cmp	r1, r3
 8001ba0:	d002      	beq.n	8001ba8 <setvbuf+0x64>
 8001ba2:	4638      	mov	r0, r7
 8001ba4:	f7ff fe68 	bl	8001878 <_free_r>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6363      	str	r3, [r4, #52]	; 0x34
 8001bac:	2300      	movs	r3, #0
 8001bae:	61a3      	str	r3, [r4, #24]
 8001bb0:	6063      	str	r3, [r4, #4]
 8001bb2:	89a3      	ldrh	r3, [r4, #12]
 8001bb4:	0619      	lsls	r1, r3, #24
 8001bb6:	d503      	bpl.n	8001bc0 <setvbuf+0x7c>
 8001bb8:	6921      	ldr	r1, [r4, #16]
 8001bba:	4638      	mov	r0, r7
 8001bbc:	f7ff fe5c 	bl	8001878 <_free_r>
 8001bc0:	89a3      	ldrh	r3, [r4, #12]
 8001bc2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	f1b8 0f02 	cmp.w	r8, #2
 8001bce:	81a3      	strh	r3, [r4, #12]
 8001bd0:	d06c      	beq.n	8001cac <setvbuf+0x168>
 8001bd2:	ab01      	add	r3, sp, #4
 8001bd4:	466a      	mov	r2, sp
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	4638      	mov	r0, r7
 8001bda:	f000 f99f 	bl	8001f1c <__swhatbuf_r>
 8001bde:	89a3      	ldrh	r3, [r4, #12]
 8001be0:	4318      	orrs	r0, r3
 8001be2:	81a0      	strh	r0, [r4, #12]
 8001be4:	2d00      	cmp	r5, #0
 8001be6:	d130      	bne.n	8001c4a <setvbuf+0x106>
 8001be8:	9d00      	ldr	r5, [sp, #0]
 8001bea:	4628      	mov	r0, r5
 8001bec:	f000 f9fa 	bl	8001fe4 <malloc>
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d155      	bne.n	8001ca2 <setvbuf+0x15e>
 8001bf6:	f8dd 9000 	ldr.w	r9, [sp]
 8001bfa:	45a9      	cmp	r9, r5
 8001bfc:	d14a      	bne.n	8001c94 <setvbuf+0x150>
 8001bfe:	f04f 35ff 	mov.w	r5, #4294967295
 8001c02:	2200      	movs	r2, #0
 8001c04:	60a2      	str	r2, [r4, #8]
 8001c06:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001c0a:	6022      	str	r2, [r4, #0]
 8001c0c:	6122      	str	r2, [r4, #16]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c14:	6162      	str	r2, [r4, #20]
 8001c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	07d2      	lsls	r2, r2, #31
 8001c1e:	81a3      	strh	r3, [r4, #12]
 8001c20:	d405      	bmi.n	8001c2e <setvbuf+0xea>
 8001c22:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001c26:	d102      	bne.n	8001c2e <setvbuf+0xea>
 8001c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c2a:	f7ff fe1b 	bl	8001864 <__retarget_lock_release_recursive>
 8001c2e:	4628      	mov	r0, r5
 8001c30:	b003      	add	sp, #12
 8001c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <setvbuf+0x184>)
 8001c38:	429c      	cmp	r4, r3
 8001c3a:	d101      	bne.n	8001c40 <setvbuf+0xfc>
 8001c3c:	68bc      	ldr	r4, [r7, #8]
 8001c3e:	e793      	b.n	8001b68 <setvbuf+0x24>
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <setvbuf+0x188>)
 8001c42:	429c      	cmp	r4, r3
 8001c44:	bf08      	it	eq
 8001c46:	68fc      	ldreq	r4, [r7, #12]
 8001c48:	e78e      	b.n	8001b68 <setvbuf+0x24>
 8001c4a:	2e00      	cmp	r6, #0
 8001c4c:	d0cd      	beq.n	8001bea <setvbuf+0xa6>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	b913      	cbnz	r3, 8001c58 <setvbuf+0x114>
 8001c52:	4638      	mov	r0, r7
 8001c54:	f7ff fd42 	bl	80016dc <__sinit>
 8001c58:	f1b8 0f01 	cmp.w	r8, #1
 8001c5c:	bf08      	it	eq
 8001c5e:	89a3      	ldrheq	r3, [r4, #12]
 8001c60:	6026      	str	r6, [r4, #0]
 8001c62:	bf04      	itt	eq
 8001c64:	f043 0301 	orreq.w	r3, r3, #1
 8001c68:	81a3      	strheq	r3, [r4, #12]
 8001c6a:	89a2      	ldrh	r2, [r4, #12]
 8001c6c:	f012 0308 	ands.w	r3, r2, #8
 8001c70:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001c74:	d01c      	beq.n	8001cb0 <setvbuf+0x16c>
 8001c76:	07d3      	lsls	r3, r2, #31
 8001c78:	bf41      	itttt	mi
 8001c7a:	2300      	movmi	r3, #0
 8001c7c:	426d      	negmi	r5, r5
 8001c7e:	60a3      	strmi	r3, [r4, #8]
 8001c80:	61a5      	strmi	r5, [r4, #24]
 8001c82:	bf58      	it	pl
 8001c84:	60a5      	strpl	r5, [r4, #8]
 8001c86:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001c88:	f015 0501 	ands.w	r5, r5, #1
 8001c8c:	d115      	bne.n	8001cba <setvbuf+0x176>
 8001c8e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001c92:	e7c8      	b.n	8001c26 <setvbuf+0xe2>
 8001c94:	4648      	mov	r0, r9
 8001c96:	f000 f9a5 	bl	8001fe4 <malloc>
 8001c9a:	4606      	mov	r6, r0
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d0ae      	beq.n	8001bfe <setvbuf+0xba>
 8001ca0:	464d      	mov	r5, r9
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	81a3      	strh	r3, [r4, #12]
 8001caa:	e7d0      	b.n	8001c4e <setvbuf+0x10a>
 8001cac:	2500      	movs	r5, #0
 8001cae:	e7a8      	b.n	8001c02 <setvbuf+0xbe>
 8001cb0:	60a3      	str	r3, [r4, #8]
 8001cb2:	e7e8      	b.n	8001c86 <setvbuf+0x142>
 8001cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8001cb8:	e7b9      	b.n	8001c2e <setvbuf+0xea>
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e7b7      	b.n	8001c2e <setvbuf+0xea>
 8001cbe:	bf00      	nop
 8001cc0:	2000002c 	.word	0x2000002c
 8001cc4:	080027dc 	.word	0x080027dc
 8001cc8:	080027fc 	.word	0x080027fc
 8001ccc:	080027bc 	.word	0x080027bc

08001cd0 <__sread>:
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cd8:	f000 fcce 	bl	8002678 <_read_r>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	bfab      	itete	ge
 8001ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ce4:	181b      	addge	r3, r3, r0
 8001ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cea:	bfac      	ite	ge
 8001cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cee:	81a3      	strhlt	r3, [r4, #12]
 8001cf0:	bd10      	pop	{r4, pc}

08001cf2 <__swrite>:
 8001cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf6:	461f      	mov	r7, r3
 8001cf8:	898b      	ldrh	r3, [r1, #12]
 8001cfa:	05db      	lsls	r3, r3, #23
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4616      	mov	r6, r2
 8001d02:	d505      	bpl.n	8001d10 <__swrite+0x1e>
 8001d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f000 f8f4 	bl	8001ef8 <_lseek_r>
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d1a:	81a3      	strh	r3, [r4, #12]
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4628      	mov	r0, r5
 8001d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d26:	f7fe beaf 	b.w	8000a88 <_write_r>

08001d2a <__sseek>:
 8001d2a:	b510      	push	{r4, lr}
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d32:	f000 f8e1 	bl	8001ef8 <_lseek_r>
 8001d36:	1c43      	adds	r3, r0, #1
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	bf15      	itete	ne
 8001d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d46:	81a3      	strheq	r3, [r4, #12]
 8001d48:	bf18      	it	ne
 8001d4a:	81a3      	strhne	r3, [r4, #12]
 8001d4c:	bd10      	pop	{r4, pc}

08001d4e <__sclose>:
 8001d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d52:	f000 b8c1 	b.w	8001ed8 <_close_r>
	...

08001d58 <__swbuf_r>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	460e      	mov	r6, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	4605      	mov	r5, r0
 8001d60:	b118      	cbz	r0, 8001d6a <__swbuf_r+0x12>
 8001d62:	6983      	ldr	r3, [r0, #24]
 8001d64:	b90b      	cbnz	r3, 8001d6a <__swbuf_r+0x12>
 8001d66:	f7ff fcb9 	bl	80016dc <__sinit>
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <__swbuf_r+0x98>)
 8001d6c:	429c      	cmp	r4, r3
 8001d6e:	d12b      	bne.n	8001dc8 <__swbuf_r+0x70>
 8001d70:	686c      	ldr	r4, [r5, #4]
 8001d72:	69a3      	ldr	r3, [r4, #24]
 8001d74:	60a3      	str	r3, [r4, #8]
 8001d76:	89a3      	ldrh	r3, [r4, #12]
 8001d78:	071a      	lsls	r2, r3, #28
 8001d7a:	d52f      	bpl.n	8001ddc <__swbuf_r+0x84>
 8001d7c:	6923      	ldr	r3, [r4, #16]
 8001d7e:	b36b      	cbz	r3, 8001ddc <__swbuf_r+0x84>
 8001d80:	6923      	ldr	r3, [r4, #16]
 8001d82:	6820      	ldr	r0, [r4, #0]
 8001d84:	1ac0      	subs	r0, r0, r3
 8001d86:	6963      	ldr	r3, [r4, #20]
 8001d88:	b2f6      	uxtb	r6, r6
 8001d8a:	4283      	cmp	r3, r0
 8001d8c:	4637      	mov	r7, r6
 8001d8e:	dc04      	bgt.n	8001d9a <__swbuf_r+0x42>
 8001d90:	4621      	mov	r1, r4
 8001d92:	4628      	mov	r0, r5
 8001d94:	f7ff fbfc 	bl	8001590 <_fflush_r>
 8001d98:	bb30      	cbnz	r0, 8001de8 <__swbuf_r+0x90>
 8001d9a:	68a3      	ldr	r3, [r4, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60a3      	str	r3, [r4, #8]
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	6022      	str	r2, [r4, #0]
 8001da6:	701e      	strb	r6, [r3, #0]
 8001da8:	6963      	ldr	r3, [r4, #20]
 8001daa:	3001      	adds	r0, #1
 8001dac:	4283      	cmp	r3, r0
 8001dae:	d004      	beq.n	8001dba <__swbuf_r+0x62>
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	07db      	lsls	r3, r3, #31
 8001db4:	d506      	bpl.n	8001dc4 <__swbuf_r+0x6c>
 8001db6:	2e0a      	cmp	r6, #10
 8001db8:	d104      	bne.n	8001dc4 <__swbuf_r+0x6c>
 8001dba:	4621      	mov	r1, r4
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f7ff fbe7 	bl	8001590 <_fflush_r>
 8001dc2:	b988      	cbnz	r0, 8001de8 <__swbuf_r+0x90>
 8001dc4:	4638      	mov	r0, r7
 8001dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <__swbuf_r+0x9c>)
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	d101      	bne.n	8001dd2 <__swbuf_r+0x7a>
 8001dce:	68ac      	ldr	r4, [r5, #8]
 8001dd0:	e7cf      	b.n	8001d72 <__swbuf_r+0x1a>
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <__swbuf_r+0xa0>)
 8001dd4:	429c      	cmp	r4, r3
 8001dd6:	bf08      	it	eq
 8001dd8:	68ec      	ldreq	r4, [r5, #12]
 8001dda:	e7ca      	b.n	8001d72 <__swbuf_r+0x1a>
 8001ddc:	4621      	mov	r1, r4
 8001dde:	4628      	mov	r0, r5
 8001de0:	f000 f80c 	bl	8001dfc <__swsetup_r>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0cb      	beq.n	8001d80 <__swbuf_r+0x28>
 8001de8:	f04f 37ff 	mov.w	r7, #4294967295
 8001dec:	e7ea      	b.n	8001dc4 <__swbuf_r+0x6c>
 8001dee:	bf00      	nop
 8001df0:	080027dc 	.word	0x080027dc
 8001df4:	080027fc 	.word	0x080027fc
 8001df8:	080027bc 	.word	0x080027bc

08001dfc <__swsetup_r>:
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <__swsetup_r+0xcc>)
 8001dfe:	b570      	push	{r4, r5, r6, lr}
 8001e00:	681d      	ldr	r5, [r3, #0]
 8001e02:	4606      	mov	r6, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	b125      	cbz	r5, 8001e12 <__swsetup_r+0x16>
 8001e08:	69ab      	ldr	r3, [r5, #24]
 8001e0a:	b913      	cbnz	r3, 8001e12 <__swsetup_r+0x16>
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff fc65 	bl	80016dc <__sinit>
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <__swsetup_r+0xd0>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	d10f      	bne.n	8001e38 <__swsetup_r+0x3c>
 8001e18:	686c      	ldr	r4, [r5, #4]
 8001e1a:	89a3      	ldrh	r3, [r4, #12]
 8001e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e20:	0719      	lsls	r1, r3, #28
 8001e22:	d42c      	bmi.n	8001e7e <__swsetup_r+0x82>
 8001e24:	06dd      	lsls	r5, r3, #27
 8001e26:	d411      	bmi.n	8001e4c <__swsetup_r+0x50>
 8001e28:	2309      	movs	r3, #9
 8001e2a:	6033      	str	r3, [r6, #0]
 8001e2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e30:	81a3      	strh	r3, [r4, #12]
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295
 8001e36:	e03e      	b.n	8001eb6 <__swsetup_r+0xba>
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <__swsetup_r+0xd4>)
 8001e3a:	429c      	cmp	r4, r3
 8001e3c:	d101      	bne.n	8001e42 <__swsetup_r+0x46>
 8001e3e:	68ac      	ldr	r4, [r5, #8]
 8001e40:	e7eb      	b.n	8001e1a <__swsetup_r+0x1e>
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <__swsetup_r+0xd8>)
 8001e44:	429c      	cmp	r4, r3
 8001e46:	bf08      	it	eq
 8001e48:	68ec      	ldreq	r4, [r5, #12]
 8001e4a:	e7e6      	b.n	8001e1a <__swsetup_r+0x1e>
 8001e4c:	0758      	lsls	r0, r3, #29
 8001e4e:	d512      	bpl.n	8001e76 <__swsetup_r+0x7a>
 8001e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e52:	b141      	cbz	r1, 8001e66 <__swsetup_r+0x6a>
 8001e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d002      	beq.n	8001e62 <__swsetup_r+0x66>
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7ff fd0b 	bl	8001878 <_free_r>
 8001e62:	2300      	movs	r3, #0
 8001e64:	6363      	str	r3, [r4, #52]	; 0x34
 8001e66:	89a3      	ldrh	r3, [r4, #12]
 8001e68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e6c:	81a3      	strh	r3, [r4, #12]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	6063      	str	r3, [r4, #4]
 8001e72:	6923      	ldr	r3, [r4, #16]
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	89a3      	ldrh	r3, [r4, #12]
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	81a3      	strh	r3, [r4, #12]
 8001e7e:	6923      	ldr	r3, [r4, #16]
 8001e80:	b94b      	cbnz	r3, 8001e96 <__swsetup_r+0x9a>
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8c:	d003      	beq.n	8001e96 <__swsetup_r+0x9a>
 8001e8e:	4621      	mov	r1, r4
 8001e90:	4630      	mov	r0, r6
 8001e92:	f000 f867 	bl	8001f64 <__smakebuf_r>
 8001e96:	89a0      	ldrh	r0, [r4, #12]
 8001e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e9c:	f010 0301 	ands.w	r3, r0, #1
 8001ea0:	d00a      	beq.n	8001eb8 <__swsetup_r+0xbc>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60a3      	str	r3, [r4, #8]
 8001ea6:	6963      	ldr	r3, [r4, #20]
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	61a3      	str	r3, [r4, #24]
 8001eac:	6923      	ldr	r3, [r4, #16]
 8001eae:	b943      	cbnz	r3, 8001ec2 <__swsetup_r+0xc6>
 8001eb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001eb4:	d1ba      	bne.n	8001e2c <__swsetup_r+0x30>
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
 8001eb8:	0781      	lsls	r1, r0, #30
 8001eba:	bf58      	it	pl
 8001ebc:	6963      	ldrpl	r3, [r4, #20]
 8001ebe:	60a3      	str	r3, [r4, #8]
 8001ec0:	e7f4      	b.n	8001eac <__swsetup_r+0xb0>
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	e7f7      	b.n	8001eb6 <__swsetup_r+0xba>
 8001ec6:	bf00      	nop
 8001ec8:	2000002c 	.word	0x2000002c
 8001ecc:	080027dc 	.word	0x080027dc
 8001ed0:	080027fc 	.word	0x080027fc
 8001ed4:	080027bc 	.word	0x080027bc

08001ed8 <_close_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4d06      	ldr	r5, [pc, #24]	; (8001ef4 <_close_r+0x1c>)
 8001edc:	2300      	movs	r3, #0
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	602b      	str	r3, [r5, #0]
 8001ee4:	f7ff f839 	bl	8000f5a <_close>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	d102      	bne.n	8001ef2 <_close_r+0x1a>
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	b103      	cbz	r3, 8001ef2 <_close_r+0x1a>
 8001ef0:	6023      	str	r3, [r4, #0]
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
 8001ef4:	200001cc 	.word	0x200001cc

08001ef8 <_lseek_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4d07      	ldr	r5, [pc, #28]	; (8001f18 <_lseek_r+0x20>)
 8001efc:	4604      	mov	r4, r0
 8001efe:	4608      	mov	r0, r1
 8001f00:	4611      	mov	r1, r2
 8001f02:	2200      	movs	r2, #0
 8001f04:	602a      	str	r2, [r5, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff f84e 	bl	8000fa8 <_lseek>
 8001f0c:	1c43      	adds	r3, r0, #1
 8001f0e:	d102      	bne.n	8001f16 <_lseek_r+0x1e>
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	b103      	cbz	r3, 8001f16 <_lseek_r+0x1e>
 8001f14:	6023      	str	r3, [r4, #0]
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
 8001f18:	200001cc 	.word	0x200001cc

08001f1c <__swhatbuf_r>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	460e      	mov	r6, r1
 8001f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f24:	2900      	cmp	r1, #0
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	da07      	bge.n	8001f3e <__swhatbuf_r+0x22>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	602b      	str	r3, [r5, #0]
 8001f32:	89b3      	ldrh	r3, [r6, #12]
 8001f34:	061a      	lsls	r2, r3, #24
 8001f36:	d410      	bmi.n	8001f5a <__swhatbuf_r+0x3e>
 8001f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3c:	e00e      	b.n	8001f5c <__swhatbuf_r+0x40>
 8001f3e:	466a      	mov	r2, sp
 8001f40:	f000 fbac 	bl	800269c <_fstat_r>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	dbf2      	blt.n	8001f2e <__swhatbuf_r+0x12>
 8001f48:	9a01      	ldr	r2, [sp, #4]
 8001f4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f52:	425a      	negs	r2, r3
 8001f54:	415a      	adcs	r2, r3
 8001f56:	602a      	str	r2, [r5, #0]
 8001f58:	e7ee      	b.n	8001f38 <__swhatbuf_r+0x1c>
 8001f5a:	2340      	movs	r3, #64	; 0x40
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	6023      	str	r3, [r4, #0]
 8001f60:	b016      	add	sp, #88	; 0x58
 8001f62:	bd70      	pop	{r4, r5, r6, pc}

08001f64 <__smakebuf_r>:
 8001f64:	898b      	ldrh	r3, [r1, #12]
 8001f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f68:	079d      	lsls	r5, r3, #30
 8001f6a:	4606      	mov	r6, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	d507      	bpl.n	8001f80 <__smakebuf_r+0x1c>
 8001f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f74:	6023      	str	r3, [r4, #0]
 8001f76:	6123      	str	r3, [r4, #16]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	6163      	str	r3, [r4, #20]
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	ab01      	add	r3, sp, #4
 8001f82:	466a      	mov	r2, sp
 8001f84:	f7ff ffca 	bl	8001f1c <__swhatbuf_r>
 8001f88:	9900      	ldr	r1, [sp, #0]
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f7ff fcc3 	bl	8001918 <_malloc_r>
 8001f92:	b948      	cbnz	r0, 8001fa8 <__smakebuf_r+0x44>
 8001f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f98:	059a      	lsls	r2, r3, #22
 8001f9a:	d4ef      	bmi.n	8001f7c <__smakebuf_r+0x18>
 8001f9c:	f023 0303 	bic.w	r3, r3, #3
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	81a3      	strh	r3, [r4, #12]
 8001fa6:	e7e3      	b.n	8001f70 <__smakebuf_r+0xc>
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <__smakebuf_r+0x7c>)
 8001faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fac:	89a3      	ldrh	r3, [r4, #12]
 8001fae:	6020      	str	r0, [r4, #0]
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	81a3      	strh	r3, [r4, #12]
 8001fb6:	9b00      	ldr	r3, [sp, #0]
 8001fb8:	6163      	str	r3, [r4, #20]
 8001fba:	9b01      	ldr	r3, [sp, #4]
 8001fbc:	6120      	str	r0, [r4, #16]
 8001fbe:	b15b      	cbz	r3, 8001fd8 <__smakebuf_r+0x74>
 8001fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	f000 fb7b 	bl	80026c0 <_isatty_r>
 8001fca:	b128      	cbz	r0, 8001fd8 <__smakebuf_r+0x74>
 8001fcc:	89a3      	ldrh	r3, [r4, #12]
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	81a3      	strh	r3, [r4, #12]
 8001fd8:	89a0      	ldrh	r0, [r4, #12]
 8001fda:	4305      	orrs	r5, r0
 8001fdc:	81a5      	strh	r5, [r4, #12]
 8001fde:	e7cd      	b.n	8001f7c <__smakebuf_r+0x18>
 8001fe0:	08001675 	.word	0x08001675

08001fe4 <malloc>:
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <malloc+0xc>)
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	f7ff bc95 	b.w	8001918 <_malloc_r>
 8001fee:	bf00      	nop
 8001ff0:	2000002c 	.word	0x2000002c

08001ff4 <__malloc_lock>:
 8001ff4:	4801      	ldr	r0, [pc, #4]	; (8001ffc <__malloc_lock+0x8>)
 8001ff6:	f7ff bc34 	b.w	8001862 <__retarget_lock_acquire_recursive>
 8001ffa:	bf00      	nop
 8001ffc:	200001c4 	.word	0x200001c4

08002000 <__malloc_unlock>:
 8002000:	4801      	ldr	r0, [pc, #4]	; (8002008 <__malloc_unlock+0x8>)
 8002002:	f7ff bc2f 	b.w	8001864 <__retarget_lock_release_recursive>
 8002006:	bf00      	nop
 8002008:	200001c4 	.word	0x200001c4

0800200c <__sfputc_r>:
 800200c:	6893      	ldr	r3, [r2, #8]
 800200e:	3b01      	subs	r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	b410      	push	{r4}
 8002014:	6093      	str	r3, [r2, #8]
 8002016:	da08      	bge.n	800202a <__sfputc_r+0x1e>
 8002018:	6994      	ldr	r4, [r2, #24]
 800201a:	42a3      	cmp	r3, r4
 800201c:	db01      	blt.n	8002022 <__sfputc_r+0x16>
 800201e:	290a      	cmp	r1, #10
 8002020:	d103      	bne.n	800202a <__sfputc_r+0x1e>
 8002022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002026:	f7ff be97 	b.w	8001d58 <__swbuf_r>
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	1c58      	adds	r0, r3, #1
 800202e:	6010      	str	r0, [r2, #0]
 8002030:	7019      	strb	r1, [r3, #0]
 8002032:	4608      	mov	r0, r1
 8002034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002038:	4770      	bx	lr

0800203a <__sfputs_r>:
 800203a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203c:	4606      	mov	r6, r0
 800203e:	460f      	mov	r7, r1
 8002040:	4614      	mov	r4, r2
 8002042:	18d5      	adds	r5, r2, r3
 8002044:	42ac      	cmp	r4, r5
 8002046:	d101      	bne.n	800204c <__sfputs_r+0x12>
 8002048:	2000      	movs	r0, #0
 800204a:	e007      	b.n	800205c <__sfputs_r+0x22>
 800204c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002050:	463a      	mov	r2, r7
 8002052:	4630      	mov	r0, r6
 8002054:	f7ff ffda 	bl	800200c <__sfputc_r>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d1f3      	bne.n	8002044 <__sfputs_r+0xa>
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002060 <_vfiprintf_r>:
 8002060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002064:	460d      	mov	r5, r1
 8002066:	b09d      	sub	sp, #116	; 0x74
 8002068:	4614      	mov	r4, r2
 800206a:	4698      	mov	r8, r3
 800206c:	4606      	mov	r6, r0
 800206e:	b118      	cbz	r0, 8002078 <_vfiprintf_r+0x18>
 8002070:	6983      	ldr	r3, [r0, #24]
 8002072:	b90b      	cbnz	r3, 8002078 <_vfiprintf_r+0x18>
 8002074:	f7ff fb32 	bl	80016dc <__sinit>
 8002078:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <_vfiprintf_r+0x240>)
 800207a:	429d      	cmp	r5, r3
 800207c:	d11b      	bne.n	80020b6 <_vfiprintf_r+0x56>
 800207e:	6875      	ldr	r5, [r6, #4]
 8002080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002082:	07d9      	lsls	r1, r3, #31
 8002084:	d405      	bmi.n	8002092 <_vfiprintf_r+0x32>
 8002086:	89ab      	ldrh	r3, [r5, #12]
 8002088:	059a      	lsls	r2, r3, #22
 800208a:	d402      	bmi.n	8002092 <_vfiprintf_r+0x32>
 800208c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800208e:	f7ff fbe8 	bl	8001862 <__retarget_lock_acquire_recursive>
 8002092:	89ab      	ldrh	r3, [r5, #12]
 8002094:	071b      	lsls	r3, r3, #28
 8002096:	d501      	bpl.n	800209c <_vfiprintf_r+0x3c>
 8002098:	692b      	ldr	r3, [r5, #16]
 800209a:	b9eb      	cbnz	r3, 80020d8 <_vfiprintf_r+0x78>
 800209c:	4629      	mov	r1, r5
 800209e:	4630      	mov	r0, r6
 80020a0:	f7ff feac 	bl	8001dfc <__swsetup_r>
 80020a4:	b1c0      	cbz	r0, 80020d8 <_vfiprintf_r+0x78>
 80020a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020a8:	07dc      	lsls	r4, r3, #31
 80020aa:	d50e      	bpl.n	80020ca <_vfiprintf_r+0x6a>
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	b01d      	add	sp, #116	; 0x74
 80020b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b6:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <_vfiprintf_r+0x244>)
 80020b8:	429d      	cmp	r5, r3
 80020ba:	d101      	bne.n	80020c0 <_vfiprintf_r+0x60>
 80020bc:	68b5      	ldr	r5, [r6, #8]
 80020be:	e7df      	b.n	8002080 <_vfiprintf_r+0x20>
 80020c0:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <_vfiprintf_r+0x248>)
 80020c2:	429d      	cmp	r5, r3
 80020c4:	bf08      	it	eq
 80020c6:	68f5      	ldreq	r5, [r6, #12]
 80020c8:	e7da      	b.n	8002080 <_vfiprintf_r+0x20>
 80020ca:	89ab      	ldrh	r3, [r5, #12]
 80020cc:	0598      	lsls	r0, r3, #22
 80020ce:	d4ed      	bmi.n	80020ac <_vfiprintf_r+0x4c>
 80020d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d2:	f7ff fbc7 	bl	8001864 <__retarget_lock_release_recursive>
 80020d6:	e7e9      	b.n	80020ac <_vfiprintf_r+0x4c>
 80020d8:	2300      	movs	r3, #0
 80020da:	9309      	str	r3, [sp, #36]	; 0x24
 80020dc:	2320      	movs	r3, #32
 80020de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80020e6:	2330      	movs	r3, #48	; 0x30
 80020e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80022ac <_vfiprintf_r+0x24c>
 80020ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020f0:	f04f 0901 	mov.w	r9, #1
 80020f4:	4623      	mov	r3, r4
 80020f6:	469a      	mov	sl, r3
 80020f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020fc:	b10a      	cbz	r2, 8002102 <_vfiprintf_r+0xa2>
 80020fe:	2a25      	cmp	r2, #37	; 0x25
 8002100:	d1f9      	bne.n	80020f6 <_vfiprintf_r+0x96>
 8002102:	ebba 0b04 	subs.w	fp, sl, r4
 8002106:	d00b      	beq.n	8002120 <_vfiprintf_r+0xc0>
 8002108:	465b      	mov	r3, fp
 800210a:	4622      	mov	r2, r4
 800210c:	4629      	mov	r1, r5
 800210e:	4630      	mov	r0, r6
 8002110:	f7ff ff93 	bl	800203a <__sfputs_r>
 8002114:	3001      	adds	r0, #1
 8002116:	f000 80aa 	beq.w	800226e <_vfiprintf_r+0x20e>
 800211a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800211c:	445a      	add	r2, fp
 800211e:	9209      	str	r2, [sp, #36]	; 0x24
 8002120:	f89a 3000 	ldrb.w	r3, [sl]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a2 	beq.w	800226e <_vfiprintf_r+0x20e>
 800212a:	2300      	movs	r3, #0
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002134:	f10a 0a01 	add.w	sl, sl, #1
 8002138:	9304      	str	r3, [sp, #16]
 800213a:	9307      	str	r3, [sp, #28]
 800213c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002140:	931a      	str	r3, [sp, #104]	; 0x68
 8002142:	4654      	mov	r4, sl
 8002144:	2205      	movs	r2, #5
 8002146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800214a:	4858      	ldr	r0, [pc, #352]	; (80022ac <_vfiprintf_r+0x24c>)
 800214c:	f7fe f848 	bl	80001e0 <memchr>
 8002150:	9a04      	ldr	r2, [sp, #16]
 8002152:	b9d8      	cbnz	r0, 800218c <_vfiprintf_r+0x12c>
 8002154:	06d1      	lsls	r1, r2, #27
 8002156:	bf44      	itt	mi
 8002158:	2320      	movmi	r3, #32
 800215a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800215e:	0713      	lsls	r3, r2, #28
 8002160:	bf44      	itt	mi
 8002162:	232b      	movmi	r3, #43	; 0x2b
 8002164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002168:	f89a 3000 	ldrb.w	r3, [sl]
 800216c:	2b2a      	cmp	r3, #42	; 0x2a
 800216e:	d015      	beq.n	800219c <_vfiprintf_r+0x13c>
 8002170:	9a07      	ldr	r2, [sp, #28]
 8002172:	4654      	mov	r4, sl
 8002174:	2000      	movs	r0, #0
 8002176:	f04f 0c0a 	mov.w	ip, #10
 800217a:	4621      	mov	r1, r4
 800217c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002180:	3b30      	subs	r3, #48	; 0x30
 8002182:	2b09      	cmp	r3, #9
 8002184:	d94e      	bls.n	8002224 <_vfiprintf_r+0x1c4>
 8002186:	b1b0      	cbz	r0, 80021b6 <_vfiprintf_r+0x156>
 8002188:	9207      	str	r2, [sp, #28]
 800218a:	e014      	b.n	80021b6 <_vfiprintf_r+0x156>
 800218c:	eba0 0308 	sub.w	r3, r0, r8
 8002190:	fa09 f303 	lsl.w	r3, r9, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	9304      	str	r3, [sp, #16]
 8002198:	46a2      	mov	sl, r4
 800219a:	e7d2      	b.n	8002142 <_vfiprintf_r+0xe2>
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	1d19      	adds	r1, r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	9103      	str	r1, [sp, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bfbb      	ittet	lt
 80021a8:	425b      	neglt	r3, r3
 80021aa:	f042 0202 	orrlt.w	r2, r2, #2
 80021ae:	9307      	strge	r3, [sp, #28]
 80021b0:	9307      	strlt	r3, [sp, #28]
 80021b2:	bfb8      	it	lt
 80021b4:	9204      	strlt	r2, [sp, #16]
 80021b6:	7823      	ldrb	r3, [r4, #0]
 80021b8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ba:	d10c      	bne.n	80021d6 <_vfiprintf_r+0x176>
 80021bc:	7863      	ldrb	r3, [r4, #1]
 80021be:	2b2a      	cmp	r3, #42	; 0x2a
 80021c0:	d135      	bne.n	800222e <_vfiprintf_r+0x1ce>
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	1d1a      	adds	r2, r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	9203      	str	r2, [sp, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bfb8      	it	lt
 80021ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80021d2:	3402      	adds	r4, #2
 80021d4:	9305      	str	r3, [sp, #20]
 80021d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80022bc <_vfiprintf_r+0x25c>
 80021da:	7821      	ldrb	r1, [r4, #0]
 80021dc:	2203      	movs	r2, #3
 80021de:	4650      	mov	r0, sl
 80021e0:	f7fd fffe 	bl	80001e0 <memchr>
 80021e4:	b140      	cbz	r0, 80021f8 <_vfiprintf_r+0x198>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	eba0 000a 	sub.w	r0, r0, sl
 80021ec:	fa03 f000 	lsl.w	r0, r3, r0
 80021f0:	9b04      	ldr	r3, [sp, #16]
 80021f2:	4303      	orrs	r3, r0
 80021f4:	3401      	adds	r4, #1
 80021f6:	9304      	str	r3, [sp, #16]
 80021f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021fc:	482c      	ldr	r0, [pc, #176]	; (80022b0 <_vfiprintf_r+0x250>)
 80021fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002202:	2206      	movs	r2, #6
 8002204:	f7fd ffec 	bl	80001e0 <memchr>
 8002208:	2800      	cmp	r0, #0
 800220a:	d03f      	beq.n	800228c <_vfiprintf_r+0x22c>
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <_vfiprintf_r+0x254>)
 800220e:	bb1b      	cbnz	r3, 8002258 <_vfiprintf_r+0x1f8>
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	3307      	adds	r3, #7
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	3308      	adds	r3, #8
 800221a:	9303      	str	r3, [sp, #12]
 800221c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800221e:	443b      	add	r3, r7
 8002220:	9309      	str	r3, [sp, #36]	; 0x24
 8002222:	e767      	b.n	80020f4 <_vfiprintf_r+0x94>
 8002224:	fb0c 3202 	mla	r2, ip, r2, r3
 8002228:	460c      	mov	r4, r1
 800222a:	2001      	movs	r0, #1
 800222c:	e7a5      	b.n	800217a <_vfiprintf_r+0x11a>
 800222e:	2300      	movs	r3, #0
 8002230:	3401      	adds	r4, #1
 8002232:	9305      	str	r3, [sp, #20]
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0c0a 	mov.w	ip, #10
 800223a:	4620      	mov	r0, r4
 800223c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002240:	3a30      	subs	r2, #48	; 0x30
 8002242:	2a09      	cmp	r2, #9
 8002244:	d903      	bls.n	800224e <_vfiprintf_r+0x1ee>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0c5      	beq.n	80021d6 <_vfiprintf_r+0x176>
 800224a:	9105      	str	r1, [sp, #20]
 800224c:	e7c3      	b.n	80021d6 <_vfiprintf_r+0x176>
 800224e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002252:	4604      	mov	r4, r0
 8002254:	2301      	movs	r3, #1
 8002256:	e7f0      	b.n	800223a <_vfiprintf_r+0x1da>
 8002258:	ab03      	add	r3, sp, #12
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	462a      	mov	r2, r5
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <_vfiprintf_r+0x258>)
 8002260:	a904      	add	r1, sp, #16
 8002262:	4630      	mov	r0, r6
 8002264:	f3af 8000 	nop.w
 8002268:	4607      	mov	r7, r0
 800226a:	1c78      	adds	r0, r7, #1
 800226c:	d1d6      	bne.n	800221c <_vfiprintf_r+0x1bc>
 800226e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002270:	07d9      	lsls	r1, r3, #31
 8002272:	d405      	bmi.n	8002280 <_vfiprintf_r+0x220>
 8002274:	89ab      	ldrh	r3, [r5, #12]
 8002276:	059a      	lsls	r2, r3, #22
 8002278:	d402      	bmi.n	8002280 <_vfiprintf_r+0x220>
 800227a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800227c:	f7ff faf2 	bl	8001864 <__retarget_lock_release_recursive>
 8002280:	89ab      	ldrh	r3, [r5, #12]
 8002282:	065b      	lsls	r3, r3, #25
 8002284:	f53f af12 	bmi.w	80020ac <_vfiprintf_r+0x4c>
 8002288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800228a:	e711      	b.n	80020b0 <_vfiprintf_r+0x50>
 800228c:	ab03      	add	r3, sp, #12
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	462a      	mov	r2, r5
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <_vfiprintf_r+0x258>)
 8002294:	a904      	add	r1, sp, #16
 8002296:	4630      	mov	r0, r6
 8002298:	f000 f880 	bl	800239c <_printf_i>
 800229c:	e7e4      	b.n	8002268 <_vfiprintf_r+0x208>
 800229e:	bf00      	nop
 80022a0:	080027dc 	.word	0x080027dc
 80022a4:	080027fc 	.word	0x080027fc
 80022a8:	080027bc 	.word	0x080027bc
 80022ac:	08002820 	.word	0x08002820
 80022b0:	0800282a 	.word	0x0800282a
 80022b4:	00000000 	.word	0x00000000
 80022b8:	0800203b 	.word	0x0800203b
 80022bc:	08002826 	.word	0x08002826

080022c0 <_printf_common>:
 80022c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c4:	4616      	mov	r6, r2
 80022c6:	4699      	mov	r9, r3
 80022c8:	688a      	ldr	r2, [r1, #8]
 80022ca:	690b      	ldr	r3, [r1, #16]
 80022cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bfb8      	it	lt
 80022d4:	4613      	movlt	r3, r2
 80022d6:	6033      	str	r3, [r6, #0]
 80022d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022dc:	4607      	mov	r7, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	b10a      	cbz	r2, 80022e6 <_printf_common+0x26>
 80022e2:	3301      	adds	r3, #1
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	0699      	lsls	r1, r3, #26
 80022ea:	bf42      	ittt	mi
 80022ec:	6833      	ldrmi	r3, [r6, #0]
 80022ee:	3302      	addmi	r3, #2
 80022f0:	6033      	strmi	r3, [r6, #0]
 80022f2:	6825      	ldr	r5, [r4, #0]
 80022f4:	f015 0506 	ands.w	r5, r5, #6
 80022f8:	d106      	bne.n	8002308 <_printf_common+0x48>
 80022fa:	f104 0a19 	add.w	sl, r4, #25
 80022fe:	68e3      	ldr	r3, [r4, #12]
 8002300:	6832      	ldr	r2, [r6, #0]
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	42ab      	cmp	r3, r5
 8002306:	dc26      	bgt.n	8002356 <_printf_common+0x96>
 8002308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800230c:	1e13      	subs	r3, r2, #0
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	bf18      	it	ne
 8002312:	2301      	movne	r3, #1
 8002314:	0692      	lsls	r2, r2, #26
 8002316:	d42b      	bmi.n	8002370 <_printf_common+0xb0>
 8002318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800231c:	4649      	mov	r1, r9
 800231e:	4638      	mov	r0, r7
 8002320:	47c0      	blx	r8
 8002322:	3001      	adds	r0, #1
 8002324:	d01e      	beq.n	8002364 <_printf_common+0xa4>
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	68e5      	ldr	r5, [r4, #12]
 800232a:	6832      	ldr	r2, [r6, #0]
 800232c:	f003 0306 	and.w	r3, r3, #6
 8002330:	2b04      	cmp	r3, #4
 8002332:	bf08      	it	eq
 8002334:	1aad      	subeq	r5, r5, r2
 8002336:	68a3      	ldr	r3, [r4, #8]
 8002338:	6922      	ldr	r2, [r4, #16]
 800233a:	bf0c      	ite	eq
 800233c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002340:	2500      	movne	r5, #0
 8002342:	4293      	cmp	r3, r2
 8002344:	bfc4      	itt	gt
 8002346:	1a9b      	subgt	r3, r3, r2
 8002348:	18ed      	addgt	r5, r5, r3
 800234a:	2600      	movs	r6, #0
 800234c:	341a      	adds	r4, #26
 800234e:	42b5      	cmp	r5, r6
 8002350:	d11a      	bne.n	8002388 <_printf_common+0xc8>
 8002352:	2000      	movs	r0, #0
 8002354:	e008      	b.n	8002368 <_printf_common+0xa8>
 8002356:	2301      	movs	r3, #1
 8002358:	4652      	mov	r2, sl
 800235a:	4649      	mov	r1, r9
 800235c:	4638      	mov	r0, r7
 800235e:	47c0      	blx	r8
 8002360:	3001      	adds	r0, #1
 8002362:	d103      	bne.n	800236c <_printf_common+0xac>
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236c:	3501      	adds	r5, #1
 800236e:	e7c6      	b.n	80022fe <_printf_common+0x3e>
 8002370:	18e1      	adds	r1, r4, r3
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	2030      	movs	r0, #48	; 0x30
 8002376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800237a:	4422      	add	r2, r4
 800237c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002384:	3302      	adds	r3, #2
 8002386:	e7c7      	b.n	8002318 <_printf_common+0x58>
 8002388:	2301      	movs	r3, #1
 800238a:	4622      	mov	r2, r4
 800238c:	4649      	mov	r1, r9
 800238e:	4638      	mov	r0, r7
 8002390:	47c0      	blx	r8
 8002392:	3001      	adds	r0, #1
 8002394:	d0e6      	beq.n	8002364 <_printf_common+0xa4>
 8002396:	3601      	adds	r6, #1
 8002398:	e7d9      	b.n	800234e <_printf_common+0x8e>
	...

0800239c <_printf_i>:
 800239c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023a0:	460c      	mov	r4, r1
 80023a2:	4691      	mov	r9, r2
 80023a4:	7e27      	ldrb	r7, [r4, #24]
 80023a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80023a8:	2f78      	cmp	r7, #120	; 0x78
 80023aa:	4680      	mov	r8, r0
 80023ac:	469a      	mov	sl, r3
 80023ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023b2:	d807      	bhi.n	80023c4 <_printf_i+0x28>
 80023b4:	2f62      	cmp	r7, #98	; 0x62
 80023b6:	d80a      	bhi.n	80023ce <_printf_i+0x32>
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	f000 80d8 	beq.w	800256e <_printf_i+0x1d2>
 80023be:	2f58      	cmp	r7, #88	; 0x58
 80023c0:	f000 80a3 	beq.w	800250a <_printf_i+0x16e>
 80023c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023cc:	e03a      	b.n	8002444 <_printf_i+0xa8>
 80023ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023d2:	2b15      	cmp	r3, #21
 80023d4:	d8f6      	bhi.n	80023c4 <_printf_i+0x28>
 80023d6:	a001      	add	r0, pc, #4	; (adr r0, 80023dc <_printf_i+0x40>)
 80023d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80023dc:	08002435 	.word	0x08002435
 80023e0:	08002449 	.word	0x08002449
 80023e4:	080023c5 	.word	0x080023c5
 80023e8:	080023c5 	.word	0x080023c5
 80023ec:	080023c5 	.word	0x080023c5
 80023f0:	080023c5 	.word	0x080023c5
 80023f4:	08002449 	.word	0x08002449
 80023f8:	080023c5 	.word	0x080023c5
 80023fc:	080023c5 	.word	0x080023c5
 8002400:	080023c5 	.word	0x080023c5
 8002404:	080023c5 	.word	0x080023c5
 8002408:	08002555 	.word	0x08002555
 800240c:	08002479 	.word	0x08002479
 8002410:	08002537 	.word	0x08002537
 8002414:	080023c5 	.word	0x080023c5
 8002418:	080023c5 	.word	0x080023c5
 800241c:	08002577 	.word	0x08002577
 8002420:	080023c5 	.word	0x080023c5
 8002424:	08002479 	.word	0x08002479
 8002428:	080023c5 	.word	0x080023c5
 800242c:	080023c5 	.word	0x080023c5
 8002430:	0800253f 	.word	0x0800253f
 8002434:	680b      	ldr	r3, [r1, #0]
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	600a      	str	r2, [r1, #0]
 800243c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002444:	2301      	movs	r3, #1
 8002446:	e0a3      	b.n	8002590 <_printf_i+0x1f4>
 8002448:	6825      	ldr	r5, [r4, #0]
 800244a:	6808      	ldr	r0, [r1, #0]
 800244c:	062e      	lsls	r6, r5, #24
 800244e:	f100 0304 	add.w	r3, r0, #4
 8002452:	d50a      	bpl.n	800246a <_printf_i+0xce>
 8002454:	6805      	ldr	r5, [r0, #0]
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	2d00      	cmp	r5, #0
 800245a:	da03      	bge.n	8002464 <_printf_i+0xc8>
 800245c:	232d      	movs	r3, #45	; 0x2d
 800245e:	426d      	negs	r5, r5
 8002460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002464:	485e      	ldr	r0, [pc, #376]	; (80025e0 <_printf_i+0x244>)
 8002466:	230a      	movs	r3, #10
 8002468:	e019      	b.n	800249e <_printf_i+0x102>
 800246a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800246e:	6805      	ldr	r5, [r0, #0]
 8002470:	600b      	str	r3, [r1, #0]
 8002472:	bf18      	it	ne
 8002474:	b22d      	sxthne	r5, r5
 8002476:	e7ef      	b.n	8002458 <_printf_i+0xbc>
 8002478:	680b      	ldr	r3, [r1, #0]
 800247a:	6825      	ldr	r5, [r4, #0]
 800247c:	1d18      	adds	r0, r3, #4
 800247e:	6008      	str	r0, [r1, #0]
 8002480:	0628      	lsls	r0, r5, #24
 8002482:	d501      	bpl.n	8002488 <_printf_i+0xec>
 8002484:	681d      	ldr	r5, [r3, #0]
 8002486:	e002      	b.n	800248e <_printf_i+0xf2>
 8002488:	0669      	lsls	r1, r5, #25
 800248a:	d5fb      	bpl.n	8002484 <_printf_i+0xe8>
 800248c:	881d      	ldrh	r5, [r3, #0]
 800248e:	4854      	ldr	r0, [pc, #336]	; (80025e0 <_printf_i+0x244>)
 8002490:	2f6f      	cmp	r7, #111	; 0x6f
 8002492:	bf0c      	ite	eq
 8002494:	2308      	moveq	r3, #8
 8002496:	230a      	movne	r3, #10
 8002498:	2100      	movs	r1, #0
 800249a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800249e:	6866      	ldr	r6, [r4, #4]
 80024a0:	60a6      	str	r6, [r4, #8]
 80024a2:	2e00      	cmp	r6, #0
 80024a4:	bfa2      	ittt	ge
 80024a6:	6821      	ldrge	r1, [r4, #0]
 80024a8:	f021 0104 	bicge.w	r1, r1, #4
 80024ac:	6021      	strge	r1, [r4, #0]
 80024ae:	b90d      	cbnz	r5, 80024b4 <_printf_i+0x118>
 80024b0:	2e00      	cmp	r6, #0
 80024b2:	d04d      	beq.n	8002550 <_printf_i+0x1b4>
 80024b4:	4616      	mov	r6, r2
 80024b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80024ba:	fb03 5711 	mls	r7, r3, r1, r5
 80024be:	5dc7      	ldrb	r7, [r0, r7]
 80024c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024c4:	462f      	mov	r7, r5
 80024c6:	42bb      	cmp	r3, r7
 80024c8:	460d      	mov	r5, r1
 80024ca:	d9f4      	bls.n	80024b6 <_printf_i+0x11a>
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d10b      	bne.n	80024e8 <_printf_i+0x14c>
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	07df      	lsls	r7, r3, #31
 80024d4:	d508      	bpl.n	80024e8 <_printf_i+0x14c>
 80024d6:	6923      	ldr	r3, [r4, #16]
 80024d8:	6861      	ldr	r1, [r4, #4]
 80024da:	4299      	cmp	r1, r3
 80024dc:	bfde      	ittt	le
 80024de:	2330      	movle	r3, #48	; 0x30
 80024e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80024e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80024e8:	1b92      	subs	r2, r2, r6
 80024ea:	6122      	str	r2, [r4, #16]
 80024ec:	f8cd a000 	str.w	sl, [sp]
 80024f0:	464b      	mov	r3, r9
 80024f2:	aa03      	add	r2, sp, #12
 80024f4:	4621      	mov	r1, r4
 80024f6:	4640      	mov	r0, r8
 80024f8:	f7ff fee2 	bl	80022c0 <_printf_common>
 80024fc:	3001      	adds	r0, #1
 80024fe:	d14c      	bne.n	800259a <_printf_i+0x1fe>
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	b004      	add	sp, #16
 8002506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250a:	4835      	ldr	r0, [pc, #212]	; (80025e0 <_printf_i+0x244>)
 800250c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	680e      	ldr	r6, [r1, #0]
 8002514:	061f      	lsls	r7, r3, #24
 8002516:	f856 5b04 	ldr.w	r5, [r6], #4
 800251a:	600e      	str	r6, [r1, #0]
 800251c:	d514      	bpl.n	8002548 <_printf_i+0x1ac>
 800251e:	07d9      	lsls	r1, r3, #31
 8002520:	bf44      	itt	mi
 8002522:	f043 0320 	orrmi.w	r3, r3, #32
 8002526:	6023      	strmi	r3, [r4, #0]
 8002528:	b91d      	cbnz	r5, 8002532 <_printf_i+0x196>
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	f023 0320 	bic.w	r3, r3, #32
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	2310      	movs	r3, #16
 8002534:	e7b0      	b.n	8002498 <_printf_i+0xfc>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	f043 0320 	orr.w	r3, r3, #32
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	2378      	movs	r3, #120	; 0x78
 8002540:	4828      	ldr	r0, [pc, #160]	; (80025e4 <_printf_i+0x248>)
 8002542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002546:	e7e3      	b.n	8002510 <_printf_i+0x174>
 8002548:	065e      	lsls	r6, r3, #25
 800254a:	bf48      	it	mi
 800254c:	b2ad      	uxthmi	r5, r5
 800254e:	e7e6      	b.n	800251e <_printf_i+0x182>
 8002550:	4616      	mov	r6, r2
 8002552:	e7bb      	b.n	80024cc <_printf_i+0x130>
 8002554:	680b      	ldr	r3, [r1, #0]
 8002556:	6826      	ldr	r6, [r4, #0]
 8002558:	6960      	ldr	r0, [r4, #20]
 800255a:	1d1d      	adds	r5, r3, #4
 800255c:	600d      	str	r5, [r1, #0]
 800255e:	0635      	lsls	r5, r6, #24
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	d501      	bpl.n	8002568 <_printf_i+0x1cc>
 8002564:	6018      	str	r0, [r3, #0]
 8002566:	e002      	b.n	800256e <_printf_i+0x1d2>
 8002568:	0671      	lsls	r1, r6, #25
 800256a:	d5fb      	bpl.n	8002564 <_printf_i+0x1c8>
 800256c:	8018      	strh	r0, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	6123      	str	r3, [r4, #16]
 8002572:	4616      	mov	r6, r2
 8002574:	e7ba      	b.n	80024ec <_printf_i+0x150>
 8002576:	680b      	ldr	r3, [r1, #0]
 8002578:	1d1a      	adds	r2, r3, #4
 800257a:	600a      	str	r2, [r1, #0]
 800257c:	681e      	ldr	r6, [r3, #0]
 800257e:	6862      	ldr	r2, [r4, #4]
 8002580:	2100      	movs	r1, #0
 8002582:	4630      	mov	r0, r6
 8002584:	f7fd fe2c 	bl	80001e0 <memchr>
 8002588:	b108      	cbz	r0, 800258e <_printf_i+0x1f2>
 800258a:	1b80      	subs	r0, r0, r6
 800258c:	6060      	str	r0, [r4, #4]
 800258e:	6863      	ldr	r3, [r4, #4]
 8002590:	6123      	str	r3, [r4, #16]
 8002592:	2300      	movs	r3, #0
 8002594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002598:	e7a8      	b.n	80024ec <_printf_i+0x150>
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	4632      	mov	r2, r6
 800259e:	4649      	mov	r1, r9
 80025a0:	4640      	mov	r0, r8
 80025a2:	47d0      	blx	sl
 80025a4:	3001      	adds	r0, #1
 80025a6:	d0ab      	beq.n	8002500 <_printf_i+0x164>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	079b      	lsls	r3, r3, #30
 80025ac:	d413      	bmi.n	80025d6 <_printf_i+0x23a>
 80025ae:	68e0      	ldr	r0, [r4, #12]
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	4298      	cmp	r0, r3
 80025b4:	bfb8      	it	lt
 80025b6:	4618      	movlt	r0, r3
 80025b8:	e7a4      	b.n	8002504 <_printf_i+0x168>
 80025ba:	2301      	movs	r3, #1
 80025bc:	4632      	mov	r2, r6
 80025be:	4649      	mov	r1, r9
 80025c0:	4640      	mov	r0, r8
 80025c2:	47d0      	blx	sl
 80025c4:	3001      	adds	r0, #1
 80025c6:	d09b      	beq.n	8002500 <_printf_i+0x164>
 80025c8:	3501      	adds	r5, #1
 80025ca:	68e3      	ldr	r3, [r4, #12]
 80025cc:	9903      	ldr	r1, [sp, #12]
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	42ab      	cmp	r3, r5
 80025d2:	dcf2      	bgt.n	80025ba <_printf_i+0x21e>
 80025d4:	e7eb      	b.n	80025ae <_printf_i+0x212>
 80025d6:	2500      	movs	r5, #0
 80025d8:	f104 0619 	add.w	r6, r4, #25
 80025dc:	e7f5      	b.n	80025ca <_printf_i+0x22e>
 80025de:	bf00      	nop
 80025e0:	08002831 	.word	0x08002831
 80025e4:	08002842 	.word	0x08002842

080025e8 <_putc_r>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	460d      	mov	r5, r1
 80025ec:	4614      	mov	r4, r2
 80025ee:	4606      	mov	r6, r0
 80025f0:	b118      	cbz	r0, 80025fa <_putc_r+0x12>
 80025f2:	6983      	ldr	r3, [r0, #24]
 80025f4:	b90b      	cbnz	r3, 80025fa <_putc_r+0x12>
 80025f6:	f7ff f871 	bl	80016dc <__sinit>
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <_putc_r+0x84>)
 80025fc:	429c      	cmp	r4, r3
 80025fe:	d124      	bne.n	800264a <_putc_r+0x62>
 8002600:	6874      	ldr	r4, [r6, #4]
 8002602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002604:	07d8      	lsls	r0, r3, #31
 8002606:	d405      	bmi.n	8002614 <_putc_r+0x2c>
 8002608:	89a3      	ldrh	r3, [r4, #12]
 800260a:	0599      	lsls	r1, r3, #22
 800260c:	d402      	bmi.n	8002614 <_putc_r+0x2c>
 800260e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002610:	f7ff f927 	bl	8001862 <__retarget_lock_acquire_recursive>
 8002614:	68a3      	ldr	r3, [r4, #8]
 8002616:	3b01      	subs	r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	60a3      	str	r3, [r4, #8]
 800261c:	da05      	bge.n	800262a <_putc_r+0x42>
 800261e:	69a2      	ldr	r2, [r4, #24]
 8002620:	4293      	cmp	r3, r2
 8002622:	db1c      	blt.n	800265e <_putc_r+0x76>
 8002624:	b2eb      	uxtb	r3, r5
 8002626:	2b0a      	cmp	r3, #10
 8002628:	d019      	beq.n	800265e <_putc_r+0x76>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	6022      	str	r2, [r4, #0]
 8002630:	701d      	strb	r5, [r3, #0]
 8002632:	b2ed      	uxtb	r5, r5
 8002634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002636:	07da      	lsls	r2, r3, #31
 8002638:	d405      	bmi.n	8002646 <_putc_r+0x5e>
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	059b      	lsls	r3, r3, #22
 800263e:	d402      	bmi.n	8002646 <_putc_r+0x5e>
 8002640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002642:	f7ff f90f 	bl	8001864 <__retarget_lock_release_recursive>
 8002646:	4628      	mov	r0, r5
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <_putc_r+0x88>)
 800264c:	429c      	cmp	r4, r3
 800264e:	d101      	bne.n	8002654 <_putc_r+0x6c>
 8002650:	68b4      	ldr	r4, [r6, #8]
 8002652:	e7d6      	b.n	8002602 <_putc_r+0x1a>
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_putc_r+0x8c>)
 8002656:	429c      	cmp	r4, r3
 8002658:	bf08      	it	eq
 800265a:	68f4      	ldreq	r4, [r6, #12]
 800265c:	e7d1      	b.n	8002602 <_putc_r+0x1a>
 800265e:	4629      	mov	r1, r5
 8002660:	4622      	mov	r2, r4
 8002662:	4630      	mov	r0, r6
 8002664:	f7ff fb78 	bl	8001d58 <__swbuf_r>
 8002668:	4605      	mov	r5, r0
 800266a:	e7e3      	b.n	8002634 <_putc_r+0x4c>
 800266c:	080027dc 	.word	0x080027dc
 8002670:	080027fc 	.word	0x080027fc
 8002674:	080027bc 	.word	0x080027bc

08002678 <_read_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4d07      	ldr	r5, [pc, #28]	; (8002698 <_read_r+0x20>)
 800267c:	4604      	mov	r4, r0
 800267e:	4608      	mov	r0, r1
 8002680:	4611      	mov	r1, r2
 8002682:	2200      	movs	r2, #0
 8002684:	602a      	str	r2, [r5, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	f7fe fc4a 	bl	8000f20 <_read>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d102      	bne.n	8002696 <_read_r+0x1e>
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	b103      	cbz	r3, 8002696 <_read_r+0x1e>
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	bd38      	pop	{r3, r4, r5, pc}
 8002698:	200001cc 	.word	0x200001cc

0800269c <_fstat_r>:
 800269c:	b538      	push	{r3, r4, r5, lr}
 800269e:	4d07      	ldr	r5, [pc, #28]	; (80026bc <_fstat_r+0x20>)
 80026a0:	2300      	movs	r3, #0
 80026a2:	4604      	mov	r4, r0
 80026a4:	4608      	mov	r0, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	602b      	str	r3, [r5, #0]
 80026aa:	f7fe fc62 	bl	8000f72 <_fstat>
 80026ae:	1c43      	adds	r3, r0, #1
 80026b0:	d102      	bne.n	80026b8 <_fstat_r+0x1c>
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	b103      	cbz	r3, 80026b8 <_fstat_r+0x1c>
 80026b6:	6023      	str	r3, [r4, #0]
 80026b8:	bd38      	pop	{r3, r4, r5, pc}
 80026ba:	bf00      	nop
 80026bc:	200001cc 	.word	0x200001cc

080026c0 <_isatty_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4d06      	ldr	r5, [pc, #24]	; (80026dc <_isatty_r+0x1c>)
 80026c4:	2300      	movs	r3, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	602b      	str	r3, [r5, #0]
 80026cc:	f7fe fc61 	bl	8000f92 <_isatty>
 80026d0:	1c43      	adds	r3, r0, #1
 80026d2:	d102      	bne.n	80026da <_isatty_r+0x1a>
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	b103      	cbz	r3, 80026da <_isatty_r+0x1a>
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	bd38      	pop	{r3, r4, r5, pc}
 80026dc:	200001cc 	.word	0x200001cc

080026e0 <_sbrk>:
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <_sbrk+0x14>)
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	4602      	mov	r2, r0
 80026e6:	b909      	cbnz	r1, 80026ec <_sbrk+0xc>
 80026e8:	4903      	ldr	r1, [pc, #12]	; (80026f8 <_sbrk+0x18>)
 80026ea:	6019      	str	r1, [r3, #0]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	4402      	add	r2, r0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4770      	bx	lr
 80026f4:	200001b8 	.word	0x200001b8
 80026f8:	200001d0 	.word	0x200001d0

080026fc <_init>:
 80026fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fe:	bf00      	nop
 8002700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002702:	bc08      	pop	{r3}
 8002704:	469e      	mov	lr, r3
 8002706:	4770      	bx	lr

08002708 <_fini>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr
