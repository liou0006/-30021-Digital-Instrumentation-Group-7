
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08004c10  08004c10  00005c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fac  08004fac  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004fac  08004fac  00005fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb4  08004fb4  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004fbc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001c8  08005184  000061c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08005184  0000643c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b4d  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2c  00000000  00000000  0000ed45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00010878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  000113b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005030  00000000  00000000  00011c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c369  00000000  00000000  00016c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bf45  00000000  00000000  00022f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007eee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  0007ef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  00082fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bf4 	.word	0x08004bf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08004bf4 	.word	0x08004bf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bc0:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bc4:	015b      	lsls	r3, r3, #5
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f002 021f 	and.w	r2, r2, #31
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	015a      	lsls	r2, r3, #5
 8000bde:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <EXTI_GetITStatus+0x6c>)
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	f002 021f 	and.w	r2, r2, #31
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <EXTI_GetITStatus+0x5a>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e001      	b.n	8000c06 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40010414 	.word	0x40010414

08000c18 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	2201      	movs	r2, #1
 8000c28:	fa02 f103 	lsl.w	r1, r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	015a      	lsls	r2, r3, #5
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <EXTI_ClearITPendingBit+0x30>)
 8000c34:	4413      	add	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40010414 	.word	0x40010414

08000c4c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e07c      	b.n	8000d62 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d16b      	bne.n	8000d5c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <GPIO_Init+0x48>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d134      	bne.n	8000cfe <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	795b      	ldrb	r3, [r3, #5]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	889b      	ldrh	r3, [r3, #4]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2301      	movs	r3, #1
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	799b      	ldrb	r3, [r3, #6]
 8000cea:	4619      	mov	r1, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2103      	movs	r1, #3
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2103      	movs	r1, #3
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	79db      	ldrb	r3, [r3, #7]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	f67f af7f 	bls.w	8000c68 <GPIO_Init+0x1c>
    }
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2202      	movs	r2, #2
 8000d92:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dc8:	e002      	b.n	8000dd0 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	887a      	ldrh	r2, [r7, #2]
 8000dce:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	@ 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e04:	4b8b      	ldr	r3, [pc, #556]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d011      	beq.n	8000e38 <RCC_GetClocksFreq+0x5c>
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d837      	bhi.n	8000e8a <RCC_GetClocksFreq+0xae>
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <RCC_GetClocksFreq+0x4c>
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d004      	beq.n	8000e30 <RCC_GetClocksFreq+0x54>
 8000e26:	e030      	b.n	8000e8a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a83      	ldr	r2, [pc, #524]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e2c:	601a      	str	r2, [r3, #0]
      break;
 8000e2e:	e030      	b.n	8000e92 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a81      	ldr	r2, [pc, #516]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e34:	601a      	str	r2, [r3, #0]
      break;
 8000e36:	e02c      	b.n	8000e92 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000e38:	4b7e      	ldr	r3, [pc, #504]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000e40:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e42:	4b7c      	ldr	r3, [pc, #496]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3302      	adds	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	4a77      	ldr	r2, [pc, #476]	@ (800103c <RCC_GetClocksFreq+0x260>)
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e64:	e00d      	b.n	8000e82 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000e66:	4b73      	ldr	r3, [pc, #460]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000e72:	4a71      	ldr	r2, [pc, #452]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e86:	601a      	str	r2, [r3, #0]
      break;
 8000e88:	e003      	b.n	8000e92 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e8e:	601a      	str	r2, [r3, #0]
      break;
 8000e90:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e92:	4b68      	ldr	r3, [pc, #416]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e9a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000ea2:	4a67      	ldr	r2, [pc, #412]	@ (8001040 <RCC_GetClocksFreq+0x264>)
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	40da      	lsrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000eba:	4b5e      	ldr	r3, [pc, #376]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000ec2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000eca:	4a5d      	ldr	r2, [pc, #372]	@ (8001040 <RCC_GetClocksFreq+0x264>)
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	40da      	lsrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ee2:	4b54      	ldr	r3, [pc, #336]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000eea:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	0adb      	lsrs	r3, r3, #11
 8000ef0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000ef2:	4a53      	ldr	r2, [pc, #332]	@ (8001040 <RCC_GetClocksFreq+0x264>)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	40da      	lsrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000f12:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001044 <RCC_GetClocksFreq+0x268>)
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	e003      	b.n	8000f46 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8000f4e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f56:	4a3b      	ldr	r2, [pc, #236]	@ (8001044 <RCC_GetClocksFreq+0x268>)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	e003      	b.n	8000f82 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000f82:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d003      	beq.n	8000f96 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000f92:	619a      	str	r2, [r3, #24]
 8000f94:	e003      	b.n	8000f9e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	d003      	beq.n	8000fb2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000fae:	61da      	str	r2, [r3, #28]
 8000fb0:	e003      	b.n	8000fba <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fc6:	d10d      	bne.n	8000fe4 <RCC_GetClocksFreq+0x208>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d108      	bne.n	8000fe4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d104      	bne.n	8000fe4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	005a      	lsls	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	621a      	str	r2, [r3, #32]
 8000fe2:	e003      	b.n	8000fec <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff8:	d10d      	bne.n	8001016 <RCC_GetClocksFreq+0x23a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001000:	429a      	cmp	r2, r3
 8001002:	d108      	bne.n	8001016 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	429a      	cmp	r2, r3
 800100a:	d104      	bne.n	8001016 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	005a      	lsls	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
 8001014:	e003      	b.n	800101e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800101e:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
 8001032:	e028      	b.n	8001086 <RCC_GetClocksFreq+0x2aa>
 8001034:	40021000 	.word	0x40021000
 8001038:	007a1200 	.word	0x007a1200
 800103c:	003d0900 	.word	0x003d0900
 8001040:	08004c10 	.word	0x08004c10
 8001044:	08004c20 	.word	0x08004c20
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001048:	4b6c      	ldr	r3, [pc, #432]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d104      	bne.n	800105e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
 800105c:	e013      	b.n	8001086 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800105e:	4b67      	ldr	r3, [pc, #412]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d104      	bne.n	8001074 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
 8001072:	e008      	b.n	8001086 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001074:	4b61      	ldr	r3, [pc, #388]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d102      	bne.n	8001086 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a5f      	ldr	r2, [pc, #380]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001086:	4b5d      	ldr	r3, [pc, #372]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	62da      	str	r2, [r3, #44]	@ 0x2c
 800109a:	e021      	b.n	80010e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800109c:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a8:	d104      	bne.n	80010b4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010b2:	e015      	b.n	80010e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80010b4:	4b51      	ldr	r3, [pc, #324]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80010c0:	d104      	bne.n	80010cc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ca:	e009      	b.n	80010e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80010cc:	4b4b      	ldr	r3, [pc, #300]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80010d8:	d102      	bne.n	80010e0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a48      	ldr	r2, [pc, #288]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80010e0:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f4:	e021      	b.n	800113a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80010f6:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80010fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001102:	d104      	bne.n	800110e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
 800110c:	e015      	b.n	800113a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800110e:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001116:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800111a:	d104      	bne.n	8001126 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
 8001124:	e009      	b.n	800113a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001126:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800112e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001132:	d102      	bne.n	800113a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800113a:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d104      	bne.n	8001150 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	635a      	str	r2, [r3, #52]	@ 0x34
 800114e:	e021      	b.n	8001194 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001150:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800115c:	d104      	bne.n	8001168 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
 8001166:	e015      	b.n	8001194 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001170:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001174:	d104      	bne.n	8001180 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
 800117e:	e009      	b.n	8001194 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001188:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800118c:	d102      	bne.n	8001194 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80011a8:	e021      	b.n	80011ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80011b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011b6:	d104      	bne.n	80011c2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011c0:	e015      	b.n	80011ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80011ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011ce:	d104      	bne.n	80011da <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011d8:	e009      	b.n	80011ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80011e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80011e6:	d102      	bne.n	80011ee <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 80011ec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011ee:	bf00      	nop
 80011f0:	372c      	adds	r7, #44	@ 0x2c
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	007a1200 	.word	0x007a1200

08001204 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	4909      	ldr	r1, [pc, #36]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001222:	e006      	b.n	8001232 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	43db      	mvns	r3, r3
 800122c:	4904      	ldr	r1, [pc, #16]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 800122e:	4013      	ands	r3, r2
 8001230:	614b      	str	r3, [r1, #20]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	330c      	adds	r3, #12
 800125c:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	701a      	strb	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	891b      	ldrh	r3, [r3, #8]
 8001284:	b29a      	uxth	r2, r3
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	4013      	ands	r3, r2
 800128a:	b29b      	uxth	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012de:	b29a      	uxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	b29b      	uxth	r3, r3
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001322:	2201      	movs	r2, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d103      	bne.n	800133a <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	e005      	b.n	8001346 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d102      	bne.n	8001346 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3308      	adds	r3, #8
 8001344:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001358:	e006      	b.n	8001368 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43da      	mvns	r2, r3
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	@ 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e001      	b.n	8001398 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80013d0:	2201      	movs	r2, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4013      	ands	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e00d      	b.n	8001408 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d105      	bne.n	80013fe <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e004      	b.n	8001408 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	0c1b      	lsrs	r3, r3, #16
 800140c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800140e:	2201      	movs	r2, #1
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <USART_GetITStatus+0x8e>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	74fb      	strb	r3, [r7, #19]
 8001432:	e001      	b.n	8001438 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001438:	7cfb      	ldrb	r3, [r7, #19]
}
 800143a:	4618      	mov	r0, r3
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	2201      	movs	r2, #1
 800145a:	fa02 f103 	lsl.w	r1, r2, r3
 800145e:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <NVIC_EnableIRQ+0x30>)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4619      	mov	r1, r3
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <uart_put_char+0x30>)
 800148e:	f7ff ff1d 	bl	80012cc <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001492:	bf00      	nop
 8001494:	2180      	movs	r1, #128	@ 0x80
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <uart_put_char+0x30>)
 8001498:	f7ff ff6c 	bl	8001374 <USART_GetFlagStatus>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f8      	beq.n	8001494 <uart_put_char+0x18>
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004400 	.word	0x40004400

080014b0 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e012      	b.n	80014ea <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b0a      	cmp	r3, #10
 80014ce:	d102      	bne.n	80014d6 <_write_r+0x26>
            uart_put_char('\r');
 80014d0:	200d      	movs	r0, #13
 80014d2:	f7ff ffd3 	bl	800147c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ffcc 	bl	800147c <uart_put_char>
    for (n = 0; n < len; n++) {
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbe8      	blt.n	80014c4 <_write_r+0x14>
    }

    return len;
 80014f2:	683b      	ldr	r3, [r7, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001500:	4915      	ldr	r1, [pc, #84]	@ (8001558 <USART2_IRQHandler+0x5c>)
 8001502:	4816      	ldr	r0, [pc, #88]	@ (800155c <USART2_IRQHandler+0x60>)
 8001504:	f7ff ff4f 	bl	80013a6 <USART_GetITStatus>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d021      	beq.n	8001552 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <USART2_IRQHandler+0x60>)
 8001510:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001512:	b299      	uxth	r1, r3
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <USART2_IRQHandler+0x64>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	b2d0      	uxtb	r0, r2
 800151e:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <USART2_IRQHandler+0x64>)
 8001520:	7010      	strb	r0, [r2, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <USART2_IRQHandler+0x68>)
 8001528:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <USART2_IRQHandler+0x6c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2bff      	cmp	r3, #255	@ 0xff
 8001532:	d107      	bne.n	8001544 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <USART2_IRQHandler+0x70>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <USART2_IRQHandler+0x70>)
 8001540:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001542:	e006      	b.n	8001552 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <USART2_IRQHandler+0x6c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <USART2_IRQHandler+0x6c>)
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	00050105 	.word	0x00050105
 800155c:	40004400 	.word	0x40004400
 8001560:	200002e4 	.word	0x200002e4
 8001564:	200001e4 	.word	0x200001e4
 8001568:	200002e6 	.word	0x200002e6
 800156c:	200002e5 	.word	0x200002e5

08001570 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	@ 0x50
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001578:	4b86      	ldr	r3, [pc, #536]	@ (8001794 <uart_init+0x224>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fbbf 	bl	8002d04 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001586:	4b83      	ldr	r3, [pc, #524]	@ (8001794 <uart_init+0x224>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fbb8 	bl	8002d04 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001594:	4b80      	ldr	r3, [pc, #512]	@ (8001798 <uart_init+0x228>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4a7f      	ldr	r2, [pc, #508]	@ (8001798 <uart_init+0x228>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80015a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001798 <uart_init+0x228>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4a7c      	ldr	r2, [pc, #496]	@ (8001798 <uart_init+0x228>)
 80015a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015aa:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80015ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015ba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80015bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015ca:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80015cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80015da:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80015dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015e6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80015ea:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80015ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015fa:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80015fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001606:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800160a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 800160c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001610:	889b      	ldrh	r3, [r3, #4]
 8001612:	b29b      	uxth	r3, r3
 8001614:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001618:	f023 030c 	bic.w	r3, r3, #12
 800161c:	b29b      	uxth	r3, r3
 800161e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001620:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001624:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001628:	8892      	ldrh	r2, [r2, #4]
 800162a:	b292      	uxth	r2, r2
 800162c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 800162e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800163c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800163e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001648:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800164c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 800164e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001658:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800165c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800165e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001668:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800166c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 800166e:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <uart_init+0x22c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a4a      	ldr	r2, [pc, #296]	@ (800179c <uart_init+0x22c>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800167a:	4b48      	ldr	r3, [pc, #288]	@ (800179c <uart_init+0x22c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a47      	ldr	r2, [pc, #284]	@ (800179c <uart_init+0x22c>)
 8001680:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001684:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001686:	4b45      	ldr	r3, [pc, #276]	@ (800179c <uart_init+0x22c>)
 8001688:	4a44      	ldr	r2, [pc, #272]	@ (800179c <uart_init+0x22c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 800168e:	4b43      	ldr	r3, [pc, #268]	@ (800179c <uart_init+0x22c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a42      	ldr	r2, [pc, #264]	@ (800179c <uart_init+0x22c>)
 8001694:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001698:	f023 030c 	bic.w	r3, r3, #12
 800169c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <uart_init+0x22c>)
 80016a0:	4a3e      	ldr	r2, [pc, #248]	@ (800179c <uart_init+0x22c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80016a6:	4b3d      	ldr	r3, [pc, #244]	@ (800179c <uart_init+0x22c>)
 80016a8:	4a3c      	ldr	r2, [pc, #240]	@ (800179c <uart_init+0x22c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <uart_init+0x22c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a3a      	ldr	r2, [pc, #232]	@ (800179c <uart_init+0x22c>)
 80016b4:	f043 030c 	orr.w	r3, r3, #12
 80016b8:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80016ba:	4b38      	ldr	r3, [pc, #224]	@ (800179c <uart_init+0x22c>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4a37      	ldr	r2, [pc, #220]	@ (800179c <uart_init+0x22c>)
 80016c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016c4:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80016c6:	4b35      	ldr	r3, [pc, #212]	@ (800179c <uart_init+0x22c>)
 80016c8:	4a34      	ldr	r2, [pc, #208]	@ (800179c <uart_init+0x22c>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016d2:	2300      	movs	r3, #0
 80016d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80016d6:	2300      	movs	r3, #0
 80016d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb7c 	bl	8000ddc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80016e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e6:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80016e8:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <uart_init+0x22c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d010      	beq.n	8001716 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80016f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016f6:	005a      	lsls	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	fbb3 f2f2 	udiv	r2, r3, r2
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	fb01 f202 	mul.w	r2, r1, r2
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001714:	e00d      	b.n	8001732 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	fbb3 f2f2 	udiv	r2, r3, r2
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	fb01 f202 	mul.w	r2, r1, r2
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	085b      	lsrs	r3, r3, #1
 8001736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001738:	429a      	cmp	r2, r3
 800173a:	d302      	bcc.n	8001742 <uart_init+0x1d2>
        divider++;
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	3301      	adds	r3, #1
 8001740:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <uart_init+0x22c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800174e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001758:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800175a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800175e:	4013      	ands	r3, r2
 8001760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001762:	4313      	orrs	r3, r2
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <uart_init+0x22c>)
 8001768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800176a:	b292      	uxth	r2, r2
 800176c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <uart_init+0x22c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <uart_init+0x22c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800177a:	2201      	movs	r2, #1
 800177c:	4908      	ldr	r1, [pc, #32]	@ (80017a0 <uart_init+0x230>)
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <uart_init+0x22c>)
 8001780:	f7ff fdb6 	bl	80012f0 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001784:	2026      	movs	r0, #38	@ 0x26
 8001786:	f7ff fe5f 	bl	8001448 <NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3750      	adds	r7, #80	@ 0x50
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000000c 	.word	0x2000000c
 8001798:	40021000 	.word	0x40021000
 800179c:	40004400 	.word	0x40004400
 80017a0:	00050105 	.word	0x00050105

080017a4 <EXTI4_IRQHandler>:
	NVIC_Init(&NVIC_InitStructureUp);

}

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 80017a8:	2004      	movs	r0, #4
 80017aa:	f7ff f9fd 	bl	8000ba8 <EXTI_GetITStatus>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
    	setLed('m');
 80017b4:	206d      	movs	r0, #109	@ 0x6d
 80017b6:	f000 f8a7 	bl	8001908 <setLed>

        EXTI_ClearITPendingBit(EXTI_Line4);
 80017ba:	2004      	movs	r0, #4
 80017bc:	f7ff fa2c 	bl	8000c18 <EXTI_ClearITPendingBit>
    }

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <lcd_transmit_byte+0x5c>)
 80017d0:	8a9b      	ldrh	r3, [r3, #20]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <lcd_transmit_byte+0x5c>)
 80017d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017da:	b29b      	uxth	r3, r3
 80017dc:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 80017de:	bf00      	nop
 80017e0:	2102      	movs	r1, #2
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <lcd_transmit_byte+0x60>)
 80017e4:	f7ff fd44 	bl	8001270 <SPI_I2S_GetFlagStatus>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d1f8      	bne.n	80017e0 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	@ (8001824 <lcd_transmit_byte+0x60>)
 80017f4:	f7ff fd26 	bl	8001244 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 80017f8:	bf00      	nop
 80017fa:	2102      	movs	r1, #2
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <lcd_transmit_byte+0x60>)
 80017fe:	f7ff fd37 	bl	8001270 <SPI_I2S_GetFlagStatus>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d1f8      	bne.n	80017fa <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <lcd_transmit_byte+0x5c>)
 800180a:	8a9b      	ldrh	r3, [r3, #20]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <lcd_transmit_byte+0x5c>)
 8001810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001814:	b29b      	uxth	r3, r3
 8001816:	8293      	strh	r3, [r2, #20]
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	48000400 	.word	0x48000400
 8001824:	40003800 	.word	0x40003800

08001828 <lcd_reset>:
       lcd_transmit_byte(buffer[i]);
    }
}

void lcd_reset()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 800182e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001832:	8a9b      	ldrh	r3, [r3, #20]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800183a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800183e:	b29b      	uxth	r3, r3
 8001840:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <lcd_reset+0xd8>)
 8001844:	8a9b      	ldrh	r3, [r3, #20]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4a2d      	ldr	r2, [pc, #180]	@ (8001900 <lcd_reset+0xd8>)
 800184a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800184e:	b29b      	uxth	r3, r3
 8001850:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <lcd_reset+0xd8>)
 8001854:	8a9b      	ldrh	r3, [r3, #20]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <lcd_reset+0xd8>)
 800185a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800185e:	b29b      	uxth	r3, r3
 8001860:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e003      	b.n	8001870 <lcd_reset+0x48>
 8001868:	bf00      	nop
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3301      	adds	r3, #1
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f241 2247 	movw	r2, #4679	@ 0x1247
 8001876:	4293      	cmp	r3, r2
 8001878:	d9f6      	bls.n	8001868 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <lcd_reset+0xd8>)
 800187c:	8a9b      	ldrh	r3, [r3, #20]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4a1f      	ldr	r2, [pc, #124]	@ (8001900 <lcd_reset+0xd8>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001886:	b29b      	uxth	r3, r3
 8001888:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	e003      	b.n	8001898 <lcd_reset+0x70>
 8001890:	bf00      	nop
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <lcd_reset+0xdc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d9f7      	bls.n	8001890 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80018a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80018a4:	8a9b      	ldrh	r3, [r3, #20]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80018b4:	20ae      	movs	r0, #174	@ 0xae
 80018b6:	f7ff ff85 	bl	80017c4 <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80018ba:	20a2      	movs	r0, #162	@ 0xa2
 80018bc:	f7ff ff82 	bl	80017c4 <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80018c0:	20a0      	movs	r0, #160	@ 0xa0
 80018c2:	f7ff ff7f 	bl	80017c4 <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80018c6:	20c8      	movs	r0, #200	@ 0xc8
 80018c8:	f7ff ff7c 	bl	80017c4 <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80018cc:	2022      	movs	r0, #34	@ 0x22
 80018ce:	f7ff ff79 	bl	80017c4 <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80018d2:	202f      	movs	r0, #47	@ 0x2f
 80018d4:	f7ff ff76 	bl	80017c4 <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80018d8:	2040      	movs	r0, #64	@ 0x40
 80018da:	f7ff ff73 	bl	80017c4 <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80018de:	20af      	movs	r0, #175	@ 0xaf
 80018e0:	f7ff ff70 	bl	80017c4 <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 80018e4:	2081      	movs	r0, #129	@ 0x81
 80018e6:	f7ff ff6d 	bl	80017c4 <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 80018ea:	2017      	movs	r0, #23
 80018ec:	f7ff ff6a 	bl	80017c4 <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 80018f0:	20a6      	movs	r0, #166	@ 0xa6
 80018f2:	f7ff ff67 	bl	80017c4 <lcd_transmit_byte>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	48000400 	.word	0x48000400
 8001904:	0005f36f 	.word	0x0005f36f

08001908 <setLed>:

	// Initialize LED to off
	setLed('d');
}

void setLed(char sel) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b72      	cmp	r3, #114	@ 0x72
 8001916:	d111      	bne.n	800193c <setLed+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001918:	2200      	movs	r2, #0
 800191a:	2110      	movs	r1, #16
 800191c:	4852      	ldr	r0, [pc, #328]	@ (8001a68 <setLed+0x160>)
 800191e:	f7ff fa45 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001922:	2201      	movs	r2, #1
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	4851      	ldr	r0, [pc, #324]	@ (8001a6c <setLed+0x164>)
 8001928:	f7ff fa40 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f7ff fa39 	bl	8000dac <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 800193a:	e091      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'g') {
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b67      	cmp	r3, #103	@ 0x67
 8001940:	d111      	bne.n	8001966 <setLed+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001942:	2201      	movs	r2, #1
 8001944:	2110      	movs	r1, #16
 8001946:	4848      	ldr	r0, [pc, #288]	@ (8001a68 <setLed+0x160>)
 8001948:	f7ff fa30 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 800194c:	2200      	movs	r2, #0
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	4846      	ldr	r0, [pc, #280]	@ (8001a6c <setLed+0x164>)
 8001952:	f7ff fa2b 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f7ff fa24 	bl	8000dac <GPIO_WriteBit>
}
 8001964:	e07c      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'b') {
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b62      	cmp	r3, #98	@ 0x62
 800196a:	d111      	bne.n	8001990 <setLed+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 800196c:	2201      	movs	r2, #1
 800196e:	2110      	movs	r1, #16
 8001970:	483d      	ldr	r0, [pc, #244]	@ (8001a68 <setLed+0x160>)
 8001972:	f7ff fa1b 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001976:	2201      	movs	r2, #1
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	483c      	ldr	r0, [pc, #240]	@ (8001a6c <setLed+0x164>)
 800197c:	f7ff fa16 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198a:	f7ff fa0f 	bl	8000dac <GPIO_WriteBit>
}
 800198e:	e067      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'c') {
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b63      	cmp	r3, #99	@ 0x63
 8001994:	d111      	bne.n	80019ba <setLed+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001996:	2201      	movs	r2, #1
 8001998:	2110      	movs	r1, #16
 800199a:	4833      	ldr	r0, [pc, #204]	@ (8001a68 <setLed+0x160>)
 800199c:	f7ff fa06 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <setLed+0x164>)
 80019a6:	f7ff fa01 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b4:	f7ff f9fa 	bl	8000dac <GPIO_WriteBit>
}
 80019b8:	e052      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'm') {
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b6d      	cmp	r3, #109	@ 0x6d
 80019be:	d111      	bne.n	80019e4 <setLed+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80019c0:	2200      	movs	r2, #0
 80019c2:	2110      	movs	r1, #16
 80019c4:	4828      	ldr	r0, [pc, #160]	@ (8001a68 <setLed+0x160>)
 80019c6:	f7ff f9f1 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80019ca:	2201      	movs	r2, #1
 80019cc:	2180      	movs	r1, #128	@ 0x80
 80019ce:	4827      	ldr	r0, [pc, #156]	@ (8001a6c <setLed+0x164>)
 80019d0:	f7ff f9ec 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019de:	f7ff f9e5 	bl	8000dac <GPIO_WriteBit>
}
 80019e2:	e03d      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'y') {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b79      	cmp	r3, #121	@ 0x79
 80019e8:	d111      	bne.n	8001a0e <setLed+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80019ea:	2200      	movs	r2, #0
 80019ec:	2110      	movs	r1, #16
 80019ee:	481e      	ldr	r0, [pc, #120]	@ (8001a68 <setLed+0x160>)
 80019f0:	f7ff f9dc 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80019f4:	2200      	movs	r2, #0
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <setLed+0x164>)
 80019fa:	f7ff f9d7 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a08:	f7ff f9d0 	bl	8000dac <GPIO_WriteBit>
}
 8001a0c:	e028      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'w') {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b77      	cmp	r3, #119	@ 0x77
 8001a12:	d111      	bne.n	8001a38 <setLed+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001a14:	2200      	movs	r2, #0
 8001a16:	2110      	movs	r1, #16
 8001a18:	4813      	ldr	r0, [pc, #76]	@ (8001a68 <setLed+0x160>)
 8001a1a:	f7ff f9c7 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	4812      	ldr	r0, [pc, #72]	@ (8001a6c <setLed+0x164>)
 8001a24:	f7ff f9c2 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a32:	f7ff f9bb 	bl	8000dac <GPIO_WriteBit>
}
 8001a36:	e013      	b.n	8001a60 <setLed+0x158>
	} else if (sel == 'd') {
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d110      	bne.n	8001a60 <setLed+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2110      	movs	r1, #16
 8001a42:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <setLed+0x160>)
 8001a44:	f7ff f9b2 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2180      	movs	r1, #128	@ 0x80
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <setLed+0x164>)
 8001a4e:	f7ff f9ad 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f7ff f9a6 	bl	8000dac <GPIO_WriteBit>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	48000800 	.word	0x48000800

08001a70 <init_spi_gyro_accel>:

/* ---------- LSM9DS1 (Accel/Gyro die) registers ---------- */
#define WHO_AM_I     0x0F

void init_spi_gyro_accel(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	// Enable Clocks
	RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8001a76:	4b9d      	ldr	r3, [pc, #628]	@ (8001cec <init_spi_gyro_accel+0x27c>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	4a9c      	ldr	r2, [pc, #624]	@ (8001cec <init_spi_gyro_accel+0x27c>)
 8001a7c:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001a80:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001a82:	4b9a      	ldr	r3, [pc, #616]	@ (8001cec <init_spi_gyro_accel+0x27c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a99      	ldr	r2, [pc, #612]	@ (8001cec <init_spi_gyro_accel+0x27c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	61d3      	str	r3, [r2, #28]

	// Connect pins to SPI2
	GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001a8e:	4b98      	ldr	r3, [pc, #608]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	4a97      	ldr	r2, [pc, #604]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001a94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001a98:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001a9a:	4b95      	ldr	r3, [pc, #596]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	4a94      	ldr	r2, [pc, #592]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001aa0:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001aa4:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8001aa6:	4b92      	ldr	r3, [pc, #584]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	4a91      	ldr	r2, [pc, #580]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001aac:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001ab0:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	4a8e      	ldr	r2, [pc, #568]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ab8:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8001abc:	6253      	str	r3, [r2, #36]	@ 0x24

	// Configure pins PB13 and PB15 for 10 MHz alternate function
	GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001abe:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4a8b      	ldr	r2, [pc, #556]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ac4:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001ac8:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001aca:	4b89      	ldr	r3, [pc, #548]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4a88      	ldr	r2, [pc, #544]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ad0:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8001ad4:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8001ad6:	4b86      	ldr	r3, [pc, #536]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ad8:	889b      	ldrh	r3, [r3, #4]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4984      	ldr	r1, [pc, #528]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001ade:	f645 73ff 	movw	r3, #24575	@ 0x5fff
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	808b      	strh	r3, [r1, #4]
	GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001ae8:	4a81      	ldr	r2, [pc, #516]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001aea:	4b81      	ldr	r3, [pc, #516]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001aec:	8892      	ldrh	r2, [r2, #4]
 8001aee:	b292      	uxth	r2, r2
 8001af0:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8001af2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001af8:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001afc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001afe:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b04:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 8001b08:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8001b0a:	4b79      	ldr	r3, [pc, #484]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a78      	ldr	r2, [pc, #480]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b10:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001b14:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001b16:	4b76      	ldr	r3, [pc, #472]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b18:	4a75      	ldr	r2, [pc, #468]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60d3      	str	r3, [r2, #12]

	// Initialize REEST, nCS, and A0
	// Configure pins PB6 and PB14 for 10 MHz output
	GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8001b1e:	4b74      	ldr	r3, [pc, #464]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4a73      	ldr	r2, [pc, #460]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b24:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 8001b28:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001b2a:	4b71      	ldr	r3, [pc, #452]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4a70      	ldr	r2, [pc, #448]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b30:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 8001b34:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 8001b36:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4a6c      	ldr	r2, [pc, #432]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001b4a:	4a69      	ldr	r2, [pc, #420]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b4c:	4b68      	ldr	r3, [pc, #416]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b4e:	8892      	ldrh	r2, [r2, #4]
 8001b50:	b292      	uxth	r2, r2
 8001b52:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 8001b54:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a65      	ldr	r2, [pc, #404]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b5a:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 8001b5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001b60:	4b63      	ldr	r3, [pc, #396]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a62      	ldr	r2, [pc, #392]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b66:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 8001b6a:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8001b6c:	4b60      	ldr	r3, [pc, #384]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b72:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 8001b76:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001b78:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b7a:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	60d3      	str	r3, [r2, #12]
	// Configure pin PA8 for 10 MHz output
	GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8001b80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	049b      	lsls	r3, r3, #18
 8001b8e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001b90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8001ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bac:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001bb8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bc0:	8892      	ldrh	r2, [r2, #4]
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	809a      	strh	r2, [r3, #4]


	GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8001bc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bd0:	0c9b      	lsrs	r3, r3, #18
 8001bd2:	049b      	lsls	r3, r3, #18
 8001bd4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001bd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]

	GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8001be6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bf4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 8001bf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c00:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001c04:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 8001c06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	049b      	lsls	r3, r3, #18
 8001c14:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001c16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60d3      	str	r3, [r2, #12]

	GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001c24:	8a9b      	ldrh	r3, [r3, #20]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4a31      	ldr	r2, [pc, #196]	@ (8001cf0 <init_spi_gyro_accel+0x280>)
 8001c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8293      	strh	r3, [r2, #20]

	// Configure SPI2
	SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8001c32:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c3a:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8001c42:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c46:	8812      	ldrh	r2, [r2, #0]
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	801a      	strh	r2, [r3, #0]
	SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4a28      	ldr	r2, [pc, #160]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c54:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4a24      	ldr	r2, [pc, #144]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8001c9c:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	801a      	strh	r2, [r3, #0]
	SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001ca8:	889b      	ldrh	r3, [r3, #4]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	8093      	strh	r3, [r2, #4]
	SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8093      	strh	r3, [r2, #4]
	SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cc8:	8b9b      	ldrh	r3, [r3, #28]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4a09      	ldr	r2, [pc, #36]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	8393      	strh	r3, [r2, #28]
	SPI2->CRCPR = 7; // Set CRC polynomial order
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	821a      	strh	r2, [r3, #16]
	SPI2->CR2 &= ~0x1000;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <init_spi_gyro_accel+0x284>)
 8001ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	e005      	b.n	8001cf8 <init_spi_gyro_accel+0x288>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	40003800 	.word	0x40003800
 8001cf8:	8093      	strh	r3, [r2, #4]
	SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <init_spi_gyro_accel+0x318>)
 8001cfc:	889b      	ldrh	r3, [r3, #4]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <init_spi_gyro_accel+0x318>)
 8001d02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8093      	strh	r3, [r2, #4]
	SPI2->CR1 |= 0x0040; // Enable SPI2
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <init_spi_gyro_accel+0x318>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <init_spi_gyro_accel+0x318>)
 8001d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	8013      	strh	r3, [r2, #0]

	lcd_reset();
 8001d1a:	f7ff fd85 	bl	8001828 <lcd_reset>

	// Sets PB4/D5 to output HIGH / disabled - CSAG
	// CSM
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8001d1e:	2101      	movs	r1, #1
 8001d20:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001d24:	f7ff fa6e 	bl	8001204 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;
	GPIO_StructInit(&GPIO_InitStructAll);
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f824 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001d30:	2301      	movs	r3, #1
 8001d32:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001d34:	2300      	movs	r3, #0
 8001d36:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4811      	ldr	r0, [pc, #68]	@ (8001d8c <init_spi_gyro_accel+0x31c>)
 8001d46:	f7fe ff81 	bl	8000c4c <GPIO_Init>

	// Sets PB5/D4 to output LOW / enabled
	// CSAG
	GPIO_StructInit(&GPIO_InitStructAll);
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f813 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001d52:	2301      	movs	r3, #1
 8001d54:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001d56:	2300      	movs	r3, #0
 8001d58:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001d62:	463b      	mov	r3, r7
 8001d64:	4619      	mov	r1, r3
 8001d66:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <init_spi_gyro_accel+0x31c>)
 8001d68:	f7fe ff70 	bl	8000c4c <GPIO_Init>


	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2120      	movs	r1, #32
 8001d70:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <init_spi_gyro_accel+0x31c>)
 8001d72:	f7ff f81b 	bl	8000dac <GPIO_WriteBit>
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2110      	movs	r1, #16
 8001d7a:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <init_spi_gyro_accel+0x31c>)
 8001d7c:	f7ff f816 	bl	8000dac <GPIO_WriteBit>


}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40003800 	.word	0x40003800
 8001d8c:	48000400 	.word	0x48000400

08001d90 <spi2_transfer>:
//
//}



void spi2_transfer(uint8_t data) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
//	GPIOB->ODR &= ~(0x0001 << 5); // CS = 0 - Start Transmission
	while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001d9a:	bf00      	nop
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <spi2_transfer+0x40>)
 8001da0:	f7ff fa66 	bl	8001270 <SPI_I2S_GetFlagStatus>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d1f8      	bne.n	8001d9c <spi2_transfer+0xc>
	SPI_SendData8(SPI2, data);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <spi2_transfer+0x40>)
 8001db0:	f7ff fa48 	bl	8001244 <SPI_SendData8>
	while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001db4:	bf00      	nop
 8001db6:	2102      	movs	r1, #2
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <spi2_transfer+0x40>)
 8001dba:	f7ff fa59 	bl	8001270 <SPI_I2S_GetFlagStatus>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d1f8      	bne.n	8001db6 <spi2_transfer+0x26>
//	GPIOB->ODR |=  (0x0001 << 5); // CS = 1 - End Transmission}
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40003800 	.word	0x40003800

08001dd4 <readSPI2>:

void readSPI2(uint8_t reg, uint16_t PIN) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	80bb      	strh	r3, [r7, #4]
	GPIO_WriteBit(GPIOB, PIN, Bit_RESET);
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4813      	ldr	r0, [pc, #76]	@ (8001e38 <readSPI2+0x64>)
 8001dec:	f7fe ffde 	bl	8000dac <GPIO_WriteBit>
	while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001df0:	bf00      	nop
 8001df2:	2102      	movs	r1, #2
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <readSPI2+0x68>)
 8001df6:	f7ff fa3b 	bl	8001270 <SPI_I2S_GetFlagStatus>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d1f8      	bne.n	8001df2 <readSPI2+0x1e>
	spi2_transfer(0x80 | reg);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ffc1 	bl	8001d90 <spi2_transfer>
	spi2_transfer(0x00);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffbe 	bl	8001d90 <spi2_transfer>
//	int8_t val = SPI_ReceiveData8(SPI2); // dummy write to clock in data
	while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001e14:	bf00      	nop
 8001e16:	2102      	movs	r1, #2
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <readSPI2+0x68>)
 8001e1a:	f7ff fa29 	bl	8001270 <SPI_I2S_GetFlagStatus>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d1f8      	bne.n	8001e16 <readSPI2+0x42>
	GPIO_WriteBit(GPIOB, PIN, Bit_SET);
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <readSPI2+0x64>)
 8001e2c:	f7fe ffbe 	bl	8000dac <GPIO_WriteBit>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	48000400 	.word	0x48000400
 8001e3c:	40003800 	.word	0x40003800

08001e40 <main>:
#include "lsm9ds1.h"

#define WHO_AM_I     0x0F


int main(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8001e46:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8001e4a:	f7ff fb91 	bl	8001570 <uart_init>
	//	initTimer();
	//	lcd_init_and_print();
	//	enableCSPins();
	//	initSPI();

	init_spi_gyro_accel();
 8001e4e:	f7ff fe0f 	bl	8001a70 <init_spi_gyro_accel>
	while(1) {

		//		char line1[24];


		readSPI2(0x0F,GPIO_Pin_5);
 8001e52:	2120      	movs	r1, #32
 8001e54:	200f      	movs	r0, #15
 8001e56:	f7ff ffbd 	bl	8001dd4 <readSPI2>

		for (int i= 0 ; i<= 10000;i++);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	e002      	b.n	8001e66 <main+0x26>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	ddf7      	ble.n	8001e60 <main+0x20>
		readSPI2(0x0F,GPIO_Pin_5);
 8001e70:	e7ef      	b.n	8001e52 <main+0x12>

08001e72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
	return 1;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_kill>:

int _kill(int pid, int sig)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e8c:	f001 f90e 	bl	80030ac <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2216      	movs	r2, #22
 8001e94:	601a      	str	r2, [r3, #0]
	return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_exit>:

void _exit (int status)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffe7 	bl	8001e82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <_exit+0x12>

08001eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e00a      	b.n	8001ee0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eca:	f3af 8000 	nop.w
 8001ece:	4601      	mov	r1, r0
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	60ba      	str	r2, [r7, #8]
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf0      	blt.n	8001eca <_read+0x12>
	}

return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_isatty>:

int _isatty(int file)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	return 1;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <SystemInit+0x84>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <SystemInit+0x84>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f70:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <SystemInit+0x88>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <SystemInit+0x88>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <SystemInit+0x88>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4918      	ldr	r1, [pc, #96]	@ (8001fe4 <SystemInit+0x88>)
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <SystemInit+0x8c>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <SystemInit+0x88>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <SystemInit+0x88>)
 8001f8e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f96:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <SystemInit+0x88>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <SystemInit+0x88>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <SystemInit+0x88>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <SystemInit+0x88>)
 8001faa:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001fae:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <SystemInit+0x88>)
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <SystemInit+0x88>)
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <SystemInit+0x88>)
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fc0:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <SystemInit+0x88>)
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <SystemInit+0x90>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <SystemInit+0x88>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001fce:	f000 f80f 	bl	8001ff0 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fd2:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <SystemInit+0x84>)
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fd8:	609a      	str	r2, [r3, #8]
#endif  
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	f87fc00c 	.word	0xf87fc00c
 8001fec:	ff00fccc 	.word	0xff00fccc

08001ff0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	@ (800207c <SetSysClock+0x8c>)
 8001ff6:	2212      	movs	r2, #18
 8001ff8:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <SetSysClock+0x90>)
 8001ffc:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <SetSysClock+0x90>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <SetSysClock+0x90>)
 8002004:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <SetSysClock+0x90>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <SetSysClock+0x90>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <SetSysClock+0x90>)
 8002010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002014:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <SetSysClock+0x90>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <SetSysClock+0x90>)
 800201c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002020:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <SetSysClock+0x90>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a16      	ldr	r2, [pc, #88]	@ (8002080 <SetSysClock+0x90>)
 8002028:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 800202c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <SetSysClock+0x90>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a13      	ldr	r2, [pc, #76]	@ (8002080 <SetSysClock+0x90>)
 8002034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002038:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800203a:	bf00      	nop
 800203c:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <SetSysClock+0x90>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f9      	beq.n	800203c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <SetSysClock+0x90>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <SetSysClock+0x90>)
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <SetSysClock+0x90>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <SetSysClock+0x90>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002060:	bf00      	nop
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <SetSysClock+0x90>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d1f9      	bne.n	8002062 <SetSysClock+0x72>
  {
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000

08002084 <TIM2_IRQHandler>:
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt

	TIM2_IRQHandler();
}

void TIM2_IRQHandler(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 8002094:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 8002098:	78db      	ldrb	r3, [r3, #3]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b64      	cmp	r3, #100	@ 0x64
 800209e:	d10a      	bne.n	80020b6 <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020a8:	789b      	ldrb	r3, [r3, #2]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020b2:	709a      	strb	r2, [r3, #2]
 80020b4:	e030      	b.n	8002118 <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b3c      	cmp	r3, #60	@ 0x3c
 80020be:	d10a      	bne.n	80020d6 <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020d2:	705a      	strb	r2, [r3, #1]
 80020d4:	e020      	b.n	8002118 <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b3c      	cmp	r3, #60	@ 0x3c
 80020de:	d10a      	bne.n	80020f6 <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e010      	b.n	8002118 <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b18      	cmp	r3, #24
 80020fe:	d10b      	bne.n	8002118 <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <TIM2_IRQHandler+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002118:	2101      	movs	r1, #1
 800211a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800211e:	f7ff f8c3 	bl	80012a8 <TIM_ClearITPendingBit>
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002e8 	.word	0x200002e8

0800212c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800212c:	480d      	ldr	r0, [pc, #52]	@ (8002164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800212e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002130:	480d      	ldr	r0, [pc, #52]	@ (8002168 <LoopForever+0x6>)
  ldr r1, =_edata
 8002132:	490e      	ldr	r1, [pc, #56]	@ (800216c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002134:	4a0e      	ldr	r2, [pc, #56]	@ (8002170 <LoopForever+0xe>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0b      	ldr	r2, [pc, #44]	@ (8002174 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002148:	4c0b      	ldr	r4, [pc, #44]	@ (8002178 <LoopForever+0x16>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002156:	f7ff ff01 	bl	8001f5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800215a:	f000 ffad 	bl	80030b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800215e:	f7ff fe6f 	bl	8001e40 <main>

08002162 <LoopForever>:

LoopForever:
    b LoopForever
 8002162:	e7fe      	b.n	8002162 <LoopForever>
  ldr   r0, =_estack
 8002164:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002170:	08004fbc 	.word	0x08004fbc
  ldr r2, =_sbss
 8002174:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002178:	2000043c 	.word	0x2000043c

0800217c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_2_IRQHandler>

0800217e <__cvt>:
 800217e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002182:	ec57 6b10 	vmov	r6, r7, d0
 8002186:	2f00      	cmp	r7, #0
 8002188:	460c      	mov	r4, r1
 800218a:	4619      	mov	r1, r3
 800218c:	463b      	mov	r3, r7
 800218e:	bfbb      	ittet	lt
 8002190:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002194:	461f      	movlt	r7, r3
 8002196:	2300      	movge	r3, #0
 8002198:	232d      	movlt	r3, #45	@ 0x2d
 800219a:	700b      	strb	r3, [r1, #0]
 800219c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800219e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80021a2:	4691      	mov	r9, r2
 80021a4:	f023 0820 	bic.w	r8, r3, #32
 80021a8:	bfbc      	itt	lt
 80021aa:	4632      	movlt	r2, r6
 80021ac:	4616      	movlt	r6, r2
 80021ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80021b2:	d005      	beq.n	80021c0 <__cvt+0x42>
 80021b4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80021b8:	d100      	bne.n	80021bc <__cvt+0x3e>
 80021ba:	3401      	adds	r4, #1
 80021bc:	2102      	movs	r1, #2
 80021be:	e000      	b.n	80021c2 <__cvt+0x44>
 80021c0:	2103      	movs	r1, #3
 80021c2:	ab03      	add	r3, sp, #12
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	ab02      	add	r3, sp, #8
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	ec47 6b10 	vmov	d0, r6, r7
 80021ce:	4653      	mov	r3, sl
 80021d0:	4622      	mov	r2, r4
 80021d2:	f001 f831 	bl	8003238 <_dtoa_r>
 80021d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80021da:	4605      	mov	r5, r0
 80021dc:	d119      	bne.n	8002212 <__cvt+0x94>
 80021de:	f019 0f01 	tst.w	r9, #1
 80021e2:	d00e      	beq.n	8002202 <__cvt+0x84>
 80021e4:	eb00 0904 	add.w	r9, r0, r4
 80021e8:	2200      	movs	r2, #0
 80021ea:	2300      	movs	r3, #0
 80021ec:	4630      	mov	r0, r6
 80021ee:	4639      	mov	r1, r7
 80021f0:	f7fe fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80021f4:	b108      	cbz	r0, 80021fa <__cvt+0x7c>
 80021f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80021fa:	2230      	movs	r2, #48	@ 0x30
 80021fc:	9b03      	ldr	r3, [sp, #12]
 80021fe:	454b      	cmp	r3, r9
 8002200:	d31e      	bcc.n	8002240 <__cvt+0xc2>
 8002202:	9b03      	ldr	r3, [sp, #12]
 8002204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002206:	1b5b      	subs	r3, r3, r5
 8002208:	4628      	mov	r0, r5
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	b004      	add	sp, #16
 800220e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002212:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002216:	eb00 0904 	add.w	r9, r0, r4
 800221a:	d1e5      	bne.n	80021e8 <__cvt+0x6a>
 800221c:	7803      	ldrb	r3, [r0, #0]
 800221e:	2b30      	cmp	r3, #48	@ 0x30
 8002220:	d10a      	bne.n	8002238 <__cvt+0xba>
 8002222:	2200      	movs	r2, #0
 8002224:	2300      	movs	r3, #0
 8002226:	4630      	mov	r0, r6
 8002228:	4639      	mov	r1, r7
 800222a:	f7fe fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800222e:	b918      	cbnz	r0, 8002238 <__cvt+0xba>
 8002230:	f1c4 0401 	rsb	r4, r4, #1
 8002234:	f8ca 4000 	str.w	r4, [sl]
 8002238:	f8da 3000 	ldr.w	r3, [sl]
 800223c:	4499      	add	r9, r3
 800223e:	e7d3      	b.n	80021e8 <__cvt+0x6a>
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	9103      	str	r1, [sp, #12]
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e7d9      	b.n	80021fc <__cvt+0x7e>

08002248 <__exponent>:
 8002248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800224a:	2900      	cmp	r1, #0
 800224c:	bfba      	itte	lt
 800224e:	4249      	neglt	r1, r1
 8002250:	232d      	movlt	r3, #45	@ 0x2d
 8002252:	232b      	movge	r3, #43	@ 0x2b
 8002254:	2909      	cmp	r1, #9
 8002256:	7002      	strb	r2, [r0, #0]
 8002258:	7043      	strb	r3, [r0, #1]
 800225a:	dd29      	ble.n	80022b0 <__exponent+0x68>
 800225c:	f10d 0307 	add.w	r3, sp, #7
 8002260:	461d      	mov	r5, r3
 8002262:	270a      	movs	r7, #10
 8002264:	461a      	mov	r2, r3
 8002266:	fbb1 f6f7 	udiv	r6, r1, r7
 800226a:	fb07 1416 	mls	r4, r7, r6, r1
 800226e:	3430      	adds	r4, #48	@ 0x30
 8002270:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002274:	460c      	mov	r4, r1
 8002276:	2c63      	cmp	r4, #99	@ 0x63
 8002278:	f103 33ff 	add.w	r3, r3, #4294967295
 800227c:	4631      	mov	r1, r6
 800227e:	dcf1      	bgt.n	8002264 <__exponent+0x1c>
 8002280:	3130      	adds	r1, #48	@ 0x30
 8002282:	1e94      	subs	r4, r2, #2
 8002284:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002288:	1c41      	adds	r1, r0, #1
 800228a:	4623      	mov	r3, r4
 800228c:	42ab      	cmp	r3, r5
 800228e:	d30a      	bcc.n	80022a6 <__exponent+0x5e>
 8002290:	f10d 0309 	add.w	r3, sp, #9
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	42ac      	cmp	r4, r5
 8002298:	bf88      	it	hi
 800229a:	2300      	movhi	r3, #0
 800229c:	3302      	adds	r3, #2
 800229e:	4403      	add	r3, r0
 80022a0:	1a18      	subs	r0, r3, r0
 80022a2:	b003      	add	sp, #12
 80022a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80022aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80022ae:	e7ed      	b.n	800228c <__exponent+0x44>
 80022b0:	2330      	movs	r3, #48	@ 0x30
 80022b2:	3130      	adds	r1, #48	@ 0x30
 80022b4:	7083      	strb	r3, [r0, #2]
 80022b6:	70c1      	strb	r1, [r0, #3]
 80022b8:	1d03      	adds	r3, r0, #4
 80022ba:	e7f1      	b.n	80022a0 <__exponent+0x58>

080022bc <_printf_float>:
 80022bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c0:	b08d      	sub	sp, #52	@ 0x34
 80022c2:	460c      	mov	r4, r1
 80022c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80022c8:	4616      	mov	r6, r2
 80022ca:	461f      	mov	r7, r3
 80022cc:	4605      	mov	r5, r0
 80022ce:	f000 feb5 	bl	800303c <_localeconv_r>
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	9304      	str	r3, [sp, #16]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd ffca 	bl	8000270 <strlen>
 80022dc:	2300      	movs	r3, #0
 80022de:	930a      	str	r3, [sp, #40]	@ 0x28
 80022e0:	f8d8 3000 	ldr.w	r3, [r8]
 80022e4:	9005      	str	r0, [sp, #20]
 80022e6:	3307      	adds	r3, #7
 80022e8:	f023 0307 	bic.w	r3, r3, #7
 80022ec:	f103 0208 	add.w	r2, r3, #8
 80022f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80022f4:	f8d4 b000 	ldr.w	fp, [r4]
 80022f8:	f8c8 2000 	str.w	r2, [r8]
 80022fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002300:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002304:	9307      	str	r3, [sp, #28]
 8002306:	f8cd 8018 	str.w	r8, [sp, #24]
 800230a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800230e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002312:	4b9c      	ldr	r3, [pc, #624]	@ (8002584 <_printf_float+0x2c8>)
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	f7fe fc08 	bl	8000b2c <__aeabi_dcmpun>
 800231c:	bb70      	cbnz	r0, 800237c <_printf_float+0xc0>
 800231e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002322:	4b98      	ldr	r3, [pc, #608]	@ (8002584 <_printf_float+0x2c8>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	f7fe fbe2 	bl	8000af0 <__aeabi_dcmple>
 800232c:	bb30      	cbnz	r0, 800237c <_printf_float+0xc0>
 800232e:	2200      	movs	r2, #0
 8002330:	2300      	movs	r3, #0
 8002332:	4640      	mov	r0, r8
 8002334:	4649      	mov	r1, r9
 8002336:	f7fe fbd1 	bl	8000adc <__aeabi_dcmplt>
 800233a:	b110      	cbz	r0, 8002342 <_printf_float+0x86>
 800233c:	232d      	movs	r3, #45	@ 0x2d
 800233e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002342:	4a91      	ldr	r2, [pc, #580]	@ (8002588 <_printf_float+0x2cc>)
 8002344:	4b91      	ldr	r3, [pc, #580]	@ (800258c <_printf_float+0x2d0>)
 8002346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800234a:	bf8c      	ite	hi
 800234c:	4690      	movhi	r8, r2
 800234e:	4698      	movls	r8, r3
 8002350:	2303      	movs	r3, #3
 8002352:	6123      	str	r3, [r4, #16]
 8002354:	f02b 0304 	bic.w	r3, fp, #4
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	f04f 0900 	mov.w	r9, #0
 800235e:	9700      	str	r7, [sp, #0]
 8002360:	4633      	mov	r3, r6
 8002362:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002364:	4621      	mov	r1, r4
 8002366:	4628      	mov	r0, r5
 8002368:	f000 f9d2 	bl	8002710 <_printf_common>
 800236c:	3001      	adds	r0, #1
 800236e:	f040 808d 	bne.w	800248c <_printf_float+0x1d0>
 8002372:	f04f 30ff 	mov.w	r0, #4294967295
 8002376:	b00d      	add	sp, #52	@ 0x34
 8002378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237c:	4642      	mov	r2, r8
 800237e:	464b      	mov	r3, r9
 8002380:	4640      	mov	r0, r8
 8002382:	4649      	mov	r1, r9
 8002384:	f7fe fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8002388:	b140      	cbz	r0, 800239c <_printf_float+0xe0>
 800238a:	464b      	mov	r3, r9
 800238c:	2b00      	cmp	r3, #0
 800238e:	bfbc      	itt	lt
 8002390:	232d      	movlt	r3, #45	@ 0x2d
 8002392:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002396:	4a7e      	ldr	r2, [pc, #504]	@ (8002590 <_printf_float+0x2d4>)
 8002398:	4b7e      	ldr	r3, [pc, #504]	@ (8002594 <_printf_float+0x2d8>)
 800239a:	e7d4      	b.n	8002346 <_printf_float+0x8a>
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80023a2:	9206      	str	r2, [sp, #24]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	d13b      	bne.n	8002420 <_printf_float+0x164>
 80023a8:	2306      	movs	r3, #6
 80023aa:	6063      	str	r3, [r4, #4]
 80023ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80023b0:	2300      	movs	r3, #0
 80023b2:	6022      	str	r2, [r4, #0]
 80023b4:	9303      	str	r3, [sp, #12]
 80023b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80023b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80023bc:	ab09      	add	r3, sp, #36	@ 0x24
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	6861      	ldr	r1, [r4, #4]
 80023c2:	ec49 8b10 	vmov	d0, r8, r9
 80023c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80023ca:	4628      	mov	r0, r5
 80023cc:	f7ff fed7 	bl	800217e <__cvt>
 80023d0:	9b06      	ldr	r3, [sp, #24]
 80023d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80023d4:	2b47      	cmp	r3, #71	@ 0x47
 80023d6:	4680      	mov	r8, r0
 80023d8:	d129      	bne.n	800242e <_printf_float+0x172>
 80023da:	1cc8      	adds	r0, r1, #3
 80023dc:	db02      	blt.n	80023e4 <_printf_float+0x128>
 80023de:	6863      	ldr	r3, [r4, #4]
 80023e0:	4299      	cmp	r1, r3
 80023e2:	dd41      	ble.n	8002468 <_printf_float+0x1ac>
 80023e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80023e8:	fa5f fa8a 	uxtb.w	sl, sl
 80023ec:	3901      	subs	r1, #1
 80023ee:	4652      	mov	r2, sl
 80023f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80023f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80023f6:	f7ff ff27 	bl	8002248 <__exponent>
 80023fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80023fc:	1813      	adds	r3, r2, r0
 80023fe:	2a01      	cmp	r2, #1
 8002400:	4681      	mov	r9, r0
 8002402:	6123      	str	r3, [r4, #16]
 8002404:	dc02      	bgt.n	800240c <_printf_float+0x150>
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	07d2      	lsls	r2, r2, #31
 800240a:	d501      	bpl.n	8002410 <_printf_float+0x154>
 800240c:	3301      	adds	r3, #1
 800240e:	6123      	str	r3, [r4, #16]
 8002410:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0a2      	beq.n	800235e <_printf_float+0xa2>
 8002418:	232d      	movs	r3, #45	@ 0x2d
 800241a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800241e:	e79e      	b.n	800235e <_printf_float+0xa2>
 8002420:	9a06      	ldr	r2, [sp, #24]
 8002422:	2a47      	cmp	r2, #71	@ 0x47
 8002424:	d1c2      	bne.n	80023ac <_printf_float+0xf0>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1c0      	bne.n	80023ac <_printf_float+0xf0>
 800242a:	2301      	movs	r3, #1
 800242c:	e7bd      	b.n	80023aa <_printf_float+0xee>
 800242e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002432:	d9db      	bls.n	80023ec <_printf_float+0x130>
 8002434:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002438:	d118      	bne.n	800246c <_printf_float+0x1b0>
 800243a:	2900      	cmp	r1, #0
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	dd0b      	ble.n	8002458 <_printf_float+0x19c>
 8002440:	6121      	str	r1, [r4, #16]
 8002442:	b913      	cbnz	r3, 800244a <_printf_float+0x18e>
 8002444:	6822      	ldr	r2, [r4, #0]
 8002446:	07d0      	lsls	r0, r2, #31
 8002448:	d502      	bpl.n	8002450 <_printf_float+0x194>
 800244a:	3301      	adds	r3, #1
 800244c:	440b      	add	r3, r1
 800244e:	6123      	str	r3, [r4, #16]
 8002450:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002452:	f04f 0900 	mov.w	r9, #0
 8002456:	e7db      	b.n	8002410 <_printf_float+0x154>
 8002458:	b913      	cbnz	r3, 8002460 <_printf_float+0x1a4>
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	07d2      	lsls	r2, r2, #31
 800245e:	d501      	bpl.n	8002464 <_printf_float+0x1a8>
 8002460:	3302      	adds	r3, #2
 8002462:	e7f4      	b.n	800244e <_printf_float+0x192>
 8002464:	2301      	movs	r3, #1
 8002466:	e7f2      	b.n	800244e <_printf_float+0x192>
 8002468:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800246c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800246e:	4299      	cmp	r1, r3
 8002470:	db05      	blt.n	800247e <_printf_float+0x1c2>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	6121      	str	r1, [r4, #16]
 8002476:	07d8      	lsls	r0, r3, #31
 8002478:	d5ea      	bpl.n	8002450 <_printf_float+0x194>
 800247a:	1c4b      	adds	r3, r1, #1
 800247c:	e7e7      	b.n	800244e <_printf_float+0x192>
 800247e:	2900      	cmp	r1, #0
 8002480:	bfd4      	ite	le
 8002482:	f1c1 0202 	rsble	r2, r1, #2
 8002486:	2201      	movgt	r2, #1
 8002488:	4413      	add	r3, r2
 800248a:	e7e0      	b.n	800244e <_printf_float+0x192>
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	055a      	lsls	r2, r3, #21
 8002490:	d407      	bmi.n	80024a2 <_printf_float+0x1e6>
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	4642      	mov	r2, r8
 8002496:	4631      	mov	r1, r6
 8002498:	4628      	mov	r0, r5
 800249a:	47b8      	blx	r7
 800249c:	3001      	adds	r0, #1
 800249e:	d12b      	bne.n	80024f8 <_printf_float+0x23c>
 80024a0:	e767      	b.n	8002372 <_printf_float+0xb6>
 80024a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80024a6:	f240 80dd 	bls.w	8002664 <_printf_float+0x3a8>
 80024aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80024ae:	2200      	movs	r2, #0
 80024b0:	2300      	movs	r3, #0
 80024b2:	f7fe fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d033      	beq.n	8002522 <_printf_float+0x266>
 80024ba:	4a37      	ldr	r2, [pc, #220]	@ (8002598 <_printf_float+0x2dc>)
 80024bc:	2301      	movs	r3, #1
 80024be:	4631      	mov	r1, r6
 80024c0:	4628      	mov	r0, r5
 80024c2:	47b8      	blx	r7
 80024c4:	3001      	adds	r0, #1
 80024c6:	f43f af54 	beq.w	8002372 <_printf_float+0xb6>
 80024ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80024ce:	4543      	cmp	r3, r8
 80024d0:	db02      	blt.n	80024d8 <_printf_float+0x21c>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	07d8      	lsls	r0, r3, #31
 80024d6:	d50f      	bpl.n	80024f8 <_printf_float+0x23c>
 80024d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80024dc:	4631      	mov	r1, r6
 80024de:	4628      	mov	r0, r5
 80024e0:	47b8      	blx	r7
 80024e2:	3001      	adds	r0, #1
 80024e4:	f43f af45 	beq.w	8002372 <_printf_float+0xb6>
 80024e8:	f04f 0900 	mov.w	r9, #0
 80024ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80024f0:	f104 0a1a 	add.w	sl, r4, #26
 80024f4:	45c8      	cmp	r8, r9
 80024f6:	dc09      	bgt.n	800250c <_printf_float+0x250>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	079b      	lsls	r3, r3, #30
 80024fc:	f100 8103 	bmi.w	8002706 <_printf_float+0x44a>
 8002500:	68e0      	ldr	r0, [r4, #12]
 8002502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002504:	4298      	cmp	r0, r3
 8002506:	bfb8      	it	lt
 8002508:	4618      	movlt	r0, r3
 800250a:	e734      	b.n	8002376 <_printf_float+0xba>
 800250c:	2301      	movs	r3, #1
 800250e:	4652      	mov	r2, sl
 8002510:	4631      	mov	r1, r6
 8002512:	4628      	mov	r0, r5
 8002514:	47b8      	blx	r7
 8002516:	3001      	adds	r0, #1
 8002518:	f43f af2b 	beq.w	8002372 <_printf_float+0xb6>
 800251c:	f109 0901 	add.w	r9, r9, #1
 8002520:	e7e8      	b.n	80024f4 <_printf_float+0x238>
 8002522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	dc39      	bgt.n	800259c <_printf_float+0x2e0>
 8002528:	4a1b      	ldr	r2, [pc, #108]	@ (8002598 <_printf_float+0x2dc>)
 800252a:	2301      	movs	r3, #1
 800252c:	4631      	mov	r1, r6
 800252e:	4628      	mov	r0, r5
 8002530:	47b8      	blx	r7
 8002532:	3001      	adds	r0, #1
 8002534:	f43f af1d 	beq.w	8002372 <_printf_float+0xb6>
 8002538:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800253c:	ea59 0303 	orrs.w	r3, r9, r3
 8002540:	d102      	bne.n	8002548 <_printf_float+0x28c>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	07d9      	lsls	r1, r3, #31
 8002546:	d5d7      	bpl.n	80024f8 <_printf_float+0x23c>
 8002548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800254c:	4631      	mov	r1, r6
 800254e:	4628      	mov	r0, r5
 8002550:	47b8      	blx	r7
 8002552:	3001      	adds	r0, #1
 8002554:	f43f af0d 	beq.w	8002372 <_printf_float+0xb6>
 8002558:	f04f 0a00 	mov.w	sl, #0
 800255c:	f104 0b1a 	add.w	fp, r4, #26
 8002560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002562:	425b      	negs	r3, r3
 8002564:	4553      	cmp	r3, sl
 8002566:	dc01      	bgt.n	800256c <_printf_float+0x2b0>
 8002568:	464b      	mov	r3, r9
 800256a:	e793      	b.n	8002494 <_printf_float+0x1d8>
 800256c:	2301      	movs	r3, #1
 800256e:	465a      	mov	r2, fp
 8002570:	4631      	mov	r1, r6
 8002572:	4628      	mov	r0, r5
 8002574:	47b8      	blx	r7
 8002576:	3001      	adds	r0, #1
 8002578:	f43f aefb 	beq.w	8002372 <_printf_float+0xb6>
 800257c:	f10a 0a01 	add.w	sl, sl, #1
 8002580:	e7ee      	b.n	8002560 <_printf_float+0x2a4>
 8002582:	bf00      	nop
 8002584:	7fefffff 	.word	0x7fefffff
 8002588:	08004c3e 	.word	0x08004c3e
 800258c:	08004c3a 	.word	0x08004c3a
 8002590:	08004c46 	.word	0x08004c46
 8002594:	08004c42 	.word	0x08004c42
 8002598:	08004c4a 	.word	0x08004c4a
 800259c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800259e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80025a2:	4553      	cmp	r3, sl
 80025a4:	bfa8      	it	ge
 80025a6:	4653      	movge	r3, sl
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	4699      	mov	r9, r3
 80025ac:	dc36      	bgt.n	800261c <_printf_float+0x360>
 80025ae:	f04f 0b00 	mov.w	fp, #0
 80025b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025b6:	f104 021a 	add.w	r2, r4, #26
 80025ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80025bc:	9306      	str	r3, [sp, #24]
 80025be:	eba3 0309 	sub.w	r3, r3, r9
 80025c2:	455b      	cmp	r3, fp
 80025c4:	dc31      	bgt.n	800262a <_printf_float+0x36e>
 80025c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025c8:	459a      	cmp	sl, r3
 80025ca:	dc3a      	bgt.n	8002642 <_printf_float+0x386>
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	07da      	lsls	r2, r3, #31
 80025d0:	d437      	bmi.n	8002642 <_printf_float+0x386>
 80025d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025d4:	ebaa 0903 	sub.w	r9, sl, r3
 80025d8:	9b06      	ldr	r3, [sp, #24]
 80025da:	ebaa 0303 	sub.w	r3, sl, r3
 80025de:	4599      	cmp	r9, r3
 80025e0:	bfa8      	it	ge
 80025e2:	4699      	movge	r9, r3
 80025e4:	f1b9 0f00 	cmp.w	r9, #0
 80025e8:	dc33      	bgt.n	8002652 <_printf_float+0x396>
 80025ea:	f04f 0800 	mov.w	r8, #0
 80025ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025f2:	f104 0b1a 	add.w	fp, r4, #26
 80025f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025f8:	ebaa 0303 	sub.w	r3, sl, r3
 80025fc:	eba3 0309 	sub.w	r3, r3, r9
 8002600:	4543      	cmp	r3, r8
 8002602:	f77f af79 	ble.w	80024f8 <_printf_float+0x23c>
 8002606:	2301      	movs	r3, #1
 8002608:	465a      	mov	r2, fp
 800260a:	4631      	mov	r1, r6
 800260c:	4628      	mov	r0, r5
 800260e:	47b8      	blx	r7
 8002610:	3001      	adds	r0, #1
 8002612:	f43f aeae 	beq.w	8002372 <_printf_float+0xb6>
 8002616:	f108 0801 	add.w	r8, r8, #1
 800261a:	e7ec      	b.n	80025f6 <_printf_float+0x33a>
 800261c:	4642      	mov	r2, r8
 800261e:	4631      	mov	r1, r6
 8002620:	4628      	mov	r0, r5
 8002622:	47b8      	blx	r7
 8002624:	3001      	adds	r0, #1
 8002626:	d1c2      	bne.n	80025ae <_printf_float+0x2f2>
 8002628:	e6a3      	b.n	8002372 <_printf_float+0xb6>
 800262a:	2301      	movs	r3, #1
 800262c:	4631      	mov	r1, r6
 800262e:	4628      	mov	r0, r5
 8002630:	9206      	str	r2, [sp, #24]
 8002632:	47b8      	blx	r7
 8002634:	3001      	adds	r0, #1
 8002636:	f43f ae9c 	beq.w	8002372 <_printf_float+0xb6>
 800263a:	9a06      	ldr	r2, [sp, #24]
 800263c:	f10b 0b01 	add.w	fp, fp, #1
 8002640:	e7bb      	b.n	80025ba <_printf_float+0x2fe>
 8002642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002646:	4631      	mov	r1, r6
 8002648:	4628      	mov	r0, r5
 800264a:	47b8      	blx	r7
 800264c:	3001      	adds	r0, #1
 800264e:	d1c0      	bne.n	80025d2 <_printf_float+0x316>
 8002650:	e68f      	b.n	8002372 <_printf_float+0xb6>
 8002652:	9a06      	ldr	r2, [sp, #24]
 8002654:	464b      	mov	r3, r9
 8002656:	4442      	add	r2, r8
 8002658:	4631      	mov	r1, r6
 800265a:	4628      	mov	r0, r5
 800265c:	47b8      	blx	r7
 800265e:	3001      	adds	r0, #1
 8002660:	d1c3      	bne.n	80025ea <_printf_float+0x32e>
 8002662:	e686      	b.n	8002372 <_printf_float+0xb6>
 8002664:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002668:	f1ba 0f01 	cmp.w	sl, #1
 800266c:	dc01      	bgt.n	8002672 <_printf_float+0x3b6>
 800266e:	07db      	lsls	r3, r3, #31
 8002670:	d536      	bpl.n	80026e0 <_printf_float+0x424>
 8002672:	2301      	movs	r3, #1
 8002674:	4642      	mov	r2, r8
 8002676:	4631      	mov	r1, r6
 8002678:	4628      	mov	r0, r5
 800267a:	47b8      	blx	r7
 800267c:	3001      	adds	r0, #1
 800267e:	f43f ae78 	beq.w	8002372 <_printf_float+0xb6>
 8002682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002686:	4631      	mov	r1, r6
 8002688:	4628      	mov	r0, r5
 800268a:	47b8      	blx	r7
 800268c:	3001      	adds	r0, #1
 800268e:	f43f ae70 	beq.w	8002372 <_printf_float+0xb6>
 8002692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002696:	2200      	movs	r2, #0
 8002698:	2300      	movs	r3, #0
 800269a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800269e:	f7fe fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80026a2:	b9c0      	cbnz	r0, 80026d6 <_printf_float+0x41a>
 80026a4:	4653      	mov	r3, sl
 80026a6:	f108 0201 	add.w	r2, r8, #1
 80026aa:	4631      	mov	r1, r6
 80026ac:	4628      	mov	r0, r5
 80026ae:	47b8      	blx	r7
 80026b0:	3001      	adds	r0, #1
 80026b2:	d10c      	bne.n	80026ce <_printf_float+0x412>
 80026b4:	e65d      	b.n	8002372 <_printf_float+0xb6>
 80026b6:	2301      	movs	r3, #1
 80026b8:	465a      	mov	r2, fp
 80026ba:	4631      	mov	r1, r6
 80026bc:	4628      	mov	r0, r5
 80026be:	47b8      	blx	r7
 80026c0:	3001      	adds	r0, #1
 80026c2:	f43f ae56 	beq.w	8002372 <_printf_float+0xb6>
 80026c6:	f108 0801 	add.w	r8, r8, #1
 80026ca:	45d0      	cmp	r8, sl
 80026cc:	dbf3      	blt.n	80026b6 <_printf_float+0x3fa>
 80026ce:	464b      	mov	r3, r9
 80026d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80026d4:	e6df      	b.n	8002496 <_printf_float+0x1da>
 80026d6:	f04f 0800 	mov.w	r8, #0
 80026da:	f104 0b1a 	add.w	fp, r4, #26
 80026de:	e7f4      	b.n	80026ca <_printf_float+0x40e>
 80026e0:	2301      	movs	r3, #1
 80026e2:	4642      	mov	r2, r8
 80026e4:	e7e1      	b.n	80026aa <_printf_float+0x3ee>
 80026e6:	2301      	movs	r3, #1
 80026e8:	464a      	mov	r2, r9
 80026ea:	4631      	mov	r1, r6
 80026ec:	4628      	mov	r0, r5
 80026ee:	47b8      	blx	r7
 80026f0:	3001      	adds	r0, #1
 80026f2:	f43f ae3e 	beq.w	8002372 <_printf_float+0xb6>
 80026f6:	f108 0801 	add.w	r8, r8, #1
 80026fa:	68e3      	ldr	r3, [r4, #12]
 80026fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80026fe:	1a5b      	subs	r3, r3, r1
 8002700:	4543      	cmp	r3, r8
 8002702:	dcf0      	bgt.n	80026e6 <_printf_float+0x42a>
 8002704:	e6fc      	b.n	8002500 <_printf_float+0x244>
 8002706:	f04f 0800 	mov.w	r8, #0
 800270a:	f104 0919 	add.w	r9, r4, #25
 800270e:	e7f4      	b.n	80026fa <_printf_float+0x43e>

08002710 <_printf_common>:
 8002710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	4616      	mov	r6, r2
 8002716:	4698      	mov	r8, r3
 8002718:	688a      	ldr	r2, [r1, #8]
 800271a:	690b      	ldr	r3, [r1, #16]
 800271c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002720:	4293      	cmp	r3, r2
 8002722:	bfb8      	it	lt
 8002724:	4613      	movlt	r3, r2
 8002726:	6033      	str	r3, [r6, #0]
 8002728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800272c:	4607      	mov	r7, r0
 800272e:	460c      	mov	r4, r1
 8002730:	b10a      	cbz	r2, 8002736 <_printf_common+0x26>
 8002732:	3301      	adds	r3, #1
 8002734:	6033      	str	r3, [r6, #0]
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	0699      	lsls	r1, r3, #26
 800273a:	bf42      	ittt	mi
 800273c:	6833      	ldrmi	r3, [r6, #0]
 800273e:	3302      	addmi	r3, #2
 8002740:	6033      	strmi	r3, [r6, #0]
 8002742:	6825      	ldr	r5, [r4, #0]
 8002744:	f015 0506 	ands.w	r5, r5, #6
 8002748:	d106      	bne.n	8002758 <_printf_common+0x48>
 800274a:	f104 0a19 	add.w	sl, r4, #25
 800274e:	68e3      	ldr	r3, [r4, #12]
 8002750:	6832      	ldr	r2, [r6, #0]
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	42ab      	cmp	r3, r5
 8002756:	dc26      	bgt.n	80027a6 <_printf_common+0x96>
 8002758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	3b00      	subs	r3, #0
 8002760:	bf18      	it	ne
 8002762:	2301      	movne	r3, #1
 8002764:	0692      	lsls	r2, r2, #26
 8002766:	d42b      	bmi.n	80027c0 <_printf_common+0xb0>
 8002768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800276c:	4641      	mov	r1, r8
 800276e:	4638      	mov	r0, r7
 8002770:	47c8      	blx	r9
 8002772:	3001      	adds	r0, #1
 8002774:	d01e      	beq.n	80027b4 <_printf_common+0xa4>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	6922      	ldr	r2, [r4, #16]
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf02      	ittt	eq
 8002782:	68e5      	ldreq	r5, [r4, #12]
 8002784:	6833      	ldreq	r3, [r6, #0]
 8002786:	1aed      	subeq	r5, r5, r3
 8002788:	68a3      	ldr	r3, [r4, #8]
 800278a:	bf0c      	ite	eq
 800278c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002790:	2500      	movne	r5, #0
 8002792:	4293      	cmp	r3, r2
 8002794:	bfc4      	itt	gt
 8002796:	1a9b      	subgt	r3, r3, r2
 8002798:	18ed      	addgt	r5, r5, r3
 800279a:	2600      	movs	r6, #0
 800279c:	341a      	adds	r4, #26
 800279e:	42b5      	cmp	r5, r6
 80027a0:	d11a      	bne.n	80027d8 <_printf_common+0xc8>
 80027a2:	2000      	movs	r0, #0
 80027a4:	e008      	b.n	80027b8 <_printf_common+0xa8>
 80027a6:	2301      	movs	r3, #1
 80027a8:	4652      	mov	r2, sl
 80027aa:	4641      	mov	r1, r8
 80027ac:	4638      	mov	r0, r7
 80027ae:	47c8      	blx	r9
 80027b0:	3001      	adds	r0, #1
 80027b2:	d103      	bne.n	80027bc <_printf_common+0xac>
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027bc:	3501      	adds	r5, #1
 80027be:	e7c6      	b.n	800274e <_printf_common+0x3e>
 80027c0:	18e1      	adds	r1, r4, r3
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	2030      	movs	r0, #48	@ 0x30
 80027c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027ca:	4422      	add	r2, r4
 80027cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027d4:	3302      	adds	r3, #2
 80027d6:	e7c7      	b.n	8002768 <_printf_common+0x58>
 80027d8:	2301      	movs	r3, #1
 80027da:	4622      	mov	r2, r4
 80027dc:	4641      	mov	r1, r8
 80027de:	4638      	mov	r0, r7
 80027e0:	47c8      	blx	r9
 80027e2:	3001      	adds	r0, #1
 80027e4:	d0e6      	beq.n	80027b4 <_printf_common+0xa4>
 80027e6:	3601      	adds	r6, #1
 80027e8:	e7d9      	b.n	800279e <_printf_common+0x8e>
	...

080027ec <_printf_i>:
 80027ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	7e0f      	ldrb	r7, [r1, #24]
 80027f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80027f4:	2f78      	cmp	r7, #120	@ 0x78
 80027f6:	4691      	mov	r9, r2
 80027f8:	4680      	mov	r8, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	469a      	mov	sl, r3
 80027fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002802:	d807      	bhi.n	8002814 <_printf_i+0x28>
 8002804:	2f62      	cmp	r7, #98	@ 0x62
 8002806:	d80a      	bhi.n	800281e <_printf_i+0x32>
 8002808:	2f00      	cmp	r7, #0
 800280a:	f000 80d1 	beq.w	80029b0 <_printf_i+0x1c4>
 800280e:	2f58      	cmp	r7, #88	@ 0x58
 8002810:	f000 80b8 	beq.w	8002984 <_printf_i+0x198>
 8002814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800281c:	e03a      	b.n	8002894 <_printf_i+0xa8>
 800281e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002822:	2b15      	cmp	r3, #21
 8002824:	d8f6      	bhi.n	8002814 <_printf_i+0x28>
 8002826:	a101      	add	r1, pc, #4	@ (adr r1, 800282c <_printf_i+0x40>)
 8002828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800282c:	08002885 	.word	0x08002885
 8002830:	08002899 	.word	0x08002899
 8002834:	08002815 	.word	0x08002815
 8002838:	08002815 	.word	0x08002815
 800283c:	08002815 	.word	0x08002815
 8002840:	08002815 	.word	0x08002815
 8002844:	08002899 	.word	0x08002899
 8002848:	08002815 	.word	0x08002815
 800284c:	08002815 	.word	0x08002815
 8002850:	08002815 	.word	0x08002815
 8002854:	08002815 	.word	0x08002815
 8002858:	08002997 	.word	0x08002997
 800285c:	080028c3 	.word	0x080028c3
 8002860:	08002951 	.word	0x08002951
 8002864:	08002815 	.word	0x08002815
 8002868:	08002815 	.word	0x08002815
 800286c:	080029b9 	.word	0x080029b9
 8002870:	08002815 	.word	0x08002815
 8002874:	080028c3 	.word	0x080028c3
 8002878:	08002815 	.word	0x08002815
 800287c:	08002815 	.word	0x08002815
 8002880:	08002959 	.word	0x08002959
 8002884:	6833      	ldr	r3, [r6, #0]
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6032      	str	r2, [r6, #0]
 800288c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002894:	2301      	movs	r3, #1
 8002896:	e09c      	b.n	80029d2 <_printf_i+0x1e6>
 8002898:	6833      	ldr	r3, [r6, #0]
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	1d19      	adds	r1, r3, #4
 800289e:	6031      	str	r1, [r6, #0]
 80028a0:	0606      	lsls	r6, r0, #24
 80028a2:	d501      	bpl.n	80028a8 <_printf_i+0xbc>
 80028a4:	681d      	ldr	r5, [r3, #0]
 80028a6:	e003      	b.n	80028b0 <_printf_i+0xc4>
 80028a8:	0645      	lsls	r5, r0, #25
 80028aa:	d5fb      	bpl.n	80028a4 <_printf_i+0xb8>
 80028ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	da03      	bge.n	80028bc <_printf_i+0xd0>
 80028b4:	232d      	movs	r3, #45	@ 0x2d
 80028b6:	426d      	negs	r5, r5
 80028b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028bc:	4858      	ldr	r0, [pc, #352]	@ (8002a20 <_printf_i+0x234>)
 80028be:	230a      	movs	r3, #10
 80028c0:	e011      	b.n	80028e6 <_printf_i+0xfa>
 80028c2:	6821      	ldr	r1, [r4, #0]
 80028c4:	6833      	ldr	r3, [r6, #0]
 80028c6:	0608      	lsls	r0, r1, #24
 80028c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80028cc:	d402      	bmi.n	80028d4 <_printf_i+0xe8>
 80028ce:	0649      	lsls	r1, r1, #25
 80028d0:	bf48      	it	mi
 80028d2:	b2ad      	uxthmi	r5, r5
 80028d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80028d6:	4852      	ldr	r0, [pc, #328]	@ (8002a20 <_printf_i+0x234>)
 80028d8:	6033      	str	r3, [r6, #0]
 80028da:	bf14      	ite	ne
 80028dc:	230a      	movne	r3, #10
 80028de:	2308      	moveq	r3, #8
 80028e0:	2100      	movs	r1, #0
 80028e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028e6:	6866      	ldr	r6, [r4, #4]
 80028e8:	60a6      	str	r6, [r4, #8]
 80028ea:	2e00      	cmp	r6, #0
 80028ec:	db05      	blt.n	80028fa <_printf_i+0x10e>
 80028ee:	6821      	ldr	r1, [r4, #0]
 80028f0:	432e      	orrs	r6, r5
 80028f2:	f021 0104 	bic.w	r1, r1, #4
 80028f6:	6021      	str	r1, [r4, #0]
 80028f8:	d04b      	beq.n	8002992 <_printf_i+0x1a6>
 80028fa:	4616      	mov	r6, r2
 80028fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002900:	fb03 5711 	mls	r7, r3, r1, r5
 8002904:	5dc7      	ldrb	r7, [r0, r7]
 8002906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800290a:	462f      	mov	r7, r5
 800290c:	42bb      	cmp	r3, r7
 800290e:	460d      	mov	r5, r1
 8002910:	d9f4      	bls.n	80028fc <_printf_i+0x110>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d10b      	bne.n	800292e <_printf_i+0x142>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	07df      	lsls	r7, r3, #31
 800291a:	d508      	bpl.n	800292e <_printf_i+0x142>
 800291c:	6923      	ldr	r3, [r4, #16]
 800291e:	6861      	ldr	r1, [r4, #4]
 8002920:	4299      	cmp	r1, r3
 8002922:	bfde      	ittt	le
 8002924:	2330      	movle	r3, #48	@ 0x30
 8002926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800292a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800292e:	1b92      	subs	r2, r2, r6
 8002930:	6122      	str	r2, [r4, #16]
 8002932:	f8cd a000 	str.w	sl, [sp]
 8002936:	464b      	mov	r3, r9
 8002938:	aa03      	add	r2, sp, #12
 800293a:	4621      	mov	r1, r4
 800293c:	4640      	mov	r0, r8
 800293e:	f7ff fee7 	bl	8002710 <_printf_common>
 8002942:	3001      	adds	r0, #1
 8002944:	d14a      	bne.n	80029dc <_printf_i+0x1f0>
 8002946:	f04f 30ff 	mov.w	r0, #4294967295
 800294a:	b004      	add	sp, #16
 800294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	f043 0320 	orr.w	r3, r3, #32
 8002956:	6023      	str	r3, [r4, #0]
 8002958:	4832      	ldr	r0, [pc, #200]	@ (8002a24 <_printf_i+0x238>)
 800295a:	2778      	movs	r7, #120	@ 0x78
 800295c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	6831      	ldr	r1, [r6, #0]
 8002964:	061f      	lsls	r7, r3, #24
 8002966:	f851 5b04 	ldr.w	r5, [r1], #4
 800296a:	d402      	bmi.n	8002972 <_printf_i+0x186>
 800296c:	065f      	lsls	r7, r3, #25
 800296e:	bf48      	it	mi
 8002970:	b2ad      	uxthmi	r5, r5
 8002972:	6031      	str	r1, [r6, #0]
 8002974:	07d9      	lsls	r1, r3, #31
 8002976:	bf44      	itt	mi
 8002978:	f043 0320 	orrmi.w	r3, r3, #32
 800297c:	6023      	strmi	r3, [r4, #0]
 800297e:	b11d      	cbz	r5, 8002988 <_printf_i+0x19c>
 8002980:	2310      	movs	r3, #16
 8002982:	e7ad      	b.n	80028e0 <_printf_i+0xf4>
 8002984:	4826      	ldr	r0, [pc, #152]	@ (8002a20 <_printf_i+0x234>)
 8002986:	e7e9      	b.n	800295c <_printf_i+0x170>
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f023 0320 	bic.w	r3, r3, #32
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	e7f6      	b.n	8002980 <_printf_i+0x194>
 8002992:	4616      	mov	r6, r2
 8002994:	e7bd      	b.n	8002912 <_printf_i+0x126>
 8002996:	6833      	ldr	r3, [r6, #0]
 8002998:	6825      	ldr	r5, [r4, #0]
 800299a:	6961      	ldr	r1, [r4, #20]
 800299c:	1d18      	adds	r0, r3, #4
 800299e:	6030      	str	r0, [r6, #0]
 80029a0:	062e      	lsls	r6, r5, #24
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	d501      	bpl.n	80029aa <_printf_i+0x1be>
 80029a6:	6019      	str	r1, [r3, #0]
 80029a8:	e002      	b.n	80029b0 <_printf_i+0x1c4>
 80029aa:	0668      	lsls	r0, r5, #25
 80029ac:	d5fb      	bpl.n	80029a6 <_printf_i+0x1ba>
 80029ae:	8019      	strh	r1, [r3, #0]
 80029b0:	2300      	movs	r3, #0
 80029b2:	6123      	str	r3, [r4, #16]
 80029b4:	4616      	mov	r6, r2
 80029b6:	e7bc      	b.n	8002932 <_printf_i+0x146>
 80029b8:	6833      	ldr	r3, [r6, #0]
 80029ba:	1d1a      	adds	r2, r3, #4
 80029bc:	6032      	str	r2, [r6, #0]
 80029be:	681e      	ldr	r6, [r3, #0]
 80029c0:	6862      	ldr	r2, [r4, #4]
 80029c2:	2100      	movs	r1, #0
 80029c4:	4630      	mov	r0, r6
 80029c6:	f7fd fc03 	bl	80001d0 <memchr>
 80029ca:	b108      	cbz	r0, 80029d0 <_printf_i+0x1e4>
 80029cc:	1b80      	subs	r0, r0, r6
 80029ce:	6060      	str	r0, [r4, #4]
 80029d0:	6863      	ldr	r3, [r4, #4]
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	2300      	movs	r3, #0
 80029d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029da:	e7aa      	b.n	8002932 <_printf_i+0x146>
 80029dc:	6923      	ldr	r3, [r4, #16]
 80029de:	4632      	mov	r2, r6
 80029e0:	4649      	mov	r1, r9
 80029e2:	4640      	mov	r0, r8
 80029e4:	47d0      	blx	sl
 80029e6:	3001      	adds	r0, #1
 80029e8:	d0ad      	beq.n	8002946 <_printf_i+0x15a>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	079b      	lsls	r3, r3, #30
 80029ee:	d413      	bmi.n	8002a18 <_printf_i+0x22c>
 80029f0:	68e0      	ldr	r0, [r4, #12]
 80029f2:	9b03      	ldr	r3, [sp, #12]
 80029f4:	4298      	cmp	r0, r3
 80029f6:	bfb8      	it	lt
 80029f8:	4618      	movlt	r0, r3
 80029fa:	e7a6      	b.n	800294a <_printf_i+0x15e>
 80029fc:	2301      	movs	r3, #1
 80029fe:	4632      	mov	r2, r6
 8002a00:	4649      	mov	r1, r9
 8002a02:	4640      	mov	r0, r8
 8002a04:	47d0      	blx	sl
 8002a06:	3001      	adds	r0, #1
 8002a08:	d09d      	beq.n	8002946 <_printf_i+0x15a>
 8002a0a:	3501      	adds	r5, #1
 8002a0c:	68e3      	ldr	r3, [r4, #12]
 8002a0e:	9903      	ldr	r1, [sp, #12]
 8002a10:	1a5b      	subs	r3, r3, r1
 8002a12:	42ab      	cmp	r3, r5
 8002a14:	dcf2      	bgt.n	80029fc <_printf_i+0x210>
 8002a16:	e7eb      	b.n	80029f0 <_printf_i+0x204>
 8002a18:	2500      	movs	r5, #0
 8002a1a:	f104 0619 	add.w	r6, r4, #25
 8002a1e:	e7f5      	b.n	8002a0c <_printf_i+0x220>
 8002a20:	08004c4c 	.word	0x08004c4c
 8002a24:	08004c5d 	.word	0x08004c5d

08002a28 <__sflush_r>:
 8002a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a30:	0716      	lsls	r6, r2, #28
 8002a32:	4605      	mov	r5, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	d454      	bmi.n	8002ae2 <__sflush_r+0xba>
 8002a38:	684b      	ldr	r3, [r1, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	dc02      	bgt.n	8002a44 <__sflush_r+0x1c>
 8002a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	dd48      	ble.n	8002ad6 <__sflush_r+0xae>
 8002a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d045      	beq.n	8002ad6 <__sflush_r+0xae>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a50:	682f      	ldr	r7, [r5, #0]
 8002a52:	6a21      	ldr	r1, [r4, #32]
 8002a54:	602b      	str	r3, [r5, #0]
 8002a56:	d030      	beq.n	8002aba <__sflush_r+0x92>
 8002a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	d505      	bpl.n	8002a6c <__sflush_r+0x44>
 8002a60:	6863      	ldr	r3, [r4, #4]
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a66:	b10b      	cbz	r3, 8002a6c <__sflush_r+0x44>
 8002a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a70:	6a21      	ldr	r1, [r4, #32]
 8002a72:	4628      	mov	r0, r5
 8002a74:	47b0      	blx	r6
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	d106      	bne.n	8002a8a <__sflush_r+0x62>
 8002a7c:	6829      	ldr	r1, [r5, #0]
 8002a7e:	291d      	cmp	r1, #29
 8002a80:	d82b      	bhi.n	8002ada <__sflush_r+0xb2>
 8002a82:	4a2a      	ldr	r2, [pc, #168]	@ (8002b2c <__sflush_r+0x104>)
 8002a84:	40ca      	lsrs	r2, r1
 8002a86:	07d6      	lsls	r6, r2, #31
 8002a88:	d527      	bpl.n	8002ada <__sflush_r+0xb2>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	6062      	str	r2, [r4, #4]
 8002a8e:	04d9      	lsls	r1, r3, #19
 8002a90:	6922      	ldr	r2, [r4, #16]
 8002a92:	6022      	str	r2, [r4, #0]
 8002a94:	d504      	bpl.n	8002aa0 <__sflush_r+0x78>
 8002a96:	1c42      	adds	r2, r0, #1
 8002a98:	d101      	bne.n	8002a9e <__sflush_r+0x76>
 8002a9a:	682b      	ldr	r3, [r5, #0]
 8002a9c:	b903      	cbnz	r3, 8002aa0 <__sflush_r+0x78>
 8002a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002aa2:	602f      	str	r7, [r5, #0]
 8002aa4:	b1b9      	cbz	r1, 8002ad6 <__sflush_r+0xae>
 8002aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002aaa:	4299      	cmp	r1, r3
 8002aac:	d002      	beq.n	8002ab4 <__sflush_r+0x8c>
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f001 f992 	bl	8003dd8 <_free_r>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ab8:	e00d      	b.n	8002ad6 <__sflush_r+0xae>
 8002aba:	2301      	movs	r3, #1
 8002abc:	4628      	mov	r0, r5
 8002abe:	47b0      	blx	r6
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	1c50      	adds	r0, r2, #1
 8002ac4:	d1c9      	bne.n	8002a5a <__sflush_r+0x32>
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0c6      	beq.n	8002a5a <__sflush_r+0x32>
 8002acc:	2b1d      	cmp	r3, #29
 8002ace:	d001      	beq.n	8002ad4 <__sflush_r+0xac>
 8002ad0:	2b16      	cmp	r3, #22
 8002ad2:	d11e      	bne.n	8002b12 <__sflush_r+0xea>
 8002ad4:	602f      	str	r7, [r5, #0]
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e022      	b.n	8002b20 <__sflush_r+0xf8>
 8002ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	e01b      	b.n	8002b1a <__sflush_r+0xf2>
 8002ae2:	690f      	ldr	r7, [r1, #16]
 8002ae4:	2f00      	cmp	r7, #0
 8002ae6:	d0f6      	beq.n	8002ad6 <__sflush_r+0xae>
 8002ae8:	0793      	lsls	r3, r2, #30
 8002aea:	680e      	ldr	r6, [r1, #0]
 8002aec:	bf08      	it	eq
 8002aee:	694b      	ldreq	r3, [r1, #20]
 8002af0:	600f      	str	r7, [r1, #0]
 8002af2:	bf18      	it	ne
 8002af4:	2300      	movne	r3, #0
 8002af6:	eba6 0807 	sub.w	r8, r6, r7
 8002afa:	608b      	str	r3, [r1, #8]
 8002afc:	f1b8 0f00 	cmp.w	r8, #0
 8002b00:	dde9      	ble.n	8002ad6 <__sflush_r+0xae>
 8002b02:	6a21      	ldr	r1, [r4, #32]
 8002b04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b06:	4643      	mov	r3, r8
 8002b08:	463a      	mov	r2, r7
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	47b0      	blx	r6
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	dc08      	bgt.n	8002b24 <__sflush_r+0xfc>
 8002b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b24:	4407      	add	r7, r0
 8002b26:	eba8 0800 	sub.w	r8, r8, r0
 8002b2a:	e7e7      	b.n	8002afc <__sflush_r+0xd4>
 8002b2c:	20400001 	.word	0x20400001

08002b30 <_fflush_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	690b      	ldr	r3, [r1, #16]
 8002b34:	4605      	mov	r5, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	b913      	cbnz	r3, 8002b40 <_fflush_r+0x10>
 8002b3a:	2500      	movs	r5, #0
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
 8002b40:	b118      	cbz	r0, 8002b4a <_fflush_r+0x1a>
 8002b42:	6a03      	ldr	r3, [r0, #32]
 8002b44:	b90b      	cbnz	r3, 8002b4a <_fflush_r+0x1a>
 8002b46:	f000 f8a7 	bl	8002c98 <__sinit>
 8002b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f3      	beq.n	8002b3a <_fflush_r+0xa>
 8002b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b54:	07d0      	lsls	r0, r2, #31
 8002b56:	d404      	bmi.n	8002b62 <_fflush_r+0x32>
 8002b58:	0599      	lsls	r1, r3, #22
 8002b5a:	d402      	bmi.n	8002b62 <_fflush_r+0x32>
 8002b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b5e:	f000 fad0 	bl	8003102 <__retarget_lock_acquire_recursive>
 8002b62:	4628      	mov	r0, r5
 8002b64:	4621      	mov	r1, r4
 8002b66:	f7ff ff5f 	bl	8002a28 <__sflush_r>
 8002b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b6c:	07da      	lsls	r2, r3, #31
 8002b6e:	4605      	mov	r5, r0
 8002b70:	d4e4      	bmi.n	8002b3c <_fflush_r+0xc>
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	059b      	lsls	r3, r3, #22
 8002b76:	d4e1      	bmi.n	8002b3c <_fflush_r+0xc>
 8002b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b7a:	f000 fac3 	bl	8003104 <__retarget_lock_release_recursive>
 8002b7e:	e7dd      	b.n	8002b3c <_fflush_r+0xc>

08002b80 <std>:
 8002b80:	2300      	movs	r3, #0
 8002b82:	b510      	push	{r4, lr}
 8002b84:	4604      	mov	r4, r0
 8002b86:	e9c0 3300 	strd	r3, r3, [r0]
 8002b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b8e:	6083      	str	r3, [r0, #8]
 8002b90:	8181      	strh	r1, [r0, #12]
 8002b92:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b94:	81c2      	strh	r2, [r0, #14]
 8002b96:	6183      	str	r3, [r0, #24]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	305c      	adds	r0, #92	@ 0x5c
 8002b9e:	f000 fa45 	bl	800302c <memset>
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <std+0x58>)
 8002ba4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <std+0x5c>)
 8002ba8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <std+0x60>)
 8002bac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <std+0x64>)
 8002bb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <std+0x68>)
 8002bb4:	6224      	str	r4, [r4, #32]
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	d006      	beq.n	8002bc8 <std+0x48>
 8002bba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bbe:	4294      	cmp	r4, r2
 8002bc0:	d002      	beq.n	8002bc8 <std+0x48>
 8002bc2:	33d0      	adds	r3, #208	@ 0xd0
 8002bc4:	429c      	cmp	r4, r3
 8002bc6:	d105      	bne.n	8002bd4 <std+0x54>
 8002bc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd0:	f000 ba96 	b.w	8003100 <__retarget_lock_init_recursive>
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08002e7d 	.word	0x08002e7d
 8002bdc:	08002e9f 	.word	0x08002e9f
 8002be0:	08002ed7 	.word	0x08002ed7
 8002be4:	08002efb 	.word	0x08002efb
 8002be8:	200002ec 	.word	0x200002ec

08002bec <stdio_exit_handler>:
 8002bec:	4a02      	ldr	r2, [pc, #8]	@ (8002bf8 <stdio_exit_handler+0xc>)
 8002bee:	4903      	ldr	r1, [pc, #12]	@ (8002bfc <stdio_exit_handler+0x10>)
 8002bf0:	4803      	ldr	r0, [pc, #12]	@ (8002c00 <stdio_exit_handler+0x14>)
 8002bf2:	f000 b869 	b.w	8002cc8 <_fwalk_sglue>
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	08002b31 	.word	0x08002b31
 8002c00:	20000010 	.word	0x20000010

08002c04 <cleanup_stdio>:
 8002c04:	6841      	ldr	r1, [r0, #4]
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <cleanup_stdio+0x34>)
 8002c08:	4299      	cmp	r1, r3
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	d001      	beq.n	8002c14 <cleanup_stdio+0x10>
 8002c10:	f7ff ff8e 	bl	8002b30 <_fflush_r>
 8002c14:	68a1      	ldr	r1, [r4, #8]
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <cleanup_stdio+0x38>)
 8002c18:	4299      	cmp	r1, r3
 8002c1a:	d002      	beq.n	8002c22 <cleanup_stdio+0x1e>
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff ff87 	bl	8002b30 <_fflush_r>
 8002c22:	68e1      	ldr	r1, [r4, #12]
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <cleanup_stdio+0x3c>)
 8002c26:	4299      	cmp	r1, r3
 8002c28:	d004      	beq.n	8002c34 <cleanup_stdio+0x30>
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c30:	f7ff bf7e 	b.w	8002b30 <_fflush_r>
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	bf00      	nop
 8002c38:	200002ec 	.word	0x200002ec
 8002c3c:	20000354 	.word	0x20000354
 8002c40:	200003bc 	.word	0x200003bc

08002c44 <global_stdio_init.part.0>:
 8002c44:	b510      	push	{r4, lr}
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <global_stdio_init.part.0+0x30>)
 8002c48:	4c0b      	ldr	r4, [pc, #44]	@ (8002c78 <global_stdio_init.part.0+0x34>)
 8002c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c7c <global_stdio_init.part.0+0x38>)
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	4620      	mov	r0, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	2104      	movs	r1, #4
 8002c54:	f7ff ff94 	bl	8002b80 <std>
 8002c58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2109      	movs	r1, #9
 8002c60:	f7ff ff8e 	bl	8002b80 <std>
 8002c64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c68:	2202      	movs	r2, #2
 8002c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c6e:	2112      	movs	r1, #18
 8002c70:	f7ff bf86 	b.w	8002b80 <std>
 8002c74:	20000424 	.word	0x20000424
 8002c78:	200002ec 	.word	0x200002ec
 8002c7c:	08002bed 	.word	0x08002bed

08002c80 <__sfp_lock_acquire>:
 8002c80:	4801      	ldr	r0, [pc, #4]	@ (8002c88 <__sfp_lock_acquire+0x8>)
 8002c82:	f000 ba3e 	b.w	8003102 <__retarget_lock_acquire_recursive>
 8002c86:	bf00      	nop
 8002c88:	2000042d 	.word	0x2000042d

08002c8c <__sfp_lock_release>:
 8002c8c:	4801      	ldr	r0, [pc, #4]	@ (8002c94 <__sfp_lock_release+0x8>)
 8002c8e:	f000 ba39 	b.w	8003104 <__retarget_lock_release_recursive>
 8002c92:	bf00      	nop
 8002c94:	2000042d 	.word	0x2000042d

08002c98 <__sinit>:
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	f7ff fff0 	bl	8002c80 <__sfp_lock_acquire>
 8002ca0:	6a23      	ldr	r3, [r4, #32]
 8002ca2:	b11b      	cbz	r3, 8002cac <__sinit+0x14>
 8002ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca8:	f7ff bff0 	b.w	8002c8c <__sfp_lock_release>
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <__sinit+0x28>)
 8002cae:	6223      	str	r3, [r4, #32]
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <__sinit+0x2c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f5      	bne.n	8002ca4 <__sinit+0xc>
 8002cb8:	f7ff ffc4 	bl	8002c44 <global_stdio_init.part.0>
 8002cbc:	e7f2      	b.n	8002ca4 <__sinit+0xc>
 8002cbe:	bf00      	nop
 8002cc0:	08002c05 	.word	0x08002c05
 8002cc4:	20000424 	.word	0x20000424

08002cc8 <_fwalk_sglue>:
 8002cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ccc:	4607      	mov	r7, r0
 8002cce:	4688      	mov	r8, r1
 8002cd0:	4614      	mov	r4, r2
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cd8:	f1b9 0901 	subs.w	r9, r9, #1
 8002cdc:	d505      	bpl.n	8002cea <_fwalk_sglue+0x22>
 8002cde:	6824      	ldr	r4, [r4, #0]
 8002ce0:	2c00      	cmp	r4, #0
 8002ce2:	d1f7      	bne.n	8002cd4 <_fwalk_sglue+0xc>
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cea:	89ab      	ldrh	r3, [r5, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d907      	bls.n	8002d00 <_fwalk_sglue+0x38>
 8002cf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	d003      	beq.n	8002d00 <_fwalk_sglue+0x38>
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4638      	mov	r0, r7
 8002cfc:	47c0      	blx	r8
 8002cfe:	4306      	orrs	r6, r0
 8002d00:	3568      	adds	r5, #104	@ 0x68
 8002d02:	e7e9      	b.n	8002cd8 <_fwalk_sglue+0x10>

08002d04 <setbuf>:
 8002d04:	fab1 f281 	clz	r2, r1
 8002d08:	0952      	lsrs	r2, r2, #5
 8002d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d0e:	0052      	lsls	r2, r2, #1
 8002d10:	f000 b800 	b.w	8002d14 <setvbuf>

08002d14 <setvbuf>:
 8002d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d18:	461d      	mov	r5, r3
 8002d1a:	4b57      	ldr	r3, [pc, #348]	@ (8002e78 <setvbuf+0x164>)
 8002d1c:	681f      	ldr	r7, [r3, #0]
 8002d1e:	4604      	mov	r4, r0
 8002d20:	460e      	mov	r6, r1
 8002d22:	4690      	mov	r8, r2
 8002d24:	b127      	cbz	r7, 8002d30 <setvbuf+0x1c>
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	b913      	cbnz	r3, 8002d30 <setvbuf+0x1c>
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	f7ff ffb4 	bl	8002c98 <__sinit>
 8002d30:	f1b8 0f02 	cmp.w	r8, #2
 8002d34:	d006      	beq.n	8002d44 <setvbuf+0x30>
 8002d36:	f1b8 0f01 	cmp.w	r8, #1
 8002d3a:	f200 809a 	bhi.w	8002e72 <setvbuf+0x15e>
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	f2c0 8097 	blt.w	8002e72 <setvbuf+0x15e>
 8002d44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d46:	07d9      	lsls	r1, r3, #31
 8002d48:	d405      	bmi.n	8002d56 <setvbuf+0x42>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	059a      	lsls	r2, r3, #22
 8002d4e:	d402      	bmi.n	8002d56 <setvbuf+0x42>
 8002d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d52:	f000 f9d6 	bl	8003102 <__retarget_lock_acquire_recursive>
 8002d56:	4621      	mov	r1, r4
 8002d58:	4638      	mov	r0, r7
 8002d5a:	f7ff fee9 	bl	8002b30 <_fflush_r>
 8002d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d60:	b141      	cbz	r1, 8002d74 <setvbuf+0x60>
 8002d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d66:	4299      	cmp	r1, r3
 8002d68:	d002      	beq.n	8002d70 <setvbuf+0x5c>
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	f001 f834 	bl	8003dd8 <_free_r>
 8002d70:	2300      	movs	r3, #0
 8002d72:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d74:	2300      	movs	r3, #0
 8002d76:	61a3      	str	r3, [r4, #24]
 8002d78:	6063      	str	r3, [r4, #4]
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	d503      	bpl.n	8002d88 <setvbuf+0x74>
 8002d80:	6921      	ldr	r1, [r4, #16]
 8002d82:	4638      	mov	r0, r7
 8002d84:	f001 f828 	bl	8003dd8 <_free_r>
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002d8e:	f023 0303 	bic.w	r3, r3, #3
 8002d92:	f1b8 0f02 	cmp.w	r8, #2
 8002d96:	81a3      	strh	r3, [r4, #12]
 8002d98:	d061      	beq.n	8002e5e <setvbuf+0x14a>
 8002d9a:	ab01      	add	r3, sp, #4
 8002d9c:	466a      	mov	r2, sp
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4638      	mov	r0, r7
 8002da2:	f001 fdd5 	bl	8004950 <__swhatbuf_r>
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	4318      	orrs	r0, r3
 8002daa:	81a0      	strh	r0, [r4, #12]
 8002dac:	bb2d      	cbnz	r5, 8002dfa <setvbuf+0xe6>
 8002dae:	9d00      	ldr	r5, [sp, #0]
 8002db0:	4628      	mov	r0, r5
 8002db2:	f001 f85b 	bl	8003e6c <malloc>
 8002db6:	4606      	mov	r6, r0
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d152      	bne.n	8002e62 <setvbuf+0x14e>
 8002dbc:	f8dd 9000 	ldr.w	r9, [sp]
 8002dc0:	45a9      	cmp	r9, r5
 8002dc2:	d140      	bne.n	8002e46 <setvbuf+0x132>
 8002dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8002dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	81a2      	strh	r2, [r4, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60a2      	str	r2, [r4, #8]
 8002dd6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002dda:	6022      	str	r2, [r4, #0]
 8002ddc:	6122      	str	r2, [r4, #16]
 8002dde:	2201      	movs	r2, #1
 8002de0:	6162      	str	r2, [r4, #20]
 8002de2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002de4:	07d6      	lsls	r6, r2, #31
 8002de6:	d404      	bmi.n	8002df2 <setvbuf+0xde>
 8002de8:	0598      	lsls	r0, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <setvbuf+0xde>
 8002dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dee:	f000 f989 	bl	8003104 <__retarget_lock_release_recursive>
 8002df2:	4628      	mov	r0, r5
 8002df4:	b003      	add	sp, #12
 8002df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	d0d8      	beq.n	8002db0 <setvbuf+0x9c>
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	b913      	cbnz	r3, 8002e08 <setvbuf+0xf4>
 8002e02:	4638      	mov	r0, r7
 8002e04:	f7ff ff48 	bl	8002c98 <__sinit>
 8002e08:	f1b8 0f01 	cmp.w	r8, #1
 8002e0c:	bf08      	it	eq
 8002e0e:	89a3      	ldrheq	r3, [r4, #12]
 8002e10:	6026      	str	r6, [r4, #0]
 8002e12:	bf04      	itt	eq
 8002e14:	f043 0301 	orreq.w	r3, r3, #1
 8002e18:	81a3      	strheq	r3, [r4, #12]
 8002e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e1e:	f013 0208 	ands.w	r2, r3, #8
 8002e22:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002e26:	d01e      	beq.n	8002e66 <setvbuf+0x152>
 8002e28:	07d9      	lsls	r1, r3, #31
 8002e2a:	bf41      	itttt	mi
 8002e2c:	2200      	movmi	r2, #0
 8002e2e:	426d      	negmi	r5, r5
 8002e30:	60a2      	strmi	r2, [r4, #8]
 8002e32:	61a5      	strmi	r5, [r4, #24]
 8002e34:	bf58      	it	pl
 8002e36:	60a5      	strpl	r5, [r4, #8]
 8002e38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e3a:	07d2      	lsls	r2, r2, #31
 8002e3c:	d401      	bmi.n	8002e42 <setvbuf+0x12e>
 8002e3e:	059b      	lsls	r3, r3, #22
 8002e40:	d513      	bpl.n	8002e6a <setvbuf+0x156>
 8002e42:	2500      	movs	r5, #0
 8002e44:	e7d5      	b.n	8002df2 <setvbuf+0xde>
 8002e46:	4648      	mov	r0, r9
 8002e48:	f001 f810 	bl	8003e6c <malloc>
 8002e4c:	4606      	mov	r6, r0
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d0b8      	beq.n	8002dc4 <setvbuf+0xb0>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	464d      	mov	r5, r9
 8002e5c:	e7cf      	b.n	8002dfe <setvbuf+0xea>
 8002e5e:	2500      	movs	r5, #0
 8002e60:	e7b2      	b.n	8002dc8 <setvbuf+0xb4>
 8002e62:	46a9      	mov	r9, r5
 8002e64:	e7f5      	b.n	8002e52 <setvbuf+0x13e>
 8002e66:	60a2      	str	r2, [r4, #8]
 8002e68:	e7e6      	b.n	8002e38 <setvbuf+0x124>
 8002e6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e6c:	f000 f94a 	bl	8003104 <__retarget_lock_release_recursive>
 8002e70:	e7e7      	b.n	8002e42 <setvbuf+0x12e>
 8002e72:	f04f 35ff 	mov.w	r5, #4294967295
 8002e76:	e7bc      	b.n	8002df2 <setvbuf+0xde>
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <__sread>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	460c      	mov	r4, r1
 8002e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e84:	f000 f900 	bl	8003088 <_read_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	bfab      	itete	ge
 8002e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e90:	181b      	addge	r3, r3, r0
 8002e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e96:	bfac      	ite	ge
 8002e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e9a:	81a3      	strhlt	r3, [r4, #12]
 8002e9c:	bd10      	pop	{r4, pc}

08002e9e <__swrite>:
 8002e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4616      	mov	r6, r2
 8002eae:	d505      	bpl.n	8002ebc <__swrite+0x1e>
 8002eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f000 f8d4 	bl	8003064 <_lseek_r>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ec6:	81a3      	strh	r3, [r4, #12]
 8002ec8:	4632      	mov	r2, r6
 8002eca:	463b      	mov	r3, r7
 8002ecc:	4628      	mov	r0, r5
 8002ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed2:	f7fe baed 	b.w	80014b0 <_write_r>

08002ed6 <__sseek>:
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	460c      	mov	r4, r1
 8002eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ede:	f000 f8c1 	bl	8003064 <_lseek_r>
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	bf15      	itete	ne
 8002ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ef2:	81a3      	strheq	r3, [r4, #12]
 8002ef4:	bf18      	it	ne
 8002ef6:	81a3      	strhne	r3, [r4, #12]
 8002ef8:	bd10      	pop	{r4, pc}

08002efa <__sclose>:
 8002efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002efe:	f000 b8a1 	b.w	8003044 <_close_r>

08002f02 <__swbuf_r>:
 8002f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f04:	460e      	mov	r6, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	4605      	mov	r5, r0
 8002f0a:	b118      	cbz	r0, 8002f14 <__swbuf_r+0x12>
 8002f0c:	6a03      	ldr	r3, [r0, #32]
 8002f0e:	b90b      	cbnz	r3, 8002f14 <__swbuf_r+0x12>
 8002f10:	f7ff fec2 	bl	8002c98 <__sinit>
 8002f14:	69a3      	ldr	r3, [r4, #24]
 8002f16:	60a3      	str	r3, [r4, #8]
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	071a      	lsls	r2, r3, #28
 8002f1c:	d501      	bpl.n	8002f22 <__swbuf_r+0x20>
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	b943      	cbnz	r3, 8002f34 <__swbuf_r+0x32>
 8002f22:	4621      	mov	r1, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	f000 f82b 	bl	8002f80 <__swsetup_r>
 8002f2a:	b118      	cbz	r0, 8002f34 <__swbuf_r+0x32>
 8002f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8002f30:	4638      	mov	r0, r7
 8002f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	6922      	ldr	r2, [r4, #16]
 8002f38:	1a98      	subs	r0, r3, r2
 8002f3a:	6963      	ldr	r3, [r4, #20]
 8002f3c:	b2f6      	uxtb	r6, r6
 8002f3e:	4283      	cmp	r3, r0
 8002f40:	4637      	mov	r7, r6
 8002f42:	dc05      	bgt.n	8002f50 <__swbuf_r+0x4e>
 8002f44:	4621      	mov	r1, r4
 8002f46:	4628      	mov	r0, r5
 8002f48:	f7ff fdf2 	bl	8002b30 <_fflush_r>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d1ed      	bne.n	8002f2c <__swbuf_r+0x2a>
 8002f50:	68a3      	ldr	r3, [r4, #8]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60a3      	str	r3, [r4, #8]
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	6022      	str	r2, [r4, #0]
 8002f5c:	701e      	strb	r6, [r3, #0]
 8002f5e:	6962      	ldr	r2, [r4, #20]
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d004      	beq.n	8002f70 <__swbuf_r+0x6e>
 8002f66:	89a3      	ldrh	r3, [r4, #12]
 8002f68:	07db      	lsls	r3, r3, #31
 8002f6a:	d5e1      	bpl.n	8002f30 <__swbuf_r+0x2e>
 8002f6c:	2e0a      	cmp	r6, #10
 8002f6e:	d1df      	bne.n	8002f30 <__swbuf_r+0x2e>
 8002f70:	4621      	mov	r1, r4
 8002f72:	4628      	mov	r0, r5
 8002f74:	f7ff fddc 	bl	8002b30 <_fflush_r>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d0d9      	beq.n	8002f30 <__swbuf_r+0x2e>
 8002f7c:	e7d6      	b.n	8002f2c <__swbuf_r+0x2a>
	...

08002f80 <__swsetup_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <__swsetup_r+0xa8>)
 8002f84:	4605      	mov	r5, r0
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	460c      	mov	r4, r1
 8002f8a:	b118      	cbz	r0, 8002f94 <__swsetup_r+0x14>
 8002f8c:	6a03      	ldr	r3, [r0, #32]
 8002f8e:	b90b      	cbnz	r3, 8002f94 <__swsetup_r+0x14>
 8002f90:	f7ff fe82 	bl	8002c98 <__sinit>
 8002f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f98:	0719      	lsls	r1, r3, #28
 8002f9a:	d422      	bmi.n	8002fe2 <__swsetup_r+0x62>
 8002f9c:	06da      	lsls	r2, r3, #27
 8002f9e:	d407      	bmi.n	8002fb0 <__swsetup_r+0x30>
 8002fa0:	2209      	movs	r2, #9
 8002fa2:	602a      	str	r2, [r5, #0]
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fa8:	81a3      	strh	r3, [r4, #12]
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	e033      	b.n	8003018 <__swsetup_r+0x98>
 8002fb0:	0758      	lsls	r0, r3, #29
 8002fb2:	d512      	bpl.n	8002fda <__swsetup_r+0x5a>
 8002fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fb6:	b141      	cbz	r1, 8002fca <__swsetup_r+0x4a>
 8002fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fbc:	4299      	cmp	r1, r3
 8002fbe:	d002      	beq.n	8002fc6 <__swsetup_r+0x46>
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 ff09 	bl	8003dd8 <_free_r>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6063      	str	r3, [r4, #4]
 8002fd6:	6923      	ldr	r3, [r4, #16]
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	81a3      	strh	r3, [r4, #12]
 8002fe2:	6923      	ldr	r3, [r4, #16]
 8002fe4:	b94b      	cbnz	r3, 8002ffa <__swsetup_r+0x7a>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff0:	d003      	beq.n	8002ffa <__swsetup_r+0x7a>
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f001 fcd1 	bl	800499c <__smakebuf_r>
 8002ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ffe:	f013 0201 	ands.w	r2, r3, #1
 8003002:	d00a      	beq.n	800301a <__swsetup_r+0x9a>
 8003004:	2200      	movs	r2, #0
 8003006:	60a2      	str	r2, [r4, #8]
 8003008:	6962      	ldr	r2, [r4, #20]
 800300a:	4252      	negs	r2, r2
 800300c:	61a2      	str	r2, [r4, #24]
 800300e:	6922      	ldr	r2, [r4, #16]
 8003010:	b942      	cbnz	r2, 8003024 <__swsetup_r+0xa4>
 8003012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003016:	d1c5      	bne.n	8002fa4 <__swsetup_r+0x24>
 8003018:	bd38      	pop	{r3, r4, r5, pc}
 800301a:	0799      	lsls	r1, r3, #30
 800301c:	bf58      	it	pl
 800301e:	6962      	ldrpl	r2, [r4, #20]
 8003020:	60a2      	str	r2, [r4, #8]
 8003022:	e7f4      	b.n	800300e <__swsetup_r+0x8e>
 8003024:	2000      	movs	r0, #0
 8003026:	e7f7      	b.n	8003018 <__swsetup_r+0x98>
 8003028:	2000000c 	.word	0x2000000c

0800302c <memset>:
 800302c:	4402      	add	r2, r0
 800302e:	4603      	mov	r3, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <_localeconv_r>:
 800303c:	4800      	ldr	r0, [pc, #0]	@ (8003040 <_localeconv_r+0x4>)
 800303e:	4770      	bx	lr
 8003040:	2000014c 	.word	0x2000014c

08003044 <_close_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4d06      	ldr	r5, [pc, #24]	@ (8003060 <_close_r+0x1c>)
 8003048:	2300      	movs	r3, #0
 800304a:	4604      	mov	r4, r0
 800304c:	4608      	mov	r0, r1
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	f7fe ff4f 	bl	8001ef2 <_close>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d102      	bne.n	800305e <_close_r+0x1a>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	b103      	cbz	r3, 800305e <_close_r+0x1a>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	20000428 	.word	0x20000428

08003064 <_lseek_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4d07      	ldr	r5, [pc, #28]	@ (8003084 <_lseek_r+0x20>)
 8003068:	4604      	mov	r4, r0
 800306a:	4608      	mov	r0, r1
 800306c:	4611      	mov	r1, r2
 800306e:	2200      	movs	r2, #0
 8003070:	602a      	str	r2, [r5, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	f7fe ff64 	bl	8001f40 <_lseek>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_lseek_r+0x1e>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_lseek_r+0x1e>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	20000428 	.word	0x20000428

08003088 <_read_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d07      	ldr	r5, [pc, #28]	@ (80030a8 <_read_r+0x20>)
 800308c:	4604      	mov	r4, r0
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	2200      	movs	r2, #0
 8003094:	602a      	str	r2, [r5, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f7fe ff0e 	bl	8001eb8 <_read>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_read_r+0x1e>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_read_r+0x1e>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	20000428 	.word	0x20000428

080030ac <__errno>:
 80030ac:	4b01      	ldr	r3, [pc, #4]	@ (80030b4 <__errno+0x8>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <__libc_init_array>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4d0d      	ldr	r5, [pc, #52]	@ (80030f0 <__libc_init_array+0x38>)
 80030bc:	4c0d      	ldr	r4, [pc, #52]	@ (80030f4 <__libc_init_array+0x3c>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	2600      	movs	r6, #0
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	d109      	bne.n	80030dc <__libc_init_array+0x24>
 80030c8:	4d0b      	ldr	r5, [pc, #44]	@ (80030f8 <__libc_init_array+0x40>)
 80030ca:	4c0c      	ldr	r4, [pc, #48]	@ (80030fc <__libc_init_array+0x44>)
 80030cc:	f001 fd92 	bl	8004bf4 <_init>
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	2600      	movs	r6, #0
 80030d6:	42a6      	cmp	r6, r4
 80030d8:	d105      	bne.n	80030e6 <__libc_init_array+0x2e>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e0:	4798      	blx	r3
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7ee      	b.n	80030c4 <__libc_init_array+0xc>
 80030e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ea:	4798      	blx	r3
 80030ec:	3601      	adds	r6, #1
 80030ee:	e7f2      	b.n	80030d6 <__libc_init_array+0x1e>
 80030f0:	08004fb4 	.word	0x08004fb4
 80030f4:	08004fb4 	.word	0x08004fb4
 80030f8:	08004fb4 	.word	0x08004fb4
 80030fc:	08004fb8 	.word	0x08004fb8

08003100 <__retarget_lock_init_recursive>:
 8003100:	4770      	bx	lr

08003102 <__retarget_lock_acquire_recursive>:
 8003102:	4770      	bx	lr

08003104 <__retarget_lock_release_recursive>:
 8003104:	4770      	bx	lr

08003106 <memcpy>:
 8003106:	440a      	add	r2, r1
 8003108:	4291      	cmp	r1, r2
 800310a:	f100 33ff 	add.w	r3, r0, #4294967295
 800310e:	d100      	bne.n	8003112 <memcpy+0xc>
 8003110:	4770      	bx	lr
 8003112:	b510      	push	{r4, lr}
 8003114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311c:	4291      	cmp	r1, r2
 800311e:	d1f9      	bne.n	8003114 <memcpy+0xe>
 8003120:	bd10      	pop	{r4, pc}

08003122 <quorem>:
 8003122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003126:	6903      	ldr	r3, [r0, #16]
 8003128:	690c      	ldr	r4, [r1, #16]
 800312a:	42a3      	cmp	r3, r4
 800312c:	4607      	mov	r7, r0
 800312e:	db7e      	blt.n	800322e <quorem+0x10c>
 8003130:	3c01      	subs	r4, #1
 8003132:	f101 0814 	add.w	r8, r1, #20
 8003136:	00a3      	lsls	r3, r4, #2
 8003138:	f100 0514 	add.w	r5, r0, #20
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800314c:	3301      	adds	r3, #1
 800314e:	429a      	cmp	r2, r3
 8003150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003154:	fbb2 f6f3 	udiv	r6, r2, r3
 8003158:	d32e      	bcc.n	80031b8 <quorem+0x96>
 800315a:	f04f 0a00 	mov.w	sl, #0
 800315e:	46c4      	mov	ip, r8
 8003160:	46ae      	mov	lr, r5
 8003162:	46d3      	mov	fp, sl
 8003164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003168:	b298      	uxth	r0, r3
 800316a:	fb06 a000 	mla	r0, r6, r0, sl
 800316e:	0c02      	lsrs	r2, r0, #16
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	fb06 2303 	mla	r3, r6, r3, r2
 8003176:	f8de 2000 	ldr.w	r2, [lr]
 800317a:	b280      	uxth	r0, r0
 800317c:	b292      	uxth	r2, r2
 800317e:	1a12      	subs	r2, r2, r0
 8003180:	445a      	add	r2, fp
 8003182:	f8de 0000 	ldr.w	r0, [lr]
 8003186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800318a:	b29b      	uxth	r3, r3
 800318c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003190:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003194:	b292      	uxth	r2, r2
 8003196:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800319a:	45e1      	cmp	r9, ip
 800319c:	f84e 2b04 	str.w	r2, [lr], #4
 80031a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80031a4:	d2de      	bcs.n	8003164 <quorem+0x42>
 80031a6:	9b00      	ldr	r3, [sp, #0]
 80031a8:	58eb      	ldr	r3, [r5, r3]
 80031aa:	b92b      	cbnz	r3, 80031b8 <quorem+0x96>
 80031ac:	9b01      	ldr	r3, [sp, #4]
 80031ae:	3b04      	subs	r3, #4
 80031b0:	429d      	cmp	r5, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	d32f      	bcc.n	8003216 <quorem+0xf4>
 80031b6:	613c      	str	r4, [r7, #16]
 80031b8:	4638      	mov	r0, r7
 80031ba:	f001 f97f 	bl	80044bc <__mcmp>
 80031be:	2800      	cmp	r0, #0
 80031c0:	db25      	blt.n	800320e <quorem+0xec>
 80031c2:	4629      	mov	r1, r5
 80031c4:	2000      	movs	r0, #0
 80031c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80031ca:	f8d1 c000 	ldr.w	ip, [r1]
 80031ce:	fa1f fe82 	uxth.w	lr, r2
 80031d2:	fa1f f38c 	uxth.w	r3, ip
 80031d6:	eba3 030e 	sub.w	r3, r3, lr
 80031da:	4403      	add	r3, r0
 80031dc:	0c12      	lsrs	r2, r2, #16
 80031de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80031e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ec:	45c1      	cmp	r9, r8
 80031ee:	f841 3b04 	str.w	r3, [r1], #4
 80031f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80031f6:	d2e6      	bcs.n	80031c6 <quorem+0xa4>
 80031f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003200:	b922      	cbnz	r2, 800320c <quorem+0xea>
 8003202:	3b04      	subs	r3, #4
 8003204:	429d      	cmp	r5, r3
 8003206:	461a      	mov	r2, r3
 8003208:	d30b      	bcc.n	8003222 <quorem+0x100>
 800320a:	613c      	str	r4, [r7, #16]
 800320c:	3601      	adds	r6, #1
 800320e:	4630      	mov	r0, r6
 8003210:	b003      	add	sp, #12
 8003212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	3b04      	subs	r3, #4
 800321a:	2a00      	cmp	r2, #0
 800321c:	d1cb      	bne.n	80031b6 <quorem+0x94>
 800321e:	3c01      	subs	r4, #1
 8003220:	e7c6      	b.n	80031b0 <quorem+0x8e>
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	3b04      	subs	r3, #4
 8003226:	2a00      	cmp	r2, #0
 8003228:	d1ef      	bne.n	800320a <quorem+0xe8>
 800322a:	3c01      	subs	r4, #1
 800322c:	e7ea      	b.n	8003204 <quorem+0xe2>
 800322e:	2000      	movs	r0, #0
 8003230:	e7ee      	b.n	8003210 <quorem+0xee>
 8003232:	0000      	movs	r0, r0
 8003234:	0000      	movs	r0, r0
	...

08003238 <_dtoa_r>:
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	69c7      	ldr	r7, [r0, #28]
 800323e:	b097      	sub	sp, #92	@ 0x5c
 8003240:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003244:	ec55 4b10 	vmov	r4, r5, d0
 8003248:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800324a:	9107      	str	r1, [sp, #28]
 800324c:	4681      	mov	r9, r0
 800324e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003250:	9311      	str	r3, [sp, #68]	@ 0x44
 8003252:	b97f      	cbnz	r7, 8003274 <_dtoa_r+0x3c>
 8003254:	2010      	movs	r0, #16
 8003256:	f000 fe09 	bl	8003e6c <malloc>
 800325a:	4602      	mov	r2, r0
 800325c:	f8c9 001c 	str.w	r0, [r9, #28]
 8003260:	b920      	cbnz	r0, 800326c <_dtoa_r+0x34>
 8003262:	4ba9      	ldr	r3, [pc, #676]	@ (8003508 <_dtoa_r+0x2d0>)
 8003264:	21ef      	movs	r1, #239	@ 0xef
 8003266:	48a9      	ldr	r0, [pc, #676]	@ (800350c <_dtoa_r+0x2d4>)
 8003268:	f001 fc06 	bl	8004a78 <__assert_func>
 800326c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003270:	6007      	str	r7, [r0, #0]
 8003272:	60c7      	str	r7, [r0, #12]
 8003274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	b159      	cbz	r1, 8003294 <_dtoa_r+0x5c>
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	604a      	str	r2, [r1, #4]
 8003280:	2301      	movs	r3, #1
 8003282:	4093      	lsls	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
 8003286:	4648      	mov	r0, r9
 8003288:	f000 fee6 	bl	8004058 <_Bfree>
 800328c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	1e2b      	subs	r3, r5, #0
 8003296:	bfb9      	ittee	lt
 8003298:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800329c:	9305      	strlt	r3, [sp, #20]
 800329e:	2300      	movge	r3, #0
 80032a0:	6033      	strge	r3, [r6, #0]
 80032a2:	9f05      	ldr	r7, [sp, #20]
 80032a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003510 <_dtoa_r+0x2d8>)
 80032a6:	bfbc      	itt	lt
 80032a8:	2201      	movlt	r2, #1
 80032aa:	6032      	strlt	r2, [r6, #0]
 80032ac:	43bb      	bics	r3, r7
 80032ae:	d112      	bne.n	80032d6 <_dtoa_r+0x9e>
 80032b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80032b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80032bc:	4323      	orrs	r3, r4
 80032be:	f000 855a 	beq.w	8003d76 <_dtoa_r+0xb3e>
 80032c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003524 <_dtoa_r+0x2ec>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 855c 	beq.w	8003d86 <_dtoa_r+0xb4e>
 80032ce:	f10a 0303 	add.w	r3, sl, #3
 80032d2:	f000 bd56 	b.w	8003d82 <_dtoa_r+0xb4a>
 80032d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80032da:	2200      	movs	r2, #0
 80032dc:	ec51 0b17 	vmov	r0, r1, d7
 80032e0:	2300      	movs	r3, #0
 80032e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80032e6:	f7fd fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80032ea:	4680      	mov	r8, r0
 80032ec:	b158      	cbz	r0, 8003306 <_dtoa_r+0xce>
 80032ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80032f0:	2301      	movs	r3, #1
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032f6:	b113      	cbz	r3, 80032fe <_dtoa_r+0xc6>
 80032f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80032fa:	4b86      	ldr	r3, [pc, #536]	@ (8003514 <_dtoa_r+0x2dc>)
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003528 <_dtoa_r+0x2f0>
 8003302:	f000 bd40 	b.w	8003d86 <_dtoa_r+0xb4e>
 8003306:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800330a:	aa14      	add	r2, sp, #80	@ 0x50
 800330c:	a915      	add	r1, sp, #84	@ 0x54
 800330e:	4648      	mov	r0, r9
 8003310:	f001 f984 	bl	800461c <__d2b>
 8003314:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003318:	9002      	str	r0, [sp, #8]
 800331a:	2e00      	cmp	r6, #0
 800331c:	d078      	beq.n	8003410 <_dtoa_r+0x1d8>
 800331e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003320:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800332c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003330:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003334:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003338:	4619      	mov	r1, r3
 800333a:	2200      	movs	r2, #0
 800333c:	4b76      	ldr	r3, [pc, #472]	@ (8003518 <_dtoa_r+0x2e0>)
 800333e:	f7fc ffa3 	bl	8000288 <__aeabi_dsub>
 8003342:	a36b      	add	r3, pc, #428	@ (adr r3, 80034f0 <_dtoa_r+0x2b8>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd f956 	bl	80005f8 <__aeabi_dmul>
 800334c:	a36a      	add	r3, pc, #424	@ (adr r3, 80034f8 <_dtoa_r+0x2c0>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ff9b 	bl	800028c <__adddf3>
 8003356:	4604      	mov	r4, r0
 8003358:	4630      	mov	r0, r6
 800335a:	460d      	mov	r5, r1
 800335c:	f7fd f8e2 	bl	8000524 <__aeabi_i2d>
 8003360:	a367      	add	r3, pc, #412	@ (adr r3, 8003500 <_dtoa_r+0x2c8>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fd f947 	bl	80005f8 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f7fc ff8b 	bl	800028c <__adddf3>
 8003376:	4604      	mov	r4, r0
 8003378:	460d      	mov	r5, r1
 800337a:	f7fd fbed 	bl	8000b58 <__aeabi_d2iz>
 800337e:	2200      	movs	r2, #0
 8003380:	4607      	mov	r7, r0
 8003382:	2300      	movs	r3, #0
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fd fba8 	bl	8000adc <__aeabi_dcmplt>
 800338c:	b140      	cbz	r0, 80033a0 <_dtoa_r+0x168>
 800338e:	4638      	mov	r0, r7
 8003390:	f7fd f8c8 	bl	8000524 <__aeabi_i2d>
 8003394:	4622      	mov	r2, r4
 8003396:	462b      	mov	r3, r5
 8003398:	f7fd fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800339c:	b900      	cbnz	r0, 80033a0 <_dtoa_r+0x168>
 800339e:	3f01      	subs	r7, #1
 80033a0:	2f16      	cmp	r7, #22
 80033a2:	d852      	bhi.n	800344a <_dtoa_r+0x212>
 80033a4:	4b5d      	ldr	r3, [pc, #372]	@ (800351c <_dtoa_r+0x2e4>)
 80033a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033b2:	f7fd fb93 	bl	8000adc <__aeabi_dcmplt>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d049      	beq.n	800344e <_dtoa_r+0x216>
 80033ba:	3f01      	subs	r7, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	9310      	str	r3, [sp, #64]	@ 0x40
 80033c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80033c2:	1b9b      	subs	r3, r3, r6
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	bf45      	ittet	mi
 80033c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80033cc:	9300      	strmi	r3, [sp, #0]
 80033ce:	2300      	movpl	r3, #0
 80033d0:	2300      	movmi	r3, #0
 80033d2:	9206      	str	r2, [sp, #24]
 80033d4:	bf54      	ite	pl
 80033d6:	9300      	strpl	r3, [sp, #0]
 80033d8:	9306      	strmi	r3, [sp, #24]
 80033da:	2f00      	cmp	r7, #0
 80033dc:	db39      	blt.n	8003452 <_dtoa_r+0x21a>
 80033de:	9b06      	ldr	r3, [sp, #24]
 80033e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80033e2:	443b      	add	r3, r7
 80033e4:	9306      	str	r3, [sp, #24]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9308      	str	r3, [sp, #32]
 80033ea:	9b07      	ldr	r3, [sp, #28]
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d863      	bhi.n	80034b8 <_dtoa_r+0x280>
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	bfc4      	itt	gt
 80033f4:	3b04      	subgt	r3, #4
 80033f6:	9307      	strgt	r3, [sp, #28]
 80033f8:	9b07      	ldr	r3, [sp, #28]
 80033fa:	f1a3 0302 	sub.w	r3, r3, #2
 80033fe:	bfcc      	ite	gt
 8003400:	2400      	movgt	r4, #0
 8003402:	2401      	movle	r4, #1
 8003404:	2b03      	cmp	r3, #3
 8003406:	d863      	bhi.n	80034d0 <_dtoa_r+0x298>
 8003408:	e8df f003 	tbb	[pc, r3]
 800340c:	2b375452 	.word	0x2b375452
 8003410:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003414:	441e      	add	r6, r3
 8003416:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800341a:	2b20      	cmp	r3, #32
 800341c:	bfc1      	itttt	gt
 800341e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003422:	409f      	lslgt	r7, r3
 8003424:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003428:	fa24 f303 	lsrgt.w	r3, r4, r3
 800342c:	bfd6      	itet	le
 800342e:	f1c3 0320 	rsble	r3, r3, #32
 8003432:	ea47 0003 	orrgt.w	r0, r7, r3
 8003436:	fa04 f003 	lslle.w	r0, r4, r3
 800343a:	f7fd f863 	bl	8000504 <__aeabi_ui2d>
 800343e:	2201      	movs	r2, #1
 8003440:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003444:	3e01      	subs	r6, #1
 8003446:	9212      	str	r2, [sp, #72]	@ 0x48
 8003448:	e776      	b.n	8003338 <_dtoa_r+0x100>
 800344a:	2301      	movs	r3, #1
 800344c:	e7b7      	b.n	80033be <_dtoa_r+0x186>
 800344e:	9010      	str	r0, [sp, #64]	@ 0x40
 8003450:	e7b6      	b.n	80033c0 <_dtoa_r+0x188>
 8003452:	9b00      	ldr	r3, [sp, #0]
 8003454:	1bdb      	subs	r3, r3, r7
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	427b      	negs	r3, r7
 800345a:	9308      	str	r3, [sp, #32]
 800345c:	2300      	movs	r3, #0
 800345e:	930d      	str	r3, [sp, #52]	@ 0x34
 8003460:	e7c3      	b.n	80033ea <_dtoa_r+0x1b2>
 8003462:	2301      	movs	r3, #1
 8003464:	9309      	str	r3, [sp, #36]	@ 0x24
 8003466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003468:	eb07 0b03 	add.w	fp, r7, r3
 800346c:	f10b 0301 	add.w	r3, fp, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	9303      	str	r3, [sp, #12]
 8003474:	bfb8      	it	lt
 8003476:	2301      	movlt	r3, #1
 8003478:	e006      	b.n	8003488 <_dtoa_r+0x250>
 800347a:	2301      	movs	r3, #1
 800347c:	9309      	str	r3, [sp, #36]	@ 0x24
 800347e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003480:	2b00      	cmp	r3, #0
 8003482:	dd28      	ble.n	80034d6 <_dtoa_r+0x29e>
 8003484:	469b      	mov	fp, r3
 8003486:	9303      	str	r3, [sp, #12]
 8003488:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800348c:	2100      	movs	r1, #0
 800348e:	2204      	movs	r2, #4
 8003490:	f102 0514 	add.w	r5, r2, #20
 8003494:	429d      	cmp	r5, r3
 8003496:	d926      	bls.n	80034e6 <_dtoa_r+0x2ae>
 8003498:	6041      	str	r1, [r0, #4]
 800349a:	4648      	mov	r0, r9
 800349c:	f000 fd9c 	bl	8003fd8 <_Balloc>
 80034a0:	4682      	mov	sl, r0
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d142      	bne.n	800352c <_dtoa_r+0x2f4>
 80034a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <_dtoa_r+0x2e8>)
 80034a8:	4602      	mov	r2, r0
 80034aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80034ae:	e6da      	b.n	8003266 <_dtoa_r+0x2e>
 80034b0:	2300      	movs	r3, #0
 80034b2:	e7e3      	b.n	800347c <_dtoa_r+0x244>
 80034b4:	2300      	movs	r3, #0
 80034b6:	e7d5      	b.n	8003464 <_dtoa_r+0x22c>
 80034b8:	2401      	movs	r4, #1
 80034ba:	2300      	movs	r3, #0
 80034bc:	9307      	str	r3, [sp, #28]
 80034be:	9409      	str	r4, [sp, #36]	@ 0x24
 80034c0:	f04f 3bff 	mov.w	fp, #4294967295
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80034ca:	2312      	movs	r3, #18
 80034cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80034ce:	e7db      	b.n	8003488 <_dtoa_r+0x250>
 80034d0:	2301      	movs	r3, #1
 80034d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80034d4:	e7f4      	b.n	80034c0 <_dtoa_r+0x288>
 80034d6:	f04f 0b01 	mov.w	fp, #1
 80034da:	f8cd b00c 	str.w	fp, [sp, #12]
 80034de:	465b      	mov	r3, fp
 80034e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80034e4:	e7d0      	b.n	8003488 <_dtoa_r+0x250>
 80034e6:	3101      	adds	r1, #1
 80034e8:	0052      	lsls	r2, r2, #1
 80034ea:	e7d1      	b.n	8003490 <_dtoa_r+0x258>
 80034ec:	f3af 8000 	nop.w
 80034f0:	636f4361 	.word	0x636f4361
 80034f4:	3fd287a7 	.word	0x3fd287a7
 80034f8:	8b60c8b3 	.word	0x8b60c8b3
 80034fc:	3fc68a28 	.word	0x3fc68a28
 8003500:	509f79fb 	.word	0x509f79fb
 8003504:	3fd34413 	.word	0x3fd34413
 8003508:	08004c7b 	.word	0x08004c7b
 800350c:	08004c92 	.word	0x08004c92
 8003510:	7ff00000 	.word	0x7ff00000
 8003514:	08004c4b 	.word	0x08004c4b
 8003518:	3ff80000 	.word	0x3ff80000
 800351c:	08004de0 	.word	0x08004de0
 8003520:	08004cea 	.word	0x08004cea
 8003524:	08004c77 	.word	0x08004c77
 8003528:	08004c4a 	.word	0x08004c4a
 800352c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003530:	6018      	str	r0, [r3, #0]
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	2b0e      	cmp	r3, #14
 8003536:	f200 80a1 	bhi.w	800367c <_dtoa_r+0x444>
 800353a:	2c00      	cmp	r4, #0
 800353c:	f000 809e 	beq.w	800367c <_dtoa_r+0x444>
 8003540:	2f00      	cmp	r7, #0
 8003542:	dd33      	ble.n	80035ac <_dtoa_r+0x374>
 8003544:	4b9c      	ldr	r3, [pc, #624]	@ (80037b8 <_dtoa_r+0x580>)
 8003546:	f007 020f 	and.w	r2, r7, #15
 800354a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800354e:	ed93 7b00 	vldr	d7, [r3]
 8003552:	05f8      	lsls	r0, r7, #23
 8003554:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800355c:	d516      	bpl.n	800358c <_dtoa_r+0x354>
 800355e:	4b97      	ldr	r3, [pc, #604]	@ (80037bc <_dtoa_r+0x584>)
 8003560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003568:	f7fd f970 	bl	800084c <__aeabi_ddiv>
 800356c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003570:	f004 040f 	and.w	r4, r4, #15
 8003574:	2603      	movs	r6, #3
 8003576:	4d91      	ldr	r5, [pc, #580]	@ (80037bc <_dtoa_r+0x584>)
 8003578:	b954      	cbnz	r4, 8003590 <_dtoa_r+0x358>
 800357a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800357e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003582:	f7fd f963 	bl	800084c <__aeabi_ddiv>
 8003586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800358a:	e028      	b.n	80035de <_dtoa_r+0x3a6>
 800358c:	2602      	movs	r6, #2
 800358e:	e7f2      	b.n	8003576 <_dtoa_r+0x33e>
 8003590:	07e1      	lsls	r1, r4, #31
 8003592:	d508      	bpl.n	80035a6 <_dtoa_r+0x36e>
 8003594:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800359c:	f7fd f82c 	bl	80005f8 <__aeabi_dmul>
 80035a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80035a4:	3601      	adds	r6, #1
 80035a6:	1064      	asrs	r4, r4, #1
 80035a8:	3508      	adds	r5, #8
 80035aa:	e7e5      	b.n	8003578 <_dtoa_r+0x340>
 80035ac:	f000 80af 	beq.w	800370e <_dtoa_r+0x4d6>
 80035b0:	427c      	negs	r4, r7
 80035b2:	4b81      	ldr	r3, [pc, #516]	@ (80037b8 <_dtoa_r+0x580>)
 80035b4:	4d81      	ldr	r5, [pc, #516]	@ (80037bc <_dtoa_r+0x584>)
 80035b6:	f004 020f 	and.w	r2, r4, #15
 80035ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80035c6:	f7fd f817 	bl	80005f8 <__aeabi_dmul>
 80035ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035ce:	1124      	asrs	r4, r4, #4
 80035d0:	2300      	movs	r3, #0
 80035d2:	2602      	movs	r6, #2
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	f040 808f 	bne.w	80036f8 <_dtoa_r+0x4c0>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1d3      	bne.n	8003586 <_dtoa_r+0x34e>
 80035de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80035e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8094 	beq.w	8003712 <_dtoa_r+0x4da>
 80035ea:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <_dtoa_r+0x588>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	f7fd fa73 	bl	8000adc <__aeabi_dcmplt>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	f000 808b 	beq.w	8003712 <_dtoa_r+0x4da>
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8087 	beq.w	8003712 <_dtoa_r+0x4da>
 8003604:	f1bb 0f00 	cmp.w	fp, #0
 8003608:	dd34      	ble.n	8003674 <_dtoa_r+0x43c>
 800360a:	4620      	mov	r0, r4
 800360c:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <_dtoa_r+0x58c>)
 800360e:	2200      	movs	r2, #0
 8003610:	4629      	mov	r1, r5
 8003612:	f7fc fff1 	bl	80005f8 <__aeabi_dmul>
 8003616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800361a:	f107 38ff 	add.w	r8, r7, #4294967295
 800361e:	3601      	adds	r6, #1
 8003620:	465c      	mov	r4, fp
 8003622:	4630      	mov	r0, r6
 8003624:	f7fc ff7e 	bl	8000524 <__aeabi_i2d>
 8003628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800362c:	f7fc ffe4 	bl	80005f8 <__aeabi_dmul>
 8003630:	4b65      	ldr	r3, [pc, #404]	@ (80037c8 <_dtoa_r+0x590>)
 8003632:	2200      	movs	r2, #0
 8003634:	f7fc fe2a 	bl	800028c <__adddf3>
 8003638:	4605      	mov	r5, r0
 800363a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800363e:	2c00      	cmp	r4, #0
 8003640:	d16a      	bne.n	8003718 <_dtoa_r+0x4e0>
 8003642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003646:	4b61      	ldr	r3, [pc, #388]	@ (80037cc <_dtoa_r+0x594>)
 8003648:	2200      	movs	r2, #0
 800364a:	f7fc fe1d 	bl	8000288 <__aeabi_dsub>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003656:	462a      	mov	r2, r5
 8003658:	4633      	mov	r3, r6
 800365a:	f7fd fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 800365e:	2800      	cmp	r0, #0
 8003660:	f040 8298 	bne.w	8003b94 <_dtoa_r+0x95c>
 8003664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003668:	462a      	mov	r2, r5
 800366a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800366e:	f7fd fa35 	bl	8000adc <__aeabi_dcmplt>
 8003672:	bb38      	cbnz	r0, 80036c4 <_dtoa_r+0x48c>
 8003674:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003678:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800367c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	f2c0 8157 	blt.w	8003932 <_dtoa_r+0x6fa>
 8003684:	2f0e      	cmp	r7, #14
 8003686:	f300 8154 	bgt.w	8003932 <_dtoa_r+0x6fa>
 800368a:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <_dtoa_r+0x580>)
 800368c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003690:	ed93 7b00 	vldr	d7, [r3]
 8003694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	ed8d 7b00 	vstr	d7, [sp]
 800369c:	f280 80e5 	bge.w	800386a <_dtoa_r+0x632>
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f300 80e1 	bgt.w	800386a <_dtoa_r+0x632>
 80036a8:	d10c      	bne.n	80036c4 <_dtoa_r+0x48c>
 80036aa:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <_dtoa_r+0x594>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	ec51 0b17 	vmov	r0, r1, d7
 80036b2:	f7fc ffa1 	bl	80005f8 <__aeabi_dmul>
 80036b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036ba:	f7fd fa23 	bl	8000b04 <__aeabi_dcmpge>
 80036be:	2800      	cmp	r0, #0
 80036c0:	f000 8266 	beq.w	8003b90 <_dtoa_r+0x958>
 80036c4:	2400      	movs	r4, #0
 80036c6:	4625      	mov	r5, r4
 80036c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80036ca:	4656      	mov	r6, sl
 80036cc:	ea6f 0803 	mvn.w	r8, r3
 80036d0:	2700      	movs	r7, #0
 80036d2:	4621      	mov	r1, r4
 80036d4:	4648      	mov	r0, r9
 80036d6:	f000 fcbf 	bl	8004058 <_Bfree>
 80036da:	2d00      	cmp	r5, #0
 80036dc:	f000 80bd 	beq.w	800385a <_dtoa_r+0x622>
 80036e0:	b12f      	cbz	r7, 80036ee <_dtoa_r+0x4b6>
 80036e2:	42af      	cmp	r7, r5
 80036e4:	d003      	beq.n	80036ee <_dtoa_r+0x4b6>
 80036e6:	4639      	mov	r1, r7
 80036e8:	4648      	mov	r0, r9
 80036ea:	f000 fcb5 	bl	8004058 <_Bfree>
 80036ee:	4629      	mov	r1, r5
 80036f0:	4648      	mov	r0, r9
 80036f2:	f000 fcb1 	bl	8004058 <_Bfree>
 80036f6:	e0b0      	b.n	800385a <_dtoa_r+0x622>
 80036f8:	07e2      	lsls	r2, r4, #31
 80036fa:	d505      	bpl.n	8003708 <_dtoa_r+0x4d0>
 80036fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003700:	f7fc ff7a 	bl	80005f8 <__aeabi_dmul>
 8003704:	3601      	adds	r6, #1
 8003706:	2301      	movs	r3, #1
 8003708:	1064      	asrs	r4, r4, #1
 800370a:	3508      	adds	r5, #8
 800370c:	e762      	b.n	80035d4 <_dtoa_r+0x39c>
 800370e:	2602      	movs	r6, #2
 8003710:	e765      	b.n	80035de <_dtoa_r+0x3a6>
 8003712:	9c03      	ldr	r4, [sp, #12]
 8003714:	46b8      	mov	r8, r7
 8003716:	e784      	b.n	8003622 <_dtoa_r+0x3ea>
 8003718:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <_dtoa_r+0x580>)
 800371a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800371c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003720:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003724:	4454      	add	r4, sl
 8003726:	2900      	cmp	r1, #0
 8003728:	d054      	beq.n	80037d4 <_dtoa_r+0x59c>
 800372a:	4929      	ldr	r1, [pc, #164]	@ (80037d0 <_dtoa_r+0x598>)
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd f88d 	bl	800084c <__aeabi_ddiv>
 8003732:	4633      	mov	r3, r6
 8003734:	462a      	mov	r2, r5
 8003736:	f7fc fda7 	bl	8000288 <__aeabi_dsub>
 800373a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800373e:	4656      	mov	r6, sl
 8003740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003744:	f7fd fa08 	bl	8000b58 <__aeabi_d2iz>
 8003748:	4605      	mov	r5, r0
 800374a:	f7fc feeb 	bl	8000524 <__aeabi_i2d>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003756:	f7fc fd97 	bl	8000288 <__aeabi_dsub>
 800375a:	3530      	adds	r5, #48	@ 0x30
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003764:	f806 5b01 	strb.w	r5, [r6], #1
 8003768:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800376c:	f7fd f9b6 	bl	8000adc <__aeabi_dcmplt>
 8003770:	2800      	cmp	r0, #0
 8003772:	d172      	bne.n	800385a <_dtoa_r+0x622>
 8003774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003778:	4911      	ldr	r1, [pc, #68]	@ (80037c0 <_dtoa_r+0x588>)
 800377a:	2000      	movs	r0, #0
 800377c:	f7fc fd84 	bl	8000288 <__aeabi_dsub>
 8003780:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003784:	f7fd f9aa 	bl	8000adc <__aeabi_dcmplt>
 8003788:	2800      	cmp	r0, #0
 800378a:	f040 80b4 	bne.w	80038f6 <_dtoa_r+0x6be>
 800378e:	42a6      	cmp	r6, r4
 8003790:	f43f af70 	beq.w	8003674 <_dtoa_r+0x43c>
 8003794:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003798:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <_dtoa_r+0x58c>)
 800379a:	2200      	movs	r2, #0
 800379c:	f7fc ff2c 	bl	80005f8 <__aeabi_dmul>
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <_dtoa_r+0x58c>)
 80037a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80037a6:	2200      	movs	r2, #0
 80037a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037ac:	f7fc ff24 	bl	80005f8 <__aeabi_dmul>
 80037b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037b4:	e7c4      	b.n	8003740 <_dtoa_r+0x508>
 80037b6:	bf00      	nop
 80037b8:	08004de0 	.word	0x08004de0
 80037bc:	08004db8 	.word	0x08004db8
 80037c0:	3ff00000 	.word	0x3ff00000
 80037c4:	40240000 	.word	0x40240000
 80037c8:	401c0000 	.word	0x401c0000
 80037cc:	40140000 	.word	0x40140000
 80037d0:	3fe00000 	.word	0x3fe00000
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	f7fc ff0e 	bl	80005f8 <__aeabi_dmul>
 80037dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80037e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80037e2:	4656      	mov	r6, sl
 80037e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037e8:	f7fd f9b6 	bl	8000b58 <__aeabi_d2iz>
 80037ec:	4605      	mov	r5, r0
 80037ee:	f7fc fe99 	bl	8000524 <__aeabi_i2d>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037fa:	f7fc fd45 	bl	8000288 <__aeabi_dsub>
 80037fe:	3530      	adds	r5, #48	@ 0x30
 8003800:	f806 5b01 	strb.w	r5, [r6], #1
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	42a6      	cmp	r6, r4
 800380a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	d124      	bne.n	800385e <_dtoa_r+0x626>
 8003814:	4baf      	ldr	r3, [pc, #700]	@ (8003ad4 <_dtoa_r+0x89c>)
 8003816:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800381a:	f7fc fd37 	bl	800028c <__adddf3>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003826:	f7fd f977 	bl	8000b18 <__aeabi_dcmpgt>
 800382a:	2800      	cmp	r0, #0
 800382c:	d163      	bne.n	80038f6 <_dtoa_r+0x6be>
 800382e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003832:	49a8      	ldr	r1, [pc, #672]	@ (8003ad4 <_dtoa_r+0x89c>)
 8003834:	2000      	movs	r0, #0
 8003836:	f7fc fd27 	bl	8000288 <__aeabi_dsub>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003842:	f7fd f94b 	bl	8000adc <__aeabi_dcmplt>
 8003846:	2800      	cmp	r0, #0
 8003848:	f43f af14 	beq.w	8003674 <_dtoa_r+0x43c>
 800384c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800384e:	1e73      	subs	r3, r6, #1
 8003850:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003852:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003856:	2b30      	cmp	r3, #48	@ 0x30
 8003858:	d0f8      	beq.n	800384c <_dtoa_r+0x614>
 800385a:	4647      	mov	r7, r8
 800385c:	e03b      	b.n	80038d6 <_dtoa_r+0x69e>
 800385e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ad8 <_dtoa_r+0x8a0>)
 8003860:	f7fc feca 	bl	80005f8 <__aeabi_dmul>
 8003864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003868:	e7bc      	b.n	80037e4 <_dtoa_r+0x5ac>
 800386a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800386e:	4656      	mov	r6, sl
 8003870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	f7fc ffe8 	bl	800084c <__aeabi_ddiv>
 800387c:	f7fd f96c 	bl	8000b58 <__aeabi_d2iz>
 8003880:	4680      	mov	r8, r0
 8003882:	f7fc fe4f 	bl	8000524 <__aeabi_i2d>
 8003886:	e9dd 2300 	ldrd	r2, r3, [sp]
 800388a:	f7fc feb5 	bl	80005f8 <__aeabi_dmul>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4620      	mov	r0, r4
 8003894:	4629      	mov	r1, r5
 8003896:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800389a:	f7fc fcf5 	bl	8000288 <__aeabi_dsub>
 800389e:	f806 4b01 	strb.w	r4, [r6], #1
 80038a2:	9d03      	ldr	r5, [sp, #12]
 80038a4:	eba6 040a 	sub.w	r4, r6, sl
 80038a8:	42a5      	cmp	r5, r4
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	d133      	bne.n	8003918 <_dtoa_r+0x6e0>
 80038b0:	f7fc fcec 	bl	800028c <__adddf3>
 80038b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038b8:	4604      	mov	r4, r0
 80038ba:	460d      	mov	r5, r1
 80038bc:	f7fd f92c 	bl	8000b18 <__aeabi_dcmpgt>
 80038c0:	b9c0      	cbnz	r0, 80038f4 <_dtoa_r+0x6bc>
 80038c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038c6:	4620      	mov	r0, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	f7fd f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80038ce:	b110      	cbz	r0, 80038d6 <_dtoa_r+0x69e>
 80038d0:	f018 0f01 	tst.w	r8, #1
 80038d4:	d10e      	bne.n	80038f4 <_dtoa_r+0x6bc>
 80038d6:	9902      	ldr	r1, [sp, #8]
 80038d8:	4648      	mov	r0, r9
 80038da:	f000 fbbd 	bl	8004058 <_Bfree>
 80038de:	2300      	movs	r3, #0
 80038e0:	7033      	strb	r3, [r6, #0]
 80038e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80038e4:	3701      	adds	r7, #1
 80038e6:	601f      	str	r7, [r3, #0]
 80038e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 824b 	beq.w	8003d86 <_dtoa_r+0xb4e>
 80038f0:	601e      	str	r6, [r3, #0]
 80038f2:	e248      	b.n	8003d86 <_dtoa_r+0xb4e>
 80038f4:	46b8      	mov	r8, r7
 80038f6:	4633      	mov	r3, r6
 80038f8:	461e      	mov	r6, r3
 80038fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038fe:	2a39      	cmp	r2, #57	@ 0x39
 8003900:	d106      	bne.n	8003910 <_dtoa_r+0x6d8>
 8003902:	459a      	cmp	sl, r3
 8003904:	d1f8      	bne.n	80038f8 <_dtoa_r+0x6c0>
 8003906:	2230      	movs	r2, #48	@ 0x30
 8003908:	f108 0801 	add.w	r8, r8, #1
 800390c:	f88a 2000 	strb.w	r2, [sl]
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	3201      	adds	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e7a0      	b.n	800385a <_dtoa_r+0x622>
 8003918:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <_dtoa_r+0x8a0>)
 800391a:	2200      	movs	r2, #0
 800391c:	f7fc fe6c 	bl	80005f8 <__aeabi_dmul>
 8003920:	2200      	movs	r2, #0
 8003922:	2300      	movs	r3, #0
 8003924:	4604      	mov	r4, r0
 8003926:	460d      	mov	r5, r1
 8003928:	f7fd f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800392c:	2800      	cmp	r0, #0
 800392e:	d09f      	beq.n	8003870 <_dtoa_r+0x638>
 8003930:	e7d1      	b.n	80038d6 <_dtoa_r+0x69e>
 8003932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003934:	2a00      	cmp	r2, #0
 8003936:	f000 80ea 	beq.w	8003b0e <_dtoa_r+0x8d6>
 800393a:	9a07      	ldr	r2, [sp, #28]
 800393c:	2a01      	cmp	r2, #1
 800393e:	f300 80cd 	bgt.w	8003adc <_dtoa_r+0x8a4>
 8003942:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003944:	2a00      	cmp	r2, #0
 8003946:	f000 80c1 	beq.w	8003acc <_dtoa_r+0x894>
 800394a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800394e:	9c08      	ldr	r4, [sp, #32]
 8003950:	9e00      	ldr	r6, [sp, #0]
 8003952:	9a00      	ldr	r2, [sp, #0]
 8003954:	441a      	add	r2, r3
 8003956:	9200      	str	r2, [sp, #0]
 8003958:	9a06      	ldr	r2, [sp, #24]
 800395a:	2101      	movs	r1, #1
 800395c:	441a      	add	r2, r3
 800395e:	4648      	mov	r0, r9
 8003960:	9206      	str	r2, [sp, #24]
 8003962:	f000 fc2d 	bl	80041c0 <__i2b>
 8003966:	4605      	mov	r5, r0
 8003968:	b166      	cbz	r6, 8003984 <_dtoa_r+0x74c>
 800396a:	9b06      	ldr	r3, [sp, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	dd09      	ble.n	8003984 <_dtoa_r+0x74c>
 8003970:	42b3      	cmp	r3, r6
 8003972:	9a00      	ldr	r2, [sp, #0]
 8003974:	bfa8      	it	ge
 8003976:	4633      	movge	r3, r6
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	9200      	str	r2, [sp, #0]
 800397c:	9a06      	ldr	r2, [sp, #24]
 800397e:	1af6      	subs	r6, r6, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	9306      	str	r3, [sp, #24]
 8003984:	9b08      	ldr	r3, [sp, #32]
 8003986:	b30b      	cbz	r3, 80039cc <_dtoa_r+0x794>
 8003988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80c6 	beq.w	8003b1c <_dtoa_r+0x8e4>
 8003990:	2c00      	cmp	r4, #0
 8003992:	f000 80c0 	beq.w	8003b16 <_dtoa_r+0x8de>
 8003996:	4629      	mov	r1, r5
 8003998:	4622      	mov	r2, r4
 800399a:	4648      	mov	r0, r9
 800399c:	f000 fcc8 	bl	8004330 <__pow5mult>
 80039a0:	9a02      	ldr	r2, [sp, #8]
 80039a2:	4601      	mov	r1, r0
 80039a4:	4605      	mov	r5, r0
 80039a6:	4648      	mov	r0, r9
 80039a8:	f000 fc20 	bl	80041ec <__multiply>
 80039ac:	9902      	ldr	r1, [sp, #8]
 80039ae:	4680      	mov	r8, r0
 80039b0:	4648      	mov	r0, r9
 80039b2:	f000 fb51 	bl	8004058 <_Bfree>
 80039b6:	9b08      	ldr	r3, [sp, #32]
 80039b8:	1b1b      	subs	r3, r3, r4
 80039ba:	9308      	str	r3, [sp, #32]
 80039bc:	f000 80b1 	beq.w	8003b22 <_dtoa_r+0x8ea>
 80039c0:	9a08      	ldr	r2, [sp, #32]
 80039c2:	4641      	mov	r1, r8
 80039c4:	4648      	mov	r0, r9
 80039c6:	f000 fcb3 	bl	8004330 <__pow5mult>
 80039ca:	9002      	str	r0, [sp, #8]
 80039cc:	2101      	movs	r1, #1
 80039ce:	4648      	mov	r0, r9
 80039d0:	f000 fbf6 	bl	80041c0 <__i2b>
 80039d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039d6:	4604      	mov	r4, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 81d8 	beq.w	8003d8e <_dtoa_r+0xb56>
 80039de:	461a      	mov	r2, r3
 80039e0:	4601      	mov	r1, r0
 80039e2:	4648      	mov	r0, r9
 80039e4:	f000 fca4 	bl	8004330 <__pow5mult>
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	4604      	mov	r4, r0
 80039ee:	f300 809f 	bgt.w	8003b30 <_dtoa_r+0x8f8>
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 8097 	bne.w	8003b28 <_dtoa_r+0x8f0>
 80039fa:	9b05      	ldr	r3, [sp, #20]
 80039fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 8093 	bne.w	8003b2c <_dtoa_r+0x8f4>
 8003a06:	9b05      	ldr	r3, [sp, #20]
 8003a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a0c:	0d1b      	lsrs	r3, r3, #20
 8003a0e:	051b      	lsls	r3, r3, #20
 8003a10:	b133      	cbz	r3, 8003a20 <_dtoa_r+0x7e8>
 8003a12:	9b00      	ldr	r3, [sp, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	9b06      	ldr	r3, [sp, #24]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	9306      	str	r3, [sp, #24]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	9308      	str	r3, [sp, #32]
 8003a22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 81b8 	beq.w	8003d9a <_dtoa_r+0xb62>
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a30:	6918      	ldr	r0, [r3, #16]
 8003a32:	f000 fb79 	bl	8004128 <__hi0bits>
 8003a36:	f1c0 0020 	rsb	r0, r0, #32
 8003a3a:	9b06      	ldr	r3, [sp, #24]
 8003a3c:	4418      	add	r0, r3
 8003a3e:	f010 001f 	ands.w	r0, r0, #31
 8003a42:	f000 8082 	beq.w	8003b4a <_dtoa_r+0x912>
 8003a46:	f1c0 0320 	rsb	r3, r0, #32
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	dd73      	ble.n	8003b36 <_dtoa_r+0x8fe>
 8003a4e:	9b00      	ldr	r3, [sp, #0]
 8003a50:	f1c0 001c 	rsb	r0, r0, #28
 8003a54:	4403      	add	r3, r0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	9b06      	ldr	r3, [sp, #24]
 8003a5a:	4403      	add	r3, r0
 8003a5c:	4406      	add	r6, r0
 8003a5e:	9306      	str	r3, [sp, #24]
 8003a60:	9b00      	ldr	r3, [sp, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	dd05      	ble.n	8003a72 <_dtoa_r+0x83a>
 8003a66:	9902      	ldr	r1, [sp, #8]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4648      	mov	r0, r9
 8003a6c:	f000 fcba 	bl	80043e4 <__lshift>
 8003a70:	9002      	str	r0, [sp, #8]
 8003a72:	9b06      	ldr	r3, [sp, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dd05      	ble.n	8003a84 <_dtoa_r+0x84c>
 8003a78:	4621      	mov	r1, r4
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4648      	mov	r0, r9
 8003a7e:	f000 fcb1 	bl	80043e4 <__lshift>
 8003a82:	4604      	mov	r4, r0
 8003a84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d061      	beq.n	8003b4e <_dtoa_r+0x916>
 8003a8a:	9802      	ldr	r0, [sp, #8]
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	f000 fd15 	bl	80044bc <__mcmp>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	da5b      	bge.n	8003b4e <_dtoa_r+0x916>
 8003a96:	2300      	movs	r3, #0
 8003a98:	9902      	ldr	r1, [sp, #8]
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	4648      	mov	r0, r9
 8003a9e:	f000 fafd 	bl	800409c <__multadd>
 8003aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aa4:	9002      	str	r0, [sp, #8]
 8003aa6:	f107 38ff 	add.w	r8, r7, #4294967295
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8177 	beq.w	8003d9e <_dtoa_r+0xb66>
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	4648      	mov	r0, r9
 8003ab8:	f000 faf0 	bl	800409c <__multadd>
 8003abc:	f1bb 0f00 	cmp.w	fp, #0
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	dc6f      	bgt.n	8003ba4 <_dtoa_r+0x96c>
 8003ac4:	9b07      	ldr	r3, [sp, #28]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	dc49      	bgt.n	8003b5e <_dtoa_r+0x926>
 8003aca:	e06b      	b.n	8003ba4 <_dtoa_r+0x96c>
 8003acc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003ad2:	e73c      	b.n	800394e <_dtoa_r+0x716>
 8003ad4:	3fe00000 	.word	0x3fe00000
 8003ad8:	40240000 	.word	0x40240000
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	1e5c      	subs	r4, r3, #1
 8003ae0:	9b08      	ldr	r3, [sp, #32]
 8003ae2:	42a3      	cmp	r3, r4
 8003ae4:	db09      	blt.n	8003afa <_dtoa_r+0x8c2>
 8003ae6:	1b1c      	subs	r4, r3, r4
 8003ae8:	9b03      	ldr	r3, [sp, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f6bf af30 	bge.w	8003950 <_dtoa_r+0x718>
 8003af0:	9b00      	ldr	r3, [sp, #0]
 8003af2:	9a03      	ldr	r2, [sp, #12]
 8003af4:	1a9e      	subs	r6, r3, r2
 8003af6:	2300      	movs	r3, #0
 8003af8:	e72b      	b.n	8003952 <_dtoa_r+0x71a>
 8003afa:	9b08      	ldr	r3, [sp, #32]
 8003afc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003afe:	9408      	str	r4, [sp, #32]
 8003b00:	1ae3      	subs	r3, r4, r3
 8003b02:	441a      	add	r2, r3
 8003b04:	9e00      	ldr	r6, [sp, #0]
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	920d      	str	r2, [sp, #52]	@ 0x34
 8003b0a:	2400      	movs	r4, #0
 8003b0c:	e721      	b.n	8003952 <_dtoa_r+0x71a>
 8003b0e:	9c08      	ldr	r4, [sp, #32]
 8003b10:	9e00      	ldr	r6, [sp, #0]
 8003b12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003b14:	e728      	b.n	8003968 <_dtoa_r+0x730>
 8003b16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003b1a:	e751      	b.n	80039c0 <_dtoa_r+0x788>
 8003b1c:	9a08      	ldr	r2, [sp, #32]
 8003b1e:	9902      	ldr	r1, [sp, #8]
 8003b20:	e750      	b.n	80039c4 <_dtoa_r+0x78c>
 8003b22:	f8cd 8008 	str.w	r8, [sp, #8]
 8003b26:	e751      	b.n	80039cc <_dtoa_r+0x794>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e779      	b.n	8003a20 <_dtoa_r+0x7e8>
 8003b2c:	9b04      	ldr	r3, [sp, #16]
 8003b2e:	e777      	b.n	8003a20 <_dtoa_r+0x7e8>
 8003b30:	2300      	movs	r3, #0
 8003b32:	9308      	str	r3, [sp, #32]
 8003b34:	e779      	b.n	8003a2a <_dtoa_r+0x7f2>
 8003b36:	d093      	beq.n	8003a60 <_dtoa_r+0x828>
 8003b38:	9a00      	ldr	r2, [sp, #0]
 8003b3a:	331c      	adds	r3, #28
 8003b3c:	441a      	add	r2, r3
 8003b3e:	9200      	str	r2, [sp, #0]
 8003b40:	9a06      	ldr	r2, [sp, #24]
 8003b42:	441a      	add	r2, r3
 8003b44:	441e      	add	r6, r3
 8003b46:	9206      	str	r2, [sp, #24]
 8003b48:	e78a      	b.n	8003a60 <_dtoa_r+0x828>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	e7f4      	b.n	8003b38 <_dtoa_r+0x900>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	46b8      	mov	r8, r7
 8003b54:	dc20      	bgt.n	8003b98 <_dtoa_r+0x960>
 8003b56:	469b      	mov	fp, r3
 8003b58:	9b07      	ldr	r3, [sp, #28]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	dd1e      	ble.n	8003b9c <_dtoa_r+0x964>
 8003b5e:	f1bb 0f00 	cmp.w	fp, #0
 8003b62:	f47f adb1 	bne.w	80036c8 <_dtoa_r+0x490>
 8003b66:	4621      	mov	r1, r4
 8003b68:	465b      	mov	r3, fp
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	4648      	mov	r0, r9
 8003b6e:	f000 fa95 	bl	800409c <__multadd>
 8003b72:	4601      	mov	r1, r0
 8003b74:	4604      	mov	r4, r0
 8003b76:	9802      	ldr	r0, [sp, #8]
 8003b78:	f000 fca0 	bl	80044bc <__mcmp>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	f77f ada3 	ble.w	80036c8 <_dtoa_r+0x490>
 8003b82:	4656      	mov	r6, sl
 8003b84:	2331      	movs	r3, #49	@ 0x31
 8003b86:	f806 3b01 	strb.w	r3, [r6], #1
 8003b8a:	f108 0801 	add.w	r8, r8, #1
 8003b8e:	e59f      	b.n	80036d0 <_dtoa_r+0x498>
 8003b90:	9c03      	ldr	r4, [sp, #12]
 8003b92:	46b8      	mov	r8, r7
 8003b94:	4625      	mov	r5, r4
 8003b96:	e7f4      	b.n	8003b82 <_dtoa_r+0x94a>
 8003b98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8101 	beq.w	8003da6 <_dtoa_r+0xb6e>
 8003ba4:	2e00      	cmp	r6, #0
 8003ba6:	dd05      	ble.n	8003bb4 <_dtoa_r+0x97c>
 8003ba8:	4629      	mov	r1, r5
 8003baa:	4632      	mov	r2, r6
 8003bac:	4648      	mov	r0, r9
 8003bae:	f000 fc19 	bl	80043e4 <__lshift>
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	9b08      	ldr	r3, [sp, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d05c      	beq.n	8003c74 <_dtoa_r+0xa3c>
 8003bba:	6869      	ldr	r1, [r5, #4]
 8003bbc:	4648      	mov	r0, r9
 8003bbe:	f000 fa0b 	bl	8003fd8 <_Balloc>
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	b928      	cbnz	r0, 8003bd2 <_dtoa_r+0x99a>
 8003bc6:	4b82      	ldr	r3, [pc, #520]	@ (8003dd0 <_dtoa_r+0xb98>)
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003bce:	f7ff bb4a 	b.w	8003266 <_dtoa_r+0x2e>
 8003bd2:	692a      	ldr	r2, [r5, #16]
 8003bd4:	3202      	adds	r2, #2
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	f105 010c 	add.w	r1, r5, #12
 8003bdc:	300c      	adds	r0, #12
 8003bde:	f7ff fa92 	bl	8003106 <memcpy>
 8003be2:	2201      	movs	r2, #1
 8003be4:	4631      	mov	r1, r6
 8003be6:	4648      	mov	r0, r9
 8003be8:	f000 fbfc 	bl	80043e4 <__lshift>
 8003bec:	f10a 0301 	add.w	r3, sl, #1
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	eb0a 030b 	add.w	r3, sl, fp
 8003bf6:	9308      	str	r3, [sp, #32]
 8003bf8:	9b04      	ldr	r3, [sp, #16]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	462f      	mov	r7, r5
 8003c00:	9306      	str	r3, [sp, #24]
 8003c02:	4605      	mov	r5, r0
 8003c04:	9b00      	ldr	r3, [sp, #0]
 8003c06:	9802      	ldr	r0, [sp, #8]
 8003c08:	4621      	mov	r1, r4
 8003c0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8003c0e:	f7ff fa88 	bl	8003122 <quorem>
 8003c12:	4603      	mov	r3, r0
 8003c14:	3330      	adds	r3, #48	@ 0x30
 8003c16:	9003      	str	r0, [sp, #12]
 8003c18:	4639      	mov	r1, r7
 8003c1a:	9802      	ldr	r0, [sp, #8]
 8003c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c1e:	f000 fc4d 	bl	80044bc <__mcmp>
 8003c22:	462a      	mov	r2, r5
 8003c24:	9004      	str	r0, [sp, #16]
 8003c26:	4621      	mov	r1, r4
 8003c28:	4648      	mov	r0, r9
 8003c2a:	f000 fc63 	bl	80044f4 <__mdiff>
 8003c2e:	68c2      	ldr	r2, [r0, #12]
 8003c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c32:	4606      	mov	r6, r0
 8003c34:	bb02      	cbnz	r2, 8003c78 <_dtoa_r+0xa40>
 8003c36:	4601      	mov	r1, r0
 8003c38:	9802      	ldr	r0, [sp, #8]
 8003c3a:	f000 fc3f 	bl	80044bc <__mcmp>
 8003c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c40:	4602      	mov	r2, r0
 8003c42:	4631      	mov	r1, r6
 8003c44:	4648      	mov	r0, r9
 8003c46:	920c      	str	r2, [sp, #48]	@ 0x30
 8003c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4a:	f000 fa05 	bl	8004058 <_Bfree>
 8003c4e:	9b07      	ldr	r3, [sp, #28]
 8003c50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003c52:	9e00      	ldr	r6, [sp, #0]
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	9b06      	ldr	r3, [sp, #24]
 8003c5a:	4319      	orrs	r1, r3
 8003c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c5e:	d10d      	bne.n	8003c7c <_dtoa_r+0xa44>
 8003c60:	2b39      	cmp	r3, #57	@ 0x39
 8003c62:	d027      	beq.n	8003cb4 <_dtoa_r+0xa7c>
 8003c64:	9a04      	ldr	r2, [sp, #16]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	dd01      	ble.n	8003c6e <_dtoa_r+0xa36>
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	3331      	adds	r3, #49	@ 0x31
 8003c6e:	f88b 3000 	strb.w	r3, [fp]
 8003c72:	e52e      	b.n	80036d2 <_dtoa_r+0x49a>
 8003c74:	4628      	mov	r0, r5
 8003c76:	e7b9      	b.n	8003bec <_dtoa_r+0x9b4>
 8003c78:	2201      	movs	r2, #1
 8003c7a:	e7e2      	b.n	8003c42 <_dtoa_r+0xa0a>
 8003c7c:	9904      	ldr	r1, [sp, #16]
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	db04      	blt.n	8003c8c <_dtoa_r+0xa54>
 8003c82:	9807      	ldr	r0, [sp, #28]
 8003c84:	4301      	orrs	r1, r0
 8003c86:	9806      	ldr	r0, [sp, #24]
 8003c88:	4301      	orrs	r1, r0
 8003c8a:	d120      	bne.n	8003cce <_dtoa_r+0xa96>
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	ddee      	ble.n	8003c6e <_dtoa_r+0xa36>
 8003c90:	9902      	ldr	r1, [sp, #8]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4648      	mov	r0, r9
 8003c98:	f000 fba4 	bl	80043e4 <__lshift>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	9002      	str	r0, [sp, #8]
 8003ca0:	f000 fc0c 	bl	80044bc <__mcmp>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	9b00      	ldr	r3, [sp, #0]
 8003ca8:	dc02      	bgt.n	8003cb0 <_dtoa_r+0xa78>
 8003caa:	d1e0      	bne.n	8003c6e <_dtoa_r+0xa36>
 8003cac:	07da      	lsls	r2, r3, #31
 8003cae:	d5de      	bpl.n	8003c6e <_dtoa_r+0xa36>
 8003cb0:	2b39      	cmp	r3, #57	@ 0x39
 8003cb2:	d1da      	bne.n	8003c6a <_dtoa_r+0xa32>
 8003cb4:	2339      	movs	r3, #57	@ 0x39
 8003cb6:	f88b 3000 	strb.w	r3, [fp]
 8003cba:	4633      	mov	r3, r6
 8003cbc:	461e      	mov	r6, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003cc4:	2a39      	cmp	r2, #57	@ 0x39
 8003cc6:	d04e      	beq.n	8003d66 <_dtoa_r+0xb2e>
 8003cc8:	3201      	adds	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e501      	b.n	80036d2 <_dtoa_r+0x49a>
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	dd03      	ble.n	8003cda <_dtoa_r+0xaa2>
 8003cd2:	2b39      	cmp	r3, #57	@ 0x39
 8003cd4:	d0ee      	beq.n	8003cb4 <_dtoa_r+0xa7c>
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	e7c9      	b.n	8003c6e <_dtoa_r+0xa36>
 8003cda:	9a00      	ldr	r2, [sp, #0]
 8003cdc:	9908      	ldr	r1, [sp, #32]
 8003cde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003ce2:	428a      	cmp	r2, r1
 8003ce4:	d028      	beq.n	8003d38 <_dtoa_r+0xb00>
 8003ce6:	9902      	ldr	r1, [sp, #8]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	220a      	movs	r2, #10
 8003cec:	4648      	mov	r0, r9
 8003cee:	f000 f9d5 	bl	800409c <__multadd>
 8003cf2:	42af      	cmp	r7, r5
 8003cf4:	9002      	str	r0, [sp, #8]
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	f04f 020a 	mov.w	r2, #10
 8003cfe:	4639      	mov	r1, r7
 8003d00:	4648      	mov	r0, r9
 8003d02:	d107      	bne.n	8003d14 <_dtoa_r+0xadc>
 8003d04:	f000 f9ca 	bl	800409c <__multadd>
 8003d08:	4607      	mov	r7, r0
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	9b00      	ldr	r3, [sp, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	e777      	b.n	8003c04 <_dtoa_r+0x9cc>
 8003d14:	f000 f9c2 	bl	800409c <__multadd>
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	220a      	movs	r2, #10
 8003d20:	4648      	mov	r0, r9
 8003d22:	f000 f9bb 	bl	800409c <__multadd>
 8003d26:	4605      	mov	r5, r0
 8003d28:	e7f0      	b.n	8003d0c <_dtoa_r+0xad4>
 8003d2a:	f1bb 0f00 	cmp.w	fp, #0
 8003d2e:	bfcc      	ite	gt
 8003d30:	465e      	movgt	r6, fp
 8003d32:	2601      	movle	r6, #1
 8003d34:	4456      	add	r6, sl
 8003d36:	2700      	movs	r7, #0
 8003d38:	9902      	ldr	r1, [sp, #8]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4648      	mov	r0, r9
 8003d40:	f000 fb50 	bl	80043e4 <__lshift>
 8003d44:	4621      	mov	r1, r4
 8003d46:	9002      	str	r0, [sp, #8]
 8003d48:	f000 fbb8 	bl	80044bc <__mcmp>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	dcb4      	bgt.n	8003cba <_dtoa_r+0xa82>
 8003d50:	d102      	bne.n	8003d58 <_dtoa_r+0xb20>
 8003d52:	9b00      	ldr	r3, [sp, #0]
 8003d54:	07db      	lsls	r3, r3, #31
 8003d56:	d4b0      	bmi.n	8003cba <_dtoa_r+0xa82>
 8003d58:	4633      	mov	r3, r6
 8003d5a:	461e      	mov	r6, r3
 8003d5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d60:	2a30      	cmp	r2, #48	@ 0x30
 8003d62:	d0fa      	beq.n	8003d5a <_dtoa_r+0xb22>
 8003d64:	e4b5      	b.n	80036d2 <_dtoa_r+0x49a>
 8003d66:	459a      	cmp	sl, r3
 8003d68:	d1a8      	bne.n	8003cbc <_dtoa_r+0xa84>
 8003d6a:	2331      	movs	r3, #49	@ 0x31
 8003d6c:	f108 0801 	add.w	r8, r8, #1
 8003d70:	f88a 3000 	strb.w	r3, [sl]
 8003d74:	e4ad      	b.n	80036d2 <_dtoa_r+0x49a>
 8003d76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003dd4 <_dtoa_r+0xb9c>
 8003d7c:	b11b      	cbz	r3, 8003d86 <_dtoa_r+0xb4e>
 8003d7e:	f10a 0308 	add.w	r3, sl, #8
 8003d82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4650      	mov	r0, sl
 8003d88:	b017      	add	sp, #92	@ 0x5c
 8003d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8e:	9b07      	ldr	r3, [sp, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f77f ae2e 	ble.w	80039f2 <_dtoa_r+0x7ba>
 8003d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d98:	9308      	str	r3, [sp, #32]
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	e64d      	b.n	8003a3a <_dtoa_r+0x802>
 8003d9e:	f1bb 0f00 	cmp.w	fp, #0
 8003da2:	f77f aed9 	ble.w	8003b58 <_dtoa_r+0x920>
 8003da6:	4656      	mov	r6, sl
 8003da8:	9802      	ldr	r0, [sp, #8]
 8003daa:	4621      	mov	r1, r4
 8003dac:	f7ff f9b9 	bl	8003122 <quorem>
 8003db0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003db4:	f806 3b01 	strb.w	r3, [r6], #1
 8003db8:	eba6 020a 	sub.w	r2, r6, sl
 8003dbc:	4593      	cmp	fp, r2
 8003dbe:	ddb4      	ble.n	8003d2a <_dtoa_r+0xaf2>
 8003dc0:	9902      	ldr	r1, [sp, #8]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	220a      	movs	r2, #10
 8003dc6:	4648      	mov	r0, r9
 8003dc8:	f000 f968 	bl	800409c <__multadd>
 8003dcc:	9002      	str	r0, [sp, #8]
 8003dce:	e7eb      	b.n	8003da8 <_dtoa_r+0xb70>
 8003dd0:	08004cea 	.word	0x08004cea
 8003dd4:	08004c6e 	.word	0x08004c6e

08003dd8 <_free_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4605      	mov	r5, r0
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	d041      	beq.n	8003e64 <_free_r+0x8c>
 8003de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de4:	1f0c      	subs	r4, r1, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bfb8      	it	lt
 8003dea:	18e4      	addlt	r4, r4, r3
 8003dec:	f000 f8e8 	bl	8003fc0 <__malloc_lock>
 8003df0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <_free_r+0x90>)
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	b933      	cbnz	r3, 8003e04 <_free_r+0x2c>
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	6014      	str	r4, [r2, #0]
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e00:	f000 b8e4 	b.w	8003fcc <__malloc_unlock>
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d908      	bls.n	8003e1a <_free_r+0x42>
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	1821      	adds	r1, r4, r0
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf01      	itttt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	1809      	addeq	r1, r1, r0
 8003e16:	6021      	streq	r1, [r4, #0]
 8003e18:	e7ed      	b.n	8003df6 <_free_r+0x1e>
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b10b      	cbz	r3, 8003e24 <_free_r+0x4c>
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d9fa      	bls.n	8003e1a <_free_r+0x42>
 8003e24:	6811      	ldr	r1, [r2, #0]
 8003e26:	1850      	adds	r0, r2, r1
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d10b      	bne.n	8003e44 <_free_r+0x6c>
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	4401      	add	r1, r0
 8003e30:	1850      	adds	r0, r2, r1
 8003e32:	4283      	cmp	r3, r0
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	d1e0      	bne.n	8003dfa <_free_r+0x22>
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	6053      	str	r3, [r2, #4]
 8003e3e:	4408      	add	r0, r1
 8003e40:	6010      	str	r0, [r2, #0]
 8003e42:	e7da      	b.n	8003dfa <_free_r+0x22>
 8003e44:	d902      	bls.n	8003e4c <_free_r+0x74>
 8003e46:	230c      	movs	r3, #12
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	e7d6      	b.n	8003dfa <_free_r+0x22>
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	1821      	adds	r1, r4, r0
 8003e50:	428b      	cmp	r3, r1
 8003e52:	bf04      	itt	eq
 8003e54:	6819      	ldreq	r1, [r3, #0]
 8003e56:	685b      	ldreq	r3, [r3, #4]
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	bf04      	itt	eq
 8003e5c:	1809      	addeq	r1, r1, r0
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	6054      	str	r4, [r2, #4]
 8003e62:	e7ca      	b.n	8003dfa <_free_r+0x22>
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	20000434 	.word	0x20000434

08003e6c <malloc>:
 8003e6c:	4b02      	ldr	r3, [pc, #8]	@ (8003e78 <malloc+0xc>)
 8003e6e:	4601      	mov	r1, r0
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	f000 b825 	b.w	8003ec0 <_malloc_r>
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <sbrk_aligned>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ebc <sbrk_aligned+0x40>)
 8003e80:	460c      	mov	r4, r1
 8003e82:	6831      	ldr	r1, [r6, #0]
 8003e84:	4605      	mov	r5, r0
 8003e86:	b911      	cbnz	r1, 8003e8e <sbrk_aligned+0x12>
 8003e88:	f000 fde6 	bl	8004a58 <_sbrk_r>
 8003e8c:	6030      	str	r0, [r6, #0]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 fde1 	bl	8004a58 <_sbrk_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d103      	bne.n	8003ea2 <sbrk_aligned+0x26>
 8003e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
 8003ea2:	1cc4      	adds	r4, r0, #3
 8003ea4:	f024 0403 	bic.w	r4, r4, #3
 8003ea8:	42a0      	cmp	r0, r4
 8003eaa:	d0f8      	beq.n	8003e9e <sbrk_aligned+0x22>
 8003eac:	1a21      	subs	r1, r4, r0
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 fdd2 	bl	8004a58 <_sbrk_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d1f2      	bne.n	8003e9e <sbrk_aligned+0x22>
 8003eb8:	e7ef      	b.n	8003e9a <sbrk_aligned+0x1e>
 8003eba:	bf00      	nop
 8003ebc:	20000430 	.word	0x20000430

08003ec0 <_malloc_r>:
 8003ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec4:	1ccd      	adds	r5, r1, #3
 8003ec6:	f025 0503 	bic.w	r5, r5, #3
 8003eca:	3508      	adds	r5, #8
 8003ecc:	2d0c      	cmp	r5, #12
 8003ece:	bf38      	it	cc
 8003ed0:	250c      	movcc	r5, #12
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	db01      	blt.n	8003edc <_malloc_r+0x1c>
 8003ed8:	42a9      	cmp	r1, r5
 8003eda:	d904      	bls.n	8003ee6 <_malloc_r+0x26>
 8003edc:	230c      	movs	r3, #12
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fbc <_malloc_r+0xfc>
 8003eea:	f000 f869 	bl	8003fc0 <__malloc_lock>
 8003eee:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef2:	461c      	mov	r4, r3
 8003ef4:	bb44      	cbnz	r4, 8003f48 <_malloc_r+0x88>
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f7ff ffbf 	bl	8003e7c <sbrk_aligned>
 8003efe:	1c43      	adds	r3, r0, #1
 8003f00:	4604      	mov	r4, r0
 8003f02:	d158      	bne.n	8003fb6 <_malloc_r+0xf6>
 8003f04:	f8d8 4000 	ldr.w	r4, [r8]
 8003f08:	4627      	mov	r7, r4
 8003f0a:	2f00      	cmp	r7, #0
 8003f0c:	d143      	bne.n	8003f96 <_malloc_r+0xd6>
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	d04b      	beq.n	8003faa <_malloc_r+0xea>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	4639      	mov	r1, r7
 8003f16:	4630      	mov	r0, r6
 8003f18:	eb04 0903 	add.w	r9, r4, r3
 8003f1c:	f000 fd9c 	bl	8004a58 <_sbrk_r>
 8003f20:	4581      	cmp	r9, r0
 8003f22:	d142      	bne.n	8003faa <_malloc_r+0xea>
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	1a6d      	subs	r5, r5, r1
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f7ff ffa6 	bl	8003e7c <sbrk_aligned>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d03a      	beq.n	8003faa <_malloc_r+0xea>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	442b      	add	r3, r5
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	bb62      	cbnz	r2, 8003f9c <_malloc_r+0xdc>
 8003f42:	f8c8 7000 	str.w	r7, [r8]
 8003f46:	e00f      	b.n	8003f68 <_malloc_r+0xa8>
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	1b52      	subs	r2, r2, r5
 8003f4c:	d420      	bmi.n	8003f90 <_malloc_r+0xd0>
 8003f4e:	2a0b      	cmp	r2, #11
 8003f50:	d917      	bls.n	8003f82 <_malloc_r+0xc2>
 8003f52:	1961      	adds	r1, r4, r5
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	6025      	str	r5, [r4, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	6059      	strne	r1, [r3, #4]
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	bf08      	it	eq
 8003f60:	f8c8 1000 	streq.w	r1, [r8]
 8003f64:	5162      	str	r2, [r4, r5]
 8003f66:	604b      	str	r3, [r1, #4]
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 f82f 	bl	8003fcc <__malloc_unlock>
 8003f6e:	f104 000b 	add.w	r0, r4, #11
 8003f72:	1d23      	adds	r3, r4, #4
 8003f74:	f020 0007 	bic.w	r0, r0, #7
 8003f78:	1ac2      	subs	r2, r0, r3
 8003f7a:	bf1c      	itt	ne
 8003f7c:	1a1b      	subne	r3, r3, r0
 8003f7e:	50a3      	strne	r3, [r4, r2]
 8003f80:	e7af      	b.n	8003ee2 <_malloc_r+0x22>
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	bf0c      	ite	eq
 8003f88:	f8c8 2000 	streq.w	r2, [r8]
 8003f8c:	605a      	strne	r2, [r3, #4]
 8003f8e:	e7eb      	b.n	8003f68 <_malloc_r+0xa8>
 8003f90:	4623      	mov	r3, r4
 8003f92:	6864      	ldr	r4, [r4, #4]
 8003f94:	e7ae      	b.n	8003ef4 <_malloc_r+0x34>
 8003f96:	463c      	mov	r4, r7
 8003f98:	687f      	ldr	r7, [r7, #4]
 8003f9a:	e7b6      	b.n	8003f0a <_malloc_r+0x4a>
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d1fb      	bne.n	8003f9c <_malloc_r+0xdc>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6053      	str	r3, [r2, #4]
 8003fa8:	e7de      	b.n	8003f68 <_malloc_r+0xa8>
 8003faa:	230c      	movs	r3, #12
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f000 f80c 	bl	8003fcc <__malloc_unlock>
 8003fb4:	e794      	b.n	8003ee0 <_malloc_r+0x20>
 8003fb6:	6005      	str	r5, [r0, #0]
 8003fb8:	e7d6      	b.n	8003f68 <_malloc_r+0xa8>
 8003fba:	bf00      	nop
 8003fbc:	20000434 	.word	0x20000434

08003fc0 <__malloc_lock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	@ (8003fc8 <__malloc_lock+0x8>)
 8003fc2:	f7ff b89e 	b.w	8003102 <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	2000042c 	.word	0x2000042c

08003fcc <__malloc_unlock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	@ (8003fd4 <__malloc_unlock+0x8>)
 8003fce:	f7ff b899 	b.w	8003104 <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	2000042c 	.word	0x2000042c

08003fd8 <_Balloc>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	69c6      	ldr	r6, [r0, #28]
 8003fdc:	4604      	mov	r4, r0
 8003fde:	460d      	mov	r5, r1
 8003fe0:	b976      	cbnz	r6, 8004000 <_Balloc+0x28>
 8003fe2:	2010      	movs	r0, #16
 8003fe4:	f7ff ff42 	bl	8003e6c <malloc>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	61e0      	str	r0, [r4, #28]
 8003fec:	b920      	cbnz	r0, 8003ff8 <_Balloc+0x20>
 8003fee:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <_Balloc+0x78>)
 8003ff0:	4818      	ldr	r0, [pc, #96]	@ (8004054 <_Balloc+0x7c>)
 8003ff2:	216b      	movs	r1, #107	@ 0x6b
 8003ff4:	f000 fd40 	bl	8004a78 <__assert_func>
 8003ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ffc:	6006      	str	r6, [r0, #0]
 8003ffe:	60c6      	str	r6, [r0, #12]
 8004000:	69e6      	ldr	r6, [r4, #28]
 8004002:	68f3      	ldr	r3, [r6, #12]
 8004004:	b183      	cbz	r3, 8004028 <_Balloc+0x50>
 8004006:	69e3      	ldr	r3, [r4, #28]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800400e:	b9b8      	cbnz	r0, 8004040 <_Balloc+0x68>
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f605 	lsl.w	r6, r1, r5
 8004016:	1d72      	adds	r2, r6, #5
 8004018:	0092      	lsls	r2, r2, #2
 800401a:	4620      	mov	r0, r4
 800401c:	f000 fd4a 	bl	8004ab4 <_calloc_r>
 8004020:	b160      	cbz	r0, 800403c <_Balloc+0x64>
 8004022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004026:	e00e      	b.n	8004046 <_Balloc+0x6e>
 8004028:	2221      	movs	r2, #33	@ 0x21
 800402a:	2104      	movs	r1, #4
 800402c:	4620      	mov	r0, r4
 800402e:	f000 fd41 	bl	8004ab4 <_calloc_r>
 8004032:	69e3      	ldr	r3, [r4, #28]
 8004034:	60f0      	str	r0, [r6, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e4      	bne.n	8004006 <_Balloc+0x2e>
 800403c:	2000      	movs	r0, #0
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004046:	2300      	movs	r3, #0
 8004048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800404c:	e7f7      	b.n	800403e <_Balloc+0x66>
 800404e:	bf00      	nop
 8004050:	08004c7b 	.word	0x08004c7b
 8004054:	08004cfb 	.word	0x08004cfb

08004058 <_Bfree>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	69c6      	ldr	r6, [r0, #28]
 800405c:	4605      	mov	r5, r0
 800405e:	460c      	mov	r4, r1
 8004060:	b976      	cbnz	r6, 8004080 <_Bfree+0x28>
 8004062:	2010      	movs	r0, #16
 8004064:	f7ff ff02 	bl	8003e6c <malloc>
 8004068:	4602      	mov	r2, r0
 800406a:	61e8      	str	r0, [r5, #28]
 800406c:	b920      	cbnz	r0, 8004078 <_Bfree+0x20>
 800406e:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <_Bfree+0x3c>)
 8004070:	4809      	ldr	r0, [pc, #36]	@ (8004098 <_Bfree+0x40>)
 8004072:	218f      	movs	r1, #143	@ 0x8f
 8004074:	f000 fd00 	bl	8004a78 <__assert_func>
 8004078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800407c:	6006      	str	r6, [r0, #0]
 800407e:	60c6      	str	r6, [r0, #12]
 8004080:	b13c      	cbz	r4, 8004092 <_Bfree+0x3a>
 8004082:	69eb      	ldr	r3, [r5, #28]
 8004084:	6862      	ldr	r2, [r4, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800408c:	6021      	str	r1, [r4, #0]
 800408e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	08004c7b 	.word	0x08004c7b
 8004098:	08004cfb 	.word	0x08004cfb

0800409c <__multadd>:
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	690d      	ldr	r5, [r1, #16]
 80040a2:	4607      	mov	r7, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	461e      	mov	r6, r3
 80040a8:	f101 0c14 	add.w	ip, r1, #20
 80040ac:	2000      	movs	r0, #0
 80040ae:	f8dc 3000 	ldr.w	r3, [ip]
 80040b2:	b299      	uxth	r1, r3
 80040b4:	fb02 6101 	mla	r1, r2, r1, r6
 80040b8:	0c1e      	lsrs	r6, r3, #16
 80040ba:	0c0b      	lsrs	r3, r1, #16
 80040bc:	fb02 3306 	mla	r3, r2, r6, r3
 80040c0:	b289      	uxth	r1, r1
 80040c2:	3001      	adds	r0, #1
 80040c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80040c8:	4285      	cmp	r5, r0
 80040ca:	f84c 1b04 	str.w	r1, [ip], #4
 80040ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80040d2:	dcec      	bgt.n	80040ae <__multadd+0x12>
 80040d4:	b30e      	cbz	r6, 800411a <__multadd+0x7e>
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	42ab      	cmp	r3, r5
 80040da:	dc19      	bgt.n	8004110 <__multadd+0x74>
 80040dc:	6861      	ldr	r1, [r4, #4]
 80040de:	4638      	mov	r0, r7
 80040e0:	3101      	adds	r1, #1
 80040e2:	f7ff ff79 	bl	8003fd8 <_Balloc>
 80040e6:	4680      	mov	r8, r0
 80040e8:	b928      	cbnz	r0, 80040f6 <__multadd+0x5a>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <__multadd+0x84>)
 80040ee:	480d      	ldr	r0, [pc, #52]	@ (8004124 <__multadd+0x88>)
 80040f0:	21ba      	movs	r1, #186	@ 0xba
 80040f2:	f000 fcc1 	bl	8004a78 <__assert_func>
 80040f6:	6922      	ldr	r2, [r4, #16]
 80040f8:	3202      	adds	r2, #2
 80040fa:	f104 010c 	add.w	r1, r4, #12
 80040fe:	0092      	lsls	r2, r2, #2
 8004100:	300c      	adds	r0, #12
 8004102:	f7ff f800 	bl	8003106 <memcpy>
 8004106:	4621      	mov	r1, r4
 8004108:	4638      	mov	r0, r7
 800410a:	f7ff ffa5 	bl	8004058 <_Bfree>
 800410e:	4644      	mov	r4, r8
 8004110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004114:	3501      	adds	r5, #1
 8004116:	615e      	str	r6, [r3, #20]
 8004118:	6125      	str	r5, [r4, #16]
 800411a:	4620      	mov	r0, r4
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004120:	08004cea 	.word	0x08004cea
 8004124:	08004cfb 	.word	0x08004cfb

08004128 <__hi0bits>:
 8004128:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800412c:	4603      	mov	r3, r0
 800412e:	bf36      	itet	cc
 8004130:	0403      	lslcc	r3, r0, #16
 8004132:	2000      	movcs	r0, #0
 8004134:	2010      	movcc	r0, #16
 8004136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800413a:	bf3c      	itt	cc
 800413c:	021b      	lslcc	r3, r3, #8
 800413e:	3008      	addcc	r0, #8
 8004140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004144:	bf3c      	itt	cc
 8004146:	011b      	lslcc	r3, r3, #4
 8004148:	3004      	addcc	r0, #4
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414e:	bf3c      	itt	cc
 8004150:	009b      	lslcc	r3, r3, #2
 8004152:	3002      	addcc	r0, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	db05      	blt.n	8004164 <__hi0bits+0x3c>
 8004158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800415c:	f100 0001 	add.w	r0, r0, #1
 8004160:	bf08      	it	eq
 8004162:	2020      	moveq	r0, #32
 8004164:	4770      	bx	lr

08004166 <__lo0bits>:
 8004166:	6803      	ldr	r3, [r0, #0]
 8004168:	4602      	mov	r2, r0
 800416a:	f013 0007 	ands.w	r0, r3, #7
 800416e:	d00b      	beq.n	8004188 <__lo0bits+0x22>
 8004170:	07d9      	lsls	r1, r3, #31
 8004172:	d421      	bmi.n	80041b8 <__lo0bits+0x52>
 8004174:	0798      	lsls	r0, r3, #30
 8004176:	bf49      	itett	mi
 8004178:	085b      	lsrmi	r3, r3, #1
 800417a:	089b      	lsrpl	r3, r3, #2
 800417c:	2001      	movmi	r0, #1
 800417e:	6013      	strmi	r3, [r2, #0]
 8004180:	bf5c      	itt	pl
 8004182:	6013      	strpl	r3, [r2, #0]
 8004184:	2002      	movpl	r0, #2
 8004186:	4770      	bx	lr
 8004188:	b299      	uxth	r1, r3
 800418a:	b909      	cbnz	r1, 8004190 <__lo0bits+0x2a>
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	2010      	movs	r0, #16
 8004190:	b2d9      	uxtb	r1, r3
 8004192:	b909      	cbnz	r1, 8004198 <__lo0bits+0x32>
 8004194:	3008      	adds	r0, #8
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	0719      	lsls	r1, r3, #28
 800419a:	bf04      	itt	eq
 800419c:	091b      	lsreq	r3, r3, #4
 800419e:	3004      	addeq	r0, #4
 80041a0:	0799      	lsls	r1, r3, #30
 80041a2:	bf04      	itt	eq
 80041a4:	089b      	lsreq	r3, r3, #2
 80041a6:	3002      	addeq	r0, #2
 80041a8:	07d9      	lsls	r1, r3, #31
 80041aa:	d403      	bmi.n	80041b4 <__lo0bits+0x4e>
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	f100 0001 	add.w	r0, r0, #1
 80041b2:	d003      	beq.n	80041bc <__lo0bits+0x56>
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4770      	bx	lr
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr
 80041bc:	2020      	movs	r0, #32
 80041be:	4770      	bx	lr

080041c0 <__i2b>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	460c      	mov	r4, r1
 80041c4:	2101      	movs	r1, #1
 80041c6:	f7ff ff07 	bl	8003fd8 <_Balloc>
 80041ca:	4602      	mov	r2, r0
 80041cc:	b928      	cbnz	r0, 80041da <__i2b+0x1a>
 80041ce:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <__i2b+0x24>)
 80041d0:	4805      	ldr	r0, [pc, #20]	@ (80041e8 <__i2b+0x28>)
 80041d2:	f240 1145 	movw	r1, #325	@ 0x145
 80041d6:	f000 fc4f 	bl	8004a78 <__assert_func>
 80041da:	2301      	movs	r3, #1
 80041dc:	6144      	str	r4, [r0, #20]
 80041de:	6103      	str	r3, [r0, #16]
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	bf00      	nop
 80041e4:	08004cea 	.word	0x08004cea
 80041e8:	08004cfb 	.word	0x08004cfb

080041ec <__multiply>:
 80041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f0:	4617      	mov	r7, r2
 80041f2:	690a      	ldr	r2, [r1, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bfa8      	it	ge
 80041fa:	463b      	movge	r3, r7
 80041fc:	4689      	mov	r9, r1
 80041fe:	bfa4      	itt	ge
 8004200:	460f      	movge	r7, r1
 8004202:	4699      	movge	r9, r3
 8004204:	693d      	ldr	r5, [r7, #16]
 8004206:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	eb05 060a 	add.w	r6, r5, sl
 8004212:	42b3      	cmp	r3, r6
 8004214:	b085      	sub	sp, #20
 8004216:	bfb8      	it	lt
 8004218:	3101      	addlt	r1, #1
 800421a:	f7ff fedd 	bl	8003fd8 <_Balloc>
 800421e:	b930      	cbnz	r0, 800422e <__multiply+0x42>
 8004220:	4602      	mov	r2, r0
 8004222:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <__multiply+0x13c>)
 8004224:	4841      	ldr	r0, [pc, #260]	@ (800432c <__multiply+0x140>)
 8004226:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800422a:	f000 fc25 	bl	8004a78 <__assert_func>
 800422e:	f100 0414 	add.w	r4, r0, #20
 8004232:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004236:	4623      	mov	r3, r4
 8004238:	2200      	movs	r2, #0
 800423a:	4573      	cmp	r3, lr
 800423c:	d320      	bcc.n	8004280 <__multiply+0x94>
 800423e:	f107 0814 	add.w	r8, r7, #20
 8004242:	f109 0114 	add.w	r1, r9, #20
 8004246:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800424a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800424e:	9302      	str	r3, [sp, #8]
 8004250:	1beb      	subs	r3, r5, r7
 8004252:	3b15      	subs	r3, #21
 8004254:	f023 0303 	bic.w	r3, r3, #3
 8004258:	3304      	adds	r3, #4
 800425a:	3715      	adds	r7, #21
 800425c:	42bd      	cmp	r5, r7
 800425e:	bf38      	it	cc
 8004260:	2304      	movcc	r3, #4
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	9b02      	ldr	r3, [sp, #8]
 8004266:	9103      	str	r1, [sp, #12]
 8004268:	428b      	cmp	r3, r1
 800426a:	d80c      	bhi.n	8004286 <__multiply+0x9a>
 800426c:	2e00      	cmp	r6, #0
 800426e:	dd03      	ble.n	8004278 <__multiply+0x8c>
 8004270:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004274:	2b00      	cmp	r3, #0
 8004276:	d055      	beq.n	8004324 <__multiply+0x138>
 8004278:	6106      	str	r6, [r0, #16]
 800427a:	b005      	add	sp, #20
 800427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004280:	f843 2b04 	str.w	r2, [r3], #4
 8004284:	e7d9      	b.n	800423a <__multiply+0x4e>
 8004286:	f8b1 a000 	ldrh.w	sl, [r1]
 800428a:	f1ba 0f00 	cmp.w	sl, #0
 800428e:	d01f      	beq.n	80042d0 <__multiply+0xe4>
 8004290:	46c4      	mov	ip, r8
 8004292:	46a1      	mov	r9, r4
 8004294:	2700      	movs	r7, #0
 8004296:	f85c 2b04 	ldr.w	r2, [ip], #4
 800429a:	f8d9 3000 	ldr.w	r3, [r9]
 800429e:	fa1f fb82 	uxth.w	fp, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80042a8:	443b      	add	r3, r7
 80042aa:	f8d9 7000 	ldr.w	r7, [r9]
 80042ae:	0c12      	lsrs	r2, r2, #16
 80042b0:	0c3f      	lsrs	r7, r7, #16
 80042b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80042b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042c0:	4565      	cmp	r5, ip
 80042c2:	f849 3b04 	str.w	r3, [r9], #4
 80042c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80042ca:	d8e4      	bhi.n	8004296 <__multiply+0xaa>
 80042cc:	9b01      	ldr	r3, [sp, #4]
 80042ce:	50e7      	str	r7, [r4, r3]
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80042d6:	3104      	adds	r1, #4
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	d020      	beq.n	8004320 <__multiply+0x134>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	4647      	mov	r7, r8
 80042e2:	46a4      	mov	ip, r4
 80042e4:	f04f 0a00 	mov.w	sl, #0
 80042e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80042ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80042f0:	fb09 220b 	mla	r2, r9, fp, r2
 80042f4:	4452      	add	r2, sl
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042fc:	f84c 3b04 	str.w	r3, [ip], #4
 8004300:	f857 3b04 	ldr.w	r3, [r7], #4
 8004304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004308:	f8bc 3000 	ldrh.w	r3, [ip]
 800430c:	fb09 330a 	mla	r3, r9, sl, r3
 8004310:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004314:	42bd      	cmp	r5, r7
 8004316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800431a:	d8e5      	bhi.n	80042e8 <__multiply+0xfc>
 800431c:	9a01      	ldr	r2, [sp, #4]
 800431e:	50a3      	str	r3, [r4, r2]
 8004320:	3404      	adds	r4, #4
 8004322:	e79f      	b.n	8004264 <__multiply+0x78>
 8004324:	3e01      	subs	r6, #1
 8004326:	e7a1      	b.n	800426c <__multiply+0x80>
 8004328:	08004cea 	.word	0x08004cea
 800432c:	08004cfb 	.word	0x08004cfb

08004330 <__pow5mult>:
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004334:	4615      	mov	r5, r2
 8004336:	f012 0203 	ands.w	r2, r2, #3
 800433a:	4607      	mov	r7, r0
 800433c:	460e      	mov	r6, r1
 800433e:	d007      	beq.n	8004350 <__pow5mult+0x20>
 8004340:	4c25      	ldr	r4, [pc, #148]	@ (80043d8 <__pow5mult+0xa8>)
 8004342:	3a01      	subs	r2, #1
 8004344:	2300      	movs	r3, #0
 8004346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800434a:	f7ff fea7 	bl	800409c <__multadd>
 800434e:	4606      	mov	r6, r0
 8004350:	10ad      	asrs	r5, r5, #2
 8004352:	d03d      	beq.n	80043d0 <__pow5mult+0xa0>
 8004354:	69fc      	ldr	r4, [r7, #28]
 8004356:	b97c      	cbnz	r4, 8004378 <__pow5mult+0x48>
 8004358:	2010      	movs	r0, #16
 800435a:	f7ff fd87 	bl	8003e6c <malloc>
 800435e:	4602      	mov	r2, r0
 8004360:	61f8      	str	r0, [r7, #28]
 8004362:	b928      	cbnz	r0, 8004370 <__pow5mult+0x40>
 8004364:	4b1d      	ldr	r3, [pc, #116]	@ (80043dc <__pow5mult+0xac>)
 8004366:	481e      	ldr	r0, [pc, #120]	@ (80043e0 <__pow5mult+0xb0>)
 8004368:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800436c:	f000 fb84 	bl	8004a78 <__assert_func>
 8004370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004374:	6004      	str	r4, [r0, #0]
 8004376:	60c4      	str	r4, [r0, #12]
 8004378:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800437c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004380:	b94c      	cbnz	r4, 8004396 <__pow5mult+0x66>
 8004382:	f240 2171 	movw	r1, #625	@ 0x271
 8004386:	4638      	mov	r0, r7
 8004388:	f7ff ff1a 	bl	80041c0 <__i2b>
 800438c:	2300      	movs	r3, #0
 800438e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004392:	4604      	mov	r4, r0
 8004394:	6003      	str	r3, [r0, #0]
 8004396:	f04f 0900 	mov.w	r9, #0
 800439a:	07eb      	lsls	r3, r5, #31
 800439c:	d50a      	bpl.n	80043b4 <__pow5mult+0x84>
 800439e:	4631      	mov	r1, r6
 80043a0:	4622      	mov	r2, r4
 80043a2:	4638      	mov	r0, r7
 80043a4:	f7ff ff22 	bl	80041ec <__multiply>
 80043a8:	4631      	mov	r1, r6
 80043aa:	4680      	mov	r8, r0
 80043ac:	4638      	mov	r0, r7
 80043ae:	f7ff fe53 	bl	8004058 <_Bfree>
 80043b2:	4646      	mov	r6, r8
 80043b4:	106d      	asrs	r5, r5, #1
 80043b6:	d00b      	beq.n	80043d0 <__pow5mult+0xa0>
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	b938      	cbnz	r0, 80043cc <__pow5mult+0x9c>
 80043bc:	4622      	mov	r2, r4
 80043be:	4621      	mov	r1, r4
 80043c0:	4638      	mov	r0, r7
 80043c2:	f7ff ff13 	bl	80041ec <__multiply>
 80043c6:	6020      	str	r0, [r4, #0]
 80043c8:	f8c0 9000 	str.w	r9, [r0]
 80043cc:	4604      	mov	r4, r0
 80043ce:	e7e4      	b.n	800439a <__pow5mult+0x6a>
 80043d0:	4630      	mov	r0, r6
 80043d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043d6:	bf00      	nop
 80043d8:	08004dac 	.word	0x08004dac
 80043dc:	08004c7b 	.word	0x08004c7b
 80043e0:	08004cfb 	.word	0x08004cfb

080043e4 <__lshift>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	6849      	ldr	r1, [r1, #4]
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80043f2:	68a3      	ldr	r3, [r4, #8]
 80043f4:	4607      	mov	r7, r0
 80043f6:	4691      	mov	r9, r2
 80043f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043fc:	f108 0601 	add.w	r6, r8, #1
 8004400:	42b3      	cmp	r3, r6
 8004402:	db0b      	blt.n	800441c <__lshift+0x38>
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff fde7 	bl	8003fd8 <_Balloc>
 800440a:	4605      	mov	r5, r0
 800440c:	b948      	cbnz	r0, 8004422 <__lshift+0x3e>
 800440e:	4602      	mov	r2, r0
 8004410:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <__lshift+0xd0>)
 8004412:	4829      	ldr	r0, [pc, #164]	@ (80044b8 <__lshift+0xd4>)
 8004414:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004418:	f000 fb2e 	bl	8004a78 <__assert_func>
 800441c:	3101      	adds	r1, #1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	e7ee      	b.n	8004400 <__lshift+0x1c>
 8004422:	2300      	movs	r3, #0
 8004424:	f100 0114 	add.w	r1, r0, #20
 8004428:	f100 0210 	add.w	r2, r0, #16
 800442c:	4618      	mov	r0, r3
 800442e:	4553      	cmp	r3, sl
 8004430:	db33      	blt.n	800449a <__lshift+0xb6>
 8004432:	6920      	ldr	r0, [r4, #16]
 8004434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004438:	f104 0314 	add.w	r3, r4, #20
 800443c:	f019 091f 	ands.w	r9, r9, #31
 8004440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004444:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004448:	d02b      	beq.n	80044a2 <__lshift+0xbe>
 800444a:	f1c9 0e20 	rsb	lr, r9, #32
 800444e:	468a      	mov	sl, r1
 8004450:	2200      	movs	r2, #0
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	fa00 f009 	lsl.w	r0, r0, r9
 8004458:	4310      	orrs	r0, r2
 800445a:	f84a 0b04 	str.w	r0, [sl], #4
 800445e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004462:	459c      	cmp	ip, r3
 8004464:	fa22 f20e 	lsr.w	r2, r2, lr
 8004468:	d8f3      	bhi.n	8004452 <__lshift+0x6e>
 800446a:	ebac 0304 	sub.w	r3, ip, r4
 800446e:	3b15      	subs	r3, #21
 8004470:	f023 0303 	bic.w	r3, r3, #3
 8004474:	3304      	adds	r3, #4
 8004476:	f104 0015 	add.w	r0, r4, #21
 800447a:	4560      	cmp	r0, ip
 800447c:	bf88      	it	hi
 800447e:	2304      	movhi	r3, #4
 8004480:	50ca      	str	r2, [r1, r3]
 8004482:	b10a      	cbz	r2, 8004488 <__lshift+0xa4>
 8004484:	f108 0602 	add.w	r6, r8, #2
 8004488:	3e01      	subs	r6, #1
 800448a:	4638      	mov	r0, r7
 800448c:	612e      	str	r6, [r5, #16]
 800448e:	4621      	mov	r1, r4
 8004490:	f7ff fde2 	bl	8004058 <_Bfree>
 8004494:	4628      	mov	r0, r5
 8004496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449a:	f842 0f04 	str.w	r0, [r2, #4]!
 800449e:	3301      	adds	r3, #1
 80044a0:	e7c5      	b.n	800442e <__lshift+0x4a>
 80044a2:	3904      	subs	r1, #4
 80044a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80044ac:	459c      	cmp	ip, r3
 80044ae:	d8f9      	bhi.n	80044a4 <__lshift+0xc0>
 80044b0:	e7ea      	b.n	8004488 <__lshift+0xa4>
 80044b2:	bf00      	nop
 80044b4:	08004cea 	.word	0x08004cea
 80044b8:	08004cfb 	.word	0x08004cfb

080044bc <__mcmp>:
 80044bc:	690a      	ldr	r2, [r1, #16]
 80044be:	4603      	mov	r3, r0
 80044c0:	6900      	ldr	r0, [r0, #16]
 80044c2:	1a80      	subs	r0, r0, r2
 80044c4:	b530      	push	{r4, r5, lr}
 80044c6:	d10e      	bne.n	80044e6 <__mcmp+0x2a>
 80044c8:	3314      	adds	r3, #20
 80044ca:	3114      	adds	r1, #20
 80044cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80044d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80044d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044dc:	4295      	cmp	r5, r2
 80044de:	d003      	beq.n	80044e8 <__mcmp+0x2c>
 80044e0:	d205      	bcs.n	80044ee <__mcmp+0x32>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	bd30      	pop	{r4, r5, pc}
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d3f3      	bcc.n	80044d4 <__mcmp+0x18>
 80044ec:	e7fb      	b.n	80044e6 <__mcmp+0x2a>
 80044ee:	2001      	movs	r0, #1
 80044f0:	e7f9      	b.n	80044e6 <__mcmp+0x2a>
	...

080044f4 <__mdiff>:
 80044f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	4689      	mov	r9, r1
 80044fa:	4606      	mov	r6, r0
 80044fc:	4611      	mov	r1, r2
 80044fe:	4648      	mov	r0, r9
 8004500:	4614      	mov	r4, r2
 8004502:	f7ff ffdb 	bl	80044bc <__mcmp>
 8004506:	1e05      	subs	r5, r0, #0
 8004508:	d112      	bne.n	8004530 <__mdiff+0x3c>
 800450a:	4629      	mov	r1, r5
 800450c:	4630      	mov	r0, r6
 800450e:	f7ff fd63 	bl	8003fd8 <_Balloc>
 8004512:	4602      	mov	r2, r0
 8004514:	b928      	cbnz	r0, 8004522 <__mdiff+0x2e>
 8004516:	4b3f      	ldr	r3, [pc, #252]	@ (8004614 <__mdiff+0x120>)
 8004518:	f240 2137 	movw	r1, #567	@ 0x237
 800451c:	483e      	ldr	r0, [pc, #248]	@ (8004618 <__mdiff+0x124>)
 800451e:	f000 faab 	bl	8004a78 <__assert_func>
 8004522:	2301      	movs	r3, #1
 8004524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004528:	4610      	mov	r0, r2
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004530:	bfbc      	itt	lt
 8004532:	464b      	movlt	r3, r9
 8004534:	46a1      	movlt	r9, r4
 8004536:	4630      	mov	r0, r6
 8004538:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800453c:	bfba      	itte	lt
 800453e:	461c      	movlt	r4, r3
 8004540:	2501      	movlt	r5, #1
 8004542:	2500      	movge	r5, #0
 8004544:	f7ff fd48 	bl	8003fd8 <_Balloc>
 8004548:	4602      	mov	r2, r0
 800454a:	b918      	cbnz	r0, 8004554 <__mdiff+0x60>
 800454c:	4b31      	ldr	r3, [pc, #196]	@ (8004614 <__mdiff+0x120>)
 800454e:	f240 2145 	movw	r1, #581	@ 0x245
 8004552:	e7e3      	b.n	800451c <__mdiff+0x28>
 8004554:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004558:	6926      	ldr	r6, [r4, #16]
 800455a:	60c5      	str	r5, [r0, #12]
 800455c:	f109 0310 	add.w	r3, r9, #16
 8004560:	f109 0514 	add.w	r5, r9, #20
 8004564:	f104 0e14 	add.w	lr, r4, #20
 8004568:	f100 0b14 	add.w	fp, r0, #20
 800456c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004570:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	46d9      	mov	r9, fp
 8004578:	f04f 0c00 	mov.w	ip, #0
 800457c:	9b01      	ldr	r3, [sp, #4]
 800457e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004582:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	fa1f f38a 	uxth.w	r3, sl
 800458c:	4619      	mov	r1, r3
 800458e:	b283      	uxth	r3, r0
 8004590:	1acb      	subs	r3, r1, r3
 8004592:	0c00      	lsrs	r0, r0, #16
 8004594:	4463      	add	r3, ip
 8004596:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800459a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800459e:	b29b      	uxth	r3, r3
 80045a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80045a4:	4576      	cmp	r6, lr
 80045a6:	f849 3b04 	str.w	r3, [r9], #4
 80045aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80045ae:	d8e5      	bhi.n	800457c <__mdiff+0x88>
 80045b0:	1b33      	subs	r3, r6, r4
 80045b2:	3b15      	subs	r3, #21
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	3415      	adds	r4, #21
 80045ba:	3304      	adds	r3, #4
 80045bc:	42a6      	cmp	r6, r4
 80045be:	bf38      	it	cc
 80045c0:	2304      	movcc	r3, #4
 80045c2:	441d      	add	r5, r3
 80045c4:	445b      	add	r3, fp
 80045c6:	461e      	mov	r6, r3
 80045c8:	462c      	mov	r4, r5
 80045ca:	4544      	cmp	r4, r8
 80045cc:	d30e      	bcc.n	80045ec <__mdiff+0xf8>
 80045ce:	f108 0103 	add.w	r1, r8, #3
 80045d2:	1b49      	subs	r1, r1, r5
 80045d4:	f021 0103 	bic.w	r1, r1, #3
 80045d8:	3d03      	subs	r5, #3
 80045da:	45a8      	cmp	r8, r5
 80045dc:	bf38      	it	cc
 80045de:	2100      	movcc	r1, #0
 80045e0:	440b      	add	r3, r1
 80045e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80045e6:	b191      	cbz	r1, 800460e <__mdiff+0x11a>
 80045e8:	6117      	str	r7, [r2, #16]
 80045ea:	e79d      	b.n	8004528 <__mdiff+0x34>
 80045ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80045f0:	46e6      	mov	lr, ip
 80045f2:	0c08      	lsrs	r0, r1, #16
 80045f4:	fa1c fc81 	uxtah	ip, ip, r1
 80045f8:	4471      	add	r1, lr
 80045fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80045fe:	b289      	uxth	r1, r1
 8004600:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004604:	f846 1b04 	str.w	r1, [r6], #4
 8004608:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800460c:	e7dd      	b.n	80045ca <__mdiff+0xd6>
 800460e:	3f01      	subs	r7, #1
 8004610:	e7e7      	b.n	80045e2 <__mdiff+0xee>
 8004612:	bf00      	nop
 8004614:	08004cea 	.word	0x08004cea
 8004618:	08004cfb 	.word	0x08004cfb

0800461c <__d2b>:
 800461c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004620:	460f      	mov	r7, r1
 8004622:	2101      	movs	r1, #1
 8004624:	ec59 8b10 	vmov	r8, r9, d0
 8004628:	4616      	mov	r6, r2
 800462a:	f7ff fcd5 	bl	8003fd8 <_Balloc>
 800462e:	4604      	mov	r4, r0
 8004630:	b930      	cbnz	r0, 8004640 <__d2b+0x24>
 8004632:	4602      	mov	r2, r0
 8004634:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <__d2b+0xa8>)
 8004636:	4824      	ldr	r0, [pc, #144]	@ (80046c8 <__d2b+0xac>)
 8004638:	f240 310f 	movw	r1, #783	@ 0x30f
 800463c:	f000 fa1c 	bl	8004a78 <__assert_func>
 8004640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004648:	b10d      	cbz	r5, 800464e <__d2b+0x32>
 800464a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	f1b8 0300 	subs.w	r3, r8, #0
 8004654:	d023      	beq.n	800469e <__d2b+0x82>
 8004656:	4668      	mov	r0, sp
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	f7ff fd84 	bl	8004166 <__lo0bits>
 800465e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004662:	b1d0      	cbz	r0, 800469a <__d2b+0x7e>
 8004664:	f1c0 0320 	rsb	r3, r0, #32
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	430b      	orrs	r3, r1
 800466e:	40c2      	lsrs	r2, r0
 8004670:	6163      	str	r3, [r4, #20]
 8004672:	9201      	str	r2, [sp, #4]
 8004674:	9b01      	ldr	r3, [sp, #4]
 8004676:	61a3      	str	r3, [r4, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2201      	moveq	r2, #1
 800467e:	2202      	movne	r2, #2
 8004680:	6122      	str	r2, [r4, #16]
 8004682:	b1a5      	cbz	r5, 80046ae <__d2b+0x92>
 8004684:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004688:	4405      	add	r5, r0
 800468a:	603d      	str	r5, [r7, #0]
 800468c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004690:	6030      	str	r0, [r6, #0]
 8004692:	4620      	mov	r0, r4
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800469a:	6161      	str	r1, [r4, #20]
 800469c:	e7ea      	b.n	8004674 <__d2b+0x58>
 800469e:	a801      	add	r0, sp, #4
 80046a0:	f7ff fd61 	bl	8004166 <__lo0bits>
 80046a4:	9b01      	ldr	r3, [sp, #4]
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	3020      	adds	r0, #32
 80046aa:	2201      	movs	r2, #1
 80046ac:	e7e8      	b.n	8004680 <__d2b+0x64>
 80046ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80046b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80046b6:	6038      	str	r0, [r7, #0]
 80046b8:	6918      	ldr	r0, [r3, #16]
 80046ba:	f7ff fd35 	bl	8004128 <__hi0bits>
 80046be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80046c2:	e7e5      	b.n	8004690 <__d2b+0x74>
 80046c4:	08004cea 	.word	0x08004cea
 80046c8:	08004cfb 	.word	0x08004cfb

080046cc <__sfputc_r>:
 80046cc:	6893      	ldr	r3, [r2, #8]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	b410      	push	{r4}
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	da08      	bge.n	80046ea <__sfputc_r+0x1e>
 80046d8:	6994      	ldr	r4, [r2, #24]
 80046da:	42a3      	cmp	r3, r4
 80046dc:	db01      	blt.n	80046e2 <__sfputc_r+0x16>
 80046de:	290a      	cmp	r1, #10
 80046e0:	d103      	bne.n	80046ea <__sfputc_r+0x1e>
 80046e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e6:	f7fe bc0c 	b.w	8002f02 <__swbuf_r>
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	1c58      	adds	r0, r3, #1
 80046ee:	6010      	str	r0, [r2, #0]
 80046f0:	7019      	strb	r1, [r3, #0]
 80046f2:	4608      	mov	r0, r1
 80046f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <__sfputs_r>:
 80046fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fc:	4606      	mov	r6, r0
 80046fe:	460f      	mov	r7, r1
 8004700:	4614      	mov	r4, r2
 8004702:	18d5      	adds	r5, r2, r3
 8004704:	42ac      	cmp	r4, r5
 8004706:	d101      	bne.n	800470c <__sfputs_r+0x12>
 8004708:	2000      	movs	r0, #0
 800470a:	e007      	b.n	800471c <__sfputs_r+0x22>
 800470c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004710:	463a      	mov	r2, r7
 8004712:	4630      	mov	r0, r6
 8004714:	f7ff ffda 	bl	80046cc <__sfputc_r>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d1f3      	bne.n	8004704 <__sfputs_r+0xa>
 800471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004720 <_vfiprintf_r>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	460d      	mov	r5, r1
 8004726:	b09d      	sub	sp, #116	@ 0x74
 8004728:	4614      	mov	r4, r2
 800472a:	4698      	mov	r8, r3
 800472c:	4606      	mov	r6, r0
 800472e:	b118      	cbz	r0, 8004738 <_vfiprintf_r+0x18>
 8004730:	6a03      	ldr	r3, [r0, #32]
 8004732:	b90b      	cbnz	r3, 8004738 <_vfiprintf_r+0x18>
 8004734:	f7fe fab0 	bl	8002c98 <__sinit>
 8004738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800473a:	07d9      	lsls	r1, r3, #31
 800473c:	d405      	bmi.n	800474a <_vfiprintf_r+0x2a>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	059a      	lsls	r2, r3, #22
 8004742:	d402      	bmi.n	800474a <_vfiprintf_r+0x2a>
 8004744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004746:	f7fe fcdc 	bl	8003102 <__retarget_lock_acquire_recursive>
 800474a:	89ab      	ldrh	r3, [r5, #12]
 800474c:	071b      	lsls	r3, r3, #28
 800474e:	d501      	bpl.n	8004754 <_vfiprintf_r+0x34>
 8004750:	692b      	ldr	r3, [r5, #16]
 8004752:	b99b      	cbnz	r3, 800477c <_vfiprintf_r+0x5c>
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f7fe fc12 	bl	8002f80 <__swsetup_r>
 800475c:	b170      	cbz	r0, 800477c <_vfiprintf_r+0x5c>
 800475e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004760:	07dc      	lsls	r4, r3, #31
 8004762:	d504      	bpl.n	800476e <_vfiprintf_r+0x4e>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	b01d      	add	sp, #116	@ 0x74
 800476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476e:	89ab      	ldrh	r3, [r5, #12]
 8004770:	0598      	lsls	r0, r3, #22
 8004772:	d4f7      	bmi.n	8004764 <_vfiprintf_r+0x44>
 8004774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004776:	f7fe fcc5 	bl	8003104 <__retarget_lock_release_recursive>
 800477a:	e7f3      	b.n	8004764 <_vfiprintf_r+0x44>
 800477c:	2300      	movs	r3, #0
 800477e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004780:	2320      	movs	r3, #32
 8004782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004786:	f8cd 800c 	str.w	r8, [sp, #12]
 800478a:	2330      	movs	r3, #48	@ 0x30
 800478c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800493c <_vfiprintf_r+0x21c>
 8004790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004794:	f04f 0901 	mov.w	r9, #1
 8004798:	4623      	mov	r3, r4
 800479a:	469a      	mov	sl, r3
 800479c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a0:	b10a      	cbz	r2, 80047a6 <_vfiprintf_r+0x86>
 80047a2:	2a25      	cmp	r2, #37	@ 0x25
 80047a4:	d1f9      	bne.n	800479a <_vfiprintf_r+0x7a>
 80047a6:	ebba 0b04 	subs.w	fp, sl, r4
 80047aa:	d00b      	beq.n	80047c4 <_vfiprintf_r+0xa4>
 80047ac:	465b      	mov	r3, fp
 80047ae:	4622      	mov	r2, r4
 80047b0:	4629      	mov	r1, r5
 80047b2:	4630      	mov	r0, r6
 80047b4:	f7ff ffa1 	bl	80046fa <__sfputs_r>
 80047b8:	3001      	adds	r0, #1
 80047ba:	f000 80a7 	beq.w	800490c <_vfiprintf_r+0x1ec>
 80047be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047c0:	445a      	add	r2, fp
 80047c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80047c4:	f89a 3000 	ldrb.w	r3, [sl]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 809f 	beq.w	800490c <_vfiprintf_r+0x1ec>
 80047ce:	2300      	movs	r3, #0
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295
 80047d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d8:	f10a 0a01 	add.w	sl, sl, #1
 80047dc:	9304      	str	r3, [sp, #16]
 80047de:	9307      	str	r3, [sp, #28]
 80047e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80047e6:	4654      	mov	r4, sl
 80047e8:	2205      	movs	r2, #5
 80047ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ee:	4853      	ldr	r0, [pc, #332]	@ (800493c <_vfiprintf_r+0x21c>)
 80047f0:	f7fb fcee 	bl	80001d0 <memchr>
 80047f4:	9a04      	ldr	r2, [sp, #16]
 80047f6:	b9d8      	cbnz	r0, 8004830 <_vfiprintf_r+0x110>
 80047f8:	06d1      	lsls	r1, r2, #27
 80047fa:	bf44      	itt	mi
 80047fc:	2320      	movmi	r3, #32
 80047fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004802:	0713      	lsls	r3, r2, #28
 8004804:	bf44      	itt	mi
 8004806:	232b      	movmi	r3, #43	@ 0x2b
 8004808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800480c:	f89a 3000 	ldrb.w	r3, [sl]
 8004810:	2b2a      	cmp	r3, #42	@ 0x2a
 8004812:	d015      	beq.n	8004840 <_vfiprintf_r+0x120>
 8004814:	9a07      	ldr	r2, [sp, #28]
 8004816:	4654      	mov	r4, sl
 8004818:	2000      	movs	r0, #0
 800481a:	f04f 0c0a 	mov.w	ip, #10
 800481e:	4621      	mov	r1, r4
 8004820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004824:	3b30      	subs	r3, #48	@ 0x30
 8004826:	2b09      	cmp	r3, #9
 8004828:	d94b      	bls.n	80048c2 <_vfiprintf_r+0x1a2>
 800482a:	b1b0      	cbz	r0, 800485a <_vfiprintf_r+0x13a>
 800482c:	9207      	str	r2, [sp, #28]
 800482e:	e014      	b.n	800485a <_vfiprintf_r+0x13a>
 8004830:	eba0 0308 	sub.w	r3, r0, r8
 8004834:	fa09 f303 	lsl.w	r3, r9, r3
 8004838:	4313      	orrs	r3, r2
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	46a2      	mov	sl, r4
 800483e:	e7d2      	b.n	80047e6 <_vfiprintf_r+0xc6>
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	1d19      	adds	r1, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	9103      	str	r1, [sp, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	bfbb      	ittet	lt
 800484c:	425b      	neglt	r3, r3
 800484e:	f042 0202 	orrlt.w	r2, r2, #2
 8004852:	9307      	strge	r3, [sp, #28]
 8004854:	9307      	strlt	r3, [sp, #28]
 8004856:	bfb8      	it	lt
 8004858:	9204      	strlt	r2, [sp, #16]
 800485a:	7823      	ldrb	r3, [r4, #0]
 800485c:	2b2e      	cmp	r3, #46	@ 0x2e
 800485e:	d10a      	bne.n	8004876 <_vfiprintf_r+0x156>
 8004860:	7863      	ldrb	r3, [r4, #1]
 8004862:	2b2a      	cmp	r3, #42	@ 0x2a
 8004864:	d132      	bne.n	80048cc <_vfiprintf_r+0x1ac>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	1d1a      	adds	r2, r3, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	9203      	str	r2, [sp, #12]
 800486e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004872:	3402      	adds	r4, #2
 8004874:	9305      	str	r3, [sp, #20]
 8004876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800494c <_vfiprintf_r+0x22c>
 800487a:	7821      	ldrb	r1, [r4, #0]
 800487c:	2203      	movs	r2, #3
 800487e:	4650      	mov	r0, sl
 8004880:	f7fb fca6 	bl	80001d0 <memchr>
 8004884:	b138      	cbz	r0, 8004896 <_vfiprintf_r+0x176>
 8004886:	9b04      	ldr	r3, [sp, #16]
 8004888:	eba0 000a 	sub.w	r0, r0, sl
 800488c:	2240      	movs	r2, #64	@ 0x40
 800488e:	4082      	lsls	r2, r0
 8004890:	4313      	orrs	r3, r2
 8004892:	3401      	adds	r4, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489a:	4829      	ldr	r0, [pc, #164]	@ (8004940 <_vfiprintf_r+0x220>)
 800489c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048a0:	2206      	movs	r2, #6
 80048a2:	f7fb fc95 	bl	80001d0 <memchr>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d03f      	beq.n	800492a <_vfiprintf_r+0x20a>
 80048aa:	4b26      	ldr	r3, [pc, #152]	@ (8004944 <_vfiprintf_r+0x224>)
 80048ac:	bb1b      	cbnz	r3, 80048f6 <_vfiprintf_r+0x1d6>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	3307      	adds	r3, #7
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	3308      	adds	r3, #8
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048bc:	443b      	add	r3, r7
 80048be:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c0:	e76a      	b.n	8004798 <_vfiprintf_r+0x78>
 80048c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80048c6:	460c      	mov	r4, r1
 80048c8:	2001      	movs	r0, #1
 80048ca:	e7a8      	b.n	800481e <_vfiprintf_r+0xfe>
 80048cc:	2300      	movs	r3, #0
 80048ce:	3401      	adds	r4, #1
 80048d0:	9305      	str	r3, [sp, #20]
 80048d2:	4619      	mov	r1, r3
 80048d4:	f04f 0c0a 	mov.w	ip, #10
 80048d8:	4620      	mov	r0, r4
 80048da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048de:	3a30      	subs	r2, #48	@ 0x30
 80048e0:	2a09      	cmp	r2, #9
 80048e2:	d903      	bls.n	80048ec <_vfiprintf_r+0x1cc>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0c6      	beq.n	8004876 <_vfiprintf_r+0x156>
 80048e8:	9105      	str	r1, [sp, #20]
 80048ea:	e7c4      	b.n	8004876 <_vfiprintf_r+0x156>
 80048ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f0:	4604      	mov	r4, r0
 80048f2:	2301      	movs	r3, #1
 80048f4:	e7f0      	b.n	80048d8 <_vfiprintf_r+0x1b8>
 80048f6:	ab03      	add	r3, sp, #12
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	462a      	mov	r2, r5
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <_vfiprintf_r+0x228>)
 80048fe:	a904      	add	r1, sp, #16
 8004900:	4630      	mov	r0, r6
 8004902:	f7fd fcdb 	bl	80022bc <_printf_float>
 8004906:	4607      	mov	r7, r0
 8004908:	1c78      	adds	r0, r7, #1
 800490a:	d1d6      	bne.n	80048ba <_vfiprintf_r+0x19a>
 800490c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800490e:	07d9      	lsls	r1, r3, #31
 8004910:	d405      	bmi.n	800491e <_vfiprintf_r+0x1fe>
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	059a      	lsls	r2, r3, #22
 8004916:	d402      	bmi.n	800491e <_vfiprintf_r+0x1fe>
 8004918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800491a:	f7fe fbf3 	bl	8003104 <__retarget_lock_release_recursive>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	065b      	lsls	r3, r3, #25
 8004922:	f53f af1f 	bmi.w	8004764 <_vfiprintf_r+0x44>
 8004926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004928:	e71e      	b.n	8004768 <_vfiprintf_r+0x48>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <_vfiprintf_r+0x228>)
 8004932:	a904      	add	r1, sp, #16
 8004934:	4630      	mov	r0, r6
 8004936:	f7fd ff59 	bl	80027ec <_printf_i>
 800493a:	e7e4      	b.n	8004906 <_vfiprintf_r+0x1e6>
 800493c:	08004d54 	.word	0x08004d54
 8004940:	08004d5e 	.word	0x08004d5e
 8004944:	080022bd 	.word	0x080022bd
 8004948:	080046fb 	.word	0x080046fb
 800494c:	08004d5a 	.word	0x08004d5a

08004950 <__swhatbuf_r>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	460c      	mov	r4, r1
 8004954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004958:	2900      	cmp	r1, #0
 800495a:	b096      	sub	sp, #88	@ 0x58
 800495c:	4615      	mov	r5, r2
 800495e:	461e      	mov	r6, r3
 8004960:	da0d      	bge.n	800497e <__swhatbuf_r+0x2e>
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	bf14      	ite	ne
 800496e:	2340      	movne	r3, #64	@ 0x40
 8004970:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004974:	2000      	movs	r0, #0
 8004976:	6031      	str	r1, [r6, #0]
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	b016      	add	sp, #88	@ 0x58
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	466a      	mov	r2, sp
 8004980:	f000 f848 	bl	8004a14 <_fstat_r>
 8004984:	2800      	cmp	r0, #0
 8004986:	dbec      	blt.n	8004962 <__swhatbuf_r+0x12>
 8004988:	9901      	ldr	r1, [sp, #4]
 800498a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800498e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004992:	4259      	negs	r1, r3
 8004994:	4159      	adcs	r1, r3
 8004996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800499a:	e7eb      	b.n	8004974 <__swhatbuf_r+0x24>

0800499c <__smakebuf_r>:
 800499c:	898b      	ldrh	r3, [r1, #12]
 800499e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a0:	079d      	lsls	r5, r3, #30
 80049a2:	4606      	mov	r6, r0
 80049a4:	460c      	mov	r4, r1
 80049a6:	d507      	bpl.n	80049b8 <__smakebuf_r+0x1c>
 80049a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	2301      	movs	r3, #1
 80049b2:	6163      	str	r3, [r4, #20]
 80049b4:	b003      	add	sp, #12
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b8:	ab01      	add	r3, sp, #4
 80049ba:	466a      	mov	r2, sp
 80049bc:	f7ff ffc8 	bl	8004950 <__swhatbuf_r>
 80049c0:	9f00      	ldr	r7, [sp, #0]
 80049c2:	4605      	mov	r5, r0
 80049c4:	4639      	mov	r1, r7
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff fa7a 	bl	8003ec0 <_malloc_r>
 80049cc:	b948      	cbnz	r0, 80049e2 <__smakebuf_r+0x46>
 80049ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d2:	059a      	lsls	r2, r3, #22
 80049d4:	d4ee      	bmi.n	80049b4 <__smakebuf_r+0x18>
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	e7e2      	b.n	80049a8 <__smakebuf_r+0xc>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	6020      	str	r0, [r4, #0]
 80049e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	9b01      	ldr	r3, [sp, #4]
 80049ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049f2:	b15b      	cbz	r3, 8004a0c <__smakebuf_r+0x70>
 80049f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f81d 	bl	8004a38 <_isatty_r>
 80049fe:	b128      	cbz	r0, 8004a0c <__smakebuf_r+0x70>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	431d      	orrs	r5, r3
 8004a10:	81a5      	strh	r5, [r4, #12]
 8004a12:	e7cf      	b.n	80049b4 <__smakebuf_r+0x18>

08004a14 <_fstat_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d07      	ldr	r5, [pc, #28]	@ (8004a34 <_fstat_r+0x20>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	602b      	str	r3, [r5, #0]
 8004a22:	f7fd fa72 	bl	8001f0a <_fstat>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d102      	bne.n	8004a30 <_fstat_r+0x1c>
 8004a2a:	682b      	ldr	r3, [r5, #0]
 8004a2c:	b103      	cbz	r3, 8004a30 <_fstat_r+0x1c>
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	bd38      	pop	{r3, r4, r5, pc}
 8004a32:	bf00      	nop
 8004a34:	20000428 	.word	0x20000428

08004a38 <_isatty_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d06      	ldr	r5, [pc, #24]	@ (8004a54 <_isatty_r+0x1c>)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fd fa71 	bl	8001f2a <_isatty>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_isatty_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_isatty_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000428 	.word	0x20000428

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d06      	ldr	r5, [pc, #24]	@ (8004a74 <_sbrk_r+0x1c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f000 f8b8 	bl	8004bd8 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000428 	.word	0x20000428

08004a78 <__assert_func>:
 8004a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a7a:	4614      	mov	r4, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <__assert_func+0x2c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4605      	mov	r5, r0
 8004a84:	68d8      	ldr	r0, [r3, #12]
 8004a86:	b14c      	cbz	r4, 8004a9c <__assert_func+0x24>
 8004a88:	4b07      	ldr	r3, [pc, #28]	@ (8004aa8 <__assert_func+0x30>)
 8004a8a:	9100      	str	r1, [sp, #0]
 8004a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a90:	4906      	ldr	r1, [pc, #24]	@ (8004aac <__assert_func+0x34>)
 8004a92:	462b      	mov	r3, r5
 8004a94:	f000 f842 	bl	8004b1c <fiprintf>
 8004a98:	f000 f852 	bl	8004b40 <abort>
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <__assert_func+0x38>)
 8004a9e:	461c      	mov	r4, r3
 8004aa0:	e7f3      	b.n	8004a8a <__assert_func+0x12>
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	08004d6f 	.word	0x08004d6f
 8004aac:	08004d7c 	.word	0x08004d7c
 8004ab0:	08004daa 	.word	0x08004daa

08004ab4 <_calloc_r>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	fba1 5402 	umull	r5, r4, r1, r2
 8004aba:	b934      	cbnz	r4, 8004aca <_calloc_r+0x16>
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7ff f9ff 	bl	8003ec0 <_malloc_r>
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	b928      	cbnz	r0, 8004ad2 <_calloc_r+0x1e>
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
 8004aca:	220c      	movs	r2, #12
 8004acc:	6002      	str	r2, [r0, #0]
 8004ace:	2600      	movs	r6, #0
 8004ad0:	e7f9      	b.n	8004ac6 <_calloc_r+0x12>
 8004ad2:	462a      	mov	r2, r5
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	f7fe faa9 	bl	800302c <memset>
 8004ada:	e7f4      	b.n	8004ac6 <_calloc_r+0x12>

08004adc <__ascii_mbtowc>:
 8004adc:	b082      	sub	sp, #8
 8004ade:	b901      	cbnz	r1, 8004ae2 <__ascii_mbtowc+0x6>
 8004ae0:	a901      	add	r1, sp, #4
 8004ae2:	b142      	cbz	r2, 8004af6 <__ascii_mbtowc+0x1a>
 8004ae4:	b14b      	cbz	r3, 8004afa <__ascii_mbtowc+0x1e>
 8004ae6:	7813      	ldrb	r3, [r2, #0]
 8004ae8:	600b      	str	r3, [r1, #0]
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	1e10      	subs	r0, r2, #0
 8004aee:	bf18      	it	ne
 8004af0:	2001      	movne	r0, #1
 8004af2:	b002      	add	sp, #8
 8004af4:	4770      	bx	lr
 8004af6:	4610      	mov	r0, r2
 8004af8:	e7fb      	b.n	8004af2 <__ascii_mbtowc+0x16>
 8004afa:	f06f 0001 	mvn.w	r0, #1
 8004afe:	e7f8      	b.n	8004af2 <__ascii_mbtowc+0x16>

08004b00 <__ascii_wctomb>:
 8004b00:	4603      	mov	r3, r0
 8004b02:	4608      	mov	r0, r1
 8004b04:	b141      	cbz	r1, 8004b18 <__ascii_wctomb+0x18>
 8004b06:	2aff      	cmp	r2, #255	@ 0xff
 8004b08:	d904      	bls.n	8004b14 <__ascii_wctomb+0x14>
 8004b0a:	228a      	movs	r2, #138	@ 0x8a
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b12:	4770      	bx	lr
 8004b14:	700a      	strb	r2, [r1, #0]
 8004b16:	2001      	movs	r0, #1
 8004b18:	4770      	bx	lr
	...

08004b1c <fiprintf>:
 8004b1c:	b40e      	push	{r1, r2, r3}
 8004b1e:	b503      	push	{r0, r1, lr}
 8004b20:	4601      	mov	r1, r0
 8004b22:	ab03      	add	r3, sp, #12
 8004b24:	4805      	ldr	r0, [pc, #20]	@ (8004b3c <fiprintf+0x20>)
 8004b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	f7ff fdf7 	bl	8004720 <_vfiprintf_r>
 8004b32:	b002      	add	sp, #8
 8004b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b38:	b003      	add	sp, #12
 8004b3a:	4770      	bx	lr
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <abort>:
 8004b40:	b508      	push	{r3, lr}
 8004b42:	2006      	movs	r0, #6
 8004b44:	f000 f82c 	bl	8004ba0 <raise>
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fd f9aa 	bl	8001ea2 <_exit>

08004b4e <_raise_r>:
 8004b4e:	291f      	cmp	r1, #31
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	d904      	bls.n	8004b62 <_raise_r+0x14>
 8004b58:	2316      	movs	r3, #22
 8004b5a:	6003      	str	r3, [r0, #0]
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b60:	bd38      	pop	{r3, r4, r5, pc}
 8004b62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004b64:	b112      	cbz	r2, 8004b6c <_raise_r+0x1e>
 8004b66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b6a:	b94b      	cbnz	r3, 8004b80 <_raise_r+0x32>
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 f831 	bl	8004bd4 <_getpid_r>
 8004b72:	4622      	mov	r2, r4
 8004b74:	4601      	mov	r1, r0
 8004b76:	4628      	mov	r0, r5
 8004b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b7c:	f000 b818 	b.w	8004bb0 <_kill_r>
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d00a      	beq.n	8004b9a <_raise_r+0x4c>
 8004b84:	1c59      	adds	r1, r3, #1
 8004b86:	d103      	bne.n	8004b90 <_raise_r+0x42>
 8004b88:	2316      	movs	r3, #22
 8004b8a:	6003      	str	r3, [r0, #0]
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	e7e7      	b.n	8004b60 <_raise_r+0x12>
 8004b90:	2100      	movs	r1, #0
 8004b92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004b96:	4620      	mov	r0, r4
 8004b98:	4798      	blx	r3
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e7e0      	b.n	8004b60 <_raise_r+0x12>
	...

08004ba0 <raise>:
 8004ba0:	4b02      	ldr	r3, [pc, #8]	@ (8004bac <raise+0xc>)
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	f7ff bfd2 	b.w	8004b4e <_raise_r>
 8004baa:	bf00      	nop
 8004bac:	2000000c 	.word	0x2000000c

08004bb0 <_kill_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4d07      	ldr	r5, [pc, #28]	@ (8004bd0 <_kill_r+0x20>)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	f7fd f960 	bl	8001e82 <_kill>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	d102      	bne.n	8004bcc <_kill_r+0x1c>
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	b103      	cbz	r3, 8004bcc <_kill_r+0x1c>
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000428 	.word	0x20000428

08004bd4 <_getpid_r>:
 8004bd4:	f7fd b94d 	b.w	8001e72 <_getpid>

08004bd8 <_sbrk>:
 8004bd8:	4a04      	ldr	r2, [pc, #16]	@ (8004bec <_sbrk+0x14>)
 8004bda:	6811      	ldr	r1, [r2, #0]
 8004bdc:	4603      	mov	r3, r0
 8004bde:	b909      	cbnz	r1, 8004be4 <_sbrk+0xc>
 8004be0:	4903      	ldr	r1, [pc, #12]	@ (8004bf0 <_sbrk+0x18>)
 8004be2:	6011      	str	r1, [r2, #0]
 8004be4:	6810      	ldr	r0, [r2, #0]
 8004be6:	4403      	add	r3, r0
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4770      	bx	lr
 8004bec:	20000438 	.word	0x20000438
 8004bf0:	20000440 	.word	0x20000440

08004bf4 <_init>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr

08004c00 <_fini>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	bf00      	nop
 8004c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c06:	bc08      	pop	{r3}
 8004c08:	469e      	mov	lr, r3
 8004c0a:	4770      	bx	lr
