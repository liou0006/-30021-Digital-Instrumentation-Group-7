
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08004d58  08004d58  00005d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800511c  0800511c  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005124  08005124  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005124  08005124  00006124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005128  08005128  00006128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800512c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001c8  080052f4  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080052f4  00007438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005663  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164b  00000000  00000000  0000c85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d1  00000000  00000000  0000e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000405b  00000000  00000000  0000ea21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009589  00000000  00000000  00012a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aec1  00000000  00000000  0001c005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00076ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  00076f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  00079a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d3c 	.word	0x08004d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08004d3c 	.word	0x08004d3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8000da4 <EXTI_Init+0x1fc>)
 8000bb6:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	799b      	ldrb	r3, [r3, #6]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80d2 	beq.w	8000d66 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bd0:	015b      	lsls	r3, r3, #5
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 031f 	and.w	r3, r3, #31
 8000bdc:	2201      	movs	r2, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	ea01 0302 	and.w	r3, r1, r2
 8000bfa:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	095b      	lsrs	r3, r3, #5
 8000c02:	015a      	lsls	r2, r3, #5
 8000c04:	4b68      	ldr	r3, [pc, #416]	@ (8000da8 <EXTI_Init+0x200>)
 8000c06:	4413      	add	r3, r2
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2201      	movs	r2, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	0158      	lsls	r0, r3, #5
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <EXTI_Init+0x200>)
 8000c24:	4403      	add	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	ea01 0302 	and.w	r3, r1, r2
 8000c2c:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	095b      	lsrs	r3, r3, #5
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000c5e:	4b51      	ldr	r3, [pc, #324]	@ (8000da4 <EXTI_Init+0x1fc>)
 8000c60:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	4b50      	ldr	r3, [pc, #320]	@ (8000dac <EXTI_Init+0x204>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	2201      	movs	r2, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	0158      	lsls	r0, r3, #5
 8000c88:	4b48      	ldr	r3, [pc, #288]	@ (8000dac <EXTI_Init+0x204>)
 8000c8a:	4403      	add	r3, r0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	ea01 0302 	and.w	r3, r1, r2
 8000c92:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	015a      	lsls	r2, r3, #5
 8000c9c:	4b44      	ldr	r3, [pc, #272]	@ (8000db0 <EXTI_Init+0x208>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	2201      	movs	r2, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	0158      	lsls	r0, r3, #5
 8000cba:	4b3d      	ldr	r3, [pc, #244]	@ (8000db0 <EXTI_Init+0x208>)
 8000cbc:	4403      	add	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	ea01 0302 	and.w	r3, r1, r2
 8000cc4:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	795b      	ldrb	r3, [r3, #5]
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d132      	bne.n	8000d34 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	015a      	lsls	r2, r3, #5
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <EXTI_Init+0x204>)
 8000cd8:	4413      	add	r3, r2
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	0159      	lsls	r1, r3, #5
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <EXTI_Init+0x204>)
 8000cf6:	440b      	add	r3, r1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	ea42 0300 	orr.w	r3, r2, r0
 8000cfe:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	015a      	lsls	r2, r3, #5
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <EXTI_Init+0x208>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	0159      	lsls	r1, r3, #5
 8000d26:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <EXTI_Init+0x208>)
 8000d28:	440b      	add	r3, r1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	ea42 0300 	orr.w	r3, r2, r0
 8000d30:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000d32:	e030      	b.n	8000d96 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	015b      	lsls	r3, r3, #5
 8000d42:	4413      	add	r3, r2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	e017      	b.n	8000d96 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	015b      	lsls	r3, r3, #5
 8000d74:	4413      	add	r3, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	2201      	movs	r2, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40010400 	.word	0x40010400
 8000da8:	40010404 	.word	0x40010404
 8000dac:	40010408 	.word	0x40010408
 8000db0:	4001040c 	.word	0x4001040c

08000db4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000dcc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f002 021f 	and.w	r2, r2, #31
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	015a      	lsls	r2, r3, #5
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <EXTI_GetITStatus+0x6c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	f002 021f 	and.w	r2, r2, #31
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <EXTI_GetITStatus+0x5a>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e001      	b.n	8000e12 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40010414 	.word	0x40010414

08000e24 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f103 	lsl.w	r1, r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <EXTI_ClearITPendingBit+0x30>)
 8000e40:	4413      	add	r3, r2
 8000e42:	460a      	mov	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010414 	.word	0x40010414

08000e58 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e07c      	b.n	8000f6e <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e74:	2201      	movs	r2, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d16b      	bne.n	8000f68 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <GPIO_Init+0x48>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d134      	bne.n	8000f0a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	795b      	ldrb	r3, [r3, #5]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2301      	movs	r3, #1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	889b      	ldrh	r3, [r3, #4]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	799b      	ldrb	r3, [r3, #6]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2103      	movs	r1, #3
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2103      	movs	r1, #3
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	f67f af7f 	bls.w	8000e74 <GPIO_Init+0x1c>
    }
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	71da      	strb	r2, [r3, #7]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8a1b      	ldrh	r3, [r3, #16]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800100c:	e002      	b.n	8001014 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <NVIC_PriorityGroupConfig+0x24>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	60d3      	str	r3, [r2, #12]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d03a      	beq.n	80010da <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <NVIC_Init+0xc0>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f1c3 0304 	rsb	r3, r3, #4
 8001078:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa22 f303 	lsr.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	461a      	mov	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	789b      	ldrb	r3, [r3, #2]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4313      	orrs	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80010a8:	4a18      	ldr	r2, [pc, #96]	@ (800110c <NVIC_Init+0xc4>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	6979      	ldr	r1, [r7, #20]
 80010b0:	b2c9      	uxtb	r1, r1
 80010b2:	4413      	add	r3, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010c2:	4912      	ldr	r1, [pc, #72]	@ (800110c <NVIC_Init+0xc4>)
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	0952      	lsrs	r2, r2, #5
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010d4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80010d8:	e00f      	b.n	80010fa <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010e2:	490a      	ldr	r1, [pc, #40]	@ (800110c <NVIC_Init+0xc4>)
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	7812      	ldrb	r2, [r2, #0]
 80010e8:	0952      	lsrs	r2, r2, #5
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010ee:	2201      	movs	r2, #1
 80010f0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010f2:	f100 0320 	add.w	r3, r0, #32
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	e000e100 	.word	0xe000e100

08001110 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001110:	b480      	push	{r7}
 8001112:	b08b      	sub	sp, #44	@ 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001138:	4b8b      	ldr	r3, [pc, #556]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d011      	beq.n	800116c <RCC_GetClocksFreq+0x5c>
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d837      	bhi.n	80011be <RCC_GetClocksFreq+0xae>
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <RCC_GetClocksFreq+0x4c>
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d004      	beq.n	8001164 <RCC_GetClocksFreq+0x54>
 800115a:	e030      	b.n	80011be <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a83      	ldr	r2, [pc, #524]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 8001160:	601a      	str	r2, [r3, #0]
      break;
 8001162:	e030      	b.n	80011c6 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a81      	ldr	r2, [pc, #516]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 8001168:	601a      	str	r2, [r3, #0]
      break;
 800116a:	e02c      	b.n	80011c6 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800116c:	4b7e      	ldr	r3, [pc, #504]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001174:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001176:	4b7c      	ldr	r3, [pc, #496]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	3302      	adds	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4a77      	ldr	r2, [pc, #476]	@ (8001370 <RCC_GetClocksFreq+0x260>)
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
 8001198:	e00d      	b.n	80011b6 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80011a6:	4a71      	ldr	r2, [pc, #452]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ba:	601a      	str	r2, [r3, #0]
      break;
 80011bc:	e003      	b.n	80011c6 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a6a      	ldr	r2, [pc, #424]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80011c2:	601a      	str	r2, [r3, #0]
      break;
 80011c4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80011c6:	4b68      	ldr	r3, [pc, #416]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ce:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80011d6:	4a67      	ldr	r2, [pc, #412]	@ (8001374 <RCC_GetClocksFreq+0x264>)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	40da      	lsrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80011ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80011f6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80011fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <RCC_GetClocksFreq+0x264>)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	40da      	lsrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001216:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800121e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	0adb      	lsrs	r3, r3, #11
 8001224:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001226:	4a53      	ldr	r2, [pc, #332]	@ (8001374 <RCC_GetClocksFreq+0x264>)
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	40da      	lsrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800123e:	4b4a      	ldr	r3, [pc, #296]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001242:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001246:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800124e:	4a4a      	ldr	r2, [pc, #296]	@ (8001378 <RCC_GetClocksFreq+0x268>)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001256:	b29b      	uxth	r3, r3
 8001258:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	fbb2 f2f3 	udiv	r2, r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	e003      	b.n	800127a <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 800127c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127e:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8001282:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	0a5b      	lsrs	r3, r3, #9
 8001288:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800128a:	4a3b      	ldr	r2, [pc, #236]	@ (8001378 <RCC_GetClocksFreq+0x268>)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001292:	b29b      	uxth	r3, r3
 8001294:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80012a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	e003      	b.n	80012b6 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80012b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a29      	ldr	r2, [pc, #164]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	e003      	b.n	80012d2 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80012d2:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d003      	beq.n	80012e6 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <RCC_GetClocksFreq+0x25c>)
 80012e2:	61da      	str	r2, [r3, #28]
 80012e4:	e003      	b.n	80012ee <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012fa:	d10d      	bne.n	8001318 <RCC_GetClocksFreq+0x208>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001302:	429a      	cmp	r2, r3
 8001304:	d108      	bne.n	8001318 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	d104      	bne.n	8001318 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	005a      	lsls	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e003      	b.n	8001320 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800132c:	d10d      	bne.n	800134a <RCC_GetClocksFreq+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001334:	429a      	cmp	r2, r3
 8001336:	d108      	bne.n	800134a <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	d104      	bne.n	800134a <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	005a      	lsls	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24
 8001348:	e003      	b.n	8001352 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <RCC_GetClocksFreq+0x258>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28
 8001366:	e028      	b.n	80013ba <RCC_GetClocksFreq+0x2aa>
 8001368:	40021000 	.word	0x40021000
 800136c:	007a1200 	.word	0x007a1200
 8001370:	003d0900 	.word	0x003d0900
 8001374:	08004d7c 	.word	0x08004d7c
 8001378:	08004d8c 	.word	0x08004d8c
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800137c:	4b6c      	ldr	r3, [pc, #432]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d104      	bne.n	8001392 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001390:	e013      	b.n	80013ba <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001392:	4b67      	ldr	r3, [pc, #412]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d104      	bne.n	80013a8 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013a6:	e008      	b.n	80013ba <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80013a8:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d102      	bne.n	80013ba <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80013ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d104      	bne.n	80013d0 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ce:	e021      	b.n	8001414 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80013d0:	4b57      	ldr	r3, [pc, #348]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013dc:	d104      	bne.n	80013e8 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013e6:	e015      	b.n	8001414 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80013e8:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013f4:	d104      	bne.n	8001400 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fe:	e009      	b.n	8001414 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001400:	4b4b      	ldr	r3, [pc, #300]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001408:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800140c:	d102      	bne.n	8001414 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001414:	4b46      	ldr	r3, [pc, #280]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d104      	bne.n	800142a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
 8001428:	e021      	b.n	800146e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001432:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001436:	d104      	bne.n	8001442 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001440:	e015      	b.n	800146e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800144a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800144e:	d104      	bne.n	800145a <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
 8001458:	e009      	b.n	800146e <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 800145a:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001466:	d102      	bne.n	800146e <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800146e:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
 8001482:	e021      	b.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001484:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800148c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001490:	d104      	bne.n	800149c <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
 800149a:	e015      	b.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 800149c:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80014a8:	d104      	bne.n	80014b4 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b2:	e009      	b.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80014b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80014c0:	d102      	bne.n	80014c8 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d104      	bne.n	80014de <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80014dc:	e021      	b.n	8001522 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ea:	d104      	bne.n	80014f6 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014f4:	e015      	b.n	8001522 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001502:	d104      	bne.n	800150e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800150a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800150c:	e009      	b.n	8001522 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <RCC_GetClocksFreq+0x420>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001516:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800151a:	d102      	bne.n	8001522 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <RCC_GetClocksFreq+0x424>)
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001522:	bf00      	nop
 8001524:	372c      	adds	r7, #44	@ 0x2c
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	007a1200 	.word	0x007a1200

08001538 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	4909      	ldr	r1, [pc, #36]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4313      	orrs	r3, r2
 8001554:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001556:	e006      	b.n	8001566 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	43db      	mvns	r3, r3
 8001560:	4904      	ldr	r1, [pc, #16]	@ (8001574 <RCC_AHBPeriphClockCmd+0x3c>)
 8001562:	4013      	ands	r3, r2
 8001564:	614b      	str	r3, [r1, #20]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	4909      	ldr	r1, [pc, #36]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001596:	e006      	b.n	80015a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4904      	ldr	r1, [pc, #16]	@ (80015b4 <RCC_APB2PeriphClockCmd+0x3c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	618b      	str	r3, [r1, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3302      	adds	r3, #2
 80015e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4812      	ldr	r0, [pc, #72]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 80015f0:	79b9      	ldrb	r1, [r7, #6]
 80015f2:	0889      	lsrs	r1, r1, #2
 80015f4:	b2c9      	uxtb	r1, r1
 80015f6:	401a      	ands	r2, r3
 80015f8:	1c8b      	adds	r3, r1, #2
 80015fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80015fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3302      	adds	r3, #2
 8001608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800160c:	79f9      	ldrb	r1, [r7, #7]
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <SYSCFG_EXTILineConfig+0x80>)
 800161c:	79b9      	ldrb	r1, [r7, #6]
 800161e:	0889      	lsrs	r1, r1, #2
 8001620:	b2c9      	uxtb	r1, r1
 8001622:	431a      	orrs	r2, r3
 8001624:	1c8b      	adds	r3, r1, #2
 8001626:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40010000 	.word	0x40010000

0800163c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	b29b      	uxth	r3, r3
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b29b      	uxth	r3, r3
 800168a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001692:	2201      	movs	r2, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d103      	bne.n	80016aa <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	e005      	b.n	80016b6 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d102      	bne.n	80016b6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3308      	adds	r3, #8
 80016b4:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80016c8:	e006      	b.n	80016d8 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43da      	mvns	r2, r3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	400a      	ands	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	3724      	adds	r7, #36	@ 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e001      	b.n	8001708 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001716:	b480      	push	{r7}
 8001718:	b087      	sub	sp, #28
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001740:	2201      	movs	r2, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4013      	ands	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e00d      	b.n	8001778 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d105      	bne.n	800176e <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4013      	ands	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e004      	b.n	8001778 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800177e:	2201      	movs	r2, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <USART_GetITStatus+0x8e>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	74fb      	strb	r3, [r7, #19]
 80017a2:	e001      	b.n	80017a8 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2201      	movs	r2, #1
 80017ca:	fa02 f103 	lsl.w	r1, r2, r3
 80017ce:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <NVIC_EnableIRQ+0x30>)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <uart_put_char+0x30>)
 80017fe:	f7ff ff1d 	bl	800163c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001802:	bf00      	nop
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <uart_put_char+0x30>)
 8001808:	f7ff ff6c 	bl	80016e4 <USART_GetFlagStatus>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f8      	beq.n	8001804 <uart_put_char+0x18>
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40004400 	.word	0x40004400

08001820 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e012      	b.n	800185a <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b0a      	cmp	r3, #10
 800183e:	d102      	bne.n	8001846 <_write_r+0x26>
            uart_put_char('\r');
 8001840:	200d      	movs	r0, #13
 8001842:	f7ff ffd3 	bl	80017ec <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffcc 	bl	80017ec <uart_put_char>
    for (n = 0; n < len; n++) {
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbe8      	blt.n	8001834 <_write_r+0x14>
    }

    return len;
 8001862:	683b      	ldr	r3, [r7, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001870:	4915      	ldr	r1, [pc, #84]	@ (80018c8 <USART2_IRQHandler+0x5c>)
 8001872:	4816      	ldr	r0, [pc, #88]	@ (80018cc <USART2_IRQHandler+0x60>)
 8001874:	f7ff ff4f 	bl	8001716 <USART_GetITStatus>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d021      	beq.n	80018c2 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <USART2_IRQHandler+0x60>)
 8001880:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001882:	b299      	uxth	r1, r3
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <USART2_IRQHandler+0x64>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	b2d0      	uxtb	r0, r2
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <USART2_IRQHandler+0x64>)
 8001890:	7010      	strb	r0, [r2, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	b2c9      	uxtb	r1, r1
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <USART2_IRQHandler+0x68>)
 8001898:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <USART2_IRQHandler+0x6c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2bff      	cmp	r3, #255	@ 0xff
 80018a2:	d107      	bne.n	80018b4 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <USART2_IRQHandler+0x70>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <USART2_IRQHandler+0x70>)
 80018b0:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80018b2:	e006      	b.n	80018c2 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <USART2_IRQHandler+0x6c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <USART2_IRQHandler+0x6c>)
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	00050105 	.word	0x00050105
 80018cc:	40004400 	.word	0x40004400
 80018d0:	200002e4 	.word	0x200002e4
 80018d4:	200001e4 	.word	0x200001e4
 80018d8:	200002e6 	.word	0x200002e6
 80018dc:	200002e5 	.word	0x200002e5

080018e0 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	@ 0x50
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80018e8:	4b86      	ldr	r3, [pc, #536]	@ (8001b04 <uart_init+0x224>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 fa01 	bl	8002cf8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80018f6:	4b83      	ldr	r3, [pc, #524]	@ (8001b04 <uart_init+0x224>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 f9fa 	bl	8002cf8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001904:	4b80      	ldr	r3, [pc, #512]	@ (8001b08 <uart_init+0x228>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4a7f      	ldr	r2, [pc, #508]	@ (8001b08 <uart_init+0x228>)
 800190a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001910:	4b7d      	ldr	r3, [pc, #500]	@ (8001b08 <uart_init+0x228>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a7c      	ldr	r2, [pc, #496]	@ (8001b08 <uart_init+0x228>)
 8001916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 800191c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001926:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800192a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 800192c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001936:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800193a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 800193c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001946:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800194a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 800194c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001956:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800195a:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 800195c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800196a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 800196c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001976:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800197a:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 800197c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001980:	889b      	ldrh	r3, [r3, #4]
 8001982:	b29b      	uxth	r3, r3
 8001984:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001988:	f023 030c 	bic.w	r3, r3, #12
 800198c:	b29b      	uxth	r3, r3
 800198e:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001990:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001998:	8892      	ldrh	r2, [r2, #4]
 800199a:	b292      	uxth	r2, r2
 800199c:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 800199e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ac:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80019ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019b8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80019bc:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80019be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019cc:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80019ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019d8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80019dc:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80019de:	4b4b      	ldr	r3, [pc, #300]	@ (8001b0c <uart_init+0x22c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4a      	ldr	r2, [pc, #296]	@ (8001b0c <uart_init+0x22c>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80019ea:	4b48      	ldr	r3, [pc, #288]	@ (8001b0c <uart_init+0x22c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4a47      	ldr	r2, [pc, #284]	@ (8001b0c <uart_init+0x22c>)
 80019f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019f4:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80019f6:	4b45      	ldr	r3, [pc, #276]	@ (8001b0c <uart_init+0x22c>)
 80019f8:	4a44      	ldr	r2, [pc, #272]	@ (8001b0c <uart_init+0x22c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80019fe:	4b43      	ldr	r3, [pc, #268]	@ (8001b0c <uart_init+0x22c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a42      	ldr	r2, [pc, #264]	@ (8001b0c <uart_init+0x22c>)
 8001a04:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a08:	f023 030c 	bic.w	r3, r3, #12
 8001a0c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <uart_init+0x22c>)
 8001a10:	4a3e      	ldr	r2, [pc, #248]	@ (8001b0c <uart_init+0x22c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <uart_init+0x22c>)
 8001a18:	4a3c      	ldr	r2, [pc, #240]	@ (8001b0c <uart_init+0x22c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <uart_init+0x22c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a3a      	ldr	r2, [pc, #232]	@ (8001b0c <uart_init+0x22c>)
 8001a24:	f043 030c 	orr.w	r3, r3, #12
 8001a28:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001a2a:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <uart_init+0x22c>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4a37      	ldr	r2, [pc, #220]	@ (8001b0c <uart_init+0x22c>)
 8001a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a34:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001a36:	4b35      	ldr	r3, [pc, #212]	@ (8001b0c <uart_init+0x22c>)
 8001a38:	4a34      	ldr	r2, [pc, #208]	@ (8001b0c <uart_init+0x22c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a42:	2300      	movs	r3, #0
 8001a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a46:	2300      	movs	r3, #0
 8001a48:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb5e 	bl	8001110 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001a58:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <uart_init+0x22c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a66:	005a      	lsls	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	fb01 f202 	mul.w	r2, r1, r2
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a84:	e00d      	b.n	8001aa2 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	fb01 f202 	mul.w	r2, r1, r2
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d302      	bcc.n	8001ab2 <uart_init+0x1d2>
        divider++;
 8001aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aae:	3301      	adds	r3, #1
 8001ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <uart_init+0x22c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aca:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001ace:	4013      	ands	r3, r2
 8001ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <uart_init+0x22c>)
 8001ad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ada:	b292      	uxth	r2, r2
 8001adc:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <uart_init+0x22c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <uart_init+0x22c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001aea:	2201      	movs	r2, #1
 8001aec:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <uart_init+0x230>)
 8001aee:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <uart_init+0x22c>)
 8001af0:	f7ff fdb6 	bl	8001660 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001af4:	2026      	movs	r0, #38	@ 0x26
 8001af6:	f7ff fe5f 	bl	80017b8 <NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3750      	adds	r7, #80	@ 0x50
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40004400 	.word	0x40004400
 8001b10:	00050105 	.word	0x00050105

08001b14 <iniEXTIA4>:


//Mostly template for now
//Keep in mind to switch the GPIOx port and EXTI_PinSourcex and the EXTI_Linex

void iniEXTIA4(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff fd2b 	bl	8001578 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 8001b22:	2104      	movs	r1, #4
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fd47 	bl	80015b8 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b32:	2300      	movs	r3, #0
 8001b34:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 8001b36:	2308      	movs	r3, #8
 8001b38:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f832 	bl	8000ba8 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001b44:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 8001b48:	f7ff fa6a 	bl	8001020 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fa72 	bl	8001048 <NVIC_Init>

}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <EXTI4_IRQHandler>:

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001b70:	2004      	movs	r0, #4
 8001b72:	f7ff f91f 	bl	8000db4 <EXTI_GetITStatus>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
        setLED('r');
 8001b7c:	2072      	movs	r0, #114	@ 0x72
 8001b7e:	f000 f951 	bl	8001e24 <setLED>
        EXTI_ClearITPendingBit(EXTI_Line4);
 8001b82:	2004      	movs	r0, #4
 8001b84:	f7ff f94e 	bl	8000e24 <EXTI_ClearITPendingBit>
    }

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8001b92:	2101      	movs	r1, #1
 8001b94:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001b98:	f7ff fcce 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001ba2:	f7ff fcc9 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001bac:	f7ff fcc4 	bl	8001538 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f9e6 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f7ff f944 	bl	8000e58 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f9d6 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8001be0:	2321      	movs	r3, #33	@ 0x21
 8001be2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001be4:	463b      	mov	r3, r7
 8001be6:	4619      	mov	r1, r3
 8001be8:	480a      	ldr	r0, [pc, #40]	@ (8001c14 <initJoystick+0x88>)
 8001bea:	f7ff f935 	bl	8000e58 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001bee:	463b      	mov	r3, r7
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f9c7 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <initJoystick+0x8c>)
 8001c08:	f7ff f926 	bl	8000e58 <GPIO_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800

08001c1c <readJoystick>:


int8_t readJoystick(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8001c26:	2110      	movs	r1, #16
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f7ff f9c4 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8001c34:	2120      	movs	r1, #32
 8001c36:	4821      	ldr	r0, [pc, #132]	@ (8001cbc <readJoystick+0xa0>)
 8001c38:	f7ff f9be 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8001c40:	2101      	movs	r1, #1
 8001c42:	481e      	ldr	r0, [pc, #120]	@ (8001cbc <readJoystick+0xa0>)
 8001c44:	f7ff f9b8 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	481c      	ldr	r0, [pc, #112]	@ (8001cc0 <readJoystick+0xa4>)
 8001c50:	f7ff f9b2 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c54:	4603      	mov	r3, r0
 8001c56:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4819      	ldr	r0, [pc, #100]	@ (8001cc0 <readJoystick+0xa4>)
 8001c5c:	f7ff f9ac 	bl	8000fb8 <GPIO_ReadInputDataBit>
 8001c60:	4603      	mov	r3, r0
 8001c62:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 8001c64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d102      	bne.n	8001c72 <readJoystick+0x56>
		bit = Up;
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	e01e      	b.n	8001cb0 <readJoystick+0x94>
	} else if (Down == 1){
 8001c72:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d103      	bne.n	8001c82 <readJoystick+0x66>
		bit = Down << 1;
 8001c7a:	793b      	ldrb	r3, [r7, #4]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	e016      	b.n	8001cb0 <readJoystick+0x94>
	} else if (Left == 1){
 8001c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d103      	bne.n	8001c92 <readJoystick+0x76>
		bit = Left << 2;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	e00e      	b.n	8001cb0 <readJoystick+0x94>
	} else if (Right == 1){
 8001c92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d103      	bne.n	8001ca2 <readJoystick+0x86>
		bit = Right << 3;
 8001c9a:	78bb      	ldrb	r3, [r7, #2]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	e006      	b.n	8001cb0 <readJoystick+0x94>
	} else if (Center == 1){
 8001ca2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <readJoystick+0x94>
		bit = Center << 4;
 8001caa:	797b      	ldrb	r3, [r7, #5]
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	48000800 	.word	0x48000800

08001cc4 <handleJoystick>:

void handleJoystick(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

	static int8_t currentState = 0;  // remember last state

	int8_t nextState = readJoystick();
 8001cca:	f7ff ffa7 	bl	8001c1c <readJoystick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]

    if (nextState!= currentState) {
 8001cd2:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <handleJoystick+0xa4>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d03b      	beq.n	8001d58 <handleJoystick+0x94>
		switch(nextState){
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d836      	bhi.n	8001d58 <handleJoystick+0x94>
 8001cea:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <handleJoystick+0x2c>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d31 	.word	0x08001d31
 8001cf4:	08001d39 	.word	0x08001d39
 8001cf8:	08001d59 	.word	0x08001d59
 8001cfc:	08001d41 	.word	0x08001d41
 8001d00:	08001d59 	.word	0x08001d59
 8001d04:	08001d59 	.word	0x08001d59
 8001d08:	08001d59 	.word	0x08001d59
 8001d0c:	08001d49 	.word	0x08001d49
 8001d10:	08001d59 	.word	0x08001d59
 8001d14:	08001d59 	.word	0x08001d59
 8001d18:	08001d59 	.word	0x08001d59
 8001d1c:	08001d59 	.word	0x08001d59
 8001d20:	08001d59 	.word	0x08001d59
 8001d24:	08001d59 	.word	0x08001d59
 8001d28:	08001d59 	.word	0x08001d59
 8001d2c:	08001d51 	.word	0x08001d51
		case 0x1:
			printf("Up\n");
 8001d30:	480e      	ldr	r0, [pc, #56]	@ (8001d6c <handleJoystick+0xa8>)
 8001d32:	f000 ffd9 	bl	8002ce8 <puts>
			break;
 8001d36:	e00f      	b.n	8001d58 <handleJoystick+0x94>

		case 0x2:
			printf("Down\n");
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <handleJoystick+0xac>)
 8001d3a:	f000 ffd5 	bl	8002ce8 <puts>
			break;
 8001d3e:	e00b      	b.n	8001d58 <handleJoystick+0x94>

		case 0x4:
			printf("Left\n");
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <handleJoystick+0xb0>)
 8001d42:	f000 ffd1 	bl	8002ce8 <puts>
			break;
 8001d46:	e007      	b.n	8001d58 <handleJoystick+0x94>

		case 0x8:
			printf("Right\n");
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <handleJoystick+0xb4>)
 8001d4a:	f000 ffcd 	bl	8002ce8 <puts>
			break;
 8001d4e:	e003      	b.n	8001d58 <handleJoystick+0x94>

		case 0x10:
			printf("Center\n");
 8001d50:	480a      	ldr	r0, [pc, #40]	@ (8001d7c <handleJoystick+0xb8>)
 8001d52:	f000 ffc9 	bl	8002ce8 <puts>
			break;
 8001d56:	bf00      	nop
		}
	}
	currentState = nextState;
 8001d58:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <handleJoystick+0xa4>)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	7013      	strb	r3, [r2, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002e7 	.word	0x200002e7
 8001d6c:	08004d58 	.word	0x08004d58
 8001d70:	08004d5c 	.word	0x08004d5c
 8001d74:	08004d64 	.word	0x08004d64
 8001d78:	08004d6c 	.word	0x08004d6c
 8001d7c:	08004d74 	.word	0x08004d74

08001d80 <initLED>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLED() {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 8001d86:	2101      	movs	r1, #1
 8001d88:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001d8c:	f7ff fbd4 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8001d90:	2101      	movs	r1, #1
 8001d92:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001d96:	f7ff fbcf 	bl	8001538 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001da0:	f7ff fbca 	bl	8001538 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8001da4:	463b      	mov	r3, r7
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f8ec 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8001dac:	2301      	movs	r3, #1
 8001dae:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8001db0:	2300      	movs	r3, #0
 8001db2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8001db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001db8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 8001dba:	2302      	movs	r3, #2
 8001dbc:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc6:	f7ff f847 	bl	8000e58 <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f8d9 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001dde:	2302      	movs	r3, #2
 8001de0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	480d      	ldr	r0, [pc, #52]	@ (8001e1c <initLED+0x9c>)
 8001de8:	f7ff f836 	bl	8000e58 <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8001dec:	463b      	mov	r3, r7
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f8c8 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001df4:	2301      	movs	r3, #1
 8001df6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001e00:	2302      	movs	r3, #2
 8001e02:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <initLED+0xa0>)
 8001e0a:	f7ff f825 	bl	8000e58 <GPIO_Init>

	// Initialize LED to off
	setLED('d');
 8001e0e:	2064      	movs	r0, #100	@ 0x64
 8001e10:	f000 f808 	bl	8001e24 <setLED>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	48000800 	.word	0x48000800

08001e24 <setLED>:

void setLED(char sel) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b72      	cmp	r3, #114	@ 0x72
 8001e32:	d111      	bne.n	8001e58 <setLED+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001e34:	2200      	movs	r2, #0
 8001e36:	2110      	movs	r1, #16
 8001e38:	4852      	ldr	r0, [pc, #328]	@ (8001f84 <setLED+0x160>)
 8001e3a:	f7ff f8d9 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2180      	movs	r1, #128	@ 0x80
 8001e42:	4851      	ldr	r0, [pc, #324]	@ (8001f88 <setLED+0x164>)
 8001e44:	f7ff f8d4 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e52:	f7ff f8cd 	bl	8000ff0 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 8001e56:	e091      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'g') {
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b67      	cmp	r3, #103	@ 0x67
 8001e5c:	d111      	bne.n	8001e82 <setLED+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2110      	movs	r1, #16
 8001e62:	4848      	ldr	r0, [pc, #288]	@ (8001f84 <setLED+0x160>)
 8001e64:	f7ff f8c4 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	4846      	ldr	r0, [pc, #280]	@ (8001f88 <setLED+0x164>)
 8001e6e:	f7ff f8bf 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7c:	f7ff f8b8 	bl	8000ff0 <GPIO_WriteBit>
}
 8001e80:	e07c      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'b') {
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b62      	cmp	r3, #98	@ 0x62
 8001e86:	d111      	bne.n	8001eac <setLED+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	483d      	ldr	r0, [pc, #244]	@ (8001f84 <setLED+0x160>)
 8001e8e:	f7ff f8af 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001e92:	2201      	movs	r2, #1
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	483c      	ldr	r0, [pc, #240]	@ (8001f88 <setLED+0x164>)
 8001e98:	f7ff f8aa 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea6:	f7ff f8a3 	bl	8000ff0 <GPIO_WriteBit>
}
 8001eaa:	e067      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'c') {
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b63      	cmp	r3, #99	@ 0x63
 8001eb0:	d111      	bne.n	8001ed6 <setLED+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	4833      	ldr	r0, [pc, #204]	@ (8001f84 <setLED+0x160>)
 8001eb8:	f7ff f89a 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2180      	movs	r1, #128	@ 0x80
 8001ec0:	4831      	ldr	r0, [pc, #196]	@ (8001f88 <setLED+0x164>)
 8001ec2:	f7ff f895 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed0:	f7ff f88e 	bl	8000ff0 <GPIO_WriteBit>
}
 8001ed4:	e052      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'm') {
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b6d      	cmp	r3, #109	@ 0x6d
 8001eda:	d111      	bne.n	8001f00 <setLED+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001edc:	2200      	movs	r2, #0
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4828      	ldr	r0, [pc, #160]	@ (8001f84 <setLED+0x160>)
 8001ee2:	f7ff f885 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2180      	movs	r1, #128	@ 0x80
 8001eea:	4827      	ldr	r0, [pc, #156]	@ (8001f88 <setLED+0x164>)
 8001eec:	f7ff f880 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efa:	f7ff f879 	bl	8000ff0 <GPIO_WriteBit>
}
 8001efe:	e03d      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'y') {
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b79      	cmp	r3, #121	@ 0x79
 8001f04:	d111      	bne.n	8001f2a <setLED+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001f06:	2200      	movs	r2, #0
 8001f08:	2110      	movs	r1, #16
 8001f0a:	481e      	ldr	r0, [pc, #120]	@ (8001f84 <setLED+0x160>)
 8001f0c:	f7ff f870 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	481c      	ldr	r0, [pc, #112]	@ (8001f88 <setLED+0x164>)
 8001f16:	f7ff f86b 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f24:	f7ff f864 	bl	8000ff0 <GPIO_WriteBit>
}
 8001f28:	e028      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'w') {
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b77      	cmp	r3, #119	@ 0x77
 8001f2e:	d111      	bne.n	8001f54 <setLED+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001f30:	2200      	movs	r2, #0
 8001f32:	2110      	movs	r1, #16
 8001f34:	4813      	ldr	r0, [pc, #76]	@ (8001f84 <setLED+0x160>)
 8001f36:	f7ff f85b 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <setLED+0x164>)
 8001f40:	f7ff f856 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4e:	f7ff f84f 	bl	8000ff0 <GPIO_WriteBit>
}
 8001f52:	e013      	b.n	8001f7c <setLED+0x158>
	} else if (sel == 'd') {
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d110      	bne.n	8001f7c <setLED+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2110      	movs	r1, #16
 8001f5e:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <setLED+0x160>)
 8001f60:	f7ff f846 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001f64:	2201      	movs	r2, #1
 8001f66:	2180      	movs	r1, #128	@ 0x80
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <setLED+0x164>)
 8001f6a:	f7ff f841 	bl	8000ff0 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f78:	f7ff f83a 	bl	8000ff0 <GPIO_WriteBit>
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800

08001f8c <main>:
#include "30010_io.h" 		// Input/output library for this course
#include "joystick.h"
#include "led.h"
#include "interrupt.h"

int main(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8001f90:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8001f94:	f7ff fca4 	bl	80018e0 <uart_init>

	initJoystick();
 8001f98:	f7ff fdf8 	bl	8001b8c <initJoystick>
	initLED();
 8001f9c:	f7ff fef0 	bl	8001d80 <initLED>
	iniEXTIA4();
 8001fa0:	f7ff fdb8 	bl	8001b14 <iniEXTIA4>




	while(1) {
		handleJoystick();
 8001fa4:	f7ff fe8e 	bl	8001cc4 <handleJoystick>
 8001fa8:	e7fc      	b.n	8001fa4 <main+0x18>

08001faa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
	return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_kill>:

int _kill(int pid, int sig)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fc4:	f001 f86c 	bl	80030a0 <__errno>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2216      	movs	r2, #22
 8001fcc:	601a      	str	r2, [r3, #0]
	return -1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_exit>:

void _exit (int status)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffe7 	bl	8001fba <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <_exit+0x12>

08001ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e00a      	b.n	8002018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002002:	f3af 8000 	nop.w
 8002006:	4601      	mov	r1, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	b2ca      	uxtb	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf0      	blt.n	8002002 <_read+0x12>
	}

return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:
	}
	return len;
}

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002052:	605a      	str	r2, [r3, #4]
	return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <SystemInit+0x84>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <SystemInit+0x84>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <SystemInit+0x88>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <SystemInit+0x88>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80020b4:	4b19      	ldr	r3, [pc, #100]	@ (800211c <SystemInit+0x88>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4918      	ldr	r1, [pc, #96]	@ (800211c <SystemInit+0x88>)
 80020ba:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <SystemInit+0x8c>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <SystemInit+0x88>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a15      	ldr	r2, [pc, #84]	@ (800211c <SystemInit+0x88>)
 80020c6:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020d0:	4b12      	ldr	r3, [pc, #72]	@ (800211c <SystemInit+0x88>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a11      	ldr	r2, [pc, #68]	@ (800211c <SystemInit+0x88>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <SystemInit+0x88>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	@ (800211c <SystemInit+0x88>)
 80020e2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80020e6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <SystemInit+0x88>)
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <SystemInit+0x88>)
 80020ee:	f023 030f 	bic.w	r3, r3, #15
 80020f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <SystemInit+0x88>)
 80020f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f8:	4908      	ldr	r1, [pc, #32]	@ (800211c <SystemInit+0x88>)
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <SystemInit+0x90>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <SystemInit+0x88>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002106:	f000 f80f 	bl	8002128 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800210a:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <SystemInit+0x84>)
 800210c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002110:	609a      	str	r2, [r3, #8]
#endif  
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	40021000 	.word	0x40021000
 8002120:	f87fc00c 	.word	0xf87fc00c
 8002124:	ff00fccc 	.word	0xff00fccc

08002128 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800212c:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <SetSysClock+0x8c>)
 800212e:	2212      	movs	r2, #18
 8002130:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002132:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <SetSysClock+0x90>)
 8002134:	4a20      	ldr	r2, [pc, #128]	@ (80021b8 <SetSysClock+0x90>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800213a:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <SetSysClock+0x90>)
 800213c:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <SetSysClock+0x90>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <SetSysClock+0x90>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a1c      	ldr	r2, [pc, #112]	@ (80021b8 <SetSysClock+0x90>)
 8002148:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <SetSysClock+0x90>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <SetSysClock+0x90>)
 8002154:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002158:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <SetSysClock+0x90>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a16      	ldr	r2, [pc, #88]	@ (80021b8 <SetSysClock+0x90>)
 8002160:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 8002164:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <SetSysClock+0x90>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <SetSysClock+0x90>)
 800216c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002170:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002172:	bf00      	nop
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <SetSysClock+0x90>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f9      	beq.n	8002174 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002180:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <SetSysClock+0x90>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <SetSysClock+0x90>)
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <SetSysClock+0x90>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a09      	ldr	r2, [pc, #36]	@ (80021b8 <SetSysClock+0x90>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002198:	bf00      	nop
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <SetSysClock+0x90>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d1f9      	bne.n	800219a <SetSysClock+0x72>
  {
  }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000

080021bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021bc:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c0:	480d      	ldr	r0, [pc, #52]	@ (80021f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021c2:	490e      	ldr	r1, [pc, #56]	@ (80021fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002200 <LoopForever+0xe>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002208 <LoopForever+0x16>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021e6:	f7ff ff55 	bl	8002094 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021ea:	f000 ff5f 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ee:	f7ff fecd 	bl	8001f8c <main>

080021f2 <LoopForever>:

LoopForever:
    b LoopForever
 80021f2:	e7fe      	b.n	80021f2 <LoopForever>
  ldr   r0, =_estack
 80021f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002200:	0800512c 	.word	0x0800512c
  ldr r2, =_sbss
 8002204:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002208:	20000438 	.word	0x20000438

0800220c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC1_2_IRQHandler>

0800220e <__cvt>:
 800220e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002212:	ec57 6b10 	vmov	r6, r7, d0
 8002216:	2f00      	cmp	r7, #0
 8002218:	460c      	mov	r4, r1
 800221a:	4619      	mov	r1, r3
 800221c:	463b      	mov	r3, r7
 800221e:	bfbb      	ittet	lt
 8002220:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002224:	461f      	movlt	r7, r3
 8002226:	2300      	movge	r3, #0
 8002228:	232d      	movlt	r3, #45	@ 0x2d
 800222a:	700b      	strb	r3, [r1, #0]
 800222c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800222e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002232:	4691      	mov	r9, r2
 8002234:	f023 0820 	bic.w	r8, r3, #32
 8002238:	bfbc      	itt	lt
 800223a:	4632      	movlt	r2, r6
 800223c:	4616      	movlt	r6, r2
 800223e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002242:	d005      	beq.n	8002250 <__cvt+0x42>
 8002244:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002248:	d100      	bne.n	800224c <__cvt+0x3e>
 800224a:	3401      	adds	r4, #1
 800224c:	2102      	movs	r1, #2
 800224e:	e000      	b.n	8002252 <__cvt+0x44>
 8002250:	2103      	movs	r1, #3
 8002252:	ab03      	add	r3, sp, #12
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	ab02      	add	r3, sp, #8
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	ec47 6b10 	vmov	d0, r6, r7
 800225e:	4653      	mov	r3, sl
 8002260:	4622      	mov	r2, r4
 8002262:	f000 ffd5 	bl	8003210 <_dtoa_r>
 8002266:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800226a:	4605      	mov	r5, r0
 800226c:	d119      	bne.n	80022a2 <__cvt+0x94>
 800226e:	f019 0f01 	tst.w	r9, #1
 8002272:	d00e      	beq.n	8002292 <__cvt+0x84>
 8002274:	eb00 0904 	add.w	r9, r0, r4
 8002278:	2200      	movs	r2, #0
 800227a:	2300      	movs	r3, #0
 800227c:	4630      	mov	r0, r6
 800227e:	4639      	mov	r1, r7
 8002280:	f7fe fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8002284:	b108      	cbz	r0, 800228a <__cvt+0x7c>
 8002286:	f8cd 900c 	str.w	r9, [sp, #12]
 800228a:	2230      	movs	r2, #48	@ 0x30
 800228c:	9b03      	ldr	r3, [sp, #12]
 800228e:	454b      	cmp	r3, r9
 8002290:	d31e      	bcc.n	80022d0 <__cvt+0xc2>
 8002292:	9b03      	ldr	r3, [sp, #12]
 8002294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002296:	1b5b      	subs	r3, r3, r5
 8002298:	4628      	mov	r0, r5
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	b004      	add	sp, #16
 800229e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80022a6:	eb00 0904 	add.w	r9, r0, r4
 80022aa:	d1e5      	bne.n	8002278 <__cvt+0x6a>
 80022ac:	7803      	ldrb	r3, [r0, #0]
 80022ae:	2b30      	cmp	r3, #48	@ 0x30
 80022b0:	d10a      	bne.n	80022c8 <__cvt+0xba>
 80022b2:	2200      	movs	r2, #0
 80022b4:	2300      	movs	r3, #0
 80022b6:	4630      	mov	r0, r6
 80022b8:	4639      	mov	r1, r7
 80022ba:	f7fe fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80022be:	b918      	cbnz	r0, 80022c8 <__cvt+0xba>
 80022c0:	f1c4 0401 	rsb	r4, r4, #1
 80022c4:	f8ca 4000 	str.w	r4, [sl]
 80022c8:	f8da 3000 	ldr.w	r3, [sl]
 80022cc:	4499      	add	r9, r3
 80022ce:	e7d3      	b.n	8002278 <__cvt+0x6a>
 80022d0:	1c59      	adds	r1, r3, #1
 80022d2:	9103      	str	r1, [sp, #12]
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e7d9      	b.n	800228c <__cvt+0x7e>

080022d8 <__exponent>:
 80022d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022da:	2900      	cmp	r1, #0
 80022dc:	bfba      	itte	lt
 80022de:	4249      	neglt	r1, r1
 80022e0:	232d      	movlt	r3, #45	@ 0x2d
 80022e2:	232b      	movge	r3, #43	@ 0x2b
 80022e4:	2909      	cmp	r1, #9
 80022e6:	7002      	strb	r2, [r0, #0]
 80022e8:	7043      	strb	r3, [r0, #1]
 80022ea:	dd29      	ble.n	8002340 <__exponent+0x68>
 80022ec:	f10d 0307 	add.w	r3, sp, #7
 80022f0:	461d      	mov	r5, r3
 80022f2:	270a      	movs	r7, #10
 80022f4:	461a      	mov	r2, r3
 80022f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80022fa:	fb07 1416 	mls	r4, r7, r6, r1
 80022fe:	3430      	adds	r4, #48	@ 0x30
 8002300:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002304:	460c      	mov	r4, r1
 8002306:	2c63      	cmp	r4, #99	@ 0x63
 8002308:	f103 33ff 	add.w	r3, r3, #4294967295
 800230c:	4631      	mov	r1, r6
 800230e:	dcf1      	bgt.n	80022f4 <__exponent+0x1c>
 8002310:	3130      	adds	r1, #48	@ 0x30
 8002312:	1e94      	subs	r4, r2, #2
 8002314:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002318:	1c41      	adds	r1, r0, #1
 800231a:	4623      	mov	r3, r4
 800231c:	42ab      	cmp	r3, r5
 800231e:	d30a      	bcc.n	8002336 <__exponent+0x5e>
 8002320:	f10d 0309 	add.w	r3, sp, #9
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	42ac      	cmp	r4, r5
 8002328:	bf88      	it	hi
 800232a:	2300      	movhi	r3, #0
 800232c:	3302      	adds	r3, #2
 800232e:	4403      	add	r3, r0
 8002330:	1a18      	subs	r0, r3, r0
 8002332:	b003      	add	sp, #12
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002336:	f813 6b01 	ldrb.w	r6, [r3], #1
 800233a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800233e:	e7ed      	b.n	800231c <__exponent+0x44>
 8002340:	2330      	movs	r3, #48	@ 0x30
 8002342:	3130      	adds	r1, #48	@ 0x30
 8002344:	7083      	strb	r3, [r0, #2]
 8002346:	70c1      	strb	r1, [r0, #3]
 8002348:	1d03      	adds	r3, r0, #4
 800234a:	e7f1      	b.n	8002330 <__exponent+0x58>

0800234c <_printf_float>:
 800234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002350:	b08d      	sub	sp, #52	@ 0x34
 8002352:	460c      	mov	r4, r1
 8002354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002358:	4616      	mov	r6, r2
 800235a:	461f      	mov	r7, r3
 800235c:	4605      	mov	r5, r0
 800235e:	f000 fe67 	bl	8003030 <_localeconv_r>
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	9304      	str	r3, [sp, #16]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fd ff82 	bl	8000270 <strlen>
 800236c:	2300      	movs	r3, #0
 800236e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002370:	f8d8 3000 	ldr.w	r3, [r8]
 8002374:	9005      	str	r0, [sp, #20]
 8002376:	3307      	adds	r3, #7
 8002378:	f023 0307 	bic.w	r3, r3, #7
 800237c:	f103 0208 	add.w	r2, r3, #8
 8002380:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002384:	f8d4 b000 	ldr.w	fp, [r4]
 8002388:	f8c8 2000 	str.w	r2, [r8]
 800238c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002394:	9307      	str	r3, [sp, #28]
 8002396:	f8cd 8018 	str.w	r8, [sp, #24]
 800239a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800239e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002614 <_printf_float+0x2c8>)
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	f7fe fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80023ac:	bb70      	cbnz	r0, 800240c <_printf_float+0xc0>
 80023ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023b2:	4b98      	ldr	r3, [pc, #608]	@ (8002614 <_printf_float+0x2c8>)
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	f7fe fb9a 	bl	8000af0 <__aeabi_dcmple>
 80023bc:	bb30      	cbnz	r0, 800240c <_printf_float+0xc0>
 80023be:	2200      	movs	r2, #0
 80023c0:	2300      	movs	r3, #0
 80023c2:	4640      	mov	r0, r8
 80023c4:	4649      	mov	r1, r9
 80023c6:	f7fe fb89 	bl	8000adc <__aeabi_dcmplt>
 80023ca:	b110      	cbz	r0, 80023d2 <_printf_float+0x86>
 80023cc:	232d      	movs	r3, #45	@ 0x2d
 80023ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023d2:	4a91      	ldr	r2, [pc, #580]	@ (8002618 <_printf_float+0x2cc>)
 80023d4:	4b91      	ldr	r3, [pc, #580]	@ (800261c <_printf_float+0x2d0>)
 80023d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80023da:	bf8c      	ite	hi
 80023dc:	4690      	movhi	r8, r2
 80023de:	4698      	movls	r8, r3
 80023e0:	2303      	movs	r3, #3
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	f02b 0304 	bic.w	r3, fp, #4
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	f04f 0900 	mov.w	r9, #0
 80023ee:	9700      	str	r7, [sp, #0]
 80023f0:	4633      	mov	r3, r6
 80023f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80023f4:	4621      	mov	r1, r4
 80023f6:	4628      	mov	r0, r5
 80023f8:	f000 f9d2 	bl	80027a0 <_printf_common>
 80023fc:	3001      	adds	r0, #1
 80023fe:	f040 808d 	bne.w	800251c <_printf_float+0x1d0>
 8002402:	f04f 30ff 	mov.w	r0, #4294967295
 8002406:	b00d      	add	sp, #52	@ 0x34
 8002408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	4640      	mov	r0, r8
 8002412:	4649      	mov	r1, r9
 8002414:	f7fe fb8a 	bl	8000b2c <__aeabi_dcmpun>
 8002418:	b140      	cbz	r0, 800242c <_printf_float+0xe0>
 800241a:	464b      	mov	r3, r9
 800241c:	2b00      	cmp	r3, #0
 800241e:	bfbc      	itt	lt
 8002420:	232d      	movlt	r3, #45	@ 0x2d
 8002422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002426:	4a7e      	ldr	r2, [pc, #504]	@ (8002620 <_printf_float+0x2d4>)
 8002428:	4b7e      	ldr	r3, [pc, #504]	@ (8002624 <_printf_float+0x2d8>)
 800242a:	e7d4      	b.n	80023d6 <_printf_float+0x8a>
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002432:	9206      	str	r2, [sp, #24]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	d13b      	bne.n	80024b0 <_printf_float+0x164>
 8002438:	2306      	movs	r3, #6
 800243a:	6063      	str	r3, [r4, #4]
 800243c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002440:	2300      	movs	r3, #0
 8002442:	6022      	str	r2, [r4, #0]
 8002444:	9303      	str	r3, [sp, #12]
 8002446:	ab0a      	add	r3, sp, #40	@ 0x28
 8002448:	e9cd a301 	strd	sl, r3, [sp, #4]
 800244c:	ab09      	add	r3, sp, #36	@ 0x24
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	ec49 8b10 	vmov	d0, r8, r9
 8002456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800245a:	4628      	mov	r0, r5
 800245c:	f7ff fed7 	bl	800220e <__cvt>
 8002460:	9b06      	ldr	r3, [sp, #24]
 8002462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002464:	2b47      	cmp	r3, #71	@ 0x47
 8002466:	4680      	mov	r8, r0
 8002468:	d129      	bne.n	80024be <_printf_float+0x172>
 800246a:	1cc8      	adds	r0, r1, #3
 800246c:	db02      	blt.n	8002474 <_printf_float+0x128>
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	4299      	cmp	r1, r3
 8002472:	dd41      	ble.n	80024f8 <_printf_float+0x1ac>
 8002474:	f1aa 0a02 	sub.w	sl, sl, #2
 8002478:	fa5f fa8a 	uxtb.w	sl, sl
 800247c:	3901      	subs	r1, #1
 800247e:	4652      	mov	r2, sl
 8002480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002484:	9109      	str	r1, [sp, #36]	@ 0x24
 8002486:	f7ff ff27 	bl	80022d8 <__exponent>
 800248a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800248c:	1813      	adds	r3, r2, r0
 800248e:	2a01      	cmp	r2, #1
 8002490:	4681      	mov	r9, r0
 8002492:	6123      	str	r3, [r4, #16]
 8002494:	dc02      	bgt.n	800249c <_printf_float+0x150>
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	07d2      	lsls	r2, r2, #31
 800249a:	d501      	bpl.n	80024a0 <_printf_float+0x154>
 800249c:	3301      	adds	r3, #1
 800249e:	6123      	str	r3, [r4, #16]
 80024a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0a2      	beq.n	80023ee <_printf_float+0xa2>
 80024a8:	232d      	movs	r3, #45	@ 0x2d
 80024aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024ae:	e79e      	b.n	80023ee <_printf_float+0xa2>
 80024b0:	9a06      	ldr	r2, [sp, #24]
 80024b2:	2a47      	cmp	r2, #71	@ 0x47
 80024b4:	d1c2      	bne.n	800243c <_printf_float+0xf0>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1c0      	bne.n	800243c <_printf_float+0xf0>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e7bd      	b.n	800243a <_printf_float+0xee>
 80024be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80024c2:	d9db      	bls.n	800247c <_printf_float+0x130>
 80024c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80024c8:	d118      	bne.n	80024fc <_printf_float+0x1b0>
 80024ca:	2900      	cmp	r1, #0
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	dd0b      	ble.n	80024e8 <_printf_float+0x19c>
 80024d0:	6121      	str	r1, [r4, #16]
 80024d2:	b913      	cbnz	r3, 80024da <_printf_float+0x18e>
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	07d0      	lsls	r0, r2, #31
 80024d8:	d502      	bpl.n	80024e0 <_printf_float+0x194>
 80024da:	3301      	adds	r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	6123      	str	r3, [r4, #16]
 80024e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80024e2:	f04f 0900 	mov.w	r9, #0
 80024e6:	e7db      	b.n	80024a0 <_printf_float+0x154>
 80024e8:	b913      	cbnz	r3, 80024f0 <_printf_float+0x1a4>
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	07d2      	lsls	r2, r2, #31
 80024ee:	d501      	bpl.n	80024f4 <_printf_float+0x1a8>
 80024f0:	3302      	adds	r3, #2
 80024f2:	e7f4      	b.n	80024de <_printf_float+0x192>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e7f2      	b.n	80024de <_printf_float+0x192>
 80024f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80024fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80024fe:	4299      	cmp	r1, r3
 8002500:	db05      	blt.n	800250e <_printf_float+0x1c2>
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	6121      	str	r1, [r4, #16]
 8002506:	07d8      	lsls	r0, r3, #31
 8002508:	d5ea      	bpl.n	80024e0 <_printf_float+0x194>
 800250a:	1c4b      	adds	r3, r1, #1
 800250c:	e7e7      	b.n	80024de <_printf_float+0x192>
 800250e:	2900      	cmp	r1, #0
 8002510:	bfd4      	ite	le
 8002512:	f1c1 0202 	rsble	r2, r1, #2
 8002516:	2201      	movgt	r2, #1
 8002518:	4413      	add	r3, r2
 800251a:	e7e0      	b.n	80024de <_printf_float+0x192>
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	055a      	lsls	r2, r3, #21
 8002520:	d407      	bmi.n	8002532 <_printf_float+0x1e6>
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	4642      	mov	r2, r8
 8002526:	4631      	mov	r1, r6
 8002528:	4628      	mov	r0, r5
 800252a:	47b8      	blx	r7
 800252c:	3001      	adds	r0, #1
 800252e:	d12b      	bne.n	8002588 <_printf_float+0x23c>
 8002530:	e767      	b.n	8002402 <_printf_float+0xb6>
 8002532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002536:	f240 80dd 	bls.w	80026f4 <_printf_float+0x3a8>
 800253a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800253e:	2200      	movs	r2, #0
 8002540:	2300      	movs	r3, #0
 8002542:	f7fe fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8002546:	2800      	cmp	r0, #0
 8002548:	d033      	beq.n	80025b2 <_printf_float+0x266>
 800254a:	4a37      	ldr	r2, [pc, #220]	@ (8002628 <_printf_float+0x2dc>)
 800254c:	2301      	movs	r3, #1
 800254e:	4631      	mov	r1, r6
 8002550:	4628      	mov	r0, r5
 8002552:	47b8      	blx	r7
 8002554:	3001      	adds	r0, #1
 8002556:	f43f af54 	beq.w	8002402 <_printf_float+0xb6>
 800255a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800255e:	4543      	cmp	r3, r8
 8002560:	db02      	blt.n	8002568 <_printf_float+0x21c>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	07d8      	lsls	r0, r3, #31
 8002566:	d50f      	bpl.n	8002588 <_printf_float+0x23c>
 8002568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800256c:	4631      	mov	r1, r6
 800256e:	4628      	mov	r0, r5
 8002570:	47b8      	blx	r7
 8002572:	3001      	adds	r0, #1
 8002574:	f43f af45 	beq.w	8002402 <_printf_float+0xb6>
 8002578:	f04f 0900 	mov.w	r9, #0
 800257c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002580:	f104 0a1a 	add.w	sl, r4, #26
 8002584:	45c8      	cmp	r8, r9
 8002586:	dc09      	bgt.n	800259c <_printf_float+0x250>
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	079b      	lsls	r3, r3, #30
 800258c:	f100 8103 	bmi.w	8002796 <_printf_float+0x44a>
 8002590:	68e0      	ldr	r0, [r4, #12]
 8002592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002594:	4298      	cmp	r0, r3
 8002596:	bfb8      	it	lt
 8002598:	4618      	movlt	r0, r3
 800259a:	e734      	b.n	8002406 <_printf_float+0xba>
 800259c:	2301      	movs	r3, #1
 800259e:	4652      	mov	r2, sl
 80025a0:	4631      	mov	r1, r6
 80025a2:	4628      	mov	r0, r5
 80025a4:	47b8      	blx	r7
 80025a6:	3001      	adds	r0, #1
 80025a8:	f43f af2b 	beq.w	8002402 <_printf_float+0xb6>
 80025ac:	f109 0901 	add.w	r9, r9, #1
 80025b0:	e7e8      	b.n	8002584 <_printf_float+0x238>
 80025b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	dc39      	bgt.n	800262c <_printf_float+0x2e0>
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <_printf_float+0x2dc>)
 80025ba:	2301      	movs	r3, #1
 80025bc:	4631      	mov	r1, r6
 80025be:	4628      	mov	r0, r5
 80025c0:	47b8      	blx	r7
 80025c2:	3001      	adds	r0, #1
 80025c4:	f43f af1d 	beq.w	8002402 <_printf_float+0xb6>
 80025c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80025cc:	ea59 0303 	orrs.w	r3, r9, r3
 80025d0:	d102      	bne.n	80025d8 <_printf_float+0x28c>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	07d9      	lsls	r1, r3, #31
 80025d6:	d5d7      	bpl.n	8002588 <_printf_float+0x23c>
 80025d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025dc:	4631      	mov	r1, r6
 80025de:	4628      	mov	r0, r5
 80025e0:	47b8      	blx	r7
 80025e2:	3001      	adds	r0, #1
 80025e4:	f43f af0d 	beq.w	8002402 <_printf_float+0xb6>
 80025e8:	f04f 0a00 	mov.w	sl, #0
 80025ec:	f104 0b1a 	add.w	fp, r4, #26
 80025f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025f2:	425b      	negs	r3, r3
 80025f4:	4553      	cmp	r3, sl
 80025f6:	dc01      	bgt.n	80025fc <_printf_float+0x2b0>
 80025f8:	464b      	mov	r3, r9
 80025fa:	e793      	b.n	8002524 <_printf_float+0x1d8>
 80025fc:	2301      	movs	r3, #1
 80025fe:	465a      	mov	r2, fp
 8002600:	4631      	mov	r1, r6
 8002602:	4628      	mov	r0, r5
 8002604:	47b8      	blx	r7
 8002606:	3001      	adds	r0, #1
 8002608:	f43f aefb 	beq.w	8002402 <_printf_float+0xb6>
 800260c:	f10a 0a01 	add.w	sl, sl, #1
 8002610:	e7ee      	b.n	80025f0 <_printf_float+0x2a4>
 8002612:	bf00      	nop
 8002614:	7fefffff 	.word	0x7fefffff
 8002618:	08004daa 	.word	0x08004daa
 800261c:	08004da6 	.word	0x08004da6
 8002620:	08004db2 	.word	0x08004db2
 8002624:	08004dae 	.word	0x08004dae
 8002628:	08004db6 	.word	0x08004db6
 800262c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800262e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002632:	4553      	cmp	r3, sl
 8002634:	bfa8      	it	ge
 8002636:	4653      	movge	r3, sl
 8002638:	2b00      	cmp	r3, #0
 800263a:	4699      	mov	r9, r3
 800263c:	dc36      	bgt.n	80026ac <_printf_float+0x360>
 800263e:	f04f 0b00 	mov.w	fp, #0
 8002642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002646:	f104 021a 	add.w	r2, r4, #26
 800264a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800264c:	9306      	str	r3, [sp, #24]
 800264e:	eba3 0309 	sub.w	r3, r3, r9
 8002652:	455b      	cmp	r3, fp
 8002654:	dc31      	bgt.n	80026ba <_printf_float+0x36e>
 8002656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002658:	459a      	cmp	sl, r3
 800265a:	dc3a      	bgt.n	80026d2 <_printf_float+0x386>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	07da      	lsls	r2, r3, #31
 8002660:	d437      	bmi.n	80026d2 <_printf_float+0x386>
 8002662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002664:	ebaa 0903 	sub.w	r9, sl, r3
 8002668:	9b06      	ldr	r3, [sp, #24]
 800266a:	ebaa 0303 	sub.w	r3, sl, r3
 800266e:	4599      	cmp	r9, r3
 8002670:	bfa8      	it	ge
 8002672:	4699      	movge	r9, r3
 8002674:	f1b9 0f00 	cmp.w	r9, #0
 8002678:	dc33      	bgt.n	80026e2 <_printf_float+0x396>
 800267a:	f04f 0800 	mov.w	r8, #0
 800267e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002682:	f104 0b1a 	add.w	fp, r4, #26
 8002686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002688:	ebaa 0303 	sub.w	r3, sl, r3
 800268c:	eba3 0309 	sub.w	r3, r3, r9
 8002690:	4543      	cmp	r3, r8
 8002692:	f77f af79 	ble.w	8002588 <_printf_float+0x23c>
 8002696:	2301      	movs	r3, #1
 8002698:	465a      	mov	r2, fp
 800269a:	4631      	mov	r1, r6
 800269c:	4628      	mov	r0, r5
 800269e:	47b8      	blx	r7
 80026a0:	3001      	adds	r0, #1
 80026a2:	f43f aeae 	beq.w	8002402 <_printf_float+0xb6>
 80026a6:	f108 0801 	add.w	r8, r8, #1
 80026aa:	e7ec      	b.n	8002686 <_printf_float+0x33a>
 80026ac:	4642      	mov	r2, r8
 80026ae:	4631      	mov	r1, r6
 80026b0:	4628      	mov	r0, r5
 80026b2:	47b8      	blx	r7
 80026b4:	3001      	adds	r0, #1
 80026b6:	d1c2      	bne.n	800263e <_printf_float+0x2f2>
 80026b8:	e6a3      	b.n	8002402 <_printf_float+0xb6>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4631      	mov	r1, r6
 80026be:	4628      	mov	r0, r5
 80026c0:	9206      	str	r2, [sp, #24]
 80026c2:	47b8      	blx	r7
 80026c4:	3001      	adds	r0, #1
 80026c6:	f43f ae9c 	beq.w	8002402 <_printf_float+0xb6>
 80026ca:	9a06      	ldr	r2, [sp, #24]
 80026cc:	f10b 0b01 	add.w	fp, fp, #1
 80026d0:	e7bb      	b.n	800264a <_printf_float+0x2fe>
 80026d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026d6:	4631      	mov	r1, r6
 80026d8:	4628      	mov	r0, r5
 80026da:	47b8      	blx	r7
 80026dc:	3001      	adds	r0, #1
 80026de:	d1c0      	bne.n	8002662 <_printf_float+0x316>
 80026e0:	e68f      	b.n	8002402 <_printf_float+0xb6>
 80026e2:	9a06      	ldr	r2, [sp, #24]
 80026e4:	464b      	mov	r3, r9
 80026e6:	4442      	add	r2, r8
 80026e8:	4631      	mov	r1, r6
 80026ea:	4628      	mov	r0, r5
 80026ec:	47b8      	blx	r7
 80026ee:	3001      	adds	r0, #1
 80026f0:	d1c3      	bne.n	800267a <_printf_float+0x32e>
 80026f2:	e686      	b.n	8002402 <_printf_float+0xb6>
 80026f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80026f8:	f1ba 0f01 	cmp.w	sl, #1
 80026fc:	dc01      	bgt.n	8002702 <_printf_float+0x3b6>
 80026fe:	07db      	lsls	r3, r3, #31
 8002700:	d536      	bpl.n	8002770 <_printf_float+0x424>
 8002702:	2301      	movs	r3, #1
 8002704:	4642      	mov	r2, r8
 8002706:	4631      	mov	r1, r6
 8002708:	4628      	mov	r0, r5
 800270a:	47b8      	blx	r7
 800270c:	3001      	adds	r0, #1
 800270e:	f43f ae78 	beq.w	8002402 <_printf_float+0xb6>
 8002712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002716:	4631      	mov	r1, r6
 8002718:	4628      	mov	r0, r5
 800271a:	47b8      	blx	r7
 800271c:	3001      	adds	r0, #1
 800271e:	f43f ae70 	beq.w	8002402 <_printf_float+0xb6>
 8002722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002726:	2200      	movs	r2, #0
 8002728:	2300      	movs	r3, #0
 800272a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800272e:	f7fe f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8002732:	b9c0      	cbnz	r0, 8002766 <_printf_float+0x41a>
 8002734:	4653      	mov	r3, sl
 8002736:	f108 0201 	add.w	r2, r8, #1
 800273a:	4631      	mov	r1, r6
 800273c:	4628      	mov	r0, r5
 800273e:	47b8      	blx	r7
 8002740:	3001      	adds	r0, #1
 8002742:	d10c      	bne.n	800275e <_printf_float+0x412>
 8002744:	e65d      	b.n	8002402 <_printf_float+0xb6>
 8002746:	2301      	movs	r3, #1
 8002748:	465a      	mov	r2, fp
 800274a:	4631      	mov	r1, r6
 800274c:	4628      	mov	r0, r5
 800274e:	47b8      	blx	r7
 8002750:	3001      	adds	r0, #1
 8002752:	f43f ae56 	beq.w	8002402 <_printf_float+0xb6>
 8002756:	f108 0801 	add.w	r8, r8, #1
 800275a:	45d0      	cmp	r8, sl
 800275c:	dbf3      	blt.n	8002746 <_printf_float+0x3fa>
 800275e:	464b      	mov	r3, r9
 8002760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002764:	e6df      	b.n	8002526 <_printf_float+0x1da>
 8002766:	f04f 0800 	mov.w	r8, #0
 800276a:	f104 0b1a 	add.w	fp, r4, #26
 800276e:	e7f4      	b.n	800275a <_printf_float+0x40e>
 8002770:	2301      	movs	r3, #1
 8002772:	4642      	mov	r2, r8
 8002774:	e7e1      	b.n	800273a <_printf_float+0x3ee>
 8002776:	2301      	movs	r3, #1
 8002778:	464a      	mov	r2, r9
 800277a:	4631      	mov	r1, r6
 800277c:	4628      	mov	r0, r5
 800277e:	47b8      	blx	r7
 8002780:	3001      	adds	r0, #1
 8002782:	f43f ae3e 	beq.w	8002402 <_printf_float+0xb6>
 8002786:	f108 0801 	add.w	r8, r8, #1
 800278a:	68e3      	ldr	r3, [r4, #12]
 800278c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800278e:	1a5b      	subs	r3, r3, r1
 8002790:	4543      	cmp	r3, r8
 8002792:	dcf0      	bgt.n	8002776 <_printf_float+0x42a>
 8002794:	e6fc      	b.n	8002590 <_printf_float+0x244>
 8002796:	f04f 0800 	mov.w	r8, #0
 800279a:	f104 0919 	add.w	r9, r4, #25
 800279e:	e7f4      	b.n	800278a <_printf_float+0x43e>

080027a0 <_printf_common>:
 80027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	4616      	mov	r6, r2
 80027a6:	4698      	mov	r8, r3
 80027a8:	688a      	ldr	r2, [r1, #8]
 80027aa:	690b      	ldr	r3, [r1, #16]
 80027ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bfb8      	it	lt
 80027b4:	4613      	movlt	r3, r2
 80027b6:	6033      	str	r3, [r6, #0]
 80027b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80027bc:	4607      	mov	r7, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	b10a      	cbz	r2, 80027c6 <_printf_common+0x26>
 80027c2:	3301      	adds	r3, #1
 80027c4:	6033      	str	r3, [r6, #0]
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	0699      	lsls	r1, r3, #26
 80027ca:	bf42      	ittt	mi
 80027cc:	6833      	ldrmi	r3, [r6, #0]
 80027ce:	3302      	addmi	r3, #2
 80027d0:	6033      	strmi	r3, [r6, #0]
 80027d2:	6825      	ldr	r5, [r4, #0]
 80027d4:	f015 0506 	ands.w	r5, r5, #6
 80027d8:	d106      	bne.n	80027e8 <_printf_common+0x48>
 80027da:	f104 0a19 	add.w	sl, r4, #25
 80027de:	68e3      	ldr	r3, [r4, #12]
 80027e0:	6832      	ldr	r2, [r6, #0]
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	42ab      	cmp	r3, r5
 80027e6:	dc26      	bgt.n	8002836 <_printf_common+0x96>
 80027e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	3b00      	subs	r3, #0
 80027f0:	bf18      	it	ne
 80027f2:	2301      	movne	r3, #1
 80027f4:	0692      	lsls	r2, r2, #26
 80027f6:	d42b      	bmi.n	8002850 <_printf_common+0xb0>
 80027f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027fc:	4641      	mov	r1, r8
 80027fe:	4638      	mov	r0, r7
 8002800:	47c8      	blx	r9
 8002802:	3001      	adds	r0, #1
 8002804:	d01e      	beq.n	8002844 <_printf_common+0xa4>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	6922      	ldr	r2, [r4, #16]
 800280a:	f003 0306 	and.w	r3, r3, #6
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf02      	ittt	eq
 8002812:	68e5      	ldreq	r5, [r4, #12]
 8002814:	6833      	ldreq	r3, [r6, #0]
 8002816:	1aed      	subeq	r5, r5, r3
 8002818:	68a3      	ldr	r3, [r4, #8]
 800281a:	bf0c      	ite	eq
 800281c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002820:	2500      	movne	r5, #0
 8002822:	4293      	cmp	r3, r2
 8002824:	bfc4      	itt	gt
 8002826:	1a9b      	subgt	r3, r3, r2
 8002828:	18ed      	addgt	r5, r5, r3
 800282a:	2600      	movs	r6, #0
 800282c:	341a      	adds	r4, #26
 800282e:	42b5      	cmp	r5, r6
 8002830:	d11a      	bne.n	8002868 <_printf_common+0xc8>
 8002832:	2000      	movs	r0, #0
 8002834:	e008      	b.n	8002848 <_printf_common+0xa8>
 8002836:	2301      	movs	r3, #1
 8002838:	4652      	mov	r2, sl
 800283a:	4641      	mov	r1, r8
 800283c:	4638      	mov	r0, r7
 800283e:	47c8      	blx	r9
 8002840:	3001      	adds	r0, #1
 8002842:	d103      	bne.n	800284c <_printf_common+0xac>
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800284c:	3501      	adds	r5, #1
 800284e:	e7c6      	b.n	80027de <_printf_common+0x3e>
 8002850:	18e1      	adds	r1, r4, r3
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	2030      	movs	r0, #48	@ 0x30
 8002856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800285a:	4422      	add	r2, r4
 800285c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002864:	3302      	adds	r3, #2
 8002866:	e7c7      	b.n	80027f8 <_printf_common+0x58>
 8002868:	2301      	movs	r3, #1
 800286a:	4622      	mov	r2, r4
 800286c:	4641      	mov	r1, r8
 800286e:	4638      	mov	r0, r7
 8002870:	47c8      	blx	r9
 8002872:	3001      	adds	r0, #1
 8002874:	d0e6      	beq.n	8002844 <_printf_common+0xa4>
 8002876:	3601      	adds	r6, #1
 8002878:	e7d9      	b.n	800282e <_printf_common+0x8e>
	...

0800287c <_printf_i>:
 800287c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002880:	7e0f      	ldrb	r7, [r1, #24]
 8002882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002884:	2f78      	cmp	r7, #120	@ 0x78
 8002886:	4691      	mov	r9, r2
 8002888:	4680      	mov	r8, r0
 800288a:	460c      	mov	r4, r1
 800288c:	469a      	mov	sl, r3
 800288e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002892:	d807      	bhi.n	80028a4 <_printf_i+0x28>
 8002894:	2f62      	cmp	r7, #98	@ 0x62
 8002896:	d80a      	bhi.n	80028ae <_printf_i+0x32>
 8002898:	2f00      	cmp	r7, #0
 800289a:	f000 80d1 	beq.w	8002a40 <_printf_i+0x1c4>
 800289e:	2f58      	cmp	r7, #88	@ 0x58
 80028a0:	f000 80b8 	beq.w	8002a14 <_printf_i+0x198>
 80028a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028ac:	e03a      	b.n	8002924 <_printf_i+0xa8>
 80028ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028b2:	2b15      	cmp	r3, #21
 80028b4:	d8f6      	bhi.n	80028a4 <_printf_i+0x28>
 80028b6:	a101      	add	r1, pc, #4	@ (adr r1, 80028bc <_printf_i+0x40>)
 80028b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028bc:	08002915 	.word	0x08002915
 80028c0:	08002929 	.word	0x08002929
 80028c4:	080028a5 	.word	0x080028a5
 80028c8:	080028a5 	.word	0x080028a5
 80028cc:	080028a5 	.word	0x080028a5
 80028d0:	080028a5 	.word	0x080028a5
 80028d4:	08002929 	.word	0x08002929
 80028d8:	080028a5 	.word	0x080028a5
 80028dc:	080028a5 	.word	0x080028a5
 80028e0:	080028a5 	.word	0x080028a5
 80028e4:	080028a5 	.word	0x080028a5
 80028e8:	08002a27 	.word	0x08002a27
 80028ec:	08002953 	.word	0x08002953
 80028f0:	080029e1 	.word	0x080029e1
 80028f4:	080028a5 	.word	0x080028a5
 80028f8:	080028a5 	.word	0x080028a5
 80028fc:	08002a49 	.word	0x08002a49
 8002900:	080028a5 	.word	0x080028a5
 8002904:	08002953 	.word	0x08002953
 8002908:	080028a5 	.word	0x080028a5
 800290c:	080028a5 	.word	0x080028a5
 8002910:	080029e9 	.word	0x080029e9
 8002914:	6833      	ldr	r3, [r6, #0]
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6032      	str	r2, [r6, #0]
 800291c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002924:	2301      	movs	r3, #1
 8002926:	e09c      	b.n	8002a62 <_printf_i+0x1e6>
 8002928:	6833      	ldr	r3, [r6, #0]
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	1d19      	adds	r1, r3, #4
 800292e:	6031      	str	r1, [r6, #0]
 8002930:	0606      	lsls	r6, r0, #24
 8002932:	d501      	bpl.n	8002938 <_printf_i+0xbc>
 8002934:	681d      	ldr	r5, [r3, #0]
 8002936:	e003      	b.n	8002940 <_printf_i+0xc4>
 8002938:	0645      	lsls	r5, r0, #25
 800293a:	d5fb      	bpl.n	8002934 <_printf_i+0xb8>
 800293c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002940:	2d00      	cmp	r5, #0
 8002942:	da03      	bge.n	800294c <_printf_i+0xd0>
 8002944:	232d      	movs	r3, #45	@ 0x2d
 8002946:	426d      	negs	r5, r5
 8002948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800294c:	4858      	ldr	r0, [pc, #352]	@ (8002ab0 <_printf_i+0x234>)
 800294e:	230a      	movs	r3, #10
 8002950:	e011      	b.n	8002976 <_printf_i+0xfa>
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	6833      	ldr	r3, [r6, #0]
 8002956:	0608      	lsls	r0, r1, #24
 8002958:	f853 5b04 	ldr.w	r5, [r3], #4
 800295c:	d402      	bmi.n	8002964 <_printf_i+0xe8>
 800295e:	0649      	lsls	r1, r1, #25
 8002960:	bf48      	it	mi
 8002962:	b2ad      	uxthmi	r5, r5
 8002964:	2f6f      	cmp	r7, #111	@ 0x6f
 8002966:	4852      	ldr	r0, [pc, #328]	@ (8002ab0 <_printf_i+0x234>)
 8002968:	6033      	str	r3, [r6, #0]
 800296a:	bf14      	ite	ne
 800296c:	230a      	movne	r3, #10
 800296e:	2308      	moveq	r3, #8
 8002970:	2100      	movs	r1, #0
 8002972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002976:	6866      	ldr	r6, [r4, #4]
 8002978:	60a6      	str	r6, [r4, #8]
 800297a:	2e00      	cmp	r6, #0
 800297c:	db05      	blt.n	800298a <_printf_i+0x10e>
 800297e:	6821      	ldr	r1, [r4, #0]
 8002980:	432e      	orrs	r6, r5
 8002982:	f021 0104 	bic.w	r1, r1, #4
 8002986:	6021      	str	r1, [r4, #0]
 8002988:	d04b      	beq.n	8002a22 <_printf_i+0x1a6>
 800298a:	4616      	mov	r6, r2
 800298c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002990:	fb03 5711 	mls	r7, r3, r1, r5
 8002994:	5dc7      	ldrb	r7, [r0, r7]
 8002996:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800299a:	462f      	mov	r7, r5
 800299c:	42bb      	cmp	r3, r7
 800299e:	460d      	mov	r5, r1
 80029a0:	d9f4      	bls.n	800298c <_printf_i+0x110>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d10b      	bne.n	80029be <_printf_i+0x142>
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	07df      	lsls	r7, r3, #31
 80029aa:	d508      	bpl.n	80029be <_printf_i+0x142>
 80029ac:	6923      	ldr	r3, [r4, #16]
 80029ae:	6861      	ldr	r1, [r4, #4]
 80029b0:	4299      	cmp	r1, r3
 80029b2:	bfde      	ittt	le
 80029b4:	2330      	movle	r3, #48	@ 0x30
 80029b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029be:	1b92      	subs	r2, r2, r6
 80029c0:	6122      	str	r2, [r4, #16]
 80029c2:	f8cd a000 	str.w	sl, [sp]
 80029c6:	464b      	mov	r3, r9
 80029c8:	aa03      	add	r2, sp, #12
 80029ca:	4621      	mov	r1, r4
 80029cc:	4640      	mov	r0, r8
 80029ce:	f7ff fee7 	bl	80027a0 <_printf_common>
 80029d2:	3001      	adds	r0, #1
 80029d4:	d14a      	bne.n	8002a6c <_printf_i+0x1f0>
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295
 80029da:	b004      	add	sp, #16
 80029dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	f043 0320 	orr.w	r3, r3, #32
 80029e6:	6023      	str	r3, [r4, #0]
 80029e8:	4832      	ldr	r0, [pc, #200]	@ (8002ab4 <_printf_i+0x238>)
 80029ea:	2778      	movs	r7, #120	@ 0x78
 80029ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	6831      	ldr	r1, [r6, #0]
 80029f4:	061f      	lsls	r7, r3, #24
 80029f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80029fa:	d402      	bmi.n	8002a02 <_printf_i+0x186>
 80029fc:	065f      	lsls	r7, r3, #25
 80029fe:	bf48      	it	mi
 8002a00:	b2ad      	uxthmi	r5, r5
 8002a02:	6031      	str	r1, [r6, #0]
 8002a04:	07d9      	lsls	r1, r3, #31
 8002a06:	bf44      	itt	mi
 8002a08:	f043 0320 	orrmi.w	r3, r3, #32
 8002a0c:	6023      	strmi	r3, [r4, #0]
 8002a0e:	b11d      	cbz	r5, 8002a18 <_printf_i+0x19c>
 8002a10:	2310      	movs	r3, #16
 8002a12:	e7ad      	b.n	8002970 <_printf_i+0xf4>
 8002a14:	4826      	ldr	r0, [pc, #152]	@ (8002ab0 <_printf_i+0x234>)
 8002a16:	e7e9      	b.n	80029ec <_printf_i+0x170>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	f023 0320 	bic.w	r3, r3, #32
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	e7f6      	b.n	8002a10 <_printf_i+0x194>
 8002a22:	4616      	mov	r6, r2
 8002a24:	e7bd      	b.n	80029a2 <_printf_i+0x126>
 8002a26:	6833      	ldr	r3, [r6, #0]
 8002a28:	6825      	ldr	r5, [r4, #0]
 8002a2a:	6961      	ldr	r1, [r4, #20]
 8002a2c:	1d18      	adds	r0, r3, #4
 8002a2e:	6030      	str	r0, [r6, #0]
 8002a30:	062e      	lsls	r6, r5, #24
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	d501      	bpl.n	8002a3a <_printf_i+0x1be>
 8002a36:	6019      	str	r1, [r3, #0]
 8002a38:	e002      	b.n	8002a40 <_printf_i+0x1c4>
 8002a3a:	0668      	lsls	r0, r5, #25
 8002a3c:	d5fb      	bpl.n	8002a36 <_printf_i+0x1ba>
 8002a3e:	8019      	strh	r1, [r3, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	6123      	str	r3, [r4, #16]
 8002a44:	4616      	mov	r6, r2
 8002a46:	e7bc      	b.n	80029c2 <_printf_i+0x146>
 8002a48:	6833      	ldr	r3, [r6, #0]
 8002a4a:	1d1a      	adds	r2, r3, #4
 8002a4c:	6032      	str	r2, [r6, #0]
 8002a4e:	681e      	ldr	r6, [r3, #0]
 8002a50:	6862      	ldr	r2, [r4, #4]
 8002a52:	2100      	movs	r1, #0
 8002a54:	4630      	mov	r0, r6
 8002a56:	f7fd fbbb 	bl	80001d0 <memchr>
 8002a5a:	b108      	cbz	r0, 8002a60 <_printf_i+0x1e4>
 8002a5c:	1b80      	subs	r0, r0, r6
 8002a5e:	6060      	str	r0, [r4, #4]
 8002a60:	6863      	ldr	r3, [r4, #4]
 8002a62:	6123      	str	r3, [r4, #16]
 8002a64:	2300      	movs	r3, #0
 8002a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a6a:	e7aa      	b.n	80029c2 <_printf_i+0x146>
 8002a6c:	6923      	ldr	r3, [r4, #16]
 8002a6e:	4632      	mov	r2, r6
 8002a70:	4649      	mov	r1, r9
 8002a72:	4640      	mov	r0, r8
 8002a74:	47d0      	blx	sl
 8002a76:	3001      	adds	r0, #1
 8002a78:	d0ad      	beq.n	80029d6 <_printf_i+0x15a>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	079b      	lsls	r3, r3, #30
 8002a7e:	d413      	bmi.n	8002aa8 <_printf_i+0x22c>
 8002a80:	68e0      	ldr	r0, [r4, #12]
 8002a82:	9b03      	ldr	r3, [sp, #12]
 8002a84:	4298      	cmp	r0, r3
 8002a86:	bfb8      	it	lt
 8002a88:	4618      	movlt	r0, r3
 8002a8a:	e7a6      	b.n	80029da <_printf_i+0x15e>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	4632      	mov	r2, r6
 8002a90:	4649      	mov	r1, r9
 8002a92:	4640      	mov	r0, r8
 8002a94:	47d0      	blx	sl
 8002a96:	3001      	adds	r0, #1
 8002a98:	d09d      	beq.n	80029d6 <_printf_i+0x15a>
 8002a9a:	3501      	adds	r5, #1
 8002a9c:	68e3      	ldr	r3, [r4, #12]
 8002a9e:	9903      	ldr	r1, [sp, #12]
 8002aa0:	1a5b      	subs	r3, r3, r1
 8002aa2:	42ab      	cmp	r3, r5
 8002aa4:	dcf2      	bgt.n	8002a8c <_printf_i+0x210>
 8002aa6:	e7eb      	b.n	8002a80 <_printf_i+0x204>
 8002aa8:	2500      	movs	r5, #0
 8002aaa:	f104 0619 	add.w	r6, r4, #25
 8002aae:	e7f5      	b.n	8002a9c <_printf_i+0x220>
 8002ab0:	08004db8 	.word	0x08004db8
 8002ab4:	08004dc9 	.word	0x08004dc9

08002ab8 <std>:
 8002ab8:	2300      	movs	r3, #0
 8002aba:	b510      	push	{r4, lr}
 8002abc:	4604      	mov	r4, r0
 8002abe:	e9c0 3300 	strd	r3, r3, [r0]
 8002ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ac6:	6083      	str	r3, [r0, #8]
 8002ac8:	8181      	strh	r1, [r0, #12]
 8002aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8002acc:	81c2      	strh	r2, [r0, #14]
 8002ace:	6183      	str	r3, [r0, #24]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	305c      	adds	r0, #92	@ 0x5c
 8002ad6:	f000 faa3 	bl	8003020 <memset>
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <std+0x58>)
 8002adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <std+0x5c>)
 8002ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <std+0x60>)
 8002ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <std+0x64>)
 8002ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <std+0x68>)
 8002aec:	6224      	str	r4, [r4, #32]
 8002aee:	429c      	cmp	r4, r3
 8002af0:	d006      	beq.n	8002b00 <std+0x48>
 8002af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002af6:	4294      	cmp	r4, r2
 8002af8:	d002      	beq.n	8002b00 <std+0x48>
 8002afa:	33d0      	adds	r3, #208	@ 0xd0
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d105      	bne.n	8002b0c <std+0x54>
 8002b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b08:	f000 baf4 	b.w	80030f4 <__retarget_lock_init_recursive>
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	bf00      	nop
 8002b10:	08002e71 	.word	0x08002e71
 8002b14:	08002e93 	.word	0x08002e93
 8002b18:	08002ecb 	.word	0x08002ecb
 8002b1c:	08002eef 	.word	0x08002eef
 8002b20:	200002e8 	.word	0x200002e8

08002b24 <stdio_exit_handler>:
 8002b24:	4a02      	ldr	r2, [pc, #8]	@ (8002b30 <stdio_exit_handler+0xc>)
 8002b26:	4903      	ldr	r1, [pc, #12]	@ (8002b34 <stdio_exit_handler+0x10>)
 8002b28:	4803      	ldr	r0, [pc, #12]	@ (8002b38 <stdio_exit_handler+0x14>)
 8002b2a:	f000 b869 	b.w	8002c00 <_fwalk_sglue>
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000
 8002b34:	080047ad 	.word	0x080047ad
 8002b38:	20000010 	.word	0x20000010

08002b3c <cleanup_stdio>:
 8002b3c:	6841      	ldr	r1, [r0, #4]
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <cleanup_stdio+0x34>)
 8002b40:	4299      	cmp	r1, r3
 8002b42:	b510      	push	{r4, lr}
 8002b44:	4604      	mov	r4, r0
 8002b46:	d001      	beq.n	8002b4c <cleanup_stdio+0x10>
 8002b48:	f001 fe30 	bl	80047ac <_fflush_r>
 8002b4c:	68a1      	ldr	r1, [r4, #8]
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <cleanup_stdio+0x38>)
 8002b50:	4299      	cmp	r1, r3
 8002b52:	d002      	beq.n	8002b5a <cleanup_stdio+0x1e>
 8002b54:	4620      	mov	r0, r4
 8002b56:	f001 fe29 	bl	80047ac <_fflush_r>
 8002b5a:	68e1      	ldr	r1, [r4, #12]
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <cleanup_stdio+0x3c>)
 8002b5e:	4299      	cmp	r1, r3
 8002b60:	d004      	beq.n	8002b6c <cleanup_stdio+0x30>
 8002b62:	4620      	mov	r0, r4
 8002b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b68:	f001 be20 	b.w	80047ac <_fflush_r>
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	bf00      	nop
 8002b70:	200002e8 	.word	0x200002e8
 8002b74:	20000350 	.word	0x20000350
 8002b78:	200003b8 	.word	0x200003b8

08002b7c <global_stdio_init.part.0>:
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <global_stdio_init.part.0+0x30>)
 8002b80:	4c0b      	ldr	r4, [pc, #44]	@ (8002bb0 <global_stdio_init.part.0+0x34>)
 8002b82:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <global_stdio_init.part.0+0x38>)
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	4620      	mov	r0, r4
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	f7ff ff94 	bl	8002ab8 <std>
 8002b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b94:	2201      	movs	r2, #1
 8002b96:	2109      	movs	r1, #9
 8002b98:	f7ff ff8e 	bl	8002ab8 <std>
 8002b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ba6:	2112      	movs	r1, #18
 8002ba8:	f7ff bf86 	b.w	8002ab8 <std>
 8002bac:	20000420 	.word	0x20000420
 8002bb0:	200002e8 	.word	0x200002e8
 8002bb4:	08002b25 	.word	0x08002b25

08002bb8 <__sfp_lock_acquire>:
 8002bb8:	4801      	ldr	r0, [pc, #4]	@ (8002bc0 <__sfp_lock_acquire+0x8>)
 8002bba:	f000 ba9c 	b.w	80030f6 <__retarget_lock_acquire_recursive>
 8002bbe:	bf00      	nop
 8002bc0:	20000429 	.word	0x20000429

08002bc4 <__sfp_lock_release>:
 8002bc4:	4801      	ldr	r0, [pc, #4]	@ (8002bcc <__sfp_lock_release+0x8>)
 8002bc6:	f000 ba97 	b.w	80030f8 <__retarget_lock_release_recursive>
 8002bca:	bf00      	nop
 8002bcc:	20000429 	.word	0x20000429

08002bd0 <__sinit>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	f7ff fff0 	bl	8002bb8 <__sfp_lock_acquire>
 8002bd8:	6a23      	ldr	r3, [r4, #32]
 8002bda:	b11b      	cbz	r3, 8002be4 <__sinit+0x14>
 8002bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be0:	f7ff bff0 	b.w	8002bc4 <__sfp_lock_release>
 8002be4:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <__sinit+0x28>)
 8002be6:	6223      	str	r3, [r4, #32]
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <__sinit+0x2c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f5      	bne.n	8002bdc <__sinit+0xc>
 8002bf0:	f7ff ffc4 	bl	8002b7c <global_stdio_init.part.0>
 8002bf4:	e7f2      	b.n	8002bdc <__sinit+0xc>
 8002bf6:	bf00      	nop
 8002bf8:	08002b3d 	.word	0x08002b3d
 8002bfc:	20000420 	.word	0x20000420

08002c00 <_fwalk_sglue>:
 8002c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c04:	4607      	mov	r7, r0
 8002c06:	4688      	mov	r8, r1
 8002c08:	4614      	mov	r4, r2
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c10:	f1b9 0901 	subs.w	r9, r9, #1
 8002c14:	d505      	bpl.n	8002c22 <_fwalk_sglue+0x22>
 8002c16:	6824      	ldr	r4, [r4, #0]
 8002c18:	2c00      	cmp	r4, #0
 8002c1a:	d1f7      	bne.n	8002c0c <_fwalk_sglue+0xc>
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c22:	89ab      	ldrh	r3, [r5, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d907      	bls.n	8002c38 <_fwalk_sglue+0x38>
 8002c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	d003      	beq.n	8002c38 <_fwalk_sglue+0x38>
 8002c30:	4629      	mov	r1, r5
 8002c32:	4638      	mov	r0, r7
 8002c34:	47c0      	blx	r8
 8002c36:	4306      	orrs	r6, r0
 8002c38:	3568      	adds	r5, #104	@ 0x68
 8002c3a:	e7e9      	b.n	8002c10 <_fwalk_sglue+0x10>

08002c3c <_puts_r>:
 8002c3c:	6a03      	ldr	r3, [r0, #32]
 8002c3e:	b570      	push	{r4, r5, r6, lr}
 8002c40:	6884      	ldr	r4, [r0, #8]
 8002c42:	4605      	mov	r5, r0
 8002c44:	460e      	mov	r6, r1
 8002c46:	b90b      	cbnz	r3, 8002c4c <_puts_r+0x10>
 8002c48:	f7ff ffc2 	bl	8002bd0 <__sinit>
 8002c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c4e:	07db      	lsls	r3, r3, #31
 8002c50:	d405      	bmi.n	8002c5e <_puts_r+0x22>
 8002c52:	89a3      	ldrh	r3, [r4, #12]
 8002c54:	0598      	lsls	r0, r3, #22
 8002c56:	d402      	bmi.n	8002c5e <_puts_r+0x22>
 8002c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c5a:	f000 fa4c 	bl	80030f6 <__retarget_lock_acquire_recursive>
 8002c5e:	89a3      	ldrh	r3, [r4, #12]
 8002c60:	0719      	lsls	r1, r3, #28
 8002c62:	d502      	bpl.n	8002c6a <_puts_r+0x2e>
 8002c64:	6923      	ldr	r3, [r4, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d135      	bne.n	8002cd6 <_puts_r+0x9a>
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 f981 	bl	8002f74 <__swsetup_r>
 8002c72:	b380      	cbz	r0, 8002cd6 <_puts_r+0x9a>
 8002c74:	f04f 35ff 	mov.w	r5, #4294967295
 8002c78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c7a:	07da      	lsls	r2, r3, #31
 8002c7c:	d405      	bmi.n	8002c8a <_puts_r+0x4e>
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	059b      	lsls	r3, r3, #22
 8002c82:	d402      	bmi.n	8002c8a <_puts_r+0x4e>
 8002c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c86:	f000 fa37 	bl	80030f8 <__retarget_lock_release_recursive>
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da04      	bge.n	8002c9c <_puts_r+0x60>
 8002c92:	69a2      	ldr	r2, [r4, #24]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dc17      	bgt.n	8002cc8 <_puts_r+0x8c>
 8002c98:	290a      	cmp	r1, #10
 8002c9a:	d015      	beq.n	8002cc8 <_puts_r+0x8c>
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	6022      	str	r2, [r4, #0]
 8002ca2:	7019      	strb	r1, [r3, #0]
 8002ca4:	68a3      	ldr	r3, [r4, #8]
 8002ca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60a3      	str	r3, [r4, #8]
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	d1ed      	bne.n	8002c8e <_puts_r+0x52>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da11      	bge.n	8002cda <_puts_r+0x9e>
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	210a      	movs	r1, #10
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f000 f91b 	bl	8002ef6 <__swbuf_r>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d0d7      	beq.n	8002c74 <_puts_r+0x38>
 8002cc4:	250a      	movs	r5, #10
 8002cc6:	e7d7      	b.n	8002c78 <_puts_r+0x3c>
 8002cc8:	4622      	mov	r2, r4
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 f913 	bl	8002ef6 <__swbuf_r>
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d1e7      	bne.n	8002ca4 <_puts_r+0x68>
 8002cd4:	e7ce      	b.n	8002c74 <_puts_r+0x38>
 8002cd6:	3e01      	subs	r6, #1
 8002cd8:	e7e4      	b.n	8002ca4 <_puts_r+0x68>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	6022      	str	r2, [r4, #0]
 8002ce0:	220a      	movs	r2, #10
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e7ee      	b.n	8002cc4 <_puts_r+0x88>
	...

08002ce8 <puts>:
 8002ce8:	4b02      	ldr	r3, [pc, #8]	@ (8002cf4 <puts+0xc>)
 8002cea:	4601      	mov	r1, r0
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	f7ff bfa5 	b.w	8002c3c <_puts_r>
 8002cf2:	bf00      	nop
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <setbuf>:
 8002cf8:	fab1 f281 	clz	r2, r1
 8002cfc:	0952      	lsrs	r2, r2, #5
 8002cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d02:	0052      	lsls	r2, r2, #1
 8002d04:	f000 b800 	b.w	8002d08 <setvbuf>

08002d08 <setvbuf>:
 8002d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	4b57      	ldr	r3, [pc, #348]	@ (8002e6c <setvbuf+0x164>)
 8002d10:	681f      	ldr	r7, [r3, #0]
 8002d12:	4604      	mov	r4, r0
 8002d14:	460e      	mov	r6, r1
 8002d16:	4690      	mov	r8, r2
 8002d18:	b127      	cbz	r7, 8002d24 <setvbuf+0x1c>
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	b913      	cbnz	r3, 8002d24 <setvbuf+0x1c>
 8002d1e:	4638      	mov	r0, r7
 8002d20:	f7ff ff56 	bl	8002bd0 <__sinit>
 8002d24:	f1b8 0f02 	cmp.w	r8, #2
 8002d28:	d006      	beq.n	8002d38 <setvbuf+0x30>
 8002d2a:	f1b8 0f01 	cmp.w	r8, #1
 8002d2e:	f200 809a 	bhi.w	8002e66 <setvbuf+0x15e>
 8002d32:	2d00      	cmp	r5, #0
 8002d34:	f2c0 8097 	blt.w	8002e66 <setvbuf+0x15e>
 8002d38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d3a:	07d9      	lsls	r1, r3, #31
 8002d3c:	d405      	bmi.n	8002d4a <setvbuf+0x42>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	059a      	lsls	r2, r3, #22
 8002d42:	d402      	bmi.n	8002d4a <setvbuf+0x42>
 8002d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d46:	f000 f9d6 	bl	80030f6 <__retarget_lock_acquire_recursive>
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	f001 fd2d 	bl	80047ac <_fflush_r>
 8002d52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d54:	b141      	cbz	r1, 8002d68 <setvbuf+0x60>
 8002d56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d5a:	4299      	cmp	r1, r3
 8002d5c:	d002      	beq.n	8002d64 <setvbuf+0x5c>
 8002d5e:	4638      	mov	r0, r7
 8002d60:	f001 f826 	bl	8003db0 <_free_r>
 8002d64:	2300      	movs	r3, #0
 8002d66:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61a3      	str	r3, [r4, #24]
 8002d6c:	6063      	str	r3, [r4, #4]
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	d503      	bpl.n	8002d7c <setvbuf+0x74>
 8002d74:	6921      	ldr	r1, [r4, #16]
 8002d76:	4638      	mov	r0, r7
 8002d78:	f001 f81a 	bl	8003db0 <_free_r>
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	f1b8 0f02 	cmp.w	r8, #2
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	d061      	beq.n	8002e52 <setvbuf+0x14a>
 8002d8e:	ab01      	add	r3, sp, #4
 8002d90:	466a      	mov	r2, sp
 8002d92:	4621      	mov	r1, r4
 8002d94:	4638      	mov	r0, r7
 8002d96:	f001 fd31 	bl	80047fc <__swhatbuf_r>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	4318      	orrs	r0, r3
 8002d9e:	81a0      	strh	r0, [r4, #12]
 8002da0:	bb2d      	cbnz	r5, 8002dee <setvbuf+0xe6>
 8002da2:	9d00      	ldr	r5, [sp, #0]
 8002da4:	4628      	mov	r0, r5
 8002da6:	f001 f84d 	bl	8003e44 <malloc>
 8002daa:	4606      	mov	r6, r0
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d152      	bne.n	8002e56 <setvbuf+0x14e>
 8002db0:	f8dd 9000 	ldr.w	r9, [sp]
 8002db4:	45a9      	cmp	r9, r5
 8002db6:	d140      	bne.n	8002e3a <setvbuf+0x132>
 8002db8:	f04f 35ff 	mov.w	r5, #4294967295
 8002dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc0:	f043 0202 	orr.w	r2, r3, #2
 8002dc4:	81a2      	strh	r2, [r4, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60a2      	str	r2, [r4, #8]
 8002dca:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002dce:	6022      	str	r2, [r4, #0]
 8002dd0:	6122      	str	r2, [r4, #16]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	6162      	str	r2, [r4, #20]
 8002dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002dd8:	07d6      	lsls	r6, r2, #31
 8002dda:	d404      	bmi.n	8002de6 <setvbuf+0xde>
 8002ddc:	0598      	lsls	r0, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <setvbuf+0xde>
 8002de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002de2:	f000 f989 	bl	80030f8 <__retarget_lock_release_recursive>
 8002de6:	4628      	mov	r0, r5
 8002de8:	b003      	add	sp, #12
 8002dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dee:	2e00      	cmp	r6, #0
 8002df0:	d0d8      	beq.n	8002da4 <setvbuf+0x9c>
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	b913      	cbnz	r3, 8002dfc <setvbuf+0xf4>
 8002df6:	4638      	mov	r0, r7
 8002df8:	f7ff feea 	bl	8002bd0 <__sinit>
 8002dfc:	f1b8 0f01 	cmp.w	r8, #1
 8002e00:	bf08      	it	eq
 8002e02:	89a3      	ldrheq	r3, [r4, #12]
 8002e04:	6026      	str	r6, [r4, #0]
 8002e06:	bf04      	itt	eq
 8002e08:	f043 0301 	orreq.w	r3, r3, #1
 8002e0c:	81a3      	strheq	r3, [r4, #12]
 8002e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e12:	f013 0208 	ands.w	r2, r3, #8
 8002e16:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002e1a:	d01e      	beq.n	8002e5a <setvbuf+0x152>
 8002e1c:	07d9      	lsls	r1, r3, #31
 8002e1e:	bf41      	itttt	mi
 8002e20:	2200      	movmi	r2, #0
 8002e22:	426d      	negmi	r5, r5
 8002e24:	60a2      	strmi	r2, [r4, #8]
 8002e26:	61a5      	strmi	r5, [r4, #24]
 8002e28:	bf58      	it	pl
 8002e2a:	60a5      	strpl	r5, [r4, #8]
 8002e2c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e2e:	07d2      	lsls	r2, r2, #31
 8002e30:	d401      	bmi.n	8002e36 <setvbuf+0x12e>
 8002e32:	059b      	lsls	r3, r3, #22
 8002e34:	d513      	bpl.n	8002e5e <setvbuf+0x156>
 8002e36:	2500      	movs	r5, #0
 8002e38:	e7d5      	b.n	8002de6 <setvbuf+0xde>
 8002e3a:	4648      	mov	r0, r9
 8002e3c:	f001 f802 	bl	8003e44 <malloc>
 8002e40:	4606      	mov	r6, r0
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d0b8      	beq.n	8002db8 <setvbuf+0xb0>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4c:	81a3      	strh	r3, [r4, #12]
 8002e4e:	464d      	mov	r5, r9
 8002e50:	e7cf      	b.n	8002df2 <setvbuf+0xea>
 8002e52:	2500      	movs	r5, #0
 8002e54:	e7b2      	b.n	8002dbc <setvbuf+0xb4>
 8002e56:	46a9      	mov	r9, r5
 8002e58:	e7f5      	b.n	8002e46 <setvbuf+0x13e>
 8002e5a:	60a2      	str	r2, [r4, #8]
 8002e5c:	e7e6      	b.n	8002e2c <setvbuf+0x124>
 8002e5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e60:	f000 f94a 	bl	80030f8 <__retarget_lock_release_recursive>
 8002e64:	e7e7      	b.n	8002e36 <setvbuf+0x12e>
 8002e66:	f04f 35ff 	mov.w	r5, #4294967295
 8002e6a:	e7bc      	b.n	8002de6 <setvbuf+0xde>
 8002e6c:	2000000c 	.word	0x2000000c

08002e70 <__sread>:
 8002e70:	b510      	push	{r4, lr}
 8002e72:	460c      	mov	r4, r1
 8002e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e78:	f000 f900 	bl	800307c <_read_r>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	bfab      	itete	ge
 8002e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e82:	89a3      	ldrhlt	r3, [r4, #12]
 8002e84:	181b      	addge	r3, r3, r0
 8002e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e8a:	bfac      	ite	ge
 8002e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e8e:	81a3      	strhlt	r3, [r4, #12]
 8002e90:	bd10      	pop	{r4, pc}

08002e92 <__swrite>:
 8002e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e96:	461f      	mov	r7, r3
 8002e98:	898b      	ldrh	r3, [r1, #12]
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	4605      	mov	r5, r0
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	d505      	bpl.n	8002eb0 <__swrite+0x1e>
 8002ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f000 f8d4 	bl	8003058 <_lseek_r>
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eba:	81a3      	strh	r3, [r4, #12]
 8002ebc:	4632      	mov	r2, r6
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec6:	f7fe bcab 	b.w	8001820 <_write_r>

08002eca <__sseek>:
 8002eca:	b510      	push	{r4, lr}
 8002ecc:	460c      	mov	r4, r1
 8002ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed2:	f000 f8c1 	bl	8003058 <_lseek_r>
 8002ed6:	1c43      	adds	r3, r0, #1
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	bf15      	itete	ne
 8002edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ee6:	81a3      	strheq	r3, [r4, #12]
 8002ee8:	bf18      	it	ne
 8002eea:	81a3      	strhne	r3, [r4, #12]
 8002eec:	bd10      	pop	{r4, pc}

08002eee <__sclose>:
 8002eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef2:	f000 b8a1 	b.w	8003038 <_close_r>

08002ef6 <__swbuf_r>:
 8002ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef8:	460e      	mov	r6, r1
 8002efa:	4614      	mov	r4, r2
 8002efc:	4605      	mov	r5, r0
 8002efe:	b118      	cbz	r0, 8002f08 <__swbuf_r+0x12>
 8002f00:	6a03      	ldr	r3, [r0, #32]
 8002f02:	b90b      	cbnz	r3, 8002f08 <__swbuf_r+0x12>
 8002f04:	f7ff fe64 	bl	8002bd0 <__sinit>
 8002f08:	69a3      	ldr	r3, [r4, #24]
 8002f0a:	60a3      	str	r3, [r4, #8]
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	071a      	lsls	r2, r3, #28
 8002f10:	d501      	bpl.n	8002f16 <__swbuf_r+0x20>
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	b943      	cbnz	r3, 8002f28 <__swbuf_r+0x32>
 8002f16:	4621      	mov	r1, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f000 f82b 	bl	8002f74 <__swsetup_r>
 8002f1e:	b118      	cbz	r0, 8002f28 <__swbuf_r+0x32>
 8002f20:	f04f 37ff 	mov.w	r7, #4294967295
 8002f24:	4638      	mov	r0, r7
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	6922      	ldr	r2, [r4, #16]
 8002f2c:	1a98      	subs	r0, r3, r2
 8002f2e:	6963      	ldr	r3, [r4, #20]
 8002f30:	b2f6      	uxtb	r6, r6
 8002f32:	4283      	cmp	r3, r0
 8002f34:	4637      	mov	r7, r6
 8002f36:	dc05      	bgt.n	8002f44 <__swbuf_r+0x4e>
 8002f38:	4621      	mov	r1, r4
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f001 fc36 	bl	80047ac <_fflush_r>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d1ed      	bne.n	8002f20 <__swbuf_r+0x2a>
 8002f44:	68a3      	ldr	r3, [r4, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	60a3      	str	r3, [r4, #8]
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	6022      	str	r2, [r4, #0]
 8002f50:	701e      	strb	r6, [r3, #0]
 8002f52:	6962      	ldr	r2, [r4, #20]
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d004      	beq.n	8002f64 <__swbuf_r+0x6e>
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	07db      	lsls	r3, r3, #31
 8002f5e:	d5e1      	bpl.n	8002f24 <__swbuf_r+0x2e>
 8002f60:	2e0a      	cmp	r6, #10
 8002f62:	d1df      	bne.n	8002f24 <__swbuf_r+0x2e>
 8002f64:	4621      	mov	r1, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	f001 fc20 	bl	80047ac <_fflush_r>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d0d9      	beq.n	8002f24 <__swbuf_r+0x2e>
 8002f70:	e7d6      	b.n	8002f20 <__swbuf_r+0x2a>
	...

08002f74 <__swsetup_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4b29      	ldr	r3, [pc, #164]	@ (800301c <__swsetup_r+0xa8>)
 8002f78:	4605      	mov	r5, r0
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	b118      	cbz	r0, 8002f88 <__swsetup_r+0x14>
 8002f80:	6a03      	ldr	r3, [r0, #32]
 8002f82:	b90b      	cbnz	r3, 8002f88 <__swsetup_r+0x14>
 8002f84:	f7ff fe24 	bl	8002bd0 <__sinit>
 8002f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f8c:	0719      	lsls	r1, r3, #28
 8002f8e:	d422      	bmi.n	8002fd6 <__swsetup_r+0x62>
 8002f90:	06da      	lsls	r2, r3, #27
 8002f92:	d407      	bmi.n	8002fa4 <__swsetup_r+0x30>
 8002f94:	2209      	movs	r2, #9
 8002f96:	602a      	str	r2, [r5, #0]
 8002f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa2:	e033      	b.n	800300c <__swsetup_r+0x98>
 8002fa4:	0758      	lsls	r0, r3, #29
 8002fa6:	d512      	bpl.n	8002fce <__swsetup_r+0x5a>
 8002fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002faa:	b141      	cbz	r1, 8002fbe <__swsetup_r+0x4a>
 8002fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d002      	beq.n	8002fba <__swsetup_r+0x46>
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 fefb 	bl	8003db0 <_free_r>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	6923      	ldr	r3, [r4, #16]
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	89a3      	ldrh	r3, [r4, #12]
 8002fd0:	f043 0308 	orr.w	r3, r3, #8
 8002fd4:	81a3      	strh	r3, [r4, #12]
 8002fd6:	6923      	ldr	r3, [r4, #16]
 8002fd8:	b94b      	cbnz	r3, 8002fee <__swsetup_r+0x7a>
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe4:	d003      	beq.n	8002fee <__swsetup_r+0x7a>
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f001 fc2d 	bl	8004848 <__smakebuf_r>
 8002fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ff2:	f013 0201 	ands.w	r2, r3, #1
 8002ff6:	d00a      	beq.n	800300e <__swsetup_r+0x9a>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60a2      	str	r2, [r4, #8]
 8002ffc:	6962      	ldr	r2, [r4, #20]
 8002ffe:	4252      	negs	r2, r2
 8003000:	61a2      	str	r2, [r4, #24]
 8003002:	6922      	ldr	r2, [r4, #16]
 8003004:	b942      	cbnz	r2, 8003018 <__swsetup_r+0xa4>
 8003006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800300a:	d1c5      	bne.n	8002f98 <__swsetup_r+0x24>
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	0799      	lsls	r1, r3, #30
 8003010:	bf58      	it	pl
 8003012:	6962      	ldrpl	r2, [r4, #20]
 8003014:	60a2      	str	r2, [r4, #8]
 8003016:	e7f4      	b.n	8003002 <__swsetup_r+0x8e>
 8003018:	2000      	movs	r0, #0
 800301a:	e7f7      	b.n	800300c <__swsetup_r+0x98>
 800301c:	2000000c 	.word	0x2000000c

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <_localeconv_r>:
 8003030:	4800      	ldr	r0, [pc, #0]	@ (8003034 <_localeconv_r+0x4>)
 8003032:	4770      	bx	lr
 8003034:	2000014c 	.word	0x2000014c

08003038 <_close_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4d06      	ldr	r5, [pc, #24]	@ (8003054 <_close_r+0x1c>)
 800303c:	2300      	movs	r3, #0
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	f7fe fff1 	bl	800202a <_close>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_close_r+0x1a>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_close_r+0x1a>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	20000424 	.word	0x20000424

08003058 <_lseek_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4d07      	ldr	r5, [pc, #28]	@ (8003078 <_lseek_r+0x20>)
 800305c:	4604      	mov	r4, r0
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	2200      	movs	r2, #0
 8003064:	602a      	str	r2, [r5, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff f806 	bl	8002078 <_lseek>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d102      	bne.n	8003076 <_lseek_r+0x1e>
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	b103      	cbz	r3, 8003076 <_lseek_r+0x1e>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	20000424 	.word	0x20000424

0800307c <_read_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4d07      	ldr	r5, [pc, #28]	@ (800309c <_read_r+0x20>)
 8003080:	4604      	mov	r4, r0
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	2200      	movs	r2, #0
 8003088:	602a      	str	r2, [r5, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f7fe ffb0 	bl	8001ff0 <_read>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_read_r+0x1e>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b103      	cbz	r3, 800309a <_read_r+0x1e>
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	20000424 	.word	0x20000424

080030a0 <__errno>:
 80030a0:	4b01      	ldr	r3, [pc, #4]	@ (80030a8 <__errno+0x8>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4d0d      	ldr	r5, [pc, #52]	@ (80030e4 <__libc_init_array+0x38>)
 80030b0:	4c0d      	ldr	r4, [pc, #52]	@ (80030e8 <__libc_init_array+0x3c>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	2600      	movs	r6, #0
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	4d0b      	ldr	r5, [pc, #44]	@ (80030ec <__libc_init_array+0x40>)
 80030be:	4c0c      	ldr	r4, [pc, #48]	@ (80030f0 <__libc_init_array+0x44>)
 80030c0:	f001 fe3c 	bl	8004d3c <_init>
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	2600      	movs	r6, #0
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	08005124 	.word	0x08005124
 80030e8:	08005124 	.word	0x08005124
 80030ec:	08005124 	.word	0x08005124
 80030f0:	08005128 	.word	0x08005128

080030f4 <__retarget_lock_init_recursive>:
 80030f4:	4770      	bx	lr

080030f6 <__retarget_lock_acquire_recursive>:
 80030f6:	4770      	bx	lr

080030f8 <__retarget_lock_release_recursive>:
 80030f8:	4770      	bx	lr

080030fa <quorem>:
 80030fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030fe:	6903      	ldr	r3, [r0, #16]
 8003100:	690c      	ldr	r4, [r1, #16]
 8003102:	42a3      	cmp	r3, r4
 8003104:	4607      	mov	r7, r0
 8003106:	db7e      	blt.n	8003206 <quorem+0x10c>
 8003108:	3c01      	subs	r4, #1
 800310a:	f101 0814 	add.w	r8, r1, #20
 800310e:	00a3      	lsls	r3, r4, #2
 8003110:	f100 0514 	add.w	r5, r0, #20
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003124:	3301      	adds	r3, #1
 8003126:	429a      	cmp	r2, r3
 8003128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800312c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003130:	d32e      	bcc.n	8003190 <quorem+0x96>
 8003132:	f04f 0a00 	mov.w	sl, #0
 8003136:	46c4      	mov	ip, r8
 8003138:	46ae      	mov	lr, r5
 800313a:	46d3      	mov	fp, sl
 800313c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003140:	b298      	uxth	r0, r3
 8003142:	fb06 a000 	mla	r0, r6, r0, sl
 8003146:	0c02      	lsrs	r2, r0, #16
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	fb06 2303 	mla	r3, r6, r3, r2
 800314e:	f8de 2000 	ldr.w	r2, [lr]
 8003152:	b280      	uxth	r0, r0
 8003154:	b292      	uxth	r2, r2
 8003156:	1a12      	subs	r2, r2, r0
 8003158:	445a      	add	r2, fp
 800315a:	f8de 0000 	ldr.w	r0, [lr]
 800315e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003162:	b29b      	uxth	r3, r3
 8003164:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003168:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800316c:	b292      	uxth	r2, r2
 800316e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003172:	45e1      	cmp	r9, ip
 8003174:	f84e 2b04 	str.w	r2, [lr], #4
 8003178:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800317c:	d2de      	bcs.n	800313c <quorem+0x42>
 800317e:	9b00      	ldr	r3, [sp, #0]
 8003180:	58eb      	ldr	r3, [r5, r3]
 8003182:	b92b      	cbnz	r3, 8003190 <quorem+0x96>
 8003184:	9b01      	ldr	r3, [sp, #4]
 8003186:	3b04      	subs	r3, #4
 8003188:	429d      	cmp	r5, r3
 800318a:	461a      	mov	r2, r3
 800318c:	d32f      	bcc.n	80031ee <quorem+0xf4>
 800318e:	613c      	str	r4, [r7, #16]
 8003190:	4638      	mov	r0, r7
 8003192:	f001 f97f 	bl	8004494 <__mcmp>
 8003196:	2800      	cmp	r0, #0
 8003198:	db25      	blt.n	80031e6 <quorem+0xec>
 800319a:	4629      	mov	r1, r5
 800319c:	2000      	movs	r0, #0
 800319e:	f858 2b04 	ldr.w	r2, [r8], #4
 80031a2:	f8d1 c000 	ldr.w	ip, [r1]
 80031a6:	fa1f fe82 	uxth.w	lr, r2
 80031aa:	fa1f f38c 	uxth.w	r3, ip
 80031ae:	eba3 030e 	sub.w	r3, r3, lr
 80031b2:	4403      	add	r3, r0
 80031b4:	0c12      	lsrs	r2, r2, #16
 80031b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80031ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80031be:	b29b      	uxth	r3, r3
 80031c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031c4:	45c1      	cmp	r9, r8
 80031c6:	f841 3b04 	str.w	r3, [r1], #4
 80031ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80031ce:	d2e6      	bcs.n	800319e <quorem+0xa4>
 80031d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031d8:	b922      	cbnz	r2, 80031e4 <quorem+0xea>
 80031da:	3b04      	subs	r3, #4
 80031dc:	429d      	cmp	r5, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	d30b      	bcc.n	80031fa <quorem+0x100>
 80031e2:	613c      	str	r4, [r7, #16]
 80031e4:	3601      	adds	r6, #1
 80031e6:	4630      	mov	r0, r6
 80031e8:	b003      	add	sp, #12
 80031ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	3b04      	subs	r3, #4
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d1cb      	bne.n	800318e <quorem+0x94>
 80031f6:	3c01      	subs	r4, #1
 80031f8:	e7c6      	b.n	8003188 <quorem+0x8e>
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	3b04      	subs	r3, #4
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d1ef      	bne.n	80031e2 <quorem+0xe8>
 8003202:	3c01      	subs	r4, #1
 8003204:	e7ea      	b.n	80031dc <quorem+0xe2>
 8003206:	2000      	movs	r0, #0
 8003208:	e7ee      	b.n	80031e8 <quorem+0xee>
 800320a:	0000      	movs	r0, r0
 800320c:	0000      	movs	r0, r0
	...

08003210 <_dtoa_r>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	69c7      	ldr	r7, [r0, #28]
 8003216:	b097      	sub	sp, #92	@ 0x5c
 8003218:	ed8d 0b04 	vstr	d0, [sp, #16]
 800321c:	ec55 4b10 	vmov	r4, r5, d0
 8003220:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003222:	9107      	str	r1, [sp, #28]
 8003224:	4681      	mov	r9, r0
 8003226:	920c      	str	r2, [sp, #48]	@ 0x30
 8003228:	9311      	str	r3, [sp, #68]	@ 0x44
 800322a:	b97f      	cbnz	r7, 800324c <_dtoa_r+0x3c>
 800322c:	2010      	movs	r0, #16
 800322e:	f000 fe09 	bl	8003e44 <malloc>
 8003232:	4602      	mov	r2, r0
 8003234:	f8c9 001c 	str.w	r0, [r9, #28]
 8003238:	b920      	cbnz	r0, 8003244 <_dtoa_r+0x34>
 800323a:	4ba9      	ldr	r3, [pc, #676]	@ (80034e0 <_dtoa_r+0x2d0>)
 800323c:	21ef      	movs	r1, #239	@ 0xef
 800323e:	48a9      	ldr	r0, [pc, #676]	@ (80034e4 <_dtoa_r+0x2d4>)
 8003240:	f001 fb7e 	bl	8004940 <__assert_func>
 8003244:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003248:	6007      	str	r7, [r0, #0]
 800324a:	60c7      	str	r7, [r0, #12]
 800324c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	b159      	cbz	r1, 800326c <_dtoa_r+0x5c>
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	604a      	str	r2, [r1, #4]
 8003258:	2301      	movs	r3, #1
 800325a:	4093      	lsls	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
 800325e:	4648      	mov	r0, r9
 8003260:	f000 fee6 	bl	8004030 <_Bfree>
 8003264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	1e2b      	subs	r3, r5, #0
 800326e:	bfb9      	ittee	lt
 8003270:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003274:	9305      	strlt	r3, [sp, #20]
 8003276:	2300      	movge	r3, #0
 8003278:	6033      	strge	r3, [r6, #0]
 800327a:	9f05      	ldr	r7, [sp, #20]
 800327c:	4b9a      	ldr	r3, [pc, #616]	@ (80034e8 <_dtoa_r+0x2d8>)
 800327e:	bfbc      	itt	lt
 8003280:	2201      	movlt	r2, #1
 8003282:	6032      	strlt	r2, [r6, #0]
 8003284:	43bb      	bics	r3, r7
 8003286:	d112      	bne.n	80032ae <_dtoa_r+0x9e>
 8003288:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800328a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003294:	4323      	orrs	r3, r4
 8003296:	f000 855a 	beq.w	8003d4e <_dtoa_r+0xb3e>
 800329a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800329c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80034fc <_dtoa_r+0x2ec>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 855c 	beq.w	8003d5e <_dtoa_r+0xb4e>
 80032a6:	f10a 0303 	add.w	r3, sl, #3
 80032aa:	f000 bd56 	b.w	8003d5a <_dtoa_r+0xb4a>
 80032ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80032b2:	2200      	movs	r2, #0
 80032b4:	ec51 0b17 	vmov	r0, r1, d7
 80032b8:	2300      	movs	r3, #0
 80032ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80032be:	f7fd fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80032c2:	4680      	mov	r8, r0
 80032c4:	b158      	cbz	r0, 80032de <_dtoa_r+0xce>
 80032c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80032c8:	2301      	movs	r3, #1
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032ce:	b113      	cbz	r3, 80032d6 <_dtoa_r+0xc6>
 80032d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80032d2:	4b86      	ldr	r3, [pc, #536]	@ (80034ec <_dtoa_r+0x2dc>)
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003500 <_dtoa_r+0x2f0>
 80032da:	f000 bd40 	b.w	8003d5e <_dtoa_r+0xb4e>
 80032de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80032e2:	aa14      	add	r2, sp, #80	@ 0x50
 80032e4:	a915      	add	r1, sp, #84	@ 0x54
 80032e6:	4648      	mov	r0, r9
 80032e8:	f001 f984 	bl	80045f4 <__d2b>
 80032ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80032f0:	9002      	str	r0, [sp, #8]
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d078      	beq.n	80033e8 <_dtoa_r+0x1d8>
 80032f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80032f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80032fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003304:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003308:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800330c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003310:	4619      	mov	r1, r3
 8003312:	2200      	movs	r2, #0
 8003314:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <_dtoa_r+0x2e0>)
 8003316:	f7fc ffb7 	bl	8000288 <__aeabi_dsub>
 800331a:	a36b      	add	r3, pc, #428	@ (adr r3, 80034c8 <_dtoa_r+0x2b8>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fd f96a 	bl	80005f8 <__aeabi_dmul>
 8003324:	a36a      	add	r3, pc, #424	@ (adr r3, 80034d0 <_dtoa_r+0x2c0>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fc ffaf 	bl	800028c <__adddf3>
 800332e:	4604      	mov	r4, r0
 8003330:	4630      	mov	r0, r6
 8003332:	460d      	mov	r5, r1
 8003334:	f7fd f8f6 	bl	8000524 <__aeabi_i2d>
 8003338:	a367      	add	r3, pc, #412	@ (adr r3, 80034d8 <_dtoa_r+0x2c8>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd f95b 	bl	80005f8 <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f7fc ff9f 	bl	800028c <__adddf3>
 800334e:	4604      	mov	r4, r0
 8003350:	460d      	mov	r5, r1
 8003352:	f7fd fc01 	bl	8000b58 <__aeabi_d2iz>
 8003356:	2200      	movs	r2, #0
 8003358:	4607      	mov	r7, r0
 800335a:	2300      	movs	r3, #0
 800335c:	4620      	mov	r0, r4
 800335e:	4629      	mov	r1, r5
 8003360:	f7fd fbbc 	bl	8000adc <__aeabi_dcmplt>
 8003364:	b140      	cbz	r0, 8003378 <_dtoa_r+0x168>
 8003366:	4638      	mov	r0, r7
 8003368:	f7fd f8dc 	bl	8000524 <__aeabi_i2d>
 800336c:	4622      	mov	r2, r4
 800336e:	462b      	mov	r3, r5
 8003370:	f7fd fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003374:	b900      	cbnz	r0, 8003378 <_dtoa_r+0x168>
 8003376:	3f01      	subs	r7, #1
 8003378:	2f16      	cmp	r7, #22
 800337a:	d852      	bhi.n	8003422 <_dtoa_r+0x212>
 800337c:	4b5d      	ldr	r3, [pc, #372]	@ (80034f4 <_dtoa_r+0x2e4>)
 800337e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800338a:	f7fd fba7 	bl	8000adc <__aeabi_dcmplt>
 800338e:	2800      	cmp	r0, #0
 8003390:	d049      	beq.n	8003426 <_dtoa_r+0x216>
 8003392:	3f01      	subs	r7, #1
 8003394:	2300      	movs	r3, #0
 8003396:	9310      	str	r3, [sp, #64]	@ 0x40
 8003398:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800339a:	1b9b      	subs	r3, r3, r6
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	bf45      	ittet	mi
 80033a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80033a4:	9300      	strmi	r3, [sp, #0]
 80033a6:	2300      	movpl	r3, #0
 80033a8:	2300      	movmi	r3, #0
 80033aa:	9206      	str	r2, [sp, #24]
 80033ac:	bf54      	ite	pl
 80033ae:	9300      	strpl	r3, [sp, #0]
 80033b0:	9306      	strmi	r3, [sp, #24]
 80033b2:	2f00      	cmp	r7, #0
 80033b4:	db39      	blt.n	800342a <_dtoa_r+0x21a>
 80033b6:	9b06      	ldr	r3, [sp, #24]
 80033b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80033ba:	443b      	add	r3, r7
 80033bc:	9306      	str	r3, [sp, #24]
 80033be:	2300      	movs	r3, #0
 80033c0:	9308      	str	r3, [sp, #32]
 80033c2:	9b07      	ldr	r3, [sp, #28]
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	d863      	bhi.n	8003490 <_dtoa_r+0x280>
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	bfc4      	itt	gt
 80033cc:	3b04      	subgt	r3, #4
 80033ce:	9307      	strgt	r3, [sp, #28]
 80033d0:	9b07      	ldr	r3, [sp, #28]
 80033d2:	f1a3 0302 	sub.w	r3, r3, #2
 80033d6:	bfcc      	ite	gt
 80033d8:	2400      	movgt	r4, #0
 80033da:	2401      	movle	r4, #1
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d863      	bhi.n	80034a8 <_dtoa_r+0x298>
 80033e0:	e8df f003 	tbb	[pc, r3]
 80033e4:	2b375452 	.word	0x2b375452
 80033e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80033ec:	441e      	add	r6, r3
 80033ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	bfc1      	itttt	gt
 80033f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80033fa:	409f      	lslgt	r7, r3
 80033fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003400:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003404:	bfd6      	itet	le
 8003406:	f1c3 0320 	rsble	r3, r3, #32
 800340a:	ea47 0003 	orrgt.w	r0, r7, r3
 800340e:	fa04 f003 	lslle.w	r0, r4, r3
 8003412:	f7fd f877 	bl	8000504 <__aeabi_ui2d>
 8003416:	2201      	movs	r2, #1
 8003418:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800341c:	3e01      	subs	r6, #1
 800341e:	9212      	str	r2, [sp, #72]	@ 0x48
 8003420:	e776      	b.n	8003310 <_dtoa_r+0x100>
 8003422:	2301      	movs	r3, #1
 8003424:	e7b7      	b.n	8003396 <_dtoa_r+0x186>
 8003426:	9010      	str	r0, [sp, #64]	@ 0x40
 8003428:	e7b6      	b.n	8003398 <_dtoa_r+0x188>
 800342a:	9b00      	ldr	r3, [sp, #0]
 800342c:	1bdb      	subs	r3, r3, r7
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	427b      	negs	r3, r7
 8003432:	9308      	str	r3, [sp, #32]
 8003434:	2300      	movs	r3, #0
 8003436:	930d      	str	r3, [sp, #52]	@ 0x34
 8003438:	e7c3      	b.n	80033c2 <_dtoa_r+0x1b2>
 800343a:	2301      	movs	r3, #1
 800343c:	9309      	str	r3, [sp, #36]	@ 0x24
 800343e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003440:	eb07 0b03 	add.w	fp, r7, r3
 8003444:	f10b 0301 	add.w	r3, fp, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	bfb8      	it	lt
 800344e:	2301      	movlt	r3, #1
 8003450:	e006      	b.n	8003460 <_dtoa_r+0x250>
 8003452:	2301      	movs	r3, #1
 8003454:	9309      	str	r3, [sp, #36]	@ 0x24
 8003456:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003458:	2b00      	cmp	r3, #0
 800345a:	dd28      	ble.n	80034ae <_dtoa_r+0x29e>
 800345c:	469b      	mov	fp, r3
 800345e:	9303      	str	r3, [sp, #12]
 8003460:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003464:	2100      	movs	r1, #0
 8003466:	2204      	movs	r2, #4
 8003468:	f102 0514 	add.w	r5, r2, #20
 800346c:	429d      	cmp	r5, r3
 800346e:	d926      	bls.n	80034be <_dtoa_r+0x2ae>
 8003470:	6041      	str	r1, [r0, #4]
 8003472:	4648      	mov	r0, r9
 8003474:	f000 fd9c 	bl	8003fb0 <_Balloc>
 8003478:	4682      	mov	sl, r0
 800347a:	2800      	cmp	r0, #0
 800347c:	d142      	bne.n	8003504 <_dtoa_r+0x2f4>
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <_dtoa_r+0x2e8>)
 8003480:	4602      	mov	r2, r0
 8003482:	f240 11af 	movw	r1, #431	@ 0x1af
 8003486:	e6da      	b.n	800323e <_dtoa_r+0x2e>
 8003488:	2300      	movs	r3, #0
 800348a:	e7e3      	b.n	8003454 <_dtoa_r+0x244>
 800348c:	2300      	movs	r3, #0
 800348e:	e7d5      	b.n	800343c <_dtoa_r+0x22c>
 8003490:	2401      	movs	r4, #1
 8003492:	2300      	movs	r3, #0
 8003494:	9307      	str	r3, [sp, #28]
 8003496:	9409      	str	r4, [sp, #36]	@ 0x24
 8003498:	f04f 3bff 	mov.w	fp, #4294967295
 800349c:	2200      	movs	r2, #0
 800349e:	f8cd b00c 	str.w	fp, [sp, #12]
 80034a2:	2312      	movs	r3, #18
 80034a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80034a6:	e7db      	b.n	8003460 <_dtoa_r+0x250>
 80034a8:	2301      	movs	r3, #1
 80034aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ac:	e7f4      	b.n	8003498 <_dtoa_r+0x288>
 80034ae:	f04f 0b01 	mov.w	fp, #1
 80034b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80034b6:	465b      	mov	r3, fp
 80034b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80034bc:	e7d0      	b.n	8003460 <_dtoa_r+0x250>
 80034be:	3101      	adds	r1, #1
 80034c0:	0052      	lsls	r2, r2, #1
 80034c2:	e7d1      	b.n	8003468 <_dtoa_r+0x258>
 80034c4:	f3af 8000 	nop.w
 80034c8:	636f4361 	.word	0x636f4361
 80034cc:	3fd287a7 	.word	0x3fd287a7
 80034d0:	8b60c8b3 	.word	0x8b60c8b3
 80034d4:	3fc68a28 	.word	0x3fc68a28
 80034d8:	509f79fb 	.word	0x509f79fb
 80034dc:	3fd34413 	.word	0x3fd34413
 80034e0:	08004de7 	.word	0x08004de7
 80034e4:	08004dfe 	.word	0x08004dfe
 80034e8:	7ff00000 	.word	0x7ff00000
 80034ec:	08004db7 	.word	0x08004db7
 80034f0:	3ff80000 	.word	0x3ff80000
 80034f4:	08004f50 	.word	0x08004f50
 80034f8:	08004e56 	.word	0x08004e56
 80034fc:	08004de3 	.word	0x08004de3
 8003500:	08004db6 	.word	0x08004db6
 8003504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003508:	6018      	str	r0, [r3, #0]
 800350a:	9b03      	ldr	r3, [sp, #12]
 800350c:	2b0e      	cmp	r3, #14
 800350e:	f200 80a1 	bhi.w	8003654 <_dtoa_r+0x444>
 8003512:	2c00      	cmp	r4, #0
 8003514:	f000 809e 	beq.w	8003654 <_dtoa_r+0x444>
 8003518:	2f00      	cmp	r7, #0
 800351a:	dd33      	ble.n	8003584 <_dtoa_r+0x374>
 800351c:	4b9c      	ldr	r3, [pc, #624]	@ (8003790 <_dtoa_r+0x580>)
 800351e:	f007 020f 	and.w	r2, r7, #15
 8003522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003526:	ed93 7b00 	vldr	d7, [r3]
 800352a:	05f8      	lsls	r0, r7, #23
 800352c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003534:	d516      	bpl.n	8003564 <_dtoa_r+0x354>
 8003536:	4b97      	ldr	r3, [pc, #604]	@ (8003794 <_dtoa_r+0x584>)
 8003538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800353c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003540:	f7fd f984 	bl	800084c <__aeabi_ddiv>
 8003544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003548:	f004 040f 	and.w	r4, r4, #15
 800354c:	2603      	movs	r6, #3
 800354e:	4d91      	ldr	r5, [pc, #580]	@ (8003794 <_dtoa_r+0x584>)
 8003550:	b954      	cbnz	r4, 8003568 <_dtoa_r+0x358>
 8003552:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800355a:	f7fd f977 	bl	800084c <__aeabi_ddiv>
 800355e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003562:	e028      	b.n	80035b6 <_dtoa_r+0x3a6>
 8003564:	2602      	movs	r6, #2
 8003566:	e7f2      	b.n	800354e <_dtoa_r+0x33e>
 8003568:	07e1      	lsls	r1, r4, #31
 800356a:	d508      	bpl.n	800357e <_dtoa_r+0x36e>
 800356c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003574:	f7fd f840 	bl	80005f8 <__aeabi_dmul>
 8003578:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800357c:	3601      	adds	r6, #1
 800357e:	1064      	asrs	r4, r4, #1
 8003580:	3508      	adds	r5, #8
 8003582:	e7e5      	b.n	8003550 <_dtoa_r+0x340>
 8003584:	f000 80af 	beq.w	80036e6 <_dtoa_r+0x4d6>
 8003588:	427c      	negs	r4, r7
 800358a:	4b81      	ldr	r3, [pc, #516]	@ (8003790 <_dtoa_r+0x580>)
 800358c:	4d81      	ldr	r5, [pc, #516]	@ (8003794 <_dtoa_r+0x584>)
 800358e:	f004 020f 	and.w	r2, r4, #15
 8003592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800359e:	f7fd f82b 	bl	80005f8 <__aeabi_dmul>
 80035a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035a6:	1124      	asrs	r4, r4, #4
 80035a8:	2300      	movs	r3, #0
 80035aa:	2602      	movs	r6, #2
 80035ac:	2c00      	cmp	r4, #0
 80035ae:	f040 808f 	bne.w	80036d0 <_dtoa_r+0x4c0>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1d3      	bne.n	800355e <_dtoa_r+0x34e>
 80035b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80035b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8094 	beq.w	80036ea <_dtoa_r+0x4da>
 80035c2:	4b75      	ldr	r3, [pc, #468]	@ (8003798 <_dtoa_r+0x588>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	4620      	mov	r0, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	f7fd fa87 	bl	8000adc <__aeabi_dcmplt>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	f000 808b 	beq.w	80036ea <_dtoa_r+0x4da>
 80035d4:	9b03      	ldr	r3, [sp, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8087 	beq.w	80036ea <_dtoa_r+0x4da>
 80035dc:	f1bb 0f00 	cmp.w	fp, #0
 80035e0:	dd34      	ble.n	800364c <_dtoa_r+0x43c>
 80035e2:	4620      	mov	r0, r4
 80035e4:	4b6d      	ldr	r3, [pc, #436]	@ (800379c <_dtoa_r+0x58c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fd f805 	bl	80005f8 <__aeabi_dmul>
 80035ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80035f6:	3601      	adds	r6, #1
 80035f8:	465c      	mov	r4, fp
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7fc ff92 	bl	8000524 <__aeabi_i2d>
 8003600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003604:	f7fc fff8 	bl	80005f8 <__aeabi_dmul>
 8003608:	4b65      	ldr	r3, [pc, #404]	@ (80037a0 <_dtoa_r+0x590>)
 800360a:	2200      	movs	r2, #0
 800360c:	f7fc fe3e 	bl	800028c <__adddf3>
 8003610:	4605      	mov	r5, r0
 8003612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003616:	2c00      	cmp	r4, #0
 8003618:	d16a      	bne.n	80036f0 <_dtoa_r+0x4e0>
 800361a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800361e:	4b61      	ldr	r3, [pc, #388]	@ (80037a4 <_dtoa_r+0x594>)
 8003620:	2200      	movs	r2, #0
 8003622:	f7fc fe31 	bl	8000288 <__aeabi_dsub>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800362e:	462a      	mov	r2, r5
 8003630:	4633      	mov	r3, r6
 8003632:	f7fd fa71 	bl	8000b18 <__aeabi_dcmpgt>
 8003636:	2800      	cmp	r0, #0
 8003638:	f040 8298 	bne.w	8003b6c <_dtoa_r+0x95c>
 800363c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003640:	462a      	mov	r2, r5
 8003642:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003646:	f7fd fa49 	bl	8000adc <__aeabi_dcmplt>
 800364a:	bb38      	cbnz	r0, 800369c <_dtoa_r+0x48c>
 800364c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003650:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003654:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003656:	2b00      	cmp	r3, #0
 8003658:	f2c0 8157 	blt.w	800390a <_dtoa_r+0x6fa>
 800365c:	2f0e      	cmp	r7, #14
 800365e:	f300 8154 	bgt.w	800390a <_dtoa_r+0x6fa>
 8003662:	4b4b      	ldr	r3, [pc, #300]	@ (8003790 <_dtoa_r+0x580>)
 8003664:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003668:	ed93 7b00 	vldr	d7, [r3]
 800366c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800366e:	2b00      	cmp	r3, #0
 8003670:	ed8d 7b00 	vstr	d7, [sp]
 8003674:	f280 80e5 	bge.w	8003842 <_dtoa_r+0x632>
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f300 80e1 	bgt.w	8003842 <_dtoa_r+0x632>
 8003680:	d10c      	bne.n	800369c <_dtoa_r+0x48c>
 8003682:	4b48      	ldr	r3, [pc, #288]	@ (80037a4 <_dtoa_r+0x594>)
 8003684:	2200      	movs	r2, #0
 8003686:	ec51 0b17 	vmov	r0, r1, d7
 800368a:	f7fc ffb5 	bl	80005f8 <__aeabi_dmul>
 800368e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003692:	f7fd fa37 	bl	8000b04 <__aeabi_dcmpge>
 8003696:	2800      	cmp	r0, #0
 8003698:	f000 8266 	beq.w	8003b68 <_dtoa_r+0x958>
 800369c:	2400      	movs	r4, #0
 800369e:	4625      	mov	r5, r4
 80036a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80036a2:	4656      	mov	r6, sl
 80036a4:	ea6f 0803 	mvn.w	r8, r3
 80036a8:	2700      	movs	r7, #0
 80036aa:	4621      	mov	r1, r4
 80036ac:	4648      	mov	r0, r9
 80036ae:	f000 fcbf 	bl	8004030 <_Bfree>
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	f000 80bd 	beq.w	8003832 <_dtoa_r+0x622>
 80036b8:	b12f      	cbz	r7, 80036c6 <_dtoa_r+0x4b6>
 80036ba:	42af      	cmp	r7, r5
 80036bc:	d003      	beq.n	80036c6 <_dtoa_r+0x4b6>
 80036be:	4639      	mov	r1, r7
 80036c0:	4648      	mov	r0, r9
 80036c2:	f000 fcb5 	bl	8004030 <_Bfree>
 80036c6:	4629      	mov	r1, r5
 80036c8:	4648      	mov	r0, r9
 80036ca:	f000 fcb1 	bl	8004030 <_Bfree>
 80036ce:	e0b0      	b.n	8003832 <_dtoa_r+0x622>
 80036d0:	07e2      	lsls	r2, r4, #31
 80036d2:	d505      	bpl.n	80036e0 <_dtoa_r+0x4d0>
 80036d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80036d8:	f7fc ff8e 	bl	80005f8 <__aeabi_dmul>
 80036dc:	3601      	adds	r6, #1
 80036de:	2301      	movs	r3, #1
 80036e0:	1064      	asrs	r4, r4, #1
 80036e2:	3508      	adds	r5, #8
 80036e4:	e762      	b.n	80035ac <_dtoa_r+0x39c>
 80036e6:	2602      	movs	r6, #2
 80036e8:	e765      	b.n	80035b6 <_dtoa_r+0x3a6>
 80036ea:	9c03      	ldr	r4, [sp, #12]
 80036ec:	46b8      	mov	r8, r7
 80036ee:	e784      	b.n	80035fa <_dtoa_r+0x3ea>
 80036f0:	4b27      	ldr	r3, [pc, #156]	@ (8003790 <_dtoa_r+0x580>)
 80036f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80036f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80036fc:	4454      	add	r4, sl
 80036fe:	2900      	cmp	r1, #0
 8003700:	d054      	beq.n	80037ac <_dtoa_r+0x59c>
 8003702:	4929      	ldr	r1, [pc, #164]	@ (80037a8 <_dtoa_r+0x598>)
 8003704:	2000      	movs	r0, #0
 8003706:	f7fd f8a1 	bl	800084c <__aeabi_ddiv>
 800370a:	4633      	mov	r3, r6
 800370c:	462a      	mov	r2, r5
 800370e:	f7fc fdbb 	bl	8000288 <__aeabi_dsub>
 8003712:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003716:	4656      	mov	r6, sl
 8003718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800371c:	f7fd fa1c 	bl	8000b58 <__aeabi_d2iz>
 8003720:	4605      	mov	r5, r0
 8003722:	f7fc feff 	bl	8000524 <__aeabi_i2d>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800372e:	f7fc fdab 	bl	8000288 <__aeabi_dsub>
 8003732:	3530      	adds	r5, #48	@ 0x30
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800373c:	f806 5b01 	strb.w	r5, [r6], #1
 8003740:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003744:	f7fd f9ca 	bl	8000adc <__aeabi_dcmplt>
 8003748:	2800      	cmp	r0, #0
 800374a:	d172      	bne.n	8003832 <_dtoa_r+0x622>
 800374c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003750:	4911      	ldr	r1, [pc, #68]	@ (8003798 <_dtoa_r+0x588>)
 8003752:	2000      	movs	r0, #0
 8003754:	f7fc fd98 	bl	8000288 <__aeabi_dsub>
 8003758:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800375c:	f7fd f9be 	bl	8000adc <__aeabi_dcmplt>
 8003760:	2800      	cmp	r0, #0
 8003762:	f040 80b4 	bne.w	80038ce <_dtoa_r+0x6be>
 8003766:	42a6      	cmp	r6, r4
 8003768:	f43f af70 	beq.w	800364c <_dtoa_r+0x43c>
 800376c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003770:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <_dtoa_r+0x58c>)
 8003772:	2200      	movs	r2, #0
 8003774:	f7fc ff40 	bl	80005f8 <__aeabi_dmul>
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <_dtoa_r+0x58c>)
 800377a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800377e:	2200      	movs	r2, #0
 8003780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003784:	f7fc ff38 	bl	80005f8 <__aeabi_dmul>
 8003788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800378c:	e7c4      	b.n	8003718 <_dtoa_r+0x508>
 800378e:	bf00      	nop
 8003790:	08004f50 	.word	0x08004f50
 8003794:	08004f28 	.word	0x08004f28
 8003798:	3ff00000 	.word	0x3ff00000
 800379c:	40240000 	.word	0x40240000
 80037a0:	401c0000 	.word	0x401c0000
 80037a4:	40140000 	.word	0x40140000
 80037a8:	3fe00000 	.word	0x3fe00000
 80037ac:	4631      	mov	r1, r6
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7fc ff22 	bl	80005f8 <__aeabi_dmul>
 80037b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80037b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80037ba:	4656      	mov	r6, sl
 80037bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037c0:	f7fd f9ca 	bl	8000b58 <__aeabi_d2iz>
 80037c4:	4605      	mov	r5, r0
 80037c6:	f7fc fead 	bl	8000524 <__aeabi_i2d>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037d2:	f7fc fd59 	bl	8000288 <__aeabi_dsub>
 80037d6:	3530      	adds	r5, #48	@ 0x30
 80037d8:	f806 5b01 	strb.w	r5, [r6], #1
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	d124      	bne.n	8003836 <_dtoa_r+0x626>
 80037ec:	4baf      	ldr	r3, [pc, #700]	@ (8003aac <_dtoa_r+0x89c>)
 80037ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80037f2:	f7fc fd4b 	bl	800028c <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037fe:	f7fd f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8003802:	2800      	cmp	r0, #0
 8003804:	d163      	bne.n	80038ce <_dtoa_r+0x6be>
 8003806:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800380a:	49a8      	ldr	r1, [pc, #672]	@ (8003aac <_dtoa_r+0x89c>)
 800380c:	2000      	movs	r0, #0
 800380e:	f7fc fd3b 	bl	8000288 <__aeabi_dsub>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800381a:	f7fd f95f 	bl	8000adc <__aeabi_dcmplt>
 800381e:	2800      	cmp	r0, #0
 8003820:	f43f af14 	beq.w	800364c <_dtoa_r+0x43c>
 8003824:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003826:	1e73      	subs	r3, r6, #1
 8003828:	9313      	str	r3, [sp, #76]	@ 0x4c
 800382a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800382e:	2b30      	cmp	r3, #48	@ 0x30
 8003830:	d0f8      	beq.n	8003824 <_dtoa_r+0x614>
 8003832:	4647      	mov	r7, r8
 8003834:	e03b      	b.n	80038ae <_dtoa_r+0x69e>
 8003836:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab0 <_dtoa_r+0x8a0>)
 8003838:	f7fc fede 	bl	80005f8 <__aeabi_dmul>
 800383c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003840:	e7bc      	b.n	80037bc <_dtoa_r+0x5ac>
 8003842:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003846:	4656      	mov	r6, sl
 8003848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	f7fc fffc 	bl	800084c <__aeabi_ddiv>
 8003854:	f7fd f980 	bl	8000b58 <__aeabi_d2iz>
 8003858:	4680      	mov	r8, r0
 800385a:	f7fc fe63 	bl	8000524 <__aeabi_i2d>
 800385e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003862:	f7fc fec9 	bl	80005f8 <__aeabi_dmul>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003872:	f7fc fd09 	bl	8000288 <__aeabi_dsub>
 8003876:	f806 4b01 	strb.w	r4, [r6], #1
 800387a:	9d03      	ldr	r5, [sp, #12]
 800387c:	eba6 040a 	sub.w	r4, r6, sl
 8003880:	42a5      	cmp	r5, r4
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	d133      	bne.n	80038f0 <_dtoa_r+0x6e0>
 8003888:	f7fc fd00 	bl	800028c <__adddf3>
 800388c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003890:	4604      	mov	r4, r0
 8003892:	460d      	mov	r5, r1
 8003894:	f7fd f940 	bl	8000b18 <__aeabi_dcmpgt>
 8003898:	b9c0      	cbnz	r0, 80038cc <_dtoa_r+0x6bc>
 800389a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7fd f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80038a6:	b110      	cbz	r0, 80038ae <_dtoa_r+0x69e>
 80038a8:	f018 0f01 	tst.w	r8, #1
 80038ac:	d10e      	bne.n	80038cc <_dtoa_r+0x6bc>
 80038ae:	9902      	ldr	r1, [sp, #8]
 80038b0:	4648      	mov	r0, r9
 80038b2:	f000 fbbd 	bl	8004030 <_Bfree>
 80038b6:	2300      	movs	r3, #0
 80038b8:	7033      	strb	r3, [r6, #0]
 80038ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80038bc:	3701      	adds	r7, #1
 80038be:	601f      	str	r7, [r3, #0]
 80038c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 824b 	beq.w	8003d5e <_dtoa_r+0xb4e>
 80038c8:	601e      	str	r6, [r3, #0]
 80038ca:	e248      	b.n	8003d5e <_dtoa_r+0xb4e>
 80038cc:	46b8      	mov	r8, r7
 80038ce:	4633      	mov	r3, r6
 80038d0:	461e      	mov	r6, r3
 80038d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038d6:	2a39      	cmp	r2, #57	@ 0x39
 80038d8:	d106      	bne.n	80038e8 <_dtoa_r+0x6d8>
 80038da:	459a      	cmp	sl, r3
 80038dc:	d1f8      	bne.n	80038d0 <_dtoa_r+0x6c0>
 80038de:	2230      	movs	r2, #48	@ 0x30
 80038e0:	f108 0801 	add.w	r8, r8, #1
 80038e4:	f88a 2000 	strb.w	r2, [sl]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	3201      	adds	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e7a0      	b.n	8003832 <_dtoa_r+0x622>
 80038f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab0 <_dtoa_r+0x8a0>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	f7fc fe80 	bl	80005f8 <__aeabi_dmul>
 80038f8:	2200      	movs	r2, #0
 80038fa:	2300      	movs	r3, #0
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	f7fd f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003904:	2800      	cmp	r0, #0
 8003906:	d09f      	beq.n	8003848 <_dtoa_r+0x638>
 8003908:	e7d1      	b.n	80038ae <_dtoa_r+0x69e>
 800390a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800390c:	2a00      	cmp	r2, #0
 800390e:	f000 80ea 	beq.w	8003ae6 <_dtoa_r+0x8d6>
 8003912:	9a07      	ldr	r2, [sp, #28]
 8003914:	2a01      	cmp	r2, #1
 8003916:	f300 80cd 	bgt.w	8003ab4 <_dtoa_r+0x8a4>
 800391a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800391c:	2a00      	cmp	r2, #0
 800391e:	f000 80c1 	beq.w	8003aa4 <_dtoa_r+0x894>
 8003922:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003926:	9c08      	ldr	r4, [sp, #32]
 8003928:	9e00      	ldr	r6, [sp, #0]
 800392a:	9a00      	ldr	r2, [sp, #0]
 800392c:	441a      	add	r2, r3
 800392e:	9200      	str	r2, [sp, #0]
 8003930:	9a06      	ldr	r2, [sp, #24]
 8003932:	2101      	movs	r1, #1
 8003934:	441a      	add	r2, r3
 8003936:	4648      	mov	r0, r9
 8003938:	9206      	str	r2, [sp, #24]
 800393a:	f000 fc2d 	bl	8004198 <__i2b>
 800393e:	4605      	mov	r5, r0
 8003940:	b166      	cbz	r6, 800395c <_dtoa_r+0x74c>
 8003942:	9b06      	ldr	r3, [sp, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	dd09      	ble.n	800395c <_dtoa_r+0x74c>
 8003948:	42b3      	cmp	r3, r6
 800394a:	9a00      	ldr	r2, [sp, #0]
 800394c:	bfa8      	it	ge
 800394e:	4633      	movge	r3, r6
 8003950:	1ad2      	subs	r2, r2, r3
 8003952:	9200      	str	r2, [sp, #0]
 8003954:	9a06      	ldr	r2, [sp, #24]
 8003956:	1af6      	subs	r6, r6, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	9306      	str	r3, [sp, #24]
 800395c:	9b08      	ldr	r3, [sp, #32]
 800395e:	b30b      	cbz	r3, 80039a4 <_dtoa_r+0x794>
 8003960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80c6 	beq.w	8003af4 <_dtoa_r+0x8e4>
 8003968:	2c00      	cmp	r4, #0
 800396a:	f000 80c0 	beq.w	8003aee <_dtoa_r+0x8de>
 800396e:	4629      	mov	r1, r5
 8003970:	4622      	mov	r2, r4
 8003972:	4648      	mov	r0, r9
 8003974:	f000 fcc8 	bl	8004308 <__pow5mult>
 8003978:	9a02      	ldr	r2, [sp, #8]
 800397a:	4601      	mov	r1, r0
 800397c:	4605      	mov	r5, r0
 800397e:	4648      	mov	r0, r9
 8003980:	f000 fc20 	bl	80041c4 <__multiply>
 8003984:	9902      	ldr	r1, [sp, #8]
 8003986:	4680      	mov	r8, r0
 8003988:	4648      	mov	r0, r9
 800398a:	f000 fb51 	bl	8004030 <_Bfree>
 800398e:	9b08      	ldr	r3, [sp, #32]
 8003990:	1b1b      	subs	r3, r3, r4
 8003992:	9308      	str	r3, [sp, #32]
 8003994:	f000 80b1 	beq.w	8003afa <_dtoa_r+0x8ea>
 8003998:	9a08      	ldr	r2, [sp, #32]
 800399a:	4641      	mov	r1, r8
 800399c:	4648      	mov	r0, r9
 800399e:	f000 fcb3 	bl	8004308 <__pow5mult>
 80039a2:	9002      	str	r0, [sp, #8]
 80039a4:	2101      	movs	r1, #1
 80039a6:	4648      	mov	r0, r9
 80039a8:	f000 fbf6 	bl	8004198 <__i2b>
 80039ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039ae:	4604      	mov	r4, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 81d8 	beq.w	8003d66 <_dtoa_r+0xb56>
 80039b6:	461a      	mov	r2, r3
 80039b8:	4601      	mov	r1, r0
 80039ba:	4648      	mov	r0, r9
 80039bc:	f000 fca4 	bl	8004308 <__pow5mult>
 80039c0:	9b07      	ldr	r3, [sp, #28]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	4604      	mov	r4, r0
 80039c6:	f300 809f 	bgt.w	8003b08 <_dtoa_r+0x8f8>
 80039ca:	9b04      	ldr	r3, [sp, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 8097 	bne.w	8003b00 <_dtoa_r+0x8f0>
 80039d2:	9b05      	ldr	r3, [sp, #20]
 80039d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 8093 	bne.w	8003b04 <_dtoa_r+0x8f4>
 80039de:	9b05      	ldr	r3, [sp, #20]
 80039e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	b133      	cbz	r3, 80039f8 <_dtoa_r+0x7e8>
 80039ea:	9b00      	ldr	r3, [sp, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	9b06      	ldr	r3, [sp, #24]
 80039f2:	3301      	adds	r3, #1
 80039f4:	9306      	str	r3, [sp, #24]
 80039f6:	2301      	movs	r3, #1
 80039f8:	9308      	str	r3, [sp, #32]
 80039fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 81b8 	beq.w	8003d72 <_dtoa_r+0xb62>
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a08:	6918      	ldr	r0, [r3, #16]
 8003a0a:	f000 fb79 	bl	8004100 <__hi0bits>
 8003a0e:	f1c0 0020 	rsb	r0, r0, #32
 8003a12:	9b06      	ldr	r3, [sp, #24]
 8003a14:	4418      	add	r0, r3
 8003a16:	f010 001f 	ands.w	r0, r0, #31
 8003a1a:	f000 8082 	beq.w	8003b22 <_dtoa_r+0x912>
 8003a1e:	f1c0 0320 	rsb	r3, r0, #32
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	dd73      	ble.n	8003b0e <_dtoa_r+0x8fe>
 8003a26:	9b00      	ldr	r3, [sp, #0]
 8003a28:	f1c0 001c 	rsb	r0, r0, #28
 8003a2c:	4403      	add	r3, r0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	9b06      	ldr	r3, [sp, #24]
 8003a32:	4403      	add	r3, r0
 8003a34:	4406      	add	r6, r0
 8003a36:	9306      	str	r3, [sp, #24]
 8003a38:	9b00      	ldr	r3, [sp, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dd05      	ble.n	8003a4a <_dtoa_r+0x83a>
 8003a3e:	9902      	ldr	r1, [sp, #8]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4648      	mov	r0, r9
 8003a44:	f000 fcba 	bl	80043bc <__lshift>
 8003a48:	9002      	str	r0, [sp, #8]
 8003a4a:	9b06      	ldr	r3, [sp, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	dd05      	ble.n	8003a5c <_dtoa_r+0x84c>
 8003a50:	4621      	mov	r1, r4
 8003a52:	461a      	mov	r2, r3
 8003a54:	4648      	mov	r0, r9
 8003a56:	f000 fcb1 	bl	80043bc <__lshift>
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d061      	beq.n	8003b26 <_dtoa_r+0x916>
 8003a62:	9802      	ldr	r0, [sp, #8]
 8003a64:	4621      	mov	r1, r4
 8003a66:	f000 fd15 	bl	8004494 <__mcmp>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	da5b      	bge.n	8003b26 <_dtoa_r+0x916>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9902      	ldr	r1, [sp, #8]
 8003a72:	220a      	movs	r2, #10
 8003a74:	4648      	mov	r0, r9
 8003a76:	f000 fafd 	bl	8004074 <__multadd>
 8003a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a7c:	9002      	str	r0, [sp, #8]
 8003a7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8177 	beq.w	8003d76 <_dtoa_r+0xb66>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	220a      	movs	r2, #10
 8003a8e:	4648      	mov	r0, r9
 8003a90:	f000 faf0 	bl	8004074 <__multadd>
 8003a94:	f1bb 0f00 	cmp.w	fp, #0
 8003a98:	4605      	mov	r5, r0
 8003a9a:	dc6f      	bgt.n	8003b7c <_dtoa_r+0x96c>
 8003a9c:	9b07      	ldr	r3, [sp, #28]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	dc49      	bgt.n	8003b36 <_dtoa_r+0x926>
 8003aa2:	e06b      	b.n	8003b7c <_dtoa_r+0x96c>
 8003aa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003aa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003aaa:	e73c      	b.n	8003926 <_dtoa_r+0x716>
 8003aac:	3fe00000 	.word	0x3fe00000
 8003ab0:	40240000 	.word	0x40240000
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	1e5c      	subs	r4, r3, #1
 8003ab8:	9b08      	ldr	r3, [sp, #32]
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	db09      	blt.n	8003ad2 <_dtoa_r+0x8c2>
 8003abe:	1b1c      	subs	r4, r3, r4
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f6bf af30 	bge.w	8003928 <_dtoa_r+0x718>
 8003ac8:	9b00      	ldr	r3, [sp, #0]
 8003aca:	9a03      	ldr	r2, [sp, #12]
 8003acc:	1a9e      	subs	r6, r3, r2
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e72b      	b.n	800392a <_dtoa_r+0x71a>
 8003ad2:	9b08      	ldr	r3, [sp, #32]
 8003ad4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003ad6:	9408      	str	r4, [sp, #32]
 8003ad8:	1ae3      	subs	r3, r4, r3
 8003ada:	441a      	add	r2, r3
 8003adc:	9e00      	ldr	r6, [sp, #0]
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	920d      	str	r2, [sp, #52]	@ 0x34
 8003ae2:	2400      	movs	r4, #0
 8003ae4:	e721      	b.n	800392a <_dtoa_r+0x71a>
 8003ae6:	9c08      	ldr	r4, [sp, #32]
 8003ae8:	9e00      	ldr	r6, [sp, #0]
 8003aea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003aec:	e728      	b.n	8003940 <_dtoa_r+0x730>
 8003aee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003af2:	e751      	b.n	8003998 <_dtoa_r+0x788>
 8003af4:	9a08      	ldr	r2, [sp, #32]
 8003af6:	9902      	ldr	r1, [sp, #8]
 8003af8:	e750      	b.n	800399c <_dtoa_r+0x78c>
 8003afa:	f8cd 8008 	str.w	r8, [sp, #8]
 8003afe:	e751      	b.n	80039a4 <_dtoa_r+0x794>
 8003b00:	2300      	movs	r3, #0
 8003b02:	e779      	b.n	80039f8 <_dtoa_r+0x7e8>
 8003b04:	9b04      	ldr	r3, [sp, #16]
 8003b06:	e777      	b.n	80039f8 <_dtoa_r+0x7e8>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9308      	str	r3, [sp, #32]
 8003b0c:	e779      	b.n	8003a02 <_dtoa_r+0x7f2>
 8003b0e:	d093      	beq.n	8003a38 <_dtoa_r+0x828>
 8003b10:	9a00      	ldr	r2, [sp, #0]
 8003b12:	331c      	adds	r3, #28
 8003b14:	441a      	add	r2, r3
 8003b16:	9200      	str	r2, [sp, #0]
 8003b18:	9a06      	ldr	r2, [sp, #24]
 8003b1a:	441a      	add	r2, r3
 8003b1c:	441e      	add	r6, r3
 8003b1e:	9206      	str	r2, [sp, #24]
 8003b20:	e78a      	b.n	8003a38 <_dtoa_r+0x828>
 8003b22:	4603      	mov	r3, r0
 8003b24:	e7f4      	b.n	8003b10 <_dtoa_r+0x900>
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	46b8      	mov	r8, r7
 8003b2c:	dc20      	bgt.n	8003b70 <_dtoa_r+0x960>
 8003b2e:	469b      	mov	fp, r3
 8003b30:	9b07      	ldr	r3, [sp, #28]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	dd1e      	ble.n	8003b74 <_dtoa_r+0x964>
 8003b36:	f1bb 0f00 	cmp.w	fp, #0
 8003b3a:	f47f adb1 	bne.w	80036a0 <_dtoa_r+0x490>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	465b      	mov	r3, fp
 8003b42:	2205      	movs	r2, #5
 8003b44:	4648      	mov	r0, r9
 8003b46:	f000 fa95 	bl	8004074 <__multadd>
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	9802      	ldr	r0, [sp, #8]
 8003b50:	f000 fca0 	bl	8004494 <__mcmp>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f77f ada3 	ble.w	80036a0 <_dtoa_r+0x490>
 8003b5a:	4656      	mov	r6, sl
 8003b5c:	2331      	movs	r3, #49	@ 0x31
 8003b5e:	f806 3b01 	strb.w	r3, [r6], #1
 8003b62:	f108 0801 	add.w	r8, r8, #1
 8003b66:	e59f      	b.n	80036a8 <_dtoa_r+0x498>
 8003b68:	9c03      	ldr	r4, [sp, #12]
 8003b6a:	46b8      	mov	r8, r7
 8003b6c:	4625      	mov	r5, r4
 8003b6e:	e7f4      	b.n	8003b5a <_dtoa_r+0x94a>
 8003b70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8101 	beq.w	8003d7e <_dtoa_r+0xb6e>
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	dd05      	ble.n	8003b8c <_dtoa_r+0x97c>
 8003b80:	4629      	mov	r1, r5
 8003b82:	4632      	mov	r2, r6
 8003b84:	4648      	mov	r0, r9
 8003b86:	f000 fc19 	bl	80043bc <__lshift>
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	9b08      	ldr	r3, [sp, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d05c      	beq.n	8003c4c <_dtoa_r+0xa3c>
 8003b92:	6869      	ldr	r1, [r5, #4]
 8003b94:	4648      	mov	r0, r9
 8003b96:	f000 fa0b 	bl	8003fb0 <_Balloc>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	b928      	cbnz	r0, 8003baa <_dtoa_r+0x99a>
 8003b9e:	4b82      	ldr	r3, [pc, #520]	@ (8003da8 <_dtoa_r+0xb98>)
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003ba6:	f7ff bb4a 	b.w	800323e <_dtoa_r+0x2e>
 8003baa:	692a      	ldr	r2, [r5, #16]
 8003bac:	3202      	adds	r2, #2
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	f105 010c 	add.w	r1, r5, #12
 8003bb4:	300c      	adds	r0, #12
 8003bb6:	f000 feb5 	bl	8004924 <memcpy>
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4648      	mov	r0, r9
 8003bc0:	f000 fbfc 	bl	80043bc <__lshift>
 8003bc4:	f10a 0301 	add.w	r3, sl, #1
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	eb0a 030b 	add.w	r3, sl, fp
 8003bce:	9308      	str	r3, [sp, #32]
 8003bd0:	9b04      	ldr	r3, [sp, #16]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	462f      	mov	r7, r5
 8003bd8:	9306      	str	r3, [sp, #24]
 8003bda:	4605      	mov	r5, r0
 8003bdc:	9b00      	ldr	r3, [sp, #0]
 8003bde:	9802      	ldr	r0, [sp, #8]
 8003be0:	4621      	mov	r1, r4
 8003be2:	f103 3bff 	add.w	fp, r3, #4294967295
 8003be6:	f7ff fa88 	bl	80030fa <quorem>
 8003bea:	4603      	mov	r3, r0
 8003bec:	3330      	adds	r3, #48	@ 0x30
 8003bee:	9003      	str	r0, [sp, #12]
 8003bf0:	4639      	mov	r1, r7
 8003bf2:	9802      	ldr	r0, [sp, #8]
 8003bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf6:	f000 fc4d 	bl	8004494 <__mcmp>
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	9004      	str	r0, [sp, #16]
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4648      	mov	r0, r9
 8003c02:	f000 fc63 	bl	80044cc <__mdiff>
 8003c06:	68c2      	ldr	r2, [r0, #12]
 8003c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	bb02      	cbnz	r2, 8003c50 <_dtoa_r+0xa40>
 8003c0e:	4601      	mov	r1, r0
 8003c10:	9802      	ldr	r0, [sp, #8]
 8003c12:	f000 fc3f 	bl	8004494 <__mcmp>
 8003c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4648      	mov	r0, r9
 8003c1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c22:	f000 fa05 	bl	8004030 <_Bfree>
 8003c26:	9b07      	ldr	r3, [sp, #28]
 8003c28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003c2a:	9e00      	ldr	r6, [sp, #0]
 8003c2c:	ea42 0103 	orr.w	r1, r2, r3
 8003c30:	9b06      	ldr	r3, [sp, #24]
 8003c32:	4319      	orrs	r1, r3
 8003c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c36:	d10d      	bne.n	8003c54 <_dtoa_r+0xa44>
 8003c38:	2b39      	cmp	r3, #57	@ 0x39
 8003c3a:	d027      	beq.n	8003c8c <_dtoa_r+0xa7c>
 8003c3c:	9a04      	ldr	r2, [sp, #16]
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	dd01      	ble.n	8003c46 <_dtoa_r+0xa36>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	3331      	adds	r3, #49	@ 0x31
 8003c46:	f88b 3000 	strb.w	r3, [fp]
 8003c4a:	e52e      	b.n	80036aa <_dtoa_r+0x49a>
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	e7b9      	b.n	8003bc4 <_dtoa_r+0x9b4>
 8003c50:	2201      	movs	r2, #1
 8003c52:	e7e2      	b.n	8003c1a <_dtoa_r+0xa0a>
 8003c54:	9904      	ldr	r1, [sp, #16]
 8003c56:	2900      	cmp	r1, #0
 8003c58:	db04      	blt.n	8003c64 <_dtoa_r+0xa54>
 8003c5a:	9807      	ldr	r0, [sp, #28]
 8003c5c:	4301      	orrs	r1, r0
 8003c5e:	9806      	ldr	r0, [sp, #24]
 8003c60:	4301      	orrs	r1, r0
 8003c62:	d120      	bne.n	8003ca6 <_dtoa_r+0xa96>
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	ddee      	ble.n	8003c46 <_dtoa_r+0xa36>
 8003c68:	9902      	ldr	r1, [sp, #8]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4648      	mov	r0, r9
 8003c70:	f000 fba4 	bl	80043bc <__lshift>
 8003c74:	4621      	mov	r1, r4
 8003c76:	9002      	str	r0, [sp, #8]
 8003c78:	f000 fc0c 	bl	8004494 <__mcmp>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	9b00      	ldr	r3, [sp, #0]
 8003c80:	dc02      	bgt.n	8003c88 <_dtoa_r+0xa78>
 8003c82:	d1e0      	bne.n	8003c46 <_dtoa_r+0xa36>
 8003c84:	07da      	lsls	r2, r3, #31
 8003c86:	d5de      	bpl.n	8003c46 <_dtoa_r+0xa36>
 8003c88:	2b39      	cmp	r3, #57	@ 0x39
 8003c8a:	d1da      	bne.n	8003c42 <_dtoa_r+0xa32>
 8003c8c:	2339      	movs	r3, #57	@ 0x39
 8003c8e:	f88b 3000 	strb.w	r3, [fp]
 8003c92:	4633      	mov	r3, r6
 8003c94:	461e      	mov	r6, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003c9c:	2a39      	cmp	r2, #57	@ 0x39
 8003c9e:	d04e      	beq.n	8003d3e <_dtoa_r+0xb2e>
 8003ca0:	3201      	adds	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e501      	b.n	80036aa <_dtoa_r+0x49a>
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	dd03      	ble.n	8003cb2 <_dtoa_r+0xaa2>
 8003caa:	2b39      	cmp	r3, #57	@ 0x39
 8003cac:	d0ee      	beq.n	8003c8c <_dtoa_r+0xa7c>
 8003cae:	3301      	adds	r3, #1
 8003cb0:	e7c9      	b.n	8003c46 <_dtoa_r+0xa36>
 8003cb2:	9a00      	ldr	r2, [sp, #0]
 8003cb4:	9908      	ldr	r1, [sp, #32]
 8003cb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003cba:	428a      	cmp	r2, r1
 8003cbc:	d028      	beq.n	8003d10 <_dtoa_r+0xb00>
 8003cbe:	9902      	ldr	r1, [sp, #8]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	220a      	movs	r2, #10
 8003cc4:	4648      	mov	r0, r9
 8003cc6:	f000 f9d5 	bl	8004074 <__multadd>
 8003cca:	42af      	cmp	r7, r5
 8003ccc:	9002      	str	r0, [sp, #8]
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f04f 020a 	mov.w	r2, #10
 8003cd6:	4639      	mov	r1, r7
 8003cd8:	4648      	mov	r0, r9
 8003cda:	d107      	bne.n	8003cec <_dtoa_r+0xadc>
 8003cdc:	f000 f9ca 	bl	8004074 <__multadd>
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	9b00      	ldr	r3, [sp, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	e777      	b.n	8003bdc <_dtoa_r+0x9cc>
 8003cec:	f000 f9c2 	bl	8004074 <__multadd>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	220a      	movs	r2, #10
 8003cf8:	4648      	mov	r0, r9
 8003cfa:	f000 f9bb 	bl	8004074 <__multadd>
 8003cfe:	4605      	mov	r5, r0
 8003d00:	e7f0      	b.n	8003ce4 <_dtoa_r+0xad4>
 8003d02:	f1bb 0f00 	cmp.w	fp, #0
 8003d06:	bfcc      	ite	gt
 8003d08:	465e      	movgt	r6, fp
 8003d0a:	2601      	movle	r6, #1
 8003d0c:	4456      	add	r6, sl
 8003d0e:	2700      	movs	r7, #0
 8003d10:	9902      	ldr	r1, [sp, #8]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	4648      	mov	r0, r9
 8003d18:	f000 fb50 	bl	80043bc <__lshift>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	9002      	str	r0, [sp, #8]
 8003d20:	f000 fbb8 	bl	8004494 <__mcmp>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	dcb4      	bgt.n	8003c92 <_dtoa_r+0xa82>
 8003d28:	d102      	bne.n	8003d30 <_dtoa_r+0xb20>
 8003d2a:	9b00      	ldr	r3, [sp, #0]
 8003d2c:	07db      	lsls	r3, r3, #31
 8003d2e:	d4b0      	bmi.n	8003c92 <_dtoa_r+0xa82>
 8003d30:	4633      	mov	r3, r6
 8003d32:	461e      	mov	r6, r3
 8003d34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d38:	2a30      	cmp	r2, #48	@ 0x30
 8003d3a:	d0fa      	beq.n	8003d32 <_dtoa_r+0xb22>
 8003d3c:	e4b5      	b.n	80036aa <_dtoa_r+0x49a>
 8003d3e:	459a      	cmp	sl, r3
 8003d40:	d1a8      	bne.n	8003c94 <_dtoa_r+0xa84>
 8003d42:	2331      	movs	r3, #49	@ 0x31
 8003d44:	f108 0801 	add.w	r8, r8, #1
 8003d48:	f88a 3000 	strb.w	r3, [sl]
 8003d4c:	e4ad      	b.n	80036aa <_dtoa_r+0x49a>
 8003d4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003dac <_dtoa_r+0xb9c>
 8003d54:	b11b      	cbz	r3, 8003d5e <_dtoa_r+0xb4e>
 8003d56:	f10a 0308 	add.w	r3, sl, #8
 8003d5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4650      	mov	r0, sl
 8003d60:	b017      	add	sp, #92	@ 0x5c
 8003d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d66:	9b07      	ldr	r3, [sp, #28]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f77f ae2e 	ble.w	80039ca <_dtoa_r+0x7ba>
 8003d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d70:	9308      	str	r3, [sp, #32]
 8003d72:	2001      	movs	r0, #1
 8003d74:	e64d      	b.n	8003a12 <_dtoa_r+0x802>
 8003d76:	f1bb 0f00 	cmp.w	fp, #0
 8003d7a:	f77f aed9 	ble.w	8003b30 <_dtoa_r+0x920>
 8003d7e:	4656      	mov	r6, sl
 8003d80:	9802      	ldr	r0, [sp, #8]
 8003d82:	4621      	mov	r1, r4
 8003d84:	f7ff f9b9 	bl	80030fa <quorem>
 8003d88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8003d90:	eba6 020a 	sub.w	r2, r6, sl
 8003d94:	4593      	cmp	fp, r2
 8003d96:	ddb4      	ble.n	8003d02 <_dtoa_r+0xaf2>
 8003d98:	9902      	ldr	r1, [sp, #8]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	4648      	mov	r0, r9
 8003da0:	f000 f968 	bl	8004074 <__multadd>
 8003da4:	9002      	str	r0, [sp, #8]
 8003da6:	e7eb      	b.n	8003d80 <_dtoa_r+0xb70>
 8003da8:	08004e56 	.word	0x08004e56
 8003dac:	08004dda 	.word	0x08004dda

08003db0 <_free_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4605      	mov	r5, r0
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d041      	beq.n	8003e3c <_free_r+0x8c>
 8003db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dbc:	1f0c      	subs	r4, r1, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bfb8      	it	lt
 8003dc2:	18e4      	addlt	r4, r4, r3
 8003dc4:	f000 f8e8 	bl	8003f98 <__malloc_lock>
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e40 <_free_r+0x90>)
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	b933      	cbnz	r3, 8003ddc <_free_r+0x2c>
 8003dce:	6063      	str	r3, [r4, #4]
 8003dd0:	6014      	str	r4, [r2, #0]
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd8:	f000 b8e4 	b.w	8003fa4 <__malloc_unlock>
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d908      	bls.n	8003df2 <_free_r+0x42>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	1821      	adds	r1, r4, r0
 8003de4:	428b      	cmp	r3, r1
 8003de6:	bf01      	itttt	eq
 8003de8:	6819      	ldreq	r1, [r3, #0]
 8003dea:	685b      	ldreq	r3, [r3, #4]
 8003dec:	1809      	addeq	r1, r1, r0
 8003dee:	6021      	streq	r1, [r4, #0]
 8003df0:	e7ed      	b.n	8003dce <_free_r+0x1e>
 8003df2:	461a      	mov	r2, r3
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b10b      	cbz	r3, 8003dfc <_free_r+0x4c>
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d9fa      	bls.n	8003df2 <_free_r+0x42>
 8003dfc:	6811      	ldr	r1, [r2, #0]
 8003dfe:	1850      	adds	r0, r2, r1
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d10b      	bne.n	8003e1c <_free_r+0x6c>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	4401      	add	r1, r0
 8003e08:	1850      	adds	r0, r2, r1
 8003e0a:	4283      	cmp	r3, r0
 8003e0c:	6011      	str	r1, [r2, #0]
 8003e0e:	d1e0      	bne.n	8003dd2 <_free_r+0x22>
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	6053      	str	r3, [r2, #4]
 8003e16:	4408      	add	r0, r1
 8003e18:	6010      	str	r0, [r2, #0]
 8003e1a:	e7da      	b.n	8003dd2 <_free_r+0x22>
 8003e1c:	d902      	bls.n	8003e24 <_free_r+0x74>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	e7d6      	b.n	8003dd2 <_free_r+0x22>
 8003e24:	6820      	ldr	r0, [r4, #0]
 8003e26:	1821      	adds	r1, r4, r0
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	bf04      	itt	eq
 8003e2c:	6819      	ldreq	r1, [r3, #0]
 8003e2e:	685b      	ldreq	r3, [r3, #4]
 8003e30:	6063      	str	r3, [r4, #4]
 8003e32:	bf04      	itt	eq
 8003e34:	1809      	addeq	r1, r1, r0
 8003e36:	6021      	streq	r1, [r4, #0]
 8003e38:	6054      	str	r4, [r2, #4]
 8003e3a:	e7ca      	b.n	8003dd2 <_free_r+0x22>
 8003e3c:	bd38      	pop	{r3, r4, r5, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000430 	.word	0x20000430

08003e44 <malloc>:
 8003e44:	4b02      	ldr	r3, [pc, #8]	@ (8003e50 <malloc+0xc>)
 8003e46:	4601      	mov	r1, r0
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	f000 b825 	b.w	8003e98 <_malloc_r>
 8003e4e:	bf00      	nop
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <sbrk_aligned>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4e0f      	ldr	r6, [pc, #60]	@ (8003e94 <sbrk_aligned+0x40>)
 8003e58:	460c      	mov	r4, r1
 8003e5a:	6831      	ldr	r1, [r6, #0]
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	b911      	cbnz	r1, 8003e66 <sbrk_aligned+0x12>
 8003e60:	f000 fd50 	bl	8004904 <_sbrk_r>
 8003e64:	6030      	str	r0, [r6, #0]
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 fd4b 	bl	8004904 <_sbrk_r>
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	d103      	bne.n	8003e7a <sbrk_aligned+0x26>
 8003e72:	f04f 34ff 	mov.w	r4, #4294967295
 8003e76:	4620      	mov	r0, r4
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
 8003e7a:	1cc4      	adds	r4, r0, #3
 8003e7c:	f024 0403 	bic.w	r4, r4, #3
 8003e80:	42a0      	cmp	r0, r4
 8003e82:	d0f8      	beq.n	8003e76 <sbrk_aligned+0x22>
 8003e84:	1a21      	subs	r1, r4, r0
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fd3c 	bl	8004904 <_sbrk_r>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d1f2      	bne.n	8003e76 <sbrk_aligned+0x22>
 8003e90:	e7ef      	b.n	8003e72 <sbrk_aligned+0x1e>
 8003e92:	bf00      	nop
 8003e94:	2000042c 	.word	0x2000042c

08003e98 <_malloc_r>:
 8003e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e9c:	1ccd      	adds	r5, r1, #3
 8003e9e:	f025 0503 	bic.w	r5, r5, #3
 8003ea2:	3508      	adds	r5, #8
 8003ea4:	2d0c      	cmp	r5, #12
 8003ea6:	bf38      	it	cc
 8003ea8:	250c      	movcc	r5, #12
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	4606      	mov	r6, r0
 8003eae:	db01      	blt.n	8003eb4 <_malloc_r+0x1c>
 8003eb0:	42a9      	cmp	r1, r5
 8003eb2:	d904      	bls.n	8003ebe <_malloc_r+0x26>
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	6033      	str	r3, [r6, #0]
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f94 <_malloc_r+0xfc>
 8003ec2:	f000 f869 	bl	8003f98 <__malloc_lock>
 8003ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eca:	461c      	mov	r4, r3
 8003ecc:	bb44      	cbnz	r4, 8003f20 <_malloc_r+0x88>
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f7ff ffbf 	bl	8003e54 <sbrk_aligned>
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	4604      	mov	r4, r0
 8003eda:	d158      	bne.n	8003f8e <_malloc_r+0xf6>
 8003edc:	f8d8 4000 	ldr.w	r4, [r8]
 8003ee0:	4627      	mov	r7, r4
 8003ee2:	2f00      	cmp	r7, #0
 8003ee4:	d143      	bne.n	8003f6e <_malloc_r+0xd6>
 8003ee6:	2c00      	cmp	r4, #0
 8003ee8:	d04b      	beq.n	8003f82 <_malloc_r+0xea>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	4639      	mov	r1, r7
 8003eee:	4630      	mov	r0, r6
 8003ef0:	eb04 0903 	add.w	r9, r4, r3
 8003ef4:	f000 fd06 	bl	8004904 <_sbrk_r>
 8003ef8:	4581      	cmp	r9, r0
 8003efa:	d142      	bne.n	8003f82 <_malloc_r+0xea>
 8003efc:	6821      	ldr	r1, [r4, #0]
 8003efe:	1a6d      	subs	r5, r5, r1
 8003f00:	4629      	mov	r1, r5
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff ffa6 	bl	8003e54 <sbrk_aligned>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d03a      	beq.n	8003f82 <_malloc_r+0xea>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	442b      	add	r3, r5
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	f8d8 3000 	ldr.w	r3, [r8]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	bb62      	cbnz	r2, 8003f74 <_malloc_r+0xdc>
 8003f1a:	f8c8 7000 	str.w	r7, [r8]
 8003f1e:	e00f      	b.n	8003f40 <_malloc_r+0xa8>
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	1b52      	subs	r2, r2, r5
 8003f24:	d420      	bmi.n	8003f68 <_malloc_r+0xd0>
 8003f26:	2a0b      	cmp	r2, #11
 8003f28:	d917      	bls.n	8003f5a <_malloc_r+0xc2>
 8003f2a:	1961      	adds	r1, r4, r5
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	6025      	str	r5, [r4, #0]
 8003f30:	bf18      	it	ne
 8003f32:	6059      	strne	r1, [r3, #4]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	bf08      	it	eq
 8003f38:	f8c8 1000 	streq.w	r1, [r8]
 8003f3c:	5162      	str	r2, [r4, r5]
 8003f3e:	604b      	str	r3, [r1, #4]
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 f82f 	bl	8003fa4 <__malloc_unlock>
 8003f46:	f104 000b 	add.w	r0, r4, #11
 8003f4a:	1d23      	adds	r3, r4, #4
 8003f4c:	f020 0007 	bic.w	r0, r0, #7
 8003f50:	1ac2      	subs	r2, r0, r3
 8003f52:	bf1c      	itt	ne
 8003f54:	1a1b      	subne	r3, r3, r0
 8003f56:	50a3      	strne	r3, [r4, r2]
 8003f58:	e7af      	b.n	8003eba <_malloc_r+0x22>
 8003f5a:	6862      	ldr	r2, [r4, #4]
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	bf0c      	ite	eq
 8003f60:	f8c8 2000 	streq.w	r2, [r8]
 8003f64:	605a      	strne	r2, [r3, #4]
 8003f66:	e7eb      	b.n	8003f40 <_malloc_r+0xa8>
 8003f68:	4623      	mov	r3, r4
 8003f6a:	6864      	ldr	r4, [r4, #4]
 8003f6c:	e7ae      	b.n	8003ecc <_malloc_r+0x34>
 8003f6e:	463c      	mov	r4, r7
 8003f70:	687f      	ldr	r7, [r7, #4]
 8003f72:	e7b6      	b.n	8003ee2 <_malloc_r+0x4a>
 8003f74:	461a      	mov	r2, r3
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d1fb      	bne.n	8003f74 <_malloc_r+0xdc>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6053      	str	r3, [r2, #4]
 8003f80:	e7de      	b.n	8003f40 <_malloc_r+0xa8>
 8003f82:	230c      	movs	r3, #12
 8003f84:	6033      	str	r3, [r6, #0]
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 f80c 	bl	8003fa4 <__malloc_unlock>
 8003f8c:	e794      	b.n	8003eb8 <_malloc_r+0x20>
 8003f8e:	6005      	str	r5, [r0, #0]
 8003f90:	e7d6      	b.n	8003f40 <_malloc_r+0xa8>
 8003f92:	bf00      	nop
 8003f94:	20000430 	.word	0x20000430

08003f98 <__malloc_lock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	@ (8003fa0 <__malloc_lock+0x8>)
 8003f9a:	f7ff b8ac 	b.w	80030f6 <__retarget_lock_acquire_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	20000428 	.word	0x20000428

08003fa4 <__malloc_unlock>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	@ (8003fac <__malloc_unlock+0x8>)
 8003fa6:	f7ff b8a7 	b.w	80030f8 <__retarget_lock_release_recursive>
 8003faa:	bf00      	nop
 8003fac:	20000428 	.word	0x20000428

08003fb0 <_Balloc>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	69c6      	ldr	r6, [r0, #28]
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	460d      	mov	r5, r1
 8003fb8:	b976      	cbnz	r6, 8003fd8 <_Balloc+0x28>
 8003fba:	2010      	movs	r0, #16
 8003fbc:	f7ff ff42 	bl	8003e44 <malloc>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	61e0      	str	r0, [r4, #28]
 8003fc4:	b920      	cbnz	r0, 8003fd0 <_Balloc+0x20>
 8003fc6:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <_Balloc+0x78>)
 8003fc8:	4818      	ldr	r0, [pc, #96]	@ (800402c <_Balloc+0x7c>)
 8003fca:	216b      	movs	r1, #107	@ 0x6b
 8003fcc:	f000 fcb8 	bl	8004940 <__assert_func>
 8003fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fd4:	6006      	str	r6, [r0, #0]
 8003fd6:	60c6      	str	r6, [r0, #12]
 8003fd8:	69e6      	ldr	r6, [r4, #28]
 8003fda:	68f3      	ldr	r3, [r6, #12]
 8003fdc:	b183      	cbz	r3, 8004000 <_Balloc+0x50>
 8003fde:	69e3      	ldr	r3, [r4, #28]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003fe6:	b9b8      	cbnz	r0, 8004018 <_Balloc+0x68>
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f605 	lsl.w	r6, r1, r5
 8003fee:	1d72      	adds	r2, r6, #5
 8003ff0:	0092      	lsls	r2, r2, #2
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f000 fcc2 	bl	800497c <_calloc_r>
 8003ff8:	b160      	cbz	r0, 8004014 <_Balloc+0x64>
 8003ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ffe:	e00e      	b.n	800401e <_Balloc+0x6e>
 8004000:	2221      	movs	r2, #33	@ 0x21
 8004002:	2104      	movs	r1, #4
 8004004:	4620      	mov	r0, r4
 8004006:	f000 fcb9 	bl	800497c <_calloc_r>
 800400a:	69e3      	ldr	r3, [r4, #28]
 800400c:	60f0      	str	r0, [r6, #12]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e4      	bne.n	8003fde <_Balloc+0x2e>
 8004014:	2000      	movs	r0, #0
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	6802      	ldr	r2, [r0, #0]
 800401a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800401e:	2300      	movs	r3, #0
 8004020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004024:	e7f7      	b.n	8004016 <_Balloc+0x66>
 8004026:	bf00      	nop
 8004028:	08004de7 	.word	0x08004de7
 800402c:	08004e67 	.word	0x08004e67

08004030 <_Bfree>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	69c6      	ldr	r6, [r0, #28]
 8004034:	4605      	mov	r5, r0
 8004036:	460c      	mov	r4, r1
 8004038:	b976      	cbnz	r6, 8004058 <_Bfree+0x28>
 800403a:	2010      	movs	r0, #16
 800403c:	f7ff ff02 	bl	8003e44 <malloc>
 8004040:	4602      	mov	r2, r0
 8004042:	61e8      	str	r0, [r5, #28]
 8004044:	b920      	cbnz	r0, 8004050 <_Bfree+0x20>
 8004046:	4b09      	ldr	r3, [pc, #36]	@ (800406c <_Bfree+0x3c>)
 8004048:	4809      	ldr	r0, [pc, #36]	@ (8004070 <_Bfree+0x40>)
 800404a:	218f      	movs	r1, #143	@ 0x8f
 800404c:	f000 fc78 	bl	8004940 <__assert_func>
 8004050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004054:	6006      	str	r6, [r0, #0]
 8004056:	60c6      	str	r6, [r0, #12]
 8004058:	b13c      	cbz	r4, 800406a <_Bfree+0x3a>
 800405a:	69eb      	ldr	r3, [r5, #28]
 800405c:	6862      	ldr	r2, [r4, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004064:	6021      	str	r1, [r4, #0]
 8004066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	08004de7 	.word	0x08004de7
 8004070:	08004e67 	.word	0x08004e67

08004074 <__multadd>:
 8004074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004078:	690d      	ldr	r5, [r1, #16]
 800407a:	4607      	mov	r7, r0
 800407c:	460c      	mov	r4, r1
 800407e:	461e      	mov	r6, r3
 8004080:	f101 0c14 	add.w	ip, r1, #20
 8004084:	2000      	movs	r0, #0
 8004086:	f8dc 3000 	ldr.w	r3, [ip]
 800408a:	b299      	uxth	r1, r3
 800408c:	fb02 6101 	mla	r1, r2, r1, r6
 8004090:	0c1e      	lsrs	r6, r3, #16
 8004092:	0c0b      	lsrs	r3, r1, #16
 8004094:	fb02 3306 	mla	r3, r2, r6, r3
 8004098:	b289      	uxth	r1, r1
 800409a:	3001      	adds	r0, #1
 800409c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80040a0:	4285      	cmp	r5, r0
 80040a2:	f84c 1b04 	str.w	r1, [ip], #4
 80040a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80040aa:	dcec      	bgt.n	8004086 <__multadd+0x12>
 80040ac:	b30e      	cbz	r6, 80040f2 <__multadd+0x7e>
 80040ae:	68a3      	ldr	r3, [r4, #8]
 80040b0:	42ab      	cmp	r3, r5
 80040b2:	dc19      	bgt.n	80040e8 <__multadd+0x74>
 80040b4:	6861      	ldr	r1, [r4, #4]
 80040b6:	4638      	mov	r0, r7
 80040b8:	3101      	adds	r1, #1
 80040ba:	f7ff ff79 	bl	8003fb0 <_Balloc>
 80040be:	4680      	mov	r8, r0
 80040c0:	b928      	cbnz	r0, 80040ce <__multadd+0x5a>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <__multadd+0x84>)
 80040c6:	480d      	ldr	r0, [pc, #52]	@ (80040fc <__multadd+0x88>)
 80040c8:	21ba      	movs	r1, #186	@ 0xba
 80040ca:	f000 fc39 	bl	8004940 <__assert_func>
 80040ce:	6922      	ldr	r2, [r4, #16]
 80040d0:	3202      	adds	r2, #2
 80040d2:	f104 010c 	add.w	r1, r4, #12
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	300c      	adds	r0, #12
 80040da:	f000 fc23 	bl	8004924 <memcpy>
 80040de:	4621      	mov	r1, r4
 80040e0:	4638      	mov	r0, r7
 80040e2:	f7ff ffa5 	bl	8004030 <_Bfree>
 80040e6:	4644      	mov	r4, r8
 80040e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040ec:	3501      	adds	r5, #1
 80040ee:	615e      	str	r6, [r3, #20]
 80040f0:	6125      	str	r5, [r4, #16]
 80040f2:	4620      	mov	r0, r4
 80040f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f8:	08004e56 	.word	0x08004e56
 80040fc:	08004e67 	.word	0x08004e67

08004100 <__hi0bits>:
 8004100:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004104:	4603      	mov	r3, r0
 8004106:	bf36      	itet	cc
 8004108:	0403      	lslcc	r3, r0, #16
 800410a:	2000      	movcs	r0, #0
 800410c:	2010      	movcc	r0, #16
 800410e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004112:	bf3c      	itt	cc
 8004114:	021b      	lslcc	r3, r3, #8
 8004116:	3008      	addcc	r0, #8
 8004118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800411c:	bf3c      	itt	cc
 800411e:	011b      	lslcc	r3, r3, #4
 8004120:	3004      	addcc	r0, #4
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	bf3c      	itt	cc
 8004128:	009b      	lslcc	r3, r3, #2
 800412a:	3002      	addcc	r0, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	db05      	blt.n	800413c <__hi0bits+0x3c>
 8004130:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004134:	f100 0001 	add.w	r0, r0, #1
 8004138:	bf08      	it	eq
 800413a:	2020      	moveq	r0, #32
 800413c:	4770      	bx	lr

0800413e <__lo0bits>:
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	4602      	mov	r2, r0
 8004142:	f013 0007 	ands.w	r0, r3, #7
 8004146:	d00b      	beq.n	8004160 <__lo0bits+0x22>
 8004148:	07d9      	lsls	r1, r3, #31
 800414a:	d421      	bmi.n	8004190 <__lo0bits+0x52>
 800414c:	0798      	lsls	r0, r3, #30
 800414e:	bf49      	itett	mi
 8004150:	085b      	lsrmi	r3, r3, #1
 8004152:	089b      	lsrpl	r3, r3, #2
 8004154:	2001      	movmi	r0, #1
 8004156:	6013      	strmi	r3, [r2, #0]
 8004158:	bf5c      	itt	pl
 800415a:	6013      	strpl	r3, [r2, #0]
 800415c:	2002      	movpl	r0, #2
 800415e:	4770      	bx	lr
 8004160:	b299      	uxth	r1, r3
 8004162:	b909      	cbnz	r1, 8004168 <__lo0bits+0x2a>
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	2010      	movs	r0, #16
 8004168:	b2d9      	uxtb	r1, r3
 800416a:	b909      	cbnz	r1, 8004170 <__lo0bits+0x32>
 800416c:	3008      	adds	r0, #8
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	0719      	lsls	r1, r3, #28
 8004172:	bf04      	itt	eq
 8004174:	091b      	lsreq	r3, r3, #4
 8004176:	3004      	addeq	r0, #4
 8004178:	0799      	lsls	r1, r3, #30
 800417a:	bf04      	itt	eq
 800417c:	089b      	lsreq	r3, r3, #2
 800417e:	3002      	addeq	r0, #2
 8004180:	07d9      	lsls	r1, r3, #31
 8004182:	d403      	bmi.n	800418c <__lo0bits+0x4e>
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	f100 0001 	add.w	r0, r0, #1
 800418a:	d003      	beq.n	8004194 <__lo0bits+0x56>
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4770      	bx	lr
 8004190:	2000      	movs	r0, #0
 8004192:	4770      	bx	lr
 8004194:	2020      	movs	r0, #32
 8004196:	4770      	bx	lr

08004198 <__i2b>:
 8004198:	b510      	push	{r4, lr}
 800419a:	460c      	mov	r4, r1
 800419c:	2101      	movs	r1, #1
 800419e:	f7ff ff07 	bl	8003fb0 <_Balloc>
 80041a2:	4602      	mov	r2, r0
 80041a4:	b928      	cbnz	r0, 80041b2 <__i2b+0x1a>
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <__i2b+0x24>)
 80041a8:	4805      	ldr	r0, [pc, #20]	@ (80041c0 <__i2b+0x28>)
 80041aa:	f240 1145 	movw	r1, #325	@ 0x145
 80041ae:	f000 fbc7 	bl	8004940 <__assert_func>
 80041b2:	2301      	movs	r3, #1
 80041b4:	6144      	str	r4, [r0, #20]
 80041b6:	6103      	str	r3, [r0, #16]
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	bf00      	nop
 80041bc:	08004e56 	.word	0x08004e56
 80041c0:	08004e67 	.word	0x08004e67

080041c4 <__multiply>:
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	4617      	mov	r7, r2
 80041ca:	690a      	ldr	r2, [r1, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	bfa8      	it	ge
 80041d2:	463b      	movge	r3, r7
 80041d4:	4689      	mov	r9, r1
 80041d6:	bfa4      	itt	ge
 80041d8:	460f      	movge	r7, r1
 80041da:	4699      	movge	r9, r3
 80041dc:	693d      	ldr	r5, [r7, #16]
 80041de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	eb05 060a 	add.w	r6, r5, sl
 80041ea:	42b3      	cmp	r3, r6
 80041ec:	b085      	sub	sp, #20
 80041ee:	bfb8      	it	lt
 80041f0:	3101      	addlt	r1, #1
 80041f2:	f7ff fedd 	bl	8003fb0 <_Balloc>
 80041f6:	b930      	cbnz	r0, 8004206 <__multiply+0x42>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b41      	ldr	r3, [pc, #260]	@ (8004300 <__multiply+0x13c>)
 80041fc:	4841      	ldr	r0, [pc, #260]	@ (8004304 <__multiply+0x140>)
 80041fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004202:	f000 fb9d 	bl	8004940 <__assert_func>
 8004206:	f100 0414 	add.w	r4, r0, #20
 800420a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800420e:	4623      	mov	r3, r4
 8004210:	2200      	movs	r2, #0
 8004212:	4573      	cmp	r3, lr
 8004214:	d320      	bcc.n	8004258 <__multiply+0x94>
 8004216:	f107 0814 	add.w	r8, r7, #20
 800421a:	f109 0114 	add.w	r1, r9, #20
 800421e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004222:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	1beb      	subs	r3, r5, r7
 800422a:	3b15      	subs	r3, #21
 800422c:	f023 0303 	bic.w	r3, r3, #3
 8004230:	3304      	adds	r3, #4
 8004232:	3715      	adds	r7, #21
 8004234:	42bd      	cmp	r5, r7
 8004236:	bf38      	it	cc
 8004238:	2304      	movcc	r3, #4
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	9103      	str	r1, [sp, #12]
 8004240:	428b      	cmp	r3, r1
 8004242:	d80c      	bhi.n	800425e <__multiply+0x9a>
 8004244:	2e00      	cmp	r6, #0
 8004246:	dd03      	ble.n	8004250 <__multiply+0x8c>
 8004248:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800424c:	2b00      	cmp	r3, #0
 800424e:	d055      	beq.n	80042fc <__multiply+0x138>
 8004250:	6106      	str	r6, [r0, #16]
 8004252:	b005      	add	sp, #20
 8004254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004258:	f843 2b04 	str.w	r2, [r3], #4
 800425c:	e7d9      	b.n	8004212 <__multiply+0x4e>
 800425e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004262:	f1ba 0f00 	cmp.w	sl, #0
 8004266:	d01f      	beq.n	80042a8 <__multiply+0xe4>
 8004268:	46c4      	mov	ip, r8
 800426a:	46a1      	mov	r9, r4
 800426c:	2700      	movs	r7, #0
 800426e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004272:	f8d9 3000 	ldr.w	r3, [r9]
 8004276:	fa1f fb82 	uxth.w	fp, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004280:	443b      	add	r3, r7
 8004282:	f8d9 7000 	ldr.w	r7, [r9]
 8004286:	0c12      	lsrs	r2, r2, #16
 8004288:	0c3f      	lsrs	r7, r7, #16
 800428a:	fb0a 7202 	mla	r2, sl, r2, r7
 800428e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004292:	b29b      	uxth	r3, r3
 8004294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004298:	4565      	cmp	r5, ip
 800429a:	f849 3b04 	str.w	r3, [r9], #4
 800429e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80042a2:	d8e4      	bhi.n	800426e <__multiply+0xaa>
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	50e7      	str	r7, [r4, r3]
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80042ae:	3104      	adds	r1, #4
 80042b0:	f1b9 0f00 	cmp.w	r9, #0
 80042b4:	d020      	beq.n	80042f8 <__multiply+0x134>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	4647      	mov	r7, r8
 80042ba:	46a4      	mov	ip, r4
 80042bc:	f04f 0a00 	mov.w	sl, #0
 80042c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80042c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80042c8:	fb09 220b 	mla	r2, r9, fp, r2
 80042cc:	4452      	add	r2, sl
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042d4:	f84c 3b04 	str.w	r3, [ip], #4
 80042d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80042dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80042e4:	fb09 330a 	mla	r3, r9, sl, r3
 80042e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80042ec:	42bd      	cmp	r5, r7
 80042ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042f2:	d8e5      	bhi.n	80042c0 <__multiply+0xfc>
 80042f4:	9a01      	ldr	r2, [sp, #4]
 80042f6:	50a3      	str	r3, [r4, r2]
 80042f8:	3404      	adds	r4, #4
 80042fa:	e79f      	b.n	800423c <__multiply+0x78>
 80042fc:	3e01      	subs	r6, #1
 80042fe:	e7a1      	b.n	8004244 <__multiply+0x80>
 8004300:	08004e56 	.word	0x08004e56
 8004304:	08004e67 	.word	0x08004e67

08004308 <__pow5mult>:
 8004308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800430c:	4615      	mov	r5, r2
 800430e:	f012 0203 	ands.w	r2, r2, #3
 8004312:	4607      	mov	r7, r0
 8004314:	460e      	mov	r6, r1
 8004316:	d007      	beq.n	8004328 <__pow5mult+0x20>
 8004318:	4c25      	ldr	r4, [pc, #148]	@ (80043b0 <__pow5mult+0xa8>)
 800431a:	3a01      	subs	r2, #1
 800431c:	2300      	movs	r3, #0
 800431e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004322:	f7ff fea7 	bl	8004074 <__multadd>
 8004326:	4606      	mov	r6, r0
 8004328:	10ad      	asrs	r5, r5, #2
 800432a:	d03d      	beq.n	80043a8 <__pow5mult+0xa0>
 800432c:	69fc      	ldr	r4, [r7, #28]
 800432e:	b97c      	cbnz	r4, 8004350 <__pow5mult+0x48>
 8004330:	2010      	movs	r0, #16
 8004332:	f7ff fd87 	bl	8003e44 <malloc>
 8004336:	4602      	mov	r2, r0
 8004338:	61f8      	str	r0, [r7, #28]
 800433a:	b928      	cbnz	r0, 8004348 <__pow5mult+0x40>
 800433c:	4b1d      	ldr	r3, [pc, #116]	@ (80043b4 <__pow5mult+0xac>)
 800433e:	481e      	ldr	r0, [pc, #120]	@ (80043b8 <__pow5mult+0xb0>)
 8004340:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004344:	f000 fafc 	bl	8004940 <__assert_func>
 8004348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800434c:	6004      	str	r4, [r0, #0]
 800434e:	60c4      	str	r4, [r0, #12]
 8004350:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004358:	b94c      	cbnz	r4, 800436e <__pow5mult+0x66>
 800435a:	f240 2171 	movw	r1, #625	@ 0x271
 800435e:	4638      	mov	r0, r7
 8004360:	f7ff ff1a 	bl	8004198 <__i2b>
 8004364:	2300      	movs	r3, #0
 8004366:	f8c8 0008 	str.w	r0, [r8, #8]
 800436a:	4604      	mov	r4, r0
 800436c:	6003      	str	r3, [r0, #0]
 800436e:	f04f 0900 	mov.w	r9, #0
 8004372:	07eb      	lsls	r3, r5, #31
 8004374:	d50a      	bpl.n	800438c <__pow5mult+0x84>
 8004376:	4631      	mov	r1, r6
 8004378:	4622      	mov	r2, r4
 800437a:	4638      	mov	r0, r7
 800437c:	f7ff ff22 	bl	80041c4 <__multiply>
 8004380:	4631      	mov	r1, r6
 8004382:	4680      	mov	r8, r0
 8004384:	4638      	mov	r0, r7
 8004386:	f7ff fe53 	bl	8004030 <_Bfree>
 800438a:	4646      	mov	r6, r8
 800438c:	106d      	asrs	r5, r5, #1
 800438e:	d00b      	beq.n	80043a8 <__pow5mult+0xa0>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	b938      	cbnz	r0, 80043a4 <__pow5mult+0x9c>
 8004394:	4622      	mov	r2, r4
 8004396:	4621      	mov	r1, r4
 8004398:	4638      	mov	r0, r7
 800439a:	f7ff ff13 	bl	80041c4 <__multiply>
 800439e:	6020      	str	r0, [r4, #0]
 80043a0:	f8c0 9000 	str.w	r9, [r0]
 80043a4:	4604      	mov	r4, r0
 80043a6:	e7e4      	b.n	8004372 <__pow5mult+0x6a>
 80043a8:	4630      	mov	r0, r6
 80043aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ae:	bf00      	nop
 80043b0:	08004f18 	.word	0x08004f18
 80043b4:	08004de7 	.word	0x08004de7
 80043b8:	08004e67 	.word	0x08004e67

080043bc <__lshift>:
 80043bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c0:	460c      	mov	r4, r1
 80043c2:	6849      	ldr	r1, [r1, #4]
 80043c4:	6923      	ldr	r3, [r4, #16]
 80043c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	4607      	mov	r7, r0
 80043ce:	4691      	mov	r9, r2
 80043d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043d4:	f108 0601 	add.w	r6, r8, #1
 80043d8:	42b3      	cmp	r3, r6
 80043da:	db0b      	blt.n	80043f4 <__lshift+0x38>
 80043dc:	4638      	mov	r0, r7
 80043de:	f7ff fde7 	bl	8003fb0 <_Balloc>
 80043e2:	4605      	mov	r5, r0
 80043e4:	b948      	cbnz	r0, 80043fa <__lshift+0x3e>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b28      	ldr	r3, [pc, #160]	@ (800448c <__lshift+0xd0>)
 80043ea:	4829      	ldr	r0, [pc, #164]	@ (8004490 <__lshift+0xd4>)
 80043ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80043f0:	f000 faa6 	bl	8004940 <__assert_func>
 80043f4:	3101      	adds	r1, #1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	e7ee      	b.n	80043d8 <__lshift+0x1c>
 80043fa:	2300      	movs	r3, #0
 80043fc:	f100 0114 	add.w	r1, r0, #20
 8004400:	f100 0210 	add.w	r2, r0, #16
 8004404:	4618      	mov	r0, r3
 8004406:	4553      	cmp	r3, sl
 8004408:	db33      	blt.n	8004472 <__lshift+0xb6>
 800440a:	6920      	ldr	r0, [r4, #16]
 800440c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004410:	f104 0314 	add.w	r3, r4, #20
 8004414:	f019 091f 	ands.w	r9, r9, #31
 8004418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800441c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004420:	d02b      	beq.n	800447a <__lshift+0xbe>
 8004422:	f1c9 0e20 	rsb	lr, r9, #32
 8004426:	468a      	mov	sl, r1
 8004428:	2200      	movs	r2, #0
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	fa00 f009 	lsl.w	r0, r0, r9
 8004430:	4310      	orrs	r0, r2
 8004432:	f84a 0b04 	str.w	r0, [sl], #4
 8004436:	f853 2b04 	ldr.w	r2, [r3], #4
 800443a:	459c      	cmp	ip, r3
 800443c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004440:	d8f3      	bhi.n	800442a <__lshift+0x6e>
 8004442:	ebac 0304 	sub.w	r3, ip, r4
 8004446:	3b15      	subs	r3, #21
 8004448:	f023 0303 	bic.w	r3, r3, #3
 800444c:	3304      	adds	r3, #4
 800444e:	f104 0015 	add.w	r0, r4, #21
 8004452:	4560      	cmp	r0, ip
 8004454:	bf88      	it	hi
 8004456:	2304      	movhi	r3, #4
 8004458:	50ca      	str	r2, [r1, r3]
 800445a:	b10a      	cbz	r2, 8004460 <__lshift+0xa4>
 800445c:	f108 0602 	add.w	r6, r8, #2
 8004460:	3e01      	subs	r6, #1
 8004462:	4638      	mov	r0, r7
 8004464:	612e      	str	r6, [r5, #16]
 8004466:	4621      	mov	r1, r4
 8004468:	f7ff fde2 	bl	8004030 <_Bfree>
 800446c:	4628      	mov	r0, r5
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	f842 0f04 	str.w	r0, [r2, #4]!
 8004476:	3301      	adds	r3, #1
 8004478:	e7c5      	b.n	8004406 <__lshift+0x4a>
 800447a:	3904      	subs	r1, #4
 800447c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004480:	f841 2f04 	str.w	r2, [r1, #4]!
 8004484:	459c      	cmp	ip, r3
 8004486:	d8f9      	bhi.n	800447c <__lshift+0xc0>
 8004488:	e7ea      	b.n	8004460 <__lshift+0xa4>
 800448a:	bf00      	nop
 800448c:	08004e56 	.word	0x08004e56
 8004490:	08004e67 	.word	0x08004e67

08004494 <__mcmp>:
 8004494:	690a      	ldr	r2, [r1, #16]
 8004496:	4603      	mov	r3, r0
 8004498:	6900      	ldr	r0, [r0, #16]
 800449a:	1a80      	subs	r0, r0, r2
 800449c:	b530      	push	{r4, r5, lr}
 800449e:	d10e      	bne.n	80044be <__mcmp+0x2a>
 80044a0:	3314      	adds	r3, #20
 80044a2:	3114      	adds	r1, #20
 80044a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80044a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80044ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044b4:	4295      	cmp	r5, r2
 80044b6:	d003      	beq.n	80044c0 <__mcmp+0x2c>
 80044b8:	d205      	bcs.n	80044c6 <__mcmp+0x32>
 80044ba:	f04f 30ff 	mov.w	r0, #4294967295
 80044be:	bd30      	pop	{r4, r5, pc}
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d3f3      	bcc.n	80044ac <__mcmp+0x18>
 80044c4:	e7fb      	b.n	80044be <__mcmp+0x2a>
 80044c6:	2001      	movs	r0, #1
 80044c8:	e7f9      	b.n	80044be <__mcmp+0x2a>
	...

080044cc <__mdiff>:
 80044cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	4689      	mov	r9, r1
 80044d2:	4606      	mov	r6, r0
 80044d4:	4611      	mov	r1, r2
 80044d6:	4648      	mov	r0, r9
 80044d8:	4614      	mov	r4, r2
 80044da:	f7ff ffdb 	bl	8004494 <__mcmp>
 80044de:	1e05      	subs	r5, r0, #0
 80044e0:	d112      	bne.n	8004508 <__mdiff+0x3c>
 80044e2:	4629      	mov	r1, r5
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff fd63 	bl	8003fb0 <_Balloc>
 80044ea:	4602      	mov	r2, r0
 80044ec:	b928      	cbnz	r0, 80044fa <__mdiff+0x2e>
 80044ee:	4b3f      	ldr	r3, [pc, #252]	@ (80045ec <__mdiff+0x120>)
 80044f0:	f240 2137 	movw	r1, #567	@ 0x237
 80044f4:	483e      	ldr	r0, [pc, #248]	@ (80045f0 <__mdiff+0x124>)
 80044f6:	f000 fa23 	bl	8004940 <__assert_func>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004500:	4610      	mov	r0, r2
 8004502:	b003      	add	sp, #12
 8004504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004508:	bfbc      	itt	lt
 800450a:	464b      	movlt	r3, r9
 800450c:	46a1      	movlt	r9, r4
 800450e:	4630      	mov	r0, r6
 8004510:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004514:	bfba      	itte	lt
 8004516:	461c      	movlt	r4, r3
 8004518:	2501      	movlt	r5, #1
 800451a:	2500      	movge	r5, #0
 800451c:	f7ff fd48 	bl	8003fb0 <_Balloc>
 8004520:	4602      	mov	r2, r0
 8004522:	b918      	cbnz	r0, 800452c <__mdiff+0x60>
 8004524:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <__mdiff+0x120>)
 8004526:	f240 2145 	movw	r1, #581	@ 0x245
 800452a:	e7e3      	b.n	80044f4 <__mdiff+0x28>
 800452c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004530:	6926      	ldr	r6, [r4, #16]
 8004532:	60c5      	str	r5, [r0, #12]
 8004534:	f109 0310 	add.w	r3, r9, #16
 8004538:	f109 0514 	add.w	r5, r9, #20
 800453c:	f104 0e14 	add.w	lr, r4, #20
 8004540:	f100 0b14 	add.w	fp, r0, #20
 8004544:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004548:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	46d9      	mov	r9, fp
 8004550:	f04f 0c00 	mov.w	ip, #0
 8004554:	9b01      	ldr	r3, [sp, #4]
 8004556:	f85e 0b04 	ldr.w	r0, [lr], #4
 800455a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	fa1f f38a 	uxth.w	r3, sl
 8004564:	4619      	mov	r1, r3
 8004566:	b283      	uxth	r3, r0
 8004568:	1acb      	subs	r3, r1, r3
 800456a:	0c00      	lsrs	r0, r0, #16
 800456c:	4463      	add	r3, ip
 800456e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004572:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800457c:	4576      	cmp	r6, lr
 800457e:	f849 3b04 	str.w	r3, [r9], #4
 8004582:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004586:	d8e5      	bhi.n	8004554 <__mdiff+0x88>
 8004588:	1b33      	subs	r3, r6, r4
 800458a:	3b15      	subs	r3, #21
 800458c:	f023 0303 	bic.w	r3, r3, #3
 8004590:	3415      	adds	r4, #21
 8004592:	3304      	adds	r3, #4
 8004594:	42a6      	cmp	r6, r4
 8004596:	bf38      	it	cc
 8004598:	2304      	movcc	r3, #4
 800459a:	441d      	add	r5, r3
 800459c:	445b      	add	r3, fp
 800459e:	461e      	mov	r6, r3
 80045a0:	462c      	mov	r4, r5
 80045a2:	4544      	cmp	r4, r8
 80045a4:	d30e      	bcc.n	80045c4 <__mdiff+0xf8>
 80045a6:	f108 0103 	add.w	r1, r8, #3
 80045aa:	1b49      	subs	r1, r1, r5
 80045ac:	f021 0103 	bic.w	r1, r1, #3
 80045b0:	3d03      	subs	r5, #3
 80045b2:	45a8      	cmp	r8, r5
 80045b4:	bf38      	it	cc
 80045b6:	2100      	movcc	r1, #0
 80045b8:	440b      	add	r3, r1
 80045ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80045be:	b191      	cbz	r1, 80045e6 <__mdiff+0x11a>
 80045c0:	6117      	str	r7, [r2, #16]
 80045c2:	e79d      	b.n	8004500 <__mdiff+0x34>
 80045c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80045c8:	46e6      	mov	lr, ip
 80045ca:	0c08      	lsrs	r0, r1, #16
 80045cc:	fa1c fc81 	uxtah	ip, ip, r1
 80045d0:	4471      	add	r1, lr
 80045d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80045d6:	b289      	uxth	r1, r1
 80045d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80045dc:	f846 1b04 	str.w	r1, [r6], #4
 80045e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80045e4:	e7dd      	b.n	80045a2 <__mdiff+0xd6>
 80045e6:	3f01      	subs	r7, #1
 80045e8:	e7e7      	b.n	80045ba <__mdiff+0xee>
 80045ea:	bf00      	nop
 80045ec:	08004e56 	.word	0x08004e56
 80045f0:	08004e67 	.word	0x08004e67

080045f4 <__d2b>:
 80045f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80045f8:	460f      	mov	r7, r1
 80045fa:	2101      	movs	r1, #1
 80045fc:	ec59 8b10 	vmov	r8, r9, d0
 8004600:	4616      	mov	r6, r2
 8004602:	f7ff fcd5 	bl	8003fb0 <_Balloc>
 8004606:	4604      	mov	r4, r0
 8004608:	b930      	cbnz	r0, 8004618 <__d2b+0x24>
 800460a:	4602      	mov	r2, r0
 800460c:	4b23      	ldr	r3, [pc, #140]	@ (800469c <__d2b+0xa8>)
 800460e:	4824      	ldr	r0, [pc, #144]	@ (80046a0 <__d2b+0xac>)
 8004610:	f240 310f 	movw	r1, #783	@ 0x30f
 8004614:	f000 f994 	bl	8004940 <__assert_func>
 8004618:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800461c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004620:	b10d      	cbz	r5, 8004626 <__d2b+0x32>
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	f1b8 0300 	subs.w	r3, r8, #0
 800462c:	d023      	beq.n	8004676 <__d2b+0x82>
 800462e:	4668      	mov	r0, sp
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	f7ff fd84 	bl	800413e <__lo0bits>
 8004636:	e9dd 1200 	ldrd	r1, r2, [sp]
 800463a:	b1d0      	cbz	r0, 8004672 <__d2b+0x7e>
 800463c:	f1c0 0320 	rsb	r3, r0, #32
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	430b      	orrs	r3, r1
 8004646:	40c2      	lsrs	r2, r0
 8004648:	6163      	str	r3, [r4, #20]
 800464a:	9201      	str	r2, [sp, #4]
 800464c:	9b01      	ldr	r3, [sp, #4]
 800464e:	61a3      	str	r3, [r4, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2201      	moveq	r2, #1
 8004656:	2202      	movne	r2, #2
 8004658:	6122      	str	r2, [r4, #16]
 800465a:	b1a5      	cbz	r5, 8004686 <__d2b+0x92>
 800465c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004660:	4405      	add	r5, r0
 8004662:	603d      	str	r5, [r7, #0]
 8004664:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004668:	6030      	str	r0, [r6, #0]
 800466a:	4620      	mov	r0, r4
 800466c:	b003      	add	sp, #12
 800466e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004672:	6161      	str	r1, [r4, #20]
 8004674:	e7ea      	b.n	800464c <__d2b+0x58>
 8004676:	a801      	add	r0, sp, #4
 8004678:	f7ff fd61 	bl	800413e <__lo0bits>
 800467c:	9b01      	ldr	r3, [sp, #4]
 800467e:	6163      	str	r3, [r4, #20]
 8004680:	3020      	adds	r0, #32
 8004682:	2201      	movs	r2, #1
 8004684:	e7e8      	b.n	8004658 <__d2b+0x64>
 8004686:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800468a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800468e:	6038      	str	r0, [r7, #0]
 8004690:	6918      	ldr	r0, [r3, #16]
 8004692:	f7ff fd35 	bl	8004100 <__hi0bits>
 8004696:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800469a:	e7e5      	b.n	8004668 <__d2b+0x74>
 800469c:	08004e56 	.word	0x08004e56
 80046a0:	08004e67 	.word	0x08004e67

080046a4 <__sflush_r>:
 80046a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ac:	0716      	lsls	r6, r2, #28
 80046ae:	4605      	mov	r5, r0
 80046b0:	460c      	mov	r4, r1
 80046b2:	d454      	bmi.n	800475e <__sflush_r+0xba>
 80046b4:	684b      	ldr	r3, [r1, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dc02      	bgt.n	80046c0 <__sflush_r+0x1c>
 80046ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	dd48      	ble.n	8004752 <__sflush_r+0xae>
 80046c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d045      	beq.n	8004752 <__sflush_r+0xae>
 80046c6:	2300      	movs	r3, #0
 80046c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046cc:	682f      	ldr	r7, [r5, #0]
 80046ce:	6a21      	ldr	r1, [r4, #32]
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	d030      	beq.n	8004736 <__sflush_r+0x92>
 80046d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	0759      	lsls	r1, r3, #29
 80046da:	d505      	bpl.n	80046e8 <__sflush_r+0x44>
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046e2:	b10b      	cbz	r3, 80046e8 <__sflush_r+0x44>
 80046e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	2300      	movs	r3, #0
 80046ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b0      	blx	r6
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	d106      	bne.n	8004706 <__sflush_r+0x62>
 80046f8:	6829      	ldr	r1, [r5, #0]
 80046fa:	291d      	cmp	r1, #29
 80046fc:	d82b      	bhi.n	8004756 <__sflush_r+0xb2>
 80046fe:	4a2a      	ldr	r2, [pc, #168]	@ (80047a8 <__sflush_r+0x104>)
 8004700:	40ca      	lsrs	r2, r1
 8004702:	07d6      	lsls	r6, r2, #31
 8004704:	d527      	bpl.n	8004756 <__sflush_r+0xb2>
 8004706:	2200      	movs	r2, #0
 8004708:	6062      	str	r2, [r4, #4]
 800470a:	04d9      	lsls	r1, r3, #19
 800470c:	6922      	ldr	r2, [r4, #16]
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	d504      	bpl.n	800471c <__sflush_r+0x78>
 8004712:	1c42      	adds	r2, r0, #1
 8004714:	d101      	bne.n	800471a <__sflush_r+0x76>
 8004716:	682b      	ldr	r3, [r5, #0]
 8004718:	b903      	cbnz	r3, 800471c <__sflush_r+0x78>
 800471a:	6560      	str	r0, [r4, #84]	@ 0x54
 800471c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800471e:	602f      	str	r7, [r5, #0]
 8004720:	b1b9      	cbz	r1, 8004752 <__sflush_r+0xae>
 8004722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004726:	4299      	cmp	r1, r3
 8004728:	d002      	beq.n	8004730 <__sflush_r+0x8c>
 800472a:	4628      	mov	r0, r5
 800472c:	f7ff fb40 	bl	8003db0 <_free_r>
 8004730:	2300      	movs	r3, #0
 8004732:	6363      	str	r3, [r4, #52]	@ 0x34
 8004734:	e00d      	b.n	8004752 <__sflush_r+0xae>
 8004736:	2301      	movs	r3, #1
 8004738:	4628      	mov	r0, r5
 800473a:	47b0      	blx	r6
 800473c:	4602      	mov	r2, r0
 800473e:	1c50      	adds	r0, r2, #1
 8004740:	d1c9      	bne.n	80046d6 <__sflush_r+0x32>
 8004742:	682b      	ldr	r3, [r5, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0c6      	beq.n	80046d6 <__sflush_r+0x32>
 8004748:	2b1d      	cmp	r3, #29
 800474a:	d001      	beq.n	8004750 <__sflush_r+0xac>
 800474c:	2b16      	cmp	r3, #22
 800474e:	d11e      	bne.n	800478e <__sflush_r+0xea>
 8004750:	602f      	str	r7, [r5, #0]
 8004752:	2000      	movs	r0, #0
 8004754:	e022      	b.n	800479c <__sflush_r+0xf8>
 8004756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800475a:	b21b      	sxth	r3, r3
 800475c:	e01b      	b.n	8004796 <__sflush_r+0xf2>
 800475e:	690f      	ldr	r7, [r1, #16]
 8004760:	2f00      	cmp	r7, #0
 8004762:	d0f6      	beq.n	8004752 <__sflush_r+0xae>
 8004764:	0793      	lsls	r3, r2, #30
 8004766:	680e      	ldr	r6, [r1, #0]
 8004768:	bf08      	it	eq
 800476a:	694b      	ldreq	r3, [r1, #20]
 800476c:	600f      	str	r7, [r1, #0]
 800476e:	bf18      	it	ne
 8004770:	2300      	movne	r3, #0
 8004772:	eba6 0807 	sub.w	r8, r6, r7
 8004776:	608b      	str	r3, [r1, #8]
 8004778:	f1b8 0f00 	cmp.w	r8, #0
 800477c:	dde9      	ble.n	8004752 <__sflush_r+0xae>
 800477e:	6a21      	ldr	r1, [r4, #32]
 8004780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004782:	4643      	mov	r3, r8
 8004784:	463a      	mov	r2, r7
 8004786:	4628      	mov	r0, r5
 8004788:	47b0      	blx	r6
 800478a:	2800      	cmp	r0, #0
 800478c:	dc08      	bgt.n	80047a0 <__sflush_r+0xfc>
 800478e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	4407      	add	r7, r0
 80047a2:	eba8 0800 	sub.w	r8, r8, r0
 80047a6:	e7e7      	b.n	8004778 <__sflush_r+0xd4>
 80047a8:	20400001 	.word	0x20400001

080047ac <_fflush_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	690b      	ldr	r3, [r1, #16]
 80047b0:	4605      	mov	r5, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	b913      	cbnz	r3, 80047bc <_fflush_r+0x10>
 80047b6:	2500      	movs	r5, #0
 80047b8:	4628      	mov	r0, r5
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
 80047bc:	b118      	cbz	r0, 80047c6 <_fflush_r+0x1a>
 80047be:	6a03      	ldr	r3, [r0, #32]
 80047c0:	b90b      	cbnz	r3, 80047c6 <_fflush_r+0x1a>
 80047c2:	f7fe fa05 	bl	8002bd0 <__sinit>
 80047c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f3      	beq.n	80047b6 <_fflush_r+0xa>
 80047ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047d0:	07d0      	lsls	r0, r2, #31
 80047d2:	d404      	bmi.n	80047de <_fflush_r+0x32>
 80047d4:	0599      	lsls	r1, r3, #22
 80047d6:	d402      	bmi.n	80047de <_fflush_r+0x32>
 80047d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047da:	f7fe fc8c 	bl	80030f6 <__retarget_lock_acquire_recursive>
 80047de:	4628      	mov	r0, r5
 80047e0:	4621      	mov	r1, r4
 80047e2:	f7ff ff5f 	bl	80046a4 <__sflush_r>
 80047e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047e8:	07da      	lsls	r2, r3, #31
 80047ea:	4605      	mov	r5, r0
 80047ec:	d4e4      	bmi.n	80047b8 <_fflush_r+0xc>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	059b      	lsls	r3, r3, #22
 80047f2:	d4e1      	bmi.n	80047b8 <_fflush_r+0xc>
 80047f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047f6:	f7fe fc7f 	bl	80030f8 <__retarget_lock_release_recursive>
 80047fa:	e7dd      	b.n	80047b8 <_fflush_r+0xc>

080047fc <__swhatbuf_r>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	460c      	mov	r4, r1
 8004800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004804:	2900      	cmp	r1, #0
 8004806:	b096      	sub	sp, #88	@ 0x58
 8004808:	4615      	mov	r5, r2
 800480a:	461e      	mov	r6, r3
 800480c:	da0d      	bge.n	800482a <__swhatbuf_r+0x2e>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	bf14      	ite	ne
 800481a:	2340      	movne	r3, #64	@ 0x40
 800481c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004820:	2000      	movs	r0, #0
 8004822:	6031      	str	r1, [r6, #0]
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	b016      	add	sp, #88	@ 0x58
 8004828:	bd70      	pop	{r4, r5, r6, pc}
 800482a:	466a      	mov	r2, sp
 800482c:	f000 f848 	bl	80048c0 <_fstat_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	dbec      	blt.n	800480e <__swhatbuf_r+0x12>
 8004834:	9901      	ldr	r1, [sp, #4]
 8004836:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800483a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800483e:	4259      	negs	r1, r3
 8004840:	4159      	adcs	r1, r3
 8004842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004846:	e7eb      	b.n	8004820 <__swhatbuf_r+0x24>

08004848 <__smakebuf_r>:
 8004848:	898b      	ldrh	r3, [r1, #12]
 800484a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484c:	079d      	lsls	r5, r3, #30
 800484e:	4606      	mov	r6, r0
 8004850:	460c      	mov	r4, r1
 8004852:	d507      	bpl.n	8004864 <__smakebuf_r+0x1c>
 8004854:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	6123      	str	r3, [r4, #16]
 800485c:	2301      	movs	r3, #1
 800485e:	6163      	str	r3, [r4, #20]
 8004860:	b003      	add	sp, #12
 8004862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004864:	ab01      	add	r3, sp, #4
 8004866:	466a      	mov	r2, sp
 8004868:	f7ff ffc8 	bl	80047fc <__swhatbuf_r>
 800486c:	9f00      	ldr	r7, [sp, #0]
 800486e:	4605      	mov	r5, r0
 8004870:	4639      	mov	r1, r7
 8004872:	4630      	mov	r0, r6
 8004874:	f7ff fb10 	bl	8003e98 <_malloc_r>
 8004878:	b948      	cbnz	r0, 800488e <__smakebuf_r+0x46>
 800487a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487e:	059a      	lsls	r2, r3, #22
 8004880:	d4ee      	bmi.n	8004860 <__smakebuf_r+0x18>
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	f043 0302 	orr.w	r3, r3, #2
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	e7e2      	b.n	8004854 <__smakebuf_r+0xc>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	6020      	str	r0, [r4, #0]
 8004892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	9b01      	ldr	r3, [sp, #4]
 800489a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800489e:	b15b      	cbz	r3, 80048b8 <__smakebuf_r+0x70>
 80048a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 f81d 	bl	80048e4 <_isatty_r>
 80048aa:	b128      	cbz	r0, 80048b8 <__smakebuf_r+0x70>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	431d      	orrs	r5, r3
 80048bc:	81a5      	strh	r5, [r4, #12]
 80048be:	e7cf      	b.n	8004860 <__smakebuf_r+0x18>

080048c0 <_fstat_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	@ (80048e0 <_fstat_r+0x20>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	602b      	str	r3, [r5, #0]
 80048ce:	f7fd fbb8 	bl	8002042 <_fstat>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d102      	bne.n	80048dc <_fstat_r+0x1c>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	b103      	cbz	r3, 80048dc <_fstat_r+0x1c>
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000424 	.word	0x20000424

080048e4 <_isatty_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	@ (8004900 <_isatty_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fd fbb7 	bl	8002062 <_isatty>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_isatty_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_isatty_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000424 	.word	0x20000424

08004904 <_sbrk_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d06      	ldr	r5, [pc, #24]	@ (8004920 <_sbrk_r+0x1c>)
 8004908:	2300      	movs	r3, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f000 fa06 	bl	8004d20 <_sbrk>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_sbrk_r+0x1a>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_sbrk_r+0x1a>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	20000424 	.word	0x20000424

08004924 <memcpy>:
 8004924:	440a      	add	r2, r1
 8004926:	4291      	cmp	r1, r2
 8004928:	f100 33ff 	add.w	r3, r0, #4294967295
 800492c:	d100      	bne.n	8004930 <memcpy+0xc>
 800492e:	4770      	bx	lr
 8004930:	b510      	push	{r4, lr}
 8004932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800493a:	4291      	cmp	r1, r2
 800493c:	d1f9      	bne.n	8004932 <memcpy+0xe>
 800493e:	bd10      	pop	{r4, pc}

08004940 <__assert_func>:
 8004940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004942:	4614      	mov	r4, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <__assert_func+0x2c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4605      	mov	r5, r0
 800494c:	68d8      	ldr	r0, [r3, #12]
 800494e:	b14c      	cbz	r4, 8004964 <__assert_func+0x24>
 8004950:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <__assert_func+0x30>)
 8004952:	9100      	str	r1, [sp, #0]
 8004954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004958:	4906      	ldr	r1, [pc, #24]	@ (8004974 <__assert_func+0x34>)
 800495a:	462b      	mov	r3, r5
 800495c:	f000 f842 	bl	80049e4 <fiprintf>
 8004960:	f000 f852 	bl	8004a08 <abort>
 8004964:	4b04      	ldr	r3, [pc, #16]	@ (8004978 <__assert_func+0x38>)
 8004966:	461c      	mov	r4, r3
 8004968:	e7f3      	b.n	8004952 <__assert_func+0x12>
 800496a:	bf00      	nop
 800496c:	2000000c 	.word	0x2000000c
 8004970:	08004eca 	.word	0x08004eca
 8004974:	08004ed7 	.word	0x08004ed7
 8004978:	08004f05 	.word	0x08004f05

0800497c <_calloc_r>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	fba1 5402 	umull	r5, r4, r1, r2
 8004982:	b934      	cbnz	r4, 8004992 <_calloc_r+0x16>
 8004984:	4629      	mov	r1, r5
 8004986:	f7ff fa87 	bl	8003e98 <_malloc_r>
 800498a:	4606      	mov	r6, r0
 800498c:	b928      	cbnz	r0, 800499a <_calloc_r+0x1e>
 800498e:	4630      	mov	r0, r6
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	220c      	movs	r2, #12
 8004994:	6002      	str	r2, [r0, #0]
 8004996:	2600      	movs	r6, #0
 8004998:	e7f9      	b.n	800498e <_calloc_r+0x12>
 800499a:	462a      	mov	r2, r5
 800499c:	4621      	mov	r1, r4
 800499e:	f7fe fb3f 	bl	8003020 <memset>
 80049a2:	e7f4      	b.n	800498e <_calloc_r+0x12>

080049a4 <__ascii_mbtowc>:
 80049a4:	b082      	sub	sp, #8
 80049a6:	b901      	cbnz	r1, 80049aa <__ascii_mbtowc+0x6>
 80049a8:	a901      	add	r1, sp, #4
 80049aa:	b142      	cbz	r2, 80049be <__ascii_mbtowc+0x1a>
 80049ac:	b14b      	cbz	r3, 80049c2 <__ascii_mbtowc+0x1e>
 80049ae:	7813      	ldrb	r3, [r2, #0]
 80049b0:	600b      	str	r3, [r1, #0]
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	1e10      	subs	r0, r2, #0
 80049b6:	bf18      	it	ne
 80049b8:	2001      	movne	r0, #1
 80049ba:	b002      	add	sp, #8
 80049bc:	4770      	bx	lr
 80049be:	4610      	mov	r0, r2
 80049c0:	e7fb      	b.n	80049ba <__ascii_mbtowc+0x16>
 80049c2:	f06f 0001 	mvn.w	r0, #1
 80049c6:	e7f8      	b.n	80049ba <__ascii_mbtowc+0x16>

080049c8 <__ascii_wctomb>:
 80049c8:	4603      	mov	r3, r0
 80049ca:	4608      	mov	r0, r1
 80049cc:	b141      	cbz	r1, 80049e0 <__ascii_wctomb+0x18>
 80049ce:	2aff      	cmp	r2, #255	@ 0xff
 80049d0:	d904      	bls.n	80049dc <__ascii_wctomb+0x14>
 80049d2:	228a      	movs	r2, #138	@ 0x8a
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
 80049da:	4770      	bx	lr
 80049dc:	700a      	strb	r2, [r1, #0]
 80049de:	2001      	movs	r0, #1
 80049e0:	4770      	bx	lr
	...

080049e4 <fiprintf>:
 80049e4:	b40e      	push	{r1, r2, r3}
 80049e6:	b503      	push	{r0, r1, lr}
 80049e8:	4601      	mov	r1, r0
 80049ea:	ab03      	add	r3, sp, #12
 80049ec:	4805      	ldr	r0, [pc, #20]	@ (8004a04 <fiprintf+0x20>)
 80049ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f2:	6800      	ldr	r0, [r0, #0]
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	f000 f837 	bl	8004a68 <_vfiprintf_r>
 80049fa:	b002      	add	sp, #8
 80049fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a00:	b003      	add	sp, #12
 8004a02:	4770      	bx	lr
 8004a04:	2000000c 	.word	0x2000000c

08004a08 <abort>:
 8004a08:	b508      	push	{r3, lr}
 8004a0a:	2006      	movs	r0, #6
 8004a0c:	f000 f96c 	bl	8004ce8 <raise>
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7fd fae2 	bl	8001fda <_exit>

08004a16 <__sfputc_r>:
 8004a16:	6893      	ldr	r3, [r2, #8]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	b410      	push	{r4}
 8004a1e:	6093      	str	r3, [r2, #8]
 8004a20:	da08      	bge.n	8004a34 <__sfputc_r+0x1e>
 8004a22:	6994      	ldr	r4, [r2, #24]
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	db01      	blt.n	8004a2c <__sfputc_r+0x16>
 8004a28:	290a      	cmp	r1, #10
 8004a2a:	d103      	bne.n	8004a34 <__sfputc_r+0x1e>
 8004a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a30:	f7fe ba61 	b.w	8002ef6 <__swbuf_r>
 8004a34:	6813      	ldr	r3, [r2, #0]
 8004a36:	1c58      	adds	r0, r3, #1
 8004a38:	6010      	str	r0, [r2, #0]
 8004a3a:	7019      	strb	r1, [r3, #0]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <__sfputs_r>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	4606      	mov	r6, r0
 8004a48:	460f      	mov	r7, r1
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	18d5      	adds	r5, r2, r3
 8004a4e:	42ac      	cmp	r4, r5
 8004a50:	d101      	bne.n	8004a56 <__sfputs_r+0x12>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e007      	b.n	8004a66 <__sfputs_r+0x22>
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff ffda 	bl	8004a16 <__sfputc_r>
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	d1f3      	bne.n	8004a4e <__sfputs_r+0xa>
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a68 <_vfiprintf_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	b09d      	sub	sp, #116	@ 0x74
 8004a70:	4614      	mov	r4, r2
 8004a72:	4698      	mov	r8, r3
 8004a74:	4606      	mov	r6, r0
 8004a76:	b118      	cbz	r0, 8004a80 <_vfiprintf_r+0x18>
 8004a78:	6a03      	ldr	r3, [r0, #32]
 8004a7a:	b90b      	cbnz	r3, 8004a80 <_vfiprintf_r+0x18>
 8004a7c:	f7fe f8a8 	bl	8002bd0 <__sinit>
 8004a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a82:	07d9      	lsls	r1, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	059a      	lsls	r2, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a8e:	f7fe fb32 	bl	80030f6 <__retarget_lock_acquire_recursive>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	d501      	bpl.n	8004a9c <_vfiprintf_r+0x34>
 8004a98:	692b      	ldr	r3, [r5, #16]
 8004a9a:	b99b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x5c>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7fe fa68 	bl	8002f74 <__swsetup_r>
 8004aa4:	b170      	cbz	r0, 8004ac4 <_vfiprintf_r+0x5c>
 8004aa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa8:	07dc      	lsls	r4, r3, #31
 8004aaa:	d504      	bpl.n	8004ab6 <_vfiprintf_r+0x4e>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	b01d      	add	sp, #116	@ 0x74
 8004ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	0598      	lsls	r0, r3, #22
 8004aba:	d4f7      	bmi.n	8004aac <_vfiprintf_r+0x44>
 8004abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004abe:	f7fe fb1b 	bl	80030f8 <__retarget_lock_release_recursive>
 8004ac2:	e7f3      	b.n	8004aac <_vfiprintf_r+0x44>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac8:	2320      	movs	r3, #32
 8004aca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ad2:	2330      	movs	r3, #48	@ 0x30
 8004ad4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c84 <_vfiprintf_r+0x21c>
 8004ad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004adc:	f04f 0901 	mov.w	r9, #1
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae8:	b10a      	cbz	r2, 8004aee <_vfiprintf_r+0x86>
 8004aea:	2a25      	cmp	r2, #37	@ 0x25
 8004aec:	d1f9      	bne.n	8004ae2 <_vfiprintf_r+0x7a>
 8004aee:	ebba 0b04 	subs.w	fp, sl, r4
 8004af2:	d00b      	beq.n	8004b0c <_vfiprintf_r+0xa4>
 8004af4:	465b      	mov	r3, fp
 8004af6:	4622      	mov	r2, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff ffa2 	bl	8004a44 <__sfputs_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f000 80a7 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b08:	445a      	add	r2, fp
 8004b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 809f 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004b16:	2300      	movs	r3, #0
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b20:	f10a 0a01 	add.w	sl, sl, #1
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b2e:	4654      	mov	r4, sl
 8004b30:	2205      	movs	r2, #5
 8004b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b36:	4853      	ldr	r0, [pc, #332]	@ (8004c84 <_vfiprintf_r+0x21c>)
 8004b38:	f7fb fb4a 	bl	80001d0 <memchr>
 8004b3c:	9a04      	ldr	r2, [sp, #16]
 8004b3e:	b9d8      	cbnz	r0, 8004b78 <_vfiprintf_r+0x110>
 8004b40:	06d1      	lsls	r1, r2, #27
 8004b42:	bf44      	itt	mi
 8004b44:	2320      	movmi	r3, #32
 8004b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b4a:	0713      	lsls	r3, r2, #28
 8004b4c:	bf44      	itt	mi
 8004b4e:	232b      	movmi	r3, #43	@ 0x2b
 8004b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b54:	f89a 3000 	ldrb.w	r3, [sl]
 8004b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b5a:	d015      	beq.n	8004b88 <_vfiprintf_r+0x120>
 8004b5c:	9a07      	ldr	r2, [sp, #28]
 8004b5e:	4654      	mov	r4, sl
 8004b60:	2000      	movs	r0, #0
 8004b62:	f04f 0c0a 	mov.w	ip, #10
 8004b66:	4621      	mov	r1, r4
 8004b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b6c:	3b30      	subs	r3, #48	@ 0x30
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	d94b      	bls.n	8004c0a <_vfiprintf_r+0x1a2>
 8004b72:	b1b0      	cbz	r0, 8004ba2 <_vfiprintf_r+0x13a>
 8004b74:	9207      	str	r2, [sp, #28]
 8004b76:	e014      	b.n	8004ba2 <_vfiprintf_r+0x13a>
 8004b78:	eba0 0308 	sub.w	r3, r0, r8
 8004b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	46a2      	mov	sl, r4
 8004b86:	e7d2      	b.n	8004b2e <_vfiprintf_r+0xc6>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	1d19      	adds	r1, r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfbb      	ittet	lt
 8004b94:	425b      	neglt	r3, r3
 8004b96:	f042 0202 	orrlt.w	r2, r2, #2
 8004b9a:	9307      	strge	r3, [sp, #28]
 8004b9c:	9307      	strlt	r3, [sp, #28]
 8004b9e:	bfb8      	it	lt
 8004ba0:	9204      	strlt	r2, [sp, #16]
 8004ba2:	7823      	ldrb	r3, [r4, #0]
 8004ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ba6:	d10a      	bne.n	8004bbe <_vfiprintf_r+0x156>
 8004ba8:	7863      	ldrb	r3, [r4, #1]
 8004baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bac:	d132      	bne.n	8004c14 <_vfiprintf_r+0x1ac>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	9203      	str	r2, [sp, #12]
 8004bb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bba:	3402      	adds	r4, #2
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c94 <_vfiprintf_r+0x22c>
 8004bc2:	7821      	ldrb	r1, [r4, #0]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	f7fb fb02 	bl	80001d0 <memchr>
 8004bcc:	b138      	cbz	r0, 8004bde <_vfiprintf_r+0x176>
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	eba0 000a 	sub.w	r0, r0, sl
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	4082      	lsls	r2, r0
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	3401      	adds	r4, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be2:	4829      	ldr	r0, [pc, #164]	@ (8004c88 <_vfiprintf_r+0x220>)
 8004be4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004be8:	2206      	movs	r2, #6
 8004bea:	f7fb faf1 	bl	80001d0 <memchr>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d03f      	beq.n	8004c72 <_vfiprintf_r+0x20a>
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <_vfiprintf_r+0x224>)
 8004bf4:	bb1b      	cbnz	r3, 8004c3e <_vfiprintf_r+0x1d6>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	3308      	adds	r3, #8
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c04:	443b      	add	r3, r7
 8004c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c08:	e76a      	b.n	8004ae0 <_vfiprintf_r+0x78>
 8004c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c0e:	460c      	mov	r4, r1
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7a8      	b.n	8004b66 <_vfiprintf_r+0xfe>
 8004c14:	2300      	movs	r3, #0
 8004c16:	3401      	adds	r4, #1
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4620      	mov	r0, r4
 8004c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c26:	3a30      	subs	r2, #48	@ 0x30
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d903      	bls.n	8004c34 <_vfiprintf_r+0x1cc>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0c6      	beq.n	8004bbe <_vfiprintf_r+0x156>
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	e7c4      	b.n	8004bbe <_vfiprintf_r+0x156>
 8004c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c38:	4604      	mov	r4, r0
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7f0      	b.n	8004c20 <_vfiprintf_r+0x1b8>
 8004c3e:	ab03      	add	r3, sp, #12
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	462a      	mov	r2, r5
 8004c44:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <_vfiprintf_r+0x228>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7fd fb7f 	bl	800234c <_printf_float>
 8004c4e:	4607      	mov	r7, r0
 8004c50:	1c78      	adds	r0, r7, #1
 8004c52:	d1d6      	bne.n	8004c02 <_vfiprintf_r+0x19a>
 8004c54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c56:	07d9      	lsls	r1, r3, #31
 8004c58:	d405      	bmi.n	8004c66 <_vfiprintf_r+0x1fe>
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	059a      	lsls	r2, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_vfiprintf_r+0x1fe>
 8004c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c62:	f7fe fa49 	bl	80030f8 <__retarget_lock_release_recursive>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	065b      	lsls	r3, r3, #25
 8004c6a:	f53f af1f 	bmi.w	8004aac <_vfiprintf_r+0x44>
 8004c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c70:	e71e      	b.n	8004ab0 <_vfiprintf_r+0x48>
 8004c72:	ab03      	add	r3, sp, #12
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	462a      	mov	r2, r5
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <_vfiprintf_r+0x228>)
 8004c7a:	a904      	add	r1, sp, #16
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7fd fdfd 	bl	800287c <_printf_i>
 8004c82:	e7e4      	b.n	8004c4e <_vfiprintf_r+0x1e6>
 8004c84:	08004f06 	.word	0x08004f06
 8004c88:	08004f10 	.word	0x08004f10
 8004c8c:	0800234d 	.word	0x0800234d
 8004c90:	08004a45 	.word	0x08004a45
 8004c94:	08004f0c 	.word	0x08004f0c

08004c98 <_raise_r>:
 8004c98:	291f      	cmp	r1, #31
 8004c9a:	b538      	push	{r3, r4, r5, lr}
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	d904      	bls.n	8004cac <_raise_r+0x14>
 8004ca2:	2316      	movs	r3, #22
 8004ca4:	6003      	str	r3, [r0, #0]
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004cae:	b112      	cbz	r2, 8004cb6 <_raise_r+0x1e>
 8004cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cb4:	b94b      	cbnz	r3, 8004cca <_raise_r+0x32>
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 f830 	bl	8004d1c <_getpid_r>
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc6:	f000 b817 	b.w	8004cf8 <_kill_r>
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d00a      	beq.n	8004ce4 <_raise_r+0x4c>
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	d103      	bne.n	8004cda <_raise_r+0x42>
 8004cd2:	2316      	movs	r3, #22
 8004cd4:	6003      	str	r3, [r0, #0]
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7e7      	b.n	8004caa <_raise_r+0x12>
 8004cda:	2100      	movs	r1, #0
 8004cdc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	4798      	blx	r3
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e7e0      	b.n	8004caa <_raise_r+0x12>

08004ce8 <raise>:
 8004ce8:	4b02      	ldr	r3, [pc, #8]	@ (8004cf4 <raise+0xc>)
 8004cea:	4601      	mov	r1, r0
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f7ff bfd3 	b.w	8004c98 <_raise_r>
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c

08004cf8 <_kill_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	@ (8004d18 <_kill_r+0x20>)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f7fd f958 	bl	8001fba <_kill>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d102      	bne.n	8004d14 <_kill_r+0x1c>
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	b103      	cbz	r3, 8004d14 <_kill_r+0x1c>
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	bf00      	nop
 8004d18:	20000424 	.word	0x20000424

08004d1c <_getpid_r>:
 8004d1c:	f7fd b945 	b.w	8001faa <_getpid>

08004d20 <_sbrk>:
 8004d20:	4a04      	ldr	r2, [pc, #16]	@ (8004d34 <_sbrk+0x14>)
 8004d22:	6811      	ldr	r1, [r2, #0]
 8004d24:	4603      	mov	r3, r0
 8004d26:	b909      	cbnz	r1, 8004d2c <_sbrk+0xc>
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <_sbrk+0x18>)
 8004d2a:	6011      	str	r1, [r2, #0]
 8004d2c:	6810      	ldr	r0, [r2, #0]
 8004d2e:	4403      	add	r3, r0
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4770      	bx	lr
 8004d34:	20000434 	.word	0x20000434
 8004d38:	20000438 	.word	0x20000438

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
