
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  080054e8  080054e8  000064e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a6c  08005a6c  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a74  08005a74  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a78  08005a78  00006a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08005a7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001c8  08005c44  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08005c44  0000763c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a4  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e74  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00012210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008df  00000000  00000000  00012e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000055d2  00000000  00000000  000136e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5cd  00000000  00000000  00018cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c3db  00000000  00000000  00026286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00082661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  000826a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  00086a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054cc 	.word	0x080054cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	080054cc 	.word	0x080054cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8000da4 <EXTI_Init+0x1fc>)
 8000bb6:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	799b      	ldrb	r3, [r3, #6]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80d2 	beq.w	8000d66 <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bd0:	015b      	lsls	r3, r3, #5
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 031f 	and.w	r3, r3, #31
 8000bdc:	2201      	movs	r2, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	ea01 0302 	and.w	r3, r1, r2
 8000bfa:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	095b      	lsrs	r3, r3, #5
 8000c02:	015a      	lsls	r2, r3, #5
 8000c04:	4b68      	ldr	r3, [pc, #416]	@ (8000da8 <EXTI_Init+0x200>)
 8000c06:	4413      	add	r3, r2
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2201      	movs	r2, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	0158      	lsls	r0, r3, #5
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <EXTI_Init+0x200>)
 8000c24:	4403      	add	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	ea01 0302 	and.w	r3, r1, r2
 8000c2c:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	095b      	lsrs	r3, r3, #5
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000c5e:	4b51      	ldr	r3, [pc, #324]	@ (8000da4 <EXTI_Init+0x1fc>)
 8000c60:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	4b50      	ldr	r3, [pc, #320]	@ (8000dac <EXTI_Init+0x204>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	2201      	movs	r2, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	0158      	lsls	r0, r3, #5
 8000c88:	4b48      	ldr	r3, [pc, #288]	@ (8000dac <EXTI_Init+0x204>)
 8000c8a:	4403      	add	r3, r0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	ea01 0302 	and.w	r3, r1, r2
 8000c92:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	015a      	lsls	r2, r3, #5
 8000c9c:	4b44      	ldr	r3, [pc, #272]	@ (8000db0 <EXTI_Init+0x208>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	2201      	movs	r2, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	0158      	lsls	r0, r3, #5
 8000cba:	4b3d      	ldr	r3, [pc, #244]	@ (8000db0 <EXTI_Init+0x208>)
 8000cbc:	4403      	add	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	ea01 0302 	and.w	r3, r1, r2
 8000cc4:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	795b      	ldrb	r3, [r3, #5]
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d132      	bne.n	8000d34 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	015a      	lsls	r2, r3, #5
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <EXTI_Init+0x204>)
 8000cd8:	4413      	add	r3, r2
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	0159      	lsls	r1, r3, #5
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <EXTI_Init+0x204>)
 8000cf6:	440b      	add	r3, r1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	ea42 0300 	orr.w	r3, r2, r0
 8000cfe:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	015a      	lsls	r2, r3, #5
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <EXTI_Init+0x208>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	0159      	lsls	r1, r3, #5
 8000d26:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <EXTI_Init+0x208>)
 8000d28:	440b      	add	r3, r1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	ea42 0300 	orr.w	r3, r2, r0
 8000d30:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8000d32:	e030      	b.n	8000d96 <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	015b      	lsls	r3, r3, #5
 8000d42:	4413      	add	r3, r2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	e017      	b.n	8000d96 <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	015b      	lsls	r3, r3, #5
 8000d74:	4413      	add	r3, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	2201      	movs	r2, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40010400 	.word	0x40010400
 8000da8:	40010404 	.word	0x40010404
 8000dac:	40010408 	.word	0x40010408
 8000db0:	4001040c 	.word	0x4001040c

08000db4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000dcc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f002 021f 	and.w	r2, r2, #31
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	015a      	lsls	r2, r3, #5
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <EXTI_GetITStatus+0x6c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	f002 021f 	and.w	r2, r2, #31
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <EXTI_GetITStatus+0x5a>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e001      	b.n	8000e12 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40010414 	.word	0x40010414

08000e24 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f103 	lsl.w	r1, r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <EXTI_ClearITPendingBit+0x30>)
 8000e40:	4413      	add	r3, r2
 8000e42:	460a      	mov	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010414 	.word	0x40010414

08000e58 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e07c      	b.n	8000f6e <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e74:	2201      	movs	r2, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d16b      	bne.n	8000f68 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <GPIO_Init+0x48>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d134      	bne.n	8000f0a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	795b      	ldrb	r3, [r3, #5]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2301      	movs	r3, #1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	889b      	ldrh	r3, [r3, #4]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	799b      	ldrb	r3, [r3, #6]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2103      	movs	r1, #3
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2103      	movs	r1, #3
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	f67f af7f 	bls.w	8000e74 <GPIO_Init+0x1c>
    }
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	71da      	strb	r2, [r3, #7]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fd4:	e002      	b.n	8000fdc <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	887a      	ldrh	r2, [r7, #2]
 8000fda:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <NVIC_PriorityGroupConfig+0x24>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60d3      	str	r3, [r2, #12]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	78db      	ldrb	r3, [r3, #3]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d03a      	beq.n	80010a2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <NVIC_Init+0xc0>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f1c3 0304 	rsb	r3, r3, #4
 8001040:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	461a      	mov	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	789b      	ldrb	r3, [r3, #2]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <NVIC_Init+0xc4>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	6979      	ldr	r1, [r7, #20]
 8001078:	b2c9      	uxtb	r1, r1
 800107a:	4413      	add	r3, r2
 800107c:	460a      	mov	r2, r1
 800107e:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800108a:	4912      	ldr	r1, [pc, #72]	@ (80010d4 <NVIC_Init+0xc4>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	0952      	lsrs	r2, r2, #5
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001096:	2201      	movs	r2, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800109c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80010a0:	e00f      	b.n	80010c2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010aa:	490a      	ldr	r1, [pc, #40]	@ (80010d4 <NVIC_Init+0xc4>)
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	0952      	lsrs	r2, r2, #5
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80010b6:	2201      	movs	r2, #1
 80010b8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80010ba:	f100 0320 	add.w	r3, r0, #32
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	@ 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001100:	4b8b      	ldr	r3, [pc, #556]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	2b08      	cmp	r3, #8
 800110e:	d011      	beq.n	8001134 <RCC_GetClocksFreq+0x5c>
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d837      	bhi.n	8001186 <RCC_GetClocksFreq+0xae>
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <RCC_GetClocksFreq+0x4c>
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d004      	beq.n	800112c <RCC_GetClocksFreq+0x54>
 8001122:	e030      	b.n	8001186 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a83      	ldr	r2, [pc, #524]	@ (8001334 <RCC_GetClocksFreq+0x25c>)
 8001128:	601a      	str	r2, [r3, #0]
      break;
 800112a:	e030      	b.n	800118e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a81      	ldr	r2, [pc, #516]	@ (8001334 <RCC_GetClocksFreq+0x25c>)
 8001130:	601a      	str	r2, [r3, #0]
      break;
 8001132:	e02c      	b.n	800118e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001134:	4b7e      	ldr	r3, [pc, #504]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800113c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800113e:	4b7c      	ldr	r3, [pc, #496]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001146:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	0c9b      	lsrs	r3, r3, #18
 800114c:	3302      	adds	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d105      	bne.n	8001162 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	4a77      	ldr	r2, [pc, #476]	@ (8001338 <RCC_GetClocksFreq+0x260>)
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001160:	e00d      	b.n	800117e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001162:	4b73      	ldr	r3, [pc, #460]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800116e:	4a71      	ldr	r2, [pc, #452]	@ (8001334 <RCC_GetClocksFreq+0x25c>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fbb2 f2f3 	udiv	r2, r2, r3
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001182:	601a      	str	r2, [r3, #0]
      break;
 8001184:	e003      	b.n	800118e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a6a      	ldr	r2, [pc, #424]	@ (8001334 <RCC_GetClocksFreq+0x25c>)
 800118a:	601a      	str	r2, [r3, #0]
      break;
 800118c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800118e:	4b68      	ldr	r3, [pc, #416]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001196:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800119e:	4a67      	ldr	r2, [pc, #412]	@ (800133c <RCC_GetClocksFreq+0x264>)
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	40da      	lsrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80011b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80011be:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80011c6:	4a5d      	ldr	r2, [pc, #372]	@ (800133c <RCC_GetClocksFreq+0x264>)
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	40da      	lsrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80011de:	4b54      	ldr	r3, [pc, #336]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80011e6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	0adb      	lsrs	r3, r3, #11
 80011ec:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80011ee:	4a53      	ldr	r2, [pc, #332]	@ (800133c <RCC_GetClocksFreq+0x264>)
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	40da      	lsrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8001206:	4b4a      	ldr	r3, [pc, #296]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800120e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001216:	4a4a      	ldr	r2, [pc, #296]	@ (8001340 <RCC_GetClocksFreq+0x268>)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800121e:	b29b      	uxth	r3, r3
 8001220:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800122c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	fbb2 f2f3 	udiv	r2, r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	e003      	b.n	8001242 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001246:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800124a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	0a5b      	lsrs	r3, r3, #9
 8001250:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001252:	4a3b      	ldr	r2, [pc, #236]	@ (8001340 <RCC_GetClocksFreq+0x268>)
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	b29b      	uxth	r3, r3
 800125c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	e003      	b.n	800127e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800127e:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a29      	ldr	r2, [pc, #164]	@ (8001334 <RCC_GetClocksFreq+0x25c>)
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	e003      	b.n	800129a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d003      	beq.n	80012ae <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <RCC_GetClocksFreq+0x25c>)
 80012aa:	61da      	str	r2, [r3, #28]
 80012ac:	e003      	b.n	80012b6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012c2:	d10d      	bne.n	80012e0 <RCC_GetClocksFreq+0x208>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d108      	bne.n	80012e0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d104      	bne.n	80012e0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	005a      	lsls	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	621a      	str	r2, [r3, #32]
 80012de:	e003      	b.n	80012e8 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f4:	d10d      	bne.n	8001312 <RCC_GetClocksFreq+0x23a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d108      	bne.n	8001312 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	429a      	cmp	r2, r3
 8001306:	d104      	bne.n	8001312 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	005a      	lsls	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001310:	e003      	b.n	800131a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <RCC_GetClocksFreq+0x258>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10e      	bne.n	8001344 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
 800132e:	e028      	b.n	8001382 <RCC_GetClocksFreq+0x2aa>
 8001330:	40021000 	.word	0x40021000
 8001334:	007a1200 	.word	0x007a1200
 8001338:	003d0900 	.word	0x003d0900
 800133c:	080054f0 	.word	0x080054f0
 8001340:	08005500 	.word	0x08005500
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001344:	4b6c      	ldr	r3, [pc, #432]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d104      	bne.n	800135a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
 8001358:	e013      	b.n	8001382 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800135a:	4b67      	ldr	r3, [pc, #412]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d104      	bne.n	8001370 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800136c:	629a      	str	r2, [r3, #40]	@ 0x28
 800136e:	e008      	b.n	8001382 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001370:	4b61      	ldr	r3, [pc, #388]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d102      	bne.n	8001382 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a5f      	ldr	r2, [pc, #380]	@ (80014fc <RCC_GetClocksFreq+0x424>)
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001382:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d104      	bne.n	8001398 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001396:	e021      	b.n	80013dc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8001398:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a4:	d104      	bne.n	80013b0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ae:	e015      	b.n	80013dc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80013b0:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013bc:	d104      	bne.n	80013c8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013c6:	e009      	b.n	80013dc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80013c8:	4b4b      	ldr	r3, [pc, #300]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80013d4:	d102      	bne.n	80013dc <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <RCC_GetClocksFreq+0x424>)
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80013dc:	4b46      	ldr	r3, [pc, #280]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d104      	bne.n	80013f2 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f0:	e021      	b.n	8001436 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80013fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013fe:	d104      	bne.n	800140a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
 8001408:	e015      	b.n	8001436 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800140a:	4b3b      	ldr	r3, [pc, #236]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001412:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001416:	d104      	bne.n	8001422 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800141e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001420:	e009      	b.n	8001436 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001422:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800142a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800142e:	d102      	bne.n	8001436 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a32      	ldr	r2, [pc, #200]	@ (80014fc <RCC_GetClocksFreq+0x424>)
 8001434:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d104      	bne.n	800144c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
 800144a:	e021      	b.n	8001490 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001458:	d104      	bne.n	8001464 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
 8001462:	e015      	b.n	8001490 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800146c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001470:	d104      	bne.n	800147c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34
 800147a:	e009      	b.n	8001490 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800147c:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001484:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001488:	d102      	bne.n	8001490 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <RCC_GetClocksFreq+0x424>)
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001494:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80014a4:	e021      	b.n	80014ea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b2:	d104      	bne.n	80014be <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014bc:	e015      	b.n	80014ea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80014ca:	d104      	bne.n	80014d6 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014d2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014d4:	e009      	b.n	80014ea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <RCC_GetClocksFreq+0x420>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80014de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80014e2:	d102      	bne.n	80014ea <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <RCC_GetClocksFreq+0x424>)
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014ea:	bf00      	nop
 80014ec:	372c      	adds	r7, #44	@ 0x2c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	007a1200 	.word	0x007a1200

08001500 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <RCC_AHBPeriphClockCmd+0x3c>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	4909      	ldr	r1, [pc, #36]	@ (800153c <RCC_AHBPeriphClockCmd+0x3c>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800151e:	e006      	b.n	800152e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <RCC_AHBPeriphClockCmd+0x3c>)
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	43db      	mvns	r3, r3
 8001528:	4904      	ldr	r1, [pc, #16]	@ (800153c <RCC_AHBPeriphClockCmd+0x3c>)
 800152a:	4013      	ands	r3, r2
 800152c:	614b      	str	r3, [r1, #20]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <RCC_APB2PeriphClockCmd+0x3c>)
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	4909      	ldr	r1, [pc, #36]	@ (800157c <RCC_APB2PeriphClockCmd+0x3c>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4313      	orrs	r3, r2
 800155c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800155e:	e006      	b.n	800156e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <RCC_APB2PeriphClockCmd+0x3c>)
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	43db      	mvns	r3, r3
 8001568:	4904      	ldr	r1, [pc, #16]	@ (800157c <RCC_APB2PeriphClockCmd+0x3c>)
 800156a:	4013      	ands	r3, r2
 800156c:	618b      	str	r3, [r1, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000

08001580 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	330c      	adds	r3, #12
 8001598:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	701a      	strb	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	891b      	ldrh	r3, [r3, #8]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	4013      	ands	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001608:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <SYSCFG_EXTILineConfig+0x80>)
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3302      	adds	r3, #2
 8001612:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	4812      	ldr	r0, [pc, #72]	@ (8001664 <SYSCFG_EXTILineConfig+0x80>)
 800161c:	79b9      	ldrb	r1, [r7, #6]
 800161e:	0889      	lsrs	r1, r1, #2
 8001620:	b2c9      	uxtb	r1, r1
 8001622:	401a      	ands	r2, r3
 8001624:	1c8b      	adds	r3, r1, #2
 8001626:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <SYSCFG_EXTILineConfig+0x80>)
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3302      	adds	r3, #2
 8001634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001638:	79f9      	ldrb	r1, [r7, #7]
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	@ (8001664 <SYSCFG_EXTILineConfig+0x80>)
 8001648:	79b9      	ldrb	r1, [r7, #6]
 800164a:	0889      	lsrs	r1, r1, #2
 800164c:	b2c9      	uxtb	r1, r1
 800164e:	431a      	orrs	r2, r3
 8001650:	1c8b      	adds	r3, r1, #2
 8001652:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40010000 	.word	0x40010000

08001668 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	43db      	mvns	r3, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d103      	bne.n	80016fa <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	e005      	b.n	8001706 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d102      	bne.n	8001706 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3308      	adds	r3, #8
 8001704:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001718:	e006      	b.n	8001728 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43da      	mvns	r2, r3
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	3724      	adds	r7, #36	@ 0x24
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e001      	b.n	8001758 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	b29b      	uxth	r3, r3
 8001788:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001790:	2201      	movs	r2, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4013      	ands	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e00d      	b.n	80017c8 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d105      	bne.n	80017be <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e004      	b.n	80017c8 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80017ce:	2201      	movs	r2, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <USART_GetITStatus+0x8e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	74fb      	strb	r3, [r7, #19]
 80017f2:	e001      	b.n	80017f8 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2201      	movs	r2, #1
 800181a:	fa02 f103 	lsl.w	r1, r2, r3
 800181e:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <NVIC_EnableIRQ+0x30>)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	@ (800186c <uart_put_char+0x30>)
 800184e:	f7ff ff1d 	bl	800168c <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001852:	bf00      	nop
 8001854:	2180      	movs	r1, #128	@ 0x80
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <uart_put_char+0x30>)
 8001858:	f7ff ff6c 	bl	8001734 <USART_GetFlagStatus>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f8      	beq.n	8001854 <uart_put_char+0x18>
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004400 	.word	0x40004400

08001870 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e012      	b.n	80018aa <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b0a      	cmp	r3, #10
 800188e:	d102      	bne.n	8001896 <_write_r+0x26>
            uart_put_char('\r');
 8001890:	200d      	movs	r0, #13
 8001892:	f7ff ffd3 	bl	800183c <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ffcc 	bl	800183c <uart_put_char>
    for (n = 0; n < len; n++) {
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbe8      	blt.n	8001884 <_write_r+0x14>
    }

    return len;
 80018b2:	683b      	ldr	r3, [r7, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80018c0:	4915      	ldr	r1, [pc, #84]	@ (8001918 <USART2_IRQHandler+0x5c>)
 80018c2:	4816      	ldr	r0, [pc, #88]	@ (800191c <USART2_IRQHandler+0x60>)
 80018c4:	f7ff ff4f 	bl	8001766 <USART_GetITStatus>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d021      	beq.n	8001912 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <USART2_IRQHandler+0x60>)
 80018d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018d2:	b299      	uxth	r1, r3
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <USART2_IRQHandler+0x64>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	b2d0      	uxtb	r0, r2
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <USART2_IRQHandler+0x64>)
 80018e0:	7010      	strb	r0, [r2, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	b2c9      	uxtb	r1, r1
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <USART2_IRQHandler+0x68>)
 80018e8:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <USART2_IRQHandler+0x6c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2bff      	cmp	r3, #255	@ 0xff
 80018f2:	d107      	bne.n	8001904 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <USART2_IRQHandler+0x70>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <USART2_IRQHandler+0x70>)
 8001900:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001902:	e006      	b.n	8001912 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <USART2_IRQHandler+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3301      	adds	r3, #1
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <USART2_IRQHandler+0x6c>)
 8001910:	701a      	strb	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	00050105 	.word	0x00050105
 800191c:	40004400 	.word	0x40004400
 8001920:	200002e4 	.word	0x200002e4
 8001924:	200001e4 	.word	0x200001e4
 8001928:	200002e6 	.word	0x200002e6
 800192c:	200002e5 	.word	0x200002e5

08001930 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b094      	sub	sp, #80	@ 0x50
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001938:	4b86      	ldr	r3, [pc, #536]	@ (8001b54 <uart_init+0x224>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fe4b 	bl	80035dc <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001946:	4b83      	ldr	r3, [pc, #524]	@ (8001b54 <uart_init+0x224>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fe44 	bl	80035dc <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001954:	4b80      	ldr	r3, [pc, #512]	@ (8001b58 <uart_init+0x228>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4a7f      	ldr	r2, [pc, #508]	@ (8001b58 <uart_init+0x228>)
 800195a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195e:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001960:	4b7d      	ldr	r3, [pc, #500]	@ (8001b58 <uart_init+0x228>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a7c      	ldr	r2, [pc, #496]	@ (8001b58 <uart_init+0x228>)
 8001966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196a:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 800196c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001976:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800197a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 800197c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001986:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800198a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 800198c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001996:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800199a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 800199c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019a6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80019aa:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80019ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ba:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80019bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019c6:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80019ca:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80019cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019d0:	889b      	ldrh	r3, [r3, #4]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019d8:	f023 030c 	bic.w	r3, r3, #12
 80019dc:	b29b      	uxth	r3, r3
 80019de:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80019e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019e8:	8892      	ldrh	r2, [r2, #4]
 80019ea:	b292      	uxth	r2, r2
 80019ec:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80019ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019fc:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80019fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001a08:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001a0c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001a0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001a18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a1c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001a1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001a28:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001a2c:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <uart_init+0x22c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <uart_init+0x22c>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001a3a:	4b48      	ldr	r3, [pc, #288]	@ (8001b5c <uart_init+0x22c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a47      	ldr	r2, [pc, #284]	@ (8001b5c <uart_init+0x22c>)
 8001a40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a44:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001a46:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <uart_init+0x22c>)
 8001a48:	4a44      	ldr	r2, [pc, #272]	@ (8001b5c <uart_init+0x22c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001a4e:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <uart_init+0x22c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a42      	ldr	r2, [pc, #264]	@ (8001b5c <uart_init+0x22c>)
 8001a54:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a58:	f023 030c 	bic.w	r3, r3, #12
 8001a5c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b5c <uart_init+0x22c>)
 8001a60:	4a3e      	ldr	r2, [pc, #248]	@ (8001b5c <uart_init+0x22c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <uart_init+0x22c>)
 8001a68:	4a3c      	ldr	r2, [pc, #240]	@ (8001b5c <uart_init+0x22c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <uart_init+0x22c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3a      	ldr	r2, [pc, #232]	@ (8001b5c <uart_init+0x22c>)
 8001a74:	f043 030c 	orr.w	r3, r3, #12
 8001a78:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001a7a:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <uart_init+0x22c>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4a37      	ldr	r2, [pc, #220]	@ (8001b5c <uart_init+0x22c>)
 8001a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a84:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001a86:	4b35      	ldr	r3, [pc, #212]	@ (8001b5c <uart_init+0x22c>)
 8001a88:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <uart_init+0x22c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a92:	2300      	movs	r3, #0
 8001a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a96:	2300      	movs	r3, #0
 8001a98:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb1a 	bl	80010d8 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <uart_init+0x22c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab6:	005a      	lsls	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	fb01 f202 	mul.w	r2, r1, r2
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ad4:	e00d      	b.n	8001af2 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	fb01 f202 	mul.w	r2, r1, r2
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <uart_init+0x1d2>
        divider++;
 8001afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001afe:	3301      	adds	r3, #1
 8001b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <uart_init+0x22c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b1a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001b1e:	4013      	ands	r3, r2
 8001b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b22:	4313      	orrs	r3, r2
 8001b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <uart_init+0x22c>)
 8001b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <uart_init+0x22c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <uart_init+0x22c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <uart_init+0x230>)
 8001b3e:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <uart_init+0x22c>)
 8001b40:	f7ff fdb6 	bl	80016b0 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001b44:	2026      	movs	r0, #38	@ 0x26
 8001b46:	f7ff fe5f 	bl	8001808 <NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3750      	adds	r7, #80	@ 0x50
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	00050105 	.word	0x00050105

08001b64 <iniEXTIA4>:
#include "interrupt.h"

//Mostly template for now
//Keep in mind to switch the GPIOx port and EXTI_PinSourcex and the EXTI_Linex

void iniEXTIA4(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7ff fce7 	bl	8001540 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 8001b72:	2104      	movs	r1, #4
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fd35 	bl	80015e4 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b82:	2300      	movs	r3, #0
 8001b84:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 8001b86:	2308      	movs	r3, #8
 8001b88:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f80a 	bl	8000ba8 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001b94:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 8001b98:	f7ff fa26 	bl	8000fe8 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fa2e 	bl	8001010 <NVIC_Init>

}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <EXTI4_IRQHandler>:

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f7ff f8f7 	bl	8000db4 <EXTI_GetITStatus>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
        setLED('r');
 8001bcc:	2072      	movs	r0, #114	@ 0x72
 8001bce:	f000 fc67 	bl	80024a0 <setLED>
        EXTI_ClearITPendingBit(EXTI_Line4);
 8001bd2:	2004      	movs	r0, #4
 8001bd4:	f7ff f926 	bl	8000e24 <EXTI_ClearITPendingBit>
    }

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 8001be2:	2101      	movs	r1, #1
 8001be4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001be8:	f7ff fc8a 	bl	8001500 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 8001bec:	2101      	movs	r1, #1
 8001bee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001bf2:	f7ff fc85 	bl	8001500 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001bfc:	f7ff fc80 	bl	8001500 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8001c00:	463b      	mov	r3, r7
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f9be 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001c10:	2310      	movs	r3, #16
 8001c12:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f7ff f91c 	bl	8000e58 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001c20:	463b      	mov	r3, r7
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9ae 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8001c30:	2321      	movs	r3, #33	@ 0x21
 8001c32:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001c34:	463b      	mov	r3, r7
 8001c36:	4619      	mov	r1, r3
 8001c38:	480a      	ldr	r0, [pc, #40]	@ (8001c64 <initJoystick+0x88>)
 8001c3a:	f7ff f90d 	bl	8000e58 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f99f 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001c46:	2300      	movs	r3, #0
 8001c48:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001c52:	463b      	mov	r3, r7
 8001c54:	4619      	mov	r1, r3
 8001c56:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <initJoystick+0x8c>)
 8001c58:	f7ff f8fe 	bl	8000e58 <GPIO_Init>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000800 	.word	0x48000800

08001c6c <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8001c76:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <lcd_transmit_byte+0x5c>)
 8001c78:	8a9b      	ldrh	r3, [r3, #20]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <lcd_transmit_byte+0x5c>)
 8001c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001c86:	bf00      	nop
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <lcd_transmit_byte+0x60>)
 8001c8c:	f7ff fc8e 	bl	80015ac <SPI_I2S_GetFlagStatus>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d1f8      	bne.n	8001c88 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <lcd_transmit_byte+0x60>)
 8001c9c:	f7ff fc70 	bl	8001580 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8001ca0:	bf00      	nop
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4809      	ldr	r0, [pc, #36]	@ (8001ccc <lcd_transmit_byte+0x60>)
 8001ca6:	f7ff fc81 	bl	80015ac <SPI_I2S_GetFlagStatus>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d1f8      	bne.n	8001ca2 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <lcd_transmit_byte+0x5c>)
 8001cb2:	8a9b      	ldrh	r3, [r3, #20]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <lcd_transmit_byte+0x5c>)
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	8293      	strh	r3, [r2, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	48000400 	.word	0x48000400
 8001ccc:	40003800 	.word	0x40003800

08001cd0 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001cdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ce0:	8a9b      	ldrh	r3, [r3, #20]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff ffbb 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001cf6:	2010      	movs	r0, #16
 8001cf8:	f7ff ffb8 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8001cfc:	20b0      	movs	r0, #176	@ 0xb0
 8001cfe:	f7ff ffb5 	bl	8001c6c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001d02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d06:	8a9b      	ldrh	r3, [r3, #20]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e009      	b.n	8001d30 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ffa1 	bl	8001c6c <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d34:	ddf2      	ble.n	8001d1c <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001d36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d3a:	8a9b      	ldrh	r3, [r3, #20]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001d42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff ff8e 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001d50:	2010      	movs	r0, #16
 8001d52:	f7ff ff8b 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8001d56:	20b1      	movs	r0, #177	@ 0xb1
 8001d58:	f7ff ff88 	bl	8001c6c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001d5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d60:	8a9b      	ldrh	r3, [r3, #20]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e009      	b.n	8001d8a <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff74 	bl	8001c6c <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2bff      	cmp	r3, #255	@ 0xff
 8001d8e:	ddf2      	ble.n	8001d76 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001d90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001d94:	8a9b      	ldrh	r3, [r3, #20]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff ff61 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001daa:	2010      	movs	r0, #16
 8001dac:	f7ff ff5e 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8001db0:	20b2      	movs	r0, #178	@ 0xb2
 8001db2:	f7ff ff5b 	bl	8001c6c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001db6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001dba:	8a9b      	ldrh	r3, [r3, #20]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 8001dca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e009      	b.n	8001de6 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff46 	bl	8001c6c <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8001dec:	dbf1      	blt.n	8001dd2 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001dee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001df2:	8a9b      	ldrh	r3, [r3, #20]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff ff32 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f7ff ff2f 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8001e0e:	20b3      	movs	r0, #179	@ 0xb3
 8001e10:	f7ff ff2c 	bl	8001c6c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8001e14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e18:	8a9b      	ldrh	r3, [r3, #20]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8001e28:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e009      	b.n	8001e44 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff17 	bl	8001c6c <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e4a:	dbf1      	blt.n	8001e30 <lcd_push_buffer+0x160>
    }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <lcd_reset>:

void lcd_reset()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8001e5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e62:	8a9b      	ldrh	r3, [r3, #20]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8001e72:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <lcd_reset+0xd8>)
 8001e74:	8a9b      	ldrh	r3, [r3, #20]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4a2d      	ldr	r2, [pc, #180]	@ (8001f30 <lcd_reset+0xd8>)
 8001e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8001e82:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <lcd_reset+0xd8>)
 8001e84:	8a9b      	ldrh	r3, [r3, #20]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4a29      	ldr	r2, [pc, #164]	@ (8001f30 <lcd_reset+0xd8>)
 8001e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	e003      	b.n	8001ea0 <lcd_reset+0x48>
 8001e98:	bf00      	nop
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f241 2247 	movw	r2, #4679	@ 0x1247
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d9f6      	bls.n	8001e98 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <lcd_reset+0xd8>)
 8001eac:	8a9b      	ldrh	r3, [r3, #20]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <lcd_reset+0xd8>)
 8001eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	e003      	b.n	8001ec8 <lcd_reset+0x70>
 8001ec0:	bf00      	nop
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4a1a      	ldr	r2, [pc, #104]	@ (8001f34 <lcd_reset+0xdc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d9f7      	bls.n	8001ec0 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8001ed0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ed4:	8a9b      	ldrh	r3, [r3, #20]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8001ee4:	20ae      	movs	r0, #174	@ 0xae
 8001ee6:	f7ff fec1 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 8001eea:	20a2      	movs	r0, #162	@ 0xa2
 8001eec:	f7ff febe 	bl	8001c6c <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8001ef0:	20a0      	movs	r0, #160	@ 0xa0
 8001ef2:	f7ff febb 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8001ef6:	20c8      	movs	r0, #200	@ 0xc8
 8001ef8:	f7ff feb8 	bl	8001c6c <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 8001efc:	2022      	movs	r0, #34	@ 0x22
 8001efe:	f7ff feb5 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8001f02:	202f      	movs	r0, #47	@ 0x2f
 8001f04:	f7ff feb2 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8001f08:	2040      	movs	r0, #64	@ 0x40
 8001f0a:	f7ff feaf 	bl	8001c6c <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8001f0e:	20af      	movs	r0, #175	@ 0xaf
 8001f10:	f7ff feac 	bl	8001c6c <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8001f14:	2081      	movs	r0, #129	@ 0x81
 8001f16:	f7ff fea9 	bl	8001c6c <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8001f1a:	2017      	movs	r0, #23
 8001f1c:	f7ff fea6 	bl	8001c6c <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8001f20:	20a6      	movs	r0, #166	@ 0xa6
 8001f22:	f7ff fea3 	bl	8001c6c <lcd_transmit_byte>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	48000400 	.word	0x48000400
 8001f34:	0005f36f 	.word	0x0005f36f

08001f38 <init_spi_lcd>:

void init_spi_lcd() {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8001f3c:	4b9d      	ldr	r3, [pc, #628]	@ (80021b4 <init_spi_lcd+0x27c>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	4a9c      	ldr	r2, [pc, #624]	@ (80021b4 <init_spi_lcd+0x27c>)
 8001f42:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001f46:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001f48:	4b9a      	ldr	r3, [pc, #616]	@ (80021b4 <init_spi_lcd+0x27c>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4a99      	ldr	r2, [pc, #612]	@ (80021b4 <init_spi_lcd+0x27c>)
 8001f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f52:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001f54:	4b98      	ldr	r3, [pc, #608]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	4a97      	ldr	r2, [pc, #604]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001f5e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001f60:	4b95      	ldr	r3, [pc, #596]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	4a94      	ldr	r2, [pc, #592]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f66:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001f6a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8001f6c:	4b92      	ldr	r3, [pc, #584]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	4a91      	ldr	r2, [pc, #580]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001f76:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001f78:	4b8f      	ldr	r3, [pc, #572]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f7e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8001f82:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001f84:	4b8c      	ldr	r3, [pc, #560]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a8b      	ldr	r2, [pc, #556]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f8a:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001f8e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001f90:	4b89      	ldr	r3, [pc, #548]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a88      	ldr	r2, [pc, #544]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f96:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8001f9a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8001f9c:	4b86      	ldr	r3, [pc, #536]	@ (80021b8 <init_spi_lcd+0x280>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4985      	ldr	r1, [pc, #532]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fa4:	f645 73ff 	movw	r3, #24575	@ 0x5fff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001fae:	4a82      	ldr	r2, [pc, #520]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fb0:	4b81      	ldr	r3, [pc, #516]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fb2:	8892      	ldrh	r2, [r2, #4]
 8001fb4:	b292      	uxth	r2, r2
 8001fb6:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8001fb8:	4b7f      	ldr	r3, [pc, #508]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7e      	ldr	r2, [pc, #504]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fbe:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001fc2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001fc4:	4b7c      	ldr	r3, [pc, #496]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7b      	ldr	r2, [pc, #492]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fca:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 8001fce:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8001fd0:	4b79      	ldr	r3, [pc, #484]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a78      	ldr	r2, [pc, #480]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fd6:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001fda:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001fdc:	4b76      	ldr	r3, [pc, #472]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fde:	4a76      	ldr	r2, [pc, #472]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8001fe4:	4b74      	ldr	r3, [pc, #464]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a73      	ldr	r2, [pc, #460]	@ (80021b8 <init_spi_lcd+0x280>)
 8001fea:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 8001fee:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001ff0:	4b71      	ldr	r3, [pc, #452]	@ (80021b8 <init_spi_lcd+0x280>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a70      	ldr	r2, [pc, #448]	@ (80021b8 <init_spi_lcd+0x280>)
 8001ff6:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 8001ffa:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 8001ffc:	4b6e      	ldr	r3, [pc, #440]	@ (80021b8 <init_spi_lcd+0x280>)
 8001ffe:	889b      	ldrh	r3, [r3, #4]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4a6d      	ldr	r2, [pc, #436]	@ (80021b8 <init_spi_lcd+0x280>)
 8002004:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800200c:	b29b      	uxth	r3, r3
 800200e:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8002010:	4a69      	ldr	r2, [pc, #420]	@ (80021b8 <init_spi_lcd+0x280>)
 8002012:	4b69      	ldr	r3, [pc, #420]	@ (80021b8 <init_spi_lcd+0x280>)
 8002014:	8892      	ldrh	r2, [r2, #4]
 8002016:	b292      	uxth	r2, r2
 8002018:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 800201a:	4b67      	ldr	r3, [pc, #412]	@ (80021b8 <init_spi_lcd+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a66      	ldr	r2, [pc, #408]	@ (80021b8 <init_spi_lcd+0x280>)
 8002020:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 8002024:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002026:	4b64      	ldr	r3, [pc, #400]	@ (80021b8 <init_spi_lcd+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a63      	ldr	r2, [pc, #396]	@ (80021b8 <init_spi_lcd+0x280>)
 800202c:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 8002030:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8002032:	4b61      	ldr	r3, [pc, #388]	@ (80021b8 <init_spi_lcd+0x280>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a60      	ldr	r2, [pc, #384]	@ (80021b8 <init_spi_lcd+0x280>)
 8002038:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 800203c:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800203e:	4b5e      	ldr	r3, [pc, #376]	@ (80021b8 <init_spi_lcd+0x280>)
 8002040:	4a5d      	ldr	r2, [pc, #372]	@ (80021b8 <init_spi_lcd+0x280>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8002046:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	049b      	lsls	r3, r3, #18
 8002054:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002056:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8002066:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800206a:	889b      	ldrh	r3, [r3, #4]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002072:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	b29b      	uxth	r3, r3
 800207c:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800207e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002082:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002086:	8892      	ldrh	r2, [r2, #4]
 8002088:	b292      	uxth	r2, r2
 800208a:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 800208c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800209c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020aa:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 80020ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 80020bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020c6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80020ca:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 80020cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	049b      	lsls	r3, r3, #18
 80020da:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80020dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80020e8:	4b33      	ldr	r3, [pc, #204]	@ (80021b8 <init_spi_lcd+0x280>)
 80020ea:	8a9b      	ldrh	r3, [r3, #20]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4a32      	ldr	r2, [pc, #200]	@ (80021b8 <init_spi_lcd+0x280>)
 80020f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <init_spi_lcd+0x284>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <init_spi_lcd+0x284>)
 8002100:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8002104:	b29b      	uxth	r3, r3
 8002106:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8002108:	4a2c      	ldr	r2, [pc, #176]	@ (80021bc <init_spi_lcd+0x284>)
 800210a:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <init_spi_lcd+0x284>)
 800210c:	8812      	ldrh	r2, [r2, #0]
 800210e:	b292      	uxth	r2, r2
 8002110:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8002112:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <init_spi_lcd+0x284>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <init_spi_lcd+0x284>)
 800211a:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 800211e:	b29b      	uxth	r3, r3
 8002120:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8002122:	4b26      	ldr	r3, [pc, #152]	@ (80021bc <init_spi_lcd+0x284>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4a24      	ldr	r2, [pc, #144]	@ (80021bc <init_spi_lcd+0x284>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	b29b      	uxth	r3, r3
 8002130:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <init_spi_lcd+0x284>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4a20      	ldr	r2, [pc, #128]	@ (80021bc <init_spi_lcd+0x284>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	b29b      	uxth	r3, r3
 8002140:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <init_spi_lcd+0x284>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <init_spi_lcd+0x284>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214e:	b29b      	uxth	r3, r3
 8002150:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <init_spi_lcd+0x284>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <init_spi_lcd+0x284>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8002162:	4a16      	ldr	r2, [pc, #88]	@ (80021bc <init_spi_lcd+0x284>)
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <init_spi_lcd+0x284>)
 8002166:	8812      	ldrh	r2, [r2, #0]
 8002168:	b292      	uxth	r2, r2
 800216a:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <init_spi_lcd+0x284>)
 800216e:	889b      	ldrh	r3, [r3, #4]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <init_spi_lcd+0x284>)
 8002174:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002178:	b29b      	uxth	r3, r3
 800217a:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <init_spi_lcd+0x284>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	b29b      	uxth	r3, r3
 8002182:	4a0e      	ldr	r2, [pc, #56]	@ (80021bc <init_spi_lcd+0x284>)
 8002184:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002188:	b29b      	uxth	r3, r3
 800218a:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <init_spi_lcd+0x284>)
 800218e:	8b9b      	ldrh	r3, [r3, #28]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <init_spi_lcd+0x284>)
 8002194:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002198:	b29b      	uxth	r3, r3
 800219a:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 800219c:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <init_spi_lcd+0x284>)
 800219e:	2207      	movs	r2, #7
 80021a0:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <init_spi_lcd+0x284>)
 80021a4:	889b      	ldrh	r3, [r3, #4]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <init_spi_lcd+0x284>)
 80021aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	e006      	b.n	80021c0 <init_spi_lcd+0x288>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	40003800 	.word	0x40003800
 80021c0:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <init_spi_lcd+0x2b4>)
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <init_spi_lcd+0x2b4>)
 80021ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <init_spi_lcd+0x2b4>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <init_spi_lcd+0x2b4>)
 80021da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80021e2:	f7ff fe39 	bl	8001e58 <lcd_reset>
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40003800 	.word	0x40003800

080021f0 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e06d      	b.n	80022e0 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d06c      	beq.n	80022ea <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	0052      	lsls	r2, r2, #1
 8002218:	4413      	add	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f1a3 0220 	sub.w	r2, r3, #32
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	4419      	add	r1, r3
 8002230:	4831      	ldr	r0, [pc, #196]	@ (80022f8 <generate_line_buff+0x108>)
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	4403      	add	r3, r0
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f1a3 0220 	sub.w	r2, r3, #32
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	3301      	adds	r3, #1
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	4419      	add	r1, r3
 8002252:	4829      	ldr	r0, [pc, #164]	@ (80022f8 <generate_line_buff+0x108>)
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	4403      	add	r3, r0
 800225c:	3301      	adds	r3, #1
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f1a3 0220 	sub.w	r2, r3, #32
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	3302      	adds	r3, #2
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4419      	add	r1, r3
 8002276:	4820      	ldr	r0, [pc, #128]	@ (80022f8 <generate_line_buff+0x108>)
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	4403      	add	r3, r0
 8002280:	3302      	adds	r3, #2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f1a3 0220 	sub.w	r2, r3, #32
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	3303      	adds	r3, #3
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4419      	add	r1, r3
 800229a:	4817      	ldr	r0, [pc, #92]	@ (80022f8 <generate_line_buff+0x108>)
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	4403      	add	r3, r0
 80022a4:	3303      	adds	r3, #3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f1a3 0220 	sub.w	r2, r3, #32
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	3304      	adds	r3, #4
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4419      	add	r1, r3
 80022be:	480e      	ldr	r0, [pc, #56]	@ (80022f8 <generate_line_buff+0x108>)
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	4403      	add	r3, r0
 80022c8:	3304      	adds	r3, #4
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	3305      	adds	r3, #5
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	db8d      	blt.n	8002204 <generate_line_buff+0x14>
    }
}
 80022e8:	e000      	b.n	80022ec <generate_line_buff+0xfc>
            break;
 80022ea:	bf00      	nop
}
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0800551c 	.word	0x0800551c

080022fc <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	460b      	mov	r3, r1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	4613      	mov	r3, r2
 8002310:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 8002312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
 800231e:	e011      	b.n	8002344 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8002320:	7dfa      	ldrb	r2, [r7, #23]
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4413      	add	r3, r2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	441a      	add	r2, r3
 800232c:	7df9      	ldrb	r1, [r7, #23]
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	01db      	lsls	r3, r3, #7
 8002332:	440b      	add	r3, r1
 8002334:	4619      	mov	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	440b      	add	r3, r1
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	3301      	adds	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
 8002344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002348:	2b00      	cmp	r3, #0
 800234a:	dae9      	bge.n	8002320 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 800234c:	e00c      	b.n	8002368 <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	79ba      	ldrb	r2, [r7, #6]
 8002352:	01d2      	lsls	r2, r2, #7
 8002354:	4413      	add	r3, r2
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	18d0      	adds	r0, r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002360:	461a      	mov	r2, r3
 8002362:	68f9      	ldr	r1, [r7, #12]
 8002364:	f001 fb3b 	bl	80039de <memcpy>
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b0c7      	sub	sp, #284	@ 0x11c
 8002374:	af02      	add	r7, sp, #8
 8002376:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800237a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800237e:	6020      	str	r0, [r4, #0]
 8002380:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8002384:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8002388:	6001      	str	r1, [r0, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002390:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800239a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800239e:	460a      	mov	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 faa9 	bl	8003904 <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 80023b2:	f107 0110 	add.w	r1, r7, #16
 80023b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023be:	22ff      	movs	r2, #255	@ 0xff
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	f7ff ff15 	bl	80021f0 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 80023c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80023ce:	781c      	ldrb	r4, [r3, #0]
 80023d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023d4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023de:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80023e2:	f107 0010 	add.w	r0, r7, #16
 80023e6:	2300      	movs	r3, #0
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4623      	mov	r3, r4
 80023ec:	6809      	ldr	r1, [r1, #0]
 80023ee:	f7ff ff85 	bl	80022fc <write_line_buff>
}
 80023f2:	bf00      	nop
 80023f4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <initLED>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLED() {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 8002402:	2101      	movs	r1, #1
 8002404:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002408:	f7ff f87a 	bl	8001500 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 800240c:	2101      	movs	r1, #1
 800240e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002412:	f7ff f875 	bl	8001500 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 8002416:	2101      	movs	r1, #1
 8002418:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800241c:	f7ff f870 	bl	8001500 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8002420:	463b      	mov	r3, r7
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fdae 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8002428:	2301      	movs	r3, #1
 800242a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 800242c:	2300      	movs	r3, #0
 800242e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8002430:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002434:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 8002436:	2302      	movs	r3, #2
 8002438:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002442:	f7fe fd09 	bl	8000e58 <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8002446:	463b      	mov	r3, r7
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fd9b 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 800244e:	2301      	movs	r3, #1
 8002450:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8002452:	2300      	movs	r3, #0
 8002454:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8002456:	2310      	movs	r3, #16
 8002458:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 800245a:	2302      	movs	r3, #2
 800245c:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 800245e:	463b      	mov	r3, r7
 8002460:	4619      	mov	r1, r3
 8002462:	480d      	ldr	r0, [pc, #52]	@ (8002498 <initLED+0x9c>)
 8002464:	f7fe fcf8 	bl	8000e58 <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8002468:	463b      	mov	r3, r7
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fd8a 	bl	8000f84 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8002470:	2301      	movs	r3, #1
 8002472:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8002474:	2300      	movs	r3, #0
 8002476:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 800247c:	2302      	movs	r3, #2
 800247e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8002480:	463b      	mov	r3, r7
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	@ (800249c <initLED+0xa0>)
 8002486:	f7fe fce7 	bl	8000e58 <GPIO_Init>

	// Initialize LED to off
	setLED('d');
 800248a:	2064      	movs	r0, #100	@ 0x64
 800248c:	f000 f808 	bl	80024a0 <setLED>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	48000400 	.word	0x48000400
 800249c:	48000800 	.word	0x48000800

080024a0 <setLED>:

void setLED(char sel) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b72      	cmp	r3, #114	@ 0x72
 80024ae:	d111      	bne.n	80024d4 <setLED+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80024b0:	2200      	movs	r2, #0
 80024b2:	2110      	movs	r1, #16
 80024b4:	4852      	ldr	r0, [pc, #328]	@ (8002600 <setLED+0x160>)
 80024b6:	f7fe fd7f 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80024ba:	2201      	movs	r2, #1
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	4851      	ldr	r0, [pc, #324]	@ (8002604 <setLED+0x164>)
 80024c0:	f7fe fd7a 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ce:	f7fe fd73 	bl	8000fb8 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 80024d2:	e091      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'g') {
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	2b67      	cmp	r3, #103	@ 0x67
 80024d8:	d111      	bne.n	80024fe <setLED+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80024da:	2201      	movs	r2, #1
 80024dc:	2110      	movs	r1, #16
 80024de:	4848      	ldr	r0, [pc, #288]	@ (8002600 <setLED+0x160>)
 80024e0:	f7fe fd6a 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	4846      	ldr	r0, [pc, #280]	@ (8002604 <setLED+0x164>)
 80024ea:	f7fe fd65 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80024ee:	2201      	movs	r2, #1
 80024f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f8:	f7fe fd5e 	bl	8000fb8 <GPIO_WriteBit>
}
 80024fc:	e07c      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'b') {
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	2b62      	cmp	r3, #98	@ 0x62
 8002502:	d111      	bne.n	8002528 <setLED+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002504:	2201      	movs	r2, #1
 8002506:	2110      	movs	r1, #16
 8002508:	483d      	ldr	r0, [pc, #244]	@ (8002600 <setLED+0x160>)
 800250a:	f7fe fd55 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800250e:	2201      	movs	r2, #1
 8002510:	2180      	movs	r1, #128	@ 0x80
 8002512:	483c      	ldr	r0, [pc, #240]	@ (8002604 <setLED+0x164>)
 8002514:	f7fe fd50 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800251e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002522:	f7fe fd49 	bl	8000fb8 <GPIO_WriteBit>
}
 8002526:	e067      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'c') {
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	2b63      	cmp	r3, #99	@ 0x63
 800252c:	d111      	bne.n	8002552 <setLED+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 800252e:	2201      	movs	r2, #1
 8002530:	2110      	movs	r1, #16
 8002532:	4833      	ldr	r0, [pc, #204]	@ (8002600 <setLED+0x160>)
 8002534:	f7fe fd40 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002538:	2200      	movs	r2, #0
 800253a:	2180      	movs	r1, #128	@ 0x80
 800253c:	4831      	ldr	r0, [pc, #196]	@ (8002604 <setLED+0x164>)
 800253e:	f7fe fd3b 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002542:	2200      	movs	r2, #0
 8002544:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254c:	f7fe fd34 	bl	8000fb8 <GPIO_WriteBit>
}
 8002550:	e052      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'm') {
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b6d      	cmp	r3, #109	@ 0x6d
 8002556:	d111      	bne.n	800257c <setLED+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002558:	2200      	movs	r2, #0
 800255a:	2110      	movs	r1, #16
 800255c:	4828      	ldr	r0, [pc, #160]	@ (8002600 <setLED+0x160>)
 800255e:	f7fe fd2b 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002562:	2201      	movs	r2, #1
 8002564:	2180      	movs	r1, #128	@ 0x80
 8002566:	4827      	ldr	r0, [pc, #156]	@ (8002604 <setLED+0x164>)
 8002568:	f7fe fd26 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800256c:	2200      	movs	r2, #0
 800256e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002576:	f7fe fd1f 	bl	8000fb8 <GPIO_WriteBit>
}
 800257a:	e03d      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'y') {
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b79      	cmp	r3, #121	@ 0x79
 8002580:	d111      	bne.n	80025a6 <setLED+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002582:	2200      	movs	r2, #0
 8002584:	2110      	movs	r1, #16
 8002586:	481e      	ldr	r0, [pc, #120]	@ (8002600 <setLED+0x160>)
 8002588:	f7fe fd16 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	@ 0x80
 8002590:	481c      	ldr	r0, [pc, #112]	@ (8002604 <setLED+0x164>)
 8002592:	f7fe fd11 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002596:	2201      	movs	r2, #1
 8002598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800259c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a0:	f7fe fd0a 	bl	8000fb8 <GPIO_WriteBit>
}
 80025a4:	e028      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'w') {
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b77      	cmp	r3, #119	@ 0x77
 80025aa:	d111      	bne.n	80025d0 <setLED+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80025ac:	2200      	movs	r2, #0
 80025ae:	2110      	movs	r1, #16
 80025b0:	4813      	ldr	r0, [pc, #76]	@ (8002600 <setLED+0x160>)
 80025b2:	f7fe fd01 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80025b6:	2200      	movs	r2, #0
 80025b8:	2180      	movs	r1, #128	@ 0x80
 80025ba:	4812      	ldr	r0, [pc, #72]	@ (8002604 <setLED+0x164>)
 80025bc:	f7fe fcfc 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ca:	f7fe fcf5 	bl	8000fb8 <GPIO_WriteBit>
}
 80025ce:	e013      	b.n	80025f8 <setLED+0x158>
	} else if (sel == 'd') {
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d110      	bne.n	80025f8 <setLED+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80025d6:	2201      	movs	r2, #1
 80025d8:	2110      	movs	r1, #16
 80025da:	4809      	ldr	r0, [pc, #36]	@ (8002600 <setLED+0x160>)
 80025dc:	f7fe fcec 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80025e0:	2201      	movs	r2, #1
 80025e2:	2180      	movs	r1, #128	@ 0x80
 80025e4:	4807      	ldr	r0, [pc, #28]	@ (8002604 <setLED+0x164>)
 80025e6:	f7fe fce7 	bl	8000fb8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f4:	f7fe fce0 	bl	8000fb8 <GPIO_WriteBit>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	48000400 	.word	0x48000400
 8002604:	48000800 	.word	0x48000800

08002608 <lcd_init_and_print>:
#include "interrupt.h"
#include "timer.h"
#include "window.h"
#include "flash.h"

void lcd_init_and_print(void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
    static uint8_t lcdBuffer[LCD_BUFF_SIZE];   // Frame buffer for LCD

    init_spi_lcd();        // Initialize SPI + GPIOs and reset LCD
 800260c:	f7ff fc94 	bl	8001f38 <init_spi_lcd>
    memset(lcdBuffer, 0x00, LCD_BUFF_SIZE);  // Clear buffer
 8002610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002614:	2100      	movs	r1, #0
 8002616:	4807      	ldr	r0, [pc, #28]	@ (8002634 <lcd_init_and_print+0x2c>)
 8002618:	f001 f974 	bl	8003904 <memset>

    // Write "Hello" at x=0, y=0
    lcd_write_string((uint8_t *)"Hello", lcdBuffer, 0, 0);
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	4904      	ldr	r1, [pc, #16]	@ (8002634 <lcd_init_and_print+0x2c>)
 8002622:	4805      	ldr	r0, [pc, #20]	@ (8002638 <lcd_init_and_print+0x30>)
 8002624:	f7ff fea4 	bl	8002370 <lcd_write_string>

    // Push buffer content to LCD
    lcd_push_buffer(lcdBuffer);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <lcd_init_and_print+0x2c>)
 800262a:	f7ff fb51 	bl	8001cd0 <lcd_push_buffer>
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200002e8 	.word	0x200002e8
 8002638:	080054e8 	.word	0x080054e8

0800263c <main>:

int main(void) {
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8002640:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8002644:	f7ff f974 	bl	8001930 <uart_init>

	initJoystick();
 8002648:	f7ff fac8 	bl	8001bdc <initJoystick>
	iniEXTIA4();
 800264c:	f7ff fa8a 	bl	8001b64 <iniEXTIA4>
	initTimer();
 8002650:	f000 f952 	bl	80028f8 <initTimer>
	initLED();
 8002654:	f7ff fed2 	bl	80023fc <initLED>
    lcd_init_and_print();
 8002658:	f7ff ffd6 	bl	8002608 <lcd_init_and_print>

	while(1) {
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <main+0x20>

08002660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
	return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_kill>:

int _kill(int pid, int sig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800267a:	f001 f983 	bl	8003984 <__errno>
 800267e:	4603      	mov	r3, r0
 8002680:	2216      	movs	r2, #22
 8002682:	601a      	str	r2, [r3, #0]
	return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_exit>:

void _exit (int status)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ffe7 	bl	8002670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026a2:	bf00      	nop
 80026a4:	e7fd      	b.n	80026a2 <_exit+0x12>

080026a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e00a      	b.n	80026ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026b8:	f3af 8000 	nop.w
 80026bc:	4601      	mov	r1, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dbf0      	blt.n	80026b8 <_read+0x12>
	}

return len;
 80026d6:	687b      	ldr	r3, [r7, #4]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002708:	605a      	str	r2, [r3, #4]
	return 0;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <_isatty>:

int _isatty(int file)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
	return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <SystemInit+0x84>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	4a1e      	ldr	r2, [pc, #120]	@ (80027cc <SystemInit+0x84>)
 8002754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800275c:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <SystemInit+0x88>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1b      	ldr	r2, [pc, #108]	@ (80027d0 <SystemInit+0x88>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <SystemInit+0x88>)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4918      	ldr	r1, [pc, #96]	@ (80027d0 <SystemInit+0x88>)
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <SystemInit+0x8c>)
 8002770:	4013      	ands	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <SystemInit+0x88>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	@ (80027d0 <SystemInit+0x88>)
 800277a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800277e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002782:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002784:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <SystemInit+0x88>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a11      	ldr	r2, [pc, #68]	@ (80027d0 <SystemInit+0x88>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <SystemInit+0x88>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a0e      	ldr	r2, [pc, #56]	@ (80027d0 <SystemInit+0x88>)
 8002796:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 800279a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <SystemInit+0x88>)
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	4a0b      	ldr	r2, [pc, #44]	@ (80027d0 <SystemInit+0x88>)
 80027a2:	f023 030f 	bic.w	r3, r3, #15
 80027a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <SystemInit+0x88>)
 80027aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ac:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <SystemInit+0x88>)
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <SystemInit+0x90>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <SystemInit+0x88>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80027ba:	f000 f80f 	bl	80027dc <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027be:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <SystemInit+0x84>)
 80027c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027c4:	609a      	str	r2, [r3, #8]
#endif  
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	f87fc00c 	.word	0xf87fc00c
 80027d8:	ff00fccc 	.word	0xff00fccc

080027dc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80027e0:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <SetSysClock+0x8c>)
 80027e2:	2212      	movs	r2, #18
 80027e4:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80027e6:	4b21      	ldr	r3, [pc, #132]	@ (800286c <SetSysClock+0x90>)
 80027e8:	4a20      	ldr	r2, [pc, #128]	@ (800286c <SetSysClock+0x90>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80027ee:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <SetSysClock+0x90>)
 80027f0:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <SetSysClock+0x90>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80027f6:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <SetSysClock+0x90>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	@ (800286c <SetSysClock+0x90>)
 80027fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002800:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002802:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <SetSysClock+0x90>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a19      	ldr	r2, [pc, #100]	@ (800286c <SetSysClock+0x90>)
 8002808:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800280c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800280e:	4b17      	ldr	r3, [pc, #92]	@ (800286c <SetSysClock+0x90>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a16      	ldr	r2, [pc, #88]	@ (800286c <SetSysClock+0x90>)
 8002814:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 8002818:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800281a:	4b14      	ldr	r3, [pc, #80]	@ (800286c <SetSysClock+0x90>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a13      	ldr	r2, [pc, #76]	@ (800286c <SetSysClock+0x90>)
 8002820:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002824:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002826:	bf00      	nop
 8002828:	4b10      	ldr	r3, [pc, #64]	@ (800286c <SetSysClock+0x90>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f9      	beq.n	8002828 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <SetSysClock+0x90>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a0c      	ldr	r2, [pc, #48]	@ (800286c <SetSysClock+0x90>)
 800283a:	f023 0303 	bic.w	r3, r3, #3
 800283e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002840:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <SetSysClock+0x90>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a09      	ldr	r2, [pc, #36]	@ (800286c <SetSysClock+0x90>)
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800284c:	bf00      	nop
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <SetSysClock+0x90>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d1f9      	bne.n	800284e <SetSysClock+0x72>
  {
  }
}
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000

08002870 <NVIC_EnableIRQ>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2201      	movs	r2, #1
 8002882:	fa02 f103 	lsl.w	r1, r2, r3
 8002886:	4a06      	ldr	r2, [pc, #24]	@ (80028a0 <NVIC_EnableIRQ+0x30>)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da0b      	bge.n	80028d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <NVIC_SetPriority+0x4c>)
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	3b04      	subs	r3, #4
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80028ce:	e009      	b.n	80028e4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4907      	ldr	r1, [pc, #28]	@ (80028f4 <NVIC_SetPriority+0x50>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <initTimer>:
#include "timer.h"

timestruct_t timeData;

void initTimer() {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM2, ENABLE);
	*/
	// -------------------------------------------------

	// Set reload and prescale value for 1/100 s (100 Hz) interrupt
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;		// enable clock line to timer 2
 80028fe:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <initTimer+0x60>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a15      	ldr	r2, [pc, #84]	@ (8002958 <initTimer+0x60>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0001;		// configure timer 2
 800290a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800290e:	2201      	movs	r2, #1
 8002910:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 0x03FF;		// set reload value
 8002912:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002916:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 0x0270;		// set prescale value
 800291c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002920:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8002924:	851a      	strh	r2, [r3, #40]	@ 0x28

	TIM2->DIER |= 0x0001;	// enable timer 2 interrupts
 8002926:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	60d3      	str	r3, [r2, #12]

	uint8_t priority = 2;
 8002936:	2302      	movs	r3, #2
 8002938:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	4619      	mov	r1, r3
 800293e:	201c      	movs	r0, #28
 8002940:	f7ff ffb0 	bl	80028a4 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 8002944:	201c      	movs	r0, #28
 8002946:	f7ff ff93 	bl	8002870 <NVIC_EnableIRQ>

	TIM2_IRQHandler();
 800294a:	f000 f807 	bl	800295c <TIM2_IRQHandler>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 8002962:	78db      	ldrb	r3, [r3, #3]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 800296c:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b64      	cmp	r3, #100	@ 0x64
 8002976:	d10a      	bne.n	800298e <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8002978:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 800297a:	2200      	movs	r2, #0
 800297c:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 800297e:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 8002980:	789b      	ldrb	r3, [r3, #2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 800298a:	709a      	strb	r2, [r3, #2]
 800298c:	e030      	b.n	80029f0 <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 800298e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b3c      	cmp	r3, #60	@ 0x3c
 8002996:	d10a      	bne.n	80029ae <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 800299a:	2200      	movs	r2, #0
 800299c:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 800299e:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029aa:	705a      	strb	r2, [r3, #1]
 80029ac:	e020      	b.n	80029f0 <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b3c      	cmp	r3, #60	@ 0x3c
 80029b6:	d10a      	bne.n	80029ce <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e010      	b.n	80029f0 <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 80029ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b18      	cmp	r3, #24
 80029d6:	d10b      	bne.n	80029f0 <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <TIM2_IRQHandler+0xa4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80029f0:	2101      	movs	r1, #1
 80029f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80029f6:	f7fe fe37 	bl	8001668 <TIM_ClearITPendingBit>
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200004e8 	.word	0x200004e8

08002a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a04:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a08:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a0a:	490e      	ldr	r1, [pc, #56]	@ (8002a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <LoopForever+0xe>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a20:	4c0b      	ldr	r4, [pc, #44]	@ (8002a50 <LoopForever+0x16>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a2e:	f7ff fe8b 	bl	8002748 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a32:	f000 ffad 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a36:	f7ff fe01 	bl	800263c <main>

08002a3a <LoopForever>:

LoopForever:
    b LoopForever
 8002a3a:	e7fe      	b.n	8002a3a <LoopForever>
  ldr   r0, =_estack
 8002a3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002a48:	08005a7c 	.word	0x08005a7c
  ldr r2, =_sbss
 8002a4c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002a50:	2000063c 	.word	0x2000063c

08002a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC1_2_IRQHandler>

08002a56 <__cvt>:
 8002a56:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a5a:	ec57 6b10 	vmov	r6, r7, d0
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	460c      	mov	r4, r1
 8002a62:	4619      	mov	r1, r3
 8002a64:	463b      	mov	r3, r7
 8002a66:	bfbb      	ittet	lt
 8002a68:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002a6c:	461f      	movlt	r7, r3
 8002a6e:	2300      	movge	r3, #0
 8002a70:	232d      	movlt	r3, #45	@ 0x2d
 8002a72:	700b      	strb	r3, [r1, #0]
 8002a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a76:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002a7a:	4691      	mov	r9, r2
 8002a7c:	f023 0820 	bic.w	r8, r3, #32
 8002a80:	bfbc      	itt	lt
 8002a82:	4632      	movlt	r2, r6
 8002a84:	4616      	movlt	r6, r2
 8002a86:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a8a:	d005      	beq.n	8002a98 <__cvt+0x42>
 8002a8c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002a90:	d100      	bne.n	8002a94 <__cvt+0x3e>
 8002a92:	3401      	adds	r4, #1
 8002a94:	2102      	movs	r1, #2
 8002a96:	e000      	b.n	8002a9a <__cvt+0x44>
 8002a98:	2103      	movs	r1, #3
 8002a9a:	ab03      	add	r3, sp, #12
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	ab02      	add	r3, sp, #8
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	ec47 6b10 	vmov	d0, r6, r7
 8002aa6:	4653      	mov	r3, sl
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	f001 f831 	bl	8003b10 <_dtoa_r>
 8002aae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ab2:	4605      	mov	r5, r0
 8002ab4:	d119      	bne.n	8002aea <__cvt+0x94>
 8002ab6:	f019 0f01 	tst.w	r9, #1
 8002aba:	d00e      	beq.n	8002ada <__cvt+0x84>
 8002abc:	eb00 0904 	add.w	r9, r0, r4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	4639      	mov	r1, r7
 8002ac8:	f7fd fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8002acc:	b108      	cbz	r0, 8002ad2 <__cvt+0x7c>
 8002ace:	f8cd 900c 	str.w	r9, [sp, #12]
 8002ad2:	2230      	movs	r2, #48	@ 0x30
 8002ad4:	9b03      	ldr	r3, [sp, #12]
 8002ad6:	454b      	cmp	r3, r9
 8002ad8:	d31e      	bcc.n	8002b18 <__cvt+0xc2>
 8002ada:	9b03      	ldr	r3, [sp, #12]
 8002adc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002ade:	1b5b      	subs	r3, r3, r5
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	b004      	add	sp, #16
 8002ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002aee:	eb00 0904 	add.w	r9, r0, r4
 8002af2:	d1e5      	bne.n	8002ac0 <__cvt+0x6a>
 8002af4:	7803      	ldrb	r3, [r0, #0]
 8002af6:	2b30      	cmp	r3, #48	@ 0x30
 8002af8:	d10a      	bne.n	8002b10 <__cvt+0xba>
 8002afa:	2200      	movs	r2, #0
 8002afc:	2300      	movs	r3, #0
 8002afe:	4630      	mov	r0, r6
 8002b00:	4639      	mov	r1, r7
 8002b02:	f7fd ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b06:	b918      	cbnz	r0, 8002b10 <__cvt+0xba>
 8002b08:	f1c4 0401 	rsb	r4, r4, #1
 8002b0c:	f8ca 4000 	str.w	r4, [sl]
 8002b10:	f8da 3000 	ldr.w	r3, [sl]
 8002b14:	4499      	add	r9, r3
 8002b16:	e7d3      	b.n	8002ac0 <__cvt+0x6a>
 8002b18:	1c59      	adds	r1, r3, #1
 8002b1a:	9103      	str	r1, [sp, #12]
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e7d9      	b.n	8002ad4 <__cvt+0x7e>

08002b20 <__exponent>:
 8002b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b22:	2900      	cmp	r1, #0
 8002b24:	bfba      	itte	lt
 8002b26:	4249      	neglt	r1, r1
 8002b28:	232d      	movlt	r3, #45	@ 0x2d
 8002b2a:	232b      	movge	r3, #43	@ 0x2b
 8002b2c:	2909      	cmp	r1, #9
 8002b2e:	7002      	strb	r2, [r0, #0]
 8002b30:	7043      	strb	r3, [r0, #1]
 8002b32:	dd29      	ble.n	8002b88 <__exponent+0x68>
 8002b34:	f10d 0307 	add.w	r3, sp, #7
 8002b38:	461d      	mov	r5, r3
 8002b3a:	270a      	movs	r7, #10
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	fbb1 f6f7 	udiv	r6, r1, r7
 8002b42:	fb07 1416 	mls	r4, r7, r6, r1
 8002b46:	3430      	adds	r4, #48	@ 0x30
 8002b48:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	2c63      	cmp	r4, #99	@ 0x63
 8002b50:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b54:	4631      	mov	r1, r6
 8002b56:	dcf1      	bgt.n	8002b3c <__exponent+0x1c>
 8002b58:	3130      	adds	r1, #48	@ 0x30
 8002b5a:	1e94      	subs	r4, r2, #2
 8002b5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002b60:	1c41      	adds	r1, r0, #1
 8002b62:	4623      	mov	r3, r4
 8002b64:	42ab      	cmp	r3, r5
 8002b66:	d30a      	bcc.n	8002b7e <__exponent+0x5e>
 8002b68:	f10d 0309 	add.w	r3, sp, #9
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	42ac      	cmp	r4, r5
 8002b70:	bf88      	it	hi
 8002b72:	2300      	movhi	r3, #0
 8002b74:	3302      	adds	r3, #2
 8002b76:	4403      	add	r3, r0
 8002b78:	1a18      	subs	r0, r3, r0
 8002b7a:	b003      	add	sp, #12
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002b82:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002b86:	e7ed      	b.n	8002b64 <__exponent+0x44>
 8002b88:	2330      	movs	r3, #48	@ 0x30
 8002b8a:	3130      	adds	r1, #48	@ 0x30
 8002b8c:	7083      	strb	r3, [r0, #2]
 8002b8e:	70c1      	strb	r1, [r0, #3]
 8002b90:	1d03      	adds	r3, r0, #4
 8002b92:	e7f1      	b.n	8002b78 <__exponent+0x58>

08002b94 <_printf_float>:
 8002b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b98:	b08d      	sub	sp, #52	@ 0x34
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002ba0:	4616      	mov	r6, r2
 8002ba2:	461f      	mov	r7, r3
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	f000 feb5 	bl	8003914 <_localeconv_r>
 8002baa:	6803      	ldr	r3, [r0, #0]
 8002bac:	9304      	str	r3, [sp, #16]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fb5e 	bl	8000270 <strlen>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8002bbc:	9005      	str	r0, [sp, #20]
 8002bbe:	3307      	adds	r3, #7
 8002bc0:	f023 0307 	bic.w	r3, r3, #7
 8002bc4:	f103 0208 	add.w	r2, r3, #8
 8002bc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002bcc:	f8d4 b000 	ldr.w	fp, [r4]
 8002bd0:	f8c8 2000 	str.w	r2, [r8]
 8002bd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002bd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002bdc:	9307      	str	r3, [sp, #28]
 8002bde:	f8cd 8018 	str.w	r8, [sp, #24]
 8002be2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bea:	4b9c      	ldr	r3, [pc, #624]	@ (8002e5c <_printf_float+0x2c8>)
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	f7fd ff9c 	bl	8000b2c <__aeabi_dcmpun>
 8002bf4:	bb70      	cbnz	r0, 8002c54 <_printf_float+0xc0>
 8002bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bfa:	4b98      	ldr	r3, [pc, #608]	@ (8002e5c <_printf_float+0x2c8>)
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	f7fd ff76 	bl	8000af0 <__aeabi_dcmple>
 8002c04:	bb30      	cbnz	r0, 8002c54 <_printf_float+0xc0>
 8002c06:	2200      	movs	r2, #0
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	f7fd ff65 	bl	8000adc <__aeabi_dcmplt>
 8002c12:	b110      	cbz	r0, 8002c1a <_printf_float+0x86>
 8002c14:	232d      	movs	r3, #45	@ 0x2d
 8002c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c1a:	4a91      	ldr	r2, [pc, #580]	@ (8002e60 <_printf_float+0x2cc>)
 8002c1c:	4b91      	ldr	r3, [pc, #580]	@ (8002e64 <_printf_float+0x2d0>)
 8002c1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002c22:	bf8c      	ite	hi
 8002c24:	4690      	movhi	r8, r2
 8002c26:	4698      	movls	r8, r3
 8002c28:	2303      	movs	r3, #3
 8002c2a:	6123      	str	r3, [r4, #16]
 8002c2c:	f02b 0304 	bic.w	r3, fp, #4
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	f04f 0900 	mov.w	r9, #0
 8002c36:	9700      	str	r7, [sp, #0]
 8002c38:	4633      	mov	r3, r6
 8002c3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4628      	mov	r0, r5
 8002c40:	f000 f9d2 	bl	8002fe8 <_printf_common>
 8002c44:	3001      	adds	r0, #1
 8002c46:	f040 808d 	bne.w	8002d64 <_printf_float+0x1d0>
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	b00d      	add	sp, #52	@ 0x34
 8002c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	4640      	mov	r0, r8
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	f7fd ff66 	bl	8000b2c <__aeabi_dcmpun>
 8002c60:	b140      	cbz	r0, 8002c74 <_printf_float+0xe0>
 8002c62:	464b      	mov	r3, r9
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bfbc      	itt	lt
 8002c68:	232d      	movlt	r3, #45	@ 0x2d
 8002c6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e68 <_printf_float+0x2d4>)
 8002c70:	4b7e      	ldr	r3, [pc, #504]	@ (8002e6c <_printf_float+0x2d8>)
 8002c72:	e7d4      	b.n	8002c1e <_printf_float+0x8a>
 8002c74:	6863      	ldr	r3, [r4, #4]
 8002c76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002c7a:	9206      	str	r2, [sp, #24]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	d13b      	bne.n	8002cf8 <_printf_float+0x164>
 8002c80:	2306      	movs	r3, #6
 8002c82:	6063      	str	r3, [r4, #4]
 8002c84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6022      	str	r2, [r4, #0]
 8002c8c:	9303      	str	r3, [sp, #12]
 8002c8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002c90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002c94:	ab09      	add	r3, sp, #36	@ 0x24
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6861      	ldr	r1, [r4, #4]
 8002c9a:	ec49 8b10 	vmov	d0, r8, r9
 8002c9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7ff fed7 	bl	8002a56 <__cvt>
 8002ca8:	9b06      	ldr	r3, [sp, #24]
 8002caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002cac:	2b47      	cmp	r3, #71	@ 0x47
 8002cae:	4680      	mov	r8, r0
 8002cb0:	d129      	bne.n	8002d06 <_printf_float+0x172>
 8002cb2:	1cc8      	adds	r0, r1, #3
 8002cb4:	db02      	blt.n	8002cbc <_printf_float+0x128>
 8002cb6:	6863      	ldr	r3, [r4, #4]
 8002cb8:	4299      	cmp	r1, r3
 8002cba:	dd41      	ble.n	8002d40 <_printf_float+0x1ac>
 8002cbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8002cc0:	fa5f fa8a 	uxtb.w	sl, sl
 8002cc4:	3901      	subs	r1, #1
 8002cc6:	4652      	mov	r2, sl
 8002cc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002ccc:	9109      	str	r1, [sp, #36]	@ 0x24
 8002cce:	f7ff ff27 	bl	8002b20 <__exponent>
 8002cd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002cd4:	1813      	adds	r3, r2, r0
 8002cd6:	2a01      	cmp	r2, #1
 8002cd8:	4681      	mov	r9, r0
 8002cda:	6123      	str	r3, [r4, #16]
 8002cdc:	dc02      	bgt.n	8002ce4 <_printf_float+0x150>
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	07d2      	lsls	r2, r2, #31
 8002ce2:	d501      	bpl.n	8002ce8 <_printf_float+0x154>
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	6123      	str	r3, [r4, #16]
 8002ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0a2      	beq.n	8002c36 <_printf_float+0xa2>
 8002cf0:	232d      	movs	r3, #45	@ 0x2d
 8002cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cf6:	e79e      	b.n	8002c36 <_printf_float+0xa2>
 8002cf8:	9a06      	ldr	r2, [sp, #24]
 8002cfa:	2a47      	cmp	r2, #71	@ 0x47
 8002cfc:	d1c2      	bne.n	8002c84 <_printf_float+0xf0>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1c0      	bne.n	8002c84 <_printf_float+0xf0>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e7bd      	b.n	8002c82 <_printf_float+0xee>
 8002d06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d0a:	d9db      	bls.n	8002cc4 <_printf_float+0x130>
 8002d0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002d10:	d118      	bne.n	8002d44 <_printf_float+0x1b0>
 8002d12:	2900      	cmp	r1, #0
 8002d14:	6863      	ldr	r3, [r4, #4]
 8002d16:	dd0b      	ble.n	8002d30 <_printf_float+0x19c>
 8002d18:	6121      	str	r1, [r4, #16]
 8002d1a:	b913      	cbnz	r3, 8002d22 <_printf_float+0x18e>
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	07d0      	lsls	r0, r2, #31
 8002d20:	d502      	bpl.n	8002d28 <_printf_float+0x194>
 8002d22:	3301      	adds	r3, #1
 8002d24:	440b      	add	r3, r1
 8002d26:	6123      	str	r3, [r4, #16]
 8002d28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002d2a:	f04f 0900 	mov.w	r9, #0
 8002d2e:	e7db      	b.n	8002ce8 <_printf_float+0x154>
 8002d30:	b913      	cbnz	r3, 8002d38 <_printf_float+0x1a4>
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	07d2      	lsls	r2, r2, #31
 8002d36:	d501      	bpl.n	8002d3c <_printf_float+0x1a8>
 8002d38:	3302      	adds	r3, #2
 8002d3a:	e7f4      	b.n	8002d26 <_printf_float+0x192>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e7f2      	b.n	8002d26 <_printf_float+0x192>
 8002d40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d46:	4299      	cmp	r1, r3
 8002d48:	db05      	blt.n	8002d56 <_printf_float+0x1c2>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	6121      	str	r1, [r4, #16]
 8002d4e:	07d8      	lsls	r0, r3, #31
 8002d50:	d5ea      	bpl.n	8002d28 <_printf_float+0x194>
 8002d52:	1c4b      	adds	r3, r1, #1
 8002d54:	e7e7      	b.n	8002d26 <_printf_float+0x192>
 8002d56:	2900      	cmp	r1, #0
 8002d58:	bfd4      	ite	le
 8002d5a:	f1c1 0202 	rsble	r2, r1, #2
 8002d5e:	2201      	movgt	r2, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	e7e0      	b.n	8002d26 <_printf_float+0x192>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	055a      	lsls	r2, r3, #21
 8002d68:	d407      	bmi.n	8002d7a <_printf_float+0x1e6>
 8002d6a:	6923      	ldr	r3, [r4, #16]
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	4631      	mov	r1, r6
 8002d70:	4628      	mov	r0, r5
 8002d72:	47b8      	blx	r7
 8002d74:	3001      	adds	r0, #1
 8002d76:	d12b      	bne.n	8002dd0 <_printf_float+0x23c>
 8002d78:	e767      	b.n	8002c4a <_printf_float+0xb6>
 8002d7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d7e:	f240 80dd 	bls.w	8002f3c <_printf_float+0x3a8>
 8002d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002d86:	2200      	movs	r2, #0
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f7fd fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d033      	beq.n	8002dfa <_printf_float+0x266>
 8002d92:	4a37      	ldr	r2, [pc, #220]	@ (8002e70 <_printf_float+0x2dc>)
 8002d94:	2301      	movs	r3, #1
 8002d96:	4631      	mov	r1, r6
 8002d98:	4628      	mov	r0, r5
 8002d9a:	47b8      	blx	r7
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	f43f af54 	beq.w	8002c4a <_printf_float+0xb6>
 8002da2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002da6:	4543      	cmp	r3, r8
 8002da8:	db02      	blt.n	8002db0 <_printf_float+0x21c>
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	07d8      	lsls	r0, r3, #31
 8002dae:	d50f      	bpl.n	8002dd0 <_printf_float+0x23c>
 8002db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002db4:	4631      	mov	r1, r6
 8002db6:	4628      	mov	r0, r5
 8002db8:	47b8      	blx	r7
 8002dba:	3001      	adds	r0, #1
 8002dbc:	f43f af45 	beq.w	8002c4a <_printf_float+0xb6>
 8002dc0:	f04f 0900 	mov.w	r9, #0
 8002dc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8002dc8:	f104 0a1a 	add.w	sl, r4, #26
 8002dcc:	45c8      	cmp	r8, r9
 8002dce:	dc09      	bgt.n	8002de4 <_printf_float+0x250>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	079b      	lsls	r3, r3, #30
 8002dd4:	f100 8103 	bmi.w	8002fde <_printf_float+0x44a>
 8002dd8:	68e0      	ldr	r0, [r4, #12]
 8002dda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ddc:	4298      	cmp	r0, r3
 8002dde:	bfb8      	it	lt
 8002de0:	4618      	movlt	r0, r3
 8002de2:	e734      	b.n	8002c4e <_printf_float+0xba>
 8002de4:	2301      	movs	r3, #1
 8002de6:	4652      	mov	r2, sl
 8002de8:	4631      	mov	r1, r6
 8002dea:	4628      	mov	r0, r5
 8002dec:	47b8      	blx	r7
 8002dee:	3001      	adds	r0, #1
 8002df0:	f43f af2b 	beq.w	8002c4a <_printf_float+0xb6>
 8002df4:	f109 0901 	add.w	r9, r9, #1
 8002df8:	e7e8      	b.n	8002dcc <_printf_float+0x238>
 8002dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	dc39      	bgt.n	8002e74 <_printf_float+0x2e0>
 8002e00:	4a1b      	ldr	r2, [pc, #108]	@ (8002e70 <_printf_float+0x2dc>)
 8002e02:	2301      	movs	r3, #1
 8002e04:	4631      	mov	r1, r6
 8002e06:	4628      	mov	r0, r5
 8002e08:	47b8      	blx	r7
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f43f af1d 	beq.w	8002c4a <_printf_float+0xb6>
 8002e10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002e14:	ea59 0303 	orrs.w	r3, r9, r3
 8002e18:	d102      	bne.n	8002e20 <_printf_float+0x28c>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	07d9      	lsls	r1, r3, #31
 8002e1e:	d5d7      	bpl.n	8002dd0 <_printf_float+0x23c>
 8002e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e24:	4631      	mov	r1, r6
 8002e26:	4628      	mov	r0, r5
 8002e28:	47b8      	blx	r7
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	f43f af0d 	beq.w	8002c4a <_printf_float+0xb6>
 8002e30:	f04f 0a00 	mov.w	sl, #0
 8002e34:	f104 0b1a 	add.w	fp, r4, #26
 8002e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	4553      	cmp	r3, sl
 8002e3e:	dc01      	bgt.n	8002e44 <_printf_float+0x2b0>
 8002e40:	464b      	mov	r3, r9
 8002e42:	e793      	b.n	8002d6c <_printf_float+0x1d8>
 8002e44:	2301      	movs	r3, #1
 8002e46:	465a      	mov	r2, fp
 8002e48:	4631      	mov	r1, r6
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	47b8      	blx	r7
 8002e4e:	3001      	adds	r0, #1
 8002e50:	f43f aefb 	beq.w	8002c4a <_printf_float+0xb6>
 8002e54:	f10a 0a01 	add.w	sl, sl, #1
 8002e58:	e7ee      	b.n	8002e38 <_printf_float+0x2a4>
 8002e5a:	bf00      	nop
 8002e5c:	7fefffff 	.word	0x7fefffff
 8002e60:	080056fb 	.word	0x080056fb
 8002e64:	080056f7 	.word	0x080056f7
 8002e68:	08005703 	.word	0x08005703
 8002e6c:	080056ff 	.word	0x080056ff
 8002e70:	08005707 	.word	0x08005707
 8002e74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002e7a:	4553      	cmp	r3, sl
 8002e7c:	bfa8      	it	ge
 8002e7e:	4653      	movge	r3, sl
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	4699      	mov	r9, r3
 8002e84:	dc36      	bgt.n	8002ef4 <_printf_float+0x360>
 8002e86:	f04f 0b00 	mov.w	fp, #0
 8002e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e8e:	f104 021a 	add.w	r2, r4, #26
 8002e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e94:	9306      	str	r3, [sp, #24]
 8002e96:	eba3 0309 	sub.w	r3, r3, r9
 8002e9a:	455b      	cmp	r3, fp
 8002e9c:	dc31      	bgt.n	8002f02 <_printf_float+0x36e>
 8002e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ea0:	459a      	cmp	sl, r3
 8002ea2:	dc3a      	bgt.n	8002f1a <_printf_float+0x386>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	07da      	lsls	r2, r3, #31
 8002ea8:	d437      	bmi.n	8002f1a <_printf_float+0x386>
 8002eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eac:	ebaa 0903 	sub.w	r9, sl, r3
 8002eb0:	9b06      	ldr	r3, [sp, #24]
 8002eb2:	ebaa 0303 	sub.w	r3, sl, r3
 8002eb6:	4599      	cmp	r9, r3
 8002eb8:	bfa8      	it	ge
 8002eba:	4699      	movge	r9, r3
 8002ebc:	f1b9 0f00 	cmp.w	r9, #0
 8002ec0:	dc33      	bgt.n	8002f2a <_printf_float+0x396>
 8002ec2:	f04f 0800 	mov.w	r8, #0
 8002ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002eca:	f104 0b1a 	add.w	fp, r4, #26
 8002ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8002ed4:	eba3 0309 	sub.w	r3, r3, r9
 8002ed8:	4543      	cmp	r3, r8
 8002eda:	f77f af79 	ble.w	8002dd0 <_printf_float+0x23c>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	465a      	mov	r2, fp
 8002ee2:	4631      	mov	r1, r6
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	47b8      	blx	r7
 8002ee8:	3001      	adds	r0, #1
 8002eea:	f43f aeae 	beq.w	8002c4a <_printf_float+0xb6>
 8002eee:	f108 0801 	add.w	r8, r8, #1
 8002ef2:	e7ec      	b.n	8002ece <_printf_float+0x33a>
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4628      	mov	r0, r5
 8002efa:	47b8      	blx	r7
 8002efc:	3001      	adds	r0, #1
 8002efe:	d1c2      	bne.n	8002e86 <_printf_float+0x2f2>
 8002f00:	e6a3      	b.n	8002c4a <_printf_float+0xb6>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4631      	mov	r1, r6
 8002f06:	4628      	mov	r0, r5
 8002f08:	9206      	str	r2, [sp, #24]
 8002f0a:	47b8      	blx	r7
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	f43f ae9c 	beq.w	8002c4a <_printf_float+0xb6>
 8002f12:	9a06      	ldr	r2, [sp, #24]
 8002f14:	f10b 0b01 	add.w	fp, fp, #1
 8002f18:	e7bb      	b.n	8002e92 <_printf_float+0x2fe>
 8002f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f1e:	4631      	mov	r1, r6
 8002f20:	4628      	mov	r0, r5
 8002f22:	47b8      	blx	r7
 8002f24:	3001      	adds	r0, #1
 8002f26:	d1c0      	bne.n	8002eaa <_printf_float+0x316>
 8002f28:	e68f      	b.n	8002c4a <_printf_float+0xb6>
 8002f2a:	9a06      	ldr	r2, [sp, #24]
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	4442      	add	r2, r8
 8002f30:	4631      	mov	r1, r6
 8002f32:	4628      	mov	r0, r5
 8002f34:	47b8      	blx	r7
 8002f36:	3001      	adds	r0, #1
 8002f38:	d1c3      	bne.n	8002ec2 <_printf_float+0x32e>
 8002f3a:	e686      	b.n	8002c4a <_printf_float+0xb6>
 8002f3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002f40:	f1ba 0f01 	cmp.w	sl, #1
 8002f44:	dc01      	bgt.n	8002f4a <_printf_float+0x3b6>
 8002f46:	07db      	lsls	r3, r3, #31
 8002f48:	d536      	bpl.n	8002fb8 <_printf_float+0x424>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	4631      	mov	r1, r6
 8002f50:	4628      	mov	r0, r5
 8002f52:	47b8      	blx	r7
 8002f54:	3001      	adds	r0, #1
 8002f56:	f43f ae78 	beq.w	8002c4a <_printf_float+0xb6>
 8002f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f5e:	4631      	mov	r1, r6
 8002f60:	4628      	mov	r0, r5
 8002f62:	47b8      	blx	r7
 8002f64:	3001      	adds	r0, #1
 8002f66:	f43f ae70 	beq.w	8002c4a <_printf_float+0xb6>
 8002f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2300      	movs	r3, #0
 8002f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f76:	f7fd fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f7a:	b9c0      	cbnz	r0, 8002fae <_printf_float+0x41a>
 8002f7c:	4653      	mov	r3, sl
 8002f7e:	f108 0201 	add.w	r2, r8, #1
 8002f82:	4631      	mov	r1, r6
 8002f84:	4628      	mov	r0, r5
 8002f86:	47b8      	blx	r7
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d10c      	bne.n	8002fa6 <_printf_float+0x412>
 8002f8c:	e65d      	b.n	8002c4a <_printf_float+0xb6>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	465a      	mov	r2, fp
 8002f92:	4631      	mov	r1, r6
 8002f94:	4628      	mov	r0, r5
 8002f96:	47b8      	blx	r7
 8002f98:	3001      	adds	r0, #1
 8002f9a:	f43f ae56 	beq.w	8002c4a <_printf_float+0xb6>
 8002f9e:	f108 0801 	add.w	r8, r8, #1
 8002fa2:	45d0      	cmp	r8, sl
 8002fa4:	dbf3      	blt.n	8002f8e <_printf_float+0x3fa>
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002fac:	e6df      	b.n	8002d6e <_printf_float+0x1da>
 8002fae:	f04f 0800 	mov.w	r8, #0
 8002fb2:	f104 0b1a 	add.w	fp, r4, #26
 8002fb6:	e7f4      	b.n	8002fa2 <_printf_float+0x40e>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4642      	mov	r2, r8
 8002fbc:	e7e1      	b.n	8002f82 <_printf_float+0x3ee>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	464a      	mov	r2, r9
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	47b8      	blx	r7
 8002fc8:	3001      	adds	r0, #1
 8002fca:	f43f ae3e 	beq.w	8002c4a <_printf_float+0xb6>
 8002fce:	f108 0801 	add.w	r8, r8, #1
 8002fd2:	68e3      	ldr	r3, [r4, #12]
 8002fd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002fd6:	1a5b      	subs	r3, r3, r1
 8002fd8:	4543      	cmp	r3, r8
 8002fda:	dcf0      	bgt.n	8002fbe <_printf_float+0x42a>
 8002fdc:	e6fc      	b.n	8002dd8 <_printf_float+0x244>
 8002fde:	f04f 0800 	mov.w	r8, #0
 8002fe2:	f104 0919 	add.w	r9, r4, #25
 8002fe6:	e7f4      	b.n	8002fd2 <_printf_float+0x43e>

08002fe8 <_printf_common>:
 8002fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fec:	4616      	mov	r6, r2
 8002fee:	4698      	mov	r8, r3
 8002ff0:	688a      	ldr	r2, [r1, #8]
 8002ff2:	690b      	ldr	r3, [r1, #16]
 8002ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfb8      	it	lt
 8002ffc:	4613      	movlt	r3, r2
 8002ffe:	6033      	str	r3, [r6, #0]
 8003000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003004:	4607      	mov	r7, r0
 8003006:	460c      	mov	r4, r1
 8003008:	b10a      	cbz	r2, 800300e <_printf_common+0x26>
 800300a:	3301      	adds	r3, #1
 800300c:	6033      	str	r3, [r6, #0]
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	0699      	lsls	r1, r3, #26
 8003012:	bf42      	ittt	mi
 8003014:	6833      	ldrmi	r3, [r6, #0]
 8003016:	3302      	addmi	r3, #2
 8003018:	6033      	strmi	r3, [r6, #0]
 800301a:	6825      	ldr	r5, [r4, #0]
 800301c:	f015 0506 	ands.w	r5, r5, #6
 8003020:	d106      	bne.n	8003030 <_printf_common+0x48>
 8003022:	f104 0a19 	add.w	sl, r4, #25
 8003026:	68e3      	ldr	r3, [r4, #12]
 8003028:	6832      	ldr	r2, [r6, #0]
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	42ab      	cmp	r3, r5
 800302e:	dc26      	bgt.n	800307e <_printf_common+0x96>
 8003030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	3b00      	subs	r3, #0
 8003038:	bf18      	it	ne
 800303a:	2301      	movne	r3, #1
 800303c:	0692      	lsls	r2, r2, #26
 800303e:	d42b      	bmi.n	8003098 <_printf_common+0xb0>
 8003040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003044:	4641      	mov	r1, r8
 8003046:	4638      	mov	r0, r7
 8003048:	47c8      	blx	r9
 800304a:	3001      	adds	r0, #1
 800304c:	d01e      	beq.n	800308c <_printf_common+0xa4>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	f003 0306 	and.w	r3, r3, #6
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf02      	ittt	eq
 800305a:	68e5      	ldreq	r5, [r4, #12]
 800305c:	6833      	ldreq	r3, [r6, #0]
 800305e:	1aed      	subeq	r5, r5, r3
 8003060:	68a3      	ldr	r3, [r4, #8]
 8003062:	bf0c      	ite	eq
 8003064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003068:	2500      	movne	r5, #0
 800306a:	4293      	cmp	r3, r2
 800306c:	bfc4      	itt	gt
 800306e:	1a9b      	subgt	r3, r3, r2
 8003070:	18ed      	addgt	r5, r5, r3
 8003072:	2600      	movs	r6, #0
 8003074:	341a      	adds	r4, #26
 8003076:	42b5      	cmp	r5, r6
 8003078:	d11a      	bne.n	80030b0 <_printf_common+0xc8>
 800307a:	2000      	movs	r0, #0
 800307c:	e008      	b.n	8003090 <_printf_common+0xa8>
 800307e:	2301      	movs	r3, #1
 8003080:	4652      	mov	r2, sl
 8003082:	4641      	mov	r1, r8
 8003084:	4638      	mov	r0, r7
 8003086:	47c8      	blx	r9
 8003088:	3001      	adds	r0, #1
 800308a:	d103      	bne.n	8003094 <_printf_common+0xac>
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	3501      	adds	r5, #1
 8003096:	e7c6      	b.n	8003026 <_printf_common+0x3e>
 8003098:	18e1      	adds	r1, r4, r3
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	2030      	movs	r0, #48	@ 0x30
 800309e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030a2:	4422      	add	r2, r4
 80030a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030ac:	3302      	adds	r3, #2
 80030ae:	e7c7      	b.n	8003040 <_printf_common+0x58>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4622      	mov	r2, r4
 80030b4:	4641      	mov	r1, r8
 80030b6:	4638      	mov	r0, r7
 80030b8:	47c8      	blx	r9
 80030ba:	3001      	adds	r0, #1
 80030bc:	d0e6      	beq.n	800308c <_printf_common+0xa4>
 80030be:	3601      	adds	r6, #1
 80030c0:	e7d9      	b.n	8003076 <_printf_common+0x8e>
	...

080030c4 <_printf_i>:
 80030c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030c8:	7e0f      	ldrb	r7, [r1, #24]
 80030ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030cc:	2f78      	cmp	r7, #120	@ 0x78
 80030ce:	4691      	mov	r9, r2
 80030d0:	4680      	mov	r8, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	469a      	mov	sl, r3
 80030d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030da:	d807      	bhi.n	80030ec <_printf_i+0x28>
 80030dc:	2f62      	cmp	r7, #98	@ 0x62
 80030de:	d80a      	bhi.n	80030f6 <_printf_i+0x32>
 80030e0:	2f00      	cmp	r7, #0
 80030e2:	f000 80d1 	beq.w	8003288 <_printf_i+0x1c4>
 80030e6:	2f58      	cmp	r7, #88	@ 0x58
 80030e8:	f000 80b8 	beq.w	800325c <_printf_i+0x198>
 80030ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030f4:	e03a      	b.n	800316c <_printf_i+0xa8>
 80030f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030fa:	2b15      	cmp	r3, #21
 80030fc:	d8f6      	bhi.n	80030ec <_printf_i+0x28>
 80030fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003104 <_printf_i+0x40>)
 8003100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003104:	0800315d 	.word	0x0800315d
 8003108:	08003171 	.word	0x08003171
 800310c:	080030ed 	.word	0x080030ed
 8003110:	080030ed 	.word	0x080030ed
 8003114:	080030ed 	.word	0x080030ed
 8003118:	080030ed 	.word	0x080030ed
 800311c:	08003171 	.word	0x08003171
 8003120:	080030ed 	.word	0x080030ed
 8003124:	080030ed 	.word	0x080030ed
 8003128:	080030ed 	.word	0x080030ed
 800312c:	080030ed 	.word	0x080030ed
 8003130:	0800326f 	.word	0x0800326f
 8003134:	0800319b 	.word	0x0800319b
 8003138:	08003229 	.word	0x08003229
 800313c:	080030ed 	.word	0x080030ed
 8003140:	080030ed 	.word	0x080030ed
 8003144:	08003291 	.word	0x08003291
 8003148:	080030ed 	.word	0x080030ed
 800314c:	0800319b 	.word	0x0800319b
 8003150:	080030ed 	.word	0x080030ed
 8003154:	080030ed 	.word	0x080030ed
 8003158:	08003231 	.word	0x08003231
 800315c:	6833      	ldr	r3, [r6, #0]
 800315e:	1d1a      	adds	r2, r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6032      	str	r2, [r6, #0]
 8003164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800316c:	2301      	movs	r3, #1
 800316e:	e09c      	b.n	80032aa <_printf_i+0x1e6>
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	1d19      	adds	r1, r3, #4
 8003176:	6031      	str	r1, [r6, #0]
 8003178:	0606      	lsls	r6, r0, #24
 800317a:	d501      	bpl.n	8003180 <_printf_i+0xbc>
 800317c:	681d      	ldr	r5, [r3, #0]
 800317e:	e003      	b.n	8003188 <_printf_i+0xc4>
 8003180:	0645      	lsls	r5, r0, #25
 8003182:	d5fb      	bpl.n	800317c <_printf_i+0xb8>
 8003184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003188:	2d00      	cmp	r5, #0
 800318a:	da03      	bge.n	8003194 <_printf_i+0xd0>
 800318c:	232d      	movs	r3, #45	@ 0x2d
 800318e:	426d      	negs	r5, r5
 8003190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003194:	4858      	ldr	r0, [pc, #352]	@ (80032f8 <_printf_i+0x234>)
 8003196:	230a      	movs	r3, #10
 8003198:	e011      	b.n	80031be <_printf_i+0xfa>
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	0608      	lsls	r0, r1, #24
 80031a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80031a4:	d402      	bmi.n	80031ac <_printf_i+0xe8>
 80031a6:	0649      	lsls	r1, r1, #25
 80031a8:	bf48      	it	mi
 80031aa:	b2ad      	uxthmi	r5, r5
 80031ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ae:	4852      	ldr	r0, [pc, #328]	@ (80032f8 <_printf_i+0x234>)
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	bf14      	ite	ne
 80031b4:	230a      	movne	r3, #10
 80031b6:	2308      	moveq	r3, #8
 80031b8:	2100      	movs	r1, #0
 80031ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031be:	6866      	ldr	r6, [r4, #4]
 80031c0:	60a6      	str	r6, [r4, #8]
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	db05      	blt.n	80031d2 <_printf_i+0x10e>
 80031c6:	6821      	ldr	r1, [r4, #0]
 80031c8:	432e      	orrs	r6, r5
 80031ca:	f021 0104 	bic.w	r1, r1, #4
 80031ce:	6021      	str	r1, [r4, #0]
 80031d0:	d04b      	beq.n	800326a <_printf_i+0x1a6>
 80031d2:	4616      	mov	r6, r2
 80031d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80031d8:	fb03 5711 	mls	r7, r3, r1, r5
 80031dc:	5dc7      	ldrb	r7, [r0, r7]
 80031de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031e2:	462f      	mov	r7, r5
 80031e4:	42bb      	cmp	r3, r7
 80031e6:	460d      	mov	r5, r1
 80031e8:	d9f4      	bls.n	80031d4 <_printf_i+0x110>
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d10b      	bne.n	8003206 <_printf_i+0x142>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	07df      	lsls	r7, r3, #31
 80031f2:	d508      	bpl.n	8003206 <_printf_i+0x142>
 80031f4:	6923      	ldr	r3, [r4, #16]
 80031f6:	6861      	ldr	r1, [r4, #4]
 80031f8:	4299      	cmp	r1, r3
 80031fa:	bfde      	ittt	le
 80031fc:	2330      	movle	r3, #48	@ 0x30
 80031fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003202:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003206:	1b92      	subs	r2, r2, r6
 8003208:	6122      	str	r2, [r4, #16]
 800320a:	f8cd a000 	str.w	sl, [sp]
 800320e:	464b      	mov	r3, r9
 8003210:	aa03      	add	r2, sp, #12
 8003212:	4621      	mov	r1, r4
 8003214:	4640      	mov	r0, r8
 8003216:	f7ff fee7 	bl	8002fe8 <_printf_common>
 800321a:	3001      	adds	r0, #1
 800321c:	d14a      	bne.n	80032b4 <_printf_i+0x1f0>
 800321e:	f04f 30ff 	mov.w	r0, #4294967295
 8003222:	b004      	add	sp, #16
 8003224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	4832      	ldr	r0, [pc, #200]	@ (80032fc <_printf_i+0x238>)
 8003232:	2778      	movs	r7, #120	@ 0x78
 8003234:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	6831      	ldr	r1, [r6, #0]
 800323c:	061f      	lsls	r7, r3, #24
 800323e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003242:	d402      	bmi.n	800324a <_printf_i+0x186>
 8003244:	065f      	lsls	r7, r3, #25
 8003246:	bf48      	it	mi
 8003248:	b2ad      	uxthmi	r5, r5
 800324a:	6031      	str	r1, [r6, #0]
 800324c:	07d9      	lsls	r1, r3, #31
 800324e:	bf44      	itt	mi
 8003250:	f043 0320 	orrmi.w	r3, r3, #32
 8003254:	6023      	strmi	r3, [r4, #0]
 8003256:	b11d      	cbz	r5, 8003260 <_printf_i+0x19c>
 8003258:	2310      	movs	r3, #16
 800325a:	e7ad      	b.n	80031b8 <_printf_i+0xf4>
 800325c:	4826      	ldr	r0, [pc, #152]	@ (80032f8 <_printf_i+0x234>)
 800325e:	e7e9      	b.n	8003234 <_printf_i+0x170>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	f023 0320 	bic.w	r3, r3, #32
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	e7f6      	b.n	8003258 <_printf_i+0x194>
 800326a:	4616      	mov	r6, r2
 800326c:	e7bd      	b.n	80031ea <_printf_i+0x126>
 800326e:	6833      	ldr	r3, [r6, #0]
 8003270:	6825      	ldr	r5, [r4, #0]
 8003272:	6961      	ldr	r1, [r4, #20]
 8003274:	1d18      	adds	r0, r3, #4
 8003276:	6030      	str	r0, [r6, #0]
 8003278:	062e      	lsls	r6, r5, #24
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	d501      	bpl.n	8003282 <_printf_i+0x1be>
 800327e:	6019      	str	r1, [r3, #0]
 8003280:	e002      	b.n	8003288 <_printf_i+0x1c4>
 8003282:	0668      	lsls	r0, r5, #25
 8003284:	d5fb      	bpl.n	800327e <_printf_i+0x1ba>
 8003286:	8019      	strh	r1, [r3, #0]
 8003288:	2300      	movs	r3, #0
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	4616      	mov	r6, r2
 800328e:	e7bc      	b.n	800320a <_printf_i+0x146>
 8003290:	6833      	ldr	r3, [r6, #0]
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	6032      	str	r2, [r6, #0]
 8003296:	681e      	ldr	r6, [r3, #0]
 8003298:	6862      	ldr	r2, [r4, #4]
 800329a:	2100      	movs	r1, #0
 800329c:	4630      	mov	r0, r6
 800329e:	f7fc ff97 	bl	80001d0 <memchr>
 80032a2:	b108      	cbz	r0, 80032a8 <_printf_i+0x1e4>
 80032a4:	1b80      	subs	r0, r0, r6
 80032a6:	6060      	str	r0, [r4, #4]
 80032a8:	6863      	ldr	r3, [r4, #4]
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	2300      	movs	r3, #0
 80032ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032b2:	e7aa      	b.n	800320a <_printf_i+0x146>
 80032b4:	6923      	ldr	r3, [r4, #16]
 80032b6:	4632      	mov	r2, r6
 80032b8:	4649      	mov	r1, r9
 80032ba:	4640      	mov	r0, r8
 80032bc:	47d0      	blx	sl
 80032be:	3001      	adds	r0, #1
 80032c0:	d0ad      	beq.n	800321e <_printf_i+0x15a>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	079b      	lsls	r3, r3, #30
 80032c6:	d413      	bmi.n	80032f0 <_printf_i+0x22c>
 80032c8:	68e0      	ldr	r0, [r4, #12]
 80032ca:	9b03      	ldr	r3, [sp, #12]
 80032cc:	4298      	cmp	r0, r3
 80032ce:	bfb8      	it	lt
 80032d0:	4618      	movlt	r0, r3
 80032d2:	e7a6      	b.n	8003222 <_printf_i+0x15e>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4632      	mov	r2, r6
 80032d8:	4649      	mov	r1, r9
 80032da:	4640      	mov	r0, r8
 80032dc:	47d0      	blx	sl
 80032de:	3001      	adds	r0, #1
 80032e0:	d09d      	beq.n	800321e <_printf_i+0x15a>
 80032e2:	3501      	adds	r5, #1
 80032e4:	68e3      	ldr	r3, [r4, #12]
 80032e6:	9903      	ldr	r1, [sp, #12]
 80032e8:	1a5b      	subs	r3, r3, r1
 80032ea:	42ab      	cmp	r3, r5
 80032ec:	dcf2      	bgt.n	80032d4 <_printf_i+0x210>
 80032ee:	e7eb      	b.n	80032c8 <_printf_i+0x204>
 80032f0:	2500      	movs	r5, #0
 80032f2:	f104 0619 	add.w	r6, r4, #25
 80032f6:	e7f5      	b.n	80032e4 <_printf_i+0x220>
 80032f8:	08005709 	.word	0x08005709
 80032fc:	0800571a 	.word	0x0800571a

08003300 <__sflush_r>:
 8003300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003308:	0716      	lsls	r6, r2, #28
 800330a:	4605      	mov	r5, r0
 800330c:	460c      	mov	r4, r1
 800330e:	d454      	bmi.n	80033ba <__sflush_r+0xba>
 8003310:	684b      	ldr	r3, [r1, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	dc02      	bgt.n	800331c <__sflush_r+0x1c>
 8003316:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	dd48      	ble.n	80033ae <__sflush_r+0xae>
 800331c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800331e:	2e00      	cmp	r6, #0
 8003320:	d045      	beq.n	80033ae <__sflush_r+0xae>
 8003322:	2300      	movs	r3, #0
 8003324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003328:	682f      	ldr	r7, [r5, #0]
 800332a:	6a21      	ldr	r1, [r4, #32]
 800332c:	602b      	str	r3, [r5, #0]
 800332e:	d030      	beq.n	8003392 <__sflush_r+0x92>
 8003330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	0759      	lsls	r1, r3, #29
 8003336:	d505      	bpl.n	8003344 <__sflush_r+0x44>
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800333e:	b10b      	cbz	r3, 8003344 <__sflush_r+0x44>
 8003340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	2300      	movs	r3, #0
 8003346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003348:	6a21      	ldr	r1, [r4, #32]
 800334a:	4628      	mov	r0, r5
 800334c:	47b0      	blx	r6
 800334e:	1c43      	adds	r3, r0, #1
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	d106      	bne.n	8003362 <__sflush_r+0x62>
 8003354:	6829      	ldr	r1, [r5, #0]
 8003356:	291d      	cmp	r1, #29
 8003358:	d82b      	bhi.n	80033b2 <__sflush_r+0xb2>
 800335a:	4a2a      	ldr	r2, [pc, #168]	@ (8003404 <__sflush_r+0x104>)
 800335c:	40ca      	lsrs	r2, r1
 800335e:	07d6      	lsls	r6, r2, #31
 8003360:	d527      	bpl.n	80033b2 <__sflush_r+0xb2>
 8003362:	2200      	movs	r2, #0
 8003364:	6062      	str	r2, [r4, #4]
 8003366:	04d9      	lsls	r1, r3, #19
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	6022      	str	r2, [r4, #0]
 800336c:	d504      	bpl.n	8003378 <__sflush_r+0x78>
 800336e:	1c42      	adds	r2, r0, #1
 8003370:	d101      	bne.n	8003376 <__sflush_r+0x76>
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	b903      	cbnz	r3, 8003378 <__sflush_r+0x78>
 8003376:	6560      	str	r0, [r4, #84]	@ 0x54
 8003378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800337a:	602f      	str	r7, [r5, #0]
 800337c:	b1b9      	cbz	r1, 80033ae <__sflush_r+0xae>
 800337e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003382:	4299      	cmp	r1, r3
 8003384:	d002      	beq.n	800338c <__sflush_r+0x8c>
 8003386:	4628      	mov	r0, r5
 8003388:	f001 f992 	bl	80046b0 <_free_r>
 800338c:	2300      	movs	r3, #0
 800338e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003390:	e00d      	b.n	80033ae <__sflush_r+0xae>
 8003392:	2301      	movs	r3, #1
 8003394:	4628      	mov	r0, r5
 8003396:	47b0      	blx	r6
 8003398:	4602      	mov	r2, r0
 800339a:	1c50      	adds	r0, r2, #1
 800339c:	d1c9      	bne.n	8003332 <__sflush_r+0x32>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0c6      	beq.n	8003332 <__sflush_r+0x32>
 80033a4:	2b1d      	cmp	r3, #29
 80033a6:	d001      	beq.n	80033ac <__sflush_r+0xac>
 80033a8:	2b16      	cmp	r3, #22
 80033aa:	d11e      	bne.n	80033ea <__sflush_r+0xea>
 80033ac:	602f      	str	r7, [r5, #0]
 80033ae:	2000      	movs	r0, #0
 80033b0:	e022      	b.n	80033f8 <__sflush_r+0xf8>
 80033b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	e01b      	b.n	80033f2 <__sflush_r+0xf2>
 80033ba:	690f      	ldr	r7, [r1, #16]
 80033bc:	2f00      	cmp	r7, #0
 80033be:	d0f6      	beq.n	80033ae <__sflush_r+0xae>
 80033c0:	0793      	lsls	r3, r2, #30
 80033c2:	680e      	ldr	r6, [r1, #0]
 80033c4:	bf08      	it	eq
 80033c6:	694b      	ldreq	r3, [r1, #20]
 80033c8:	600f      	str	r7, [r1, #0]
 80033ca:	bf18      	it	ne
 80033cc:	2300      	movne	r3, #0
 80033ce:	eba6 0807 	sub.w	r8, r6, r7
 80033d2:	608b      	str	r3, [r1, #8]
 80033d4:	f1b8 0f00 	cmp.w	r8, #0
 80033d8:	dde9      	ble.n	80033ae <__sflush_r+0xae>
 80033da:	6a21      	ldr	r1, [r4, #32]
 80033dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80033de:	4643      	mov	r3, r8
 80033e0:	463a      	mov	r2, r7
 80033e2:	4628      	mov	r0, r5
 80033e4:	47b0      	blx	r6
 80033e6:	2800      	cmp	r0, #0
 80033e8:	dc08      	bgt.n	80033fc <__sflush_r+0xfc>
 80033ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fc:	4407      	add	r7, r0
 80033fe:	eba8 0800 	sub.w	r8, r8, r0
 8003402:	e7e7      	b.n	80033d4 <__sflush_r+0xd4>
 8003404:	20400001 	.word	0x20400001

08003408 <_fflush_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	690b      	ldr	r3, [r1, #16]
 800340c:	4605      	mov	r5, r0
 800340e:	460c      	mov	r4, r1
 8003410:	b913      	cbnz	r3, 8003418 <_fflush_r+0x10>
 8003412:	2500      	movs	r5, #0
 8003414:	4628      	mov	r0, r5
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	b118      	cbz	r0, 8003422 <_fflush_r+0x1a>
 800341a:	6a03      	ldr	r3, [r0, #32]
 800341c:	b90b      	cbnz	r3, 8003422 <_fflush_r+0x1a>
 800341e:	f000 f8a7 	bl	8003570 <__sinit>
 8003422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f3      	beq.n	8003412 <_fflush_r+0xa>
 800342a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800342c:	07d0      	lsls	r0, r2, #31
 800342e:	d404      	bmi.n	800343a <_fflush_r+0x32>
 8003430:	0599      	lsls	r1, r3, #22
 8003432:	d402      	bmi.n	800343a <_fflush_r+0x32>
 8003434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003436:	f000 fad0 	bl	80039da <__retarget_lock_acquire_recursive>
 800343a:	4628      	mov	r0, r5
 800343c:	4621      	mov	r1, r4
 800343e:	f7ff ff5f 	bl	8003300 <__sflush_r>
 8003442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003444:	07da      	lsls	r2, r3, #31
 8003446:	4605      	mov	r5, r0
 8003448:	d4e4      	bmi.n	8003414 <_fflush_r+0xc>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	059b      	lsls	r3, r3, #22
 800344e:	d4e1      	bmi.n	8003414 <_fflush_r+0xc>
 8003450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003452:	f000 fac3 	bl	80039dc <__retarget_lock_release_recursive>
 8003456:	e7dd      	b.n	8003414 <_fflush_r+0xc>

08003458 <std>:
 8003458:	2300      	movs	r3, #0
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	e9c0 3300 	strd	r3, r3, [r0]
 8003462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003466:	6083      	str	r3, [r0, #8]
 8003468:	8181      	strh	r1, [r0, #12]
 800346a:	6643      	str	r3, [r0, #100]	@ 0x64
 800346c:	81c2      	strh	r2, [r0, #14]
 800346e:	6183      	str	r3, [r0, #24]
 8003470:	4619      	mov	r1, r3
 8003472:	2208      	movs	r2, #8
 8003474:	305c      	adds	r0, #92	@ 0x5c
 8003476:	f000 fa45 	bl	8003904 <memset>
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <std+0x58>)
 800347c:	6263      	str	r3, [r4, #36]	@ 0x24
 800347e:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <std+0x5c>)
 8003480:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <std+0x60>)
 8003484:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <std+0x64>)
 8003488:	6323      	str	r3, [r4, #48]	@ 0x30
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <std+0x68>)
 800348c:	6224      	str	r4, [r4, #32]
 800348e:	429c      	cmp	r4, r3
 8003490:	d006      	beq.n	80034a0 <std+0x48>
 8003492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003496:	4294      	cmp	r4, r2
 8003498:	d002      	beq.n	80034a0 <std+0x48>
 800349a:	33d0      	adds	r3, #208	@ 0xd0
 800349c:	429c      	cmp	r4, r3
 800349e:	d105      	bne.n	80034ac <std+0x54>
 80034a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a8:	f000 ba96 	b.w	80039d8 <__retarget_lock_init_recursive>
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	bf00      	nop
 80034b0:	08003755 	.word	0x08003755
 80034b4:	08003777 	.word	0x08003777
 80034b8:	080037af 	.word	0x080037af
 80034bc:	080037d3 	.word	0x080037d3
 80034c0:	200004ec 	.word	0x200004ec

080034c4 <stdio_exit_handler>:
 80034c4:	4a02      	ldr	r2, [pc, #8]	@ (80034d0 <stdio_exit_handler+0xc>)
 80034c6:	4903      	ldr	r1, [pc, #12]	@ (80034d4 <stdio_exit_handler+0x10>)
 80034c8:	4803      	ldr	r0, [pc, #12]	@ (80034d8 <stdio_exit_handler+0x14>)
 80034ca:	f000 b869 	b.w	80035a0 <_fwalk_sglue>
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000
 80034d4:	08003409 	.word	0x08003409
 80034d8:	20000010 	.word	0x20000010

080034dc <cleanup_stdio>:
 80034dc:	6841      	ldr	r1, [r0, #4]
 80034de:	4b0c      	ldr	r3, [pc, #48]	@ (8003510 <cleanup_stdio+0x34>)
 80034e0:	4299      	cmp	r1, r3
 80034e2:	b510      	push	{r4, lr}
 80034e4:	4604      	mov	r4, r0
 80034e6:	d001      	beq.n	80034ec <cleanup_stdio+0x10>
 80034e8:	f7ff ff8e 	bl	8003408 <_fflush_r>
 80034ec:	68a1      	ldr	r1, [r4, #8]
 80034ee:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <cleanup_stdio+0x38>)
 80034f0:	4299      	cmp	r1, r3
 80034f2:	d002      	beq.n	80034fa <cleanup_stdio+0x1e>
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7ff ff87 	bl	8003408 <_fflush_r>
 80034fa:	68e1      	ldr	r1, [r4, #12]
 80034fc:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <cleanup_stdio+0x3c>)
 80034fe:	4299      	cmp	r1, r3
 8003500:	d004      	beq.n	800350c <cleanup_stdio+0x30>
 8003502:	4620      	mov	r0, r4
 8003504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003508:	f7ff bf7e 	b.w	8003408 <_fflush_r>
 800350c:	bd10      	pop	{r4, pc}
 800350e:	bf00      	nop
 8003510:	200004ec 	.word	0x200004ec
 8003514:	20000554 	.word	0x20000554
 8003518:	200005bc 	.word	0x200005bc

0800351c <global_stdio_init.part.0>:
 800351c:	b510      	push	{r4, lr}
 800351e:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <global_stdio_init.part.0+0x30>)
 8003520:	4c0b      	ldr	r4, [pc, #44]	@ (8003550 <global_stdio_init.part.0+0x34>)
 8003522:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <global_stdio_init.part.0+0x38>)
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4620      	mov	r0, r4
 8003528:	2200      	movs	r2, #0
 800352a:	2104      	movs	r1, #4
 800352c:	f7ff ff94 	bl	8003458 <std>
 8003530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003534:	2201      	movs	r2, #1
 8003536:	2109      	movs	r1, #9
 8003538:	f7ff ff8e 	bl	8003458 <std>
 800353c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003540:	2202      	movs	r2, #2
 8003542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003546:	2112      	movs	r1, #18
 8003548:	f7ff bf86 	b.w	8003458 <std>
 800354c:	20000624 	.word	0x20000624
 8003550:	200004ec 	.word	0x200004ec
 8003554:	080034c5 	.word	0x080034c5

08003558 <__sfp_lock_acquire>:
 8003558:	4801      	ldr	r0, [pc, #4]	@ (8003560 <__sfp_lock_acquire+0x8>)
 800355a:	f000 ba3e 	b.w	80039da <__retarget_lock_acquire_recursive>
 800355e:	bf00      	nop
 8003560:	2000062d 	.word	0x2000062d

08003564 <__sfp_lock_release>:
 8003564:	4801      	ldr	r0, [pc, #4]	@ (800356c <__sfp_lock_release+0x8>)
 8003566:	f000 ba39 	b.w	80039dc <__retarget_lock_release_recursive>
 800356a:	bf00      	nop
 800356c:	2000062d 	.word	0x2000062d

08003570 <__sinit>:
 8003570:	b510      	push	{r4, lr}
 8003572:	4604      	mov	r4, r0
 8003574:	f7ff fff0 	bl	8003558 <__sfp_lock_acquire>
 8003578:	6a23      	ldr	r3, [r4, #32]
 800357a:	b11b      	cbz	r3, 8003584 <__sinit+0x14>
 800357c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003580:	f7ff bff0 	b.w	8003564 <__sfp_lock_release>
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <__sinit+0x28>)
 8003586:	6223      	str	r3, [r4, #32]
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <__sinit+0x2c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f5      	bne.n	800357c <__sinit+0xc>
 8003590:	f7ff ffc4 	bl	800351c <global_stdio_init.part.0>
 8003594:	e7f2      	b.n	800357c <__sinit+0xc>
 8003596:	bf00      	nop
 8003598:	080034dd 	.word	0x080034dd
 800359c:	20000624 	.word	0x20000624

080035a0 <_fwalk_sglue>:
 80035a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035a4:	4607      	mov	r7, r0
 80035a6:	4688      	mov	r8, r1
 80035a8:	4614      	mov	r4, r2
 80035aa:	2600      	movs	r6, #0
 80035ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035b0:	f1b9 0901 	subs.w	r9, r9, #1
 80035b4:	d505      	bpl.n	80035c2 <_fwalk_sglue+0x22>
 80035b6:	6824      	ldr	r4, [r4, #0]
 80035b8:	2c00      	cmp	r4, #0
 80035ba:	d1f7      	bne.n	80035ac <_fwalk_sglue+0xc>
 80035bc:	4630      	mov	r0, r6
 80035be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c2:	89ab      	ldrh	r3, [r5, #12]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d907      	bls.n	80035d8 <_fwalk_sglue+0x38>
 80035c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035cc:	3301      	adds	r3, #1
 80035ce:	d003      	beq.n	80035d8 <_fwalk_sglue+0x38>
 80035d0:	4629      	mov	r1, r5
 80035d2:	4638      	mov	r0, r7
 80035d4:	47c0      	blx	r8
 80035d6:	4306      	orrs	r6, r0
 80035d8:	3568      	adds	r5, #104	@ 0x68
 80035da:	e7e9      	b.n	80035b0 <_fwalk_sglue+0x10>

080035dc <setbuf>:
 80035dc:	fab1 f281 	clz	r2, r1
 80035e0:	0952      	lsrs	r2, r2, #5
 80035e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e6:	0052      	lsls	r2, r2, #1
 80035e8:	f000 b800 	b.w	80035ec <setvbuf>

080035ec <setvbuf>:
 80035ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	461d      	mov	r5, r3
 80035f2:	4b57      	ldr	r3, [pc, #348]	@ (8003750 <setvbuf+0x164>)
 80035f4:	681f      	ldr	r7, [r3, #0]
 80035f6:	4604      	mov	r4, r0
 80035f8:	460e      	mov	r6, r1
 80035fa:	4690      	mov	r8, r2
 80035fc:	b127      	cbz	r7, 8003608 <setvbuf+0x1c>
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	b913      	cbnz	r3, 8003608 <setvbuf+0x1c>
 8003602:	4638      	mov	r0, r7
 8003604:	f7ff ffb4 	bl	8003570 <__sinit>
 8003608:	f1b8 0f02 	cmp.w	r8, #2
 800360c:	d006      	beq.n	800361c <setvbuf+0x30>
 800360e:	f1b8 0f01 	cmp.w	r8, #1
 8003612:	f200 809a 	bhi.w	800374a <setvbuf+0x15e>
 8003616:	2d00      	cmp	r5, #0
 8003618:	f2c0 8097 	blt.w	800374a <setvbuf+0x15e>
 800361c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800361e:	07d9      	lsls	r1, r3, #31
 8003620:	d405      	bmi.n	800362e <setvbuf+0x42>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	059a      	lsls	r2, r3, #22
 8003626:	d402      	bmi.n	800362e <setvbuf+0x42>
 8003628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800362a:	f000 f9d6 	bl	80039da <__retarget_lock_acquire_recursive>
 800362e:	4621      	mov	r1, r4
 8003630:	4638      	mov	r0, r7
 8003632:	f7ff fee9 	bl	8003408 <_fflush_r>
 8003636:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003638:	b141      	cbz	r1, 800364c <setvbuf+0x60>
 800363a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800363e:	4299      	cmp	r1, r3
 8003640:	d002      	beq.n	8003648 <setvbuf+0x5c>
 8003642:	4638      	mov	r0, r7
 8003644:	f001 f834 	bl	80046b0 <_free_r>
 8003648:	2300      	movs	r3, #0
 800364a:	6363      	str	r3, [r4, #52]	@ 0x34
 800364c:	2300      	movs	r3, #0
 800364e:	61a3      	str	r3, [r4, #24]
 8003650:	6063      	str	r3, [r4, #4]
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	d503      	bpl.n	8003660 <setvbuf+0x74>
 8003658:	6921      	ldr	r1, [r4, #16]
 800365a:	4638      	mov	r0, r7
 800365c:	f001 f828 	bl	80046b0 <_free_r>
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	f1b8 0f02 	cmp.w	r8, #2
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	d061      	beq.n	8003736 <setvbuf+0x14a>
 8003672:	ab01      	add	r3, sp, #4
 8003674:	466a      	mov	r2, sp
 8003676:	4621      	mov	r1, r4
 8003678:	4638      	mov	r0, r7
 800367a:	f001 fdd5 	bl	8005228 <__swhatbuf_r>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	4318      	orrs	r0, r3
 8003682:	81a0      	strh	r0, [r4, #12]
 8003684:	bb2d      	cbnz	r5, 80036d2 <setvbuf+0xe6>
 8003686:	9d00      	ldr	r5, [sp, #0]
 8003688:	4628      	mov	r0, r5
 800368a:	f001 f85b 	bl	8004744 <malloc>
 800368e:	4606      	mov	r6, r0
 8003690:	2800      	cmp	r0, #0
 8003692:	d152      	bne.n	800373a <setvbuf+0x14e>
 8003694:	f8dd 9000 	ldr.w	r9, [sp]
 8003698:	45a9      	cmp	r9, r5
 800369a:	d140      	bne.n	800371e <setvbuf+0x132>
 800369c:	f04f 35ff 	mov.w	r5, #4294967295
 80036a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a4:	f043 0202 	orr.w	r2, r3, #2
 80036a8:	81a2      	strh	r2, [r4, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	60a2      	str	r2, [r4, #8]
 80036ae:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80036b2:	6022      	str	r2, [r4, #0]
 80036b4:	6122      	str	r2, [r4, #16]
 80036b6:	2201      	movs	r2, #1
 80036b8:	6162      	str	r2, [r4, #20]
 80036ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036bc:	07d6      	lsls	r6, r2, #31
 80036be:	d404      	bmi.n	80036ca <setvbuf+0xde>
 80036c0:	0598      	lsls	r0, r3, #22
 80036c2:	d402      	bmi.n	80036ca <setvbuf+0xde>
 80036c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036c6:	f000 f989 	bl	80039dc <__retarget_lock_release_recursive>
 80036ca:	4628      	mov	r0, r5
 80036cc:	b003      	add	sp, #12
 80036ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036d2:	2e00      	cmp	r6, #0
 80036d4:	d0d8      	beq.n	8003688 <setvbuf+0x9c>
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	b913      	cbnz	r3, 80036e0 <setvbuf+0xf4>
 80036da:	4638      	mov	r0, r7
 80036dc:	f7ff ff48 	bl	8003570 <__sinit>
 80036e0:	f1b8 0f01 	cmp.w	r8, #1
 80036e4:	bf08      	it	eq
 80036e6:	89a3      	ldrheq	r3, [r4, #12]
 80036e8:	6026      	str	r6, [r4, #0]
 80036ea:	bf04      	itt	eq
 80036ec:	f043 0301 	orreq.w	r3, r3, #1
 80036f0:	81a3      	strheq	r3, [r4, #12]
 80036f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f6:	f013 0208 	ands.w	r2, r3, #8
 80036fa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80036fe:	d01e      	beq.n	800373e <setvbuf+0x152>
 8003700:	07d9      	lsls	r1, r3, #31
 8003702:	bf41      	itttt	mi
 8003704:	2200      	movmi	r2, #0
 8003706:	426d      	negmi	r5, r5
 8003708:	60a2      	strmi	r2, [r4, #8]
 800370a:	61a5      	strmi	r5, [r4, #24]
 800370c:	bf58      	it	pl
 800370e:	60a5      	strpl	r5, [r4, #8]
 8003710:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003712:	07d2      	lsls	r2, r2, #31
 8003714:	d401      	bmi.n	800371a <setvbuf+0x12e>
 8003716:	059b      	lsls	r3, r3, #22
 8003718:	d513      	bpl.n	8003742 <setvbuf+0x156>
 800371a:	2500      	movs	r5, #0
 800371c:	e7d5      	b.n	80036ca <setvbuf+0xde>
 800371e:	4648      	mov	r0, r9
 8003720:	f001 f810 	bl	8004744 <malloc>
 8003724:	4606      	mov	r6, r0
 8003726:	2800      	cmp	r0, #0
 8003728:	d0b8      	beq.n	800369c <setvbuf+0xb0>
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	464d      	mov	r5, r9
 8003734:	e7cf      	b.n	80036d6 <setvbuf+0xea>
 8003736:	2500      	movs	r5, #0
 8003738:	e7b2      	b.n	80036a0 <setvbuf+0xb4>
 800373a:	46a9      	mov	r9, r5
 800373c:	e7f5      	b.n	800372a <setvbuf+0x13e>
 800373e:	60a2      	str	r2, [r4, #8]
 8003740:	e7e6      	b.n	8003710 <setvbuf+0x124>
 8003742:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003744:	f000 f94a 	bl	80039dc <__retarget_lock_release_recursive>
 8003748:	e7e7      	b.n	800371a <setvbuf+0x12e>
 800374a:	f04f 35ff 	mov.w	r5, #4294967295
 800374e:	e7bc      	b.n	80036ca <setvbuf+0xde>
 8003750:	2000000c 	.word	0x2000000c

08003754 <__sread>:
 8003754:	b510      	push	{r4, lr}
 8003756:	460c      	mov	r4, r1
 8003758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375c:	f000 f900 	bl	8003960 <_read_r>
 8003760:	2800      	cmp	r0, #0
 8003762:	bfab      	itete	ge
 8003764:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003766:	89a3      	ldrhlt	r3, [r4, #12]
 8003768:	181b      	addge	r3, r3, r0
 800376a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800376e:	bfac      	ite	ge
 8003770:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003772:	81a3      	strhlt	r3, [r4, #12]
 8003774:	bd10      	pop	{r4, pc}

08003776 <__swrite>:
 8003776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377a:	461f      	mov	r7, r3
 800377c:	898b      	ldrh	r3, [r1, #12]
 800377e:	05db      	lsls	r3, r3, #23
 8003780:	4605      	mov	r5, r0
 8003782:	460c      	mov	r4, r1
 8003784:	4616      	mov	r6, r2
 8003786:	d505      	bpl.n	8003794 <__swrite+0x1e>
 8003788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378c:	2302      	movs	r3, #2
 800378e:	2200      	movs	r2, #0
 8003790:	f000 f8d4 	bl	800393c <_lseek_r>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800379a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800379e:	81a3      	strh	r3, [r4, #12]
 80037a0:	4632      	mov	r2, r6
 80037a2:	463b      	mov	r3, r7
 80037a4:	4628      	mov	r0, r5
 80037a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	f7fe b861 	b.w	8001870 <_write_r>

080037ae <__sseek>:
 80037ae:	b510      	push	{r4, lr}
 80037b0:	460c      	mov	r4, r1
 80037b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b6:	f000 f8c1 	bl	800393c <_lseek_r>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	bf15      	itete	ne
 80037c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037ca:	81a3      	strheq	r3, [r4, #12]
 80037cc:	bf18      	it	ne
 80037ce:	81a3      	strhne	r3, [r4, #12]
 80037d0:	bd10      	pop	{r4, pc}

080037d2 <__sclose>:
 80037d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d6:	f000 b8a1 	b.w	800391c <_close_r>

080037da <__swbuf_r>:
 80037da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037dc:	460e      	mov	r6, r1
 80037de:	4614      	mov	r4, r2
 80037e0:	4605      	mov	r5, r0
 80037e2:	b118      	cbz	r0, 80037ec <__swbuf_r+0x12>
 80037e4:	6a03      	ldr	r3, [r0, #32]
 80037e6:	b90b      	cbnz	r3, 80037ec <__swbuf_r+0x12>
 80037e8:	f7ff fec2 	bl	8003570 <__sinit>
 80037ec:	69a3      	ldr	r3, [r4, #24]
 80037ee:	60a3      	str	r3, [r4, #8]
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	071a      	lsls	r2, r3, #28
 80037f4:	d501      	bpl.n	80037fa <__swbuf_r+0x20>
 80037f6:	6923      	ldr	r3, [r4, #16]
 80037f8:	b943      	cbnz	r3, 800380c <__swbuf_r+0x32>
 80037fa:	4621      	mov	r1, r4
 80037fc:	4628      	mov	r0, r5
 80037fe:	f000 f82b 	bl	8003858 <__swsetup_r>
 8003802:	b118      	cbz	r0, 800380c <__swbuf_r+0x32>
 8003804:	f04f 37ff 	mov.w	r7, #4294967295
 8003808:	4638      	mov	r0, r7
 800380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	1a98      	subs	r0, r3, r2
 8003812:	6963      	ldr	r3, [r4, #20]
 8003814:	b2f6      	uxtb	r6, r6
 8003816:	4283      	cmp	r3, r0
 8003818:	4637      	mov	r7, r6
 800381a:	dc05      	bgt.n	8003828 <__swbuf_r+0x4e>
 800381c:	4621      	mov	r1, r4
 800381e:	4628      	mov	r0, r5
 8003820:	f7ff fdf2 	bl	8003408 <_fflush_r>
 8003824:	2800      	cmp	r0, #0
 8003826:	d1ed      	bne.n	8003804 <__swbuf_r+0x2a>
 8003828:	68a3      	ldr	r3, [r4, #8]
 800382a:	3b01      	subs	r3, #1
 800382c:	60a3      	str	r3, [r4, #8]
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	6022      	str	r2, [r4, #0]
 8003834:	701e      	strb	r6, [r3, #0]
 8003836:	6962      	ldr	r2, [r4, #20]
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	429a      	cmp	r2, r3
 800383c:	d004      	beq.n	8003848 <__swbuf_r+0x6e>
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	07db      	lsls	r3, r3, #31
 8003842:	d5e1      	bpl.n	8003808 <__swbuf_r+0x2e>
 8003844:	2e0a      	cmp	r6, #10
 8003846:	d1df      	bne.n	8003808 <__swbuf_r+0x2e>
 8003848:	4621      	mov	r1, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f7ff fddc 	bl	8003408 <_fflush_r>
 8003850:	2800      	cmp	r0, #0
 8003852:	d0d9      	beq.n	8003808 <__swbuf_r+0x2e>
 8003854:	e7d6      	b.n	8003804 <__swbuf_r+0x2a>
	...

08003858 <__swsetup_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4b29      	ldr	r3, [pc, #164]	@ (8003900 <__swsetup_r+0xa8>)
 800385c:	4605      	mov	r5, r0
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	460c      	mov	r4, r1
 8003862:	b118      	cbz	r0, 800386c <__swsetup_r+0x14>
 8003864:	6a03      	ldr	r3, [r0, #32]
 8003866:	b90b      	cbnz	r3, 800386c <__swsetup_r+0x14>
 8003868:	f7ff fe82 	bl	8003570 <__sinit>
 800386c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003870:	0719      	lsls	r1, r3, #28
 8003872:	d422      	bmi.n	80038ba <__swsetup_r+0x62>
 8003874:	06da      	lsls	r2, r3, #27
 8003876:	d407      	bmi.n	8003888 <__swsetup_r+0x30>
 8003878:	2209      	movs	r2, #9
 800387a:	602a      	str	r2, [r5, #0]
 800387c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003880:	81a3      	strh	r3, [r4, #12]
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	e033      	b.n	80038f0 <__swsetup_r+0x98>
 8003888:	0758      	lsls	r0, r3, #29
 800388a:	d512      	bpl.n	80038b2 <__swsetup_r+0x5a>
 800388c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800388e:	b141      	cbz	r1, 80038a2 <__swsetup_r+0x4a>
 8003890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003894:	4299      	cmp	r1, r3
 8003896:	d002      	beq.n	800389e <__swsetup_r+0x46>
 8003898:	4628      	mov	r0, r5
 800389a:	f000 ff09 	bl	80046b0 <_free_r>
 800389e:	2300      	movs	r3, #0
 80038a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	2300      	movs	r3, #0
 80038ac:	6063      	str	r3, [r4, #4]
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	f043 0308 	orr.w	r3, r3, #8
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	6923      	ldr	r3, [r4, #16]
 80038bc:	b94b      	cbnz	r3, 80038d2 <__swsetup_r+0x7a>
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c8:	d003      	beq.n	80038d2 <__swsetup_r+0x7a>
 80038ca:	4621      	mov	r1, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	f001 fcd1 	bl	8005274 <__smakebuf_r>
 80038d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d6:	f013 0201 	ands.w	r2, r3, #1
 80038da:	d00a      	beq.n	80038f2 <__swsetup_r+0x9a>
 80038dc:	2200      	movs	r2, #0
 80038de:	60a2      	str	r2, [r4, #8]
 80038e0:	6962      	ldr	r2, [r4, #20]
 80038e2:	4252      	negs	r2, r2
 80038e4:	61a2      	str	r2, [r4, #24]
 80038e6:	6922      	ldr	r2, [r4, #16]
 80038e8:	b942      	cbnz	r2, 80038fc <__swsetup_r+0xa4>
 80038ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038ee:	d1c5      	bne.n	800387c <__swsetup_r+0x24>
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
 80038f2:	0799      	lsls	r1, r3, #30
 80038f4:	bf58      	it	pl
 80038f6:	6962      	ldrpl	r2, [r4, #20]
 80038f8:	60a2      	str	r2, [r4, #8]
 80038fa:	e7f4      	b.n	80038e6 <__swsetup_r+0x8e>
 80038fc:	2000      	movs	r0, #0
 80038fe:	e7f7      	b.n	80038f0 <__swsetup_r+0x98>
 8003900:	2000000c 	.word	0x2000000c

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <_localeconv_r>:
 8003914:	4800      	ldr	r0, [pc, #0]	@ (8003918 <_localeconv_r+0x4>)
 8003916:	4770      	bx	lr
 8003918:	2000014c 	.word	0x2000014c

0800391c <_close_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4d06      	ldr	r5, [pc, #24]	@ (8003938 <_close_r+0x1c>)
 8003920:	2300      	movs	r3, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	f7fe feda 	bl	80026e0 <_close>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_close_r+0x1a>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	b103      	cbz	r3, 8003936 <_close_r+0x1a>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	20000628 	.word	0x20000628

0800393c <_lseek_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4d07      	ldr	r5, [pc, #28]	@ (800395c <_lseek_r+0x20>)
 8003940:	4604      	mov	r4, r0
 8003942:	4608      	mov	r0, r1
 8003944:	4611      	mov	r1, r2
 8003946:	2200      	movs	r2, #0
 8003948:	602a      	str	r2, [r5, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f7fe feef 	bl	800272e <_lseek>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_lseek_r+0x1e>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_lseek_r+0x1e>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	20000628 	.word	0x20000628

08003960 <_read_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4d07      	ldr	r5, [pc, #28]	@ (8003980 <_read_r+0x20>)
 8003964:	4604      	mov	r4, r0
 8003966:	4608      	mov	r0, r1
 8003968:	4611      	mov	r1, r2
 800396a:	2200      	movs	r2, #0
 800396c:	602a      	str	r2, [r5, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	f7fe fe99 	bl	80026a6 <_read>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d102      	bne.n	800397e <_read_r+0x1e>
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	b103      	cbz	r3, 800397e <_read_r+0x1e>
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	20000628 	.word	0x20000628

08003984 <__errno>:
 8003984:	4b01      	ldr	r3, [pc, #4]	@ (800398c <__errno+0x8>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	2000000c 	.word	0x2000000c

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4d0d      	ldr	r5, [pc, #52]	@ (80039c8 <__libc_init_array+0x38>)
 8003994:	4c0d      	ldr	r4, [pc, #52]	@ (80039cc <__libc_init_array+0x3c>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	2600      	movs	r6, #0
 800399c:	42a6      	cmp	r6, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	4d0b      	ldr	r5, [pc, #44]	@ (80039d0 <__libc_init_array+0x40>)
 80039a2:	4c0c      	ldr	r4, [pc, #48]	@ (80039d4 <__libc_init_array+0x44>)
 80039a4:	f001 fd92 	bl	80054cc <_init>
 80039a8:	1b64      	subs	r4, r4, r5
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	2600      	movs	r6, #0
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b8:	4798      	blx	r3
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c2:	4798      	blx	r3
 80039c4:	3601      	adds	r6, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08005a74 	.word	0x08005a74
 80039cc:	08005a74 	.word	0x08005a74
 80039d0:	08005a74 	.word	0x08005a74
 80039d4:	08005a78 	.word	0x08005a78

080039d8 <__retarget_lock_init_recursive>:
 80039d8:	4770      	bx	lr

080039da <__retarget_lock_acquire_recursive>:
 80039da:	4770      	bx	lr

080039dc <__retarget_lock_release_recursive>:
 80039dc:	4770      	bx	lr

080039de <memcpy>:
 80039de:	440a      	add	r2, r1
 80039e0:	4291      	cmp	r1, r2
 80039e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80039e6:	d100      	bne.n	80039ea <memcpy+0xc>
 80039e8:	4770      	bx	lr
 80039ea:	b510      	push	{r4, lr}
 80039ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f4:	4291      	cmp	r1, r2
 80039f6:	d1f9      	bne.n	80039ec <memcpy+0xe>
 80039f8:	bd10      	pop	{r4, pc}

080039fa <quorem>:
 80039fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fe:	6903      	ldr	r3, [r0, #16]
 8003a00:	690c      	ldr	r4, [r1, #16]
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	4607      	mov	r7, r0
 8003a06:	db7e      	blt.n	8003b06 <quorem+0x10c>
 8003a08:	3c01      	subs	r4, #1
 8003a0a:	f101 0814 	add.w	r8, r1, #20
 8003a0e:	00a3      	lsls	r3, r4, #2
 8003a10:	f100 0514 	add.w	r5, r0, #20
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a24:	3301      	adds	r3, #1
 8003a26:	429a      	cmp	r2, r3
 8003a28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a30:	d32e      	bcc.n	8003a90 <quorem+0x96>
 8003a32:	f04f 0a00 	mov.w	sl, #0
 8003a36:	46c4      	mov	ip, r8
 8003a38:	46ae      	mov	lr, r5
 8003a3a:	46d3      	mov	fp, sl
 8003a3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003a40:	b298      	uxth	r0, r3
 8003a42:	fb06 a000 	mla	r0, r6, r0, sl
 8003a46:	0c02      	lsrs	r2, r0, #16
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	fb06 2303 	mla	r3, r6, r3, r2
 8003a4e:	f8de 2000 	ldr.w	r2, [lr]
 8003a52:	b280      	uxth	r0, r0
 8003a54:	b292      	uxth	r2, r2
 8003a56:	1a12      	subs	r2, r2, r0
 8003a58:	445a      	add	r2, fp
 8003a5a:	f8de 0000 	ldr.w	r0, [lr]
 8003a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003a68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003a72:	45e1      	cmp	r9, ip
 8003a74:	f84e 2b04 	str.w	r2, [lr], #4
 8003a78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003a7c:	d2de      	bcs.n	8003a3c <quorem+0x42>
 8003a7e:	9b00      	ldr	r3, [sp, #0]
 8003a80:	58eb      	ldr	r3, [r5, r3]
 8003a82:	b92b      	cbnz	r3, 8003a90 <quorem+0x96>
 8003a84:	9b01      	ldr	r3, [sp, #4]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	429d      	cmp	r5, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	d32f      	bcc.n	8003aee <quorem+0xf4>
 8003a8e:	613c      	str	r4, [r7, #16]
 8003a90:	4638      	mov	r0, r7
 8003a92:	f001 f97f 	bl	8004d94 <__mcmp>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	db25      	blt.n	8003ae6 <quorem+0xec>
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003aa2:	f8d1 c000 	ldr.w	ip, [r1]
 8003aa6:	fa1f fe82 	uxth.w	lr, r2
 8003aaa:	fa1f f38c 	uxth.w	r3, ip
 8003aae:	eba3 030e 	sub.w	r3, r3, lr
 8003ab2:	4403      	add	r3, r0
 8003ab4:	0c12      	lsrs	r2, r2, #16
 8003ab6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003aba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ac4:	45c1      	cmp	r9, r8
 8003ac6:	f841 3b04 	str.w	r3, [r1], #4
 8003aca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003ace:	d2e6      	bcs.n	8003a9e <quorem+0xa4>
 8003ad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ad8:	b922      	cbnz	r2, 8003ae4 <quorem+0xea>
 8003ada:	3b04      	subs	r3, #4
 8003adc:	429d      	cmp	r5, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	d30b      	bcc.n	8003afa <quorem+0x100>
 8003ae2:	613c      	str	r4, [r7, #16]
 8003ae4:	3601      	adds	r6, #1
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	b003      	add	sp, #12
 8003aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	3b04      	subs	r3, #4
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d1cb      	bne.n	8003a8e <quorem+0x94>
 8003af6:	3c01      	subs	r4, #1
 8003af8:	e7c6      	b.n	8003a88 <quorem+0x8e>
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	3b04      	subs	r3, #4
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	d1ef      	bne.n	8003ae2 <quorem+0xe8>
 8003b02:	3c01      	subs	r4, #1
 8003b04:	e7ea      	b.n	8003adc <quorem+0xe2>
 8003b06:	2000      	movs	r0, #0
 8003b08:	e7ee      	b.n	8003ae8 <quorem+0xee>
 8003b0a:	0000      	movs	r0, r0
 8003b0c:	0000      	movs	r0, r0
	...

08003b10 <_dtoa_r>:
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	69c7      	ldr	r7, [r0, #28]
 8003b16:	b097      	sub	sp, #92	@ 0x5c
 8003b18:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003b1c:	ec55 4b10 	vmov	r4, r5, d0
 8003b20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003b22:	9107      	str	r1, [sp, #28]
 8003b24:	4681      	mov	r9, r0
 8003b26:	920c      	str	r2, [sp, #48]	@ 0x30
 8003b28:	9311      	str	r3, [sp, #68]	@ 0x44
 8003b2a:	b97f      	cbnz	r7, 8003b4c <_dtoa_r+0x3c>
 8003b2c:	2010      	movs	r0, #16
 8003b2e:	f000 fe09 	bl	8004744 <malloc>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f8c9 001c 	str.w	r0, [r9, #28]
 8003b38:	b920      	cbnz	r0, 8003b44 <_dtoa_r+0x34>
 8003b3a:	4ba9      	ldr	r3, [pc, #676]	@ (8003de0 <_dtoa_r+0x2d0>)
 8003b3c:	21ef      	movs	r1, #239	@ 0xef
 8003b3e:	48a9      	ldr	r0, [pc, #676]	@ (8003de4 <_dtoa_r+0x2d4>)
 8003b40:	f001 fc06 	bl	8005350 <__assert_func>
 8003b44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003b48:	6007      	str	r7, [r0, #0]
 8003b4a:	60c7      	str	r7, [r0, #12]
 8003b4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	b159      	cbz	r1, 8003b6c <_dtoa_r+0x5c>
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	604a      	str	r2, [r1, #4]
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
 8003b5e:	4648      	mov	r0, r9
 8003b60:	f000 fee6 	bl	8004930 <_Bfree>
 8003b64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	1e2b      	subs	r3, r5, #0
 8003b6e:	bfb9      	ittee	lt
 8003b70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003b74:	9305      	strlt	r3, [sp, #20]
 8003b76:	2300      	movge	r3, #0
 8003b78:	6033      	strge	r3, [r6, #0]
 8003b7a:	9f05      	ldr	r7, [sp, #20]
 8003b7c:	4b9a      	ldr	r3, [pc, #616]	@ (8003de8 <_dtoa_r+0x2d8>)
 8003b7e:	bfbc      	itt	lt
 8003b80:	2201      	movlt	r2, #1
 8003b82:	6032      	strlt	r2, [r6, #0]
 8003b84:	43bb      	bics	r3, r7
 8003b86:	d112      	bne.n	8003bae <_dtoa_r+0x9e>
 8003b88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003b8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003b94:	4323      	orrs	r3, r4
 8003b96:	f000 855a 	beq.w	800464e <_dtoa_r+0xb3e>
 8003b9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003b9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003dfc <_dtoa_r+0x2ec>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 855c 	beq.w	800465e <_dtoa_r+0xb4e>
 8003ba6:	f10a 0303 	add.w	r3, sl, #3
 8003baa:	f000 bd56 	b.w	800465a <_dtoa_r+0xb4a>
 8003bae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	ec51 0b17 	vmov	r0, r1, d7
 8003bb8:	2300      	movs	r3, #0
 8003bba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003bbe:	f7fc ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bc2:	4680      	mov	r8, r0
 8003bc4:	b158      	cbz	r0, 8003bde <_dtoa_r+0xce>
 8003bc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003bc8:	2301      	movs	r3, #1
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003bce:	b113      	cbz	r3, 8003bd6 <_dtoa_r+0xc6>
 8003bd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003bd2:	4b86      	ldr	r3, [pc, #536]	@ (8003dec <_dtoa_r+0x2dc>)
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003e00 <_dtoa_r+0x2f0>
 8003bda:	f000 bd40 	b.w	800465e <_dtoa_r+0xb4e>
 8003bde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003be2:	aa14      	add	r2, sp, #80	@ 0x50
 8003be4:	a915      	add	r1, sp, #84	@ 0x54
 8003be6:	4648      	mov	r0, r9
 8003be8:	f001 f984 	bl	8004ef4 <__d2b>
 8003bec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003bf0:	9002      	str	r0, [sp, #8]
 8003bf2:	2e00      	cmp	r6, #0
 8003bf4:	d078      	beq.n	8003ce8 <_dtoa_r+0x1d8>
 8003bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bf8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003c08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003c0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c10:	4619      	mov	r1, r3
 8003c12:	2200      	movs	r2, #0
 8003c14:	4b76      	ldr	r3, [pc, #472]	@ (8003df0 <_dtoa_r+0x2e0>)
 8003c16:	f7fc fb37 	bl	8000288 <__aeabi_dsub>
 8003c1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003dc8 <_dtoa_r+0x2b8>)
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f7fc fcea 	bl	80005f8 <__aeabi_dmul>
 8003c24:	a36a      	add	r3, pc, #424	@ (adr r3, 8003dd0 <_dtoa_r+0x2c0>)
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f7fc fb2f 	bl	800028c <__adddf3>
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4630      	mov	r0, r6
 8003c32:	460d      	mov	r5, r1
 8003c34:	f7fc fc76 	bl	8000524 <__aeabi_i2d>
 8003c38:	a367      	add	r3, pc, #412	@ (adr r3, 8003dd8 <_dtoa_r+0x2c8>)
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fcdb 	bl	80005f8 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc fb1f 	bl	800028c <__adddf3>
 8003c4e:	4604      	mov	r4, r0
 8003c50:	460d      	mov	r5, r1
 8003c52:	f7fc ff81 	bl	8000b58 <__aeabi_d2iz>
 8003c56:	2200      	movs	r2, #0
 8003c58:	4607      	mov	r7, r0
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f7fc ff3c 	bl	8000adc <__aeabi_dcmplt>
 8003c64:	b140      	cbz	r0, 8003c78 <_dtoa_r+0x168>
 8003c66:	4638      	mov	r0, r7
 8003c68:	f7fc fc5c 	bl	8000524 <__aeabi_i2d>
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f7fc ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c74:	b900      	cbnz	r0, 8003c78 <_dtoa_r+0x168>
 8003c76:	3f01      	subs	r7, #1
 8003c78:	2f16      	cmp	r7, #22
 8003c7a:	d852      	bhi.n	8003d22 <_dtoa_r+0x212>
 8003c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8003df4 <_dtoa_r+0x2e4>)
 8003c7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c8a:	f7fc ff27 	bl	8000adc <__aeabi_dcmplt>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d049      	beq.n	8003d26 <_dtoa_r+0x216>
 8003c92:	3f01      	subs	r7, #1
 8003c94:	2300      	movs	r3, #0
 8003c96:	9310      	str	r3, [sp, #64]	@ 0x40
 8003c98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c9a:	1b9b      	subs	r3, r3, r6
 8003c9c:	1e5a      	subs	r2, r3, #1
 8003c9e:	bf45      	ittet	mi
 8003ca0:	f1c3 0301 	rsbmi	r3, r3, #1
 8003ca4:	9300      	strmi	r3, [sp, #0]
 8003ca6:	2300      	movpl	r3, #0
 8003ca8:	2300      	movmi	r3, #0
 8003caa:	9206      	str	r2, [sp, #24]
 8003cac:	bf54      	ite	pl
 8003cae:	9300      	strpl	r3, [sp, #0]
 8003cb0:	9306      	strmi	r3, [sp, #24]
 8003cb2:	2f00      	cmp	r7, #0
 8003cb4:	db39      	blt.n	8003d2a <_dtoa_r+0x21a>
 8003cb6:	9b06      	ldr	r3, [sp, #24]
 8003cb8:	970d      	str	r7, [sp, #52]	@ 0x34
 8003cba:	443b      	add	r3, r7
 8003cbc:	9306      	str	r3, [sp, #24]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9308      	str	r3, [sp, #32]
 8003cc2:	9b07      	ldr	r3, [sp, #28]
 8003cc4:	2b09      	cmp	r3, #9
 8003cc6:	d863      	bhi.n	8003d90 <_dtoa_r+0x280>
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	bfc4      	itt	gt
 8003ccc:	3b04      	subgt	r3, #4
 8003cce:	9307      	strgt	r3, [sp, #28]
 8003cd0:	9b07      	ldr	r3, [sp, #28]
 8003cd2:	f1a3 0302 	sub.w	r3, r3, #2
 8003cd6:	bfcc      	ite	gt
 8003cd8:	2400      	movgt	r4, #0
 8003cda:	2401      	movle	r4, #1
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d863      	bhi.n	8003da8 <_dtoa_r+0x298>
 8003ce0:	e8df f003 	tbb	[pc, r3]
 8003ce4:	2b375452 	.word	0x2b375452
 8003ce8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003cec:	441e      	add	r6, r3
 8003cee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	bfc1      	itttt	gt
 8003cf6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003cfa:	409f      	lslgt	r7, r3
 8003cfc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d00:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003d04:	bfd6      	itet	le
 8003d06:	f1c3 0320 	rsble	r3, r3, #32
 8003d0a:	ea47 0003 	orrgt.w	r0, r7, r3
 8003d0e:	fa04 f003 	lslle.w	r0, r4, r3
 8003d12:	f7fc fbf7 	bl	8000504 <__aeabi_ui2d>
 8003d16:	2201      	movs	r2, #1
 8003d18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003d1c:	3e01      	subs	r6, #1
 8003d1e:	9212      	str	r2, [sp, #72]	@ 0x48
 8003d20:	e776      	b.n	8003c10 <_dtoa_r+0x100>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7b7      	b.n	8003c96 <_dtoa_r+0x186>
 8003d26:	9010      	str	r0, [sp, #64]	@ 0x40
 8003d28:	e7b6      	b.n	8003c98 <_dtoa_r+0x188>
 8003d2a:	9b00      	ldr	r3, [sp, #0]
 8003d2c:	1bdb      	subs	r3, r3, r7
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	427b      	negs	r3, r7
 8003d32:	9308      	str	r3, [sp, #32]
 8003d34:	2300      	movs	r3, #0
 8003d36:	930d      	str	r3, [sp, #52]	@ 0x34
 8003d38:	e7c3      	b.n	8003cc2 <_dtoa_r+0x1b2>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003d40:	eb07 0b03 	add.w	fp, r7, r3
 8003d44:	f10b 0301 	add.w	r3, fp, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	9303      	str	r3, [sp, #12]
 8003d4c:	bfb8      	it	lt
 8003d4e:	2301      	movlt	r3, #1
 8003d50:	e006      	b.n	8003d60 <_dtoa_r+0x250>
 8003d52:	2301      	movs	r3, #1
 8003d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	dd28      	ble.n	8003dae <_dtoa_r+0x29e>
 8003d5c:	469b      	mov	fp, r3
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003d64:	2100      	movs	r1, #0
 8003d66:	2204      	movs	r2, #4
 8003d68:	f102 0514 	add.w	r5, r2, #20
 8003d6c:	429d      	cmp	r5, r3
 8003d6e:	d926      	bls.n	8003dbe <_dtoa_r+0x2ae>
 8003d70:	6041      	str	r1, [r0, #4]
 8003d72:	4648      	mov	r0, r9
 8003d74:	f000 fd9c 	bl	80048b0 <_Balloc>
 8003d78:	4682      	mov	sl, r0
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d142      	bne.n	8003e04 <_dtoa_r+0x2f4>
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <_dtoa_r+0x2e8>)
 8003d80:	4602      	mov	r2, r0
 8003d82:	f240 11af 	movw	r1, #431	@ 0x1af
 8003d86:	e6da      	b.n	8003b3e <_dtoa_r+0x2e>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e7e3      	b.n	8003d54 <_dtoa_r+0x244>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e7d5      	b.n	8003d3c <_dtoa_r+0x22c>
 8003d90:	2401      	movs	r4, #1
 8003d92:	2300      	movs	r3, #0
 8003d94:	9307      	str	r3, [sp, #28]
 8003d96:	9409      	str	r4, [sp, #36]	@ 0x24
 8003d98:	f04f 3bff 	mov.w	fp, #4294967295
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003da2:	2312      	movs	r3, #18
 8003da4:	920c      	str	r2, [sp, #48]	@ 0x30
 8003da6:	e7db      	b.n	8003d60 <_dtoa_r+0x250>
 8003da8:	2301      	movs	r3, #1
 8003daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dac:	e7f4      	b.n	8003d98 <_dtoa_r+0x288>
 8003dae:	f04f 0b01 	mov.w	fp, #1
 8003db2:	f8cd b00c 	str.w	fp, [sp, #12]
 8003db6:	465b      	mov	r3, fp
 8003db8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003dbc:	e7d0      	b.n	8003d60 <_dtoa_r+0x250>
 8003dbe:	3101      	adds	r1, #1
 8003dc0:	0052      	lsls	r2, r2, #1
 8003dc2:	e7d1      	b.n	8003d68 <_dtoa_r+0x258>
 8003dc4:	f3af 8000 	nop.w
 8003dc8:	636f4361 	.word	0x636f4361
 8003dcc:	3fd287a7 	.word	0x3fd287a7
 8003dd0:	8b60c8b3 	.word	0x8b60c8b3
 8003dd4:	3fc68a28 	.word	0x3fc68a28
 8003dd8:	509f79fb 	.word	0x509f79fb
 8003ddc:	3fd34413 	.word	0x3fd34413
 8003de0:	08005738 	.word	0x08005738
 8003de4:	0800574f 	.word	0x0800574f
 8003de8:	7ff00000 	.word	0x7ff00000
 8003dec:	08005708 	.word	0x08005708
 8003df0:	3ff80000 	.word	0x3ff80000
 8003df4:	080058a0 	.word	0x080058a0
 8003df8:	080057a7 	.word	0x080057a7
 8003dfc:	08005734 	.word	0x08005734
 8003e00:	08005707 	.word	0x08005707
 8003e04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003e08:	6018      	str	r0, [r3, #0]
 8003e0a:	9b03      	ldr	r3, [sp, #12]
 8003e0c:	2b0e      	cmp	r3, #14
 8003e0e:	f200 80a1 	bhi.w	8003f54 <_dtoa_r+0x444>
 8003e12:	2c00      	cmp	r4, #0
 8003e14:	f000 809e 	beq.w	8003f54 <_dtoa_r+0x444>
 8003e18:	2f00      	cmp	r7, #0
 8003e1a:	dd33      	ble.n	8003e84 <_dtoa_r+0x374>
 8003e1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004090 <_dtoa_r+0x580>)
 8003e1e:	f007 020f 	and.w	r2, r7, #15
 8003e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e26:	ed93 7b00 	vldr	d7, [r3]
 8003e2a:	05f8      	lsls	r0, r7, #23
 8003e2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003e30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003e34:	d516      	bpl.n	8003e64 <_dtoa_r+0x354>
 8003e36:	4b97      	ldr	r3, [pc, #604]	@ (8004094 <_dtoa_r+0x584>)
 8003e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e40:	f7fc fd04 	bl	800084c <__aeabi_ddiv>
 8003e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e48:	f004 040f 	and.w	r4, r4, #15
 8003e4c:	2603      	movs	r6, #3
 8003e4e:	4d91      	ldr	r5, [pc, #580]	@ (8004094 <_dtoa_r+0x584>)
 8003e50:	b954      	cbnz	r4, 8003e68 <_dtoa_r+0x358>
 8003e52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e5a:	f7fc fcf7 	bl	800084c <__aeabi_ddiv>
 8003e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e62:	e028      	b.n	8003eb6 <_dtoa_r+0x3a6>
 8003e64:	2602      	movs	r6, #2
 8003e66:	e7f2      	b.n	8003e4e <_dtoa_r+0x33e>
 8003e68:	07e1      	lsls	r1, r4, #31
 8003e6a:	d508      	bpl.n	8003e7e <_dtoa_r+0x36e>
 8003e6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003e70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e74:	f7fc fbc0 	bl	80005f8 <__aeabi_dmul>
 8003e78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	1064      	asrs	r4, r4, #1
 8003e80:	3508      	adds	r5, #8
 8003e82:	e7e5      	b.n	8003e50 <_dtoa_r+0x340>
 8003e84:	f000 80af 	beq.w	8003fe6 <_dtoa_r+0x4d6>
 8003e88:	427c      	negs	r4, r7
 8003e8a:	4b81      	ldr	r3, [pc, #516]	@ (8004090 <_dtoa_r+0x580>)
 8003e8c:	4d81      	ldr	r5, [pc, #516]	@ (8004094 <_dtoa_r+0x584>)
 8003e8e:	f004 020f 	and.w	r2, r4, #15
 8003e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e9e:	f7fc fbab 	bl	80005f8 <__aeabi_dmul>
 8003ea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea6:	1124      	asrs	r4, r4, #4
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2602      	movs	r6, #2
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	f040 808f 	bne.w	8003fd0 <_dtoa_r+0x4c0>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1d3      	bne.n	8003e5e <_dtoa_r+0x34e>
 8003eb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003eb8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8094 	beq.w	8003fea <_dtoa_r+0x4da>
 8003ec2:	4b75      	ldr	r3, [pc, #468]	@ (8004098 <_dtoa_r+0x588>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fc fe07 	bl	8000adc <__aeabi_dcmplt>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	f000 808b 	beq.w	8003fea <_dtoa_r+0x4da>
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8087 	beq.w	8003fea <_dtoa_r+0x4da>
 8003edc:	f1bb 0f00 	cmp.w	fp, #0
 8003ee0:	dd34      	ble.n	8003f4c <_dtoa_r+0x43c>
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4b6d      	ldr	r3, [pc, #436]	@ (800409c <_dtoa_r+0x58c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4629      	mov	r1, r5
 8003eea:	f7fc fb85 	bl	80005f8 <__aeabi_dmul>
 8003eee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ef2:	f107 38ff 	add.w	r8, r7, #4294967295
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	465c      	mov	r4, fp
 8003efa:	4630      	mov	r0, r6
 8003efc:	f7fc fb12 	bl	8000524 <__aeabi_i2d>
 8003f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f04:	f7fc fb78 	bl	80005f8 <__aeabi_dmul>
 8003f08:	4b65      	ldr	r3, [pc, #404]	@ (80040a0 <_dtoa_r+0x590>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f7fc f9be 	bl	800028c <__adddf3>
 8003f10:	4605      	mov	r5, r0
 8003f12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003f16:	2c00      	cmp	r4, #0
 8003f18:	d16a      	bne.n	8003ff0 <_dtoa_r+0x4e0>
 8003f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f1e:	4b61      	ldr	r3, [pc, #388]	@ (80040a4 <_dtoa_r+0x594>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	f7fc f9b1 	bl	8000288 <__aeabi_dsub>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f2e:	462a      	mov	r2, r5
 8003f30:	4633      	mov	r3, r6
 8003f32:	f7fc fdf1 	bl	8000b18 <__aeabi_dcmpgt>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	f040 8298 	bne.w	800446c <_dtoa_r+0x95c>
 8003f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f40:	462a      	mov	r2, r5
 8003f42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003f46:	f7fc fdc9 	bl	8000adc <__aeabi_dcmplt>
 8003f4a:	bb38      	cbnz	r0, 8003f9c <_dtoa_r+0x48c>
 8003f4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003f50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f2c0 8157 	blt.w	800420a <_dtoa_r+0x6fa>
 8003f5c:	2f0e      	cmp	r7, #14
 8003f5e:	f300 8154 	bgt.w	800420a <_dtoa_r+0x6fa>
 8003f62:	4b4b      	ldr	r3, [pc, #300]	@ (8004090 <_dtoa_r+0x580>)
 8003f64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f68:	ed93 7b00 	vldr	d7, [r3]
 8003f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	ed8d 7b00 	vstr	d7, [sp]
 8003f74:	f280 80e5 	bge.w	8004142 <_dtoa_r+0x632>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f300 80e1 	bgt.w	8004142 <_dtoa_r+0x632>
 8003f80:	d10c      	bne.n	8003f9c <_dtoa_r+0x48c>
 8003f82:	4b48      	ldr	r3, [pc, #288]	@ (80040a4 <_dtoa_r+0x594>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	ec51 0b17 	vmov	r0, r1, d7
 8003f8a:	f7fc fb35 	bl	80005f8 <__aeabi_dmul>
 8003f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f92:	f7fc fdb7 	bl	8000b04 <__aeabi_dcmpge>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f000 8266 	beq.w	8004468 <_dtoa_r+0x958>
 8003f9c:	2400      	movs	r4, #0
 8003f9e:	4625      	mov	r5, r4
 8003fa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003fa2:	4656      	mov	r6, sl
 8003fa4:	ea6f 0803 	mvn.w	r8, r3
 8003fa8:	2700      	movs	r7, #0
 8003faa:	4621      	mov	r1, r4
 8003fac:	4648      	mov	r0, r9
 8003fae:	f000 fcbf 	bl	8004930 <_Bfree>
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	f000 80bd 	beq.w	8004132 <_dtoa_r+0x622>
 8003fb8:	b12f      	cbz	r7, 8003fc6 <_dtoa_r+0x4b6>
 8003fba:	42af      	cmp	r7, r5
 8003fbc:	d003      	beq.n	8003fc6 <_dtoa_r+0x4b6>
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	4648      	mov	r0, r9
 8003fc2:	f000 fcb5 	bl	8004930 <_Bfree>
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4648      	mov	r0, r9
 8003fca:	f000 fcb1 	bl	8004930 <_Bfree>
 8003fce:	e0b0      	b.n	8004132 <_dtoa_r+0x622>
 8003fd0:	07e2      	lsls	r2, r4, #31
 8003fd2:	d505      	bpl.n	8003fe0 <_dtoa_r+0x4d0>
 8003fd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fd8:	f7fc fb0e 	bl	80005f8 <__aeabi_dmul>
 8003fdc:	3601      	adds	r6, #1
 8003fde:	2301      	movs	r3, #1
 8003fe0:	1064      	asrs	r4, r4, #1
 8003fe2:	3508      	adds	r5, #8
 8003fe4:	e762      	b.n	8003eac <_dtoa_r+0x39c>
 8003fe6:	2602      	movs	r6, #2
 8003fe8:	e765      	b.n	8003eb6 <_dtoa_r+0x3a6>
 8003fea:	9c03      	ldr	r4, [sp, #12]
 8003fec:	46b8      	mov	r8, r7
 8003fee:	e784      	b.n	8003efa <_dtoa_r+0x3ea>
 8003ff0:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <_dtoa_r+0x580>)
 8003ff2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003ff4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ffc:	4454      	add	r4, sl
 8003ffe:	2900      	cmp	r1, #0
 8004000:	d054      	beq.n	80040ac <_dtoa_r+0x59c>
 8004002:	4929      	ldr	r1, [pc, #164]	@ (80040a8 <_dtoa_r+0x598>)
 8004004:	2000      	movs	r0, #0
 8004006:	f7fc fc21 	bl	800084c <__aeabi_ddiv>
 800400a:	4633      	mov	r3, r6
 800400c:	462a      	mov	r2, r5
 800400e:	f7fc f93b 	bl	8000288 <__aeabi_dsub>
 8004012:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004016:	4656      	mov	r6, sl
 8004018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800401c:	f7fc fd9c 	bl	8000b58 <__aeabi_d2iz>
 8004020:	4605      	mov	r5, r0
 8004022:	f7fc fa7f 	bl	8000524 <__aeabi_i2d>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800402e:	f7fc f92b 	bl	8000288 <__aeabi_dsub>
 8004032:	3530      	adds	r5, #48	@ 0x30
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800403c:	f806 5b01 	strb.w	r5, [r6], #1
 8004040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004044:	f7fc fd4a 	bl	8000adc <__aeabi_dcmplt>
 8004048:	2800      	cmp	r0, #0
 800404a:	d172      	bne.n	8004132 <_dtoa_r+0x622>
 800404c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004050:	4911      	ldr	r1, [pc, #68]	@ (8004098 <_dtoa_r+0x588>)
 8004052:	2000      	movs	r0, #0
 8004054:	f7fc f918 	bl	8000288 <__aeabi_dsub>
 8004058:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800405c:	f7fc fd3e 	bl	8000adc <__aeabi_dcmplt>
 8004060:	2800      	cmp	r0, #0
 8004062:	f040 80b4 	bne.w	80041ce <_dtoa_r+0x6be>
 8004066:	42a6      	cmp	r6, r4
 8004068:	f43f af70 	beq.w	8003f4c <_dtoa_r+0x43c>
 800406c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004070:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <_dtoa_r+0x58c>)
 8004072:	2200      	movs	r2, #0
 8004074:	f7fc fac0 	bl	80005f8 <__aeabi_dmul>
 8004078:	4b08      	ldr	r3, [pc, #32]	@ (800409c <_dtoa_r+0x58c>)
 800407a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800407e:	2200      	movs	r2, #0
 8004080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004084:	f7fc fab8 	bl	80005f8 <__aeabi_dmul>
 8004088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800408c:	e7c4      	b.n	8004018 <_dtoa_r+0x508>
 800408e:	bf00      	nop
 8004090:	080058a0 	.word	0x080058a0
 8004094:	08005878 	.word	0x08005878
 8004098:	3ff00000 	.word	0x3ff00000
 800409c:	40240000 	.word	0x40240000
 80040a0:	401c0000 	.word	0x401c0000
 80040a4:	40140000 	.word	0x40140000
 80040a8:	3fe00000 	.word	0x3fe00000
 80040ac:	4631      	mov	r1, r6
 80040ae:	4628      	mov	r0, r5
 80040b0:	f7fc faa2 	bl	80005f8 <__aeabi_dmul>
 80040b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80040b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80040ba:	4656      	mov	r6, sl
 80040bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c0:	f7fc fd4a 	bl	8000b58 <__aeabi_d2iz>
 80040c4:	4605      	mov	r5, r0
 80040c6:	f7fc fa2d 	bl	8000524 <__aeabi_i2d>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040d2:	f7fc f8d9 	bl	8000288 <__aeabi_dsub>
 80040d6:	3530      	adds	r5, #48	@ 0x30
 80040d8:	f806 5b01 	strb.w	r5, [r6], #1
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	d124      	bne.n	8004136 <_dtoa_r+0x626>
 80040ec:	4baf      	ldr	r3, [pc, #700]	@ (80043ac <_dtoa_r+0x89c>)
 80040ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80040f2:	f7fc f8cb 	bl	800028c <__adddf3>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040fe:	f7fc fd0b 	bl	8000b18 <__aeabi_dcmpgt>
 8004102:	2800      	cmp	r0, #0
 8004104:	d163      	bne.n	80041ce <_dtoa_r+0x6be>
 8004106:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800410a:	49a8      	ldr	r1, [pc, #672]	@ (80043ac <_dtoa_r+0x89c>)
 800410c:	2000      	movs	r0, #0
 800410e:	f7fc f8bb 	bl	8000288 <__aeabi_dsub>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800411a:	f7fc fcdf 	bl	8000adc <__aeabi_dcmplt>
 800411e:	2800      	cmp	r0, #0
 8004120:	f43f af14 	beq.w	8003f4c <_dtoa_r+0x43c>
 8004124:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004126:	1e73      	subs	r3, r6, #1
 8004128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800412a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800412e:	2b30      	cmp	r3, #48	@ 0x30
 8004130:	d0f8      	beq.n	8004124 <_dtoa_r+0x614>
 8004132:	4647      	mov	r7, r8
 8004134:	e03b      	b.n	80041ae <_dtoa_r+0x69e>
 8004136:	4b9e      	ldr	r3, [pc, #632]	@ (80043b0 <_dtoa_r+0x8a0>)
 8004138:	f7fc fa5e 	bl	80005f8 <__aeabi_dmul>
 800413c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004140:	e7bc      	b.n	80040bc <_dtoa_r+0x5ac>
 8004142:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004146:	4656      	mov	r6, sl
 8004148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	f7fc fb7c 	bl	800084c <__aeabi_ddiv>
 8004154:	f7fc fd00 	bl	8000b58 <__aeabi_d2iz>
 8004158:	4680      	mov	r8, r0
 800415a:	f7fc f9e3 	bl	8000524 <__aeabi_i2d>
 800415e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004162:	f7fc fa49 	bl	80005f8 <__aeabi_dmul>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4620      	mov	r0, r4
 800416c:	4629      	mov	r1, r5
 800416e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004172:	f7fc f889 	bl	8000288 <__aeabi_dsub>
 8004176:	f806 4b01 	strb.w	r4, [r6], #1
 800417a:	9d03      	ldr	r5, [sp, #12]
 800417c:	eba6 040a 	sub.w	r4, r6, sl
 8004180:	42a5      	cmp	r5, r4
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	d133      	bne.n	80041f0 <_dtoa_r+0x6e0>
 8004188:	f7fc f880 	bl	800028c <__adddf3>
 800418c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004190:	4604      	mov	r4, r0
 8004192:	460d      	mov	r5, r1
 8004194:	f7fc fcc0 	bl	8000b18 <__aeabi_dcmpgt>
 8004198:	b9c0      	cbnz	r0, 80041cc <_dtoa_r+0x6bc>
 800419a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800419e:	4620      	mov	r0, r4
 80041a0:	4629      	mov	r1, r5
 80041a2:	f7fc fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80041a6:	b110      	cbz	r0, 80041ae <_dtoa_r+0x69e>
 80041a8:	f018 0f01 	tst.w	r8, #1
 80041ac:	d10e      	bne.n	80041cc <_dtoa_r+0x6bc>
 80041ae:	9902      	ldr	r1, [sp, #8]
 80041b0:	4648      	mov	r0, r9
 80041b2:	f000 fbbd 	bl	8004930 <_Bfree>
 80041b6:	2300      	movs	r3, #0
 80041b8:	7033      	strb	r3, [r6, #0]
 80041ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041bc:	3701      	adds	r7, #1
 80041be:	601f      	str	r7, [r3, #0]
 80041c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 824b 	beq.w	800465e <_dtoa_r+0xb4e>
 80041c8:	601e      	str	r6, [r3, #0]
 80041ca:	e248      	b.n	800465e <_dtoa_r+0xb4e>
 80041cc:	46b8      	mov	r8, r7
 80041ce:	4633      	mov	r3, r6
 80041d0:	461e      	mov	r6, r3
 80041d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041d6:	2a39      	cmp	r2, #57	@ 0x39
 80041d8:	d106      	bne.n	80041e8 <_dtoa_r+0x6d8>
 80041da:	459a      	cmp	sl, r3
 80041dc:	d1f8      	bne.n	80041d0 <_dtoa_r+0x6c0>
 80041de:	2230      	movs	r2, #48	@ 0x30
 80041e0:	f108 0801 	add.w	r8, r8, #1
 80041e4:	f88a 2000 	strb.w	r2, [sl]
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	3201      	adds	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e7a0      	b.n	8004132 <_dtoa_r+0x622>
 80041f0:	4b6f      	ldr	r3, [pc, #444]	@ (80043b0 <_dtoa_r+0x8a0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	f7fc fa00 	bl	80005f8 <__aeabi_dmul>
 80041f8:	2200      	movs	r2, #0
 80041fa:	2300      	movs	r3, #0
 80041fc:	4604      	mov	r4, r0
 80041fe:	460d      	mov	r5, r1
 8004200:	f7fc fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004204:	2800      	cmp	r0, #0
 8004206:	d09f      	beq.n	8004148 <_dtoa_r+0x638>
 8004208:	e7d1      	b.n	80041ae <_dtoa_r+0x69e>
 800420a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800420c:	2a00      	cmp	r2, #0
 800420e:	f000 80ea 	beq.w	80043e6 <_dtoa_r+0x8d6>
 8004212:	9a07      	ldr	r2, [sp, #28]
 8004214:	2a01      	cmp	r2, #1
 8004216:	f300 80cd 	bgt.w	80043b4 <_dtoa_r+0x8a4>
 800421a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800421c:	2a00      	cmp	r2, #0
 800421e:	f000 80c1 	beq.w	80043a4 <_dtoa_r+0x894>
 8004222:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004226:	9c08      	ldr	r4, [sp, #32]
 8004228:	9e00      	ldr	r6, [sp, #0]
 800422a:	9a00      	ldr	r2, [sp, #0]
 800422c:	441a      	add	r2, r3
 800422e:	9200      	str	r2, [sp, #0]
 8004230:	9a06      	ldr	r2, [sp, #24]
 8004232:	2101      	movs	r1, #1
 8004234:	441a      	add	r2, r3
 8004236:	4648      	mov	r0, r9
 8004238:	9206      	str	r2, [sp, #24]
 800423a:	f000 fc2d 	bl	8004a98 <__i2b>
 800423e:	4605      	mov	r5, r0
 8004240:	b166      	cbz	r6, 800425c <_dtoa_r+0x74c>
 8004242:	9b06      	ldr	r3, [sp, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	dd09      	ble.n	800425c <_dtoa_r+0x74c>
 8004248:	42b3      	cmp	r3, r6
 800424a:	9a00      	ldr	r2, [sp, #0]
 800424c:	bfa8      	it	ge
 800424e:	4633      	movge	r3, r6
 8004250:	1ad2      	subs	r2, r2, r3
 8004252:	9200      	str	r2, [sp, #0]
 8004254:	9a06      	ldr	r2, [sp, #24]
 8004256:	1af6      	subs	r6, r6, r3
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	9306      	str	r3, [sp, #24]
 800425c:	9b08      	ldr	r3, [sp, #32]
 800425e:	b30b      	cbz	r3, 80042a4 <_dtoa_r+0x794>
 8004260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80c6 	beq.w	80043f4 <_dtoa_r+0x8e4>
 8004268:	2c00      	cmp	r4, #0
 800426a:	f000 80c0 	beq.w	80043ee <_dtoa_r+0x8de>
 800426e:	4629      	mov	r1, r5
 8004270:	4622      	mov	r2, r4
 8004272:	4648      	mov	r0, r9
 8004274:	f000 fcc8 	bl	8004c08 <__pow5mult>
 8004278:	9a02      	ldr	r2, [sp, #8]
 800427a:	4601      	mov	r1, r0
 800427c:	4605      	mov	r5, r0
 800427e:	4648      	mov	r0, r9
 8004280:	f000 fc20 	bl	8004ac4 <__multiply>
 8004284:	9902      	ldr	r1, [sp, #8]
 8004286:	4680      	mov	r8, r0
 8004288:	4648      	mov	r0, r9
 800428a:	f000 fb51 	bl	8004930 <_Bfree>
 800428e:	9b08      	ldr	r3, [sp, #32]
 8004290:	1b1b      	subs	r3, r3, r4
 8004292:	9308      	str	r3, [sp, #32]
 8004294:	f000 80b1 	beq.w	80043fa <_dtoa_r+0x8ea>
 8004298:	9a08      	ldr	r2, [sp, #32]
 800429a:	4641      	mov	r1, r8
 800429c:	4648      	mov	r0, r9
 800429e:	f000 fcb3 	bl	8004c08 <__pow5mult>
 80042a2:	9002      	str	r0, [sp, #8]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4648      	mov	r0, r9
 80042a8:	f000 fbf6 	bl	8004a98 <__i2b>
 80042ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042ae:	4604      	mov	r4, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 81d8 	beq.w	8004666 <_dtoa_r+0xb56>
 80042b6:	461a      	mov	r2, r3
 80042b8:	4601      	mov	r1, r0
 80042ba:	4648      	mov	r0, r9
 80042bc:	f000 fca4 	bl	8004c08 <__pow5mult>
 80042c0:	9b07      	ldr	r3, [sp, #28]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	4604      	mov	r4, r0
 80042c6:	f300 809f 	bgt.w	8004408 <_dtoa_r+0x8f8>
 80042ca:	9b04      	ldr	r3, [sp, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f040 8097 	bne.w	8004400 <_dtoa_r+0x8f0>
 80042d2:	9b05      	ldr	r3, [sp, #20]
 80042d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f040 8093 	bne.w	8004404 <_dtoa_r+0x8f4>
 80042de:	9b05      	ldr	r3, [sp, #20]
 80042e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042e4:	0d1b      	lsrs	r3, r3, #20
 80042e6:	051b      	lsls	r3, r3, #20
 80042e8:	b133      	cbz	r3, 80042f8 <_dtoa_r+0x7e8>
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	9b06      	ldr	r3, [sp, #24]
 80042f2:	3301      	adds	r3, #1
 80042f4:	9306      	str	r3, [sp, #24]
 80042f6:	2301      	movs	r3, #1
 80042f8:	9308      	str	r3, [sp, #32]
 80042fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 81b8 	beq.w	8004672 <_dtoa_r+0xb62>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004308:	6918      	ldr	r0, [r3, #16]
 800430a:	f000 fb79 	bl	8004a00 <__hi0bits>
 800430e:	f1c0 0020 	rsb	r0, r0, #32
 8004312:	9b06      	ldr	r3, [sp, #24]
 8004314:	4418      	add	r0, r3
 8004316:	f010 001f 	ands.w	r0, r0, #31
 800431a:	f000 8082 	beq.w	8004422 <_dtoa_r+0x912>
 800431e:	f1c0 0320 	rsb	r3, r0, #32
 8004322:	2b04      	cmp	r3, #4
 8004324:	dd73      	ble.n	800440e <_dtoa_r+0x8fe>
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	f1c0 001c 	rsb	r0, r0, #28
 800432c:	4403      	add	r3, r0
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	9b06      	ldr	r3, [sp, #24]
 8004332:	4403      	add	r3, r0
 8004334:	4406      	add	r6, r0
 8004336:	9306      	str	r3, [sp, #24]
 8004338:	9b00      	ldr	r3, [sp, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	dd05      	ble.n	800434a <_dtoa_r+0x83a>
 800433e:	9902      	ldr	r1, [sp, #8]
 8004340:	461a      	mov	r2, r3
 8004342:	4648      	mov	r0, r9
 8004344:	f000 fcba 	bl	8004cbc <__lshift>
 8004348:	9002      	str	r0, [sp, #8]
 800434a:	9b06      	ldr	r3, [sp, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dd05      	ble.n	800435c <_dtoa_r+0x84c>
 8004350:	4621      	mov	r1, r4
 8004352:	461a      	mov	r2, r3
 8004354:	4648      	mov	r0, r9
 8004356:	f000 fcb1 	bl	8004cbc <__lshift>
 800435a:	4604      	mov	r4, r0
 800435c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d061      	beq.n	8004426 <_dtoa_r+0x916>
 8004362:	9802      	ldr	r0, [sp, #8]
 8004364:	4621      	mov	r1, r4
 8004366:	f000 fd15 	bl	8004d94 <__mcmp>
 800436a:	2800      	cmp	r0, #0
 800436c:	da5b      	bge.n	8004426 <_dtoa_r+0x916>
 800436e:	2300      	movs	r3, #0
 8004370:	9902      	ldr	r1, [sp, #8]
 8004372:	220a      	movs	r2, #10
 8004374:	4648      	mov	r0, r9
 8004376:	f000 fafd 	bl	8004974 <__multadd>
 800437a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800437c:	9002      	str	r0, [sp, #8]
 800437e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8177 	beq.w	8004676 <_dtoa_r+0xb66>
 8004388:	4629      	mov	r1, r5
 800438a:	2300      	movs	r3, #0
 800438c:	220a      	movs	r2, #10
 800438e:	4648      	mov	r0, r9
 8004390:	f000 faf0 	bl	8004974 <__multadd>
 8004394:	f1bb 0f00 	cmp.w	fp, #0
 8004398:	4605      	mov	r5, r0
 800439a:	dc6f      	bgt.n	800447c <_dtoa_r+0x96c>
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	dc49      	bgt.n	8004436 <_dtoa_r+0x926>
 80043a2:	e06b      	b.n	800447c <_dtoa_r+0x96c>
 80043a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80043aa:	e73c      	b.n	8004226 <_dtoa_r+0x716>
 80043ac:	3fe00000 	.word	0x3fe00000
 80043b0:	40240000 	.word	0x40240000
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	1e5c      	subs	r4, r3, #1
 80043b8:	9b08      	ldr	r3, [sp, #32]
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	db09      	blt.n	80043d2 <_dtoa_r+0x8c2>
 80043be:	1b1c      	subs	r4, r3, r4
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f6bf af30 	bge.w	8004228 <_dtoa_r+0x718>
 80043c8:	9b00      	ldr	r3, [sp, #0]
 80043ca:	9a03      	ldr	r2, [sp, #12]
 80043cc:	1a9e      	subs	r6, r3, r2
 80043ce:	2300      	movs	r3, #0
 80043d0:	e72b      	b.n	800422a <_dtoa_r+0x71a>
 80043d2:	9b08      	ldr	r3, [sp, #32]
 80043d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80043d6:	9408      	str	r4, [sp, #32]
 80043d8:	1ae3      	subs	r3, r4, r3
 80043da:	441a      	add	r2, r3
 80043dc:	9e00      	ldr	r6, [sp, #0]
 80043de:	9b03      	ldr	r3, [sp, #12]
 80043e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80043e2:	2400      	movs	r4, #0
 80043e4:	e721      	b.n	800422a <_dtoa_r+0x71a>
 80043e6:	9c08      	ldr	r4, [sp, #32]
 80043e8:	9e00      	ldr	r6, [sp, #0]
 80043ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80043ec:	e728      	b.n	8004240 <_dtoa_r+0x730>
 80043ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80043f2:	e751      	b.n	8004298 <_dtoa_r+0x788>
 80043f4:	9a08      	ldr	r2, [sp, #32]
 80043f6:	9902      	ldr	r1, [sp, #8]
 80043f8:	e750      	b.n	800429c <_dtoa_r+0x78c>
 80043fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80043fe:	e751      	b.n	80042a4 <_dtoa_r+0x794>
 8004400:	2300      	movs	r3, #0
 8004402:	e779      	b.n	80042f8 <_dtoa_r+0x7e8>
 8004404:	9b04      	ldr	r3, [sp, #16]
 8004406:	e777      	b.n	80042f8 <_dtoa_r+0x7e8>
 8004408:	2300      	movs	r3, #0
 800440a:	9308      	str	r3, [sp, #32]
 800440c:	e779      	b.n	8004302 <_dtoa_r+0x7f2>
 800440e:	d093      	beq.n	8004338 <_dtoa_r+0x828>
 8004410:	9a00      	ldr	r2, [sp, #0]
 8004412:	331c      	adds	r3, #28
 8004414:	441a      	add	r2, r3
 8004416:	9200      	str	r2, [sp, #0]
 8004418:	9a06      	ldr	r2, [sp, #24]
 800441a:	441a      	add	r2, r3
 800441c:	441e      	add	r6, r3
 800441e:	9206      	str	r2, [sp, #24]
 8004420:	e78a      	b.n	8004338 <_dtoa_r+0x828>
 8004422:	4603      	mov	r3, r0
 8004424:	e7f4      	b.n	8004410 <_dtoa_r+0x900>
 8004426:	9b03      	ldr	r3, [sp, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	46b8      	mov	r8, r7
 800442c:	dc20      	bgt.n	8004470 <_dtoa_r+0x960>
 800442e:	469b      	mov	fp, r3
 8004430:	9b07      	ldr	r3, [sp, #28]
 8004432:	2b02      	cmp	r3, #2
 8004434:	dd1e      	ble.n	8004474 <_dtoa_r+0x964>
 8004436:	f1bb 0f00 	cmp.w	fp, #0
 800443a:	f47f adb1 	bne.w	8003fa0 <_dtoa_r+0x490>
 800443e:	4621      	mov	r1, r4
 8004440:	465b      	mov	r3, fp
 8004442:	2205      	movs	r2, #5
 8004444:	4648      	mov	r0, r9
 8004446:	f000 fa95 	bl	8004974 <__multadd>
 800444a:	4601      	mov	r1, r0
 800444c:	4604      	mov	r4, r0
 800444e:	9802      	ldr	r0, [sp, #8]
 8004450:	f000 fca0 	bl	8004d94 <__mcmp>
 8004454:	2800      	cmp	r0, #0
 8004456:	f77f ada3 	ble.w	8003fa0 <_dtoa_r+0x490>
 800445a:	4656      	mov	r6, sl
 800445c:	2331      	movs	r3, #49	@ 0x31
 800445e:	f806 3b01 	strb.w	r3, [r6], #1
 8004462:	f108 0801 	add.w	r8, r8, #1
 8004466:	e59f      	b.n	8003fa8 <_dtoa_r+0x498>
 8004468:	9c03      	ldr	r4, [sp, #12]
 800446a:	46b8      	mov	r8, r7
 800446c:	4625      	mov	r5, r4
 800446e:	e7f4      	b.n	800445a <_dtoa_r+0x94a>
 8004470:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8101 	beq.w	800467e <_dtoa_r+0xb6e>
 800447c:	2e00      	cmp	r6, #0
 800447e:	dd05      	ble.n	800448c <_dtoa_r+0x97c>
 8004480:	4629      	mov	r1, r5
 8004482:	4632      	mov	r2, r6
 8004484:	4648      	mov	r0, r9
 8004486:	f000 fc19 	bl	8004cbc <__lshift>
 800448a:	4605      	mov	r5, r0
 800448c:	9b08      	ldr	r3, [sp, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d05c      	beq.n	800454c <_dtoa_r+0xa3c>
 8004492:	6869      	ldr	r1, [r5, #4]
 8004494:	4648      	mov	r0, r9
 8004496:	f000 fa0b 	bl	80048b0 <_Balloc>
 800449a:	4606      	mov	r6, r0
 800449c:	b928      	cbnz	r0, 80044aa <_dtoa_r+0x99a>
 800449e:	4b82      	ldr	r3, [pc, #520]	@ (80046a8 <_dtoa_r+0xb98>)
 80044a0:	4602      	mov	r2, r0
 80044a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80044a6:	f7ff bb4a 	b.w	8003b3e <_dtoa_r+0x2e>
 80044aa:	692a      	ldr	r2, [r5, #16]
 80044ac:	3202      	adds	r2, #2
 80044ae:	0092      	lsls	r2, r2, #2
 80044b0:	f105 010c 	add.w	r1, r5, #12
 80044b4:	300c      	adds	r0, #12
 80044b6:	f7ff fa92 	bl	80039de <memcpy>
 80044ba:	2201      	movs	r2, #1
 80044bc:	4631      	mov	r1, r6
 80044be:	4648      	mov	r0, r9
 80044c0:	f000 fbfc 	bl	8004cbc <__lshift>
 80044c4:	f10a 0301 	add.w	r3, sl, #1
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	eb0a 030b 	add.w	r3, sl, fp
 80044ce:	9308      	str	r3, [sp, #32]
 80044d0:	9b04      	ldr	r3, [sp, #16]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	462f      	mov	r7, r5
 80044d8:	9306      	str	r3, [sp, #24]
 80044da:	4605      	mov	r5, r0
 80044dc:	9b00      	ldr	r3, [sp, #0]
 80044de:	9802      	ldr	r0, [sp, #8]
 80044e0:	4621      	mov	r1, r4
 80044e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80044e6:	f7ff fa88 	bl	80039fa <quorem>
 80044ea:	4603      	mov	r3, r0
 80044ec:	3330      	adds	r3, #48	@ 0x30
 80044ee:	9003      	str	r0, [sp, #12]
 80044f0:	4639      	mov	r1, r7
 80044f2:	9802      	ldr	r0, [sp, #8]
 80044f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044f6:	f000 fc4d 	bl	8004d94 <__mcmp>
 80044fa:	462a      	mov	r2, r5
 80044fc:	9004      	str	r0, [sp, #16]
 80044fe:	4621      	mov	r1, r4
 8004500:	4648      	mov	r0, r9
 8004502:	f000 fc63 	bl	8004dcc <__mdiff>
 8004506:	68c2      	ldr	r2, [r0, #12]
 8004508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450a:	4606      	mov	r6, r0
 800450c:	bb02      	cbnz	r2, 8004550 <_dtoa_r+0xa40>
 800450e:	4601      	mov	r1, r0
 8004510:	9802      	ldr	r0, [sp, #8]
 8004512:	f000 fc3f 	bl	8004d94 <__mcmp>
 8004516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004518:	4602      	mov	r2, r0
 800451a:	4631      	mov	r1, r6
 800451c:	4648      	mov	r0, r9
 800451e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004520:	9309      	str	r3, [sp, #36]	@ 0x24
 8004522:	f000 fa05 	bl	8004930 <_Bfree>
 8004526:	9b07      	ldr	r3, [sp, #28]
 8004528:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800452a:	9e00      	ldr	r6, [sp, #0]
 800452c:	ea42 0103 	orr.w	r1, r2, r3
 8004530:	9b06      	ldr	r3, [sp, #24]
 8004532:	4319      	orrs	r1, r3
 8004534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004536:	d10d      	bne.n	8004554 <_dtoa_r+0xa44>
 8004538:	2b39      	cmp	r3, #57	@ 0x39
 800453a:	d027      	beq.n	800458c <_dtoa_r+0xa7c>
 800453c:	9a04      	ldr	r2, [sp, #16]
 800453e:	2a00      	cmp	r2, #0
 8004540:	dd01      	ble.n	8004546 <_dtoa_r+0xa36>
 8004542:	9b03      	ldr	r3, [sp, #12]
 8004544:	3331      	adds	r3, #49	@ 0x31
 8004546:	f88b 3000 	strb.w	r3, [fp]
 800454a:	e52e      	b.n	8003faa <_dtoa_r+0x49a>
 800454c:	4628      	mov	r0, r5
 800454e:	e7b9      	b.n	80044c4 <_dtoa_r+0x9b4>
 8004550:	2201      	movs	r2, #1
 8004552:	e7e2      	b.n	800451a <_dtoa_r+0xa0a>
 8004554:	9904      	ldr	r1, [sp, #16]
 8004556:	2900      	cmp	r1, #0
 8004558:	db04      	blt.n	8004564 <_dtoa_r+0xa54>
 800455a:	9807      	ldr	r0, [sp, #28]
 800455c:	4301      	orrs	r1, r0
 800455e:	9806      	ldr	r0, [sp, #24]
 8004560:	4301      	orrs	r1, r0
 8004562:	d120      	bne.n	80045a6 <_dtoa_r+0xa96>
 8004564:	2a00      	cmp	r2, #0
 8004566:	ddee      	ble.n	8004546 <_dtoa_r+0xa36>
 8004568:	9902      	ldr	r1, [sp, #8]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4648      	mov	r0, r9
 8004570:	f000 fba4 	bl	8004cbc <__lshift>
 8004574:	4621      	mov	r1, r4
 8004576:	9002      	str	r0, [sp, #8]
 8004578:	f000 fc0c 	bl	8004d94 <__mcmp>
 800457c:	2800      	cmp	r0, #0
 800457e:	9b00      	ldr	r3, [sp, #0]
 8004580:	dc02      	bgt.n	8004588 <_dtoa_r+0xa78>
 8004582:	d1e0      	bne.n	8004546 <_dtoa_r+0xa36>
 8004584:	07da      	lsls	r2, r3, #31
 8004586:	d5de      	bpl.n	8004546 <_dtoa_r+0xa36>
 8004588:	2b39      	cmp	r3, #57	@ 0x39
 800458a:	d1da      	bne.n	8004542 <_dtoa_r+0xa32>
 800458c:	2339      	movs	r3, #57	@ 0x39
 800458e:	f88b 3000 	strb.w	r3, [fp]
 8004592:	4633      	mov	r3, r6
 8004594:	461e      	mov	r6, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800459c:	2a39      	cmp	r2, #57	@ 0x39
 800459e:	d04e      	beq.n	800463e <_dtoa_r+0xb2e>
 80045a0:	3201      	adds	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e501      	b.n	8003faa <_dtoa_r+0x49a>
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	dd03      	ble.n	80045b2 <_dtoa_r+0xaa2>
 80045aa:	2b39      	cmp	r3, #57	@ 0x39
 80045ac:	d0ee      	beq.n	800458c <_dtoa_r+0xa7c>
 80045ae:	3301      	adds	r3, #1
 80045b0:	e7c9      	b.n	8004546 <_dtoa_r+0xa36>
 80045b2:	9a00      	ldr	r2, [sp, #0]
 80045b4:	9908      	ldr	r1, [sp, #32]
 80045b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80045ba:	428a      	cmp	r2, r1
 80045bc:	d028      	beq.n	8004610 <_dtoa_r+0xb00>
 80045be:	9902      	ldr	r1, [sp, #8]
 80045c0:	2300      	movs	r3, #0
 80045c2:	220a      	movs	r2, #10
 80045c4:	4648      	mov	r0, r9
 80045c6:	f000 f9d5 	bl	8004974 <__multadd>
 80045ca:	42af      	cmp	r7, r5
 80045cc:	9002      	str	r0, [sp, #8]
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	f04f 020a 	mov.w	r2, #10
 80045d6:	4639      	mov	r1, r7
 80045d8:	4648      	mov	r0, r9
 80045da:	d107      	bne.n	80045ec <_dtoa_r+0xadc>
 80045dc:	f000 f9ca 	bl	8004974 <__multadd>
 80045e0:	4607      	mov	r7, r0
 80045e2:	4605      	mov	r5, r0
 80045e4:	9b00      	ldr	r3, [sp, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	e777      	b.n	80044dc <_dtoa_r+0x9cc>
 80045ec:	f000 f9c2 	bl	8004974 <__multadd>
 80045f0:	4629      	mov	r1, r5
 80045f2:	4607      	mov	r7, r0
 80045f4:	2300      	movs	r3, #0
 80045f6:	220a      	movs	r2, #10
 80045f8:	4648      	mov	r0, r9
 80045fa:	f000 f9bb 	bl	8004974 <__multadd>
 80045fe:	4605      	mov	r5, r0
 8004600:	e7f0      	b.n	80045e4 <_dtoa_r+0xad4>
 8004602:	f1bb 0f00 	cmp.w	fp, #0
 8004606:	bfcc      	ite	gt
 8004608:	465e      	movgt	r6, fp
 800460a:	2601      	movle	r6, #1
 800460c:	4456      	add	r6, sl
 800460e:	2700      	movs	r7, #0
 8004610:	9902      	ldr	r1, [sp, #8]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2201      	movs	r2, #1
 8004616:	4648      	mov	r0, r9
 8004618:	f000 fb50 	bl	8004cbc <__lshift>
 800461c:	4621      	mov	r1, r4
 800461e:	9002      	str	r0, [sp, #8]
 8004620:	f000 fbb8 	bl	8004d94 <__mcmp>
 8004624:	2800      	cmp	r0, #0
 8004626:	dcb4      	bgt.n	8004592 <_dtoa_r+0xa82>
 8004628:	d102      	bne.n	8004630 <_dtoa_r+0xb20>
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	07db      	lsls	r3, r3, #31
 800462e:	d4b0      	bmi.n	8004592 <_dtoa_r+0xa82>
 8004630:	4633      	mov	r3, r6
 8004632:	461e      	mov	r6, r3
 8004634:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004638:	2a30      	cmp	r2, #48	@ 0x30
 800463a:	d0fa      	beq.n	8004632 <_dtoa_r+0xb22>
 800463c:	e4b5      	b.n	8003faa <_dtoa_r+0x49a>
 800463e:	459a      	cmp	sl, r3
 8004640:	d1a8      	bne.n	8004594 <_dtoa_r+0xa84>
 8004642:	2331      	movs	r3, #49	@ 0x31
 8004644:	f108 0801 	add.w	r8, r8, #1
 8004648:	f88a 3000 	strb.w	r3, [sl]
 800464c:	e4ad      	b.n	8003faa <_dtoa_r+0x49a>
 800464e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004650:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80046ac <_dtoa_r+0xb9c>
 8004654:	b11b      	cbz	r3, 800465e <_dtoa_r+0xb4e>
 8004656:	f10a 0308 	add.w	r3, sl, #8
 800465a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4650      	mov	r0, sl
 8004660:	b017      	add	sp, #92	@ 0x5c
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004666:	9b07      	ldr	r3, [sp, #28]
 8004668:	2b01      	cmp	r3, #1
 800466a:	f77f ae2e 	ble.w	80042ca <_dtoa_r+0x7ba>
 800466e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004670:	9308      	str	r3, [sp, #32]
 8004672:	2001      	movs	r0, #1
 8004674:	e64d      	b.n	8004312 <_dtoa_r+0x802>
 8004676:	f1bb 0f00 	cmp.w	fp, #0
 800467a:	f77f aed9 	ble.w	8004430 <_dtoa_r+0x920>
 800467e:	4656      	mov	r6, sl
 8004680:	9802      	ldr	r0, [sp, #8]
 8004682:	4621      	mov	r1, r4
 8004684:	f7ff f9b9 	bl	80039fa <quorem>
 8004688:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800468c:	f806 3b01 	strb.w	r3, [r6], #1
 8004690:	eba6 020a 	sub.w	r2, r6, sl
 8004694:	4593      	cmp	fp, r2
 8004696:	ddb4      	ble.n	8004602 <_dtoa_r+0xaf2>
 8004698:	9902      	ldr	r1, [sp, #8]
 800469a:	2300      	movs	r3, #0
 800469c:	220a      	movs	r2, #10
 800469e:	4648      	mov	r0, r9
 80046a0:	f000 f968 	bl	8004974 <__multadd>
 80046a4:	9002      	str	r0, [sp, #8]
 80046a6:	e7eb      	b.n	8004680 <_dtoa_r+0xb70>
 80046a8:	080057a7 	.word	0x080057a7
 80046ac:	0800572b 	.word	0x0800572b

080046b0 <_free_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4605      	mov	r5, r0
 80046b4:	2900      	cmp	r1, #0
 80046b6:	d041      	beq.n	800473c <_free_r+0x8c>
 80046b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046bc:	1f0c      	subs	r4, r1, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bfb8      	it	lt
 80046c2:	18e4      	addlt	r4, r4, r3
 80046c4:	f000 f8e8 	bl	8004898 <__malloc_lock>
 80046c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <_free_r+0x90>)
 80046ca:	6813      	ldr	r3, [r2, #0]
 80046cc:	b933      	cbnz	r3, 80046dc <_free_r+0x2c>
 80046ce:	6063      	str	r3, [r4, #4]
 80046d0:	6014      	str	r4, [r2, #0]
 80046d2:	4628      	mov	r0, r5
 80046d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046d8:	f000 b8e4 	b.w	80048a4 <__malloc_unlock>
 80046dc:	42a3      	cmp	r3, r4
 80046de:	d908      	bls.n	80046f2 <_free_r+0x42>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	1821      	adds	r1, r4, r0
 80046e4:	428b      	cmp	r3, r1
 80046e6:	bf01      	itttt	eq
 80046e8:	6819      	ldreq	r1, [r3, #0]
 80046ea:	685b      	ldreq	r3, [r3, #4]
 80046ec:	1809      	addeq	r1, r1, r0
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	e7ed      	b.n	80046ce <_free_r+0x1e>
 80046f2:	461a      	mov	r2, r3
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b10b      	cbz	r3, 80046fc <_free_r+0x4c>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d9fa      	bls.n	80046f2 <_free_r+0x42>
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	1850      	adds	r0, r2, r1
 8004700:	42a0      	cmp	r0, r4
 8004702:	d10b      	bne.n	800471c <_free_r+0x6c>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	4401      	add	r1, r0
 8004708:	1850      	adds	r0, r2, r1
 800470a:	4283      	cmp	r3, r0
 800470c:	6011      	str	r1, [r2, #0]
 800470e:	d1e0      	bne.n	80046d2 <_free_r+0x22>
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	6053      	str	r3, [r2, #4]
 8004716:	4408      	add	r0, r1
 8004718:	6010      	str	r0, [r2, #0]
 800471a:	e7da      	b.n	80046d2 <_free_r+0x22>
 800471c:	d902      	bls.n	8004724 <_free_r+0x74>
 800471e:	230c      	movs	r3, #12
 8004720:	602b      	str	r3, [r5, #0]
 8004722:	e7d6      	b.n	80046d2 <_free_r+0x22>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	1821      	adds	r1, r4, r0
 8004728:	428b      	cmp	r3, r1
 800472a:	bf04      	itt	eq
 800472c:	6819      	ldreq	r1, [r3, #0]
 800472e:	685b      	ldreq	r3, [r3, #4]
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	bf04      	itt	eq
 8004734:	1809      	addeq	r1, r1, r0
 8004736:	6021      	streq	r1, [r4, #0]
 8004738:	6054      	str	r4, [r2, #4]
 800473a:	e7ca      	b.n	80046d2 <_free_r+0x22>
 800473c:	bd38      	pop	{r3, r4, r5, pc}
 800473e:	bf00      	nop
 8004740:	20000634 	.word	0x20000634

08004744 <malloc>:
 8004744:	4b02      	ldr	r3, [pc, #8]	@ (8004750 <malloc+0xc>)
 8004746:	4601      	mov	r1, r0
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	f000 b825 	b.w	8004798 <_malloc_r>
 800474e:	bf00      	nop
 8004750:	2000000c 	.word	0x2000000c

08004754 <sbrk_aligned>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4e0f      	ldr	r6, [pc, #60]	@ (8004794 <sbrk_aligned+0x40>)
 8004758:	460c      	mov	r4, r1
 800475a:	6831      	ldr	r1, [r6, #0]
 800475c:	4605      	mov	r5, r0
 800475e:	b911      	cbnz	r1, 8004766 <sbrk_aligned+0x12>
 8004760:	f000 fde6 	bl	8005330 <_sbrk_r>
 8004764:	6030      	str	r0, [r6, #0]
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 fde1 	bl	8005330 <_sbrk_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d103      	bne.n	800477a <sbrk_aligned+0x26>
 8004772:	f04f 34ff 	mov.w	r4, #4294967295
 8004776:	4620      	mov	r0, r4
 8004778:	bd70      	pop	{r4, r5, r6, pc}
 800477a:	1cc4      	adds	r4, r0, #3
 800477c:	f024 0403 	bic.w	r4, r4, #3
 8004780:	42a0      	cmp	r0, r4
 8004782:	d0f8      	beq.n	8004776 <sbrk_aligned+0x22>
 8004784:	1a21      	subs	r1, r4, r0
 8004786:	4628      	mov	r0, r5
 8004788:	f000 fdd2 	bl	8005330 <_sbrk_r>
 800478c:	3001      	adds	r0, #1
 800478e:	d1f2      	bne.n	8004776 <sbrk_aligned+0x22>
 8004790:	e7ef      	b.n	8004772 <sbrk_aligned+0x1e>
 8004792:	bf00      	nop
 8004794:	20000630 	.word	0x20000630

08004798 <_malloc_r>:
 8004798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800479c:	1ccd      	adds	r5, r1, #3
 800479e:	f025 0503 	bic.w	r5, r5, #3
 80047a2:	3508      	adds	r5, #8
 80047a4:	2d0c      	cmp	r5, #12
 80047a6:	bf38      	it	cc
 80047a8:	250c      	movcc	r5, #12
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	4606      	mov	r6, r0
 80047ae:	db01      	blt.n	80047b4 <_malloc_r+0x1c>
 80047b0:	42a9      	cmp	r1, r5
 80047b2:	d904      	bls.n	80047be <_malloc_r+0x26>
 80047b4:	230c      	movs	r3, #12
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	2000      	movs	r0, #0
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004894 <_malloc_r+0xfc>
 80047c2:	f000 f869 	bl	8004898 <__malloc_lock>
 80047c6:	f8d8 3000 	ldr.w	r3, [r8]
 80047ca:	461c      	mov	r4, r3
 80047cc:	bb44      	cbnz	r4, 8004820 <_malloc_r+0x88>
 80047ce:	4629      	mov	r1, r5
 80047d0:	4630      	mov	r0, r6
 80047d2:	f7ff ffbf 	bl	8004754 <sbrk_aligned>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	4604      	mov	r4, r0
 80047da:	d158      	bne.n	800488e <_malloc_r+0xf6>
 80047dc:	f8d8 4000 	ldr.w	r4, [r8]
 80047e0:	4627      	mov	r7, r4
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d143      	bne.n	800486e <_malloc_r+0xd6>
 80047e6:	2c00      	cmp	r4, #0
 80047e8:	d04b      	beq.n	8004882 <_malloc_r+0xea>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4639      	mov	r1, r7
 80047ee:	4630      	mov	r0, r6
 80047f0:	eb04 0903 	add.w	r9, r4, r3
 80047f4:	f000 fd9c 	bl	8005330 <_sbrk_r>
 80047f8:	4581      	cmp	r9, r0
 80047fa:	d142      	bne.n	8004882 <_malloc_r+0xea>
 80047fc:	6821      	ldr	r1, [r4, #0]
 80047fe:	1a6d      	subs	r5, r5, r1
 8004800:	4629      	mov	r1, r5
 8004802:	4630      	mov	r0, r6
 8004804:	f7ff ffa6 	bl	8004754 <sbrk_aligned>
 8004808:	3001      	adds	r0, #1
 800480a:	d03a      	beq.n	8004882 <_malloc_r+0xea>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	442b      	add	r3, r5
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	f8d8 3000 	ldr.w	r3, [r8]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	bb62      	cbnz	r2, 8004874 <_malloc_r+0xdc>
 800481a:	f8c8 7000 	str.w	r7, [r8]
 800481e:	e00f      	b.n	8004840 <_malloc_r+0xa8>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	1b52      	subs	r2, r2, r5
 8004824:	d420      	bmi.n	8004868 <_malloc_r+0xd0>
 8004826:	2a0b      	cmp	r2, #11
 8004828:	d917      	bls.n	800485a <_malloc_r+0xc2>
 800482a:	1961      	adds	r1, r4, r5
 800482c:	42a3      	cmp	r3, r4
 800482e:	6025      	str	r5, [r4, #0]
 8004830:	bf18      	it	ne
 8004832:	6059      	strne	r1, [r3, #4]
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	bf08      	it	eq
 8004838:	f8c8 1000 	streq.w	r1, [r8]
 800483c:	5162      	str	r2, [r4, r5]
 800483e:	604b      	str	r3, [r1, #4]
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f82f 	bl	80048a4 <__malloc_unlock>
 8004846:	f104 000b 	add.w	r0, r4, #11
 800484a:	1d23      	adds	r3, r4, #4
 800484c:	f020 0007 	bic.w	r0, r0, #7
 8004850:	1ac2      	subs	r2, r0, r3
 8004852:	bf1c      	itt	ne
 8004854:	1a1b      	subne	r3, r3, r0
 8004856:	50a3      	strne	r3, [r4, r2]
 8004858:	e7af      	b.n	80047ba <_malloc_r+0x22>
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	42a3      	cmp	r3, r4
 800485e:	bf0c      	ite	eq
 8004860:	f8c8 2000 	streq.w	r2, [r8]
 8004864:	605a      	strne	r2, [r3, #4]
 8004866:	e7eb      	b.n	8004840 <_malloc_r+0xa8>
 8004868:	4623      	mov	r3, r4
 800486a:	6864      	ldr	r4, [r4, #4]
 800486c:	e7ae      	b.n	80047cc <_malloc_r+0x34>
 800486e:	463c      	mov	r4, r7
 8004870:	687f      	ldr	r7, [r7, #4]
 8004872:	e7b6      	b.n	80047e2 <_malloc_r+0x4a>
 8004874:	461a      	mov	r2, r3
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	42a3      	cmp	r3, r4
 800487a:	d1fb      	bne.n	8004874 <_malloc_r+0xdc>
 800487c:	2300      	movs	r3, #0
 800487e:	6053      	str	r3, [r2, #4]
 8004880:	e7de      	b.n	8004840 <_malloc_r+0xa8>
 8004882:	230c      	movs	r3, #12
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	4630      	mov	r0, r6
 8004888:	f000 f80c 	bl	80048a4 <__malloc_unlock>
 800488c:	e794      	b.n	80047b8 <_malloc_r+0x20>
 800488e:	6005      	str	r5, [r0, #0]
 8004890:	e7d6      	b.n	8004840 <_malloc_r+0xa8>
 8004892:	bf00      	nop
 8004894:	20000634 	.word	0x20000634

08004898 <__malloc_lock>:
 8004898:	4801      	ldr	r0, [pc, #4]	@ (80048a0 <__malloc_lock+0x8>)
 800489a:	f7ff b89e 	b.w	80039da <__retarget_lock_acquire_recursive>
 800489e:	bf00      	nop
 80048a0:	2000062c 	.word	0x2000062c

080048a4 <__malloc_unlock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_unlock+0x8>)
 80048a6:	f7ff b899 	b.w	80039dc <__retarget_lock_release_recursive>
 80048aa:	bf00      	nop
 80048ac:	2000062c 	.word	0x2000062c

080048b0 <_Balloc>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	69c6      	ldr	r6, [r0, #28]
 80048b4:	4604      	mov	r4, r0
 80048b6:	460d      	mov	r5, r1
 80048b8:	b976      	cbnz	r6, 80048d8 <_Balloc+0x28>
 80048ba:	2010      	movs	r0, #16
 80048bc:	f7ff ff42 	bl	8004744 <malloc>
 80048c0:	4602      	mov	r2, r0
 80048c2:	61e0      	str	r0, [r4, #28]
 80048c4:	b920      	cbnz	r0, 80048d0 <_Balloc+0x20>
 80048c6:	4b18      	ldr	r3, [pc, #96]	@ (8004928 <_Balloc+0x78>)
 80048c8:	4818      	ldr	r0, [pc, #96]	@ (800492c <_Balloc+0x7c>)
 80048ca:	216b      	movs	r1, #107	@ 0x6b
 80048cc:	f000 fd40 	bl	8005350 <__assert_func>
 80048d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048d4:	6006      	str	r6, [r0, #0]
 80048d6:	60c6      	str	r6, [r0, #12]
 80048d8:	69e6      	ldr	r6, [r4, #28]
 80048da:	68f3      	ldr	r3, [r6, #12]
 80048dc:	b183      	cbz	r3, 8004900 <_Balloc+0x50>
 80048de:	69e3      	ldr	r3, [r4, #28]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048e6:	b9b8      	cbnz	r0, 8004918 <_Balloc+0x68>
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f605 	lsl.w	r6, r1, r5
 80048ee:	1d72      	adds	r2, r6, #5
 80048f0:	0092      	lsls	r2, r2, #2
 80048f2:	4620      	mov	r0, r4
 80048f4:	f000 fd4a 	bl	800538c <_calloc_r>
 80048f8:	b160      	cbz	r0, 8004914 <_Balloc+0x64>
 80048fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80048fe:	e00e      	b.n	800491e <_Balloc+0x6e>
 8004900:	2221      	movs	r2, #33	@ 0x21
 8004902:	2104      	movs	r1, #4
 8004904:	4620      	mov	r0, r4
 8004906:	f000 fd41 	bl	800538c <_calloc_r>
 800490a:	69e3      	ldr	r3, [r4, #28]
 800490c:	60f0      	str	r0, [r6, #12]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e4      	bne.n	80048de <_Balloc+0x2e>
 8004914:	2000      	movs	r0, #0
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	6802      	ldr	r2, [r0, #0]
 800491a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800491e:	2300      	movs	r3, #0
 8004920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004924:	e7f7      	b.n	8004916 <_Balloc+0x66>
 8004926:	bf00      	nop
 8004928:	08005738 	.word	0x08005738
 800492c:	080057b8 	.word	0x080057b8

08004930 <_Bfree>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	69c6      	ldr	r6, [r0, #28]
 8004934:	4605      	mov	r5, r0
 8004936:	460c      	mov	r4, r1
 8004938:	b976      	cbnz	r6, 8004958 <_Bfree+0x28>
 800493a:	2010      	movs	r0, #16
 800493c:	f7ff ff02 	bl	8004744 <malloc>
 8004940:	4602      	mov	r2, r0
 8004942:	61e8      	str	r0, [r5, #28]
 8004944:	b920      	cbnz	r0, 8004950 <_Bfree+0x20>
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <_Bfree+0x3c>)
 8004948:	4809      	ldr	r0, [pc, #36]	@ (8004970 <_Bfree+0x40>)
 800494a:	218f      	movs	r1, #143	@ 0x8f
 800494c:	f000 fd00 	bl	8005350 <__assert_func>
 8004950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004954:	6006      	str	r6, [r0, #0]
 8004956:	60c6      	str	r6, [r0, #12]
 8004958:	b13c      	cbz	r4, 800496a <_Bfree+0x3a>
 800495a:	69eb      	ldr	r3, [r5, #28]
 800495c:	6862      	ldr	r2, [r4, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004964:	6021      	str	r1, [r4, #0]
 8004966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	08005738 	.word	0x08005738
 8004970:	080057b8 	.word	0x080057b8

08004974 <__multadd>:
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	690d      	ldr	r5, [r1, #16]
 800497a:	4607      	mov	r7, r0
 800497c:	460c      	mov	r4, r1
 800497e:	461e      	mov	r6, r3
 8004980:	f101 0c14 	add.w	ip, r1, #20
 8004984:	2000      	movs	r0, #0
 8004986:	f8dc 3000 	ldr.w	r3, [ip]
 800498a:	b299      	uxth	r1, r3
 800498c:	fb02 6101 	mla	r1, r2, r1, r6
 8004990:	0c1e      	lsrs	r6, r3, #16
 8004992:	0c0b      	lsrs	r3, r1, #16
 8004994:	fb02 3306 	mla	r3, r2, r6, r3
 8004998:	b289      	uxth	r1, r1
 800499a:	3001      	adds	r0, #1
 800499c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80049a0:	4285      	cmp	r5, r0
 80049a2:	f84c 1b04 	str.w	r1, [ip], #4
 80049a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80049aa:	dcec      	bgt.n	8004986 <__multadd+0x12>
 80049ac:	b30e      	cbz	r6, 80049f2 <__multadd+0x7e>
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	dc19      	bgt.n	80049e8 <__multadd+0x74>
 80049b4:	6861      	ldr	r1, [r4, #4]
 80049b6:	4638      	mov	r0, r7
 80049b8:	3101      	adds	r1, #1
 80049ba:	f7ff ff79 	bl	80048b0 <_Balloc>
 80049be:	4680      	mov	r8, r0
 80049c0:	b928      	cbnz	r0, 80049ce <__multadd+0x5a>
 80049c2:	4602      	mov	r2, r0
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <__multadd+0x84>)
 80049c6:	480d      	ldr	r0, [pc, #52]	@ (80049fc <__multadd+0x88>)
 80049c8:	21ba      	movs	r1, #186	@ 0xba
 80049ca:	f000 fcc1 	bl	8005350 <__assert_func>
 80049ce:	6922      	ldr	r2, [r4, #16]
 80049d0:	3202      	adds	r2, #2
 80049d2:	f104 010c 	add.w	r1, r4, #12
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	300c      	adds	r0, #12
 80049da:	f7ff f800 	bl	80039de <memcpy>
 80049de:	4621      	mov	r1, r4
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ffa5 	bl	8004930 <_Bfree>
 80049e6:	4644      	mov	r4, r8
 80049e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049ec:	3501      	adds	r5, #1
 80049ee:	615e      	str	r6, [r3, #20]
 80049f0:	6125      	str	r5, [r4, #16]
 80049f2:	4620      	mov	r0, r4
 80049f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f8:	080057a7 	.word	0x080057a7
 80049fc:	080057b8 	.word	0x080057b8

08004a00 <__hi0bits>:
 8004a00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004a04:	4603      	mov	r3, r0
 8004a06:	bf36      	itet	cc
 8004a08:	0403      	lslcc	r3, r0, #16
 8004a0a:	2000      	movcs	r0, #0
 8004a0c:	2010      	movcc	r0, #16
 8004a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a12:	bf3c      	itt	cc
 8004a14:	021b      	lslcc	r3, r3, #8
 8004a16:	3008      	addcc	r0, #8
 8004a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1c:	bf3c      	itt	cc
 8004a1e:	011b      	lslcc	r3, r3, #4
 8004a20:	3004      	addcc	r0, #4
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a26:	bf3c      	itt	cc
 8004a28:	009b      	lslcc	r3, r3, #2
 8004a2a:	3002      	addcc	r0, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db05      	blt.n	8004a3c <__hi0bits+0x3c>
 8004a30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004a34:	f100 0001 	add.w	r0, r0, #1
 8004a38:	bf08      	it	eq
 8004a3a:	2020      	moveq	r0, #32
 8004a3c:	4770      	bx	lr

08004a3e <__lo0bits>:
 8004a3e:	6803      	ldr	r3, [r0, #0]
 8004a40:	4602      	mov	r2, r0
 8004a42:	f013 0007 	ands.w	r0, r3, #7
 8004a46:	d00b      	beq.n	8004a60 <__lo0bits+0x22>
 8004a48:	07d9      	lsls	r1, r3, #31
 8004a4a:	d421      	bmi.n	8004a90 <__lo0bits+0x52>
 8004a4c:	0798      	lsls	r0, r3, #30
 8004a4e:	bf49      	itett	mi
 8004a50:	085b      	lsrmi	r3, r3, #1
 8004a52:	089b      	lsrpl	r3, r3, #2
 8004a54:	2001      	movmi	r0, #1
 8004a56:	6013      	strmi	r3, [r2, #0]
 8004a58:	bf5c      	itt	pl
 8004a5a:	6013      	strpl	r3, [r2, #0]
 8004a5c:	2002      	movpl	r0, #2
 8004a5e:	4770      	bx	lr
 8004a60:	b299      	uxth	r1, r3
 8004a62:	b909      	cbnz	r1, 8004a68 <__lo0bits+0x2a>
 8004a64:	0c1b      	lsrs	r3, r3, #16
 8004a66:	2010      	movs	r0, #16
 8004a68:	b2d9      	uxtb	r1, r3
 8004a6a:	b909      	cbnz	r1, 8004a70 <__lo0bits+0x32>
 8004a6c:	3008      	adds	r0, #8
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	0719      	lsls	r1, r3, #28
 8004a72:	bf04      	itt	eq
 8004a74:	091b      	lsreq	r3, r3, #4
 8004a76:	3004      	addeq	r0, #4
 8004a78:	0799      	lsls	r1, r3, #30
 8004a7a:	bf04      	itt	eq
 8004a7c:	089b      	lsreq	r3, r3, #2
 8004a7e:	3002      	addeq	r0, #2
 8004a80:	07d9      	lsls	r1, r3, #31
 8004a82:	d403      	bmi.n	8004a8c <__lo0bits+0x4e>
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	f100 0001 	add.w	r0, r0, #1
 8004a8a:	d003      	beq.n	8004a94 <__lo0bits+0x56>
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4770      	bx	lr
 8004a90:	2000      	movs	r0, #0
 8004a92:	4770      	bx	lr
 8004a94:	2020      	movs	r0, #32
 8004a96:	4770      	bx	lr

08004a98 <__i2b>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	f7ff ff07 	bl	80048b0 <_Balloc>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	b928      	cbnz	r0, 8004ab2 <__i2b+0x1a>
 8004aa6:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <__i2b+0x24>)
 8004aa8:	4805      	ldr	r0, [pc, #20]	@ (8004ac0 <__i2b+0x28>)
 8004aaa:	f240 1145 	movw	r1, #325	@ 0x145
 8004aae:	f000 fc4f 	bl	8005350 <__assert_func>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	6144      	str	r4, [r0, #20]
 8004ab6:	6103      	str	r3, [r0, #16]
 8004ab8:	bd10      	pop	{r4, pc}
 8004aba:	bf00      	nop
 8004abc:	080057a7 	.word	0x080057a7
 8004ac0:	080057b8 	.word	0x080057b8

08004ac4 <__multiply>:
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	4617      	mov	r7, r2
 8004aca:	690a      	ldr	r2, [r1, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	bfa8      	it	ge
 8004ad2:	463b      	movge	r3, r7
 8004ad4:	4689      	mov	r9, r1
 8004ad6:	bfa4      	itt	ge
 8004ad8:	460f      	movge	r7, r1
 8004ada:	4699      	movge	r9, r3
 8004adc:	693d      	ldr	r5, [r7, #16]
 8004ade:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	eb05 060a 	add.w	r6, r5, sl
 8004aea:	42b3      	cmp	r3, r6
 8004aec:	b085      	sub	sp, #20
 8004aee:	bfb8      	it	lt
 8004af0:	3101      	addlt	r1, #1
 8004af2:	f7ff fedd 	bl	80048b0 <_Balloc>
 8004af6:	b930      	cbnz	r0, 8004b06 <__multiply+0x42>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b41      	ldr	r3, [pc, #260]	@ (8004c00 <__multiply+0x13c>)
 8004afc:	4841      	ldr	r0, [pc, #260]	@ (8004c04 <__multiply+0x140>)
 8004afe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004b02:	f000 fc25 	bl	8005350 <__assert_func>
 8004b06:	f100 0414 	add.w	r4, r0, #20
 8004b0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004b0e:	4623      	mov	r3, r4
 8004b10:	2200      	movs	r2, #0
 8004b12:	4573      	cmp	r3, lr
 8004b14:	d320      	bcc.n	8004b58 <__multiply+0x94>
 8004b16:	f107 0814 	add.w	r8, r7, #20
 8004b1a:	f109 0114 	add.w	r1, r9, #20
 8004b1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004b22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	1beb      	subs	r3, r5, r7
 8004b2a:	3b15      	subs	r3, #21
 8004b2c:	f023 0303 	bic.w	r3, r3, #3
 8004b30:	3304      	adds	r3, #4
 8004b32:	3715      	adds	r7, #21
 8004b34:	42bd      	cmp	r5, r7
 8004b36:	bf38      	it	cc
 8004b38:	2304      	movcc	r3, #4
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	9b02      	ldr	r3, [sp, #8]
 8004b3e:	9103      	str	r1, [sp, #12]
 8004b40:	428b      	cmp	r3, r1
 8004b42:	d80c      	bhi.n	8004b5e <__multiply+0x9a>
 8004b44:	2e00      	cmp	r6, #0
 8004b46:	dd03      	ble.n	8004b50 <__multiply+0x8c>
 8004b48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d055      	beq.n	8004bfc <__multiply+0x138>
 8004b50:	6106      	str	r6, [r0, #16]
 8004b52:	b005      	add	sp, #20
 8004b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b58:	f843 2b04 	str.w	r2, [r3], #4
 8004b5c:	e7d9      	b.n	8004b12 <__multiply+0x4e>
 8004b5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004b62:	f1ba 0f00 	cmp.w	sl, #0
 8004b66:	d01f      	beq.n	8004ba8 <__multiply+0xe4>
 8004b68:	46c4      	mov	ip, r8
 8004b6a:	46a1      	mov	r9, r4
 8004b6c:	2700      	movs	r7, #0
 8004b6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004b72:	f8d9 3000 	ldr.w	r3, [r9]
 8004b76:	fa1f fb82 	uxth.w	fp, r2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004b80:	443b      	add	r3, r7
 8004b82:	f8d9 7000 	ldr.w	r7, [r9]
 8004b86:	0c12      	lsrs	r2, r2, #16
 8004b88:	0c3f      	lsrs	r7, r7, #16
 8004b8a:	fb0a 7202 	mla	r2, sl, r2, r7
 8004b8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b98:	4565      	cmp	r5, ip
 8004b9a:	f849 3b04 	str.w	r3, [r9], #4
 8004b9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004ba2:	d8e4      	bhi.n	8004b6e <__multiply+0xaa>
 8004ba4:	9b01      	ldr	r3, [sp, #4]
 8004ba6:	50e7      	str	r7, [r4, r3]
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004bae:	3104      	adds	r1, #4
 8004bb0:	f1b9 0f00 	cmp.w	r9, #0
 8004bb4:	d020      	beq.n	8004bf8 <__multiply+0x134>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	4647      	mov	r7, r8
 8004bba:	46a4      	mov	ip, r4
 8004bbc:	f04f 0a00 	mov.w	sl, #0
 8004bc0:	f8b7 b000 	ldrh.w	fp, [r7]
 8004bc4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004bc8:	fb09 220b 	mla	r2, r9, fp, r2
 8004bcc:	4452      	add	r2, sl
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd4:	f84c 3b04 	str.w	r3, [ip], #4
 8004bd8:	f857 3b04 	ldr.w	r3, [r7], #4
 8004bdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004be0:	f8bc 3000 	ldrh.w	r3, [ip]
 8004be4:	fb09 330a 	mla	r3, r9, sl, r3
 8004be8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004bec:	42bd      	cmp	r5, r7
 8004bee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bf2:	d8e5      	bhi.n	8004bc0 <__multiply+0xfc>
 8004bf4:	9a01      	ldr	r2, [sp, #4]
 8004bf6:	50a3      	str	r3, [r4, r2]
 8004bf8:	3404      	adds	r4, #4
 8004bfa:	e79f      	b.n	8004b3c <__multiply+0x78>
 8004bfc:	3e01      	subs	r6, #1
 8004bfe:	e7a1      	b.n	8004b44 <__multiply+0x80>
 8004c00:	080057a7 	.word	0x080057a7
 8004c04:	080057b8 	.word	0x080057b8

08004c08 <__pow5mult>:
 8004c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c0c:	4615      	mov	r5, r2
 8004c0e:	f012 0203 	ands.w	r2, r2, #3
 8004c12:	4607      	mov	r7, r0
 8004c14:	460e      	mov	r6, r1
 8004c16:	d007      	beq.n	8004c28 <__pow5mult+0x20>
 8004c18:	4c25      	ldr	r4, [pc, #148]	@ (8004cb0 <__pow5mult+0xa8>)
 8004c1a:	3a01      	subs	r2, #1
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c22:	f7ff fea7 	bl	8004974 <__multadd>
 8004c26:	4606      	mov	r6, r0
 8004c28:	10ad      	asrs	r5, r5, #2
 8004c2a:	d03d      	beq.n	8004ca8 <__pow5mult+0xa0>
 8004c2c:	69fc      	ldr	r4, [r7, #28]
 8004c2e:	b97c      	cbnz	r4, 8004c50 <__pow5mult+0x48>
 8004c30:	2010      	movs	r0, #16
 8004c32:	f7ff fd87 	bl	8004744 <malloc>
 8004c36:	4602      	mov	r2, r0
 8004c38:	61f8      	str	r0, [r7, #28]
 8004c3a:	b928      	cbnz	r0, 8004c48 <__pow5mult+0x40>
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <__pow5mult+0xac>)
 8004c3e:	481e      	ldr	r0, [pc, #120]	@ (8004cb8 <__pow5mult+0xb0>)
 8004c40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004c44:	f000 fb84 	bl	8005350 <__assert_func>
 8004c48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c4c:	6004      	str	r4, [r0, #0]
 8004c4e:	60c4      	str	r4, [r0, #12]
 8004c50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004c54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c58:	b94c      	cbnz	r4, 8004c6e <__pow5mult+0x66>
 8004c5a:	f240 2171 	movw	r1, #625	@ 0x271
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f7ff ff1a 	bl	8004a98 <__i2b>
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	6003      	str	r3, [r0, #0]
 8004c6e:	f04f 0900 	mov.w	r9, #0
 8004c72:	07eb      	lsls	r3, r5, #31
 8004c74:	d50a      	bpl.n	8004c8c <__pow5mult+0x84>
 8004c76:	4631      	mov	r1, r6
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f7ff ff22 	bl	8004ac4 <__multiply>
 8004c80:	4631      	mov	r1, r6
 8004c82:	4680      	mov	r8, r0
 8004c84:	4638      	mov	r0, r7
 8004c86:	f7ff fe53 	bl	8004930 <_Bfree>
 8004c8a:	4646      	mov	r6, r8
 8004c8c:	106d      	asrs	r5, r5, #1
 8004c8e:	d00b      	beq.n	8004ca8 <__pow5mult+0xa0>
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	b938      	cbnz	r0, 8004ca4 <__pow5mult+0x9c>
 8004c94:	4622      	mov	r2, r4
 8004c96:	4621      	mov	r1, r4
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ff13 	bl	8004ac4 <__multiply>
 8004c9e:	6020      	str	r0, [r4, #0]
 8004ca0:	f8c0 9000 	str.w	r9, [r0]
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	e7e4      	b.n	8004c72 <__pow5mult+0x6a>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cae:	bf00      	nop
 8004cb0:	08005868 	.word	0x08005868
 8004cb4:	08005738 	.word	0x08005738
 8004cb8:	080057b8 	.word	0x080057b8

08004cbc <__lshift>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	6849      	ldr	r1, [r1, #4]
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	4607      	mov	r7, r0
 8004cce:	4691      	mov	r9, r2
 8004cd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004cd4:	f108 0601 	add.w	r6, r8, #1
 8004cd8:	42b3      	cmp	r3, r6
 8004cda:	db0b      	blt.n	8004cf4 <__lshift+0x38>
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7ff fde7 	bl	80048b0 <_Balloc>
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	b948      	cbnz	r0, 8004cfa <__lshift+0x3e>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b28      	ldr	r3, [pc, #160]	@ (8004d8c <__lshift+0xd0>)
 8004cea:	4829      	ldr	r0, [pc, #164]	@ (8004d90 <__lshift+0xd4>)
 8004cec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004cf0:	f000 fb2e 	bl	8005350 <__assert_func>
 8004cf4:	3101      	adds	r1, #1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	e7ee      	b.n	8004cd8 <__lshift+0x1c>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f100 0114 	add.w	r1, r0, #20
 8004d00:	f100 0210 	add.w	r2, r0, #16
 8004d04:	4618      	mov	r0, r3
 8004d06:	4553      	cmp	r3, sl
 8004d08:	db33      	blt.n	8004d72 <__lshift+0xb6>
 8004d0a:	6920      	ldr	r0, [r4, #16]
 8004d0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d10:	f104 0314 	add.w	r3, r4, #20
 8004d14:	f019 091f 	ands.w	r9, r9, #31
 8004d18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d20:	d02b      	beq.n	8004d7a <__lshift+0xbe>
 8004d22:	f1c9 0e20 	rsb	lr, r9, #32
 8004d26:	468a      	mov	sl, r1
 8004d28:	2200      	movs	r2, #0
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	fa00 f009 	lsl.w	r0, r0, r9
 8004d30:	4310      	orrs	r0, r2
 8004d32:	f84a 0b04 	str.w	r0, [sl], #4
 8004d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d3a:	459c      	cmp	ip, r3
 8004d3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d40:	d8f3      	bhi.n	8004d2a <__lshift+0x6e>
 8004d42:	ebac 0304 	sub.w	r3, ip, r4
 8004d46:	3b15      	subs	r3, #21
 8004d48:	f023 0303 	bic.w	r3, r3, #3
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	f104 0015 	add.w	r0, r4, #21
 8004d52:	4560      	cmp	r0, ip
 8004d54:	bf88      	it	hi
 8004d56:	2304      	movhi	r3, #4
 8004d58:	50ca      	str	r2, [r1, r3]
 8004d5a:	b10a      	cbz	r2, 8004d60 <__lshift+0xa4>
 8004d5c:	f108 0602 	add.w	r6, r8, #2
 8004d60:	3e01      	subs	r6, #1
 8004d62:	4638      	mov	r0, r7
 8004d64:	612e      	str	r6, [r5, #16]
 8004d66:	4621      	mov	r1, r4
 8004d68:	f7ff fde2 	bl	8004930 <_Bfree>
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d72:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d76:	3301      	adds	r3, #1
 8004d78:	e7c5      	b.n	8004d06 <__lshift+0x4a>
 8004d7a:	3904      	subs	r1, #4
 8004d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d80:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d84:	459c      	cmp	ip, r3
 8004d86:	d8f9      	bhi.n	8004d7c <__lshift+0xc0>
 8004d88:	e7ea      	b.n	8004d60 <__lshift+0xa4>
 8004d8a:	bf00      	nop
 8004d8c:	080057a7 	.word	0x080057a7
 8004d90:	080057b8 	.word	0x080057b8

08004d94 <__mcmp>:
 8004d94:	690a      	ldr	r2, [r1, #16]
 8004d96:	4603      	mov	r3, r0
 8004d98:	6900      	ldr	r0, [r0, #16]
 8004d9a:	1a80      	subs	r0, r0, r2
 8004d9c:	b530      	push	{r4, r5, lr}
 8004d9e:	d10e      	bne.n	8004dbe <__mcmp+0x2a>
 8004da0:	3314      	adds	r3, #20
 8004da2:	3114      	adds	r1, #20
 8004da4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004da8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004dac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004db0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004db4:	4295      	cmp	r5, r2
 8004db6:	d003      	beq.n	8004dc0 <__mcmp+0x2c>
 8004db8:	d205      	bcs.n	8004dc6 <__mcmp+0x32>
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbe:	bd30      	pop	{r4, r5, pc}
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d3f3      	bcc.n	8004dac <__mcmp+0x18>
 8004dc4:	e7fb      	b.n	8004dbe <__mcmp+0x2a>
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	e7f9      	b.n	8004dbe <__mcmp+0x2a>
	...

08004dcc <__mdiff>:
 8004dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd0:	4689      	mov	r9, r1
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4648      	mov	r0, r9
 8004dd8:	4614      	mov	r4, r2
 8004dda:	f7ff ffdb 	bl	8004d94 <__mcmp>
 8004dde:	1e05      	subs	r5, r0, #0
 8004de0:	d112      	bne.n	8004e08 <__mdiff+0x3c>
 8004de2:	4629      	mov	r1, r5
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff fd63 	bl	80048b0 <_Balloc>
 8004dea:	4602      	mov	r2, r0
 8004dec:	b928      	cbnz	r0, 8004dfa <__mdiff+0x2e>
 8004dee:	4b3f      	ldr	r3, [pc, #252]	@ (8004eec <__mdiff+0x120>)
 8004df0:	f240 2137 	movw	r1, #567	@ 0x237
 8004df4:	483e      	ldr	r0, [pc, #248]	@ (8004ef0 <__mdiff+0x124>)
 8004df6:	f000 faab 	bl	8005350 <__assert_func>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e00:	4610      	mov	r0, r2
 8004e02:	b003      	add	sp, #12
 8004e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e08:	bfbc      	itt	lt
 8004e0a:	464b      	movlt	r3, r9
 8004e0c:	46a1      	movlt	r9, r4
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e14:	bfba      	itte	lt
 8004e16:	461c      	movlt	r4, r3
 8004e18:	2501      	movlt	r5, #1
 8004e1a:	2500      	movge	r5, #0
 8004e1c:	f7ff fd48 	bl	80048b0 <_Balloc>
 8004e20:	4602      	mov	r2, r0
 8004e22:	b918      	cbnz	r0, 8004e2c <__mdiff+0x60>
 8004e24:	4b31      	ldr	r3, [pc, #196]	@ (8004eec <__mdiff+0x120>)
 8004e26:	f240 2145 	movw	r1, #581	@ 0x245
 8004e2a:	e7e3      	b.n	8004df4 <__mdiff+0x28>
 8004e2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004e30:	6926      	ldr	r6, [r4, #16]
 8004e32:	60c5      	str	r5, [r0, #12]
 8004e34:	f109 0310 	add.w	r3, r9, #16
 8004e38:	f109 0514 	add.w	r5, r9, #20
 8004e3c:	f104 0e14 	add.w	lr, r4, #20
 8004e40:	f100 0b14 	add.w	fp, r0, #20
 8004e44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004e48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	46d9      	mov	r9, fp
 8004e50:	f04f 0c00 	mov.w	ip, #0
 8004e54:	9b01      	ldr	r3, [sp, #4]
 8004e56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004e5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	fa1f f38a 	uxth.w	r3, sl
 8004e64:	4619      	mov	r1, r3
 8004e66:	b283      	uxth	r3, r0
 8004e68:	1acb      	subs	r3, r1, r3
 8004e6a:	0c00      	lsrs	r0, r0, #16
 8004e6c:	4463      	add	r3, ip
 8004e6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004e72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e7c:	4576      	cmp	r6, lr
 8004e7e:	f849 3b04 	str.w	r3, [r9], #4
 8004e82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e86:	d8e5      	bhi.n	8004e54 <__mdiff+0x88>
 8004e88:	1b33      	subs	r3, r6, r4
 8004e8a:	3b15      	subs	r3, #21
 8004e8c:	f023 0303 	bic.w	r3, r3, #3
 8004e90:	3415      	adds	r4, #21
 8004e92:	3304      	adds	r3, #4
 8004e94:	42a6      	cmp	r6, r4
 8004e96:	bf38      	it	cc
 8004e98:	2304      	movcc	r3, #4
 8004e9a:	441d      	add	r5, r3
 8004e9c:	445b      	add	r3, fp
 8004e9e:	461e      	mov	r6, r3
 8004ea0:	462c      	mov	r4, r5
 8004ea2:	4544      	cmp	r4, r8
 8004ea4:	d30e      	bcc.n	8004ec4 <__mdiff+0xf8>
 8004ea6:	f108 0103 	add.w	r1, r8, #3
 8004eaa:	1b49      	subs	r1, r1, r5
 8004eac:	f021 0103 	bic.w	r1, r1, #3
 8004eb0:	3d03      	subs	r5, #3
 8004eb2:	45a8      	cmp	r8, r5
 8004eb4:	bf38      	it	cc
 8004eb6:	2100      	movcc	r1, #0
 8004eb8:	440b      	add	r3, r1
 8004eba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ebe:	b191      	cbz	r1, 8004ee6 <__mdiff+0x11a>
 8004ec0:	6117      	str	r7, [r2, #16]
 8004ec2:	e79d      	b.n	8004e00 <__mdiff+0x34>
 8004ec4:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ec8:	46e6      	mov	lr, ip
 8004eca:	0c08      	lsrs	r0, r1, #16
 8004ecc:	fa1c fc81 	uxtah	ip, ip, r1
 8004ed0:	4471      	add	r1, lr
 8004ed2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004ed6:	b289      	uxth	r1, r1
 8004ed8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004edc:	f846 1b04 	str.w	r1, [r6], #4
 8004ee0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ee4:	e7dd      	b.n	8004ea2 <__mdiff+0xd6>
 8004ee6:	3f01      	subs	r7, #1
 8004ee8:	e7e7      	b.n	8004eba <__mdiff+0xee>
 8004eea:	bf00      	nop
 8004eec:	080057a7 	.word	0x080057a7
 8004ef0:	080057b8 	.word	0x080057b8

08004ef4 <__d2b>:
 8004ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ef8:	460f      	mov	r7, r1
 8004efa:	2101      	movs	r1, #1
 8004efc:	ec59 8b10 	vmov	r8, r9, d0
 8004f00:	4616      	mov	r6, r2
 8004f02:	f7ff fcd5 	bl	80048b0 <_Balloc>
 8004f06:	4604      	mov	r4, r0
 8004f08:	b930      	cbnz	r0, 8004f18 <__d2b+0x24>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	4b23      	ldr	r3, [pc, #140]	@ (8004f9c <__d2b+0xa8>)
 8004f0e:	4824      	ldr	r0, [pc, #144]	@ (8004fa0 <__d2b+0xac>)
 8004f10:	f240 310f 	movw	r1, #783	@ 0x30f
 8004f14:	f000 fa1c 	bl	8005350 <__assert_func>
 8004f18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f20:	b10d      	cbz	r5, 8004f26 <__d2b+0x32>
 8004f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	f1b8 0300 	subs.w	r3, r8, #0
 8004f2c:	d023      	beq.n	8004f76 <__d2b+0x82>
 8004f2e:	4668      	mov	r0, sp
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	f7ff fd84 	bl	8004a3e <__lo0bits>
 8004f36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004f3a:	b1d0      	cbz	r0, 8004f72 <__d2b+0x7e>
 8004f3c:	f1c0 0320 	rsb	r3, r0, #32
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	430b      	orrs	r3, r1
 8004f46:	40c2      	lsrs	r2, r0
 8004f48:	6163      	str	r3, [r4, #20]
 8004f4a:	9201      	str	r2, [sp, #4]
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	61a3      	str	r3, [r4, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf0c      	ite	eq
 8004f54:	2201      	moveq	r2, #1
 8004f56:	2202      	movne	r2, #2
 8004f58:	6122      	str	r2, [r4, #16]
 8004f5a:	b1a5      	cbz	r5, 8004f86 <__d2b+0x92>
 8004f5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004f60:	4405      	add	r5, r0
 8004f62:	603d      	str	r5, [r7, #0]
 8004f64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004f68:	6030      	str	r0, [r6, #0]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	b003      	add	sp, #12
 8004f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f72:	6161      	str	r1, [r4, #20]
 8004f74:	e7ea      	b.n	8004f4c <__d2b+0x58>
 8004f76:	a801      	add	r0, sp, #4
 8004f78:	f7ff fd61 	bl	8004a3e <__lo0bits>
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	6163      	str	r3, [r4, #20]
 8004f80:	3020      	adds	r0, #32
 8004f82:	2201      	movs	r2, #1
 8004f84:	e7e8      	b.n	8004f58 <__d2b+0x64>
 8004f86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004f8e:	6038      	str	r0, [r7, #0]
 8004f90:	6918      	ldr	r0, [r3, #16]
 8004f92:	f7ff fd35 	bl	8004a00 <__hi0bits>
 8004f96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f9a:	e7e5      	b.n	8004f68 <__d2b+0x74>
 8004f9c:	080057a7 	.word	0x080057a7
 8004fa0:	080057b8 	.word	0x080057b8

08004fa4 <__sfputc_r>:
 8004fa4:	6893      	ldr	r3, [r2, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	b410      	push	{r4}
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	da08      	bge.n	8004fc2 <__sfputc_r+0x1e>
 8004fb0:	6994      	ldr	r4, [r2, #24]
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	db01      	blt.n	8004fba <__sfputc_r+0x16>
 8004fb6:	290a      	cmp	r1, #10
 8004fb8:	d103      	bne.n	8004fc2 <__sfputc_r+0x1e>
 8004fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fbe:	f7fe bc0c 	b.w	80037da <__swbuf_r>
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	1c58      	adds	r0, r3, #1
 8004fc6:	6010      	str	r0, [r2, #0]
 8004fc8:	7019      	strb	r1, [r3, #0]
 8004fca:	4608      	mov	r0, r1
 8004fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <__sfputs_r>:
 8004fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	4614      	mov	r4, r2
 8004fda:	18d5      	adds	r5, r2, r3
 8004fdc:	42ac      	cmp	r4, r5
 8004fde:	d101      	bne.n	8004fe4 <__sfputs_r+0x12>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e007      	b.n	8004ff4 <__sfputs_r+0x22>
 8004fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe8:	463a      	mov	r2, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff ffda 	bl	8004fa4 <__sfputc_r>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d1f3      	bne.n	8004fdc <__sfputs_r+0xa>
 8004ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ff8 <_vfiprintf_r>:
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	460d      	mov	r5, r1
 8004ffe:	b09d      	sub	sp, #116	@ 0x74
 8005000:	4614      	mov	r4, r2
 8005002:	4698      	mov	r8, r3
 8005004:	4606      	mov	r6, r0
 8005006:	b118      	cbz	r0, 8005010 <_vfiprintf_r+0x18>
 8005008:	6a03      	ldr	r3, [r0, #32]
 800500a:	b90b      	cbnz	r3, 8005010 <_vfiprintf_r+0x18>
 800500c:	f7fe fab0 	bl	8003570 <__sinit>
 8005010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d405      	bmi.n	8005022 <_vfiprintf_r+0x2a>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d402      	bmi.n	8005022 <_vfiprintf_r+0x2a>
 800501c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800501e:	f7fe fcdc 	bl	80039da <__retarget_lock_acquire_recursive>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	071b      	lsls	r3, r3, #28
 8005026:	d501      	bpl.n	800502c <_vfiprintf_r+0x34>
 8005028:	692b      	ldr	r3, [r5, #16]
 800502a:	b99b      	cbnz	r3, 8005054 <_vfiprintf_r+0x5c>
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f7fe fc12 	bl	8003858 <__swsetup_r>
 8005034:	b170      	cbz	r0, 8005054 <_vfiprintf_r+0x5c>
 8005036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005038:	07dc      	lsls	r4, r3, #31
 800503a:	d504      	bpl.n	8005046 <_vfiprintf_r+0x4e>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	b01d      	add	sp, #116	@ 0x74
 8005042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	0598      	lsls	r0, r3, #22
 800504a:	d4f7      	bmi.n	800503c <_vfiprintf_r+0x44>
 800504c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800504e:	f7fe fcc5 	bl	80039dc <__retarget_lock_release_recursive>
 8005052:	e7f3      	b.n	800503c <_vfiprintf_r+0x44>
 8005054:	2300      	movs	r3, #0
 8005056:	9309      	str	r3, [sp, #36]	@ 0x24
 8005058:	2320      	movs	r3, #32
 800505a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800505e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005062:	2330      	movs	r3, #48	@ 0x30
 8005064:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005214 <_vfiprintf_r+0x21c>
 8005068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800506c:	f04f 0901 	mov.w	r9, #1
 8005070:	4623      	mov	r3, r4
 8005072:	469a      	mov	sl, r3
 8005074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005078:	b10a      	cbz	r2, 800507e <_vfiprintf_r+0x86>
 800507a:	2a25      	cmp	r2, #37	@ 0x25
 800507c:	d1f9      	bne.n	8005072 <_vfiprintf_r+0x7a>
 800507e:	ebba 0b04 	subs.w	fp, sl, r4
 8005082:	d00b      	beq.n	800509c <_vfiprintf_r+0xa4>
 8005084:	465b      	mov	r3, fp
 8005086:	4622      	mov	r2, r4
 8005088:	4629      	mov	r1, r5
 800508a:	4630      	mov	r0, r6
 800508c:	f7ff ffa1 	bl	8004fd2 <__sfputs_r>
 8005090:	3001      	adds	r0, #1
 8005092:	f000 80a7 	beq.w	80051e4 <_vfiprintf_r+0x1ec>
 8005096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005098:	445a      	add	r2, fp
 800509a:	9209      	str	r2, [sp, #36]	@ 0x24
 800509c:	f89a 3000 	ldrb.w	r3, [sl]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 809f 	beq.w	80051e4 <_vfiprintf_r+0x1ec>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b0:	f10a 0a01 	add.w	sl, sl, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80050be:	4654      	mov	r4, sl
 80050c0:	2205      	movs	r2, #5
 80050c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c6:	4853      	ldr	r0, [pc, #332]	@ (8005214 <_vfiprintf_r+0x21c>)
 80050c8:	f7fb f882 	bl	80001d0 <memchr>
 80050cc:	9a04      	ldr	r2, [sp, #16]
 80050ce:	b9d8      	cbnz	r0, 8005108 <_vfiprintf_r+0x110>
 80050d0:	06d1      	lsls	r1, r2, #27
 80050d2:	bf44      	itt	mi
 80050d4:	2320      	movmi	r3, #32
 80050d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050da:	0713      	lsls	r3, r2, #28
 80050dc:	bf44      	itt	mi
 80050de:	232b      	movmi	r3, #43	@ 0x2b
 80050e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e4:	f89a 3000 	ldrb.w	r3, [sl]
 80050e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ea:	d015      	beq.n	8005118 <_vfiprintf_r+0x120>
 80050ec:	9a07      	ldr	r2, [sp, #28]
 80050ee:	4654      	mov	r4, sl
 80050f0:	2000      	movs	r0, #0
 80050f2:	f04f 0c0a 	mov.w	ip, #10
 80050f6:	4621      	mov	r1, r4
 80050f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fc:	3b30      	subs	r3, #48	@ 0x30
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d94b      	bls.n	800519a <_vfiprintf_r+0x1a2>
 8005102:	b1b0      	cbz	r0, 8005132 <_vfiprintf_r+0x13a>
 8005104:	9207      	str	r2, [sp, #28]
 8005106:	e014      	b.n	8005132 <_vfiprintf_r+0x13a>
 8005108:	eba0 0308 	sub.w	r3, r0, r8
 800510c:	fa09 f303 	lsl.w	r3, r9, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	46a2      	mov	sl, r4
 8005116:	e7d2      	b.n	80050be <_vfiprintf_r+0xc6>
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	1d19      	adds	r1, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	9103      	str	r1, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfbb      	ittet	lt
 8005124:	425b      	neglt	r3, r3
 8005126:	f042 0202 	orrlt.w	r2, r2, #2
 800512a:	9307      	strge	r3, [sp, #28]
 800512c:	9307      	strlt	r3, [sp, #28]
 800512e:	bfb8      	it	lt
 8005130:	9204      	strlt	r2, [sp, #16]
 8005132:	7823      	ldrb	r3, [r4, #0]
 8005134:	2b2e      	cmp	r3, #46	@ 0x2e
 8005136:	d10a      	bne.n	800514e <_vfiprintf_r+0x156>
 8005138:	7863      	ldrb	r3, [r4, #1]
 800513a:	2b2a      	cmp	r3, #42	@ 0x2a
 800513c:	d132      	bne.n	80051a4 <_vfiprintf_r+0x1ac>
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	9203      	str	r2, [sp, #12]
 8005146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800514a:	3402      	adds	r4, #2
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005224 <_vfiprintf_r+0x22c>
 8005152:	7821      	ldrb	r1, [r4, #0]
 8005154:	2203      	movs	r2, #3
 8005156:	4650      	mov	r0, sl
 8005158:	f7fb f83a 	bl	80001d0 <memchr>
 800515c:	b138      	cbz	r0, 800516e <_vfiprintf_r+0x176>
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	eba0 000a 	sub.w	r0, r0, sl
 8005164:	2240      	movs	r2, #64	@ 0x40
 8005166:	4082      	lsls	r2, r0
 8005168:	4313      	orrs	r3, r2
 800516a:	3401      	adds	r4, #1
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005172:	4829      	ldr	r0, [pc, #164]	@ (8005218 <_vfiprintf_r+0x220>)
 8005174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005178:	2206      	movs	r2, #6
 800517a:	f7fb f829 	bl	80001d0 <memchr>
 800517e:	2800      	cmp	r0, #0
 8005180:	d03f      	beq.n	8005202 <_vfiprintf_r+0x20a>
 8005182:	4b26      	ldr	r3, [pc, #152]	@ (800521c <_vfiprintf_r+0x224>)
 8005184:	bb1b      	cbnz	r3, 80051ce <_vfiprintf_r+0x1d6>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	3307      	adds	r3, #7
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	3308      	adds	r3, #8
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005194:	443b      	add	r3, r7
 8005196:	9309      	str	r3, [sp, #36]	@ 0x24
 8005198:	e76a      	b.n	8005070 <_vfiprintf_r+0x78>
 800519a:	fb0c 3202 	mla	r2, ip, r2, r3
 800519e:	460c      	mov	r4, r1
 80051a0:	2001      	movs	r0, #1
 80051a2:	e7a8      	b.n	80050f6 <_vfiprintf_r+0xfe>
 80051a4:	2300      	movs	r3, #0
 80051a6:	3401      	adds	r4, #1
 80051a8:	9305      	str	r3, [sp, #20]
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 0c0a 	mov.w	ip, #10
 80051b0:	4620      	mov	r0, r4
 80051b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b6:	3a30      	subs	r2, #48	@ 0x30
 80051b8:	2a09      	cmp	r2, #9
 80051ba:	d903      	bls.n	80051c4 <_vfiprintf_r+0x1cc>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0c6      	beq.n	800514e <_vfiprintf_r+0x156>
 80051c0:	9105      	str	r1, [sp, #20]
 80051c2:	e7c4      	b.n	800514e <_vfiprintf_r+0x156>
 80051c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c8:	4604      	mov	r4, r0
 80051ca:	2301      	movs	r3, #1
 80051cc:	e7f0      	b.n	80051b0 <_vfiprintf_r+0x1b8>
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	462a      	mov	r2, r5
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <_vfiprintf_r+0x228>)
 80051d6:	a904      	add	r1, sp, #16
 80051d8:	4630      	mov	r0, r6
 80051da:	f7fd fcdb 	bl	8002b94 <_printf_float>
 80051de:	4607      	mov	r7, r0
 80051e0:	1c78      	adds	r0, r7, #1
 80051e2:	d1d6      	bne.n	8005192 <_vfiprintf_r+0x19a>
 80051e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051e6:	07d9      	lsls	r1, r3, #31
 80051e8:	d405      	bmi.n	80051f6 <_vfiprintf_r+0x1fe>
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	059a      	lsls	r2, r3, #22
 80051ee:	d402      	bmi.n	80051f6 <_vfiprintf_r+0x1fe>
 80051f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f2:	f7fe fbf3 	bl	80039dc <__retarget_lock_release_recursive>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	065b      	lsls	r3, r3, #25
 80051fa:	f53f af1f 	bmi.w	800503c <_vfiprintf_r+0x44>
 80051fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005200:	e71e      	b.n	8005040 <_vfiprintf_r+0x48>
 8005202:	ab03      	add	r3, sp, #12
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	462a      	mov	r2, r5
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <_vfiprintf_r+0x228>)
 800520a:	a904      	add	r1, sp, #16
 800520c:	4630      	mov	r0, r6
 800520e:	f7fd ff59 	bl	80030c4 <_printf_i>
 8005212:	e7e4      	b.n	80051de <_vfiprintf_r+0x1e6>
 8005214:	08005811 	.word	0x08005811
 8005218:	0800581b 	.word	0x0800581b
 800521c:	08002b95 	.word	0x08002b95
 8005220:	08004fd3 	.word	0x08004fd3
 8005224:	08005817 	.word	0x08005817

08005228 <__swhatbuf_r>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	460c      	mov	r4, r1
 800522c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005230:	2900      	cmp	r1, #0
 8005232:	b096      	sub	sp, #88	@ 0x58
 8005234:	4615      	mov	r5, r2
 8005236:	461e      	mov	r6, r3
 8005238:	da0d      	bge.n	8005256 <__swhatbuf_r+0x2e>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	bf14      	ite	ne
 8005246:	2340      	movne	r3, #64	@ 0x40
 8005248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800524c:	2000      	movs	r0, #0
 800524e:	6031      	str	r1, [r6, #0]
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	b016      	add	sp, #88	@ 0x58
 8005254:	bd70      	pop	{r4, r5, r6, pc}
 8005256:	466a      	mov	r2, sp
 8005258:	f000 f848 	bl	80052ec <_fstat_r>
 800525c:	2800      	cmp	r0, #0
 800525e:	dbec      	blt.n	800523a <__swhatbuf_r+0x12>
 8005260:	9901      	ldr	r1, [sp, #4]
 8005262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800526a:	4259      	negs	r1, r3
 800526c:	4159      	adcs	r1, r3
 800526e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005272:	e7eb      	b.n	800524c <__swhatbuf_r+0x24>

08005274 <__smakebuf_r>:
 8005274:	898b      	ldrh	r3, [r1, #12]
 8005276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005278:	079d      	lsls	r5, r3, #30
 800527a:	4606      	mov	r6, r0
 800527c:	460c      	mov	r4, r1
 800527e:	d507      	bpl.n	8005290 <__smakebuf_r+0x1c>
 8005280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	2301      	movs	r3, #1
 800528a:	6163      	str	r3, [r4, #20]
 800528c:	b003      	add	sp, #12
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005290:	ab01      	add	r3, sp, #4
 8005292:	466a      	mov	r2, sp
 8005294:	f7ff ffc8 	bl	8005228 <__swhatbuf_r>
 8005298:	9f00      	ldr	r7, [sp, #0]
 800529a:	4605      	mov	r5, r0
 800529c:	4639      	mov	r1, r7
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff fa7a 	bl	8004798 <_malloc_r>
 80052a4:	b948      	cbnz	r0, 80052ba <__smakebuf_r+0x46>
 80052a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052aa:	059a      	lsls	r2, r3, #22
 80052ac:	d4ee      	bmi.n	800528c <__smakebuf_r+0x18>
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	e7e2      	b.n	8005280 <__smakebuf_r+0xc>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	6020      	str	r0, [r4, #0]
 80052be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	9b01      	ldr	r3, [sp, #4]
 80052c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052ca:	b15b      	cbz	r3, 80052e4 <__smakebuf_r+0x70>
 80052cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d0:	4630      	mov	r0, r6
 80052d2:	f000 f81d 	bl	8005310 <_isatty_r>
 80052d6:	b128      	cbz	r0, 80052e4 <__smakebuf_r+0x70>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	431d      	orrs	r5, r3
 80052e8:	81a5      	strh	r5, [r4, #12]
 80052ea:	e7cf      	b.n	800528c <__smakebuf_r+0x18>

080052ec <_fstat_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	@ (800530c <_fstat_r+0x20>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	f7fd f9fd 	bl	80026f8 <_fstat>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d102      	bne.n	8005308 <_fstat_r+0x1c>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	b103      	cbz	r3, 8005308 <_fstat_r+0x1c>
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	bd38      	pop	{r3, r4, r5, pc}
 800530a:	bf00      	nop
 800530c:	20000628 	.word	0x20000628

08005310 <_isatty_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	@ (800532c <_isatty_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fd f9fc 	bl	8002718 <_isatty>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_isatty_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_isatty_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	20000628 	.word	0x20000628

08005330 <_sbrk_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d06      	ldr	r5, [pc, #24]	@ (800534c <_sbrk_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f000 f8b8 	bl	80054b0 <_sbrk>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_sbrk_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_sbrk_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20000628 	.word	0x20000628

08005350 <__assert_func>:
 8005350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005352:	4614      	mov	r4, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4b09      	ldr	r3, [pc, #36]	@ (800537c <__assert_func+0x2c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4605      	mov	r5, r0
 800535c:	68d8      	ldr	r0, [r3, #12]
 800535e:	b14c      	cbz	r4, 8005374 <__assert_func+0x24>
 8005360:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <__assert_func+0x30>)
 8005362:	9100      	str	r1, [sp, #0]
 8005364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005368:	4906      	ldr	r1, [pc, #24]	@ (8005384 <__assert_func+0x34>)
 800536a:	462b      	mov	r3, r5
 800536c:	f000 f842 	bl	80053f4 <fiprintf>
 8005370:	f000 f852 	bl	8005418 <abort>
 8005374:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <__assert_func+0x38>)
 8005376:	461c      	mov	r4, r3
 8005378:	e7f3      	b.n	8005362 <__assert_func+0x12>
 800537a:	bf00      	nop
 800537c:	2000000c 	.word	0x2000000c
 8005380:	0800582c 	.word	0x0800582c
 8005384:	08005839 	.word	0x08005839
 8005388:	08005867 	.word	0x08005867

0800538c <_calloc_r>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	fba1 5402 	umull	r5, r4, r1, r2
 8005392:	b934      	cbnz	r4, 80053a2 <_calloc_r+0x16>
 8005394:	4629      	mov	r1, r5
 8005396:	f7ff f9ff 	bl	8004798 <_malloc_r>
 800539a:	4606      	mov	r6, r0
 800539c:	b928      	cbnz	r0, 80053aa <_calloc_r+0x1e>
 800539e:	4630      	mov	r0, r6
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	220c      	movs	r2, #12
 80053a4:	6002      	str	r2, [r0, #0]
 80053a6:	2600      	movs	r6, #0
 80053a8:	e7f9      	b.n	800539e <_calloc_r+0x12>
 80053aa:	462a      	mov	r2, r5
 80053ac:	4621      	mov	r1, r4
 80053ae:	f7fe faa9 	bl	8003904 <memset>
 80053b2:	e7f4      	b.n	800539e <_calloc_r+0x12>

080053b4 <__ascii_mbtowc>:
 80053b4:	b082      	sub	sp, #8
 80053b6:	b901      	cbnz	r1, 80053ba <__ascii_mbtowc+0x6>
 80053b8:	a901      	add	r1, sp, #4
 80053ba:	b142      	cbz	r2, 80053ce <__ascii_mbtowc+0x1a>
 80053bc:	b14b      	cbz	r3, 80053d2 <__ascii_mbtowc+0x1e>
 80053be:	7813      	ldrb	r3, [r2, #0]
 80053c0:	600b      	str	r3, [r1, #0]
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	1e10      	subs	r0, r2, #0
 80053c6:	bf18      	it	ne
 80053c8:	2001      	movne	r0, #1
 80053ca:	b002      	add	sp, #8
 80053cc:	4770      	bx	lr
 80053ce:	4610      	mov	r0, r2
 80053d0:	e7fb      	b.n	80053ca <__ascii_mbtowc+0x16>
 80053d2:	f06f 0001 	mvn.w	r0, #1
 80053d6:	e7f8      	b.n	80053ca <__ascii_mbtowc+0x16>

080053d8 <__ascii_wctomb>:
 80053d8:	4603      	mov	r3, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	b141      	cbz	r1, 80053f0 <__ascii_wctomb+0x18>
 80053de:	2aff      	cmp	r2, #255	@ 0xff
 80053e0:	d904      	bls.n	80053ec <__ascii_wctomb+0x14>
 80053e2:	228a      	movs	r2, #138	@ 0x8a
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	4770      	bx	lr
 80053ec:	700a      	strb	r2, [r1, #0]
 80053ee:	2001      	movs	r0, #1
 80053f0:	4770      	bx	lr
	...

080053f4 <fiprintf>:
 80053f4:	b40e      	push	{r1, r2, r3}
 80053f6:	b503      	push	{r0, r1, lr}
 80053f8:	4601      	mov	r1, r0
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	4805      	ldr	r0, [pc, #20]	@ (8005414 <fiprintf+0x20>)
 80053fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	f7ff fdf7 	bl	8004ff8 <_vfiprintf_r>
 800540a:	b002      	add	sp, #8
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	2000000c 	.word	0x2000000c

08005418 <abort>:
 8005418:	b508      	push	{r3, lr}
 800541a:	2006      	movs	r0, #6
 800541c:	f000 f82c 	bl	8005478 <raise>
 8005420:	2001      	movs	r0, #1
 8005422:	f7fd f935 	bl	8002690 <_exit>

08005426 <_raise_r>:
 8005426:	291f      	cmp	r1, #31
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4605      	mov	r5, r0
 800542c:	460c      	mov	r4, r1
 800542e:	d904      	bls.n	800543a <_raise_r+0x14>
 8005430:	2316      	movs	r3, #22
 8005432:	6003      	str	r3, [r0, #0]
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	bd38      	pop	{r3, r4, r5, pc}
 800543a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800543c:	b112      	cbz	r2, 8005444 <_raise_r+0x1e>
 800543e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005442:	b94b      	cbnz	r3, 8005458 <_raise_r+0x32>
 8005444:	4628      	mov	r0, r5
 8005446:	f000 f831 	bl	80054ac <_getpid_r>
 800544a:	4622      	mov	r2, r4
 800544c:	4601      	mov	r1, r0
 800544e:	4628      	mov	r0, r5
 8005450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005454:	f000 b818 	b.w	8005488 <_kill_r>
 8005458:	2b01      	cmp	r3, #1
 800545a:	d00a      	beq.n	8005472 <_raise_r+0x4c>
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	d103      	bne.n	8005468 <_raise_r+0x42>
 8005460:	2316      	movs	r3, #22
 8005462:	6003      	str	r3, [r0, #0]
 8005464:	2001      	movs	r0, #1
 8005466:	e7e7      	b.n	8005438 <_raise_r+0x12>
 8005468:	2100      	movs	r1, #0
 800546a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800546e:	4620      	mov	r0, r4
 8005470:	4798      	blx	r3
 8005472:	2000      	movs	r0, #0
 8005474:	e7e0      	b.n	8005438 <_raise_r+0x12>
	...

08005478 <raise>:
 8005478:	4b02      	ldr	r3, [pc, #8]	@ (8005484 <raise+0xc>)
 800547a:	4601      	mov	r1, r0
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f7ff bfd2 	b.w	8005426 <_raise_r>
 8005482:	bf00      	nop
 8005484:	2000000c 	.word	0x2000000c

08005488 <_kill_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	@ (80054a8 <_kill_r+0x20>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	f7fd f8eb 	bl	8002670 <_kill>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d102      	bne.n	80054a4 <_kill_r+0x1c>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	b103      	cbz	r3, 80054a4 <_kill_r+0x1c>
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	bd38      	pop	{r3, r4, r5, pc}
 80054a6:	bf00      	nop
 80054a8:	20000628 	.word	0x20000628

080054ac <_getpid_r>:
 80054ac:	f7fd b8d8 	b.w	8002660 <_getpid>

080054b0 <_sbrk>:
 80054b0:	4a04      	ldr	r2, [pc, #16]	@ (80054c4 <_sbrk+0x14>)
 80054b2:	6811      	ldr	r1, [r2, #0]
 80054b4:	4603      	mov	r3, r0
 80054b6:	b909      	cbnz	r1, 80054bc <_sbrk+0xc>
 80054b8:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <_sbrk+0x18>)
 80054ba:	6011      	str	r1, [r2, #0]
 80054bc:	6810      	ldr	r0, [r2, #0]
 80054be:	4403      	add	r3, r0
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4770      	bx	lr
 80054c4:	20000638 	.word	0x20000638
 80054c8:	20000640 	.word	0x20000640

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
