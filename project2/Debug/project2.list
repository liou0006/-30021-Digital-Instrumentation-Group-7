
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005200  08005200  00006200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055cc  080055cc  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d4  080055d4  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d4  080055d4  000065d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d8  080055d8  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080055dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001c8  080057a4  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  080057a4  00007444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007baa  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175c  00000000  00000000  0000eda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00010500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072b  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000489d  00000000  00000000  000115e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6e5  00000000  00000000  00015e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b993  00000000  00000000  00020565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007bef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  0007bf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  0007f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051e4 	.word	0x080051e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	080051e4 	.word	0x080051e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bc0:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bc4:	015b      	lsls	r3, r3, #5
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f002 021f 	and.w	r2, r2, #31
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	015a      	lsls	r2, r3, #5
 8000bde:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <EXTI_GetITStatus+0x6c>)
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	f002 021f 	and.w	r2, r2, #31
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <EXTI_GetITStatus+0x5a>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e001      	b.n	8000c06 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40010414 	.word	0x40010414

08000c18 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	2201      	movs	r2, #1
 8000c28:	fa02 f103 	lsl.w	r1, r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	015a      	lsls	r2, r3, #5
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <EXTI_ClearITPendingBit+0x30>)
 8000c34:	4413      	add	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40010414 	.word	0x40010414

08000c4c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e07c      	b.n	8000d62 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d16b      	bne.n	8000d5c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <GPIO_Init+0x48>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d134      	bne.n	8000cfe <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	795b      	ldrb	r3, [r3, #5]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	889b      	ldrh	r3, [r3, #4]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2301      	movs	r3, #1
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	799b      	ldrb	r3, [r3, #6]
 8000cea:	4619      	mov	r1, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2103      	movs	r1, #3
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2103      	movs	r1, #3
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	79db      	ldrb	r3, [r3, #7]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	f67f af7f 	bls.w	8000c68 <GPIO_Init+0x1c>
    }
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2202      	movs	r2, #2
 8000d92:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	8a1b      	ldrh	r3, [r3, #16]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e001      	b.n	8000dd6 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
 8000df0:	4613      	mov	r3, r2
 8000df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e00:	e002      	b.n	8000e08 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000e2c:	787a      	ldrb	r2, [r7, #1]
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	08db      	lsrs	r3, r3, #3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	210f      	movs	r1, #15
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	8879      	ldrh	r1, [r7, #2]
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	b289      	uxth	r1, r1
 8000e62:	4608      	mov	r0, r1
 8000e64:	ea02 0103 	and.w	r1, r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f100 0208 	add.w	r2, r0, #8
 8000e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	@ 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ed0:	4b8b      	ldr	r3, [pc, #556]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d011      	beq.n	8000f04 <RCC_GetClocksFreq+0x5c>
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d837      	bhi.n	8000f56 <RCC_GetClocksFreq+0xae>
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <RCC_GetClocksFreq+0x4c>
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d004      	beq.n	8000efc <RCC_GetClocksFreq+0x54>
 8000ef2:	e030      	b.n	8000f56 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a83      	ldr	r2, [pc, #524]	@ (8001104 <RCC_GetClocksFreq+0x25c>)
 8000ef8:	601a      	str	r2, [r3, #0]
      break;
 8000efa:	e030      	b.n	8000f5e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a81      	ldr	r2, [pc, #516]	@ (8001104 <RCC_GetClocksFreq+0x25c>)
 8000f00:	601a      	str	r2, [r3, #0]
      break;
 8000f02:	e02c      	b.n	8000f5e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000f04:	4b7e      	ldr	r3, [pc, #504]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000f0c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f16:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	0c9b      	lsrs	r3, r3, #18
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	4a77      	ldr	r2, [pc, #476]	@ (8001108 <RCC_GetClocksFreq+0x260>)
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f30:	e00d      	b.n	8000f4e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000f32:	4b73      	ldr	r3, [pc, #460]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000f3e:	4a71      	ldr	r2, [pc, #452]	@ (8001104 <RCC_GetClocksFreq+0x25c>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f52:	601a      	str	r2, [r3, #0]
      break;
 8000f54:	e003      	b.n	8000f5e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	@ (8001104 <RCC_GetClocksFreq+0x25c>)
 8000f5a:	601a      	str	r2, [r3, #0]
      break;
 8000f5c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000f5e:	4b68      	ldr	r3, [pc, #416]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f66:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000f6e:	4a67      	ldr	r2, [pc, #412]	@ (800110c <RCC_GetClocksFreq+0x264>)
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	40da      	lsrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000f86:	4b5e      	ldr	r3, [pc, #376]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000f8e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000f96:	4a5d      	ldr	r2, [pc, #372]	@ (800110c <RCC_GetClocksFreq+0x264>)
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	40da      	lsrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000fb6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	0adb      	lsrs	r3, r3, #11
 8000fbc:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000fbe:	4a53      	ldr	r2, [pc, #332]	@ (800110c <RCC_GetClocksFreq+0x264>)
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	40da      	lsrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8000fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fda:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000fde:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8001110 <RCC_GetClocksFreq+0x268>)
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fbb2 f2f3 	udiv	r2, r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	e003      	b.n	8001012 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8001012:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8001014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001016:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800101a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	0a5b      	lsrs	r3, r3, #9
 8001020:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001022:	4a3b      	ldr	r2, [pc, #236]	@ (8001110 <RCC_GetClocksFreq+0x268>)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102a:	b29b      	uxth	r3, r3
 800102c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8001038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	e003      	b.n	800104e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b10      	cmp	r3, #16
 8001058:	d003      	beq.n	8001062 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a29      	ldr	r2, [pc, #164]	@ (8001104 <RCC_GetClocksFreq+0x25c>)
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	e003      	b.n	800106a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	2b20      	cmp	r3, #32
 8001074:	d003      	beq.n	800107e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a22      	ldr	r2, [pc, #136]	@ (8001104 <RCC_GetClocksFreq+0x25c>)
 800107a:	61da      	str	r2, [r3, #28]
 800107c:	e003      	b.n	8001086 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001092:	d10d      	bne.n	80010b0 <RCC_GetClocksFreq+0x208>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800109a:	429a      	cmp	r2, r3
 800109c:	d108      	bne.n	80010b0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d104      	bne.n	80010b0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	005a      	lsls	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	621a      	str	r2, [r3, #32]
 80010ae:	e003      	b.n	80010b8 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c4:	d10d      	bne.n	80010e2 <RCC_GetClocksFreq+0x23a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d108      	bne.n	80010e2 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d104      	bne.n	80010e2 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	005a      	lsls	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
 80010e0:	e003      	b.n	80010ea <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <RCC_GetClocksFreq+0x258>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10e      	bne.n	8001114 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80010fe:	e028      	b.n	8001152 <RCC_GetClocksFreq+0x2aa>
 8001100:	40021000 	.word	0x40021000
 8001104:	007a1200 	.word	0x007a1200
 8001108:	003d0900 	.word	0x003d0900
 800110c:	08005230 	.word	0x08005230
 8001110:	08005240 	.word	0x08005240
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001114:	4b6c      	ldr	r3, [pc, #432]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d104      	bne.n	800112a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
 8001128:	e013      	b.n	8001152 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800112a:	4b67      	ldr	r3, [pc, #412]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d104      	bne.n	8001140 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
 800113e:	e008      	b.n	8001152 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001140:	4b61      	ldr	r3, [pc, #388]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d102      	bne.n	8001152 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <RCC_GetClocksFreq+0x424>)
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001152:	4b5d      	ldr	r3, [pc, #372]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d104      	bne.n	8001168 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001166:	e021      	b.n	80011ac <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8001168:	4b57      	ldr	r3, [pc, #348]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001174:	d104      	bne.n	8001180 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800117e:	e015      	b.n	80011ac <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001180:	4b51      	ldr	r3, [pc, #324]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800118c:	d104      	bne.n	8001198 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001196:	e009      	b.n	80011ac <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001198:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80011a4:	d102      	bne.n	80011ac <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a48      	ldr	r2, [pc, #288]	@ (80012cc <RCC_GetClocksFreq+0x424>)
 80011aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80011ac:	4b46      	ldr	r3, [pc, #280]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d104      	bne.n	80011c2 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	631a      	str	r2, [r3, #48]	@ 0x30
 80011c0:	e021      	b.n	8001206 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80011c2:	4b41      	ldr	r3, [pc, #260]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80011ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80011ce:	d104      	bne.n	80011da <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d8:	e015      	b.n	8001206 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80011da:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80011e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011e6:	d104      	bne.n	80011f2 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f0:	e009      	b.n	8001206 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80011f2:	4b35      	ldr	r3, [pc, #212]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80011fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80011fe:	d102      	bne.n	8001206 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a32      	ldr	r2, [pc, #200]	@ (80012cc <RCC_GetClocksFreq+0x424>)
 8001204:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
 800121a:	e021      	b.n	8001260 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800121c:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001228:	d104      	bne.n	8001234 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	635a      	str	r2, [r3, #52]	@ 0x34
 8001232:	e015      	b.n	8001260 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800123c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001240:	d104      	bne.n	800124c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
 800124a:	e009      	b.n	8001260 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001258:	d102      	bne.n	8001260 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <RCC_GetClocksFreq+0x424>)
 800125e:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d104      	bne.n	8001276 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001274:	e021      	b.n	80012ba <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800127e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001282:	d104      	bne.n	800128e <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800128c:	e015      	b.n	80012ba <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001296:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800129a:	d104      	bne.n	80012a6 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012a2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80012a4:	e009      	b.n	80012ba <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <RCC_GetClocksFreq+0x420>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80012ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80012b2:	d102      	bne.n	80012ba <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <RCC_GetClocksFreq+0x424>)
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80012ba:	bf00      	nop
 80012bc:	372c      	adds	r7, #44	@ 0x2c
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	007a1200 	.word	0x007a1200

080012d0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <RCC_AHBPeriphClockCmd+0x3c>)
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	4909      	ldr	r1, [pc, #36]	@ (800130c <RCC_AHBPeriphClockCmd+0x3c>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80012ee:	e006      	b.n	80012fe <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <RCC_AHBPeriphClockCmd+0x3c>)
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	4904      	ldr	r1, [pc, #16]	@ (800130c <RCC_AHBPeriphClockCmd+0x3c>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	614b      	str	r3, [r1, #20]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <RCC_APB1PeriphClockCmd+0x3c>)
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	4909      	ldr	r1, [pc, #36]	@ (800134c <RCC_APB1PeriphClockCmd+0x3c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800132e:	e006      	b.n	800133e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <RCC_APB1PeriphClockCmd+0x3c>)
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	43db      	mvns	r3, r3
 8001338:	4904      	ldr	r1, [pc, #16]	@ (800134c <RCC_APB1PeriphClockCmd+0x3c>)
 800133a:	4013      	ands	r3, r2
 800133c:	61cb      	str	r3, [r1, #28]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <TIM_TimeBaseInit+0xcc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d00f      	beq.n	800138c <TIM_TimeBaseInit+0x3c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a2c      	ldr	r2, [pc, #176]	@ (8001420 <TIM_TimeBaseInit+0xd0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00b      	beq.n	800138c <TIM_TimeBaseInit+0x3c>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800137a:	d007      	beq.n	800138c <TIM_TimeBaseInit+0x3c>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a29      	ldr	r2, [pc, #164]	@ (8001424 <TIM_TimeBaseInit+0xd4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d003      	beq.n	800138c <TIM_TimeBaseInit+0x3c>
     (TIMx == TIM3)|| (TIMx == TIM4)) 
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <TIM_TimeBaseInit+0xd8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d108      	bne.n	800139e <TIM_TimeBaseInit+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800138c:	89fb      	ldrh	r3, [r7, #14]
 800138e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001392:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	885a      	ldrh	r2, [r3, #2]
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	4313      	orrs	r3, r2
 800139c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a22      	ldr	r2, [pc, #136]	@ (800142c <TIM_TimeBaseInit+0xdc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00c      	beq.n	80013c0 <TIM_TimeBaseInit+0x70>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <TIM_TimeBaseInit+0xe0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d008      	beq.n	80013c0 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013b4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	891a      	ldrh	r2, [r3, #8]
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	4313      	orrs	r3, r2
 80013be:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	89fa      	ldrh	r2, [r7, #14]
 80013c4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a10      	ldr	r2, [pc, #64]	@ (800141c <TIM_TimeBaseInit+0xcc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00f      	beq.n	80013fe <TIM_TimeBaseInit+0xae>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <TIM_TimeBaseInit+0xd0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00b      	beq.n	80013fe <TIM_TimeBaseInit+0xae>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <TIM_TimeBaseInit+0xe4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <TIM_TimeBaseInit+0xae>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <TIM_TimeBaseInit+0xe8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d003      	beq.n	80013fe <TIM_TimeBaseInit+0xae>
      (TIMx == TIM16) || (TIMx == TIM17))  
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a10      	ldr	r2, [pc, #64]	@ (800143c <TIM_TimeBaseInit+0xec>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d104      	bne.n	8001408 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7a9b      	ldrb	r3, [r3, #10]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	615a      	str	r2, [r3, #20]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40012c00 	.word	0x40012c00
 8001420:	40013400 	.word	0x40013400
 8001424:	40000400 	.word	0x40000400
 8001428:	40000800 	.word	0x40000800
 800142c:	40001000 	.word	0x40001000
 8001430:	40001400 	.word	0x40001400
 8001434:	40014000 	.word	0x40014000
 8001438:	40014400 	.word	0x40014400
 800143c:	40014800 	.word	0x40014800

08001440 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f04f 32ff 	mov.w	r2, #4294967295
 800144e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	729a      	strb	r2, [r3, #10]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16 or 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80014b2:	e007      	b.n	80014c4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	801a      	strh	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = (uint32_t)CCER_CCE_SET << (uint32_t)TIM_Channel;
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	2201      	movs	r2, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint32_t)(~tmp);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  ((uint32_t)TIM_CCx << (uint32_t)TIM_Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	8839      	ldrh	r1, [r7, #0]
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	621a      	str	r2, [r3, #32]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	811a      	strh	r2, [r3, #8]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8001556:	2300      	movs	r3, #0
 8001558:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800155a:	2301      	movs	r3, #1
 800155c:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	885b      	ldrh	r3, [r3, #2]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8001566:	2302      	movs	r3, #2
 8001568:	81fb      	strh	r3, [r7, #14]
 800156a:	e001      	b.n	8001570 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800156c:	2300      	movs	r3, #0
 800156e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d102      	bne.n	800157e <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001578:	2302      	movs	r3, #2
 800157a:	81bb      	strh	r3, [r7, #12]
 800157c:	e001      	b.n	8001582 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800157e:	2301      	movs	r3, #1
 8001580:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d11c      	bne.n	80015c4 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	8859      	ldrh	r1, [r3, #2]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	889a      	ldrh	r2, [r3, #4]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	891b      	ldrh	r3, [r3, #8]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f927 	bl	80017ea <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	88db      	ldrh	r3, [r3, #6]
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f846 	bl	8001634 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	891b      	ldrh	r3, [r3, #8]
 80015ac:	89ba      	ldrh	r2, [r7, #12]
 80015ae:	89f9      	ldrh	r1, [r7, #14]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f95a 	bl	800186a <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	88db      	ldrh	r3, [r3, #6]
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f851 	bl	8001664 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80015c2:	e01b      	b.n	80015fc <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	8859      	ldrh	r1, [r3, #2]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	889a      	ldrh	r2, [r3, #4]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	891b      	ldrh	r3, [r3, #8]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f94a 	bl	800186a <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	88db      	ldrh	r3, [r3, #6]
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f841 	bl	8001664 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	891b      	ldrh	r3, [r3, #8]
 80015e6:	89ba      	ldrh	r2, [r7, #12]
 80015e8:	89f9      	ldrh	r1, [r7, #14]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8fd 	bl	80017ea <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	88db      	ldrh	r3, [r3, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f81c 	bl	8001634 <TIM_SetIC1Prescaler>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 8, 15, 16 or 17 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 8 or 15 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC1PSC;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f023 020c 	bic.w	r2, r3, #12
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint32_t)~TIM_CCMR1_IC2PSC;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint32_t)((uint32_t)TIM_ICPSC << 8);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	807b      	strh	r3, [r7, #2]
 80016a2:	4613      	mov	r3, r2
 80016a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016a6:	787b      	ldrb	r3, [r7, #1]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80016b8:	e007      	b.n	80016ca <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	b292      	uxth	r2, r2
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60da      	str	r2, [r3, #12]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	81bb      	strh	r3, [r7, #12]
 80016ea:	2300      	movs	r3, #0
 80016ec:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	4013      	ands	r3, r2
 80016f8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4013      	ands	r3, r2
 8001704:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001706:	89bb      	ldrh	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <TIM_GetITStatus+0x42>
 800170c:	897b      	ldrh	r3, [r7, #10]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e001      	b.n	800171c <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	43db      	mvns	r3, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800176a:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800176c:	89fa      	ldrh	r2, [r7, #14]
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	4313      	orrs	r3, r2
 8001772:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001774:	89fa      	ldrh	r2, [r7, #14]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <TIM_SelectSlaveMode>:
  *                                                      reinitializes the counter, generates an update 
  *                                                      of the registers and starts the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint32_t)~TIM_SMCR_SMS;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001798:	f023 0307 	bic.w	r3, r3, #7
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6093      	str	r3, [r2, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= (uint32_t)TIM_SlaveMode;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6093      	str	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b087      	sub	sp, #28
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	4608      	mov	r0, r1
 80017f4:	4611      	mov	r1, r2
 80017f6:	461a      	mov	r2, r3
 80017f8:	4603      	mov	r3, r0
 80017fa:	817b      	strh	r3, [r7, #10]
 80017fc:	460b      	mov	r3, r1
 80017fe:	813b      	strh	r3, [r7, #8]
 8001800:	4613      	mov	r3, r2
 8001802:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint32_t)~TIM_CCER_CC1E;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f023 0201 	bic.w	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	613b      	str	r3, [r7, #16]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC1S) & ((uint32_t)~TIM_CCMR1_IC1F);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 800182a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (uint32_t)(TIM_ICSelection | (uint32_t)((uint32_t)TIM_ICFilter << 4));
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4313      	orrs	r3, r2
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f023 030a 	bic.w	r3, r3, #10
 8001840:	613b      	str	r3, [r7, #16]
  tmpccer |= (uint32_t)(TIM_ICPolarity | (uint32_t)TIM_CCER_CC1E);
 8001842:	897b      	ldrh	r3, [r7, #10]
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	621a      	str	r2, [r3, #32]
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800186a:	b480      	push	{r7}
 800186c:	b089      	sub	sp, #36	@ 0x24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	4608      	mov	r0, r1
 8001874:	4611      	mov	r1, r2
 8001876:	461a      	mov	r2, r3
 8001878:	4603      	mov	r3, r0
 800187a:	817b      	strh	r3, [r7, #10]
 800187c:	460b      	mov	r3, r1
 800187e:	813b      	strh	r3, [r7, #8]
 8001880:	4613      	mov	r3, r2
 8001882:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8001898:	4013      	ands	r3, r2
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	6213      	str	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	61fb      	str	r3, [r7, #28]
  tmpccer = TIMx->CCER;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	61bb      	str	r3, [r7, #24]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	617b      	str	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint32_t)~TIM_CCMR1_CC2S) & ((uint32_t)~TIM_CCMR1_IC2F);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f423 4373 	bic.w	r3, r3, #62208	@ 0xf300
 80018b8:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICFilter << 12);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	031b      	lsls	r3, r3, #12
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61fb      	str	r3, [r7, #28]
  tmpccmr1 |= (uint32_t)((uint32_t)TIM_ICSelection << 8);
 80018c4:	893b      	ldrh	r3, [r7, #8]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61fb      	str	r3, [r7, #28]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	f64f 735f 	movw	r3, #65375	@ 0xff5f
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	621a      	str	r2, [r3, #32]
}
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001926:	b480      	push	{r7}
 8001928:	b089      	sub	sp, #36	@ 0x24
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	4613      	mov	r3, r2
 8001932:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	b29b      	uxth	r3, r3
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	b29b      	uxth	r3, r3
 8001950:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001958:	2201      	movs	r2, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d103      	bne.n	8001970 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3304      	adds	r3, #4
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e005      	b.n	800197c <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d102      	bne.n	800197c <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800198e:	e006      	b.n	800199e <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43da      	mvns	r2, r3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001a06:	2201      	movs	r2, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00d      	b.n	8001a3e <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d105      	bne.n	8001a34 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e004      	b.n	8001a3e <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001a44:	2201      	movs	r2, #1
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <USART_GetITStatus+0x8e>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	74fb      	strb	r3, [r7, #19]
 8001a68:	e001      	b.n	8001a6e <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	fa02 f103 	lsl.w	r1, r2, r3
 8001a92:	4a06      	ldr	r2, [pc, #24]	@ (8001aac <NVIC_EnableIRQ+0x30>)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	@ (8001ae0 <uart_put_char+0x30>)
 8001ac2:	f7ff ff1e 	bl	8001902 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001ac6:	bf00      	nop
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <uart_put_char+0x30>)
 8001acc:	f7ff ff6d 	bl	80019aa <USART_GetFlagStatus>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f8      	beq.n	8001ac8 <uart_put_char+0x18>
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e012      	b.n	8001b1e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b0a      	cmp	r3, #10
 8001b02:	d102      	bne.n	8001b0a <_write_r+0x26>
            uart_put_char('\r');
 8001b04:	200d      	movs	r0, #13
 8001b06:	f7ff ffd3 	bl	8001ab0 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ffcc 	bl	8001ab0 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbe8      	blt.n	8001af8 <_write_r+0x14>
    }

    return len;
 8001b26:	683b      	ldr	r3, [r7, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001b34:	4915      	ldr	r1, [pc, #84]	@ (8001b8c <USART2_IRQHandler+0x5c>)
 8001b36:	4816      	ldr	r0, [pc, #88]	@ (8001b90 <USART2_IRQHandler+0x60>)
 8001b38:	f7ff ff50 	bl	80019dc <USART_GetITStatus>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d021      	beq.n	8001b86 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <USART2_IRQHandler+0x60>)
 8001b44:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001b46:	b299      	uxth	r1, r3
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <USART2_IRQHandler+0x64>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	b2d0      	uxtb	r0, r2
 8001b52:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <USART2_IRQHandler+0x64>)
 8001b54:	7010      	strb	r0, [r2, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	b2c9      	uxtb	r1, r1
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <USART2_IRQHandler+0x68>)
 8001b5c:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <USART2_IRQHandler+0x6c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2bff      	cmp	r3, #255	@ 0xff
 8001b66:	d107      	bne.n	8001b78 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <USART2_IRQHandler+0x70>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <USART2_IRQHandler+0x70>)
 8001b74:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001b76:	e006      	b.n	8001b86 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <USART2_IRQHandler+0x6c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <USART2_IRQHandler+0x6c>)
 8001b84:	701a      	strb	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	00050105 	.word	0x00050105
 8001b90:	40004400 	.word	0x40004400
 8001b94:	200002e4 	.word	0x200002e4
 8001b98:	200001e4 	.word	0x200001e4
 8001b9c:	200002e6 	.word	0x200002e6
 8001ba0:	200002e5 	.word	0x200002e5

08001ba4 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	@ 0x50
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001bac:	4b86      	ldr	r3, [pc, #536]	@ (8001dc8 <uart_init+0x224>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fb9d 	bl	80032f4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001bba:	4b83      	ldr	r3, [pc, #524]	@ (8001dc8 <uart_init+0x224>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 fb96 	bl	80032f4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001bc8:	4b80      	ldr	r3, [pc, #512]	@ (8001dcc <uart_init+0x228>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a7f      	ldr	r2, [pc, #508]	@ (8001dcc <uart_init+0x228>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001bd4:	4b7d      	ldr	r3, [pc, #500]	@ (8001dcc <uart_init+0x228>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a7c      	ldr	r2, [pc, #496]	@ (8001dcc <uart_init+0x228>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bde:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001bf0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001bfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bfe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001c00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c0e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001c10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c1a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001c1e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001c20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c2e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001c30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c3a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001c3e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001c40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c44:	889b      	ldrh	r3, [r3, #4]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c4c:	f023 030c 	bic.w	r3, r3, #12
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001c54:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c5c:	8892      	ldrh	r2, [r2, #4]
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001c62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c70:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001c72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c7c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001c80:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001c82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c90:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001c92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001c9c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001ca0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd0 <uart_init+0x22c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <uart_init+0x22c>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001cae:	4b48      	ldr	r3, [pc, #288]	@ (8001dd0 <uart_init+0x22c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a47      	ldr	r2, [pc, #284]	@ (8001dd0 <uart_init+0x22c>)
 8001cb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cb8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001cba:	4b45      	ldr	r3, [pc, #276]	@ (8001dd0 <uart_init+0x22c>)
 8001cbc:	4a44      	ldr	r2, [pc, #272]	@ (8001dd0 <uart_init+0x22c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001cc2:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <uart_init+0x22c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a42      	ldr	r2, [pc, #264]	@ (8001dd0 <uart_init+0x22c>)
 8001cc8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001ccc:	f023 030c 	bic.w	r3, r3, #12
 8001cd0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd0 <uart_init+0x22c>)
 8001cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8001dd0 <uart_init+0x22c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <uart_init+0x22c>)
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd0 <uart_init+0x22c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <uart_init+0x22c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd0 <uart_init+0x22c>)
 8001ce8:	f043 030c 	orr.w	r3, r3, #12
 8001cec:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8001cee:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <uart_init+0x22c>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a37      	ldr	r2, [pc, #220]	@ (8001dd0 <uart_init+0x22c>)
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cf8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8001cfa:	4b35      	ldr	r3, [pc, #212]	@ (8001dd0 <uart_init+0x22c>)
 8001cfc:	4a34      	ldr	r2, [pc, #208]	@ (8001dd0 <uart_init+0x22c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d06:	2300      	movs	r3, #0
 8001d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f8c8 	bl	8000ea8 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <uart_init+0x22c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8001d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2a:	005a      	lsls	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	fb01 f202 	mul.w	r2, r1, r2
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d48:	e00d      	b.n	8001d66 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8001d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	fb01 f202 	mul.w	r2, r1, r2
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d302      	bcc.n	8001d76 <uart_init+0x1d2>
        divider++;
 8001d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d72:	3301      	adds	r3, #1
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <uart_init+0x22c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d8e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001d92:	4013      	ands	r3, r2
 8001d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d96:	4313      	orrs	r3, r2
 8001d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <uart_init+0x22c>)
 8001d9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <uart_init+0x22c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <uart_init+0x22c>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001dae:	2201      	movs	r2, #1
 8001db0:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <uart_init+0x230>)
 8001db2:	4807      	ldr	r0, [pc, #28]	@ (8001dd0 <uart_init+0x22c>)
 8001db4:	f7ff fdb7 	bl	8001926 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001db8:	2026      	movs	r0, #38	@ 0x26
 8001dba:	f7ff fe5f 	bl	8001a7c <NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3750      	adds	r7, #80	@ 0x50
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000000c 	.word	0x2000000c
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	00050105 	.word	0x00050105

08001dd8 <NVIC_EnableIRQ>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2201      	movs	r2, #1
 8001dea:	fa02 f103 	lsl.w	r1, r2, r3
 8001dee:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <NVIC_EnableIRQ+0x30>)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da0b      	bge.n	8001e38 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	@ (8001e58 <NVIC_SetPriority+0x4c>)
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	3b04      	subs	r3, #4
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001e36:	e009      	b.n	8001e4c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <NVIC_SetPriority+0x50>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <TimeBaseInit>:

volatile float freq = 0;
volatile float duty = 0;
volatile uint8_t readCapture = 0;   // 1=run, 0=pause

void TimeBaseInit(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
	// 1. Enable TIM clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001e66:	2101      	movs	r1, #1
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fa51 	bl	8001310 <RCC_APB1PeriphClockCmd>

	// 2.5 Configure TimeBaseInit
	TIM_TimeBaseInitTypeDef TIM_InitStruct;
	TIM_TimeBaseStructInit(&TIM_InitStruct);
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fae5 	bl	8001440 <TIM_TimeBaseStructInit>

	// --- From Table 23 in the datasheet APB1 clock frequency is 36MHz
	uint32_t timer_clock = 72000000;          // TIM2 clock (2 × APB1 = 72 MHz) something about we
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <TimeBaseInit+0x60>)
 8001e78:	61fb      	str	r3, [r7, #28]
	uint32_t target_freq = 1000000;           // 1 MHz
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <TimeBaseInit+0x64>)
 8001e7c:	61bb      	str	r3, [r7, #24]
	uint16_t prescaler = (timer_clock / target_freq) - 1u;  // = 71
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	82fb      	strh	r3, [r7, #22]
	uint32_t period = 0xFFFFFFFF; 	 //TIM2 is 32-bit - look at page 550 in RM
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	613b      	str	r3, [r7, #16]
	uint8_t prescalerCalibrated = prescaler - 8; // 63 which means TIM2 clock frequency should be 64 Mhz
 8001e92:	8afb      	ldrh	r3, [r7, #22]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3b08      	subs	r3, #8
 8001e98:	73fb      	strb	r3, [r7, #15]

	TIM_InitStruct.TIM_Prescaler = prescaler;
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	803b      	strh	r3, [r7, #0]
	TIM_InitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	807b      	strh	r3, [r7, #2]
	TIM_InitStruct.TIM_Period = period;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	607b      	str	r3, [r7, #4]
	TIM_InitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &TIM_InitStruct);
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001eb2:	f7ff fa4d 	bl	8001350 <TIM_TimeBaseInit>
}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	044aa200 	.word	0x044aa200
 8001ec4:	000f4240 	.word	0x000f4240

08001ec8 <TimeICInit>:

void TimeICInit(){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0

	GPIO_set_AF1_PA0();
 8001ece:	f000 f854 	bl	8001f7a <GPIO_set_AF1_PA0>
	TimeBaseInit();
 8001ed2:	f7ff ffc5 	bl	8001e60 <TimeBaseInit>

	// 3. Configure TIM_ICInitStrct
	TIM_ICInitTypeDef TIM_ICInitStruct;
	TIM_ICStructInit(&TIM_ICInitStruct);
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fb1e 	bl	800151a <TIM_ICStructInit>

	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	80bb      	strh	r3, [r7, #4]
	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	80fb      	strh	r3, [r7, #6]
	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	813b      	strh	r3, [r7, #8]
	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	817b      	strh	r3, [r7, #10]
	TIM_ICInitStruct.TIM_ICFilter = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	81bb      	strh	r3, [r7, #12]

	// 5. Configure PWM input mode
	TIM_PWMIConfig(TIM2, &TIM_ICInitStruct);
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001efa:	f7ff fb27 	bl	800154c <TIM_PWMIConfig>

	// Enable both CC1 and CC2 captures
	TIM_CCxCmd(TIM2, TIM_Channel_1, TIM_CCx_Enable);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2100      	movs	r1, #0
 8001f02:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f06:	f7ff fae3 	bl	80014d0 <TIM_CCxCmd>
	TIM_CCxCmd(TIM2, TIM_Channel_2, TIM_CCx_Enable);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f12:	f7ff fadd 	bl	80014d0 <TIM_CCxCmd>

	// Select input trigger as TI1FP1
	TIM_SelectInputTrigger(TIM2, TIM_TS_TI1FP1);
 8001f16:	2150      	movs	r1, #80	@ 0x50
 8001f18:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f1c:	f7ff fc17 	bl	800174e <TIM_SelectInputTrigger>

	// Reset mode
	TIM_SelectSlaveMode(TIM2, TIM_SlaveMode_Reset);		// timer resets on every rising edge
 8001f20:	2104      	movs	r1, #4
 8001f22:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f26:	f7ff fc2e 	bl	8001786 <TIM_SelectSlaveMode>
	TIM_SelectMasterSlaveMode(TIM2, TIM_MasterSlaveMode_Enable);
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f30:	f7ff fc42 	bl	80017b8 <TIM_SelectMasterSlaveMode>

	TIM_SetCounter(TIM2, 0);  // reset the counter to start correctly
 8001f34:	2100      	movs	r1, #0
 8001f36:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f3a:	f7ff fa9b 	bl	8001474 <TIM_SetCounter>


	// 6. Enable NVIC
	uint8_t priority = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	4619      	mov	r1, r3
 8001f46:	201c      	movs	r0, #28
 8001f48:	f7ff ff60 	bl	8001e0c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f7ff ff43 	bl	8001dd8 <NVIC_EnableIRQ>

	TIM_ClearITPendingBit(TIM2, TIM_IT_CC1 | TIM_IT_CC2);
 8001f52:	2106      	movs	r1, #6
 8001f54:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f58:	f7ff fbe7 	bl	800172a <TIM_ClearITPendingBit>

	// 7. Enable corresponding interrupt to read captured value
	TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2102      	movs	r1, #2
 8001f60:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f64:	f7ff fb97 	bl	8001696 <TIM_ITConfig>

	// 8. Enable TIM counter
	TIM_Cmd(TIM2, ENABLE);
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f6e:	f7ff fa8f 	bl	8001490 <TIM_Cmd>

}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <GPIO_set_AF1_PA0>:

void GPIO_set_AF1_PA0() {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
	// Initializes the selected pins in AF mode

	// 2. Configuring GPIO PA0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);    // enable clock
 8001f80:	2101      	movs	r1, #1
 8001f82:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001f86:	f7ff f9a3 	bl	80012d0 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_StructInit(&GPIO_InitStruct);
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fef3 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001f92:	2302      	movs	r3, #2
 8001f94:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8001f96:	2301      	movs	r3, #1
 8001f98:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; //changed to NOPULL and duty works
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001faa:	f7fe fe4f 	bl	8000c4c <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_1);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb6:	f7fe ff2d 	bl	8000e14 <GPIO_PinAFConfig>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
	// Check for capture on Channel 1
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) {
 8001fca:	2102      	movs	r1, #2
 8001fcc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001fd0:	f7ff fb81 	bl	80016d6 <TIM_GetITStatus>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <TIM2_IRQHandler+0x98>
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 8001fda:	2102      	movs	r1, #2
 8001fdc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001fe0:	f7ff fba3 	bl	800172a <TIM_ClearITPendingBit>

		if (!readCapture) return;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <TIM2_IRQHandler+0xa0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d035      	beq.n	800205a <TIM2_IRQHandler+0x96>
		// Clear the interrupt readCapture
		// Read captured value for period (rising-to-rising)
		uint32_t capture1 = TIM_GetCapture1(TIM2);	// read capture1 for period
 8001fee:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ff2:	f7ff fb07 	bl	8001604 <TIM_GetCapture1>
 8001ff6:	60f8      	str	r0, [r7, #12]
		uint32_t capture2 = TIM_GetCapture2(TIM2);	// read capture2 for pulse width
 8001ff8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001ffc:	f7ff fb0e 	bl	800161c <TIM_GetCapture2>
 8002000:	60b8      	str	r0, [r7, #8]

		// --- Compute results ---
		// Timer tick period = 1 µs (1 MHz counter)
		float period_us = (float)capture1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200c:	edc7 7a01 	vstr	s15, [r7, #4]
		float high_us   = (float)capture2;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201a:	edc7 7a00 	vstr	s15, [r7]

		if (period_us > 0) {
 800201e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	dd17      	ble.n	800205c <TIM2_IRQHandler+0x98>
			freq = 1e6f / period_us;
 800202c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002068 <TIM2_IRQHandler+0xa4>
 8002030:	ed97 7a01 	vldr	s14, [r7, #4]
 8002034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <TIM2_IRQHandler+0xa8>)
 800203a:	edc3 7a00 	vstr	s15, [r3]
			duty = (high_us / period_us) * 100.0f;
 800203e:	edd7 6a00 	vldr	s13, [r7]
 8002042:	ed97 7a01 	vldr	s14, [r7, #4]
 8002046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002070 <TIM2_IRQHandler+0xac>
 800204e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <TIM2_IRQHandler+0xb0>)
 8002054:	edc3 7a00 	vstr	s15, [r3]
 8002058:	e000      	b.n	800205c <TIM2_IRQHandler+0x98>
		if (!readCapture) return;
 800205a:	bf00      	nop
		}

	}
}
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200002f0 	.word	0x200002f0
 8002068:	49742400 	.word	0x49742400
 800206c:	200002e8 	.word	0x200002e8
 8002070:	42c80000 	.word	0x42c80000
 8002074:	200002ec 	.word	0x200002ec

08002078 <joystickIC>:

void joystickIC(){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0

	static int8_t currentState = 0;  // remember last state

	int8_t nextState = readJoystick();
 800207e:	f000 f881 	bl	8002184 <readJoystick>
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]

	if ((currentState == 0x10) && !(nextState == 0x10)) {
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <joystickIC+0x4c>)
 8002088:	f993 3000 	ldrsb.w	r3, [r3]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d115      	bne.n	80020bc <joystickIC+0x44>
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b10      	cmp	r3, #16
 8002096:	d011      	beq.n	80020bc <joystickIC+0x44>
		if (readCapture == 1){
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <joystickIC+0x50>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d106      	bne.n	80020b0 <joystickIC+0x38>
			readCapture = 0;
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <joystickIC+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
			setLed('r');
 80020a8:	2072      	movs	r0, #114	@ 0x72
 80020aa:	f000 f8bf 	bl	800222c <setLed>
			readCapture = 1;
			setLed('g');
		}

	}
}
 80020ae:	e005      	b.n	80020bc <joystickIC+0x44>
			readCapture = 1;
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <joystickIC+0x50>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
			setLed('g');
 80020b6:	2067      	movs	r0, #103	@ 0x67
 80020b8:	f000 f8b8 	bl	800222c <setLed>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200002f1 	.word	0x200002f1
 80020c8:	200002f0 	.word	0x200002f0

080020cc <EXTI4_IRQHandler>:
	NVIC_Init(&NVIC_InitStructureUp);

}

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 80020d0:	2004      	movs	r0, #4
 80020d2:	f7fe fd69 	bl	8000ba8 <EXTI_GetITStatus>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
    	setLed('m');
 80020dc:	206d      	movs	r0, #109	@ 0x6d
 80020de:	f000 f8a5 	bl	800222c <setLed>

        EXTI_ClearITPendingBit(EXTI_Line4);
 80020e2:	2004      	movs	r0, #4
 80020e4:	f7fe fd98 	bl	8000c18 <EXTI_ClearITPendingBit>
    }

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 80020f2:	2101      	movs	r1, #1
 80020f4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80020f8:	f7ff f8ea 	bl	80012d0 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 80020fc:	2101      	movs	r1, #1
 80020fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002102:	f7ff f8e5 	bl	80012d0 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 8002106:	2101      	movs	r1, #1
 8002108:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800210c:	f7ff f8e0 	bl	80012d0 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8002110:	463b      	mov	r3, r7
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe30 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002118:	2300      	movs	r3, #0
 800211a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800211c:	2302      	movs	r3, #2
 800211e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8002120:	2310      	movs	r3, #16
 8002122:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8002124:	463b      	mov	r3, r7
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212c:	f7fe fd8e 	bl	8000c4c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8002130:	463b      	mov	r3, r7
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fe20 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002138:	2300      	movs	r3, #0
 800213a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800213c:	2302      	movs	r3, #2
 800213e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8002140:	2321      	movs	r3, #33	@ 0x21
 8002142:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8002144:	463b      	mov	r3, r7
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	@ (800217c <initJoystick+0x90>)
 800214a:	f7fe fd7f 	bl	8000c4c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 800214e:	463b      	mov	r3, r7
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fe11 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002156:	2300      	movs	r3, #0
 8002158:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800215a:	2302      	movs	r3, #2
 800215c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800215e:	2303      	movs	r3, #3
 8002160:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8002162:	463b      	mov	r3, r7
 8002164:	4619      	mov	r1, r3
 8002166:	4806      	ldr	r0, [pc, #24]	@ (8002180 <initJoystick+0x94>)
 8002168:	f7fe fd70 	bl	8000c4c <GPIO_Init>

	setLed('d');
 800216c:	2064      	movs	r0, #100	@ 0x64
 800216e:	f000 f85d 	bl	800222c <setLed>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	48000400 	.word	0x48000400
 8002180:	48000800 	.word	0x48000800

08002184 <readJoystick>:


int8_t readJoystick(){
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 800218e:	2110      	movs	r1, #16
 8002190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002194:	f7fe fe0a 	bl	8000dac <GPIO_ReadInputDataBit>
 8002198:	4603      	mov	r3, r0
 800219a:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 800219c:	2120      	movs	r1, #32
 800219e:	4821      	ldr	r0, [pc, #132]	@ (8002224 <readJoystick+0xa0>)
 80021a0:	f7fe fe04 	bl	8000dac <GPIO_ReadInputDataBit>
 80021a4:	4603      	mov	r3, r0
 80021a6:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 80021a8:	2101      	movs	r1, #1
 80021aa:	481e      	ldr	r0, [pc, #120]	@ (8002224 <readJoystick+0xa0>)
 80021ac:	f7fe fdfe 	bl	8000dac <GPIO_ReadInputDataBit>
 80021b0:	4603      	mov	r3, r0
 80021b2:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 80021b4:	2102      	movs	r1, #2
 80021b6:	481c      	ldr	r0, [pc, #112]	@ (8002228 <readJoystick+0xa4>)
 80021b8:	f7fe fdf8 	bl	8000dac <GPIO_ReadInputDataBit>
 80021bc:	4603      	mov	r3, r0
 80021be:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 80021c0:	2101      	movs	r1, #1
 80021c2:	4819      	ldr	r0, [pc, #100]	@ (8002228 <readJoystick+0xa4>)
 80021c4:	f7fe fdf2 	bl	8000dac <GPIO_ReadInputDataBit>
 80021c8:	4603      	mov	r3, r0
 80021ca:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 80021cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <readJoystick+0x56>
		bit = Up;
 80021d4:	79bb      	ldrb	r3, [r7, #6]
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	e01e      	b.n	8002218 <readJoystick+0x94>
	} else if (Down == 1){
 80021da:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d103      	bne.n	80021ea <readJoystick+0x66>
		bit = Down << 1;
 80021e2:	793b      	ldrb	r3, [r7, #4]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	71fb      	strb	r3, [r7, #7]
 80021e8:	e016      	b.n	8002218 <readJoystick+0x94>
	} else if (Left == 1){
 80021ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d103      	bne.n	80021fa <readJoystick+0x76>
		bit = Left << 2;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	e00e      	b.n	8002218 <readJoystick+0x94>
	} else if (Right == 1){
 80021fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d103      	bne.n	800220a <readJoystick+0x86>
		bit = Right << 3;
 8002202:	78bb      	ldrb	r3, [r7, #2]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	e006      	b.n	8002218 <readJoystick+0x94>
	} else if (Center == 1){
 800220a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <readJoystick+0x94>
		bit = Center << 4;
 8002212:	797b      	ldrb	r3, [r7, #5]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	48000400 	.word	0x48000400
 8002228:	48000800 	.word	0x48000800

0800222c <setLed>:

	// Initialize LED to off
	setLed('d');
}

void setLed(char sel) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b72      	cmp	r3, #114	@ 0x72
 800223a:	d111      	bne.n	8002260 <setLed+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800223c:	2200      	movs	r2, #0
 800223e:	2110      	movs	r1, #16
 8002240:	4852      	ldr	r0, [pc, #328]	@ (800238c <setLed+0x160>)
 8002242:	f7fe fdcf 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002246:	2201      	movs	r2, #1
 8002248:	2180      	movs	r1, #128	@ 0x80
 800224a:	4851      	ldr	r0, [pc, #324]	@ (8002390 <setLed+0x164>)
 800224c:	f7fe fdca 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800225a:	f7fe fdc3 	bl	8000de4 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 800225e:	e091      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'g') {
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b67      	cmp	r3, #103	@ 0x67
 8002264:	d111      	bne.n	800228a <setLed+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002266:	2201      	movs	r2, #1
 8002268:	2110      	movs	r1, #16
 800226a:	4848      	ldr	r0, [pc, #288]	@ (800238c <setLed+0x160>)
 800226c:	f7fe fdba 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	@ 0x80
 8002274:	4846      	ldr	r0, [pc, #280]	@ (8002390 <setLed+0x164>)
 8002276:	f7fe fdb5 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002284:	f7fe fdae 	bl	8000de4 <GPIO_WriteBit>
}
 8002288:	e07c      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'b') {
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b62      	cmp	r3, #98	@ 0x62
 800228e:	d111      	bne.n	80022b4 <setLed+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002290:	2201      	movs	r2, #1
 8002292:	2110      	movs	r1, #16
 8002294:	483d      	ldr	r0, [pc, #244]	@ (800238c <setLed+0x160>)
 8002296:	f7fe fda5 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800229a:	2201      	movs	r2, #1
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	483c      	ldr	r0, [pc, #240]	@ (8002390 <setLed+0x164>)
 80022a0:	f7fe fda0 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ae:	f7fe fd99 	bl	8000de4 <GPIO_WriteBit>
}
 80022b2:	e067      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'c') {
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b63      	cmp	r3, #99	@ 0x63
 80022b8:	d111      	bne.n	80022de <setLed+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80022ba:	2201      	movs	r2, #1
 80022bc:	2110      	movs	r1, #16
 80022be:	4833      	ldr	r0, [pc, #204]	@ (800238c <setLed+0x160>)
 80022c0:	f7fe fd90 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	@ 0x80
 80022c8:	4831      	ldr	r0, [pc, #196]	@ (8002390 <setLed+0x164>)
 80022ca:	f7fe fd8b 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d8:	f7fe fd84 	bl	8000de4 <GPIO_WriteBit>
}
 80022dc:	e052      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'm') {
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b6d      	cmp	r3, #109	@ 0x6d
 80022e2:	d111      	bne.n	8002308 <setLed+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80022e4:	2200      	movs	r2, #0
 80022e6:	2110      	movs	r1, #16
 80022e8:	4828      	ldr	r0, [pc, #160]	@ (800238c <setLed+0x160>)
 80022ea:	f7fe fd7b 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80022ee:	2201      	movs	r2, #1
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	4827      	ldr	r0, [pc, #156]	@ (8002390 <setLed+0x164>)
 80022f4:	f7fe fd76 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002302:	f7fe fd6f 	bl	8000de4 <GPIO_WriteBit>
}
 8002306:	e03d      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'y') {
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b79      	cmp	r3, #121	@ 0x79
 800230c:	d111      	bne.n	8002332 <setLed+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800230e:	2200      	movs	r2, #0
 8002310:	2110      	movs	r1, #16
 8002312:	481e      	ldr	r0, [pc, #120]	@ (800238c <setLed+0x160>)
 8002314:	f7fe fd66 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002318:	2200      	movs	r2, #0
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	481c      	ldr	r0, [pc, #112]	@ (8002390 <setLed+0x164>)
 800231e:	f7fe fd61 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800232c:	f7fe fd5a 	bl	8000de4 <GPIO_WriteBit>
}
 8002330:	e028      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'w') {
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2b77      	cmp	r3, #119	@ 0x77
 8002336:	d111      	bne.n	800235c <setLed+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002338:	2200      	movs	r2, #0
 800233a:	2110      	movs	r1, #16
 800233c:	4813      	ldr	r0, [pc, #76]	@ (800238c <setLed+0x160>)
 800233e:	f7fe fd51 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002342:	2200      	movs	r2, #0
 8002344:	2180      	movs	r1, #128	@ 0x80
 8002346:	4812      	ldr	r0, [pc, #72]	@ (8002390 <setLed+0x164>)
 8002348:	f7fe fd4c 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800234c:	2200      	movs	r2, #0
 800234e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002356:	f7fe fd45 	bl	8000de4 <GPIO_WriteBit>
}
 800235a:	e013      	b.n	8002384 <setLed+0x158>
	} else if (sel == 'd') {
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d110      	bne.n	8002384 <setLed+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002362:	2201      	movs	r2, #1
 8002364:	2110      	movs	r1, #16
 8002366:	4809      	ldr	r0, [pc, #36]	@ (800238c <setLed+0x160>)
 8002368:	f7fe fd3c 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800236c:	2201      	movs	r2, #1
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	4807      	ldr	r0, [pc, #28]	@ (8002390 <setLed+0x164>)
 8002372:	f7fe fd37 	bl	8000de4 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800237c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002380:	f7fe fd30 	bl	8000de4 <GPIO_WriteBit>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	48000400 	.word	0x48000400
 8002390:	48000800 	.word	0x48000800

08002394 <main>:

extern volatile float freq;
extern volatile float duty;
extern volatile uint8_t readCapture;

int main(void) {
 8002394:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af04      	add	r7, sp, #16
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 800239c:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80023a0:	f7ff fc00 	bl	8001ba4 <uart_init>

	TimeICInit();
 80023a4:	f7ff fd90 	bl	8001ec8 <TimeICInit>
	initJoystick();
 80023a8:	f7ff fea0 	bl	80020ec <initJoystick>

	while(1) {
		joystickIC();
 80023ac:	f7ff fe64 	bl	8002078 <joystickIC>
		if (readCapture == 1){
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <main+0x80>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d127      	bne.n	800240a <main+0x76>
			readCapture = 0;
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <main+0x80>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
			printf("period: %.1f | freq: %f | duty: %f \n", 1e6f/freq, freq, duty);
 80023c0:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <main+0x84>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800241c <main+0x88>
 80023ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023ce:	ee16 0a90 	vmov	r0, s13
 80023d2:	f7fe f8b9 	bl	8000548 <__aeabi_f2d>
 80023d6:	4680      	mov	r8, r0
 80023d8:	4689      	mov	r9, r1
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <main+0x84>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8b2 	bl	8000548 <__aeabi_f2d>
 80023e4:	4604      	mov	r4, r0
 80023e6:	460d      	mov	r5, r1
 80023e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <main+0x8c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8ab 	bl	8000548 <__aeabi_f2d>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023fa:	e9cd 4500 	strd	r4, r5, [sp]
 80023fe:	4642      	mov	r2, r8
 8002400:	464b      	mov	r3, r9
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <main+0x90>)
 8002404:	f000 ff06 	bl	8003214 <iprintf>
 8002408:	e7d0      	b.n	80023ac <main+0x18>
		}
		else{
			printf("Paused\n");
 800240a:	4807      	ldr	r0, [pc, #28]	@ (8002428 <main+0x94>)
 800240c:	f000 ff6a 	bl	80032e4 <puts>
		joystickIC();
 8002410:	e7cc      	b.n	80023ac <main+0x18>
 8002412:	bf00      	nop
 8002414:	200002f0 	.word	0x200002f0
 8002418:	200002e8 	.word	0x200002e8
 800241c:	49742400 	.word	0x49742400
 8002420:	200002ec 	.word	0x200002ec
 8002424:	08005200 	.word	0x08005200
 8002428:	08005228 	.word	0x08005228

0800242c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
	return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_kill>:

int _kill(int pid, int sig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002446:	f001 f929 	bl	800369c <__errno>
 800244a:	4603      	mov	r3, r0
 800244c:	2216      	movs	r2, #22
 800244e:	601a      	str	r2, [r3, #0]
	return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_exit>:

void _exit (int status)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ffe7 	bl	800243c <_kill>
	while (1) {}		/* Make sure we hang here */
 800246e:	bf00      	nop
 8002470:	e7fd      	b.n	800246e <_exit+0x12>

08002472 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e00a      	b.n	800249a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002484:	f3af 8000 	nop.w
 8002488:	4601      	mov	r1, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	60ba      	str	r2, [r7, #8]
 8002490:	b2ca      	uxtb	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	dbf0      	blt.n	8002484 <_read+0x12>
	}

return len;
 80024a2:	687b      	ldr	r3, [r7, #4]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_close>:
	}
	return len;
}

int _close(int file)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024d4:	605a      	str	r2, [r3, #4]
	return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_isatty>:

int _isatty(int file)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	return 1;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
	return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <SystemInit+0x84>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <SystemInit+0x84>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002528:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <SystemInit+0x88>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <SystemInit+0x88>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <SystemInit+0x88>)
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4918      	ldr	r1, [pc, #96]	@ (800259c <SystemInit+0x88>)
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <SystemInit+0x8c>)
 800253c:	4013      	ands	r3, r2
 800253e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002540:	4b16      	ldr	r3, [pc, #88]	@ (800259c <SystemInit+0x88>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a15      	ldr	r2, [pc, #84]	@ (800259c <SystemInit+0x88>)
 8002546:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800254a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <SystemInit+0x88>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <SystemInit+0x88>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <SystemInit+0x88>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a0e      	ldr	r2, [pc, #56]	@ (800259c <SystemInit+0x88>)
 8002562:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8002566:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <SystemInit+0x88>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <SystemInit+0x88>)
 800256e:	f023 030f 	bic.w	r3, r3, #15
 8002572:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <SystemInit+0x88>)
 8002576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002578:	4908      	ldr	r1, [pc, #32]	@ (800259c <SystemInit+0x88>)
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <SystemInit+0x90>)
 800257c:	4013      	ands	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <SystemInit+0x88>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002586:	f000 f80f 	bl	80025a8 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800258a:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <SystemInit+0x84>)
 800258c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002590:	609a      	str	r2, [r3, #8]
#endif  
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	40021000 	.word	0x40021000
 80025a0:	f87fc00c 	.word	0xf87fc00c
 80025a4:	ff00fccc 	.word	0xff00fccc

080025a8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80025ac:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <SetSysClock+0x8c>)
 80025ae:	2212      	movs	r2, #18
 80025b0:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80025b2:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <SetSysClock+0x90>)
 80025b4:	4a20      	ldr	r2, [pc, #128]	@ (8002638 <SetSysClock+0x90>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <SetSysClock+0x90>)
 80025bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002638 <SetSysClock+0x90>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80025c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <SetSysClock+0x90>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <SetSysClock+0x90>)
 80025c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025cc:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <SetSysClock+0x90>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a19      	ldr	r2, [pc, #100]	@ (8002638 <SetSysClock+0x90>)
 80025d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80025d8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80025da:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <SetSysClock+0x90>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a16      	ldr	r2, [pc, #88]	@ (8002638 <SetSysClock+0x90>)
 80025e0:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 80025e4:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <SetSysClock+0x90>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <SetSysClock+0x90>)
 80025ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025f0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80025f2:	bf00      	nop
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <SetSysClock+0x90>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f9      	beq.n	80025f4 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <SetSysClock+0x90>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a0c      	ldr	r2, [pc, #48]	@ (8002638 <SetSysClock+0x90>)
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <SetSysClock+0x90>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <SetSysClock+0x90>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002618:	bf00      	nop
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <SetSysClock+0x90>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d1f9      	bne.n	800261a <SetSysClock+0x72>
  {
  }
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40022000 	.word	0x40022000
 8002638:	40021000 	.word	0x40021000

0800263c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800263c:	480d      	ldr	r0, [pc, #52]	@ (8002674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800263e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480d      	ldr	r0, [pc, #52]	@ (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490e      	ldr	r1, [pc, #56]	@ (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0e      	ldr	r2, [pc, #56]	@ (8002680 <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0b      	ldr	r4, [pc, #44]	@ (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002666:	f7ff ff55 	bl	8002514 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800266a:	f001 f81d 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266e:	f7ff fe91 	bl	8002394 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   r0, =_estack
 8002674:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002680:	080055dc 	.word	0x080055dc
  ldr r2, =_sbss
 8002684:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002688:	20000444 	.word	0x20000444

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>

0800268e <__cvt>:
 800268e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002692:	ec57 6b10 	vmov	r6, r7, d0
 8002696:	2f00      	cmp	r7, #0
 8002698:	460c      	mov	r4, r1
 800269a:	4619      	mov	r1, r3
 800269c:	463b      	mov	r3, r7
 800269e:	bfbb      	ittet	lt
 80026a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80026a4:	461f      	movlt	r7, r3
 80026a6:	2300      	movge	r3, #0
 80026a8:	232d      	movlt	r3, #45	@ 0x2d
 80026aa:	700b      	strb	r3, [r1, #0]
 80026ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80026ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80026b2:	4691      	mov	r9, r2
 80026b4:	f023 0820 	bic.w	r8, r3, #32
 80026b8:	bfbc      	itt	lt
 80026ba:	4632      	movlt	r2, r6
 80026bc:	4616      	movlt	r6, r2
 80026be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80026c2:	d005      	beq.n	80026d0 <__cvt+0x42>
 80026c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80026c8:	d100      	bne.n	80026cc <__cvt+0x3e>
 80026ca:	3401      	adds	r4, #1
 80026cc:	2102      	movs	r1, #2
 80026ce:	e000      	b.n	80026d2 <__cvt+0x44>
 80026d0:	2103      	movs	r1, #3
 80026d2:	ab03      	add	r3, sp, #12
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	ab02      	add	r3, sp, #8
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	ec47 6b10 	vmov	d0, r6, r7
 80026de:	4653      	mov	r3, sl
 80026e0:	4622      	mov	r2, r4
 80026e2:	f001 f8a1 	bl	8003828 <_dtoa_r>
 80026e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80026ea:	4605      	mov	r5, r0
 80026ec:	d119      	bne.n	8002722 <__cvt+0x94>
 80026ee:	f019 0f01 	tst.w	r9, #1
 80026f2:	d00e      	beq.n	8002712 <__cvt+0x84>
 80026f4:	eb00 0904 	add.w	r9, r0, r4
 80026f8:	2200      	movs	r2, #0
 80026fa:	2300      	movs	r3, #0
 80026fc:	4630      	mov	r0, r6
 80026fe:	4639      	mov	r1, r7
 8002700:	f7fe f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8002704:	b108      	cbz	r0, 800270a <__cvt+0x7c>
 8002706:	f8cd 900c 	str.w	r9, [sp, #12]
 800270a:	2230      	movs	r2, #48	@ 0x30
 800270c:	9b03      	ldr	r3, [sp, #12]
 800270e:	454b      	cmp	r3, r9
 8002710:	d31e      	bcc.n	8002750 <__cvt+0xc2>
 8002712:	9b03      	ldr	r3, [sp, #12]
 8002714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002716:	1b5b      	subs	r3, r3, r5
 8002718:	4628      	mov	r0, r5
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	b004      	add	sp, #16
 800271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002722:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002726:	eb00 0904 	add.w	r9, r0, r4
 800272a:	d1e5      	bne.n	80026f8 <__cvt+0x6a>
 800272c:	7803      	ldrb	r3, [r0, #0]
 800272e:	2b30      	cmp	r3, #48	@ 0x30
 8002730:	d10a      	bne.n	8002748 <__cvt+0xba>
 8002732:	2200      	movs	r2, #0
 8002734:	2300      	movs	r3, #0
 8002736:	4630      	mov	r0, r6
 8002738:	4639      	mov	r1, r7
 800273a:	f7fe f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800273e:	b918      	cbnz	r0, 8002748 <__cvt+0xba>
 8002740:	f1c4 0401 	rsb	r4, r4, #1
 8002744:	f8ca 4000 	str.w	r4, [sl]
 8002748:	f8da 3000 	ldr.w	r3, [sl]
 800274c:	4499      	add	r9, r3
 800274e:	e7d3      	b.n	80026f8 <__cvt+0x6a>
 8002750:	1c59      	adds	r1, r3, #1
 8002752:	9103      	str	r1, [sp, #12]
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e7d9      	b.n	800270c <__cvt+0x7e>

08002758 <__exponent>:
 8002758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800275a:	2900      	cmp	r1, #0
 800275c:	bfba      	itte	lt
 800275e:	4249      	neglt	r1, r1
 8002760:	232d      	movlt	r3, #45	@ 0x2d
 8002762:	232b      	movge	r3, #43	@ 0x2b
 8002764:	2909      	cmp	r1, #9
 8002766:	7002      	strb	r2, [r0, #0]
 8002768:	7043      	strb	r3, [r0, #1]
 800276a:	dd29      	ble.n	80027c0 <__exponent+0x68>
 800276c:	f10d 0307 	add.w	r3, sp, #7
 8002770:	461d      	mov	r5, r3
 8002772:	270a      	movs	r7, #10
 8002774:	461a      	mov	r2, r3
 8002776:	fbb1 f6f7 	udiv	r6, r1, r7
 800277a:	fb07 1416 	mls	r4, r7, r6, r1
 800277e:	3430      	adds	r4, #48	@ 0x30
 8002780:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002784:	460c      	mov	r4, r1
 8002786:	2c63      	cmp	r4, #99	@ 0x63
 8002788:	f103 33ff 	add.w	r3, r3, #4294967295
 800278c:	4631      	mov	r1, r6
 800278e:	dcf1      	bgt.n	8002774 <__exponent+0x1c>
 8002790:	3130      	adds	r1, #48	@ 0x30
 8002792:	1e94      	subs	r4, r2, #2
 8002794:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002798:	1c41      	adds	r1, r0, #1
 800279a:	4623      	mov	r3, r4
 800279c:	42ab      	cmp	r3, r5
 800279e:	d30a      	bcc.n	80027b6 <__exponent+0x5e>
 80027a0:	f10d 0309 	add.w	r3, sp, #9
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	42ac      	cmp	r4, r5
 80027a8:	bf88      	it	hi
 80027aa:	2300      	movhi	r3, #0
 80027ac:	3302      	adds	r3, #2
 80027ae:	4403      	add	r3, r0
 80027b0:	1a18      	subs	r0, r3, r0
 80027b2:	b003      	add	sp, #12
 80027b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80027ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80027be:	e7ed      	b.n	800279c <__exponent+0x44>
 80027c0:	2330      	movs	r3, #48	@ 0x30
 80027c2:	3130      	adds	r1, #48	@ 0x30
 80027c4:	7083      	strb	r3, [r0, #2]
 80027c6:	70c1      	strb	r1, [r0, #3]
 80027c8:	1d03      	adds	r3, r0, #4
 80027ca:	e7f1      	b.n	80027b0 <__exponent+0x58>

080027cc <_printf_float>:
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	b08d      	sub	sp, #52	@ 0x34
 80027d2:	460c      	mov	r4, r1
 80027d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80027d8:	4616      	mov	r6, r2
 80027da:	461f      	mov	r7, r3
 80027dc:	4605      	mov	r5, r0
 80027de:	f000 ff25 	bl	800362c <_localeconv_r>
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	9304      	str	r3, [sp, #16]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fd42 	bl	8000270 <strlen>
 80027ec:	2300      	movs	r3, #0
 80027ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80027f0:	f8d8 3000 	ldr.w	r3, [r8]
 80027f4:	9005      	str	r0, [sp, #20]
 80027f6:	3307      	adds	r3, #7
 80027f8:	f023 0307 	bic.w	r3, r3, #7
 80027fc:	f103 0208 	add.w	r2, r3, #8
 8002800:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002804:	f8d4 b000 	ldr.w	fp, [r4]
 8002808:	f8c8 2000 	str.w	r2, [r8]
 800280c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002810:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002814:	9307      	str	r3, [sp, #28]
 8002816:	f8cd 8018 	str.w	r8, [sp, #24]
 800281a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800281e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002822:	4b9c      	ldr	r3, [pc, #624]	@ (8002a94 <_printf_float+0x2c8>)
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	f7fe f980 	bl	8000b2c <__aeabi_dcmpun>
 800282c:	bb70      	cbnz	r0, 800288c <_printf_float+0xc0>
 800282e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002832:	4b98      	ldr	r3, [pc, #608]	@ (8002a94 <_printf_float+0x2c8>)
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	f7fe f95a 	bl	8000af0 <__aeabi_dcmple>
 800283c:	bb30      	cbnz	r0, 800288c <_printf_float+0xc0>
 800283e:	2200      	movs	r2, #0
 8002840:	2300      	movs	r3, #0
 8002842:	4640      	mov	r0, r8
 8002844:	4649      	mov	r1, r9
 8002846:	f7fe f949 	bl	8000adc <__aeabi_dcmplt>
 800284a:	b110      	cbz	r0, 8002852 <_printf_float+0x86>
 800284c:	232d      	movs	r3, #45	@ 0x2d
 800284e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002852:	4a91      	ldr	r2, [pc, #580]	@ (8002a98 <_printf_float+0x2cc>)
 8002854:	4b91      	ldr	r3, [pc, #580]	@ (8002a9c <_printf_float+0x2d0>)
 8002856:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800285a:	bf8c      	ite	hi
 800285c:	4690      	movhi	r8, r2
 800285e:	4698      	movls	r8, r3
 8002860:	2303      	movs	r3, #3
 8002862:	6123      	str	r3, [r4, #16]
 8002864:	f02b 0304 	bic.w	r3, fp, #4
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	f04f 0900 	mov.w	r9, #0
 800286e:	9700      	str	r7, [sp, #0]
 8002870:	4633      	mov	r3, r6
 8002872:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002874:	4621      	mov	r1, r4
 8002876:	4628      	mov	r0, r5
 8002878:	f000 f9d2 	bl	8002c20 <_printf_common>
 800287c:	3001      	adds	r0, #1
 800287e:	f040 808d 	bne.w	800299c <_printf_float+0x1d0>
 8002882:	f04f 30ff 	mov.w	r0, #4294967295
 8002886:	b00d      	add	sp, #52	@ 0x34
 8002888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288c:	4642      	mov	r2, r8
 800288e:	464b      	mov	r3, r9
 8002890:	4640      	mov	r0, r8
 8002892:	4649      	mov	r1, r9
 8002894:	f7fe f94a 	bl	8000b2c <__aeabi_dcmpun>
 8002898:	b140      	cbz	r0, 80028ac <_printf_float+0xe0>
 800289a:	464b      	mov	r3, r9
 800289c:	2b00      	cmp	r3, #0
 800289e:	bfbc      	itt	lt
 80028a0:	232d      	movlt	r3, #45	@ 0x2d
 80028a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80028a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa0 <_printf_float+0x2d4>)
 80028a8:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa4 <_printf_float+0x2d8>)
 80028aa:	e7d4      	b.n	8002856 <_printf_float+0x8a>
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80028b2:	9206      	str	r2, [sp, #24]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	d13b      	bne.n	8002930 <_printf_float+0x164>
 80028b8:	2306      	movs	r3, #6
 80028ba:	6063      	str	r3, [r4, #4]
 80028bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80028c0:	2300      	movs	r3, #0
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	9303      	str	r3, [sp, #12]
 80028c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80028c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80028cc:	ab09      	add	r3, sp, #36	@ 0x24
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	6861      	ldr	r1, [r4, #4]
 80028d2:	ec49 8b10 	vmov	d0, r8, r9
 80028d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80028da:	4628      	mov	r0, r5
 80028dc:	f7ff fed7 	bl	800268e <__cvt>
 80028e0:	9b06      	ldr	r3, [sp, #24]
 80028e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80028e4:	2b47      	cmp	r3, #71	@ 0x47
 80028e6:	4680      	mov	r8, r0
 80028e8:	d129      	bne.n	800293e <_printf_float+0x172>
 80028ea:	1cc8      	adds	r0, r1, #3
 80028ec:	db02      	blt.n	80028f4 <_printf_float+0x128>
 80028ee:	6863      	ldr	r3, [r4, #4]
 80028f0:	4299      	cmp	r1, r3
 80028f2:	dd41      	ble.n	8002978 <_printf_float+0x1ac>
 80028f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80028f8:	fa5f fa8a 	uxtb.w	sl, sl
 80028fc:	3901      	subs	r1, #1
 80028fe:	4652      	mov	r2, sl
 8002900:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002904:	9109      	str	r1, [sp, #36]	@ 0x24
 8002906:	f7ff ff27 	bl	8002758 <__exponent>
 800290a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800290c:	1813      	adds	r3, r2, r0
 800290e:	2a01      	cmp	r2, #1
 8002910:	4681      	mov	r9, r0
 8002912:	6123      	str	r3, [r4, #16]
 8002914:	dc02      	bgt.n	800291c <_printf_float+0x150>
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	07d2      	lsls	r2, r2, #31
 800291a:	d501      	bpl.n	8002920 <_printf_float+0x154>
 800291c:	3301      	adds	r3, #1
 800291e:	6123      	str	r3, [r4, #16]
 8002920:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0a2      	beq.n	800286e <_printf_float+0xa2>
 8002928:	232d      	movs	r3, #45	@ 0x2d
 800292a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800292e:	e79e      	b.n	800286e <_printf_float+0xa2>
 8002930:	9a06      	ldr	r2, [sp, #24]
 8002932:	2a47      	cmp	r2, #71	@ 0x47
 8002934:	d1c2      	bne.n	80028bc <_printf_float+0xf0>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1c0      	bne.n	80028bc <_printf_float+0xf0>
 800293a:	2301      	movs	r3, #1
 800293c:	e7bd      	b.n	80028ba <_printf_float+0xee>
 800293e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002942:	d9db      	bls.n	80028fc <_printf_float+0x130>
 8002944:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002948:	d118      	bne.n	800297c <_printf_float+0x1b0>
 800294a:	2900      	cmp	r1, #0
 800294c:	6863      	ldr	r3, [r4, #4]
 800294e:	dd0b      	ble.n	8002968 <_printf_float+0x19c>
 8002950:	6121      	str	r1, [r4, #16]
 8002952:	b913      	cbnz	r3, 800295a <_printf_float+0x18e>
 8002954:	6822      	ldr	r2, [r4, #0]
 8002956:	07d0      	lsls	r0, r2, #31
 8002958:	d502      	bpl.n	8002960 <_printf_float+0x194>
 800295a:	3301      	adds	r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	6123      	str	r3, [r4, #16]
 8002960:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002962:	f04f 0900 	mov.w	r9, #0
 8002966:	e7db      	b.n	8002920 <_printf_float+0x154>
 8002968:	b913      	cbnz	r3, 8002970 <_printf_float+0x1a4>
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	07d2      	lsls	r2, r2, #31
 800296e:	d501      	bpl.n	8002974 <_printf_float+0x1a8>
 8002970:	3302      	adds	r3, #2
 8002972:	e7f4      	b.n	800295e <_printf_float+0x192>
 8002974:	2301      	movs	r3, #1
 8002976:	e7f2      	b.n	800295e <_printf_float+0x192>
 8002978:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800297c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800297e:	4299      	cmp	r1, r3
 8002980:	db05      	blt.n	800298e <_printf_float+0x1c2>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	6121      	str	r1, [r4, #16]
 8002986:	07d8      	lsls	r0, r3, #31
 8002988:	d5ea      	bpl.n	8002960 <_printf_float+0x194>
 800298a:	1c4b      	adds	r3, r1, #1
 800298c:	e7e7      	b.n	800295e <_printf_float+0x192>
 800298e:	2900      	cmp	r1, #0
 8002990:	bfd4      	ite	le
 8002992:	f1c1 0202 	rsble	r2, r1, #2
 8002996:	2201      	movgt	r2, #1
 8002998:	4413      	add	r3, r2
 800299a:	e7e0      	b.n	800295e <_printf_float+0x192>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	055a      	lsls	r2, r3, #21
 80029a0:	d407      	bmi.n	80029b2 <_printf_float+0x1e6>
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	4642      	mov	r2, r8
 80029a6:	4631      	mov	r1, r6
 80029a8:	4628      	mov	r0, r5
 80029aa:	47b8      	blx	r7
 80029ac:	3001      	adds	r0, #1
 80029ae:	d12b      	bne.n	8002a08 <_printf_float+0x23c>
 80029b0:	e767      	b.n	8002882 <_printf_float+0xb6>
 80029b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80029b6:	f240 80dd 	bls.w	8002b74 <_printf_float+0x3a8>
 80029ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80029be:	2200      	movs	r2, #0
 80029c0:	2300      	movs	r3, #0
 80029c2:	f7fe f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d033      	beq.n	8002a32 <_printf_float+0x266>
 80029ca:	4a37      	ldr	r2, [pc, #220]	@ (8002aa8 <_printf_float+0x2dc>)
 80029cc:	2301      	movs	r3, #1
 80029ce:	4631      	mov	r1, r6
 80029d0:	4628      	mov	r0, r5
 80029d2:	47b8      	blx	r7
 80029d4:	3001      	adds	r0, #1
 80029d6:	f43f af54 	beq.w	8002882 <_printf_float+0xb6>
 80029da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80029de:	4543      	cmp	r3, r8
 80029e0:	db02      	blt.n	80029e8 <_printf_float+0x21c>
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	07d8      	lsls	r0, r3, #31
 80029e6:	d50f      	bpl.n	8002a08 <_printf_float+0x23c>
 80029e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80029ec:	4631      	mov	r1, r6
 80029ee:	4628      	mov	r0, r5
 80029f0:	47b8      	blx	r7
 80029f2:	3001      	adds	r0, #1
 80029f4:	f43f af45 	beq.w	8002882 <_printf_float+0xb6>
 80029f8:	f04f 0900 	mov.w	r9, #0
 80029fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8002a00:	f104 0a1a 	add.w	sl, r4, #26
 8002a04:	45c8      	cmp	r8, r9
 8002a06:	dc09      	bgt.n	8002a1c <_printf_float+0x250>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	079b      	lsls	r3, r3, #30
 8002a0c:	f100 8103 	bmi.w	8002c16 <_printf_float+0x44a>
 8002a10:	68e0      	ldr	r0, [r4, #12]
 8002a12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002a14:	4298      	cmp	r0, r3
 8002a16:	bfb8      	it	lt
 8002a18:	4618      	movlt	r0, r3
 8002a1a:	e734      	b.n	8002886 <_printf_float+0xba>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	4652      	mov	r2, sl
 8002a20:	4631      	mov	r1, r6
 8002a22:	4628      	mov	r0, r5
 8002a24:	47b8      	blx	r7
 8002a26:	3001      	adds	r0, #1
 8002a28:	f43f af2b 	beq.w	8002882 <_printf_float+0xb6>
 8002a2c:	f109 0901 	add.w	r9, r9, #1
 8002a30:	e7e8      	b.n	8002a04 <_printf_float+0x238>
 8002a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dc39      	bgt.n	8002aac <_printf_float+0x2e0>
 8002a38:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa8 <_printf_float+0x2dc>)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4628      	mov	r0, r5
 8002a40:	47b8      	blx	r7
 8002a42:	3001      	adds	r0, #1
 8002a44:	f43f af1d 	beq.w	8002882 <_printf_float+0xb6>
 8002a48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002a4c:	ea59 0303 	orrs.w	r3, r9, r3
 8002a50:	d102      	bne.n	8002a58 <_printf_float+0x28c>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	07d9      	lsls	r1, r3, #31
 8002a56:	d5d7      	bpl.n	8002a08 <_printf_float+0x23c>
 8002a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a5c:	4631      	mov	r1, r6
 8002a5e:	4628      	mov	r0, r5
 8002a60:	47b8      	blx	r7
 8002a62:	3001      	adds	r0, #1
 8002a64:	f43f af0d 	beq.w	8002882 <_printf_float+0xb6>
 8002a68:	f04f 0a00 	mov.w	sl, #0
 8002a6c:	f104 0b1a 	add.w	fp, r4, #26
 8002a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a72:	425b      	negs	r3, r3
 8002a74:	4553      	cmp	r3, sl
 8002a76:	dc01      	bgt.n	8002a7c <_printf_float+0x2b0>
 8002a78:	464b      	mov	r3, r9
 8002a7a:	e793      	b.n	80029a4 <_printf_float+0x1d8>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	465a      	mov	r2, fp
 8002a80:	4631      	mov	r1, r6
 8002a82:	4628      	mov	r0, r5
 8002a84:	47b8      	blx	r7
 8002a86:	3001      	adds	r0, #1
 8002a88:	f43f aefb 	beq.w	8002882 <_printf_float+0xb6>
 8002a8c:	f10a 0a01 	add.w	sl, sl, #1
 8002a90:	e7ee      	b.n	8002a70 <_printf_float+0x2a4>
 8002a92:	bf00      	nop
 8002a94:	7fefffff 	.word	0x7fefffff
 8002a98:	0800525e 	.word	0x0800525e
 8002a9c:	0800525a 	.word	0x0800525a
 8002aa0:	08005266 	.word	0x08005266
 8002aa4:	08005262 	.word	0x08005262
 8002aa8:	0800526a 	.word	0x0800526a
 8002aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002aae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002ab2:	4553      	cmp	r3, sl
 8002ab4:	bfa8      	it	ge
 8002ab6:	4653      	movge	r3, sl
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	4699      	mov	r9, r3
 8002abc:	dc36      	bgt.n	8002b2c <_printf_float+0x360>
 8002abe:	f04f 0b00 	mov.w	fp, #0
 8002ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ac6:	f104 021a 	add.w	r2, r4, #26
 8002aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002acc:	9306      	str	r3, [sp, #24]
 8002ace:	eba3 0309 	sub.w	r3, r3, r9
 8002ad2:	455b      	cmp	r3, fp
 8002ad4:	dc31      	bgt.n	8002b3a <_printf_float+0x36e>
 8002ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ad8:	459a      	cmp	sl, r3
 8002ada:	dc3a      	bgt.n	8002b52 <_printf_float+0x386>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	07da      	lsls	r2, r3, #31
 8002ae0:	d437      	bmi.n	8002b52 <_printf_float+0x386>
 8002ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ae4:	ebaa 0903 	sub.w	r9, sl, r3
 8002ae8:	9b06      	ldr	r3, [sp, #24]
 8002aea:	ebaa 0303 	sub.w	r3, sl, r3
 8002aee:	4599      	cmp	r9, r3
 8002af0:	bfa8      	it	ge
 8002af2:	4699      	movge	r9, r3
 8002af4:	f1b9 0f00 	cmp.w	r9, #0
 8002af8:	dc33      	bgt.n	8002b62 <_printf_float+0x396>
 8002afa:	f04f 0800 	mov.w	r8, #0
 8002afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b02:	f104 0b1a 	add.w	fp, r4, #26
 8002b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b08:	ebaa 0303 	sub.w	r3, sl, r3
 8002b0c:	eba3 0309 	sub.w	r3, r3, r9
 8002b10:	4543      	cmp	r3, r8
 8002b12:	f77f af79 	ble.w	8002a08 <_printf_float+0x23c>
 8002b16:	2301      	movs	r3, #1
 8002b18:	465a      	mov	r2, fp
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	47b8      	blx	r7
 8002b20:	3001      	adds	r0, #1
 8002b22:	f43f aeae 	beq.w	8002882 <_printf_float+0xb6>
 8002b26:	f108 0801 	add.w	r8, r8, #1
 8002b2a:	e7ec      	b.n	8002b06 <_printf_float+0x33a>
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	4631      	mov	r1, r6
 8002b30:	4628      	mov	r0, r5
 8002b32:	47b8      	blx	r7
 8002b34:	3001      	adds	r0, #1
 8002b36:	d1c2      	bne.n	8002abe <_printf_float+0x2f2>
 8002b38:	e6a3      	b.n	8002882 <_printf_float+0xb6>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4628      	mov	r0, r5
 8002b40:	9206      	str	r2, [sp, #24]
 8002b42:	47b8      	blx	r7
 8002b44:	3001      	adds	r0, #1
 8002b46:	f43f ae9c 	beq.w	8002882 <_printf_float+0xb6>
 8002b4a:	9a06      	ldr	r2, [sp, #24]
 8002b4c:	f10b 0b01 	add.w	fp, fp, #1
 8002b50:	e7bb      	b.n	8002aca <_printf_float+0x2fe>
 8002b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b56:	4631      	mov	r1, r6
 8002b58:	4628      	mov	r0, r5
 8002b5a:	47b8      	blx	r7
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d1c0      	bne.n	8002ae2 <_printf_float+0x316>
 8002b60:	e68f      	b.n	8002882 <_printf_float+0xb6>
 8002b62:	9a06      	ldr	r2, [sp, #24]
 8002b64:	464b      	mov	r3, r9
 8002b66:	4442      	add	r2, r8
 8002b68:	4631      	mov	r1, r6
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	47b8      	blx	r7
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d1c3      	bne.n	8002afa <_printf_float+0x32e>
 8002b72:	e686      	b.n	8002882 <_printf_float+0xb6>
 8002b74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002b78:	f1ba 0f01 	cmp.w	sl, #1
 8002b7c:	dc01      	bgt.n	8002b82 <_printf_float+0x3b6>
 8002b7e:	07db      	lsls	r3, r3, #31
 8002b80:	d536      	bpl.n	8002bf0 <_printf_float+0x424>
 8002b82:	2301      	movs	r3, #1
 8002b84:	4642      	mov	r2, r8
 8002b86:	4631      	mov	r1, r6
 8002b88:	4628      	mov	r0, r5
 8002b8a:	47b8      	blx	r7
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	f43f ae78 	beq.w	8002882 <_printf_float+0xb6>
 8002b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b96:	4631      	mov	r1, r6
 8002b98:	4628      	mov	r0, r5
 8002b9a:	47b8      	blx	r7
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	f43f ae70 	beq.w	8002882 <_printf_float+0xb6>
 8002ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002bae:	f7fd ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002bb2:	b9c0      	cbnz	r0, 8002be6 <_printf_float+0x41a>
 8002bb4:	4653      	mov	r3, sl
 8002bb6:	f108 0201 	add.w	r2, r8, #1
 8002bba:	4631      	mov	r1, r6
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	47b8      	blx	r7
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	d10c      	bne.n	8002bde <_printf_float+0x412>
 8002bc4:	e65d      	b.n	8002882 <_printf_float+0xb6>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	465a      	mov	r2, fp
 8002bca:	4631      	mov	r1, r6
 8002bcc:	4628      	mov	r0, r5
 8002bce:	47b8      	blx	r7
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	f43f ae56 	beq.w	8002882 <_printf_float+0xb6>
 8002bd6:	f108 0801 	add.w	r8, r8, #1
 8002bda:	45d0      	cmp	r8, sl
 8002bdc:	dbf3      	blt.n	8002bc6 <_printf_float+0x3fa>
 8002bde:	464b      	mov	r3, r9
 8002be0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002be4:	e6df      	b.n	80029a6 <_printf_float+0x1da>
 8002be6:	f04f 0800 	mov.w	r8, #0
 8002bea:	f104 0b1a 	add.w	fp, r4, #26
 8002bee:	e7f4      	b.n	8002bda <_printf_float+0x40e>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4642      	mov	r2, r8
 8002bf4:	e7e1      	b.n	8002bba <_printf_float+0x3ee>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	464a      	mov	r2, r9
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	47b8      	blx	r7
 8002c00:	3001      	adds	r0, #1
 8002c02:	f43f ae3e 	beq.w	8002882 <_printf_float+0xb6>
 8002c06:	f108 0801 	add.w	r8, r8, #1
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	4543      	cmp	r3, r8
 8002c12:	dcf0      	bgt.n	8002bf6 <_printf_float+0x42a>
 8002c14:	e6fc      	b.n	8002a10 <_printf_float+0x244>
 8002c16:	f04f 0800 	mov.w	r8, #0
 8002c1a:	f104 0919 	add.w	r9, r4, #25
 8002c1e:	e7f4      	b.n	8002c0a <_printf_float+0x43e>

08002c20 <_printf_common>:
 8002c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	4616      	mov	r6, r2
 8002c26:	4698      	mov	r8, r3
 8002c28:	688a      	ldr	r2, [r1, #8]
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bfb8      	it	lt
 8002c34:	4613      	movlt	r3, r2
 8002c36:	6033      	str	r3, [r6, #0]
 8002c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	b10a      	cbz	r2, 8002c46 <_printf_common+0x26>
 8002c42:	3301      	adds	r3, #1
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	0699      	lsls	r1, r3, #26
 8002c4a:	bf42      	ittt	mi
 8002c4c:	6833      	ldrmi	r3, [r6, #0]
 8002c4e:	3302      	addmi	r3, #2
 8002c50:	6033      	strmi	r3, [r6, #0]
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f015 0506 	ands.w	r5, r5, #6
 8002c58:	d106      	bne.n	8002c68 <_printf_common+0x48>
 8002c5a:	f104 0a19 	add.w	sl, r4, #25
 8002c5e:	68e3      	ldr	r3, [r4, #12]
 8002c60:	6832      	ldr	r2, [r6, #0]
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	42ab      	cmp	r3, r5
 8002c66:	dc26      	bgt.n	8002cb6 <_printf_common+0x96>
 8002c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c6c:	6822      	ldr	r2, [r4, #0]
 8002c6e:	3b00      	subs	r3, #0
 8002c70:	bf18      	it	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	0692      	lsls	r2, r2, #26
 8002c76:	d42b      	bmi.n	8002cd0 <_printf_common+0xb0>
 8002c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	4638      	mov	r0, r7
 8002c80:	47c8      	blx	r9
 8002c82:	3001      	adds	r0, #1
 8002c84:	d01e      	beq.n	8002cc4 <_printf_common+0xa4>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	6922      	ldr	r2, [r4, #16]
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf02      	ittt	eq
 8002c92:	68e5      	ldreq	r5, [r4, #12]
 8002c94:	6833      	ldreq	r3, [r6, #0]
 8002c96:	1aed      	subeq	r5, r5, r3
 8002c98:	68a3      	ldr	r3, [r4, #8]
 8002c9a:	bf0c      	ite	eq
 8002c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ca0:	2500      	movne	r5, #0
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	bfc4      	itt	gt
 8002ca6:	1a9b      	subgt	r3, r3, r2
 8002ca8:	18ed      	addgt	r5, r5, r3
 8002caa:	2600      	movs	r6, #0
 8002cac:	341a      	adds	r4, #26
 8002cae:	42b5      	cmp	r5, r6
 8002cb0:	d11a      	bne.n	8002ce8 <_printf_common+0xc8>
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e008      	b.n	8002cc8 <_printf_common+0xa8>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4652      	mov	r2, sl
 8002cba:	4641      	mov	r1, r8
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	47c8      	blx	r9
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d103      	bne.n	8002ccc <_printf_common+0xac>
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ccc:	3501      	adds	r5, #1
 8002cce:	e7c6      	b.n	8002c5e <_printf_common+0x3e>
 8002cd0:	18e1      	adds	r1, r4, r3
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	2030      	movs	r0, #48	@ 0x30
 8002cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cda:	4422      	add	r2, r4
 8002cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	e7c7      	b.n	8002c78 <_printf_common+0x58>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4622      	mov	r2, r4
 8002cec:	4641      	mov	r1, r8
 8002cee:	4638      	mov	r0, r7
 8002cf0:	47c8      	blx	r9
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d0e6      	beq.n	8002cc4 <_printf_common+0xa4>
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7d9      	b.n	8002cae <_printf_common+0x8e>
	...

08002cfc <_printf_i>:
 8002cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d00:	7e0f      	ldrb	r7, [r1, #24]
 8002d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d04:	2f78      	cmp	r7, #120	@ 0x78
 8002d06:	4691      	mov	r9, r2
 8002d08:	4680      	mov	r8, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d12:	d807      	bhi.n	8002d24 <_printf_i+0x28>
 8002d14:	2f62      	cmp	r7, #98	@ 0x62
 8002d16:	d80a      	bhi.n	8002d2e <_printf_i+0x32>
 8002d18:	2f00      	cmp	r7, #0
 8002d1a:	f000 80d1 	beq.w	8002ec0 <_printf_i+0x1c4>
 8002d1e:	2f58      	cmp	r7, #88	@ 0x58
 8002d20:	f000 80b8 	beq.w	8002e94 <_printf_i+0x198>
 8002d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d2c:	e03a      	b.n	8002da4 <_printf_i+0xa8>
 8002d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d32:	2b15      	cmp	r3, #21
 8002d34:	d8f6      	bhi.n	8002d24 <_printf_i+0x28>
 8002d36:	a101      	add	r1, pc, #4	@ (adr r1, 8002d3c <_printf_i+0x40>)
 8002d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d3c:	08002d95 	.word	0x08002d95
 8002d40:	08002da9 	.word	0x08002da9
 8002d44:	08002d25 	.word	0x08002d25
 8002d48:	08002d25 	.word	0x08002d25
 8002d4c:	08002d25 	.word	0x08002d25
 8002d50:	08002d25 	.word	0x08002d25
 8002d54:	08002da9 	.word	0x08002da9
 8002d58:	08002d25 	.word	0x08002d25
 8002d5c:	08002d25 	.word	0x08002d25
 8002d60:	08002d25 	.word	0x08002d25
 8002d64:	08002d25 	.word	0x08002d25
 8002d68:	08002ea7 	.word	0x08002ea7
 8002d6c:	08002dd3 	.word	0x08002dd3
 8002d70:	08002e61 	.word	0x08002e61
 8002d74:	08002d25 	.word	0x08002d25
 8002d78:	08002d25 	.word	0x08002d25
 8002d7c:	08002ec9 	.word	0x08002ec9
 8002d80:	08002d25 	.word	0x08002d25
 8002d84:	08002dd3 	.word	0x08002dd3
 8002d88:	08002d25 	.word	0x08002d25
 8002d8c:	08002d25 	.word	0x08002d25
 8002d90:	08002e69 	.word	0x08002e69
 8002d94:	6833      	ldr	r3, [r6, #0]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6032      	str	r2, [r6, #0]
 8002d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002da4:	2301      	movs	r3, #1
 8002da6:	e09c      	b.n	8002ee2 <_printf_i+0x1e6>
 8002da8:	6833      	ldr	r3, [r6, #0]
 8002daa:	6820      	ldr	r0, [r4, #0]
 8002dac:	1d19      	adds	r1, r3, #4
 8002dae:	6031      	str	r1, [r6, #0]
 8002db0:	0606      	lsls	r6, r0, #24
 8002db2:	d501      	bpl.n	8002db8 <_printf_i+0xbc>
 8002db4:	681d      	ldr	r5, [r3, #0]
 8002db6:	e003      	b.n	8002dc0 <_printf_i+0xc4>
 8002db8:	0645      	lsls	r5, r0, #25
 8002dba:	d5fb      	bpl.n	8002db4 <_printf_i+0xb8>
 8002dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002dc0:	2d00      	cmp	r5, #0
 8002dc2:	da03      	bge.n	8002dcc <_printf_i+0xd0>
 8002dc4:	232d      	movs	r3, #45	@ 0x2d
 8002dc6:	426d      	negs	r5, r5
 8002dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dcc:	4858      	ldr	r0, [pc, #352]	@ (8002f30 <_printf_i+0x234>)
 8002dce:	230a      	movs	r3, #10
 8002dd0:	e011      	b.n	8002df6 <_printf_i+0xfa>
 8002dd2:	6821      	ldr	r1, [r4, #0]
 8002dd4:	6833      	ldr	r3, [r6, #0]
 8002dd6:	0608      	lsls	r0, r1, #24
 8002dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ddc:	d402      	bmi.n	8002de4 <_printf_i+0xe8>
 8002dde:	0649      	lsls	r1, r1, #25
 8002de0:	bf48      	it	mi
 8002de2:	b2ad      	uxthmi	r5, r5
 8002de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002de6:	4852      	ldr	r0, [pc, #328]	@ (8002f30 <_printf_i+0x234>)
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	bf14      	ite	ne
 8002dec:	230a      	movne	r3, #10
 8002dee:	2308      	moveq	r3, #8
 8002df0:	2100      	movs	r1, #0
 8002df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002df6:	6866      	ldr	r6, [r4, #4]
 8002df8:	60a6      	str	r6, [r4, #8]
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	db05      	blt.n	8002e0a <_printf_i+0x10e>
 8002dfe:	6821      	ldr	r1, [r4, #0]
 8002e00:	432e      	orrs	r6, r5
 8002e02:	f021 0104 	bic.w	r1, r1, #4
 8002e06:	6021      	str	r1, [r4, #0]
 8002e08:	d04b      	beq.n	8002ea2 <_printf_i+0x1a6>
 8002e0a:	4616      	mov	r6, r2
 8002e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e10:	fb03 5711 	mls	r7, r3, r1, r5
 8002e14:	5dc7      	ldrb	r7, [r0, r7]
 8002e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e1a:	462f      	mov	r7, r5
 8002e1c:	42bb      	cmp	r3, r7
 8002e1e:	460d      	mov	r5, r1
 8002e20:	d9f4      	bls.n	8002e0c <_printf_i+0x110>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10b      	bne.n	8002e3e <_printf_i+0x142>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	07df      	lsls	r7, r3, #31
 8002e2a:	d508      	bpl.n	8002e3e <_printf_i+0x142>
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	6861      	ldr	r1, [r4, #4]
 8002e30:	4299      	cmp	r1, r3
 8002e32:	bfde      	ittt	le
 8002e34:	2330      	movle	r3, #48	@ 0x30
 8002e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e3e:	1b92      	subs	r2, r2, r6
 8002e40:	6122      	str	r2, [r4, #16]
 8002e42:	f8cd a000 	str.w	sl, [sp]
 8002e46:	464b      	mov	r3, r9
 8002e48:	aa03      	add	r2, sp, #12
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	f7ff fee7 	bl	8002c20 <_printf_common>
 8002e52:	3001      	adds	r0, #1
 8002e54:	d14a      	bne.n	8002eec <_printf_i+0x1f0>
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	b004      	add	sp, #16
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	4832      	ldr	r0, [pc, #200]	@ (8002f34 <_printf_i+0x238>)
 8002e6a:	2778      	movs	r7, #120	@ 0x78
 8002e6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	6831      	ldr	r1, [r6, #0]
 8002e74:	061f      	lsls	r7, r3, #24
 8002e76:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e7a:	d402      	bmi.n	8002e82 <_printf_i+0x186>
 8002e7c:	065f      	lsls	r7, r3, #25
 8002e7e:	bf48      	it	mi
 8002e80:	b2ad      	uxthmi	r5, r5
 8002e82:	6031      	str	r1, [r6, #0]
 8002e84:	07d9      	lsls	r1, r3, #31
 8002e86:	bf44      	itt	mi
 8002e88:	f043 0320 	orrmi.w	r3, r3, #32
 8002e8c:	6023      	strmi	r3, [r4, #0]
 8002e8e:	b11d      	cbz	r5, 8002e98 <_printf_i+0x19c>
 8002e90:	2310      	movs	r3, #16
 8002e92:	e7ad      	b.n	8002df0 <_printf_i+0xf4>
 8002e94:	4826      	ldr	r0, [pc, #152]	@ (8002f30 <_printf_i+0x234>)
 8002e96:	e7e9      	b.n	8002e6c <_printf_i+0x170>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	f023 0320 	bic.w	r3, r3, #32
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	e7f6      	b.n	8002e90 <_printf_i+0x194>
 8002ea2:	4616      	mov	r6, r2
 8002ea4:	e7bd      	b.n	8002e22 <_printf_i+0x126>
 8002ea6:	6833      	ldr	r3, [r6, #0]
 8002ea8:	6825      	ldr	r5, [r4, #0]
 8002eaa:	6961      	ldr	r1, [r4, #20]
 8002eac:	1d18      	adds	r0, r3, #4
 8002eae:	6030      	str	r0, [r6, #0]
 8002eb0:	062e      	lsls	r6, r5, #24
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	d501      	bpl.n	8002eba <_printf_i+0x1be>
 8002eb6:	6019      	str	r1, [r3, #0]
 8002eb8:	e002      	b.n	8002ec0 <_printf_i+0x1c4>
 8002eba:	0668      	lsls	r0, r5, #25
 8002ebc:	d5fb      	bpl.n	8002eb6 <_printf_i+0x1ba>
 8002ebe:	8019      	strh	r1, [r3, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6123      	str	r3, [r4, #16]
 8002ec4:	4616      	mov	r6, r2
 8002ec6:	e7bc      	b.n	8002e42 <_printf_i+0x146>
 8002ec8:	6833      	ldr	r3, [r6, #0]
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	6032      	str	r2, [r6, #0]
 8002ece:	681e      	ldr	r6, [r3, #0]
 8002ed0:	6862      	ldr	r2, [r4, #4]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f7fd f97b 	bl	80001d0 <memchr>
 8002eda:	b108      	cbz	r0, 8002ee0 <_printf_i+0x1e4>
 8002edc:	1b80      	subs	r0, r0, r6
 8002ede:	6060      	str	r0, [r4, #4]
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	6123      	str	r3, [r4, #16]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eea:	e7aa      	b.n	8002e42 <_printf_i+0x146>
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	4632      	mov	r2, r6
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	47d0      	blx	sl
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d0ad      	beq.n	8002e56 <_printf_i+0x15a>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d413      	bmi.n	8002f28 <_printf_i+0x22c>
 8002f00:	68e0      	ldr	r0, [r4, #12]
 8002f02:	9b03      	ldr	r3, [sp, #12]
 8002f04:	4298      	cmp	r0, r3
 8002f06:	bfb8      	it	lt
 8002f08:	4618      	movlt	r0, r3
 8002f0a:	e7a6      	b.n	8002e5a <_printf_i+0x15e>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4632      	mov	r2, r6
 8002f10:	4649      	mov	r1, r9
 8002f12:	4640      	mov	r0, r8
 8002f14:	47d0      	blx	sl
 8002f16:	3001      	adds	r0, #1
 8002f18:	d09d      	beq.n	8002e56 <_printf_i+0x15a>
 8002f1a:	3501      	adds	r5, #1
 8002f1c:	68e3      	ldr	r3, [r4, #12]
 8002f1e:	9903      	ldr	r1, [sp, #12]
 8002f20:	1a5b      	subs	r3, r3, r1
 8002f22:	42ab      	cmp	r3, r5
 8002f24:	dcf2      	bgt.n	8002f0c <_printf_i+0x210>
 8002f26:	e7eb      	b.n	8002f00 <_printf_i+0x204>
 8002f28:	2500      	movs	r5, #0
 8002f2a:	f104 0619 	add.w	r6, r4, #25
 8002f2e:	e7f5      	b.n	8002f1c <_printf_i+0x220>
 8002f30:	0800526c 	.word	0x0800526c
 8002f34:	0800527d 	.word	0x0800527d

08002f38 <__sflush_r>:
 8002f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f40:	0716      	lsls	r6, r2, #28
 8002f42:	4605      	mov	r5, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	d454      	bmi.n	8002ff2 <__sflush_r+0xba>
 8002f48:	684b      	ldr	r3, [r1, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dc02      	bgt.n	8002f54 <__sflush_r+0x1c>
 8002f4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dd48      	ble.n	8002fe6 <__sflush_r+0xae>
 8002f54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f56:	2e00      	cmp	r6, #0
 8002f58:	d045      	beq.n	8002fe6 <__sflush_r+0xae>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f60:	682f      	ldr	r7, [r5, #0]
 8002f62:	6a21      	ldr	r1, [r4, #32]
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	d030      	beq.n	8002fca <__sflush_r+0x92>
 8002f68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	0759      	lsls	r1, r3, #29
 8002f6e:	d505      	bpl.n	8002f7c <__sflush_r+0x44>
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f76:	b10b      	cbz	r3, 8002f7c <__sflush_r+0x44>
 8002f78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f80:	6a21      	ldr	r1, [r4, #32]
 8002f82:	4628      	mov	r0, r5
 8002f84:	47b0      	blx	r6
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	d106      	bne.n	8002f9a <__sflush_r+0x62>
 8002f8c:	6829      	ldr	r1, [r5, #0]
 8002f8e:	291d      	cmp	r1, #29
 8002f90:	d82b      	bhi.n	8002fea <__sflush_r+0xb2>
 8002f92:	4a2a      	ldr	r2, [pc, #168]	@ (800303c <__sflush_r+0x104>)
 8002f94:	40ca      	lsrs	r2, r1
 8002f96:	07d6      	lsls	r6, r2, #31
 8002f98:	d527      	bpl.n	8002fea <__sflush_r+0xb2>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	6062      	str	r2, [r4, #4]
 8002f9e:	04d9      	lsls	r1, r3, #19
 8002fa0:	6922      	ldr	r2, [r4, #16]
 8002fa2:	6022      	str	r2, [r4, #0]
 8002fa4:	d504      	bpl.n	8002fb0 <__sflush_r+0x78>
 8002fa6:	1c42      	adds	r2, r0, #1
 8002fa8:	d101      	bne.n	8002fae <__sflush_r+0x76>
 8002faa:	682b      	ldr	r3, [r5, #0]
 8002fac:	b903      	cbnz	r3, 8002fb0 <__sflush_r+0x78>
 8002fae:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fb2:	602f      	str	r7, [r5, #0]
 8002fb4:	b1b9      	cbz	r1, 8002fe6 <__sflush_r+0xae>
 8002fb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d002      	beq.n	8002fc4 <__sflush_r+0x8c>
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f001 fa02 	bl	80043c8 <_free_r>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fc8:	e00d      	b.n	8002fe6 <__sflush_r+0xae>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4628      	mov	r0, r5
 8002fce:	47b0      	blx	r6
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	1c50      	adds	r0, r2, #1
 8002fd4:	d1c9      	bne.n	8002f6a <__sflush_r+0x32>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0c6      	beq.n	8002f6a <__sflush_r+0x32>
 8002fdc:	2b1d      	cmp	r3, #29
 8002fde:	d001      	beq.n	8002fe4 <__sflush_r+0xac>
 8002fe0:	2b16      	cmp	r3, #22
 8002fe2:	d11e      	bne.n	8003022 <__sflush_r+0xea>
 8002fe4:	602f      	str	r7, [r5, #0]
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e022      	b.n	8003030 <__sflush_r+0xf8>
 8002fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	e01b      	b.n	800302a <__sflush_r+0xf2>
 8002ff2:	690f      	ldr	r7, [r1, #16]
 8002ff4:	2f00      	cmp	r7, #0
 8002ff6:	d0f6      	beq.n	8002fe6 <__sflush_r+0xae>
 8002ff8:	0793      	lsls	r3, r2, #30
 8002ffa:	680e      	ldr	r6, [r1, #0]
 8002ffc:	bf08      	it	eq
 8002ffe:	694b      	ldreq	r3, [r1, #20]
 8003000:	600f      	str	r7, [r1, #0]
 8003002:	bf18      	it	ne
 8003004:	2300      	movne	r3, #0
 8003006:	eba6 0807 	sub.w	r8, r6, r7
 800300a:	608b      	str	r3, [r1, #8]
 800300c:	f1b8 0f00 	cmp.w	r8, #0
 8003010:	dde9      	ble.n	8002fe6 <__sflush_r+0xae>
 8003012:	6a21      	ldr	r1, [r4, #32]
 8003014:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003016:	4643      	mov	r3, r8
 8003018:	463a      	mov	r2, r7
 800301a:	4628      	mov	r0, r5
 800301c:	47b0      	blx	r6
 800301e:	2800      	cmp	r0, #0
 8003020:	dc08      	bgt.n	8003034 <__sflush_r+0xfc>
 8003022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800302a:	81a3      	strh	r3, [r4, #12]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003034:	4407      	add	r7, r0
 8003036:	eba8 0800 	sub.w	r8, r8, r0
 800303a:	e7e7      	b.n	800300c <__sflush_r+0xd4>
 800303c:	20400001 	.word	0x20400001

08003040 <_fflush_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	690b      	ldr	r3, [r1, #16]
 8003044:	4605      	mov	r5, r0
 8003046:	460c      	mov	r4, r1
 8003048:	b913      	cbnz	r3, 8003050 <_fflush_r+0x10>
 800304a:	2500      	movs	r5, #0
 800304c:	4628      	mov	r0, r5
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	b118      	cbz	r0, 800305a <_fflush_r+0x1a>
 8003052:	6a03      	ldr	r3, [r0, #32]
 8003054:	b90b      	cbnz	r3, 800305a <_fflush_r+0x1a>
 8003056:	f000 f8a7 	bl	80031a8 <__sinit>
 800305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f3      	beq.n	800304a <_fflush_r+0xa>
 8003062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003064:	07d0      	lsls	r0, r2, #31
 8003066:	d404      	bmi.n	8003072 <_fflush_r+0x32>
 8003068:	0599      	lsls	r1, r3, #22
 800306a:	d402      	bmi.n	8003072 <_fflush_r+0x32>
 800306c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800306e:	f000 fb40 	bl	80036f2 <__retarget_lock_acquire_recursive>
 8003072:	4628      	mov	r0, r5
 8003074:	4621      	mov	r1, r4
 8003076:	f7ff ff5f 	bl	8002f38 <__sflush_r>
 800307a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800307c:	07da      	lsls	r2, r3, #31
 800307e:	4605      	mov	r5, r0
 8003080:	d4e4      	bmi.n	800304c <_fflush_r+0xc>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	059b      	lsls	r3, r3, #22
 8003086:	d4e1      	bmi.n	800304c <_fflush_r+0xc>
 8003088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800308a:	f000 fb33 	bl	80036f4 <__retarget_lock_release_recursive>
 800308e:	e7dd      	b.n	800304c <_fflush_r+0xc>

08003090 <std>:
 8003090:	2300      	movs	r3, #0
 8003092:	b510      	push	{r4, lr}
 8003094:	4604      	mov	r4, r0
 8003096:	e9c0 3300 	strd	r3, r3, [r0]
 800309a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800309e:	6083      	str	r3, [r0, #8]
 80030a0:	8181      	strh	r1, [r0, #12]
 80030a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80030a4:	81c2      	strh	r2, [r0, #14]
 80030a6:	6183      	str	r3, [r0, #24]
 80030a8:	4619      	mov	r1, r3
 80030aa:	2208      	movs	r2, #8
 80030ac:	305c      	adds	r0, #92	@ 0x5c
 80030ae:	f000 fab5 	bl	800361c <memset>
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <std+0x58>)
 80030b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <std+0x5c>)
 80030b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <std+0x60>)
 80030bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <std+0x64>)
 80030c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80030c2:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <std+0x68>)
 80030c4:	6224      	str	r4, [r4, #32]
 80030c6:	429c      	cmp	r4, r3
 80030c8:	d006      	beq.n	80030d8 <std+0x48>
 80030ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030ce:	4294      	cmp	r4, r2
 80030d0:	d002      	beq.n	80030d8 <std+0x48>
 80030d2:	33d0      	adds	r3, #208	@ 0xd0
 80030d4:	429c      	cmp	r4, r3
 80030d6:	d105      	bne.n	80030e4 <std+0x54>
 80030d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e0:	f000 bb06 	b.w	80036f0 <__retarget_lock_init_recursive>
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	0800346d 	.word	0x0800346d
 80030ec:	0800348f 	.word	0x0800348f
 80030f0:	080034c7 	.word	0x080034c7
 80030f4:	080034eb 	.word	0x080034eb
 80030f8:	200002f4 	.word	0x200002f4

080030fc <stdio_exit_handler>:
 80030fc:	4a02      	ldr	r2, [pc, #8]	@ (8003108 <stdio_exit_handler+0xc>)
 80030fe:	4903      	ldr	r1, [pc, #12]	@ (800310c <stdio_exit_handler+0x10>)
 8003100:	4803      	ldr	r0, [pc, #12]	@ (8003110 <stdio_exit_handler+0x14>)
 8003102:	f000 b869 	b.w	80031d8 <_fwalk_sglue>
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000
 800310c:	08003041 	.word	0x08003041
 8003110:	20000010 	.word	0x20000010

08003114 <cleanup_stdio>:
 8003114:	6841      	ldr	r1, [r0, #4]
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <cleanup_stdio+0x34>)
 8003118:	4299      	cmp	r1, r3
 800311a:	b510      	push	{r4, lr}
 800311c:	4604      	mov	r4, r0
 800311e:	d001      	beq.n	8003124 <cleanup_stdio+0x10>
 8003120:	f7ff ff8e 	bl	8003040 <_fflush_r>
 8003124:	68a1      	ldr	r1, [r4, #8]
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <cleanup_stdio+0x38>)
 8003128:	4299      	cmp	r1, r3
 800312a:	d002      	beq.n	8003132 <cleanup_stdio+0x1e>
 800312c:	4620      	mov	r0, r4
 800312e:	f7ff ff87 	bl	8003040 <_fflush_r>
 8003132:	68e1      	ldr	r1, [r4, #12]
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <cleanup_stdio+0x3c>)
 8003136:	4299      	cmp	r1, r3
 8003138:	d004      	beq.n	8003144 <cleanup_stdio+0x30>
 800313a:	4620      	mov	r0, r4
 800313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003140:	f7ff bf7e 	b.w	8003040 <_fflush_r>
 8003144:	bd10      	pop	{r4, pc}
 8003146:	bf00      	nop
 8003148:	200002f4 	.word	0x200002f4
 800314c:	2000035c 	.word	0x2000035c
 8003150:	200003c4 	.word	0x200003c4

08003154 <global_stdio_init.part.0>:
 8003154:	b510      	push	{r4, lr}
 8003156:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <global_stdio_init.part.0+0x30>)
 8003158:	4c0b      	ldr	r4, [pc, #44]	@ (8003188 <global_stdio_init.part.0+0x34>)
 800315a:	4a0c      	ldr	r2, [pc, #48]	@ (800318c <global_stdio_init.part.0+0x38>)
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	4620      	mov	r0, r4
 8003160:	2200      	movs	r2, #0
 8003162:	2104      	movs	r1, #4
 8003164:	f7ff ff94 	bl	8003090 <std>
 8003168:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800316c:	2201      	movs	r2, #1
 800316e:	2109      	movs	r1, #9
 8003170:	f7ff ff8e 	bl	8003090 <std>
 8003174:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003178:	2202      	movs	r2, #2
 800317a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800317e:	2112      	movs	r1, #18
 8003180:	f7ff bf86 	b.w	8003090 <std>
 8003184:	2000042c 	.word	0x2000042c
 8003188:	200002f4 	.word	0x200002f4
 800318c:	080030fd 	.word	0x080030fd

08003190 <__sfp_lock_acquire>:
 8003190:	4801      	ldr	r0, [pc, #4]	@ (8003198 <__sfp_lock_acquire+0x8>)
 8003192:	f000 baae 	b.w	80036f2 <__retarget_lock_acquire_recursive>
 8003196:	bf00      	nop
 8003198:	20000435 	.word	0x20000435

0800319c <__sfp_lock_release>:
 800319c:	4801      	ldr	r0, [pc, #4]	@ (80031a4 <__sfp_lock_release+0x8>)
 800319e:	f000 baa9 	b.w	80036f4 <__retarget_lock_release_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000435 	.word	0x20000435

080031a8 <__sinit>:
 80031a8:	b510      	push	{r4, lr}
 80031aa:	4604      	mov	r4, r0
 80031ac:	f7ff fff0 	bl	8003190 <__sfp_lock_acquire>
 80031b0:	6a23      	ldr	r3, [r4, #32]
 80031b2:	b11b      	cbz	r3, 80031bc <__sinit+0x14>
 80031b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b8:	f7ff bff0 	b.w	800319c <__sfp_lock_release>
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <__sinit+0x28>)
 80031be:	6223      	str	r3, [r4, #32]
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <__sinit+0x2c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f5      	bne.n	80031b4 <__sinit+0xc>
 80031c8:	f7ff ffc4 	bl	8003154 <global_stdio_init.part.0>
 80031cc:	e7f2      	b.n	80031b4 <__sinit+0xc>
 80031ce:	bf00      	nop
 80031d0:	08003115 	.word	0x08003115
 80031d4:	2000042c 	.word	0x2000042c

080031d8 <_fwalk_sglue>:
 80031d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031dc:	4607      	mov	r7, r0
 80031de:	4688      	mov	r8, r1
 80031e0:	4614      	mov	r4, r2
 80031e2:	2600      	movs	r6, #0
 80031e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031e8:	f1b9 0901 	subs.w	r9, r9, #1
 80031ec:	d505      	bpl.n	80031fa <_fwalk_sglue+0x22>
 80031ee:	6824      	ldr	r4, [r4, #0]
 80031f0:	2c00      	cmp	r4, #0
 80031f2:	d1f7      	bne.n	80031e4 <_fwalk_sglue+0xc>
 80031f4:	4630      	mov	r0, r6
 80031f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d907      	bls.n	8003210 <_fwalk_sglue+0x38>
 8003200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003204:	3301      	adds	r3, #1
 8003206:	d003      	beq.n	8003210 <_fwalk_sglue+0x38>
 8003208:	4629      	mov	r1, r5
 800320a:	4638      	mov	r0, r7
 800320c:	47c0      	blx	r8
 800320e:	4306      	orrs	r6, r0
 8003210:	3568      	adds	r5, #104	@ 0x68
 8003212:	e7e9      	b.n	80031e8 <_fwalk_sglue+0x10>

08003214 <iprintf>:
 8003214:	b40f      	push	{r0, r1, r2, r3}
 8003216:	b507      	push	{r0, r1, r2, lr}
 8003218:	4906      	ldr	r1, [pc, #24]	@ (8003234 <iprintf+0x20>)
 800321a:	ab04      	add	r3, sp, #16
 800321c:	6808      	ldr	r0, [r1, #0]
 800321e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003222:	6881      	ldr	r1, [r0, #8]
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	f001 fd73 	bl	8004d10 <_vfiprintf_r>
 800322a:	b003      	add	sp, #12
 800322c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003230:	b004      	add	sp, #16
 8003232:	4770      	bx	lr
 8003234:	2000000c 	.word	0x2000000c

08003238 <_puts_r>:
 8003238:	6a03      	ldr	r3, [r0, #32]
 800323a:	b570      	push	{r4, r5, r6, lr}
 800323c:	6884      	ldr	r4, [r0, #8]
 800323e:	4605      	mov	r5, r0
 8003240:	460e      	mov	r6, r1
 8003242:	b90b      	cbnz	r3, 8003248 <_puts_r+0x10>
 8003244:	f7ff ffb0 	bl	80031a8 <__sinit>
 8003248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800324a:	07db      	lsls	r3, r3, #31
 800324c:	d405      	bmi.n	800325a <_puts_r+0x22>
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	0598      	lsls	r0, r3, #22
 8003252:	d402      	bmi.n	800325a <_puts_r+0x22>
 8003254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003256:	f000 fa4c 	bl	80036f2 <__retarget_lock_acquire_recursive>
 800325a:	89a3      	ldrh	r3, [r4, #12]
 800325c:	0719      	lsls	r1, r3, #28
 800325e:	d502      	bpl.n	8003266 <_puts_r+0x2e>
 8003260:	6923      	ldr	r3, [r4, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d135      	bne.n	80032d2 <_puts_r+0x9a>
 8003266:	4621      	mov	r1, r4
 8003268:	4628      	mov	r0, r5
 800326a:	f000 f981 	bl	8003570 <__swsetup_r>
 800326e:	b380      	cbz	r0, 80032d2 <_puts_r+0x9a>
 8003270:	f04f 35ff 	mov.w	r5, #4294967295
 8003274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003276:	07da      	lsls	r2, r3, #31
 8003278:	d405      	bmi.n	8003286 <_puts_r+0x4e>
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	059b      	lsls	r3, r3, #22
 800327e:	d402      	bmi.n	8003286 <_puts_r+0x4e>
 8003280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003282:	f000 fa37 	bl	80036f4 <__retarget_lock_release_recursive>
 8003286:	4628      	mov	r0, r5
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	2b00      	cmp	r3, #0
 800328c:	da04      	bge.n	8003298 <_puts_r+0x60>
 800328e:	69a2      	ldr	r2, [r4, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	dc17      	bgt.n	80032c4 <_puts_r+0x8c>
 8003294:	290a      	cmp	r1, #10
 8003296:	d015      	beq.n	80032c4 <_puts_r+0x8c>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	6022      	str	r2, [r4, #0]
 800329e:	7019      	strb	r1, [r3, #0]
 80032a0:	68a3      	ldr	r3, [r4, #8]
 80032a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60a3      	str	r3, [r4, #8]
 80032aa:	2900      	cmp	r1, #0
 80032ac:	d1ed      	bne.n	800328a <_puts_r+0x52>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	da11      	bge.n	80032d6 <_puts_r+0x9e>
 80032b2:	4622      	mov	r2, r4
 80032b4:	210a      	movs	r1, #10
 80032b6:	4628      	mov	r0, r5
 80032b8:	f000 f91b 	bl	80034f2 <__swbuf_r>
 80032bc:	3001      	adds	r0, #1
 80032be:	d0d7      	beq.n	8003270 <_puts_r+0x38>
 80032c0:	250a      	movs	r5, #10
 80032c2:	e7d7      	b.n	8003274 <_puts_r+0x3c>
 80032c4:	4622      	mov	r2, r4
 80032c6:	4628      	mov	r0, r5
 80032c8:	f000 f913 	bl	80034f2 <__swbuf_r>
 80032cc:	3001      	adds	r0, #1
 80032ce:	d1e7      	bne.n	80032a0 <_puts_r+0x68>
 80032d0:	e7ce      	b.n	8003270 <_puts_r+0x38>
 80032d2:	3e01      	subs	r6, #1
 80032d4:	e7e4      	b.n	80032a0 <_puts_r+0x68>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	6022      	str	r2, [r4, #0]
 80032dc:	220a      	movs	r2, #10
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e7ee      	b.n	80032c0 <_puts_r+0x88>
	...

080032e4 <puts>:
 80032e4:	4b02      	ldr	r3, [pc, #8]	@ (80032f0 <puts+0xc>)
 80032e6:	4601      	mov	r1, r0
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	f7ff bfa5 	b.w	8003238 <_puts_r>
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <setbuf>:
 80032f4:	fab1 f281 	clz	r2, r1
 80032f8:	0952      	lsrs	r2, r2, #5
 80032fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032fe:	0052      	lsls	r2, r2, #1
 8003300:	f000 b800 	b.w	8003304 <setvbuf>

08003304 <setvbuf>:
 8003304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003308:	461d      	mov	r5, r3
 800330a:	4b57      	ldr	r3, [pc, #348]	@ (8003468 <setvbuf+0x164>)
 800330c:	681f      	ldr	r7, [r3, #0]
 800330e:	4604      	mov	r4, r0
 8003310:	460e      	mov	r6, r1
 8003312:	4690      	mov	r8, r2
 8003314:	b127      	cbz	r7, 8003320 <setvbuf+0x1c>
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	b913      	cbnz	r3, 8003320 <setvbuf+0x1c>
 800331a:	4638      	mov	r0, r7
 800331c:	f7ff ff44 	bl	80031a8 <__sinit>
 8003320:	f1b8 0f02 	cmp.w	r8, #2
 8003324:	d006      	beq.n	8003334 <setvbuf+0x30>
 8003326:	f1b8 0f01 	cmp.w	r8, #1
 800332a:	f200 809a 	bhi.w	8003462 <setvbuf+0x15e>
 800332e:	2d00      	cmp	r5, #0
 8003330:	f2c0 8097 	blt.w	8003462 <setvbuf+0x15e>
 8003334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003336:	07d9      	lsls	r1, r3, #31
 8003338:	d405      	bmi.n	8003346 <setvbuf+0x42>
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	059a      	lsls	r2, r3, #22
 800333e:	d402      	bmi.n	8003346 <setvbuf+0x42>
 8003340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003342:	f000 f9d6 	bl	80036f2 <__retarget_lock_acquire_recursive>
 8003346:	4621      	mov	r1, r4
 8003348:	4638      	mov	r0, r7
 800334a:	f7ff fe79 	bl	8003040 <_fflush_r>
 800334e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003350:	b141      	cbz	r1, 8003364 <setvbuf+0x60>
 8003352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003356:	4299      	cmp	r1, r3
 8003358:	d002      	beq.n	8003360 <setvbuf+0x5c>
 800335a:	4638      	mov	r0, r7
 800335c:	f001 f834 	bl	80043c8 <_free_r>
 8003360:	2300      	movs	r3, #0
 8003362:	6363      	str	r3, [r4, #52]	@ 0x34
 8003364:	2300      	movs	r3, #0
 8003366:	61a3      	str	r3, [r4, #24]
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	d503      	bpl.n	8003378 <setvbuf+0x74>
 8003370:	6921      	ldr	r1, [r4, #16]
 8003372:	4638      	mov	r0, r7
 8003374:	f001 f828 	bl	80043c8 <_free_r>
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	f1b8 0f02 	cmp.w	r8, #2
 8003386:	81a3      	strh	r3, [r4, #12]
 8003388:	d061      	beq.n	800344e <setvbuf+0x14a>
 800338a:	ab01      	add	r3, sp, #4
 800338c:	466a      	mov	r2, sp
 800338e:	4621      	mov	r1, r4
 8003390:	4638      	mov	r0, r7
 8003392:	f001 fdd5 	bl	8004f40 <__swhatbuf_r>
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	4318      	orrs	r0, r3
 800339a:	81a0      	strh	r0, [r4, #12]
 800339c:	bb2d      	cbnz	r5, 80033ea <setvbuf+0xe6>
 800339e:	9d00      	ldr	r5, [sp, #0]
 80033a0:	4628      	mov	r0, r5
 80033a2:	f001 f85b 	bl	800445c <malloc>
 80033a6:	4606      	mov	r6, r0
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d152      	bne.n	8003452 <setvbuf+0x14e>
 80033ac:	f8dd 9000 	ldr.w	r9, [sp]
 80033b0:	45a9      	cmp	r9, r5
 80033b2:	d140      	bne.n	8003436 <setvbuf+0x132>
 80033b4:	f04f 35ff 	mov.w	r5, #4294967295
 80033b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033bc:	f043 0202 	orr.w	r2, r3, #2
 80033c0:	81a2      	strh	r2, [r4, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	60a2      	str	r2, [r4, #8]
 80033c6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80033ca:	6022      	str	r2, [r4, #0]
 80033cc:	6122      	str	r2, [r4, #16]
 80033ce:	2201      	movs	r2, #1
 80033d0:	6162      	str	r2, [r4, #20]
 80033d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033d4:	07d6      	lsls	r6, r2, #31
 80033d6:	d404      	bmi.n	80033e2 <setvbuf+0xde>
 80033d8:	0598      	lsls	r0, r3, #22
 80033da:	d402      	bmi.n	80033e2 <setvbuf+0xde>
 80033dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033de:	f000 f989 	bl	80036f4 <__retarget_lock_release_recursive>
 80033e2:	4628      	mov	r0, r5
 80033e4:	b003      	add	sp, #12
 80033e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ea:	2e00      	cmp	r6, #0
 80033ec:	d0d8      	beq.n	80033a0 <setvbuf+0x9c>
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	b913      	cbnz	r3, 80033f8 <setvbuf+0xf4>
 80033f2:	4638      	mov	r0, r7
 80033f4:	f7ff fed8 	bl	80031a8 <__sinit>
 80033f8:	f1b8 0f01 	cmp.w	r8, #1
 80033fc:	bf08      	it	eq
 80033fe:	89a3      	ldrheq	r3, [r4, #12]
 8003400:	6026      	str	r6, [r4, #0]
 8003402:	bf04      	itt	eq
 8003404:	f043 0301 	orreq.w	r3, r3, #1
 8003408:	81a3      	strheq	r3, [r4, #12]
 800340a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340e:	f013 0208 	ands.w	r2, r3, #8
 8003412:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003416:	d01e      	beq.n	8003456 <setvbuf+0x152>
 8003418:	07d9      	lsls	r1, r3, #31
 800341a:	bf41      	itttt	mi
 800341c:	2200      	movmi	r2, #0
 800341e:	426d      	negmi	r5, r5
 8003420:	60a2      	strmi	r2, [r4, #8]
 8003422:	61a5      	strmi	r5, [r4, #24]
 8003424:	bf58      	it	pl
 8003426:	60a5      	strpl	r5, [r4, #8]
 8003428:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800342a:	07d2      	lsls	r2, r2, #31
 800342c:	d401      	bmi.n	8003432 <setvbuf+0x12e>
 800342e:	059b      	lsls	r3, r3, #22
 8003430:	d513      	bpl.n	800345a <setvbuf+0x156>
 8003432:	2500      	movs	r5, #0
 8003434:	e7d5      	b.n	80033e2 <setvbuf+0xde>
 8003436:	4648      	mov	r0, r9
 8003438:	f001 f810 	bl	800445c <malloc>
 800343c:	4606      	mov	r6, r0
 800343e:	2800      	cmp	r0, #0
 8003440:	d0b8      	beq.n	80033b4 <setvbuf+0xb0>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	464d      	mov	r5, r9
 800344c:	e7cf      	b.n	80033ee <setvbuf+0xea>
 800344e:	2500      	movs	r5, #0
 8003450:	e7b2      	b.n	80033b8 <setvbuf+0xb4>
 8003452:	46a9      	mov	r9, r5
 8003454:	e7f5      	b.n	8003442 <setvbuf+0x13e>
 8003456:	60a2      	str	r2, [r4, #8]
 8003458:	e7e6      	b.n	8003428 <setvbuf+0x124>
 800345a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800345c:	f000 f94a 	bl	80036f4 <__retarget_lock_release_recursive>
 8003460:	e7e7      	b.n	8003432 <setvbuf+0x12e>
 8003462:	f04f 35ff 	mov.w	r5, #4294967295
 8003466:	e7bc      	b.n	80033e2 <setvbuf+0xde>
 8003468:	2000000c 	.word	0x2000000c

0800346c <__sread>:
 800346c:	b510      	push	{r4, lr}
 800346e:	460c      	mov	r4, r1
 8003470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003474:	f000 f900 	bl	8003678 <_read_r>
 8003478:	2800      	cmp	r0, #0
 800347a:	bfab      	itete	ge
 800347c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800347e:	89a3      	ldrhlt	r3, [r4, #12]
 8003480:	181b      	addge	r3, r3, r0
 8003482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003486:	bfac      	ite	ge
 8003488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800348a:	81a3      	strhlt	r3, [r4, #12]
 800348c:	bd10      	pop	{r4, pc}

0800348e <__swrite>:
 800348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	461f      	mov	r7, r3
 8003494:	898b      	ldrh	r3, [r1, #12]
 8003496:	05db      	lsls	r3, r3, #23
 8003498:	4605      	mov	r5, r0
 800349a:	460c      	mov	r4, r1
 800349c:	4616      	mov	r6, r2
 800349e:	d505      	bpl.n	80034ac <__swrite+0x1e>
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	2302      	movs	r3, #2
 80034a6:	2200      	movs	r2, #0
 80034a8:	f000 f8d4 	bl	8003654 <_lseek_r>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	4632      	mov	r2, r6
 80034ba:	463b      	mov	r3, r7
 80034bc:	4628      	mov	r0, r5
 80034be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	f7fe bb0f 	b.w	8001ae4 <_write_r>

080034c6 <__sseek>:
 80034c6:	b510      	push	{r4, lr}
 80034c8:	460c      	mov	r4, r1
 80034ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ce:	f000 f8c1 	bl	8003654 <_lseek_r>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	bf15      	itete	ne
 80034d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80034da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80034de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80034e2:	81a3      	strheq	r3, [r4, #12]
 80034e4:	bf18      	it	ne
 80034e6:	81a3      	strhne	r3, [r4, #12]
 80034e8:	bd10      	pop	{r4, pc}

080034ea <__sclose>:
 80034ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ee:	f000 b8a1 	b.w	8003634 <_close_r>

080034f2 <__swbuf_r>:
 80034f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f4:	460e      	mov	r6, r1
 80034f6:	4614      	mov	r4, r2
 80034f8:	4605      	mov	r5, r0
 80034fa:	b118      	cbz	r0, 8003504 <__swbuf_r+0x12>
 80034fc:	6a03      	ldr	r3, [r0, #32]
 80034fe:	b90b      	cbnz	r3, 8003504 <__swbuf_r+0x12>
 8003500:	f7ff fe52 	bl	80031a8 <__sinit>
 8003504:	69a3      	ldr	r3, [r4, #24]
 8003506:	60a3      	str	r3, [r4, #8]
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	071a      	lsls	r2, r3, #28
 800350c:	d501      	bpl.n	8003512 <__swbuf_r+0x20>
 800350e:	6923      	ldr	r3, [r4, #16]
 8003510:	b943      	cbnz	r3, 8003524 <__swbuf_r+0x32>
 8003512:	4621      	mov	r1, r4
 8003514:	4628      	mov	r0, r5
 8003516:	f000 f82b 	bl	8003570 <__swsetup_r>
 800351a:	b118      	cbz	r0, 8003524 <__swbuf_r+0x32>
 800351c:	f04f 37ff 	mov.w	r7, #4294967295
 8003520:	4638      	mov	r0, r7
 8003522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	6922      	ldr	r2, [r4, #16]
 8003528:	1a98      	subs	r0, r3, r2
 800352a:	6963      	ldr	r3, [r4, #20]
 800352c:	b2f6      	uxtb	r6, r6
 800352e:	4283      	cmp	r3, r0
 8003530:	4637      	mov	r7, r6
 8003532:	dc05      	bgt.n	8003540 <__swbuf_r+0x4e>
 8003534:	4621      	mov	r1, r4
 8003536:	4628      	mov	r0, r5
 8003538:	f7ff fd82 	bl	8003040 <_fflush_r>
 800353c:	2800      	cmp	r0, #0
 800353e:	d1ed      	bne.n	800351c <__swbuf_r+0x2a>
 8003540:	68a3      	ldr	r3, [r4, #8]
 8003542:	3b01      	subs	r3, #1
 8003544:	60a3      	str	r3, [r4, #8]
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	6022      	str	r2, [r4, #0]
 800354c:	701e      	strb	r6, [r3, #0]
 800354e:	6962      	ldr	r2, [r4, #20]
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	429a      	cmp	r2, r3
 8003554:	d004      	beq.n	8003560 <__swbuf_r+0x6e>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	07db      	lsls	r3, r3, #31
 800355a:	d5e1      	bpl.n	8003520 <__swbuf_r+0x2e>
 800355c:	2e0a      	cmp	r6, #10
 800355e:	d1df      	bne.n	8003520 <__swbuf_r+0x2e>
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	f7ff fd6c 	bl	8003040 <_fflush_r>
 8003568:	2800      	cmp	r0, #0
 800356a:	d0d9      	beq.n	8003520 <__swbuf_r+0x2e>
 800356c:	e7d6      	b.n	800351c <__swbuf_r+0x2a>
	...

08003570 <__swsetup_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <__swsetup_r+0xa8>)
 8003574:	4605      	mov	r5, r0
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	460c      	mov	r4, r1
 800357a:	b118      	cbz	r0, 8003584 <__swsetup_r+0x14>
 800357c:	6a03      	ldr	r3, [r0, #32]
 800357e:	b90b      	cbnz	r3, 8003584 <__swsetup_r+0x14>
 8003580:	f7ff fe12 	bl	80031a8 <__sinit>
 8003584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003588:	0719      	lsls	r1, r3, #28
 800358a:	d422      	bmi.n	80035d2 <__swsetup_r+0x62>
 800358c:	06da      	lsls	r2, r3, #27
 800358e:	d407      	bmi.n	80035a0 <__swsetup_r+0x30>
 8003590:	2209      	movs	r2, #9
 8003592:	602a      	str	r2, [r5, #0]
 8003594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003598:	81a3      	strh	r3, [r4, #12]
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	e033      	b.n	8003608 <__swsetup_r+0x98>
 80035a0:	0758      	lsls	r0, r3, #29
 80035a2:	d512      	bpl.n	80035ca <__swsetup_r+0x5a>
 80035a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035a6:	b141      	cbz	r1, 80035ba <__swsetup_r+0x4a>
 80035a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035ac:	4299      	cmp	r1, r3
 80035ae:	d002      	beq.n	80035b6 <__swsetup_r+0x46>
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 ff09 	bl	80043c8 <_free_r>
 80035b6:	2300      	movs	r3, #0
 80035b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	2300      	movs	r3, #0
 80035c4:	6063      	str	r3, [r4, #4]
 80035c6:	6923      	ldr	r3, [r4, #16]
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	f043 0308 	orr.w	r3, r3, #8
 80035d0:	81a3      	strh	r3, [r4, #12]
 80035d2:	6923      	ldr	r3, [r4, #16]
 80035d4:	b94b      	cbnz	r3, 80035ea <__swsetup_r+0x7a>
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e0:	d003      	beq.n	80035ea <__swsetup_r+0x7a>
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f001 fcd1 	bl	8004f8c <__smakebuf_r>
 80035ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ee:	f013 0201 	ands.w	r2, r3, #1
 80035f2:	d00a      	beq.n	800360a <__swsetup_r+0x9a>
 80035f4:	2200      	movs	r2, #0
 80035f6:	60a2      	str	r2, [r4, #8]
 80035f8:	6962      	ldr	r2, [r4, #20]
 80035fa:	4252      	negs	r2, r2
 80035fc:	61a2      	str	r2, [r4, #24]
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	b942      	cbnz	r2, 8003614 <__swsetup_r+0xa4>
 8003602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003606:	d1c5      	bne.n	8003594 <__swsetup_r+0x24>
 8003608:	bd38      	pop	{r3, r4, r5, pc}
 800360a:	0799      	lsls	r1, r3, #30
 800360c:	bf58      	it	pl
 800360e:	6962      	ldrpl	r2, [r4, #20]
 8003610:	60a2      	str	r2, [r4, #8]
 8003612:	e7f4      	b.n	80035fe <__swsetup_r+0x8e>
 8003614:	2000      	movs	r0, #0
 8003616:	e7f7      	b.n	8003608 <__swsetup_r+0x98>
 8003618:	2000000c 	.word	0x2000000c

0800361c <memset>:
 800361c:	4402      	add	r2, r0
 800361e:	4603      	mov	r3, r0
 8003620:	4293      	cmp	r3, r2
 8003622:	d100      	bne.n	8003626 <memset+0xa>
 8003624:	4770      	bx	lr
 8003626:	f803 1b01 	strb.w	r1, [r3], #1
 800362a:	e7f9      	b.n	8003620 <memset+0x4>

0800362c <_localeconv_r>:
 800362c:	4800      	ldr	r0, [pc, #0]	@ (8003630 <_localeconv_r+0x4>)
 800362e:	4770      	bx	lr
 8003630:	2000014c 	.word	0x2000014c

08003634 <_close_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4d06      	ldr	r5, [pc, #24]	@ (8003650 <_close_r+0x1c>)
 8003638:	2300      	movs	r3, #0
 800363a:	4604      	mov	r4, r0
 800363c:	4608      	mov	r0, r1
 800363e:	602b      	str	r3, [r5, #0]
 8003640:	f7fe ff34 	bl	80024ac <_close>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_close_r+0x1a>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	b103      	cbz	r3, 800364e <_close_r+0x1a>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	20000430 	.word	0x20000430

08003654 <_lseek_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4d07      	ldr	r5, [pc, #28]	@ (8003674 <_lseek_r+0x20>)
 8003658:	4604      	mov	r4, r0
 800365a:	4608      	mov	r0, r1
 800365c:	4611      	mov	r1, r2
 800365e:	2200      	movs	r2, #0
 8003660:	602a      	str	r2, [r5, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	f7fe ff49 	bl	80024fa <_lseek>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_lseek_r+0x1e>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_lseek_r+0x1e>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	20000430 	.word	0x20000430

08003678 <_read_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d07      	ldr	r5, [pc, #28]	@ (8003698 <_read_r+0x20>)
 800367c:	4604      	mov	r4, r0
 800367e:	4608      	mov	r0, r1
 8003680:	4611      	mov	r1, r2
 8003682:	2200      	movs	r2, #0
 8003684:	602a      	str	r2, [r5, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f7fe fef3 	bl	8002472 <_read>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_read_r+0x1e>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_read_r+0x1e>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	20000430 	.word	0x20000430

0800369c <__errno>:
 800369c:	4b01      	ldr	r3, [pc, #4]	@ (80036a4 <__errno+0x8>)
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	2000000c 	.word	0x2000000c

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4d0d      	ldr	r5, [pc, #52]	@ (80036e0 <__libc_init_array+0x38>)
 80036ac:	4c0d      	ldr	r4, [pc, #52]	@ (80036e4 <__libc_init_array+0x3c>)
 80036ae:	1b64      	subs	r4, r4, r5
 80036b0:	10a4      	asrs	r4, r4, #2
 80036b2:	2600      	movs	r6, #0
 80036b4:	42a6      	cmp	r6, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	4d0b      	ldr	r5, [pc, #44]	@ (80036e8 <__libc_init_array+0x40>)
 80036ba:	4c0c      	ldr	r4, [pc, #48]	@ (80036ec <__libc_init_array+0x44>)
 80036bc:	f001 fd92 	bl	80051e4 <_init>
 80036c0:	1b64      	subs	r4, r4, r5
 80036c2:	10a4      	asrs	r4, r4, #2
 80036c4:	2600      	movs	r6, #0
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d0:	4798      	blx	r3
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036da:	4798      	blx	r3
 80036dc:	3601      	adds	r6, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	080055d4 	.word	0x080055d4
 80036e4:	080055d4 	.word	0x080055d4
 80036e8:	080055d4 	.word	0x080055d4
 80036ec:	080055d8 	.word	0x080055d8

080036f0 <__retarget_lock_init_recursive>:
 80036f0:	4770      	bx	lr

080036f2 <__retarget_lock_acquire_recursive>:
 80036f2:	4770      	bx	lr

080036f4 <__retarget_lock_release_recursive>:
 80036f4:	4770      	bx	lr

080036f6 <memcpy>:
 80036f6:	440a      	add	r2, r1
 80036f8:	4291      	cmp	r1, r2
 80036fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80036fe:	d100      	bne.n	8003702 <memcpy+0xc>
 8003700:	4770      	bx	lr
 8003702:	b510      	push	{r4, lr}
 8003704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800370c:	4291      	cmp	r1, r2
 800370e:	d1f9      	bne.n	8003704 <memcpy+0xe>
 8003710:	bd10      	pop	{r4, pc}

08003712 <quorem>:
 8003712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003716:	6903      	ldr	r3, [r0, #16]
 8003718:	690c      	ldr	r4, [r1, #16]
 800371a:	42a3      	cmp	r3, r4
 800371c:	4607      	mov	r7, r0
 800371e:	db7e      	blt.n	800381e <quorem+0x10c>
 8003720:	3c01      	subs	r4, #1
 8003722:	f101 0814 	add.w	r8, r1, #20
 8003726:	00a3      	lsls	r3, r4, #2
 8003728:	f100 0514 	add.w	r5, r0, #20
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800373c:	3301      	adds	r3, #1
 800373e:	429a      	cmp	r2, r3
 8003740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003744:	fbb2 f6f3 	udiv	r6, r2, r3
 8003748:	d32e      	bcc.n	80037a8 <quorem+0x96>
 800374a:	f04f 0a00 	mov.w	sl, #0
 800374e:	46c4      	mov	ip, r8
 8003750:	46ae      	mov	lr, r5
 8003752:	46d3      	mov	fp, sl
 8003754:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003758:	b298      	uxth	r0, r3
 800375a:	fb06 a000 	mla	r0, r6, r0, sl
 800375e:	0c02      	lsrs	r2, r0, #16
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	fb06 2303 	mla	r3, r6, r3, r2
 8003766:	f8de 2000 	ldr.w	r2, [lr]
 800376a:	b280      	uxth	r0, r0
 800376c:	b292      	uxth	r2, r2
 800376e:	1a12      	subs	r2, r2, r0
 8003770:	445a      	add	r2, fp
 8003772:	f8de 0000 	ldr.w	r0, [lr]
 8003776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800377a:	b29b      	uxth	r3, r3
 800377c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003780:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003784:	b292      	uxth	r2, r2
 8003786:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800378a:	45e1      	cmp	r9, ip
 800378c:	f84e 2b04 	str.w	r2, [lr], #4
 8003790:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003794:	d2de      	bcs.n	8003754 <quorem+0x42>
 8003796:	9b00      	ldr	r3, [sp, #0]
 8003798:	58eb      	ldr	r3, [r5, r3]
 800379a:	b92b      	cbnz	r3, 80037a8 <quorem+0x96>
 800379c:	9b01      	ldr	r3, [sp, #4]
 800379e:	3b04      	subs	r3, #4
 80037a0:	429d      	cmp	r5, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	d32f      	bcc.n	8003806 <quorem+0xf4>
 80037a6:	613c      	str	r4, [r7, #16]
 80037a8:	4638      	mov	r0, r7
 80037aa:	f001 f97f 	bl	8004aac <__mcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	db25      	blt.n	80037fe <quorem+0xec>
 80037b2:	4629      	mov	r1, r5
 80037b4:	2000      	movs	r0, #0
 80037b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80037ba:	f8d1 c000 	ldr.w	ip, [r1]
 80037be:	fa1f fe82 	uxth.w	lr, r2
 80037c2:	fa1f f38c 	uxth.w	r3, ip
 80037c6:	eba3 030e 	sub.w	r3, r3, lr
 80037ca:	4403      	add	r3, r0
 80037cc:	0c12      	lsrs	r2, r2, #16
 80037ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80037d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037dc:	45c1      	cmp	r9, r8
 80037de:	f841 3b04 	str.w	r3, [r1], #4
 80037e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80037e6:	d2e6      	bcs.n	80037b6 <quorem+0xa4>
 80037e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037f0:	b922      	cbnz	r2, 80037fc <quorem+0xea>
 80037f2:	3b04      	subs	r3, #4
 80037f4:	429d      	cmp	r5, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	d30b      	bcc.n	8003812 <quorem+0x100>
 80037fa:	613c      	str	r4, [r7, #16]
 80037fc:	3601      	adds	r6, #1
 80037fe:	4630      	mov	r0, r6
 8003800:	b003      	add	sp, #12
 8003802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	3b04      	subs	r3, #4
 800380a:	2a00      	cmp	r2, #0
 800380c:	d1cb      	bne.n	80037a6 <quorem+0x94>
 800380e:	3c01      	subs	r4, #1
 8003810:	e7c6      	b.n	80037a0 <quorem+0x8e>
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	3b04      	subs	r3, #4
 8003816:	2a00      	cmp	r2, #0
 8003818:	d1ef      	bne.n	80037fa <quorem+0xe8>
 800381a:	3c01      	subs	r4, #1
 800381c:	e7ea      	b.n	80037f4 <quorem+0xe2>
 800381e:	2000      	movs	r0, #0
 8003820:	e7ee      	b.n	8003800 <quorem+0xee>
 8003822:	0000      	movs	r0, r0
 8003824:	0000      	movs	r0, r0
	...

08003828 <_dtoa_r>:
 8003828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	69c7      	ldr	r7, [r0, #28]
 800382e:	b097      	sub	sp, #92	@ 0x5c
 8003830:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003834:	ec55 4b10 	vmov	r4, r5, d0
 8003838:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800383a:	9107      	str	r1, [sp, #28]
 800383c:	4681      	mov	r9, r0
 800383e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003840:	9311      	str	r3, [sp, #68]	@ 0x44
 8003842:	b97f      	cbnz	r7, 8003864 <_dtoa_r+0x3c>
 8003844:	2010      	movs	r0, #16
 8003846:	f000 fe09 	bl	800445c <malloc>
 800384a:	4602      	mov	r2, r0
 800384c:	f8c9 001c 	str.w	r0, [r9, #28]
 8003850:	b920      	cbnz	r0, 800385c <_dtoa_r+0x34>
 8003852:	4ba9      	ldr	r3, [pc, #676]	@ (8003af8 <_dtoa_r+0x2d0>)
 8003854:	21ef      	movs	r1, #239	@ 0xef
 8003856:	48a9      	ldr	r0, [pc, #676]	@ (8003afc <_dtoa_r+0x2d4>)
 8003858:	f001 fc06 	bl	8005068 <__assert_func>
 800385c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003860:	6007      	str	r7, [r0, #0]
 8003862:	60c7      	str	r7, [r0, #12]
 8003864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	b159      	cbz	r1, 8003884 <_dtoa_r+0x5c>
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	604a      	str	r2, [r1, #4]
 8003870:	2301      	movs	r3, #1
 8003872:	4093      	lsls	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
 8003876:	4648      	mov	r0, r9
 8003878:	f000 fee6 	bl	8004648 <_Bfree>
 800387c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	1e2b      	subs	r3, r5, #0
 8003886:	bfb9      	ittee	lt
 8003888:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800388c:	9305      	strlt	r3, [sp, #20]
 800388e:	2300      	movge	r3, #0
 8003890:	6033      	strge	r3, [r6, #0]
 8003892:	9f05      	ldr	r7, [sp, #20]
 8003894:	4b9a      	ldr	r3, [pc, #616]	@ (8003b00 <_dtoa_r+0x2d8>)
 8003896:	bfbc      	itt	lt
 8003898:	2201      	movlt	r2, #1
 800389a:	6032      	strlt	r2, [r6, #0]
 800389c:	43bb      	bics	r3, r7
 800389e:	d112      	bne.n	80038c6 <_dtoa_r+0x9e>
 80038a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80038a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80038ac:	4323      	orrs	r3, r4
 80038ae:	f000 855a 	beq.w	8004366 <_dtoa_r+0xb3e>
 80038b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003b14 <_dtoa_r+0x2ec>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 855c 	beq.w	8004376 <_dtoa_r+0xb4e>
 80038be:	f10a 0303 	add.w	r3, sl, #3
 80038c2:	f000 bd56 	b.w	8004372 <_dtoa_r+0xb4a>
 80038c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80038ca:	2200      	movs	r2, #0
 80038cc:	ec51 0b17 	vmov	r0, r1, d7
 80038d0:	2300      	movs	r3, #0
 80038d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80038d6:	f7fd f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80038da:	4680      	mov	r8, r0
 80038dc:	b158      	cbz	r0, 80038f6 <_dtoa_r+0xce>
 80038de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80038e0:	2301      	movs	r3, #1
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038e6:	b113      	cbz	r3, 80038ee <_dtoa_r+0xc6>
 80038e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80038ea:	4b86      	ldr	r3, [pc, #536]	@ (8003b04 <_dtoa_r+0x2dc>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003b18 <_dtoa_r+0x2f0>
 80038f2:	f000 bd40 	b.w	8004376 <_dtoa_r+0xb4e>
 80038f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80038fa:	aa14      	add	r2, sp, #80	@ 0x50
 80038fc:	a915      	add	r1, sp, #84	@ 0x54
 80038fe:	4648      	mov	r0, r9
 8003900:	f001 f984 	bl	8004c0c <__d2b>
 8003904:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003908:	9002      	str	r0, [sp, #8]
 800390a:	2e00      	cmp	r6, #0
 800390c:	d078      	beq.n	8003a00 <_dtoa_r+0x1d8>
 800390e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003910:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800391c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003920:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003924:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003928:	4619      	mov	r1, r3
 800392a:	2200      	movs	r2, #0
 800392c:	4b76      	ldr	r3, [pc, #472]	@ (8003b08 <_dtoa_r+0x2e0>)
 800392e:	f7fc fcab 	bl	8000288 <__aeabi_dsub>
 8003932:	a36b      	add	r3, pc, #428	@ (adr r3, 8003ae0 <_dtoa_r+0x2b8>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fe5e 	bl	80005f8 <__aeabi_dmul>
 800393c:	a36a      	add	r3, pc, #424	@ (adr r3, 8003ae8 <_dtoa_r+0x2c0>)
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f7fc fca3 	bl	800028c <__adddf3>
 8003946:	4604      	mov	r4, r0
 8003948:	4630      	mov	r0, r6
 800394a:	460d      	mov	r5, r1
 800394c:	f7fc fdea 	bl	8000524 <__aeabi_i2d>
 8003950:	a367      	add	r3, pc, #412	@ (adr r3, 8003af0 <_dtoa_r+0x2c8>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fe4f 	bl	80005f8 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4620      	mov	r0, r4
 8003960:	4629      	mov	r1, r5
 8003962:	f7fc fc93 	bl	800028c <__adddf3>
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	f7fd f8f5 	bl	8000b58 <__aeabi_d2iz>
 800396e:	2200      	movs	r2, #0
 8003970:	4607      	mov	r7, r0
 8003972:	2300      	movs	r3, #0
 8003974:	4620      	mov	r0, r4
 8003976:	4629      	mov	r1, r5
 8003978:	f7fd f8b0 	bl	8000adc <__aeabi_dcmplt>
 800397c:	b140      	cbz	r0, 8003990 <_dtoa_r+0x168>
 800397e:	4638      	mov	r0, r7
 8003980:	f7fc fdd0 	bl	8000524 <__aeabi_i2d>
 8003984:	4622      	mov	r2, r4
 8003986:	462b      	mov	r3, r5
 8003988:	f7fd f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800398c:	b900      	cbnz	r0, 8003990 <_dtoa_r+0x168>
 800398e:	3f01      	subs	r7, #1
 8003990:	2f16      	cmp	r7, #22
 8003992:	d852      	bhi.n	8003a3a <_dtoa_r+0x212>
 8003994:	4b5d      	ldr	r3, [pc, #372]	@ (8003b0c <_dtoa_r+0x2e4>)
 8003996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80039a2:	f7fd f89b 	bl	8000adc <__aeabi_dcmplt>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d049      	beq.n	8003a3e <_dtoa_r+0x216>
 80039aa:	3f01      	subs	r7, #1
 80039ac:	2300      	movs	r3, #0
 80039ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80039b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80039b2:	1b9b      	subs	r3, r3, r6
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	bf45      	ittet	mi
 80039b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80039bc:	9300      	strmi	r3, [sp, #0]
 80039be:	2300      	movpl	r3, #0
 80039c0:	2300      	movmi	r3, #0
 80039c2:	9206      	str	r2, [sp, #24]
 80039c4:	bf54      	ite	pl
 80039c6:	9300      	strpl	r3, [sp, #0]
 80039c8:	9306      	strmi	r3, [sp, #24]
 80039ca:	2f00      	cmp	r7, #0
 80039cc:	db39      	blt.n	8003a42 <_dtoa_r+0x21a>
 80039ce:	9b06      	ldr	r3, [sp, #24]
 80039d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80039d2:	443b      	add	r3, r7
 80039d4:	9306      	str	r3, [sp, #24]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9308      	str	r3, [sp, #32]
 80039da:	9b07      	ldr	r3, [sp, #28]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d863      	bhi.n	8003aa8 <_dtoa_r+0x280>
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	bfc4      	itt	gt
 80039e4:	3b04      	subgt	r3, #4
 80039e6:	9307      	strgt	r3, [sp, #28]
 80039e8:	9b07      	ldr	r3, [sp, #28]
 80039ea:	f1a3 0302 	sub.w	r3, r3, #2
 80039ee:	bfcc      	ite	gt
 80039f0:	2400      	movgt	r4, #0
 80039f2:	2401      	movle	r4, #1
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d863      	bhi.n	8003ac0 <_dtoa_r+0x298>
 80039f8:	e8df f003 	tbb	[pc, r3]
 80039fc:	2b375452 	.word	0x2b375452
 8003a00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003a04:	441e      	add	r6, r3
 8003a06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	bfc1      	itttt	gt
 8003a0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003a12:	409f      	lslgt	r7, r3
 8003a14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003a18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003a1c:	bfd6      	itet	le
 8003a1e:	f1c3 0320 	rsble	r3, r3, #32
 8003a22:	ea47 0003 	orrgt.w	r0, r7, r3
 8003a26:	fa04 f003 	lslle.w	r0, r4, r3
 8003a2a:	f7fc fd6b 	bl	8000504 <__aeabi_ui2d>
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003a34:	3e01      	subs	r6, #1
 8003a36:	9212      	str	r2, [sp, #72]	@ 0x48
 8003a38:	e776      	b.n	8003928 <_dtoa_r+0x100>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e7b7      	b.n	80039ae <_dtoa_r+0x186>
 8003a3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8003a40:	e7b6      	b.n	80039b0 <_dtoa_r+0x188>
 8003a42:	9b00      	ldr	r3, [sp, #0]
 8003a44:	1bdb      	subs	r3, r3, r7
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	427b      	negs	r3, r7
 8003a4a:	9308      	str	r3, [sp, #32]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8003a50:	e7c3      	b.n	80039da <_dtoa_r+0x1b2>
 8003a52:	2301      	movs	r3, #1
 8003a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003a58:	eb07 0b03 	add.w	fp, r7, r3
 8003a5c:	f10b 0301 	add.w	r3, fp, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	bfb8      	it	lt
 8003a66:	2301      	movlt	r3, #1
 8003a68:	e006      	b.n	8003a78 <_dtoa_r+0x250>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dd28      	ble.n	8003ac6 <_dtoa_r+0x29e>
 8003a74:	469b      	mov	fp, r3
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f102 0514 	add.w	r5, r2, #20
 8003a84:	429d      	cmp	r5, r3
 8003a86:	d926      	bls.n	8003ad6 <_dtoa_r+0x2ae>
 8003a88:	6041      	str	r1, [r0, #4]
 8003a8a:	4648      	mov	r0, r9
 8003a8c:	f000 fd9c 	bl	80045c8 <_Balloc>
 8003a90:	4682      	mov	sl, r0
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d142      	bne.n	8003b1c <_dtoa_r+0x2f4>
 8003a96:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <_dtoa_r+0x2e8>)
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8003a9e:	e6da      	b.n	8003856 <_dtoa_r+0x2e>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e7e3      	b.n	8003a6c <_dtoa_r+0x244>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e7d5      	b.n	8003a54 <_dtoa_r+0x22c>
 8003aa8:	2401      	movs	r4, #1
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9307      	str	r3, [sp, #28]
 8003aae:	9409      	str	r4, [sp, #36]	@ 0x24
 8003ab0:	f04f 3bff 	mov.w	fp, #4294967295
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8cd b00c 	str.w	fp, [sp, #12]
 8003aba:	2312      	movs	r3, #18
 8003abc:	920c      	str	r2, [sp, #48]	@ 0x30
 8003abe:	e7db      	b.n	8003a78 <_dtoa_r+0x250>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac4:	e7f4      	b.n	8003ab0 <_dtoa_r+0x288>
 8003ac6:	f04f 0b01 	mov.w	fp, #1
 8003aca:	f8cd b00c 	str.w	fp, [sp, #12]
 8003ace:	465b      	mov	r3, fp
 8003ad0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003ad4:	e7d0      	b.n	8003a78 <_dtoa_r+0x250>
 8003ad6:	3101      	adds	r1, #1
 8003ad8:	0052      	lsls	r2, r2, #1
 8003ada:	e7d1      	b.n	8003a80 <_dtoa_r+0x258>
 8003adc:	f3af 8000 	nop.w
 8003ae0:	636f4361 	.word	0x636f4361
 8003ae4:	3fd287a7 	.word	0x3fd287a7
 8003ae8:	8b60c8b3 	.word	0x8b60c8b3
 8003aec:	3fc68a28 	.word	0x3fc68a28
 8003af0:	509f79fb 	.word	0x509f79fb
 8003af4:	3fd34413 	.word	0x3fd34413
 8003af8:	0800529b 	.word	0x0800529b
 8003afc:	080052b2 	.word	0x080052b2
 8003b00:	7ff00000 	.word	0x7ff00000
 8003b04:	0800526b 	.word	0x0800526b
 8003b08:	3ff80000 	.word	0x3ff80000
 8003b0c:	08005400 	.word	0x08005400
 8003b10:	0800530a 	.word	0x0800530a
 8003b14:	08005297 	.word	0x08005297
 8003b18:	0800526a 	.word	0x0800526a
 8003b1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003b20:	6018      	str	r0, [r3, #0]
 8003b22:	9b03      	ldr	r3, [sp, #12]
 8003b24:	2b0e      	cmp	r3, #14
 8003b26:	f200 80a1 	bhi.w	8003c6c <_dtoa_r+0x444>
 8003b2a:	2c00      	cmp	r4, #0
 8003b2c:	f000 809e 	beq.w	8003c6c <_dtoa_r+0x444>
 8003b30:	2f00      	cmp	r7, #0
 8003b32:	dd33      	ble.n	8003b9c <_dtoa_r+0x374>
 8003b34:	4b9c      	ldr	r3, [pc, #624]	@ (8003da8 <_dtoa_r+0x580>)
 8003b36:	f007 020f 	and.w	r2, r7, #15
 8003b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b3e:	ed93 7b00 	vldr	d7, [r3]
 8003b42:	05f8      	lsls	r0, r7, #23
 8003b44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003b48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003b4c:	d516      	bpl.n	8003b7c <_dtoa_r+0x354>
 8003b4e:	4b97      	ldr	r3, [pc, #604]	@ (8003dac <_dtoa_r+0x584>)
 8003b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b58:	f7fc fe78 	bl	800084c <__aeabi_ddiv>
 8003b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b60:	f004 040f 	and.w	r4, r4, #15
 8003b64:	2603      	movs	r6, #3
 8003b66:	4d91      	ldr	r5, [pc, #580]	@ (8003dac <_dtoa_r+0x584>)
 8003b68:	b954      	cbnz	r4, 8003b80 <_dtoa_r+0x358>
 8003b6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b72:	f7fc fe6b 	bl	800084c <__aeabi_ddiv>
 8003b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b7a:	e028      	b.n	8003bce <_dtoa_r+0x3a6>
 8003b7c:	2602      	movs	r6, #2
 8003b7e:	e7f2      	b.n	8003b66 <_dtoa_r+0x33e>
 8003b80:	07e1      	lsls	r1, r4, #31
 8003b82:	d508      	bpl.n	8003b96 <_dtoa_r+0x36e>
 8003b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003b88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b8c:	f7fc fd34 	bl	80005f8 <__aeabi_dmul>
 8003b90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003b94:	3601      	adds	r6, #1
 8003b96:	1064      	asrs	r4, r4, #1
 8003b98:	3508      	adds	r5, #8
 8003b9a:	e7e5      	b.n	8003b68 <_dtoa_r+0x340>
 8003b9c:	f000 80af 	beq.w	8003cfe <_dtoa_r+0x4d6>
 8003ba0:	427c      	negs	r4, r7
 8003ba2:	4b81      	ldr	r3, [pc, #516]	@ (8003da8 <_dtoa_r+0x580>)
 8003ba4:	4d81      	ldr	r5, [pc, #516]	@ (8003dac <_dtoa_r+0x584>)
 8003ba6:	f004 020f 	and.w	r2, r4, #15
 8003baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bb6:	f7fc fd1f 	bl	80005f8 <__aeabi_dmul>
 8003bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bbe:	1124      	asrs	r4, r4, #4
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2602      	movs	r6, #2
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	f040 808f 	bne.w	8003ce8 <_dtoa_r+0x4c0>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d3      	bne.n	8003b76 <_dtoa_r+0x34e>
 8003bce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003bd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8094 	beq.w	8003d02 <_dtoa_r+0x4da>
 8003bda:	4b75      	ldr	r3, [pc, #468]	@ (8003db0 <_dtoa_r+0x588>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4620      	mov	r0, r4
 8003be0:	4629      	mov	r1, r5
 8003be2:	f7fc ff7b 	bl	8000adc <__aeabi_dcmplt>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f000 808b 	beq.w	8003d02 <_dtoa_r+0x4da>
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8087 	beq.w	8003d02 <_dtoa_r+0x4da>
 8003bf4:	f1bb 0f00 	cmp.w	fp, #0
 8003bf8:	dd34      	ble.n	8003c64 <_dtoa_r+0x43c>
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4b6d      	ldr	r3, [pc, #436]	@ (8003db4 <_dtoa_r+0x58c>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fc fcf9 	bl	80005f8 <__aeabi_dmul>
 8003c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8003c0e:	3601      	adds	r6, #1
 8003c10:	465c      	mov	r4, fp
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7fc fc86 	bl	8000524 <__aeabi_i2d>
 8003c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c1c:	f7fc fcec 	bl	80005f8 <__aeabi_dmul>
 8003c20:	4b65      	ldr	r3, [pc, #404]	@ (8003db8 <_dtoa_r+0x590>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	f7fc fb32 	bl	800028c <__adddf3>
 8003c28:	4605      	mov	r5, r0
 8003c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	d16a      	bne.n	8003d08 <_dtoa_r+0x4e0>
 8003c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c36:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <_dtoa_r+0x594>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f7fc fb25 	bl	8000288 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c46:	462a      	mov	r2, r5
 8003c48:	4633      	mov	r3, r6
 8003c4a:	f7fc ff65 	bl	8000b18 <__aeabi_dcmpgt>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	f040 8298 	bne.w	8004184 <_dtoa_r+0x95c>
 8003c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c58:	462a      	mov	r2, r5
 8003c5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003c5e:	f7fc ff3d 	bl	8000adc <__aeabi_dcmplt>
 8003c62:	bb38      	cbnz	r0, 8003cb4 <_dtoa_r+0x48c>
 8003c64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003c68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003c6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f2c0 8157 	blt.w	8003f22 <_dtoa_r+0x6fa>
 8003c74:	2f0e      	cmp	r7, #14
 8003c76:	f300 8154 	bgt.w	8003f22 <_dtoa_r+0x6fa>
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003da8 <_dtoa_r+0x580>)
 8003c7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c80:	ed93 7b00 	vldr	d7, [r3]
 8003c84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	ed8d 7b00 	vstr	d7, [sp]
 8003c8c:	f280 80e5 	bge.w	8003e5a <_dtoa_r+0x632>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f300 80e1 	bgt.w	8003e5a <_dtoa_r+0x632>
 8003c98:	d10c      	bne.n	8003cb4 <_dtoa_r+0x48c>
 8003c9a:	4b48      	ldr	r3, [pc, #288]	@ (8003dbc <_dtoa_r+0x594>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	ec51 0b17 	vmov	r0, r1, d7
 8003ca2:	f7fc fca9 	bl	80005f8 <__aeabi_dmul>
 8003ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003caa:	f7fc ff2b 	bl	8000b04 <__aeabi_dcmpge>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	f000 8266 	beq.w	8004180 <_dtoa_r+0x958>
 8003cb4:	2400      	movs	r4, #0
 8003cb6:	4625      	mov	r5, r4
 8003cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003cba:	4656      	mov	r6, sl
 8003cbc:	ea6f 0803 	mvn.w	r8, r3
 8003cc0:	2700      	movs	r7, #0
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	4648      	mov	r0, r9
 8003cc6:	f000 fcbf 	bl	8004648 <_Bfree>
 8003cca:	2d00      	cmp	r5, #0
 8003ccc:	f000 80bd 	beq.w	8003e4a <_dtoa_r+0x622>
 8003cd0:	b12f      	cbz	r7, 8003cde <_dtoa_r+0x4b6>
 8003cd2:	42af      	cmp	r7, r5
 8003cd4:	d003      	beq.n	8003cde <_dtoa_r+0x4b6>
 8003cd6:	4639      	mov	r1, r7
 8003cd8:	4648      	mov	r0, r9
 8003cda:	f000 fcb5 	bl	8004648 <_Bfree>
 8003cde:	4629      	mov	r1, r5
 8003ce0:	4648      	mov	r0, r9
 8003ce2:	f000 fcb1 	bl	8004648 <_Bfree>
 8003ce6:	e0b0      	b.n	8003e4a <_dtoa_r+0x622>
 8003ce8:	07e2      	lsls	r2, r4, #31
 8003cea:	d505      	bpl.n	8003cf8 <_dtoa_r+0x4d0>
 8003cec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cf0:	f7fc fc82 	bl	80005f8 <__aeabi_dmul>
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	1064      	asrs	r4, r4, #1
 8003cfa:	3508      	adds	r5, #8
 8003cfc:	e762      	b.n	8003bc4 <_dtoa_r+0x39c>
 8003cfe:	2602      	movs	r6, #2
 8003d00:	e765      	b.n	8003bce <_dtoa_r+0x3a6>
 8003d02:	9c03      	ldr	r4, [sp, #12]
 8003d04:	46b8      	mov	r8, r7
 8003d06:	e784      	b.n	8003c12 <_dtoa_r+0x3ea>
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <_dtoa_r+0x580>)
 8003d0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003d0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d14:	4454      	add	r4, sl
 8003d16:	2900      	cmp	r1, #0
 8003d18:	d054      	beq.n	8003dc4 <_dtoa_r+0x59c>
 8003d1a:	4929      	ldr	r1, [pc, #164]	@ (8003dc0 <_dtoa_r+0x598>)
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fc fd95 	bl	800084c <__aeabi_ddiv>
 8003d22:	4633      	mov	r3, r6
 8003d24:	462a      	mov	r2, r5
 8003d26:	f7fc faaf 	bl	8000288 <__aeabi_dsub>
 8003d2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003d2e:	4656      	mov	r6, sl
 8003d30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d34:	f7fc ff10 	bl	8000b58 <__aeabi_d2iz>
 8003d38:	4605      	mov	r5, r0
 8003d3a:	f7fc fbf3 	bl	8000524 <__aeabi_i2d>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d46:	f7fc fa9f 	bl	8000288 <__aeabi_dsub>
 8003d4a:	3530      	adds	r5, #48	@ 0x30
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d54:	f806 5b01 	strb.w	r5, [r6], #1
 8003d58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003d5c:	f7fc febe 	bl	8000adc <__aeabi_dcmplt>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d172      	bne.n	8003e4a <_dtoa_r+0x622>
 8003d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d68:	4911      	ldr	r1, [pc, #68]	@ (8003db0 <_dtoa_r+0x588>)
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7fc fa8c 	bl	8000288 <__aeabi_dsub>
 8003d70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003d74:	f7fc feb2 	bl	8000adc <__aeabi_dcmplt>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	f040 80b4 	bne.w	8003ee6 <_dtoa_r+0x6be>
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	f43f af70 	beq.w	8003c64 <_dtoa_r+0x43c>
 8003d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <_dtoa_r+0x58c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f7fc fc34 	bl	80005f8 <__aeabi_dmul>
 8003d90:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <_dtoa_r+0x58c>)
 8003d92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003d96:	2200      	movs	r2, #0
 8003d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d9c:	f7fc fc2c 	bl	80005f8 <__aeabi_dmul>
 8003da0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003da4:	e7c4      	b.n	8003d30 <_dtoa_r+0x508>
 8003da6:	bf00      	nop
 8003da8:	08005400 	.word	0x08005400
 8003dac:	080053d8 	.word	0x080053d8
 8003db0:	3ff00000 	.word	0x3ff00000
 8003db4:	40240000 	.word	0x40240000
 8003db8:	401c0000 	.word	0x401c0000
 8003dbc:	40140000 	.word	0x40140000
 8003dc0:	3fe00000 	.word	0x3fe00000
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f7fc fc16 	bl	80005f8 <__aeabi_dmul>
 8003dcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003dd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003dd2:	4656      	mov	r6, sl
 8003dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dd8:	f7fc febe 	bl	8000b58 <__aeabi_d2iz>
 8003ddc:	4605      	mov	r5, r0
 8003dde:	f7fc fba1 	bl	8000524 <__aeabi_i2d>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dea:	f7fc fa4d 	bl	8000288 <__aeabi_dsub>
 8003dee:	3530      	adds	r5, #48	@ 0x30
 8003df0:	f806 5b01 	strb.w	r5, [r6], #1
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	d124      	bne.n	8003e4e <_dtoa_r+0x626>
 8003e04:	4baf      	ldr	r3, [pc, #700]	@ (80040c4 <_dtoa_r+0x89c>)
 8003e06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003e0a:	f7fc fa3f 	bl	800028c <__adddf3>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e16:	f7fc fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d163      	bne.n	8003ee6 <_dtoa_r+0x6be>
 8003e1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003e22:	49a8      	ldr	r1, [pc, #672]	@ (80040c4 <_dtoa_r+0x89c>)
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fc fa2f 	bl	8000288 <__aeabi_dsub>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e32:	f7fc fe53 	bl	8000adc <__aeabi_dcmplt>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	f43f af14 	beq.w	8003c64 <_dtoa_r+0x43c>
 8003e3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003e3e:	1e73      	subs	r3, r6, #1
 8003e40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003e42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003e46:	2b30      	cmp	r3, #48	@ 0x30
 8003e48:	d0f8      	beq.n	8003e3c <_dtoa_r+0x614>
 8003e4a:	4647      	mov	r7, r8
 8003e4c:	e03b      	b.n	8003ec6 <_dtoa_r+0x69e>
 8003e4e:	4b9e      	ldr	r3, [pc, #632]	@ (80040c8 <_dtoa_r+0x8a0>)
 8003e50:	f7fc fbd2 	bl	80005f8 <__aeabi_dmul>
 8003e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e58:	e7bc      	b.n	8003dd4 <_dtoa_r+0x5ac>
 8003e5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003e5e:	4656      	mov	r6, sl
 8003e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7fc fcf0 	bl	800084c <__aeabi_ddiv>
 8003e6c:	f7fc fe74 	bl	8000b58 <__aeabi_d2iz>
 8003e70:	4680      	mov	r8, r0
 8003e72:	f7fc fb57 	bl	8000524 <__aeabi_i2d>
 8003e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e7a:	f7fc fbbd 	bl	80005f8 <__aeabi_dmul>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003e8a:	f7fc f9fd 	bl	8000288 <__aeabi_dsub>
 8003e8e:	f806 4b01 	strb.w	r4, [r6], #1
 8003e92:	9d03      	ldr	r5, [sp, #12]
 8003e94:	eba6 040a 	sub.w	r4, r6, sl
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	d133      	bne.n	8003f08 <_dtoa_r+0x6e0>
 8003ea0:	f7fc f9f4 	bl	800028c <__adddf3>
 8003ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	460d      	mov	r5, r1
 8003eac:	f7fc fe34 	bl	8000b18 <__aeabi_dcmpgt>
 8003eb0:	b9c0      	cbnz	r0, 8003ee4 <_dtoa_r+0x6bc>
 8003eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f7fc fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ebe:	b110      	cbz	r0, 8003ec6 <_dtoa_r+0x69e>
 8003ec0:	f018 0f01 	tst.w	r8, #1
 8003ec4:	d10e      	bne.n	8003ee4 <_dtoa_r+0x6bc>
 8003ec6:	9902      	ldr	r1, [sp, #8]
 8003ec8:	4648      	mov	r0, r9
 8003eca:	f000 fbbd 	bl	8004648 <_Bfree>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	7033      	strb	r3, [r6, #0]
 8003ed2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ed4:	3701      	adds	r7, #1
 8003ed6:	601f      	str	r7, [r3, #0]
 8003ed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 824b 	beq.w	8004376 <_dtoa_r+0xb4e>
 8003ee0:	601e      	str	r6, [r3, #0]
 8003ee2:	e248      	b.n	8004376 <_dtoa_r+0xb4e>
 8003ee4:	46b8      	mov	r8, r7
 8003ee6:	4633      	mov	r3, r6
 8003ee8:	461e      	mov	r6, r3
 8003eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003eee:	2a39      	cmp	r2, #57	@ 0x39
 8003ef0:	d106      	bne.n	8003f00 <_dtoa_r+0x6d8>
 8003ef2:	459a      	cmp	sl, r3
 8003ef4:	d1f8      	bne.n	8003ee8 <_dtoa_r+0x6c0>
 8003ef6:	2230      	movs	r2, #48	@ 0x30
 8003ef8:	f108 0801 	add.w	r8, r8, #1
 8003efc:	f88a 2000 	strb.w	r2, [sl]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	3201      	adds	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e7a0      	b.n	8003e4a <_dtoa_r+0x622>
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <_dtoa_r+0x8a0>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f7fc fb74 	bl	80005f8 <__aeabi_dmul>
 8003f10:	2200      	movs	r2, #0
 8003f12:	2300      	movs	r3, #0
 8003f14:	4604      	mov	r4, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	f7fc fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d09f      	beq.n	8003e60 <_dtoa_r+0x638>
 8003f20:	e7d1      	b.n	8003ec6 <_dtoa_r+0x69e>
 8003f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	f000 80ea 	beq.w	80040fe <_dtoa_r+0x8d6>
 8003f2a:	9a07      	ldr	r2, [sp, #28]
 8003f2c:	2a01      	cmp	r2, #1
 8003f2e:	f300 80cd 	bgt.w	80040cc <_dtoa_r+0x8a4>
 8003f32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	f000 80c1 	beq.w	80040bc <_dtoa_r+0x894>
 8003f3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003f3e:	9c08      	ldr	r4, [sp, #32]
 8003f40:	9e00      	ldr	r6, [sp, #0]
 8003f42:	9a00      	ldr	r2, [sp, #0]
 8003f44:	441a      	add	r2, r3
 8003f46:	9200      	str	r2, [sp, #0]
 8003f48:	9a06      	ldr	r2, [sp, #24]
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	441a      	add	r2, r3
 8003f4e:	4648      	mov	r0, r9
 8003f50:	9206      	str	r2, [sp, #24]
 8003f52:	f000 fc2d 	bl	80047b0 <__i2b>
 8003f56:	4605      	mov	r5, r0
 8003f58:	b166      	cbz	r6, 8003f74 <_dtoa_r+0x74c>
 8003f5a:	9b06      	ldr	r3, [sp, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dd09      	ble.n	8003f74 <_dtoa_r+0x74c>
 8003f60:	42b3      	cmp	r3, r6
 8003f62:	9a00      	ldr	r2, [sp, #0]
 8003f64:	bfa8      	it	ge
 8003f66:	4633      	movge	r3, r6
 8003f68:	1ad2      	subs	r2, r2, r3
 8003f6a:	9200      	str	r2, [sp, #0]
 8003f6c:	9a06      	ldr	r2, [sp, #24]
 8003f6e:	1af6      	subs	r6, r6, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	9306      	str	r3, [sp, #24]
 8003f74:	9b08      	ldr	r3, [sp, #32]
 8003f76:	b30b      	cbz	r3, 8003fbc <_dtoa_r+0x794>
 8003f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80c6 	beq.w	800410c <_dtoa_r+0x8e4>
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	f000 80c0 	beq.w	8004106 <_dtoa_r+0x8de>
 8003f86:	4629      	mov	r1, r5
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4648      	mov	r0, r9
 8003f8c:	f000 fcc8 	bl	8004920 <__pow5mult>
 8003f90:	9a02      	ldr	r2, [sp, #8]
 8003f92:	4601      	mov	r1, r0
 8003f94:	4605      	mov	r5, r0
 8003f96:	4648      	mov	r0, r9
 8003f98:	f000 fc20 	bl	80047dc <__multiply>
 8003f9c:	9902      	ldr	r1, [sp, #8]
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	4648      	mov	r0, r9
 8003fa2:	f000 fb51 	bl	8004648 <_Bfree>
 8003fa6:	9b08      	ldr	r3, [sp, #32]
 8003fa8:	1b1b      	subs	r3, r3, r4
 8003faa:	9308      	str	r3, [sp, #32]
 8003fac:	f000 80b1 	beq.w	8004112 <_dtoa_r+0x8ea>
 8003fb0:	9a08      	ldr	r2, [sp, #32]
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	4648      	mov	r0, r9
 8003fb6:	f000 fcb3 	bl	8004920 <__pow5mult>
 8003fba:	9002      	str	r0, [sp, #8]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4648      	mov	r0, r9
 8003fc0:	f000 fbf6 	bl	80047b0 <__i2b>
 8003fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 81d8 	beq.w	800437e <_dtoa_r+0xb56>
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	4648      	mov	r0, r9
 8003fd4:	f000 fca4 	bl	8004920 <__pow5mult>
 8003fd8:	9b07      	ldr	r3, [sp, #28]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	4604      	mov	r4, r0
 8003fde:	f300 809f 	bgt.w	8004120 <_dtoa_r+0x8f8>
 8003fe2:	9b04      	ldr	r3, [sp, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 8097 	bne.w	8004118 <_dtoa_r+0x8f0>
 8003fea:	9b05      	ldr	r3, [sp, #20]
 8003fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f040 8093 	bne.w	800411c <_dtoa_r+0x8f4>
 8003ff6:	9b05      	ldr	r3, [sp, #20]
 8003ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	051b      	lsls	r3, r3, #20
 8004000:	b133      	cbz	r3, 8004010 <_dtoa_r+0x7e8>
 8004002:	9b00      	ldr	r3, [sp, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	9b06      	ldr	r3, [sp, #24]
 800400a:	3301      	adds	r3, #1
 800400c:	9306      	str	r3, [sp, #24]
 800400e:	2301      	movs	r3, #1
 8004010:	9308      	str	r3, [sp, #32]
 8004012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 81b8 	beq.w	800438a <_dtoa_r+0xb62>
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004020:	6918      	ldr	r0, [r3, #16]
 8004022:	f000 fb79 	bl	8004718 <__hi0bits>
 8004026:	f1c0 0020 	rsb	r0, r0, #32
 800402a:	9b06      	ldr	r3, [sp, #24]
 800402c:	4418      	add	r0, r3
 800402e:	f010 001f 	ands.w	r0, r0, #31
 8004032:	f000 8082 	beq.w	800413a <_dtoa_r+0x912>
 8004036:	f1c0 0320 	rsb	r3, r0, #32
 800403a:	2b04      	cmp	r3, #4
 800403c:	dd73      	ble.n	8004126 <_dtoa_r+0x8fe>
 800403e:	9b00      	ldr	r3, [sp, #0]
 8004040:	f1c0 001c 	rsb	r0, r0, #28
 8004044:	4403      	add	r3, r0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	9b06      	ldr	r3, [sp, #24]
 800404a:	4403      	add	r3, r0
 800404c:	4406      	add	r6, r0
 800404e:	9306      	str	r3, [sp, #24]
 8004050:	9b00      	ldr	r3, [sp, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	dd05      	ble.n	8004062 <_dtoa_r+0x83a>
 8004056:	9902      	ldr	r1, [sp, #8]
 8004058:	461a      	mov	r2, r3
 800405a:	4648      	mov	r0, r9
 800405c:	f000 fcba 	bl	80049d4 <__lshift>
 8004060:	9002      	str	r0, [sp, #8]
 8004062:	9b06      	ldr	r3, [sp, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dd05      	ble.n	8004074 <_dtoa_r+0x84c>
 8004068:	4621      	mov	r1, r4
 800406a:	461a      	mov	r2, r3
 800406c:	4648      	mov	r0, r9
 800406e:	f000 fcb1 	bl	80049d4 <__lshift>
 8004072:	4604      	mov	r4, r0
 8004074:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d061      	beq.n	800413e <_dtoa_r+0x916>
 800407a:	9802      	ldr	r0, [sp, #8]
 800407c:	4621      	mov	r1, r4
 800407e:	f000 fd15 	bl	8004aac <__mcmp>
 8004082:	2800      	cmp	r0, #0
 8004084:	da5b      	bge.n	800413e <_dtoa_r+0x916>
 8004086:	2300      	movs	r3, #0
 8004088:	9902      	ldr	r1, [sp, #8]
 800408a:	220a      	movs	r2, #10
 800408c:	4648      	mov	r0, r9
 800408e:	f000 fafd 	bl	800468c <__multadd>
 8004092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004094:	9002      	str	r0, [sp, #8]
 8004096:	f107 38ff 	add.w	r8, r7, #4294967295
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8177 	beq.w	800438e <_dtoa_r+0xb66>
 80040a0:	4629      	mov	r1, r5
 80040a2:	2300      	movs	r3, #0
 80040a4:	220a      	movs	r2, #10
 80040a6:	4648      	mov	r0, r9
 80040a8:	f000 faf0 	bl	800468c <__multadd>
 80040ac:	f1bb 0f00 	cmp.w	fp, #0
 80040b0:	4605      	mov	r5, r0
 80040b2:	dc6f      	bgt.n	8004194 <_dtoa_r+0x96c>
 80040b4:	9b07      	ldr	r3, [sp, #28]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	dc49      	bgt.n	800414e <_dtoa_r+0x926>
 80040ba:	e06b      	b.n	8004194 <_dtoa_r+0x96c>
 80040bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80040be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80040c2:	e73c      	b.n	8003f3e <_dtoa_r+0x716>
 80040c4:	3fe00000 	.word	0x3fe00000
 80040c8:	40240000 	.word	0x40240000
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	1e5c      	subs	r4, r3, #1
 80040d0:	9b08      	ldr	r3, [sp, #32]
 80040d2:	42a3      	cmp	r3, r4
 80040d4:	db09      	blt.n	80040ea <_dtoa_r+0x8c2>
 80040d6:	1b1c      	subs	r4, r3, r4
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f6bf af30 	bge.w	8003f40 <_dtoa_r+0x718>
 80040e0:	9b00      	ldr	r3, [sp, #0]
 80040e2:	9a03      	ldr	r2, [sp, #12]
 80040e4:	1a9e      	subs	r6, r3, r2
 80040e6:	2300      	movs	r3, #0
 80040e8:	e72b      	b.n	8003f42 <_dtoa_r+0x71a>
 80040ea:	9b08      	ldr	r3, [sp, #32]
 80040ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80040ee:	9408      	str	r4, [sp, #32]
 80040f0:	1ae3      	subs	r3, r4, r3
 80040f2:	441a      	add	r2, r3
 80040f4:	9e00      	ldr	r6, [sp, #0]
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80040fa:	2400      	movs	r4, #0
 80040fc:	e721      	b.n	8003f42 <_dtoa_r+0x71a>
 80040fe:	9c08      	ldr	r4, [sp, #32]
 8004100:	9e00      	ldr	r6, [sp, #0]
 8004102:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004104:	e728      	b.n	8003f58 <_dtoa_r+0x730>
 8004106:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800410a:	e751      	b.n	8003fb0 <_dtoa_r+0x788>
 800410c:	9a08      	ldr	r2, [sp, #32]
 800410e:	9902      	ldr	r1, [sp, #8]
 8004110:	e750      	b.n	8003fb4 <_dtoa_r+0x78c>
 8004112:	f8cd 8008 	str.w	r8, [sp, #8]
 8004116:	e751      	b.n	8003fbc <_dtoa_r+0x794>
 8004118:	2300      	movs	r3, #0
 800411a:	e779      	b.n	8004010 <_dtoa_r+0x7e8>
 800411c:	9b04      	ldr	r3, [sp, #16]
 800411e:	e777      	b.n	8004010 <_dtoa_r+0x7e8>
 8004120:	2300      	movs	r3, #0
 8004122:	9308      	str	r3, [sp, #32]
 8004124:	e779      	b.n	800401a <_dtoa_r+0x7f2>
 8004126:	d093      	beq.n	8004050 <_dtoa_r+0x828>
 8004128:	9a00      	ldr	r2, [sp, #0]
 800412a:	331c      	adds	r3, #28
 800412c:	441a      	add	r2, r3
 800412e:	9200      	str	r2, [sp, #0]
 8004130:	9a06      	ldr	r2, [sp, #24]
 8004132:	441a      	add	r2, r3
 8004134:	441e      	add	r6, r3
 8004136:	9206      	str	r2, [sp, #24]
 8004138:	e78a      	b.n	8004050 <_dtoa_r+0x828>
 800413a:	4603      	mov	r3, r0
 800413c:	e7f4      	b.n	8004128 <_dtoa_r+0x900>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	46b8      	mov	r8, r7
 8004144:	dc20      	bgt.n	8004188 <_dtoa_r+0x960>
 8004146:	469b      	mov	fp, r3
 8004148:	9b07      	ldr	r3, [sp, #28]
 800414a:	2b02      	cmp	r3, #2
 800414c:	dd1e      	ble.n	800418c <_dtoa_r+0x964>
 800414e:	f1bb 0f00 	cmp.w	fp, #0
 8004152:	f47f adb1 	bne.w	8003cb8 <_dtoa_r+0x490>
 8004156:	4621      	mov	r1, r4
 8004158:	465b      	mov	r3, fp
 800415a:	2205      	movs	r2, #5
 800415c:	4648      	mov	r0, r9
 800415e:	f000 fa95 	bl	800468c <__multadd>
 8004162:	4601      	mov	r1, r0
 8004164:	4604      	mov	r4, r0
 8004166:	9802      	ldr	r0, [sp, #8]
 8004168:	f000 fca0 	bl	8004aac <__mcmp>
 800416c:	2800      	cmp	r0, #0
 800416e:	f77f ada3 	ble.w	8003cb8 <_dtoa_r+0x490>
 8004172:	4656      	mov	r6, sl
 8004174:	2331      	movs	r3, #49	@ 0x31
 8004176:	f806 3b01 	strb.w	r3, [r6], #1
 800417a:	f108 0801 	add.w	r8, r8, #1
 800417e:	e59f      	b.n	8003cc0 <_dtoa_r+0x498>
 8004180:	9c03      	ldr	r4, [sp, #12]
 8004182:	46b8      	mov	r8, r7
 8004184:	4625      	mov	r5, r4
 8004186:	e7f4      	b.n	8004172 <_dtoa_r+0x94a>
 8004188:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800418c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8101 	beq.w	8004396 <_dtoa_r+0xb6e>
 8004194:	2e00      	cmp	r6, #0
 8004196:	dd05      	ble.n	80041a4 <_dtoa_r+0x97c>
 8004198:	4629      	mov	r1, r5
 800419a:	4632      	mov	r2, r6
 800419c:	4648      	mov	r0, r9
 800419e:	f000 fc19 	bl	80049d4 <__lshift>
 80041a2:	4605      	mov	r5, r0
 80041a4:	9b08      	ldr	r3, [sp, #32]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d05c      	beq.n	8004264 <_dtoa_r+0xa3c>
 80041aa:	6869      	ldr	r1, [r5, #4]
 80041ac:	4648      	mov	r0, r9
 80041ae:	f000 fa0b 	bl	80045c8 <_Balloc>
 80041b2:	4606      	mov	r6, r0
 80041b4:	b928      	cbnz	r0, 80041c2 <_dtoa_r+0x99a>
 80041b6:	4b82      	ldr	r3, [pc, #520]	@ (80043c0 <_dtoa_r+0xb98>)
 80041b8:	4602      	mov	r2, r0
 80041ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80041be:	f7ff bb4a 	b.w	8003856 <_dtoa_r+0x2e>
 80041c2:	692a      	ldr	r2, [r5, #16]
 80041c4:	3202      	adds	r2, #2
 80041c6:	0092      	lsls	r2, r2, #2
 80041c8:	f105 010c 	add.w	r1, r5, #12
 80041cc:	300c      	adds	r0, #12
 80041ce:	f7ff fa92 	bl	80036f6 <memcpy>
 80041d2:	2201      	movs	r2, #1
 80041d4:	4631      	mov	r1, r6
 80041d6:	4648      	mov	r0, r9
 80041d8:	f000 fbfc 	bl	80049d4 <__lshift>
 80041dc:	f10a 0301 	add.w	r3, sl, #1
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	eb0a 030b 	add.w	r3, sl, fp
 80041e6:	9308      	str	r3, [sp, #32]
 80041e8:	9b04      	ldr	r3, [sp, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	462f      	mov	r7, r5
 80041f0:	9306      	str	r3, [sp, #24]
 80041f2:	4605      	mov	r5, r0
 80041f4:	9b00      	ldr	r3, [sp, #0]
 80041f6:	9802      	ldr	r0, [sp, #8]
 80041f8:	4621      	mov	r1, r4
 80041fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80041fe:	f7ff fa88 	bl	8003712 <quorem>
 8004202:	4603      	mov	r3, r0
 8004204:	3330      	adds	r3, #48	@ 0x30
 8004206:	9003      	str	r0, [sp, #12]
 8004208:	4639      	mov	r1, r7
 800420a:	9802      	ldr	r0, [sp, #8]
 800420c:	9309      	str	r3, [sp, #36]	@ 0x24
 800420e:	f000 fc4d 	bl	8004aac <__mcmp>
 8004212:	462a      	mov	r2, r5
 8004214:	9004      	str	r0, [sp, #16]
 8004216:	4621      	mov	r1, r4
 8004218:	4648      	mov	r0, r9
 800421a:	f000 fc63 	bl	8004ae4 <__mdiff>
 800421e:	68c2      	ldr	r2, [r0, #12]
 8004220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004222:	4606      	mov	r6, r0
 8004224:	bb02      	cbnz	r2, 8004268 <_dtoa_r+0xa40>
 8004226:	4601      	mov	r1, r0
 8004228:	9802      	ldr	r0, [sp, #8]
 800422a:	f000 fc3f 	bl	8004aac <__mcmp>
 800422e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004230:	4602      	mov	r2, r0
 8004232:	4631      	mov	r1, r6
 8004234:	4648      	mov	r0, r9
 8004236:	920c      	str	r2, [sp, #48]	@ 0x30
 8004238:	9309      	str	r3, [sp, #36]	@ 0x24
 800423a:	f000 fa05 	bl	8004648 <_Bfree>
 800423e:	9b07      	ldr	r3, [sp, #28]
 8004240:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004242:	9e00      	ldr	r6, [sp, #0]
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	9b06      	ldr	r3, [sp, #24]
 800424a:	4319      	orrs	r1, r3
 800424c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800424e:	d10d      	bne.n	800426c <_dtoa_r+0xa44>
 8004250:	2b39      	cmp	r3, #57	@ 0x39
 8004252:	d027      	beq.n	80042a4 <_dtoa_r+0xa7c>
 8004254:	9a04      	ldr	r2, [sp, #16]
 8004256:	2a00      	cmp	r2, #0
 8004258:	dd01      	ble.n	800425e <_dtoa_r+0xa36>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	3331      	adds	r3, #49	@ 0x31
 800425e:	f88b 3000 	strb.w	r3, [fp]
 8004262:	e52e      	b.n	8003cc2 <_dtoa_r+0x49a>
 8004264:	4628      	mov	r0, r5
 8004266:	e7b9      	b.n	80041dc <_dtoa_r+0x9b4>
 8004268:	2201      	movs	r2, #1
 800426a:	e7e2      	b.n	8004232 <_dtoa_r+0xa0a>
 800426c:	9904      	ldr	r1, [sp, #16]
 800426e:	2900      	cmp	r1, #0
 8004270:	db04      	blt.n	800427c <_dtoa_r+0xa54>
 8004272:	9807      	ldr	r0, [sp, #28]
 8004274:	4301      	orrs	r1, r0
 8004276:	9806      	ldr	r0, [sp, #24]
 8004278:	4301      	orrs	r1, r0
 800427a:	d120      	bne.n	80042be <_dtoa_r+0xa96>
 800427c:	2a00      	cmp	r2, #0
 800427e:	ddee      	ble.n	800425e <_dtoa_r+0xa36>
 8004280:	9902      	ldr	r1, [sp, #8]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	4648      	mov	r0, r9
 8004288:	f000 fba4 	bl	80049d4 <__lshift>
 800428c:	4621      	mov	r1, r4
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	f000 fc0c 	bl	8004aac <__mcmp>
 8004294:	2800      	cmp	r0, #0
 8004296:	9b00      	ldr	r3, [sp, #0]
 8004298:	dc02      	bgt.n	80042a0 <_dtoa_r+0xa78>
 800429a:	d1e0      	bne.n	800425e <_dtoa_r+0xa36>
 800429c:	07da      	lsls	r2, r3, #31
 800429e:	d5de      	bpl.n	800425e <_dtoa_r+0xa36>
 80042a0:	2b39      	cmp	r3, #57	@ 0x39
 80042a2:	d1da      	bne.n	800425a <_dtoa_r+0xa32>
 80042a4:	2339      	movs	r3, #57	@ 0x39
 80042a6:	f88b 3000 	strb.w	r3, [fp]
 80042aa:	4633      	mov	r3, r6
 80042ac:	461e      	mov	r6, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80042b4:	2a39      	cmp	r2, #57	@ 0x39
 80042b6:	d04e      	beq.n	8004356 <_dtoa_r+0xb2e>
 80042b8:	3201      	adds	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e501      	b.n	8003cc2 <_dtoa_r+0x49a>
 80042be:	2a00      	cmp	r2, #0
 80042c0:	dd03      	ble.n	80042ca <_dtoa_r+0xaa2>
 80042c2:	2b39      	cmp	r3, #57	@ 0x39
 80042c4:	d0ee      	beq.n	80042a4 <_dtoa_r+0xa7c>
 80042c6:	3301      	adds	r3, #1
 80042c8:	e7c9      	b.n	800425e <_dtoa_r+0xa36>
 80042ca:	9a00      	ldr	r2, [sp, #0]
 80042cc:	9908      	ldr	r1, [sp, #32]
 80042ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80042d2:	428a      	cmp	r2, r1
 80042d4:	d028      	beq.n	8004328 <_dtoa_r+0xb00>
 80042d6:	9902      	ldr	r1, [sp, #8]
 80042d8:	2300      	movs	r3, #0
 80042da:	220a      	movs	r2, #10
 80042dc:	4648      	mov	r0, r9
 80042de:	f000 f9d5 	bl	800468c <__multadd>
 80042e2:	42af      	cmp	r7, r5
 80042e4:	9002      	str	r0, [sp, #8]
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	f04f 020a 	mov.w	r2, #10
 80042ee:	4639      	mov	r1, r7
 80042f0:	4648      	mov	r0, r9
 80042f2:	d107      	bne.n	8004304 <_dtoa_r+0xadc>
 80042f4:	f000 f9ca 	bl	800468c <__multadd>
 80042f8:	4607      	mov	r7, r0
 80042fa:	4605      	mov	r5, r0
 80042fc:	9b00      	ldr	r3, [sp, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	e777      	b.n	80041f4 <_dtoa_r+0x9cc>
 8004304:	f000 f9c2 	bl	800468c <__multadd>
 8004308:	4629      	mov	r1, r5
 800430a:	4607      	mov	r7, r0
 800430c:	2300      	movs	r3, #0
 800430e:	220a      	movs	r2, #10
 8004310:	4648      	mov	r0, r9
 8004312:	f000 f9bb 	bl	800468c <__multadd>
 8004316:	4605      	mov	r5, r0
 8004318:	e7f0      	b.n	80042fc <_dtoa_r+0xad4>
 800431a:	f1bb 0f00 	cmp.w	fp, #0
 800431e:	bfcc      	ite	gt
 8004320:	465e      	movgt	r6, fp
 8004322:	2601      	movle	r6, #1
 8004324:	4456      	add	r6, sl
 8004326:	2700      	movs	r7, #0
 8004328:	9902      	ldr	r1, [sp, #8]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	4648      	mov	r0, r9
 8004330:	f000 fb50 	bl	80049d4 <__lshift>
 8004334:	4621      	mov	r1, r4
 8004336:	9002      	str	r0, [sp, #8]
 8004338:	f000 fbb8 	bl	8004aac <__mcmp>
 800433c:	2800      	cmp	r0, #0
 800433e:	dcb4      	bgt.n	80042aa <_dtoa_r+0xa82>
 8004340:	d102      	bne.n	8004348 <_dtoa_r+0xb20>
 8004342:	9b00      	ldr	r3, [sp, #0]
 8004344:	07db      	lsls	r3, r3, #31
 8004346:	d4b0      	bmi.n	80042aa <_dtoa_r+0xa82>
 8004348:	4633      	mov	r3, r6
 800434a:	461e      	mov	r6, r3
 800434c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004350:	2a30      	cmp	r2, #48	@ 0x30
 8004352:	d0fa      	beq.n	800434a <_dtoa_r+0xb22>
 8004354:	e4b5      	b.n	8003cc2 <_dtoa_r+0x49a>
 8004356:	459a      	cmp	sl, r3
 8004358:	d1a8      	bne.n	80042ac <_dtoa_r+0xa84>
 800435a:	2331      	movs	r3, #49	@ 0x31
 800435c:	f108 0801 	add.w	r8, r8, #1
 8004360:	f88a 3000 	strb.w	r3, [sl]
 8004364:	e4ad      	b.n	8003cc2 <_dtoa_r+0x49a>
 8004366:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004368:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80043c4 <_dtoa_r+0xb9c>
 800436c:	b11b      	cbz	r3, 8004376 <_dtoa_r+0xb4e>
 800436e:	f10a 0308 	add.w	r3, sl, #8
 8004372:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4650      	mov	r0, sl
 8004378:	b017      	add	sp, #92	@ 0x5c
 800437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437e:	9b07      	ldr	r3, [sp, #28]
 8004380:	2b01      	cmp	r3, #1
 8004382:	f77f ae2e 	ble.w	8003fe2 <_dtoa_r+0x7ba>
 8004386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004388:	9308      	str	r3, [sp, #32]
 800438a:	2001      	movs	r0, #1
 800438c:	e64d      	b.n	800402a <_dtoa_r+0x802>
 800438e:	f1bb 0f00 	cmp.w	fp, #0
 8004392:	f77f aed9 	ble.w	8004148 <_dtoa_r+0x920>
 8004396:	4656      	mov	r6, sl
 8004398:	9802      	ldr	r0, [sp, #8]
 800439a:	4621      	mov	r1, r4
 800439c:	f7ff f9b9 	bl	8003712 <quorem>
 80043a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80043a4:	f806 3b01 	strb.w	r3, [r6], #1
 80043a8:	eba6 020a 	sub.w	r2, r6, sl
 80043ac:	4593      	cmp	fp, r2
 80043ae:	ddb4      	ble.n	800431a <_dtoa_r+0xaf2>
 80043b0:	9902      	ldr	r1, [sp, #8]
 80043b2:	2300      	movs	r3, #0
 80043b4:	220a      	movs	r2, #10
 80043b6:	4648      	mov	r0, r9
 80043b8:	f000 f968 	bl	800468c <__multadd>
 80043bc:	9002      	str	r0, [sp, #8]
 80043be:	e7eb      	b.n	8004398 <_dtoa_r+0xb70>
 80043c0:	0800530a 	.word	0x0800530a
 80043c4:	0800528e 	.word	0x0800528e

080043c8 <_free_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4605      	mov	r5, r0
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d041      	beq.n	8004454 <_free_r+0x8c>
 80043d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d4:	1f0c      	subs	r4, r1, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bfb8      	it	lt
 80043da:	18e4      	addlt	r4, r4, r3
 80043dc:	f000 f8e8 	bl	80045b0 <__malloc_lock>
 80043e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004458 <_free_r+0x90>)
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	b933      	cbnz	r3, 80043f4 <_free_r+0x2c>
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6014      	str	r4, [r2, #0]
 80043ea:	4628      	mov	r0, r5
 80043ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f0:	f000 b8e4 	b.w	80045bc <__malloc_unlock>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d908      	bls.n	800440a <_free_r+0x42>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	1821      	adds	r1, r4, r0
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf01      	itttt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	1809      	addeq	r1, r1, r0
 8004406:	6021      	streq	r1, [r4, #0]
 8004408:	e7ed      	b.n	80043e6 <_free_r+0x1e>
 800440a:	461a      	mov	r2, r3
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b10b      	cbz	r3, 8004414 <_free_r+0x4c>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d9fa      	bls.n	800440a <_free_r+0x42>
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	1850      	adds	r0, r2, r1
 8004418:	42a0      	cmp	r0, r4
 800441a:	d10b      	bne.n	8004434 <_free_r+0x6c>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	4401      	add	r1, r0
 8004420:	1850      	adds	r0, r2, r1
 8004422:	4283      	cmp	r3, r0
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	d1e0      	bne.n	80043ea <_free_r+0x22>
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	6053      	str	r3, [r2, #4]
 800442e:	4408      	add	r0, r1
 8004430:	6010      	str	r0, [r2, #0]
 8004432:	e7da      	b.n	80043ea <_free_r+0x22>
 8004434:	d902      	bls.n	800443c <_free_r+0x74>
 8004436:	230c      	movs	r3, #12
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	e7d6      	b.n	80043ea <_free_r+0x22>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	1821      	adds	r1, r4, r0
 8004440:	428b      	cmp	r3, r1
 8004442:	bf04      	itt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	bf04      	itt	eq
 800444c:	1809      	addeq	r1, r1, r0
 800444e:	6021      	streq	r1, [r4, #0]
 8004450:	6054      	str	r4, [r2, #4]
 8004452:	e7ca      	b.n	80043ea <_free_r+0x22>
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	bf00      	nop
 8004458:	2000043c 	.word	0x2000043c

0800445c <malloc>:
 800445c:	4b02      	ldr	r3, [pc, #8]	@ (8004468 <malloc+0xc>)
 800445e:	4601      	mov	r1, r0
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	f000 b825 	b.w	80044b0 <_malloc_r>
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c

0800446c <sbrk_aligned>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4e0f      	ldr	r6, [pc, #60]	@ (80044ac <sbrk_aligned+0x40>)
 8004470:	460c      	mov	r4, r1
 8004472:	6831      	ldr	r1, [r6, #0]
 8004474:	4605      	mov	r5, r0
 8004476:	b911      	cbnz	r1, 800447e <sbrk_aligned+0x12>
 8004478:	f000 fde6 	bl	8005048 <_sbrk_r>
 800447c:	6030      	str	r0, [r6, #0]
 800447e:	4621      	mov	r1, r4
 8004480:	4628      	mov	r0, r5
 8004482:	f000 fde1 	bl	8005048 <_sbrk_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	d103      	bne.n	8004492 <sbrk_aligned+0x26>
 800448a:	f04f 34ff 	mov.w	r4, #4294967295
 800448e:	4620      	mov	r0, r4
 8004490:	bd70      	pop	{r4, r5, r6, pc}
 8004492:	1cc4      	adds	r4, r0, #3
 8004494:	f024 0403 	bic.w	r4, r4, #3
 8004498:	42a0      	cmp	r0, r4
 800449a:	d0f8      	beq.n	800448e <sbrk_aligned+0x22>
 800449c:	1a21      	subs	r1, r4, r0
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fdd2 	bl	8005048 <_sbrk_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1f2      	bne.n	800448e <sbrk_aligned+0x22>
 80044a8:	e7ef      	b.n	800448a <sbrk_aligned+0x1e>
 80044aa:	bf00      	nop
 80044ac:	20000438 	.word	0x20000438

080044b0 <_malloc_r>:
 80044b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b4:	1ccd      	adds	r5, r1, #3
 80044b6:	f025 0503 	bic.w	r5, r5, #3
 80044ba:	3508      	adds	r5, #8
 80044bc:	2d0c      	cmp	r5, #12
 80044be:	bf38      	it	cc
 80044c0:	250c      	movcc	r5, #12
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	4606      	mov	r6, r0
 80044c6:	db01      	blt.n	80044cc <_malloc_r+0x1c>
 80044c8:	42a9      	cmp	r1, r5
 80044ca:	d904      	bls.n	80044d6 <_malloc_r+0x26>
 80044cc:	230c      	movs	r3, #12
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	2000      	movs	r0, #0
 80044d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045ac <_malloc_r+0xfc>
 80044da:	f000 f869 	bl	80045b0 <__malloc_lock>
 80044de:	f8d8 3000 	ldr.w	r3, [r8]
 80044e2:	461c      	mov	r4, r3
 80044e4:	bb44      	cbnz	r4, 8004538 <_malloc_r+0x88>
 80044e6:	4629      	mov	r1, r5
 80044e8:	4630      	mov	r0, r6
 80044ea:	f7ff ffbf 	bl	800446c <sbrk_aligned>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	4604      	mov	r4, r0
 80044f2:	d158      	bne.n	80045a6 <_malloc_r+0xf6>
 80044f4:	f8d8 4000 	ldr.w	r4, [r8]
 80044f8:	4627      	mov	r7, r4
 80044fa:	2f00      	cmp	r7, #0
 80044fc:	d143      	bne.n	8004586 <_malloc_r+0xd6>
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d04b      	beq.n	800459a <_malloc_r+0xea>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4639      	mov	r1, r7
 8004506:	4630      	mov	r0, r6
 8004508:	eb04 0903 	add.w	r9, r4, r3
 800450c:	f000 fd9c 	bl	8005048 <_sbrk_r>
 8004510:	4581      	cmp	r9, r0
 8004512:	d142      	bne.n	800459a <_malloc_r+0xea>
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	1a6d      	subs	r5, r5, r1
 8004518:	4629      	mov	r1, r5
 800451a:	4630      	mov	r0, r6
 800451c:	f7ff ffa6 	bl	800446c <sbrk_aligned>
 8004520:	3001      	adds	r0, #1
 8004522:	d03a      	beq.n	800459a <_malloc_r+0xea>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	442b      	add	r3, r5
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	f8d8 3000 	ldr.w	r3, [r8]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	bb62      	cbnz	r2, 800458c <_malloc_r+0xdc>
 8004532:	f8c8 7000 	str.w	r7, [r8]
 8004536:	e00f      	b.n	8004558 <_malloc_r+0xa8>
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	1b52      	subs	r2, r2, r5
 800453c:	d420      	bmi.n	8004580 <_malloc_r+0xd0>
 800453e:	2a0b      	cmp	r2, #11
 8004540:	d917      	bls.n	8004572 <_malloc_r+0xc2>
 8004542:	1961      	adds	r1, r4, r5
 8004544:	42a3      	cmp	r3, r4
 8004546:	6025      	str	r5, [r4, #0]
 8004548:	bf18      	it	ne
 800454a:	6059      	strne	r1, [r3, #4]
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	bf08      	it	eq
 8004550:	f8c8 1000 	streq.w	r1, [r8]
 8004554:	5162      	str	r2, [r4, r5]
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	4630      	mov	r0, r6
 800455a:	f000 f82f 	bl	80045bc <__malloc_unlock>
 800455e:	f104 000b 	add.w	r0, r4, #11
 8004562:	1d23      	adds	r3, r4, #4
 8004564:	f020 0007 	bic.w	r0, r0, #7
 8004568:	1ac2      	subs	r2, r0, r3
 800456a:	bf1c      	itt	ne
 800456c:	1a1b      	subne	r3, r3, r0
 800456e:	50a3      	strne	r3, [r4, r2]
 8004570:	e7af      	b.n	80044d2 <_malloc_r+0x22>
 8004572:	6862      	ldr	r2, [r4, #4]
 8004574:	42a3      	cmp	r3, r4
 8004576:	bf0c      	ite	eq
 8004578:	f8c8 2000 	streq.w	r2, [r8]
 800457c:	605a      	strne	r2, [r3, #4]
 800457e:	e7eb      	b.n	8004558 <_malloc_r+0xa8>
 8004580:	4623      	mov	r3, r4
 8004582:	6864      	ldr	r4, [r4, #4]
 8004584:	e7ae      	b.n	80044e4 <_malloc_r+0x34>
 8004586:	463c      	mov	r4, r7
 8004588:	687f      	ldr	r7, [r7, #4]
 800458a:	e7b6      	b.n	80044fa <_malloc_r+0x4a>
 800458c:	461a      	mov	r2, r3
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	42a3      	cmp	r3, r4
 8004592:	d1fb      	bne.n	800458c <_malloc_r+0xdc>
 8004594:	2300      	movs	r3, #0
 8004596:	6053      	str	r3, [r2, #4]
 8004598:	e7de      	b.n	8004558 <_malloc_r+0xa8>
 800459a:	230c      	movs	r3, #12
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f80c 	bl	80045bc <__malloc_unlock>
 80045a4:	e794      	b.n	80044d0 <_malloc_r+0x20>
 80045a6:	6005      	str	r5, [r0, #0]
 80045a8:	e7d6      	b.n	8004558 <_malloc_r+0xa8>
 80045aa:	bf00      	nop
 80045ac:	2000043c 	.word	0x2000043c

080045b0 <__malloc_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__malloc_lock+0x8>)
 80045b2:	f7ff b89e 	b.w	80036f2 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	20000434 	.word	0x20000434

080045bc <__malloc_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__malloc_unlock+0x8>)
 80045be:	f7ff b899 	b.w	80036f4 <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000434 	.word	0x20000434

080045c8 <_Balloc>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	69c6      	ldr	r6, [r0, #28]
 80045cc:	4604      	mov	r4, r0
 80045ce:	460d      	mov	r5, r1
 80045d0:	b976      	cbnz	r6, 80045f0 <_Balloc+0x28>
 80045d2:	2010      	movs	r0, #16
 80045d4:	f7ff ff42 	bl	800445c <malloc>
 80045d8:	4602      	mov	r2, r0
 80045da:	61e0      	str	r0, [r4, #28]
 80045dc:	b920      	cbnz	r0, 80045e8 <_Balloc+0x20>
 80045de:	4b18      	ldr	r3, [pc, #96]	@ (8004640 <_Balloc+0x78>)
 80045e0:	4818      	ldr	r0, [pc, #96]	@ (8004644 <_Balloc+0x7c>)
 80045e2:	216b      	movs	r1, #107	@ 0x6b
 80045e4:	f000 fd40 	bl	8005068 <__assert_func>
 80045e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045ec:	6006      	str	r6, [r0, #0]
 80045ee:	60c6      	str	r6, [r0, #12]
 80045f0:	69e6      	ldr	r6, [r4, #28]
 80045f2:	68f3      	ldr	r3, [r6, #12]
 80045f4:	b183      	cbz	r3, 8004618 <_Balloc+0x50>
 80045f6:	69e3      	ldr	r3, [r4, #28]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80045fe:	b9b8      	cbnz	r0, 8004630 <_Balloc+0x68>
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f605 	lsl.w	r6, r1, r5
 8004606:	1d72      	adds	r2, r6, #5
 8004608:	0092      	lsls	r2, r2, #2
 800460a:	4620      	mov	r0, r4
 800460c:	f000 fd4a 	bl	80050a4 <_calloc_r>
 8004610:	b160      	cbz	r0, 800462c <_Balloc+0x64>
 8004612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004616:	e00e      	b.n	8004636 <_Balloc+0x6e>
 8004618:	2221      	movs	r2, #33	@ 0x21
 800461a:	2104      	movs	r1, #4
 800461c:	4620      	mov	r0, r4
 800461e:	f000 fd41 	bl	80050a4 <_calloc_r>
 8004622:	69e3      	ldr	r3, [r4, #28]
 8004624:	60f0      	str	r0, [r6, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e4      	bne.n	80045f6 <_Balloc+0x2e>
 800462c:	2000      	movs	r0, #0
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	6802      	ldr	r2, [r0, #0]
 8004632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004636:	2300      	movs	r3, #0
 8004638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800463c:	e7f7      	b.n	800462e <_Balloc+0x66>
 800463e:	bf00      	nop
 8004640:	0800529b 	.word	0x0800529b
 8004644:	0800531b 	.word	0x0800531b

08004648 <_Bfree>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	69c6      	ldr	r6, [r0, #28]
 800464c:	4605      	mov	r5, r0
 800464e:	460c      	mov	r4, r1
 8004650:	b976      	cbnz	r6, 8004670 <_Bfree+0x28>
 8004652:	2010      	movs	r0, #16
 8004654:	f7ff ff02 	bl	800445c <malloc>
 8004658:	4602      	mov	r2, r0
 800465a:	61e8      	str	r0, [r5, #28]
 800465c:	b920      	cbnz	r0, 8004668 <_Bfree+0x20>
 800465e:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <_Bfree+0x3c>)
 8004660:	4809      	ldr	r0, [pc, #36]	@ (8004688 <_Bfree+0x40>)
 8004662:	218f      	movs	r1, #143	@ 0x8f
 8004664:	f000 fd00 	bl	8005068 <__assert_func>
 8004668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800466c:	6006      	str	r6, [r0, #0]
 800466e:	60c6      	str	r6, [r0, #12]
 8004670:	b13c      	cbz	r4, 8004682 <_Bfree+0x3a>
 8004672:	69eb      	ldr	r3, [r5, #28]
 8004674:	6862      	ldr	r2, [r4, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800467c:	6021      	str	r1, [r4, #0]
 800467e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	0800529b 	.word	0x0800529b
 8004688:	0800531b 	.word	0x0800531b

0800468c <__multadd>:
 800468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	690d      	ldr	r5, [r1, #16]
 8004692:	4607      	mov	r7, r0
 8004694:	460c      	mov	r4, r1
 8004696:	461e      	mov	r6, r3
 8004698:	f101 0c14 	add.w	ip, r1, #20
 800469c:	2000      	movs	r0, #0
 800469e:	f8dc 3000 	ldr.w	r3, [ip]
 80046a2:	b299      	uxth	r1, r3
 80046a4:	fb02 6101 	mla	r1, r2, r1, r6
 80046a8:	0c1e      	lsrs	r6, r3, #16
 80046aa:	0c0b      	lsrs	r3, r1, #16
 80046ac:	fb02 3306 	mla	r3, r2, r6, r3
 80046b0:	b289      	uxth	r1, r1
 80046b2:	3001      	adds	r0, #1
 80046b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80046b8:	4285      	cmp	r5, r0
 80046ba:	f84c 1b04 	str.w	r1, [ip], #4
 80046be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80046c2:	dcec      	bgt.n	800469e <__multadd+0x12>
 80046c4:	b30e      	cbz	r6, 800470a <__multadd+0x7e>
 80046c6:	68a3      	ldr	r3, [r4, #8]
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	dc19      	bgt.n	8004700 <__multadd+0x74>
 80046cc:	6861      	ldr	r1, [r4, #4]
 80046ce:	4638      	mov	r0, r7
 80046d0:	3101      	adds	r1, #1
 80046d2:	f7ff ff79 	bl	80045c8 <_Balloc>
 80046d6:	4680      	mov	r8, r0
 80046d8:	b928      	cbnz	r0, 80046e6 <__multadd+0x5a>
 80046da:	4602      	mov	r2, r0
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <__multadd+0x84>)
 80046de:	480d      	ldr	r0, [pc, #52]	@ (8004714 <__multadd+0x88>)
 80046e0:	21ba      	movs	r1, #186	@ 0xba
 80046e2:	f000 fcc1 	bl	8005068 <__assert_func>
 80046e6:	6922      	ldr	r2, [r4, #16]
 80046e8:	3202      	adds	r2, #2
 80046ea:	f104 010c 	add.w	r1, r4, #12
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	300c      	adds	r0, #12
 80046f2:	f7ff f800 	bl	80036f6 <memcpy>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4638      	mov	r0, r7
 80046fa:	f7ff ffa5 	bl	8004648 <_Bfree>
 80046fe:	4644      	mov	r4, r8
 8004700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004704:	3501      	adds	r5, #1
 8004706:	615e      	str	r6, [r3, #20]
 8004708:	6125      	str	r5, [r4, #16]
 800470a:	4620      	mov	r0, r4
 800470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004710:	0800530a 	.word	0x0800530a
 8004714:	0800531b 	.word	0x0800531b

08004718 <__hi0bits>:
 8004718:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800471c:	4603      	mov	r3, r0
 800471e:	bf36      	itet	cc
 8004720:	0403      	lslcc	r3, r0, #16
 8004722:	2000      	movcs	r0, #0
 8004724:	2010      	movcc	r0, #16
 8004726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800472a:	bf3c      	itt	cc
 800472c:	021b      	lslcc	r3, r3, #8
 800472e:	3008      	addcc	r0, #8
 8004730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004734:	bf3c      	itt	cc
 8004736:	011b      	lslcc	r3, r3, #4
 8004738:	3004      	addcc	r0, #4
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473e:	bf3c      	itt	cc
 8004740:	009b      	lslcc	r3, r3, #2
 8004742:	3002      	addcc	r0, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	db05      	blt.n	8004754 <__hi0bits+0x3c>
 8004748:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800474c:	f100 0001 	add.w	r0, r0, #1
 8004750:	bf08      	it	eq
 8004752:	2020      	moveq	r0, #32
 8004754:	4770      	bx	lr

08004756 <__lo0bits>:
 8004756:	6803      	ldr	r3, [r0, #0]
 8004758:	4602      	mov	r2, r0
 800475a:	f013 0007 	ands.w	r0, r3, #7
 800475e:	d00b      	beq.n	8004778 <__lo0bits+0x22>
 8004760:	07d9      	lsls	r1, r3, #31
 8004762:	d421      	bmi.n	80047a8 <__lo0bits+0x52>
 8004764:	0798      	lsls	r0, r3, #30
 8004766:	bf49      	itett	mi
 8004768:	085b      	lsrmi	r3, r3, #1
 800476a:	089b      	lsrpl	r3, r3, #2
 800476c:	2001      	movmi	r0, #1
 800476e:	6013      	strmi	r3, [r2, #0]
 8004770:	bf5c      	itt	pl
 8004772:	6013      	strpl	r3, [r2, #0]
 8004774:	2002      	movpl	r0, #2
 8004776:	4770      	bx	lr
 8004778:	b299      	uxth	r1, r3
 800477a:	b909      	cbnz	r1, 8004780 <__lo0bits+0x2a>
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	2010      	movs	r0, #16
 8004780:	b2d9      	uxtb	r1, r3
 8004782:	b909      	cbnz	r1, 8004788 <__lo0bits+0x32>
 8004784:	3008      	adds	r0, #8
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	0719      	lsls	r1, r3, #28
 800478a:	bf04      	itt	eq
 800478c:	091b      	lsreq	r3, r3, #4
 800478e:	3004      	addeq	r0, #4
 8004790:	0799      	lsls	r1, r3, #30
 8004792:	bf04      	itt	eq
 8004794:	089b      	lsreq	r3, r3, #2
 8004796:	3002      	addeq	r0, #2
 8004798:	07d9      	lsls	r1, r3, #31
 800479a:	d403      	bmi.n	80047a4 <__lo0bits+0x4e>
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	f100 0001 	add.w	r0, r0, #1
 80047a2:	d003      	beq.n	80047ac <__lo0bits+0x56>
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4770      	bx	lr
 80047a8:	2000      	movs	r0, #0
 80047aa:	4770      	bx	lr
 80047ac:	2020      	movs	r0, #32
 80047ae:	4770      	bx	lr

080047b0 <__i2b>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	2101      	movs	r1, #1
 80047b6:	f7ff ff07 	bl	80045c8 <_Balloc>
 80047ba:	4602      	mov	r2, r0
 80047bc:	b928      	cbnz	r0, 80047ca <__i2b+0x1a>
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <__i2b+0x24>)
 80047c0:	4805      	ldr	r0, [pc, #20]	@ (80047d8 <__i2b+0x28>)
 80047c2:	f240 1145 	movw	r1, #325	@ 0x145
 80047c6:	f000 fc4f 	bl	8005068 <__assert_func>
 80047ca:	2301      	movs	r3, #1
 80047cc:	6144      	str	r4, [r0, #20]
 80047ce:	6103      	str	r3, [r0, #16]
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	bf00      	nop
 80047d4:	0800530a 	.word	0x0800530a
 80047d8:	0800531b 	.word	0x0800531b

080047dc <__multiply>:
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	4617      	mov	r7, r2
 80047e2:	690a      	ldr	r2, [r1, #16]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bfa8      	it	ge
 80047ea:	463b      	movge	r3, r7
 80047ec:	4689      	mov	r9, r1
 80047ee:	bfa4      	itt	ge
 80047f0:	460f      	movge	r7, r1
 80047f2:	4699      	movge	r9, r3
 80047f4:	693d      	ldr	r5, [r7, #16]
 80047f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	eb05 060a 	add.w	r6, r5, sl
 8004802:	42b3      	cmp	r3, r6
 8004804:	b085      	sub	sp, #20
 8004806:	bfb8      	it	lt
 8004808:	3101      	addlt	r1, #1
 800480a:	f7ff fedd 	bl	80045c8 <_Balloc>
 800480e:	b930      	cbnz	r0, 800481e <__multiply+0x42>
 8004810:	4602      	mov	r2, r0
 8004812:	4b41      	ldr	r3, [pc, #260]	@ (8004918 <__multiply+0x13c>)
 8004814:	4841      	ldr	r0, [pc, #260]	@ (800491c <__multiply+0x140>)
 8004816:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800481a:	f000 fc25 	bl	8005068 <__assert_func>
 800481e:	f100 0414 	add.w	r4, r0, #20
 8004822:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004826:	4623      	mov	r3, r4
 8004828:	2200      	movs	r2, #0
 800482a:	4573      	cmp	r3, lr
 800482c:	d320      	bcc.n	8004870 <__multiply+0x94>
 800482e:	f107 0814 	add.w	r8, r7, #20
 8004832:	f109 0114 	add.w	r1, r9, #20
 8004836:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800483a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800483e:	9302      	str	r3, [sp, #8]
 8004840:	1beb      	subs	r3, r5, r7
 8004842:	3b15      	subs	r3, #21
 8004844:	f023 0303 	bic.w	r3, r3, #3
 8004848:	3304      	adds	r3, #4
 800484a:	3715      	adds	r7, #21
 800484c:	42bd      	cmp	r5, r7
 800484e:	bf38      	it	cc
 8004850:	2304      	movcc	r3, #4
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	9b02      	ldr	r3, [sp, #8]
 8004856:	9103      	str	r1, [sp, #12]
 8004858:	428b      	cmp	r3, r1
 800485a:	d80c      	bhi.n	8004876 <__multiply+0x9a>
 800485c:	2e00      	cmp	r6, #0
 800485e:	dd03      	ble.n	8004868 <__multiply+0x8c>
 8004860:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004864:	2b00      	cmp	r3, #0
 8004866:	d055      	beq.n	8004914 <__multiply+0x138>
 8004868:	6106      	str	r6, [r0, #16]
 800486a:	b005      	add	sp, #20
 800486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004870:	f843 2b04 	str.w	r2, [r3], #4
 8004874:	e7d9      	b.n	800482a <__multiply+0x4e>
 8004876:	f8b1 a000 	ldrh.w	sl, [r1]
 800487a:	f1ba 0f00 	cmp.w	sl, #0
 800487e:	d01f      	beq.n	80048c0 <__multiply+0xe4>
 8004880:	46c4      	mov	ip, r8
 8004882:	46a1      	mov	r9, r4
 8004884:	2700      	movs	r7, #0
 8004886:	f85c 2b04 	ldr.w	r2, [ip], #4
 800488a:	f8d9 3000 	ldr.w	r3, [r9]
 800488e:	fa1f fb82 	uxth.w	fp, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	fb0a 330b 	mla	r3, sl, fp, r3
 8004898:	443b      	add	r3, r7
 800489a:	f8d9 7000 	ldr.w	r7, [r9]
 800489e:	0c12      	lsrs	r2, r2, #16
 80048a0:	0c3f      	lsrs	r7, r7, #16
 80048a2:	fb0a 7202 	mla	r2, sl, r2, r7
 80048a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b0:	4565      	cmp	r5, ip
 80048b2:	f849 3b04 	str.w	r3, [r9], #4
 80048b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80048ba:	d8e4      	bhi.n	8004886 <__multiply+0xaa>
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	50e7      	str	r7, [r4, r3]
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80048c6:	3104      	adds	r1, #4
 80048c8:	f1b9 0f00 	cmp.w	r9, #0
 80048cc:	d020      	beq.n	8004910 <__multiply+0x134>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	4647      	mov	r7, r8
 80048d2:	46a4      	mov	ip, r4
 80048d4:	f04f 0a00 	mov.w	sl, #0
 80048d8:	f8b7 b000 	ldrh.w	fp, [r7]
 80048dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80048e0:	fb09 220b 	mla	r2, r9, fp, r2
 80048e4:	4452      	add	r2, sl
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ec:	f84c 3b04 	str.w	r3, [ip], #4
 80048f0:	f857 3b04 	ldr.w	r3, [r7], #4
 80048f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048f8:	f8bc 3000 	ldrh.w	r3, [ip]
 80048fc:	fb09 330a 	mla	r3, r9, sl, r3
 8004900:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004904:	42bd      	cmp	r5, r7
 8004906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800490a:	d8e5      	bhi.n	80048d8 <__multiply+0xfc>
 800490c:	9a01      	ldr	r2, [sp, #4]
 800490e:	50a3      	str	r3, [r4, r2]
 8004910:	3404      	adds	r4, #4
 8004912:	e79f      	b.n	8004854 <__multiply+0x78>
 8004914:	3e01      	subs	r6, #1
 8004916:	e7a1      	b.n	800485c <__multiply+0x80>
 8004918:	0800530a 	.word	0x0800530a
 800491c:	0800531b 	.word	0x0800531b

08004920 <__pow5mult>:
 8004920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004924:	4615      	mov	r5, r2
 8004926:	f012 0203 	ands.w	r2, r2, #3
 800492a:	4607      	mov	r7, r0
 800492c:	460e      	mov	r6, r1
 800492e:	d007      	beq.n	8004940 <__pow5mult+0x20>
 8004930:	4c25      	ldr	r4, [pc, #148]	@ (80049c8 <__pow5mult+0xa8>)
 8004932:	3a01      	subs	r2, #1
 8004934:	2300      	movs	r3, #0
 8004936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800493a:	f7ff fea7 	bl	800468c <__multadd>
 800493e:	4606      	mov	r6, r0
 8004940:	10ad      	asrs	r5, r5, #2
 8004942:	d03d      	beq.n	80049c0 <__pow5mult+0xa0>
 8004944:	69fc      	ldr	r4, [r7, #28]
 8004946:	b97c      	cbnz	r4, 8004968 <__pow5mult+0x48>
 8004948:	2010      	movs	r0, #16
 800494a:	f7ff fd87 	bl	800445c <malloc>
 800494e:	4602      	mov	r2, r0
 8004950:	61f8      	str	r0, [r7, #28]
 8004952:	b928      	cbnz	r0, 8004960 <__pow5mult+0x40>
 8004954:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <__pow5mult+0xac>)
 8004956:	481e      	ldr	r0, [pc, #120]	@ (80049d0 <__pow5mult+0xb0>)
 8004958:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800495c:	f000 fb84 	bl	8005068 <__assert_func>
 8004960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004964:	6004      	str	r4, [r0, #0]
 8004966:	60c4      	str	r4, [r0, #12]
 8004968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800496c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004970:	b94c      	cbnz	r4, 8004986 <__pow5mult+0x66>
 8004972:	f240 2171 	movw	r1, #625	@ 0x271
 8004976:	4638      	mov	r0, r7
 8004978:	f7ff ff1a 	bl	80047b0 <__i2b>
 800497c:	2300      	movs	r3, #0
 800497e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004982:	4604      	mov	r4, r0
 8004984:	6003      	str	r3, [r0, #0]
 8004986:	f04f 0900 	mov.w	r9, #0
 800498a:	07eb      	lsls	r3, r5, #31
 800498c:	d50a      	bpl.n	80049a4 <__pow5mult+0x84>
 800498e:	4631      	mov	r1, r6
 8004990:	4622      	mov	r2, r4
 8004992:	4638      	mov	r0, r7
 8004994:	f7ff ff22 	bl	80047dc <__multiply>
 8004998:	4631      	mov	r1, r6
 800499a:	4680      	mov	r8, r0
 800499c:	4638      	mov	r0, r7
 800499e:	f7ff fe53 	bl	8004648 <_Bfree>
 80049a2:	4646      	mov	r6, r8
 80049a4:	106d      	asrs	r5, r5, #1
 80049a6:	d00b      	beq.n	80049c0 <__pow5mult+0xa0>
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	b938      	cbnz	r0, 80049bc <__pow5mult+0x9c>
 80049ac:	4622      	mov	r2, r4
 80049ae:	4621      	mov	r1, r4
 80049b0:	4638      	mov	r0, r7
 80049b2:	f7ff ff13 	bl	80047dc <__multiply>
 80049b6:	6020      	str	r0, [r4, #0]
 80049b8:	f8c0 9000 	str.w	r9, [r0]
 80049bc:	4604      	mov	r4, r0
 80049be:	e7e4      	b.n	800498a <__pow5mult+0x6a>
 80049c0:	4630      	mov	r0, r6
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	bf00      	nop
 80049c8:	080053cc 	.word	0x080053cc
 80049cc:	0800529b 	.word	0x0800529b
 80049d0:	0800531b 	.word	0x0800531b

080049d4 <__lshift>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	460c      	mov	r4, r1
 80049da:	6849      	ldr	r1, [r1, #4]
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	4607      	mov	r7, r0
 80049e6:	4691      	mov	r9, r2
 80049e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80049ec:	f108 0601 	add.w	r6, r8, #1
 80049f0:	42b3      	cmp	r3, r6
 80049f2:	db0b      	blt.n	8004a0c <__lshift+0x38>
 80049f4:	4638      	mov	r0, r7
 80049f6:	f7ff fde7 	bl	80045c8 <_Balloc>
 80049fa:	4605      	mov	r5, r0
 80049fc:	b948      	cbnz	r0, 8004a12 <__lshift+0x3e>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b28      	ldr	r3, [pc, #160]	@ (8004aa4 <__lshift+0xd0>)
 8004a02:	4829      	ldr	r0, [pc, #164]	@ (8004aa8 <__lshift+0xd4>)
 8004a04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004a08:	f000 fb2e 	bl	8005068 <__assert_func>
 8004a0c:	3101      	adds	r1, #1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	e7ee      	b.n	80049f0 <__lshift+0x1c>
 8004a12:	2300      	movs	r3, #0
 8004a14:	f100 0114 	add.w	r1, r0, #20
 8004a18:	f100 0210 	add.w	r2, r0, #16
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	4553      	cmp	r3, sl
 8004a20:	db33      	blt.n	8004a8a <__lshift+0xb6>
 8004a22:	6920      	ldr	r0, [r4, #16]
 8004a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a28:	f104 0314 	add.w	r3, r4, #20
 8004a2c:	f019 091f 	ands.w	r9, r9, #31
 8004a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004a38:	d02b      	beq.n	8004a92 <__lshift+0xbe>
 8004a3a:	f1c9 0e20 	rsb	lr, r9, #32
 8004a3e:	468a      	mov	sl, r1
 8004a40:	2200      	movs	r2, #0
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	fa00 f009 	lsl.w	r0, r0, r9
 8004a48:	4310      	orrs	r0, r2
 8004a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8004a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a52:	459c      	cmp	ip, r3
 8004a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a58:	d8f3      	bhi.n	8004a42 <__lshift+0x6e>
 8004a5a:	ebac 0304 	sub.w	r3, ip, r4
 8004a5e:	3b15      	subs	r3, #21
 8004a60:	f023 0303 	bic.w	r3, r3, #3
 8004a64:	3304      	adds	r3, #4
 8004a66:	f104 0015 	add.w	r0, r4, #21
 8004a6a:	4560      	cmp	r0, ip
 8004a6c:	bf88      	it	hi
 8004a6e:	2304      	movhi	r3, #4
 8004a70:	50ca      	str	r2, [r1, r3]
 8004a72:	b10a      	cbz	r2, 8004a78 <__lshift+0xa4>
 8004a74:	f108 0602 	add.w	r6, r8, #2
 8004a78:	3e01      	subs	r6, #1
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	612e      	str	r6, [r5, #16]
 8004a7e:	4621      	mov	r1, r4
 8004a80:	f7ff fde2 	bl	8004648 <_Bfree>
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a8e:	3301      	adds	r3, #1
 8004a90:	e7c5      	b.n	8004a1e <__lshift+0x4a>
 8004a92:	3904      	subs	r1, #4
 8004a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a98:	f841 2f04 	str.w	r2, [r1, #4]!
 8004a9c:	459c      	cmp	ip, r3
 8004a9e:	d8f9      	bhi.n	8004a94 <__lshift+0xc0>
 8004aa0:	e7ea      	b.n	8004a78 <__lshift+0xa4>
 8004aa2:	bf00      	nop
 8004aa4:	0800530a 	.word	0x0800530a
 8004aa8:	0800531b 	.word	0x0800531b

08004aac <__mcmp>:
 8004aac:	690a      	ldr	r2, [r1, #16]
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6900      	ldr	r0, [r0, #16]
 8004ab2:	1a80      	subs	r0, r0, r2
 8004ab4:	b530      	push	{r4, r5, lr}
 8004ab6:	d10e      	bne.n	8004ad6 <__mcmp+0x2a>
 8004ab8:	3314      	adds	r3, #20
 8004aba:	3114      	adds	r1, #20
 8004abc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004ac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004acc:	4295      	cmp	r5, r2
 8004ace:	d003      	beq.n	8004ad8 <__mcmp+0x2c>
 8004ad0:	d205      	bcs.n	8004ade <__mcmp+0x32>
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	bd30      	pop	{r4, r5, pc}
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	d3f3      	bcc.n	8004ac4 <__mcmp+0x18>
 8004adc:	e7fb      	b.n	8004ad6 <__mcmp+0x2a>
 8004ade:	2001      	movs	r0, #1
 8004ae0:	e7f9      	b.n	8004ad6 <__mcmp+0x2a>
	...

08004ae4 <__mdiff>:
 8004ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	4689      	mov	r9, r1
 8004aea:	4606      	mov	r6, r0
 8004aec:	4611      	mov	r1, r2
 8004aee:	4648      	mov	r0, r9
 8004af0:	4614      	mov	r4, r2
 8004af2:	f7ff ffdb 	bl	8004aac <__mcmp>
 8004af6:	1e05      	subs	r5, r0, #0
 8004af8:	d112      	bne.n	8004b20 <__mdiff+0x3c>
 8004afa:	4629      	mov	r1, r5
 8004afc:	4630      	mov	r0, r6
 8004afe:	f7ff fd63 	bl	80045c8 <_Balloc>
 8004b02:	4602      	mov	r2, r0
 8004b04:	b928      	cbnz	r0, 8004b12 <__mdiff+0x2e>
 8004b06:	4b3f      	ldr	r3, [pc, #252]	@ (8004c04 <__mdiff+0x120>)
 8004b08:	f240 2137 	movw	r1, #567	@ 0x237
 8004b0c:	483e      	ldr	r0, [pc, #248]	@ (8004c08 <__mdiff+0x124>)
 8004b0e:	f000 faab 	bl	8005068 <__assert_func>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b18:	4610      	mov	r0, r2
 8004b1a:	b003      	add	sp, #12
 8004b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b20:	bfbc      	itt	lt
 8004b22:	464b      	movlt	r3, r9
 8004b24:	46a1      	movlt	r9, r4
 8004b26:	4630      	mov	r0, r6
 8004b28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004b2c:	bfba      	itte	lt
 8004b2e:	461c      	movlt	r4, r3
 8004b30:	2501      	movlt	r5, #1
 8004b32:	2500      	movge	r5, #0
 8004b34:	f7ff fd48 	bl	80045c8 <_Balloc>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	b918      	cbnz	r0, 8004b44 <__mdiff+0x60>
 8004b3c:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <__mdiff+0x120>)
 8004b3e:	f240 2145 	movw	r1, #581	@ 0x245
 8004b42:	e7e3      	b.n	8004b0c <__mdiff+0x28>
 8004b44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004b48:	6926      	ldr	r6, [r4, #16]
 8004b4a:	60c5      	str	r5, [r0, #12]
 8004b4c:	f109 0310 	add.w	r3, r9, #16
 8004b50:	f109 0514 	add.w	r5, r9, #20
 8004b54:	f104 0e14 	add.w	lr, r4, #20
 8004b58:	f100 0b14 	add.w	fp, r0, #20
 8004b5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004b60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	46d9      	mov	r9, fp
 8004b68:	f04f 0c00 	mov.w	ip, #0
 8004b6c:	9b01      	ldr	r3, [sp, #4]
 8004b6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004b72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	fa1f f38a 	uxth.w	r3, sl
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	b283      	uxth	r3, r0
 8004b80:	1acb      	subs	r3, r1, r3
 8004b82:	0c00      	lsrs	r0, r0, #16
 8004b84:	4463      	add	r3, ip
 8004b86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004b8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004b94:	4576      	cmp	r6, lr
 8004b96:	f849 3b04 	str.w	r3, [r9], #4
 8004b9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b9e:	d8e5      	bhi.n	8004b6c <__mdiff+0x88>
 8004ba0:	1b33      	subs	r3, r6, r4
 8004ba2:	3b15      	subs	r3, #21
 8004ba4:	f023 0303 	bic.w	r3, r3, #3
 8004ba8:	3415      	adds	r4, #21
 8004baa:	3304      	adds	r3, #4
 8004bac:	42a6      	cmp	r6, r4
 8004bae:	bf38      	it	cc
 8004bb0:	2304      	movcc	r3, #4
 8004bb2:	441d      	add	r5, r3
 8004bb4:	445b      	add	r3, fp
 8004bb6:	461e      	mov	r6, r3
 8004bb8:	462c      	mov	r4, r5
 8004bba:	4544      	cmp	r4, r8
 8004bbc:	d30e      	bcc.n	8004bdc <__mdiff+0xf8>
 8004bbe:	f108 0103 	add.w	r1, r8, #3
 8004bc2:	1b49      	subs	r1, r1, r5
 8004bc4:	f021 0103 	bic.w	r1, r1, #3
 8004bc8:	3d03      	subs	r5, #3
 8004bca:	45a8      	cmp	r8, r5
 8004bcc:	bf38      	it	cc
 8004bce:	2100      	movcc	r1, #0
 8004bd0:	440b      	add	r3, r1
 8004bd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004bd6:	b191      	cbz	r1, 8004bfe <__mdiff+0x11a>
 8004bd8:	6117      	str	r7, [r2, #16]
 8004bda:	e79d      	b.n	8004b18 <__mdiff+0x34>
 8004bdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8004be0:	46e6      	mov	lr, ip
 8004be2:	0c08      	lsrs	r0, r1, #16
 8004be4:	fa1c fc81 	uxtah	ip, ip, r1
 8004be8:	4471      	add	r1, lr
 8004bea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004bee:	b289      	uxth	r1, r1
 8004bf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004bf4:	f846 1b04 	str.w	r1, [r6], #4
 8004bf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004bfc:	e7dd      	b.n	8004bba <__mdiff+0xd6>
 8004bfe:	3f01      	subs	r7, #1
 8004c00:	e7e7      	b.n	8004bd2 <__mdiff+0xee>
 8004c02:	bf00      	nop
 8004c04:	0800530a 	.word	0x0800530a
 8004c08:	0800531b 	.word	0x0800531b

08004c0c <__d2b>:
 8004c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	460f      	mov	r7, r1
 8004c12:	2101      	movs	r1, #1
 8004c14:	ec59 8b10 	vmov	r8, r9, d0
 8004c18:	4616      	mov	r6, r2
 8004c1a:	f7ff fcd5 	bl	80045c8 <_Balloc>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	b930      	cbnz	r0, 8004c30 <__d2b+0x24>
 8004c22:	4602      	mov	r2, r0
 8004c24:	4b23      	ldr	r3, [pc, #140]	@ (8004cb4 <__d2b+0xa8>)
 8004c26:	4824      	ldr	r0, [pc, #144]	@ (8004cb8 <__d2b+0xac>)
 8004c28:	f240 310f 	movw	r1, #783	@ 0x30f
 8004c2c:	f000 fa1c 	bl	8005068 <__assert_func>
 8004c30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004c34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c38:	b10d      	cbz	r5, 8004c3e <__d2b+0x32>
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	f1b8 0300 	subs.w	r3, r8, #0
 8004c44:	d023      	beq.n	8004c8e <__d2b+0x82>
 8004c46:	4668      	mov	r0, sp
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	f7ff fd84 	bl	8004756 <__lo0bits>
 8004c4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004c52:	b1d0      	cbz	r0, 8004c8a <__d2b+0x7e>
 8004c54:	f1c0 0320 	rsb	r3, r0, #32
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	40c2      	lsrs	r2, r0
 8004c60:	6163      	str	r3, [r4, #20]
 8004c62:	9201      	str	r2, [sp, #4]
 8004c64:	9b01      	ldr	r3, [sp, #4]
 8004c66:	61a3      	str	r3, [r4, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2201      	moveq	r2, #1
 8004c6e:	2202      	movne	r2, #2
 8004c70:	6122      	str	r2, [r4, #16]
 8004c72:	b1a5      	cbz	r5, 8004c9e <__d2b+0x92>
 8004c74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004c78:	4405      	add	r5, r0
 8004c7a:	603d      	str	r5, [r7, #0]
 8004c7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004c80:	6030      	str	r0, [r6, #0]
 8004c82:	4620      	mov	r0, r4
 8004c84:	b003      	add	sp, #12
 8004c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c8a:	6161      	str	r1, [r4, #20]
 8004c8c:	e7ea      	b.n	8004c64 <__d2b+0x58>
 8004c8e:	a801      	add	r0, sp, #4
 8004c90:	f7ff fd61 	bl	8004756 <__lo0bits>
 8004c94:	9b01      	ldr	r3, [sp, #4]
 8004c96:	6163      	str	r3, [r4, #20]
 8004c98:	3020      	adds	r0, #32
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	e7e8      	b.n	8004c70 <__d2b+0x64>
 8004c9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004ca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004ca6:	6038      	str	r0, [r7, #0]
 8004ca8:	6918      	ldr	r0, [r3, #16]
 8004caa:	f7ff fd35 	bl	8004718 <__hi0bits>
 8004cae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004cb2:	e7e5      	b.n	8004c80 <__d2b+0x74>
 8004cb4:	0800530a 	.word	0x0800530a
 8004cb8:	0800531b 	.word	0x0800531b

08004cbc <__sfputc_r>:
 8004cbc:	6893      	ldr	r3, [r2, #8]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	b410      	push	{r4}
 8004cc4:	6093      	str	r3, [r2, #8]
 8004cc6:	da08      	bge.n	8004cda <__sfputc_r+0x1e>
 8004cc8:	6994      	ldr	r4, [r2, #24]
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	db01      	blt.n	8004cd2 <__sfputc_r+0x16>
 8004cce:	290a      	cmp	r1, #10
 8004cd0:	d103      	bne.n	8004cda <__sfputc_r+0x1e>
 8004cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cd6:	f7fe bc0c 	b.w	80034f2 <__swbuf_r>
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	1c58      	adds	r0, r3, #1
 8004cde:	6010      	str	r0, [r2, #0]
 8004ce0:	7019      	strb	r1, [r3, #0]
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <__sfputs_r>:
 8004cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	18d5      	adds	r5, r2, r3
 8004cf4:	42ac      	cmp	r4, r5
 8004cf6:	d101      	bne.n	8004cfc <__sfputs_r+0x12>
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	e007      	b.n	8004d0c <__sfputs_r+0x22>
 8004cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d00:	463a      	mov	r2, r7
 8004d02:	4630      	mov	r0, r6
 8004d04:	f7ff ffda 	bl	8004cbc <__sfputc_r>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d1f3      	bne.n	8004cf4 <__sfputs_r+0xa>
 8004d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d10 <_vfiprintf_r>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	460d      	mov	r5, r1
 8004d16:	b09d      	sub	sp, #116	@ 0x74
 8004d18:	4614      	mov	r4, r2
 8004d1a:	4698      	mov	r8, r3
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	b118      	cbz	r0, 8004d28 <_vfiprintf_r+0x18>
 8004d20:	6a03      	ldr	r3, [r0, #32]
 8004d22:	b90b      	cbnz	r3, 8004d28 <_vfiprintf_r+0x18>
 8004d24:	f7fe fa40 	bl	80031a8 <__sinit>
 8004d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d2a:	07d9      	lsls	r1, r3, #31
 8004d2c:	d405      	bmi.n	8004d3a <_vfiprintf_r+0x2a>
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	059a      	lsls	r2, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_vfiprintf_r+0x2a>
 8004d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d36:	f7fe fcdc 	bl	80036f2 <__retarget_lock_acquire_recursive>
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	071b      	lsls	r3, r3, #28
 8004d3e:	d501      	bpl.n	8004d44 <_vfiprintf_r+0x34>
 8004d40:	692b      	ldr	r3, [r5, #16]
 8004d42:	b99b      	cbnz	r3, 8004d6c <_vfiprintf_r+0x5c>
 8004d44:	4629      	mov	r1, r5
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7fe fc12 	bl	8003570 <__swsetup_r>
 8004d4c:	b170      	cbz	r0, 8004d6c <_vfiprintf_r+0x5c>
 8004d4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d50:	07dc      	lsls	r4, r3, #31
 8004d52:	d504      	bpl.n	8004d5e <_vfiprintf_r+0x4e>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	b01d      	add	sp, #116	@ 0x74
 8004d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	0598      	lsls	r0, r3, #22
 8004d62:	d4f7      	bmi.n	8004d54 <_vfiprintf_r+0x44>
 8004d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d66:	f7fe fcc5 	bl	80036f4 <__retarget_lock_release_recursive>
 8004d6a:	e7f3      	b.n	8004d54 <_vfiprintf_r+0x44>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d70:	2320      	movs	r3, #32
 8004d72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d7a:	2330      	movs	r3, #48	@ 0x30
 8004d7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f2c <_vfiprintf_r+0x21c>
 8004d80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d84:	f04f 0901 	mov.w	r9, #1
 8004d88:	4623      	mov	r3, r4
 8004d8a:	469a      	mov	sl, r3
 8004d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d90:	b10a      	cbz	r2, 8004d96 <_vfiprintf_r+0x86>
 8004d92:	2a25      	cmp	r2, #37	@ 0x25
 8004d94:	d1f9      	bne.n	8004d8a <_vfiprintf_r+0x7a>
 8004d96:	ebba 0b04 	subs.w	fp, sl, r4
 8004d9a:	d00b      	beq.n	8004db4 <_vfiprintf_r+0xa4>
 8004d9c:	465b      	mov	r3, fp
 8004d9e:	4622      	mov	r2, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7ff ffa1 	bl	8004cea <__sfputs_r>
 8004da8:	3001      	adds	r0, #1
 8004daa:	f000 80a7 	beq.w	8004efc <_vfiprintf_r+0x1ec>
 8004dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004db0:	445a      	add	r2, fp
 8004db2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004db4:	f89a 3000 	ldrb.w	r3, [sl]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 809f 	beq.w	8004efc <_vfiprintf_r+0x1ec>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dc8:	f10a 0a01 	add.w	sl, sl, #1
 8004dcc:	9304      	str	r3, [sp, #16]
 8004dce:	9307      	str	r3, [sp, #28]
 8004dd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dd6:	4654      	mov	r4, sl
 8004dd8:	2205      	movs	r2, #5
 8004dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dde:	4853      	ldr	r0, [pc, #332]	@ (8004f2c <_vfiprintf_r+0x21c>)
 8004de0:	f7fb f9f6 	bl	80001d0 <memchr>
 8004de4:	9a04      	ldr	r2, [sp, #16]
 8004de6:	b9d8      	cbnz	r0, 8004e20 <_vfiprintf_r+0x110>
 8004de8:	06d1      	lsls	r1, r2, #27
 8004dea:	bf44      	itt	mi
 8004dec:	2320      	movmi	r3, #32
 8004dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004df2:	0713      	lsls	r3, r2, #28
 8004df4:	bf44      	itt	mi
 8004df6:	232b      	movmi	r3, #43	@ 0x2b
 8004df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e02:	d015      	beq.n	8004e30 <_vfiprintf_r+0x120>
 8004e04:	9a07      	ldr	r2, [sp, #28]
 8004e06:	4654      	mov	r4, sl
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f04f 0c0a 	mov.w	ip, #10
 8004e0e:	4621      	mov	r1, r4
 8004e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e14:	3b30      	subs	r3, #48	@ 0x30
 8004e16:	2b09      	cmp	r3, #9
 8004e18:	d94b      	bls.n	8004eb2 <_vfiprintf_r+0x1a2>
 8004e1a:	b1b0      	cbz	r0, 8004e4a <_vfiprintf_r+0x13a>
 8004e1c:	9207      	str	r2, [sp, #28]
 8004e1e:	e014      	b.n	8004e4a <_vfiprintf_r+0x13a>
 8004e20:	eba0 0308 	sub.w	r3, r0, r8
 8004e24:	fa09 f303 	lsl.w	r3, r9, r3
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	46a2      	mov	sl, r4
 8004e2e:	e7d2      	b.n	8004dd6 <_vfiprintf_r+0xc6>
 8004e30:	9b03      	ldr	r3, [sp, #12]
 8004e32:	1d19      	adds	r1, r3, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	9103      	str	r1, [sp, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bfbb      	ittet	lt
 8004e3c:	425b      	neglt	r3, r3
 8004e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004e42:	9307      	strge	r3, [sp, #28]
 8004e44:	9307      	strlt	r3, [sp, #28]
 8004e46:	bfb8      	it	lt
 8004e48:	9204      	strlt	r2, [sp, #16]
 8004e4a:	7823      	ldrb	r3, [r4, #0]
 8004e4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e4e:	d10a      	bne.n	8004e66 <_vfiprintf_r+0x156>
 8004e50:	7863      	ldrb	r3, [r4, #1]
 8004e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e54:	d132      	bne.n	8004ebc <_vfiprintf_r+0x1ac>
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	1d1a      	adds	r2, r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	9203      	str	r2, [sp, #12]
 8004e5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e62:	3402      	adds	r4, #2
 8004e64:	9305      	str	r3, [sp, #20]
 8004e66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f3c <_vfiprintf_r+0x22c>
 8004e6a:	7821      	ldrb	r1, [r4, #0]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4650      	mov	r0, sl
 8004e70:	f7fb f9ae 	bl	80001d0 <memchr>
 8004e74:	b138      	cbz	r0, 8004e86 <_vfiprintf_r+0x176>
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	eba0 000a 	sub.w	r0, r0, sl
 8004e7c:	2240      	movs	r2, #64	@ 0x40
 8004e7e:	4082      	lsls	r2, r0
 8004e80:	4313      	orrs	r3, r2
 8004e82:	3401      	adds	r4, #1
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8a:	4829      	ldr	r0, [pc, #164]	@ (8004f30 <_vfiprintf_r+0x220>)
 8004e8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e90:	2206      	movs	r2, #6
 8004e92:	f7fb f99d 	bl	80001d0 <memchr>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d03f      	beq.n	8004f1a <_vfiprintf_r+0x20a>
 8004e9a:	4b26      	ldr	r3, [pc, #152]	@ (8004f34 <_vfiprintf_r+0x224>)
 8004e9c:	bb1b      	cbnz	r3, 8004ee6 <_vfiprintf_r+0x1d6>
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	3307      	adds	r3, #7
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	9303      	str	r3, [sp, #12]
 8004eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eac:	443b      	add	r3, r7
 8004eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb0:	e76a      	b.n	8004d88 <_vfiprintf_r+0x78>
 8004eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	2001      	movs	r0, #1
 8004eba:	e7a8      	b.n	8004e0e <_vfiprintf_r+0xfe>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	3401      	adds	r4, #1
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f04f 0c0a 	mov.w	ip, #10
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ece:	3a30      	subs	r2, #48	@ 0x30
 8004ed0:	2a09      	cmp	r2, #9
 8004ed2:	d903      	bls.n	8004edc <_vfiprintf_r+0x1cc>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0c6      	beq.n	8004e66 <_vfiprintf_r+0x156>
 8004ed8:	9105      	str	r1, [sp, #20]
 8004eda:	e7c4      	b.n	8004e66 <_vfiprintf_r+0x156>
 8004edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e7f0      	b.n	8004ec8 <_vfiprintf_r+0x1b8>
 8004ee6:	ab03      	add	r3, sp, #12
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	462a      	mov	r2, r5
 8004eec:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <_vfiprintf_r+0x228>)
 8004eee:	a904      	add	r1, sp, #16
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f7fd fc6b 	bl	80027cc <_printf_float>
 8004ef6:	4607      	mov	r7, r0
 8004ef8:	1c78      	adds	r0, r7, #1
 8004efa:	d1d6      	bne.n	8004eaa <_vfiprintf_r+0x19a>
 8004efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004efe:	07d9      	lsls	r1, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_vfiprintf_r+0x1fe>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	059a      	lsls	r2, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_vfiprintf_r+0x1fe>
 8004f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f0a:	f7fe fbf3 	bl	80036f4 <__retarget_lock_release_recursive>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	065b      	lsls	r3, r3, #25
 8004f12:	f53f af1f 	bmi.w	8004d54 <_vfiprintf_r+0x44>
 8004f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f18:	e71e      	b.n	8004d58 <_vfiprintf_r+0x48>
 8004f1a:	ab03      	add	r3, sp, #12
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	462a      	mov	r2, r5
 8004f20:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <_vfiprintf_r+0x228>)
 8004f22:	a904      	add	r1, sp, #16
 8004f24:	4630      	mov	r0, r6
 8004f26:	f7fd fee9 	bl	8002cfc <_printf_i>
 8004f2a:	e7e4      	b.n	8004ef6 <_vfiprintf_r+0x1e6>
 8004f2c:	08005374 	.word	0x08005374
 8004f30:	0800537e 	.word	0x0800537e
 8004f34:	080027cd 	.word	0x080027cd
 8004f38:	08004ceb 	.word	0x08004ceb
 8004f3c:	0800537a 	.word	0x0800537a

08004f40 <__swhatbuf_r>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	460c      	mov	r4, r1
 8004f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	b096      	sub	sp, #88	@ 0x58
 8004f4c:	4615      	mov	r5, r2
 8004f4e:	461e      	mov	r6, r3
 8004f50:	da0d      	bge.n	8004f6e <__swhatbuf_r+0x2e>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f58:	f04f 0100 	mov.w	r1, #0
 8004f5c:	bf14      	ite	ne
 8004f5e:	2340      	movne	r3, #64	@ 0x40
 8004f60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f64:	2000      	movs	r0, #0
 8004f66:	6031      	str	r1, [r6, #0]
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	b016      	add	sp, #88	@ 0x58
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
 8004f6e:	466a      	mov	r2, sp
 8004f70:	f000 f848 	bl	8005004 <_fstat_r>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	dbec      	blt.n	8004f52 <__swhatbuf_r+0x12>
 8004f78:	9901      	ldr	r1, [sp, #4]
 8004f7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f82:	4259      	negs	r1, r3
 8004f84:	4159      	adcs	r1, r3
 8004f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f8a:	e7eb      	b.n	8004f64 <__swhatbuf_r+0x24>

08004f8c <__smakebuf_r>:
 8004f8c:	898b      	ldrh	r3, [r1, #12]
 8004f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f90:	079d      	lsls	r5, r3, #30
 8004f92:	4606      	mov	r6, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	d507      	bpl.n	8004fa8 <__smakebuf_r+0x1c>
 8004f98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	6163      	str	r3, [r4, #20]
 8004fa4:	b003      	add	sp, #12
 8004fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa8:	ab01      	add	r3, sp, #4
 8004faa:	466a      	mov	r2, sp
 8004fac:	f7ff ffc8 	bl	8004f40 <__swhatbuf_r>
 8004fb0:	9f00      	ldr	r7, [sp, #0]
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7ff fa7a 	bl	80044b0 <_malloc_r>
 8004fbc:	b948      	cbnz	r0, 8004fd2 <__smakebuf_r+0x46>
 8004fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc2:	059a      	lsls	r2, r3, #22
 8004fc4:	d4ee      	bmi.n	8004fa4 <__smakebuf_r+0x18>
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	e7e2      	b.n	8004f98 <__smakebuf_r+0xc>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	6020      	str	r0, [r4, #0]
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fe2:	b15b      	cbz	r3, 8004ffc <__smakebuf_r+0x70>
 8004fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 f81d 	bl	8005028 <_isatty_r>
 8004fee:	b128      	cbz	r0, 8004ffc <__smakebuf_r+0x70>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	431d      	orrs	r5, r3
 8005000:	81a5      	strh	r5, [r4, #12]
 8005002:	e7cf      	b.n	8004fa4 <__smakebuf_r+0x18>

08005004 <_fstat_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	@ (8005024 <_fstat_r+0x20>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f7fd fa57 	bl	80024c4 <_fstat>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_fstat_r+0x1c>
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	b103      	cbz	r3, 8005020 <_fstat_r+0x1c>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20000430 	.word	0x20000430

08005028 <_isatty_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d06      	ldr	r5, [pc, #24]	@ (8005044 <_isatty_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fd fa56 	bl	80024e4 <_isatty>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_isatty_r+0x1a>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_isatty_r+0x1a>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20000430 	.word	0x20000430

08005048 <_sbrk_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d06      	ldr	r5, [pc, #24]	@ (8005064 <_sbrk_r+0x1c>)
 800504c:	2300      	movs	r3, #0
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f000 f8b8 	bl	80051c8 <_sbrk>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_sbrk_r+0x1a>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_sbrk_r+0x1a>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000430 	.word	0x20000430

08005068 <__assert_func>:
 8005068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800506a:	4614      	mov	r4, r2
 800506c:	461a      	mov	r2, r3
 800506e:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <__assert_func+0x2c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4605      	mov	r5, r0
 8005074:	68d8      	ldr	r0, [r3, #12]
 8005076:	b14c      	cbz	r4, 800508c <__assert_func+0x24>
 8005078:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <__assert_func+0x30>)
 800507a:	9100      	str	r1, [sp, #0]
 800507c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005080:	4906      	ldr	r1, [pc, #24]	@ (800509c <__assert_func+0x34>)
 8005082:	462b      	mov	r3, r5
 8005084:	f000 f842 	bl	800510c <fiprintf>
 8005088:	f000 f852 	bl	8005130 <abort>
 800508c:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <__assert_func+0x38>)
 800508e:	461c      	mov	r4, r3
 8005090:	e7f3      	b.n	800507a <__assert_func+0x12>
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	0800538f 	.word	0x0800538f
 800509c:	0800539c 	.word	0x0800539c
 80050a0:	080053ca 	.word	0x080053ca

080050a4 <_calloc_r>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	fba1 5402 	umull	r5, r4, r1, r2
 80050aa:	b934      	cbnz	r4, 80050ba <_calloc_r+0x16>
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7ff f9ff 	bl	80044b0 <_malloc_r>
 80050b2:	4606      	mov	r6, r0
 80050b4:	b928      	cbnz	r0, 80050c2 <_calloc_r+0x1e>
 80050b6:	4630      	mov	r0, r6
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
 80050ba:	220c      	movs	r2, #12
 80050bc:	6002      	str	r2, [r0, #0]
 80050be:	2600      	movs	r6, #0
 80050c0:	e7f9      	b.n	80050b6 <_calloc_r+0x12>
 80050c2:	462a      	mov	r2, r5
 80050c4:	4621      	mov	r1, r4
 80050c6:	f7fe faa9 	bl	800361c <memset>
 80050ca:	e7f4      	b.n	80050b6 <_calloc_r+0x12>

080050cc <__ascii_mbtowc>:
 80050cc:	b082      	sub	sp, #8
 80050ce:	b901      	cbnz	r1, 80050d2 <__ascii_mbtowc+0x6>
 80050d0:	a901      	add	r1, sp, #4
 80050d2:	b142      	cbz	r2, 80050e6 <__ascii_mbtowc+0x1a>
 80050d4:	b14b      	cbz	r3, 80050ea <__ascii_mbtowc+0x1e>
 80050d6:	7813      	ldrb	r3, [r2, #0]
 80050d8:	600b      	str	r3, [r1, #0]
 80050da:	7812      	ldrb	r2, [r2, #0]
 80050dc:	1e10      	subs	r0, r2, #0
 80050de:	bf18      	it	ne
 80050e0:	2001      	movne	r0, #1
 80050e2:	b002      	add	sp, #8
 80050e4:	4770      	bx	lr
 80050e6:	4610      	mov	r0, r2
 80050e8:	e7fb      	b.n	80050e2 <__ascii_mbtowc+0x16>
 80050ea:	f06f 0001 	mvn.w	r0, #1
 80050ee:	e7f8      	b.n	80050e2 <__ascii_mbtowc+0x16>

080050f0 <__ascii_wctomb>:
 80050f0:	4603      	mov	r3, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	b141      	cbz	r1, 8005108 <__ascii_wctomb+0x18>
 80050f6:	2aff      	cmp	r2, #255	@ 0xff
 80050f8:	d904      	bls.n	8005104 <__ascii_wctomb+0x14>
 80050fa:	228a      	movs	r2, #138	@ 0x8a
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	4770      	bx	lr
 8005104:	700a      	strb	r2, [r1, #0]
 8005106:	2001      	movs	r0, #1
 8005108:	4770      	bx	lr
	...

0800510c <fiprintf>:
 800510c:	b40e      	push	{r1, r2, r3}
 800510e:	b503      	push	{r0, r1, lr}
 8005110:	4601      	mov	r1, r0
 8005112:	ab03      	add	r3, sp, #12
 8005114:	4805      	ldr	r0, [pc, #20]	@ (800512c <fiprintf+0x20>)
 8005116:	f853 2b04 	ldr.w	r2, [r3], #4
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	f7ff fdf7 	bl	8004d10 <_vfiprintf_r>
 8005122:	b002      	add	sp, #8
 8005124:	f85d eb04 	ldr.w	lr, [sp], #4
 8005128:	b003      	add	sp, #12
 800512a:	4770      	bx	lr
 800512c:	2000000c 	.word	0x2000000c

08005130 <abort>:
 8005130:	b508      	push	{r3, lr}
 8005132:	2006      	movs	r0, #6
 8005134:	f000 f82c 	bl	8005190 <raise>
 8005138:	2001      	movs	r0, #1
 800513a:	f7fd f98f 	bl	800245c <_exit>

0800513e <_raise_r>:
 800513e:	291f      	cmp	r1, #31
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4605      	mov	r5, r0
 8005144:	460c      	mov	r4, r1
 8005146:	d904      	bls.n	8005152 <_raise_r+0x14>
 8005148:	2316      	movs	r3, #22
 800514a:	6003      	str	r3, [r0, #0]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	bd38      	pop	{r3, r4, r5, pc}
 8005152:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005154:	b112      	cbz	r2, 800515c <_raise_r+0x1e>
 8005156:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800515a:	b94b      	cbnz	r3, 8005170 <_raise_r+0x32>
 800515c:	4628      	mov	r0, r5
 800515e:	f000 f831 	bl	80051c4 <_getpid_r>
 8005162:	4622      	mov	r2, r4
 8005164:	4601      	mov	r1, r0
 8005166:	4628      	mov	r0, r5
 8005168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800516c:	f000 b818 	b.w	80051a0 <_kill_r>
 8005170:	2b01      	cmp	r3, #1
 8005172:	d00a      	beq.n	800518a <_raise_r+0x4c>
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	d103      	bne.n	8005180 <_raise_r+0x42>
 8005178:	2316      	movs	r3, #22
 800517a:	6003      	str	r3, [r0, #0]
 800517c:	2001      	movs	r0, #1
 800517e:	e7e7      	b.n	8005150 <_raise_r+0x12>
 8005180:	2100      	movs	r1, #0
 8005182:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005186:	4620      	mov	r0, r4
 8005188:	4798      	blx	r3
 800518a:	2000      	movs	r0, #0
 800518c:	e7e0      	b.n	8005150 <_raise_r+0x12>
	...

08005190 <raise>:
 8005190:	4b02      	ldr	r3, [pc, #8]	@ (800519c <raise+0xc>)
 8005192:	4601      	mov	r1, r0
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f7ff bfd2 	b.w	800513e <_raise_r>
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <_kill_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	@ (80051c0 <_kill_r+0x20>)
 80051a4:	2300      	movs	r3, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	602b      	str	r3, [r5, #0]
 80051ae:	f7fd f945 	bl	800243c <_kill>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d102      	bne.n	80051bc <_kill_r+0x1c>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	b103      	cbz	r3, 80051bc <_kill_r+0x1c>
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	bd38      	pop	{r3, r4, r5, pc}
 80051be:	bf00      	nop
 80051c0:	20000430 	.word	0x20000430

080051c4 <_getpid_r>:
 80051c4:	f7fd b932 	b.w	800242c <_getpid>

080051c8 <_sbrk>:
 80051c8:	4a04      	ldr	r2, [pc, #16]	@ (80051dc <_sbrk+0x14>)
 80051ca:	6811      	ldr	r1, [r2, #0]
 80051cc:	4603      	mov	r3, r0
 80051ce:	b909      	cbnz	r1, 80051d4 <_sbrk+0xc>
 80051d0:	4903      	ldr	r1, [pc, #12]	@ (80051e0 <_sbrk+0x18>)
 80051d2:	6011      	str	r1, [r2, #0]
 80051d4:	6810      	ldr	r0, [r2, #0]
 80051d6:	4403      	add	r3, r0
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	4770      	bx	lr
 80051dc:	20000440 	.word	0x20000440
 80051e0:	20000448 	.word	0x20000448

080051e4 <_init>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	bf00      	nop
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr

080051f0 <_fini>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr
