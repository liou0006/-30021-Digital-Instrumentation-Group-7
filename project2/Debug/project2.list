
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08007290  08007290  00008290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b0  080078b0  000091cc  2**0
                  CONTENTS
  4 .ARM          00000008  080078b0  080078b0  000088b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b8  080078b8  000091cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b8  080078b8  000088b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078bc  080078bc  000088bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080078c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001cc  08007a8c  000091cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08007a8c  00009840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae88  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  00014084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00016368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a92  00000000  00000000  000171a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001245e  00000000  00000000  00017c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5bd  00000000  00000000  0002a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d676  00000000  00000000  00039655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  00096d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  0009c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007274 	.word	0x08007274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08007274 	.word	0x08007274

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	60fb      	str	r3, [r7, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <ADC_Init+0x80>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution|                 
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000c6c:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
  ADC_InitStruct->ADC_Resolution|                 
 8000c72:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 8000c78:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_DataAlign|                 
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691b      	ldr	r3, [r3, #16]
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 8000c7e:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_OverrunMode|        
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	695b      	ldr	r3, [r3, #20]
  ADC_InitStruct->ADC_DataAlign|                 
 8000c84:	431a      	orrs	r2, r3
  ADC_InitStruct->ADC_AutoInjMode;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
  ADC_InitStruct->ADC_OverrunMode|        
 8000c8a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	60da      	str	r2, [r3, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	7f1b      	ldrb	r3, [r3, #28]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	461a      	mov	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	631a      	str	r2, [r3, #48]	@ 0x30
   
}  
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	fdffc007 	.word	0xfdffc007

08000ccc <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	771a      	strb	r2, [r3, #28]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <ADC_Cmd+0x20>
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f043 0201 	orr.w	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
  }
}
 8000d2e:	e005      	b.n	8000d3c <ADC_Cmd+0x2c>
    ADCx->CR |= ADC_CR_ADDIS;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f043 0202 	orr.w	r2, r3, #2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <ADC_SelectCalibrationMode>:
  *          @arg ADC_CalibrationMode_Single: to select the calibration for single channel
  *          @arg ADC_CalibrationMode_Differential: to select the calibration for differential channel         
  * @retval None
  */
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]

}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	da02      	bge.n	8000db0 <ADC_GetCalibrationStatus+0x1a>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <ADC_GetCalibrationStatus+0x1e>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <ADC_GetDisableCmdStatus>:
  * @brief  Gets the selected ADC disable command Status.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The new state of ADC ADC disable command (SET or RESET).
  */
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of ADDIS bit */
  if ((ADCx->CR & ADC_CR_ADDIS) != (uint32_t)RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <ADC_GetDisableCmdStatus+0x1e>
  {
    /* ADDIS bit is set */
    bitstatus = SET;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e001      	b.n	8000de4 <ADC_GetDisableCmdStatus+0x22>
  }
  else
  {
    /* ADDIS bit is reset */
    bitstatus = RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADDIS bit status */
  return  bitstatus;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <ADC_VoltageRegulatorCmd>:
  * @param  NewState: new state of the ADCx Voltage Regulator.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  
  if (NewState != DISABLE)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <ADC_VoltageRegulatorCmd+0x2c>
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
  }
}
 8000e1c:	e005      	b.n	8000e2a <ADC_VoltageRegulatorCmd+0x38>
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vrefint.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((ADCx == ADC1) || (ADCx == ADC2))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e4a:	d003      	beq.n	8000e54 <ADC_VrefintCmd+0x1c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <ADC_VrefintCmd+0x6c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d110      	bne.n	8000e76 <ADC_VrefintCmd+0x3e>
  {
    if (NewState != DISABLE)
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <ADC_VrefintCmd+0x30>
    {
      /* Enable the Vrefint channel*/
      ADC1_2->CCR |= ADC12_CCR_VREFEN;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e64:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000e66:	e017      	b.n	8000e98 <ADC_VrefintCmd+0x60>
    }
    else
    {
      /* Disable the Vrefint channel*/
      ADC1_2->CCR &= ~(uint32_t)ADC12_CCR_VREFEN;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <ADC_VrefintCmd+0x70>)
 8000e6e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000e72:	6093      	str	r3, [r2, #8]
    if (NewState != DISABLE)
 8000e74:	e010      	b.n	8000e98 <ADC_VrefintCmd+0x60>
    }
  }
  else
  {
    if (NewState != DISABLE)
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <ADC_VrefintCmd+0x52>
    {
      /* Enable the Vrefint channel*/
      ADC3_4->CCR |= ADC34_CCR_VREFEN;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <ADC_VrefintCmd+0x74>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <ADC_VrefintCmd+0x74>)
 8000e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e86:	6093      	str	r3, [r2, #8]
    {
      /* Disable the Vrefint channel*/
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
    }
  }
}
 8000e88:	e006      	b.n	8000e98 <ADC_VrefintCmd+0x60>
      ADC3_4->CCR &= ~(uint32_t)ADC34_CCR_VREFEN;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <ADC_VrefintCmd+0x74>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <ADC_VrefintCmd+0x74>)
 8000e90:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000e94:	6093      	str	r3, [r2, #8]
}
 8000e96:	e7ff      	b.n	8000e98 <ADC_VrefintCmd+0x60>
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	50000100 	.word	0x50000100
 8000ea8:	50000300 	.word	0x50000300
 8000eac:	50000700 	.word	0x50000700

08000eb0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_181Cycles5: Sample time equal to 181.5 cycles	
  *     @arg ADC_SampleTime_601Cycles5: Sample time equal to 601.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	70fb      	strb	r3, [r7, #3]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70bb      	strb	r3, [r7, #2]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8000ed2:	78bb      	ldrb	r3, [r7, #2]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d821      	bhi.n	8000f1c <ADC_RegularChannelConfig+0x6c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 8000ede:	78ba      	ldrb	r2, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	231f      	movs	r3, #31
 8000eec:	4093      	lsls	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 8000efa:	78f9      	ldrb	r1, [r7, #3]
 8000efc:	78ba      	ldrb	r2, [r7, #2]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f1a:	e074      	b.n	8001006 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 5 to 9 */
  else if (Rank < 10)
 8000f1c:	78bb      	ldrb	r3, [r7, #2]
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	d823      	bhi.n	8000f6a <ADC_RegularChannelConfig+0xba>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f26:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8000f28:	78bb      	ldrb	r3, [r7, #2]
 8000f2a:	1f5a      	subs	r2, r3, #5
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	461a      	mov	r2, r3
 8000f36:	231f      	movs	r3, #31
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4013      	ands	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 8000f46:	78f9      	ldrb	r1, [r7, #3]
 8000f48:	78bb      	ldrb	r3, [r7, #2]
 8000f4a:	1f5a      	subs	r2, r3, #5
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f68:	e04d      	b.n	8001006 <ADC_RegularChannelConfig+0x156>
  }
  /* For Rank 10 to 14 */
  else if (Rank < 15)
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	2b0e      	cmp	r3, #14
 8000f6e:	d825      	bhi.n	8000fbc <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 8000f76:	78bb      	ldrb	r3, [r7, #2]
 8000f78:	f1a3 020a 	sub.w	r2, r3, #10
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	461a      	mov	r2, r3
 8000f86:	231f      	movs	r3, #31
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	78bb      	ldrb	r3, [r7, #2]
 8000f9a:	f1a3 020a 	sub.w	r2, r3, #10
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fba:	e024      	b.n	8001006 <ADC_RegularChannelConfig+0x156>
  }
  else 
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 8000fc2:	78bb      	ldrb	r3, [r7, #2]
 8000fc4:	f1a3 020f 	sub.w	r2, r3, #15
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	231f      	movs	r3, #31
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 8000fe2:	78f9      	ldrb	r1, [r7, #3]
 8000fe4:	78bb      	ldrb	r3, [r7, #2]
 8000fe6:	f1a3 020f 	sub.w	r2, r3, #15
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d923      	bls.n	8001054 <ADC_RegularChannelConfig+0x1a4>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	f1a3 020a 	sub.w	r2, r3, #10
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	2207      	movs	r2, #7
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6999      	ldr	r1, [r3, #24]
 8001038:	7878      	ldrb	r0, [r7, #1]
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	f1a3 020a 	sub.w	r2, r3, #10
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	fa00 f303 	lsl.w	r3, r0, r3
 800104a:	ea41 0203 	orr.w	r2, r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001052:	e01f      	b.n	8001094 <ADC_RegularChannelConfig+0x1e4>
    tmpreg1 = ADCx->SMPR1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	60fb      	str	r3, [r7, #12]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	2238      	movs	r2, #56	@ 0x38
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	60bb      	str	r3, [r7, #8]
	ADCx->SMPR1 &= ~tmpreg2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	615a      	str	r2, [r3, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6959      	ldr	r1, [r3, #20]
 800107e:	7878      	ldrb	r0, [r7, #1]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	fa00 f303 	lsl.w	r3, r0, r3
 800108c:	ea41 0203 	orr.w	r2, r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	615a      	str	r2, [r3, #20]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f043 0204 	orr.w	r2, r3, #4
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	b29b      	uxth	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_AWD3: ADC Analog watchdog 3 flag 
  *     @arg ADC_FLAG_JQOVF: ADC Injected Context Queue Overflow flag 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <ADC_GetFlagStatus+0x20>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <ADC_GetFlagStatus+0x24>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001118:	4b7b      	ldr	r3, [pc, #492]	@ (8001308 <EXTI_Init+0x1fc>)
 800111a:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799b      	ldrb	r3, [r3, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80d2 	beq.w	80012ca <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001130:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8001134:	015b      	lsls	r3, r3, #5
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	2201      	movs	r2, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001152:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8001156:	015b      	lsls	r3, r3, #5
 8001158:	4618      	mov	r0, r3
 800115a:	ea01 0302 	and.w	r3, r1, r2
 800115e:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	015a      	lsls	r2, r3, #5
 8001168:	4b68      	ldr	r3, [pc, #416]	@ (800130c <EXTI_Init+0x200>)
 800116a:	4413      	add	r3, r2
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	2201      	movs	r2, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43da      	mvns	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	0158      	lsls	r0, r3, #5
 8001186:	4b61      	ldr	r3, [pc, #388]	@ (800130c <EXTI_Init+0x200>)
 8001188:	4403      	add	r3, r0
 800118a:	4618      	mov	r0, r3
 800118c:	ea01 0302 	and.w	r3, r1, r2
 8001190:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	461a      	mov	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	015b      	lsls	r3, r3, #5
 80011a0:	4413      	add	r3, r2
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	4619      	mov	r1, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 80011c2:	4b51      	ldr	r3, [pc, #324]	@ (8001308 <EXTI_Init+0x1fc>)
 80011c4:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	015a      	lsls	r2, r3, #5
 80011ce:	4b50      	ldr	r3, [pc, #320]	@ (8001310 <EXTI_Init+0x204>)
 80011d0:	4413      	add	r3, r2
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2201      	movs	r2, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	095b      	lsrs	r3, r3, #5
 80011ea:	0158      	lsls	r0, r3, #5
 80011ec:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <EXTI_Init+0x204>)
 80011ee:	4403      	add	r3, r0
 80011f0:	4618      	mov	r0, r3
 80011f2:	ea01 0302 	and.w	r3, r1, r2
 80011f6:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	4b44      	ldr	r3, [pc, #272]	@ (8001314 <EXTI_Init+0x208>)
 8001202:	4413      	add	r3, r2
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2201      	movs	r2, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	0158      	lsls	r0, r3, #5
 800121e:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <EXTI_Init+0x208>)
 8001220:	4403      	add	r3, r0
 8001222:	4618      	mov	r0, r3
 8001224:	ea01 0302 	and.w	r3, r1, r2
 8001228:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d132      	bne.n	8001298 <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	015a      	lsls	r2, r3, #5
 800123a:	4b35      	ldr	r3, [pc, #212]	@ (8001310 <EXTI_Init+0x204>)
 800123c:	4413      	add	r3, r2
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	4618      	mov	r0, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	0159      	lsls	r1, r3, #5
 8001258:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <EXTI_Init+0x204>)
 800125a:	440b      	add	r3, r1
 800125c:	4619      	mov	r1, r3
 800125e:	ea42 0300 	orr.w	r3, r2, r0
 8001262:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	095b      	lsrs	r3, r3, #5
 800126a:	015a      	lsls	r2, r3, #5
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <EXTI_Init+0x208>)
 800126e:	4413      	add	r3, r2
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	4618      	mov	r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	0159      	lsls	r1, r3, #5
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <EXTI_Init+0x208>)
 800128c:	440b      	add	r3, r1
 800128e:	4619      	mov	r1, r3
 8001290:	ea42 0300 	orr.w	r3, r2, r0
 8001294:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 8001296:	e030      	b.n	80012fa <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	795b      	ldrb	r3, [r3, #5]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	015b      	lsls	r3, r3, #5
 80012a6:	4413      	add	r3, r2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	e017      	b.n	80012fa <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	015b      	lsls	r3, r3, #5
 80012d8:	4413      	add	r3, r2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	2201      	movs	r2, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	400a      	ands	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40010400 	.word	0x40010400
 800130c:	40010404 	.word	0x40010404
 8001310:	40010408 	.word	0x40010408
 8001314:	4001040c 	.word	0x4001040c

08001318 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001330:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	015a      	lsls	r2, r3, #5
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <EXTI_GetITStatus+0x6c>)
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <EXTI_GetITStatus+0x5a>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e001      	b.n	8001376 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40010414 	.word	0x40010414

08001388 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f103 	lsl.w	r1, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <EXTI_ClearITPendingBit+0x30>)
 80013a4:	4413      	add	r3, r2
 80013a6:	460a      	mov	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40010414 	.word	0x40010414

080013bc <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e07c      	b.n	80014d2 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80013d8:	2201      	movs	r2, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d16b      	bne.n	80014cc <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	791b      	ldrb	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d003      	beq.n	8001404 <GPIO_Init+0x48>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d134      	bne.n	800146e <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2103      	movs	r1, #3
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	4619      	mov	r1, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	b29a      	uxth	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	2301      	movs	r3, #1
 8001440:	408b      	lsls	r3, r1
 8001442:	b29b      	uxth	r3, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	4013      	ands	r3, r2
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	889b      	ldrh	r3, [r3, #4]
 8001454:	b29a      	uxth	r2, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	4619      	mov	r1, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	b29b      	uxth	r3, r3
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2103      	movs	r1, #3
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	791b      	ldrb	r3, [r3, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2103      	movs	r1, #3
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	79db      	ldrb	r3, [r3, #7]
 80014bc:	4619      	mov	r1, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	f67f af7f 	bls.w	80013d8 <GPIO_Init+0x1c>
    }
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2202      	movs	r2, #2
 8001502:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	71da      	strb	r2, [r3, #7]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001538:	e002      	b.n	8001540 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001554:	4a06      	ldr	r2, [pc, #24]	@ (8001570 <NVIC_PriorityGroupConfig+0x24>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60d3      	str	r3, [r2, #12]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	230f      	movs	r3, #15
 8001586:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	78db      	ldrb	r3, [r3, #3]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03a      	beq.n	8001606 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001590:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <NVIC_Init+0xc0>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f1c3 0304 	rsb	r3, r3, #4
 80015a4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	461a      	mov	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	789b      	ldrb	r3, [r3, #2]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <NVIC_Init+0xc4>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	b2c9      	uxtb	r1, r1
 80015de:	4413      	add	r3, r2
 80015e0:	460a      	mov	r2, r1
 80015e2:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80015ee:	4912      	ldr	r1, [pc, #72]	@ (8001638 <NVIC_Init+0xc4>)
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	0952      	lsrs	r2, r2, #5
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80015fa:	2201      	movs	r2, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001600:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001604:	e00f      	b.n	8001626 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800160e:	490a      	ldr	r1, [pc, #40]	@ (8001638 <NVIC_Init+0xc4>)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	0952      	lsrs	r2, r2, #5
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800161a:	2201      	movs	r2, #1
 800161c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800161e:	f100 0320 	add.w	r3, r0, #32
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	e000e100 	.word	0xe000e100

0800163c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800163c:	b480      	push	{r7}
 800163e:	b08b      	sub	sp, #44	@ 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001664:	4b8b      	ldr	r3, [pc, #556]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b08      	cmp	r3, #8
 8001672:	d011      	beq.n	8001698 <RCC_GetClocksFreq+0x5c>
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d837      	bhi.n	80016ea <RCC_GetClocksFreq+0xae>
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <RCC_GetClocksFreq+0x4c>
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d004      	beq.n	8001690 <RCC_GetClocksFreq+0x54>
 8001686:	e030      	b.n	80016ea <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a83      	ldr	r2, [pc, #524]	@ (8001898 <RCC_GetClocksFreq+0x25c>)
 800168c:	601a      	str	r2, [r3, #0]
      break;
 800168e:	e030      	b.n	80016f2 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a81      	ldr	r2, [pc, #516]	@ (8001898 <RCC_GetClocksFreq+0x25c>)
 8001694:	601a      	str	r2, [r3, #0]
      break;
 8001696:	e02c      	b.n	80016f2 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001698:	4b7e      	ldr	r3, [pc, #504]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80016a0:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80016a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016aa:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	0c9b      	lsrs	r3, r3, #18
 80016b0:	3302      	adds	r3, #2
 80016b2:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4a77      	ldr	r2, [pc, #476]	@ (800189c <RCC_GetClocksFreq+0x260>)
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c4:	e00d      	b.n	80016e2 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80016c6:	4b73      	ldr	r3, [pc, #460]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80016d2:	4a71      	ldr	r2, [pc, #452]	@ (8001898 <RCC_GetClocksFreq+0x25c>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e6:	601a      	str	r2, [r3, #0]
      break;
 80016e8:	e003      	b.n	80016f2 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001898 <RCC_GetClocksFreq+0x25c>)
 80016ee:	601a      	str	r2, [r3, #0]
      break;
 80016f0:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80016f2:	4b68      	ldr	r3, [pc, #416]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016fa:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8001702:	4a67      	ldr	r2, [pc, #412]	@ (80018a0 <RCC_GetClocksFreq+0x264>)
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	40da      	lsrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800171a:	4b5e      	ldr	r3, [pc, #376]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001722:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800172a:	4a5d      	ldr	r2, [pc, #372]	@ (80018a0 <RCC_GetClocksFreq+0x264>)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	40da      	lsrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001742:	4b54      	ldr	r3, [pc, #336]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800174a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	0adb      	lsrs	r3, r3, #11
 8001750:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8001752:	4a53      	ldr	r2, [pc, #332]	@ (80018a0 <RCC_GetClocksFreq+0x264>)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	40da      	lsrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800176a:	4b4a      	ldr	r3, [pc, #296]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001772:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800177a:	4a4a      	ldr	r2, [pc, #296]	@ (80018a4 <RCC_GetClocksFreq+0x268>)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001782:	b29b      	uxth	r3, r3
 8001784:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8001790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fbb2 f2f3 	udiv	r2, r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	e003      	b.n	80017a6 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80017ae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	0a5b      	lsrs	r3, r3, #9
 80017b4:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80017b6:	4a3b      	ldr	r2, [pc, #236]	@ (80018a4 <RCC_GetClocksFreq+0x268>)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 80017cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	e003      	b.n	80017e2 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d003      	beq.n	80017f6 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a29      	ldr	r2, [pc, #164]	@ (8001898 <RCC_GetClocksFreq+0x25c>)
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	e003      	b.n	80017fe <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80017fe:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b20      	cmp	r3, #32
 8001808:	d003      	beq.n	8001812 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a22      	ldr	r2, [pc, #136]	@ (8001898 <RCC_GetClocksFreq+0x25c>)
 800180e:	61da      	str	r2, [r3, #28]
 8001810:	e003      	b.n	800181a <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001826:	d10d      	bne.n	8001844 <RCC_GetClocksFreq+0x208>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182e:	429a      	cmp	r2, r3
 8001830:	d108      	bne.n	8001844 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d104      	bne.n	8001844 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	005a      	lsls	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	621a      	str	r2, [r3, #32]
 8001842:	e003      	b.n	800184c <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001858:	d10d      	bne.n	8001876 <RCC_GetClocksFreq+0x23a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001860:	429a      	cmp	r2, r3
 8001862:	d108      	bne.n	8001876 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	429a      	cmp	r2, r3
 800186a:	d104      	bne.n	8001876 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	005a      	lsls	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24
 8001874:	e003      	b.n	800187e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <RCC_GetClocksFreq+0x258>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10e      	bne.n	80018a8 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
 8001892:	e028      	b.n	80018e6 <RCC_GetClocksFreq+0x2aa>
 8001894:	40021000 	.word	0x40021000
 8001898:	007a1200 	.word	0x007a1200
 800189c:	003d0900 	.word	0x003d0900
 80018a0:	080072f4 	.word	0x080072f4
 80018a4:	08007304 	.word	0x08007304
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80018a8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d104      	bne.n	80018be <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80018bc:	e013      	b.n	80018e6 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80018be:	4b67      	ldr	r3, [pc, #412]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d104      	bne.n	80018d4 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80018d2:	e008      	b.n	80018e6 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80018d4:	4b61      	ldr	r3, [pc, #388]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d102      	bne.n	80018e6 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a60 <RCC_GetClocksFreq+0x424>)
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80018e6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018fa:	e021      	b.n	8001940 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 80018fc:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001908:	d104      	bne.n	8001914 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001912:	e015      	b.n	8001940 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001914:	4b51      	ldr	r3, [pc, #324]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800191c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001920:	d104      	bne.n	800192c <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c
 800192a:	e009      	b.n	8001940 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800192c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001934:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001938:	d102      	bne.n	8001940 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a48      	ldr	r2, [pc, #288]	@ (8001a60 <RCC_GetClocksFreq+0x424>)
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8001940:	4b46      	ldr	r3, [pc, #280]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d104      	bne.n	8001956 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
 8001954:	e021      	b.n	800199a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800195e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001962:	d104      	bne.n	800196e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
 800196c:	e015      	b.n	800199a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001976:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800197a:	d104      	bne.n	8001986 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
 8001984:	e009      	b.n	800199a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001986:	4b35      	ldr	r3, [pc, #212]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800198e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001992:	d102      	bne.n	800199a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a32      	ldr	r2, [pc, #200]	@ (8001a60 <RCC_GetClocksFreq+0x424>)
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800199a:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d104      	bne.n	80019b0 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ae:	e021      	b.n	80019f4 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80019b0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019bc:	d104      	bne.n	80019c8 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c6:	e015      	b.n	80019f4 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80019c8:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019d4:	d104      	bne.n	80019e0 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019de:	e009      	b.n	80019f4 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80019ec:	d102      	bne.n	80019f4 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a60 <RCC_GetClocksFreq+0x424>)
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d104      	bne.n	8001a0a <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8001a08:	e021      	b.n	8001a4e <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a16:	d104      	bne.n	8001a22 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a20:	e015      	b.n	8001a4e <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001a2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a2e:	d104      	bne.n	8001a3a <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a36:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a38:	e009      	b.n	8001a4e <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <RCC_GetClocksFreq+0x420>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001a42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001a46:	d102      	bne.n	8001a4e <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <RCC_GetClocksFreq+0x424>)
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a4e:	bf00      	nop
 8001a50:	372c      	adds	r7, #44	@ 0x2c
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	007a1200 	.word	0x007a1200

08001a64 <RCC_ADCCLKConfig>:
  *     @arg RCC_ADC34PLLCLK_Div128: ADC34 clock = PLLCLK/128                                  
  *     @arg RCC_ADC34PLLCLK_Div256: ADC34 clock = PLLCLK/256
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0f1b      	lsrs	r3, r3, #28
 8001a74:	60fb      	str	r3, [r7, #12]
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <RCC_ADCCLKConfig+0x26>
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <RCC_ADCCLKConfig+0x4c>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <RCC_ADCCLKConfig+0x4c>)
 8001a82:	f423 5378 	bic.w	r3, r3, #15872	@ 0x3e00
 8001a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001a88:	e005      	b.n	8001a96 <RCC_ADCCLKConfig+0x32>
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <RCC_ADCCLKConfig+0x4c>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <RCC_ADCCLKConfig+0x4c>)
 8001a90:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8001a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <RCC_ADCCLKConfig+0x4c>)
 8001a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9a:	4905      	ldr	r1, [pc, #20]	@ (8001ab0 <RCC_ADCCLKConfig+0x4c>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	4909      	ldr	r1, [pc, #36]	@ (8001af0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001ad2:	e006      	b.n	8001ae2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <RCC_AHBPeriphClockCmd+0x3c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	614b      	str	r3, [r1, #20]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	4909      	ldr	r1, [pc, #36]	@ (8001b30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001b12:	e006      	b.n	8001b22 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4904      	ldr	r1, [pc, #16]	@ (8001b30 <RCC_APB2PeriphClockCmd+0x3c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	618b      	str	r3, [r1, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	330c      	adds	r3, #12
 8001b4c:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	701a      	strb	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	891b      	ldrh	r3, [r3, #8]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e001      	b.n	8001b8a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001bbc:	4a16      	ldr	r2, [pc, #88]	@ (8001c18 <SYSCFG_EXTILineConfig+0x80>)
 8001bbe:	79bb      	ldrb	r3, [r7, #6]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <SYSCFG_EXTILineConfig+0x80>)
 8001bd0:	79b9      	ldrb	r1, [r7, #6]
 8001bd2:	0889      	lsrs	r1, r1, #2
 8001bd4:	b2c9      	uxtb	r1, r1
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	1c8b      	adds	r3, r1, #2
 8001bda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001bde:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <SYSCFG_EXTILineConfig+0x80>)
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bec:	79f9      	ldrb	r1, [r7, #7]
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <SYSCFG_EXTILineConfig+0x80>)
 8001bfc:	79b9      	ldrb	r1, [r7, #6]
 8001bfe:	0889      	lsrs	r1, r1, #2
 8001c00:	b2c9      	uxtb	r1, r1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	1c8b      	adds	r3, r1, #2
 8001c06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40010000 	.word	0x40010000

08001c1c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	611a      	str	r2, [r3, #16]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001c96:	2201      	movs	r2, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d103      	bne.n	8001cae <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	e005      	b.n	8001cba <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d102      	bne.n	8001cba <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001ccc:	e006      	b.n	8001cdc <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	3724      	adds	r7, #36	@ 0x24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e001      	b.n	8001d0c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001d44:	2201      	movs	r2, #1
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e00d      	b.n	8001d7c <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d105      	bne.n	8001d72 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e004      	b.n	8001d7c <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001d82:	2201      	movs	r2, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <USART_GetITStatus+0x8e>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	74fb      	strb	r3, [r7, #19]
 8001da6:	e001      	b.n	8001dac <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f103 	lsl.w	r1, r2, r3
 8001dd2:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <NVIC_EnableIRQ+0x30>)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4807      	ldr	r0, [pc, #28]	@ (8001e20 <uart_put_char+0x30>)
 8001e02:	f7ff ff1d 	bl	8001c40 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001e06:	bf00      	nop
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <uart_put_char+0x30>)
 8001e0c:	f7ff ff6c 	bl	8001ce8 <USART_GetFlagStatus>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f8      	beq.n	8001e08 <uart_put_char+0x18>
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40004400 	.word	0x40004400

08001e24 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e012      	b.n	8001e5e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b0a      	cmp	r3, #10
 8001e42:	d102      	bne.n	8001e4a <_write_r+0x26>
            uart_put_char('\r');
 8001e44:	200d      	movs	r0, #13
 8001e46:	f7ff ffd3 	bl	8001df0 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffcc 	bl	8001df0 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dbe8      	blt.n	8001e38 <_write_r+0x14>
    }

    return len;
 8001e66:	683b      	ldr	r3, [r7, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001e74:	4915      	ldr	r1, [pc, #84]	@ (8001ecc <USART2_IRQHandler+0x5c>)
 8001e76:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <USART2_IRQHandler+0x60>)
 8001e78:	f7ff ff4f 	bl	8001d1a <USART_GetITStatus>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d021      	beq.n	8001ec6 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <USART2_IRQHandler+0x60>)
 8001e84:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001e86:	b299      	uxth	r1, r3
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <USART2_IRQHandler+0x64>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	b2d0      	uxtb	r0, r2
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <USART2_IRQHandler+0x64>)
 8001e94:	7010      	strb	r0, [r2, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	b2c9      	uxtb	r1, r1
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <USART2_IRQHandler+0x68>)
 8001e9c:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <USART2_IRQHandler+0x6c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2bff      	cmp	r3, #255	@ 0xff
 8001ea6:	d107      	bne.n	8001eb8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <USART2_IRQHandler+0x70>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <USART2_IRQHandler+0x70>)
 8001eb4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8001eb6:	e006      	b.n	8001ec6 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <USART2_IRQHandler+0x6c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <USART2_IRQHandler+0x6c>)
 8001ec4:	701a      	strb	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	00050105 	.word	0x00050105
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	200002e8 	.word	0x200002e8
 8001ed8:	200001e8 	.word	0x200001e8
 8001edc:	200002ea 	.word	0x200002ea
 8001ee0:	200002e9 	.word	0x200002e9

08001ee4 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	@ 0x50
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8001eec:	4b86      	ldr	r3, [pc, #536]	@ (8002108 <uart_init+0x224>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 f8ef 	bl	80040d8 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8001efa:	4b83      	ldr	r3, [pc, #524]	@ (8002108 <uart_init+0x224>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 f8e8 	bl	80040d8 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001f08:	4b80      	ldr	r3, [pc, #512]	@ (800210c <uart_init+0x228>)
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	4a7f      	ldr	r2, [pc, #508]	@ (800210c <uart_init+0x228>)
 8001f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f12:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001f14:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <uart_init+0x228>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	4a7c      	ldr	r2, [pc, #496]	@ (800210c <uart_init+0x228>)
 8001f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001f20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f2e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001f30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f3e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001f40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f4e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001f50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f5a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001f5e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001f60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f6e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001f70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f7a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001f7e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001f80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f84:	889b      	ldrh	r3, [r3, #4]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f8c:	f023 030c 	bic.w	r3, r3, #12
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001f94:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001f98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f9c:	8892      	ldrh	r2, [r2, #4]
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001fa2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fb0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001fb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fbc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001fc0:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001fc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fd0:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001fd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001fdc:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001fe0:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8002110 <uart_init+0x22c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8002110 <uart_init+0x22c>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8001fee:	4b48      	ldr	r3, [pc, #288]	@ (8002110 <uart_init+0x22c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a47      	ldr	r2, [pc, #284]	@ (8002110 <uart_init+0x22c>)
 8001ff4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ff8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8001ffa:	4b45      	ldr	r3, [pc, #276]	@ (8002110 <uart_init+0x22c>)
 8001ffc:	4a44      	ldr	r2, [pc, #272]	@ (8002110 <uart_init+0x22c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8002002:	4b43      	ldr	r3, [pc, #268]	@ (8002110 <uart_init+0x22c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <uart_init+0x22c>)
 8002008:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800200c:	f023 030c 	bic.w	r3, r3, #12
 8002010:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8002012:	4b3f      	ldr	r3, [pc, #252]	@ (8002110 <uart_init+0x22c>)
 8002014:	4a3e      	ldr	r2, [pc, #248]	@ (8002110 <uart_init+0x22c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <uart_init+0x22c>)
 800201c:	4a3c      	ldr	r2, [pc, #240]	@ (8002110 <uart_init+0x22c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8002022:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <uart_init+0x22c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3a      	ldr	r2, [pc, #232]	@ (8002110 <uart_init+0x22c>)
 8002028:	f043 030c 	orr.w	r3, r3, #12
 800202c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800202e:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <uart_init+0x22c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4a37      	ldr	r2, [pc, #220]	@ (8002110 <uart_init+0x22c>)
 8002034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002038:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800203a:	4b35      	ldr	r3, [pc, #212]	@ (8002110 <uart_init+0x22c>)
 800203c:	4a34      	ldr	r2, [pc, #208]	@ (8002110 <uart_init+0x22c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002046:	2300      	movs	r3, #0
 8002048:	647b      	str	r3, [r7, #68]	@ 0x44
 800204a:	2300      	movs	r3, #0
 800204c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff faf2 	bl	800163c <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8002058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205a:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800205c:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <uart_init+0x22c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8002068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800206a:	005a      	lsls	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8002074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	fbb3 f2f2 	udiv	r2, r3, r2
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	fb01 f202 	mul.w	r2, r1, r2
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002088:	e00d      	b.n	80020a6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800208a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8002094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	fbb3 f2f2 	udiv	r2, r3, r2
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	fb01 f202 	mul.w	r2, r1, r2
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d302      	bcc.n	80020b6 <uart_init+0x1d2>
        divider++;
 80020b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020b2:	3301      	adds	r3, #1
 80020b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80020b6:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <uart_init+0x22c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80020c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80020cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020ce:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80020d2:	4013      	ands	r3, r2
 80020d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020d6:	4313      	orrs	r3, r2
 80020d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <uart_init+0x22c>)
 80020dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020de:	b292      	uxth	r2, r2
 80020e0:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <uart_init+0x22c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <uart_init+0x22c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80020ee:	2201      	movs	r2, #1
 80020f0:	4908      	ldr	r1, [pc, #32]	@ (8002114 <uart_init+0x230>)
 80020f2:	4807      	ldr	r0, [pc, #28]	@ (8002110 <uart_init+0x22c>)
 80020f4:	f7ff fdb6 	bl	8001c64 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80020f8:	2026      	movs	r0, #38	@ 0x26
 80020fa:	f7ff fe5f 	bl	8001dbc <NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3750      	adds	r7, #80	@ 0x50
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000010 	.word	0x20000010
 800210c:	40021000 	.word	0x40021000
 8002110:	40004400 	.word	0x40004400
 8002114:	00050105 	.word	0x00050105

08002118 <ADC_setup_PA>:
 *      Author: fcadi
 */

#include "ADC.h"

void ADC_setup_PA(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	@ 0x30
 800211c:	af00      	add	r7, sp, #0

	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8);
 800211e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8002122:	f7ff fc9f 	bl	8001a64 <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8002126:	2101      	movs	r1, #1
 8002128:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800212c:	f7ff fcc2 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002130:	2101      	movs	r1, #1
 8002132:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002136:	f7ff fcbd 	bl	8001ab4 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef gpio;
	GPIO_StructInit(&gpio);
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f9d2 	bl	80014e8 <GPIO_StructInit>
	gpio.GPIO_Pin  = GPIO_Pin_0 | GPIO_Pin_1;
 8002144:	2303      	movs	r3, #3
 8002146:	623b      	str	r3, [r7, #32]
	gpio.GPIO_Mode = GPIO_Mode_AN;
 8002148:	2303      	movs	r3, #3
 800214a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	GPIO_Init(GPIOA, &gpio);
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800215e:	f7ff f92d 	bl	80013bc <GPIO_Init>

	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);  // reset to defaults
 8002162:	463b      	mov	r3, r7
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fdb1 	bl	8000ccc <ADC_StructInit>
	adc.ADC_ContinuousConvMode    = DISABLE;                     // single conversion
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
	adc.ADC_Resolution            = ADC_Resolution_12b;          // 12-bit
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
	adc.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0; // SW trigger
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
	adc.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
	adc.ADC_DataAlign             = ADC_DataAlign_Right;         // right alignment
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
	adc.ADC_OverrunMode           = DISABLE;                     // simplest: overwrite off
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
	adc.ADC_AutoInjMode           = DISABLE;                     // no injected group
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
	adc.ADC_NbrOfRegChannel       = 1;                           // 1 channel only
 8002186:	2301      	movs	r3, #1
 8002188:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &adc);
 800218a:	463b      	mov	r3, r7
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002192:	f7fe fd59 	bl	8000c48 <ADC_Init>

	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 8002196:	2101      	movs	r1, #1
 8002198:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800219c:	f7fe fe29 	bl	8000df2 <ADC_VoltageRegulatorCmd>
	for(uint32_t i = 0; i<10000;i++);
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a4:	e002      	b.n	80021ac <ADC_setup_PA+0x94>
 80021a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a8:	3301      	adds	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d9f7      	bls.n	80021a6 <ADC_setup_PA+0x8e>

	ADC_Cmd(ADC1, ENABLE);
 80021b6:	2101      	movs	r1, #1
 80021b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021bc:	f7fe fda8 	bl	8000d10 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 80021c0:	bf00      	nop
 80021c2:	2101      	movs	r1, #1
 80021c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021c8:	f7fe ff87 	bl	80010da <ADC_GetFlagStatus>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f7      	beq.n	80021c2 <ADC_setup_PA+0xaa>

	ADC_Cmd(ADC1, DISABLE);
 80021d2:	2100      	movs	r1, #0
 80021d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021d8:	f7fe fd9a 	bl	8000d10 <ADC_Cmd>
	while (ADC_GetDisableCmdStatus(ADC1)) {}
 80021dc:	bf00      	nop
 80021de:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021e2:	f7fe fdee 	bl	8000dc2 <ADC_GetDisableCmdStatus>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f8      	bne.n	80021de <ADC_setup_PA+0xc6>
	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 80021ec:	2100      	movs	r1, #0
 80021ee:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021f2:	f7fe fdb9 	bl	8000d68 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 80021f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021fa:	f7fe fda5 	bl	8000d48 <ADC_StartCalibration>
	while (ADC_GetCalibrationStatus(ADC1)) {}
 80021fe:	bf00      	nop
 8002200:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002204:	f7fe fdc7 	bl	8000d96 <ADC_GetCalibrationStatus>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f8      	bne.n	8002200 <ADC_setup_PA+0xe8>
	for(uint32_t i = 0; i<100;i++);
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002212:	e002      	b.n	800221a <ADC_setup_PA+0x102>
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	3301      	adds	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	2b63      	cmp	r3, #99	@ 0x63
 800221e:	d9f9      	bls.n	8002214 <ADC_setup_PA+0xfc>

	ADC_Cmd(ADC1, ENABLE);
 8002220:	2101      	movs	r1, #1
 8002222:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002226:	f7fe fd73 	bl	8000d10 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 800222a:	bf00      	nop
 800222c:	2101      	movs	r1, #1
 800222e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002232:	f7fe ff52 	bl	80010da <ADC_GetFlagStatus>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f7      	beq.n	800222c <ADC_setup_PA+0x114>
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3730      	adds	r7, #48	@ 0x30
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <ADC_measure_PA>:

// --- Measure PA0 (ch=1) or PA1 (ch=2) once ---
uint16_t ADC_measure_PA(uint8_t ch) {
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	71fb      	strb	r3, [r7, #7]
	uint32_t channel = (ch == 1) ? ADC_Channel_1 : ADC_Channel_2;      // PA0->ch1, PA1->ch2
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <ADC_measure_PA+0x14>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <ADC_measure_PA+0x16>
 800225a:	2302      	movs	r3, #2
 800225c:	60fb      	str	r3, [r7, #12]
	ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_1Cycles5); // rank=1, Ts=1.5
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	b2d9      	uxtb	r1, r3
 8002262:	2300      	movs	r3, #0
 8002264:	2201      	movs	r2, #1
 8002266:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800226a:	f7fe fe21 	bl	8000eb0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1);                                         // start
 800226e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002272:	f7fe ff15 	bl	80010a0 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0) {}              // wait EOC
 8002276:	bf00      	nop
 8002278:	2104      	movs	r1, #4
 800227a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800227e:	f7fe ff2c 	bl	80010da <ADC_GetFlagStatus>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f7      	beq.n	8002278 <ADC_measure_PA+0x32>
	return ADC_GetConversionValue(ADC1);                               // 0..4095
 8002288:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800228c:	f7fe ff18 	bl	80010c0 <ADC_GetConversionValue>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <ADC_Setup_VREFEN>:

void ADC_Setup_VREFEN(){
 800229a:	b580      	push	{r7, lr}
 800229c:	b08e      	sub	sp, #56	@ 0x38
 800229e:	af00      	add	r7, sp, #0
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div8);
 80022a0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80022a4:	f7ff fbde 	bl	8001a64 <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 80022a8:	2101      	movs	r1, #1
 80022aa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80022ae:	f7ff fc01 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80022b2:	2101      	movs	r1, #1
 80022b4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022b8:	f7ff fbfc 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef gpio;
	GPIO_StructInit(&gpio);
 80022bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff f911 	bl	80014e8 <GPIO_StructInit>
	gpio.GPIO_Pin  = GPIO_Pin_0 | GPIO_Pin_1;
 80022c6:	2303      	movs	r3, #3
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio.GPIO_Mode = GPIO_Mode_AN;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	GPIO_Init(GPIOA, &gpio);
 80022d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e0:	f7ff f86c 	bl	80013bc <GPIO_Init>

	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);  // reset to defaults
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fcf0 	bl	8000ccc <ADC_StructInit>
	adc.ADC_ContinuousConvMode    = DISABLE;                     // single conversion
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
	adc.ADC_Resolution            = ADC_Resolution_12b;          // 12-bit
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
	adc.ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0; // SW trigger
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
	adc.ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
	adc.ADC_DataAlign             = ADC_DataAlign_Right;         // right alignment
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
	adc.ADC_OverrunMode           = DISABLE;                     // simplest: overwrite off
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
	adc.ADC_AutoInjMode           = DISABLE;                     // no injected group
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
	adc.ADC_NbrOfRegChannel       = 1;                           // 1 channel only
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3020 	strb.w	r3, [r7, #32]
	ADC_Init(ADC1, &adc);
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4619      	mov	r1, r3
 8002312:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002316:	f7fe fc97 	bl	8000c48 <ADC_Init>

	ADC_VoltageRegulatorCmd(ADC1,ENABLE);
 800231a:	2101      	movs	r1, #1
 800231c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002320:	f7fe fd67 	bl	8000df2 <ADC_VoltageRegulatorCmd>
	for(uint32_t i = 0; i<10000;i++);
 8002324:	2300      	movs	r3, #0
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
 8002328:	e002      	b.n	8002330 <ADC_Setup_VREFEN+0x96>
 800232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232c:	3301      	adds	r3, #1
 800232e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002332:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002336:	4293      	cmp	r3, r2
 8002338:	d9f7      	bls.n	800232a <ADC_Setup_VREFEN+0x90>


	ADC_VrefintCmd(ADC1, ENABLE);
 800233a:	2101      	movs	r1, #1
 800233c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002340:	f7fe fd7a 	bl	8000e38 <ADC_VrefintCmd>
	for(uint32_t i = 0; i<10000;i++);
 8002344:	2300      	movs	r3, #0
 8002346:	633b      	str	r3, [r7, #48]	@ 0x30
 8002348:	e002      	b.n	8002350 <ADC_Setup_VREFEN+0xb6>
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	3301      	adds	r3, #1
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002356:	4293      	cmp	r3, r2
 8002358:	d9f7      	bls.n	800234a <ADC_Setup_VREFEN+0xb0>

	ADC_Cmd(ADC1, ENABLE);
 800235a:	2101      	movs	r1, #1
 800235c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002360:	f7fe fcd6 	bl	8000d10 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 8002364:	bf00      	nop
 8002366:	2101      	movs	r1, #1
 8002368:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800236c:	f7fe feb5 	bl	80010da <ADC_GetFlagStatus>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f7      	beq.n	8002366 <ADC_Setup_VREFEN+0xcc>

	ADC_Cmd(ADC1, DISABLE);
 8002376:	2100      	movs	r1, #0
 8002378:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800237c:	f7fe fcc8 	bl	8000d10 <ADC_Cmd>
	while (ADC_GetDisableCmdStatus(ADC1)) {}
 8002380:	bf00      	nop
 8002382:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002386:	f7fe fd1c 	bl	8000dc2 <ADC_GetDisableCmdStatus>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f8      	bne.n	8002382 <ADC_Setup_VREFEN+0xe8>
	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8002390:	2100      	movs	r1, #0
 8002392:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002396:	f7fe fce7 	bl	8000d68 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 800239a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800239e:	f7fe fcd3 	bl	8000d48 <ADC_StartCalibration>
	while (ADC_GetCalibrationStatus(ADC1)) {}
 80023a2:	bf00      	nop
 80023a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023a8:	f7fe fcf5 	bl	8000d96 <ADC_GetCalibrationStatus>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f8      	bne.n	80023a4 <ADC_Setup_VREFEN+0x10a>
	for(uint32_t i = 0; i<100;i++);
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b6:	e002      	b.n	80023be <ADC_Setup_VREFEN+0x124>
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	3301      	adds	r3, #1
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c0:	2b63      	cmp	r3, #99	@ 0x63
 80023c2:	d9f9      	bls.n	80023b8 <ADC_Setup_VREFEN+0x11e>

	ADC_Cmd(ADC1, ENABLE);
 80023c4:	2101      	movs	r1, #1
 80023c6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023ca:	f7fe fca1 	bl	8000d10 <ADC_Cmd>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY)) {}
 80023ce:	bf00      	nop
 80023d0:	2101      	movs	r1, #1
 80023d2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023d6:	f7fe fe80 	bl	80010da <ADC_GetFlagStatus>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f7      	beq.n	80023d0 <ADC_Setup_VREFEN+0x136>

}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3738      	adds	r7, #56	@ 0x38
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <ADC_measure_VREF>:

uint16_t ADC_measure_VREF() {
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_18, 1, ADC_SampleTime_2Cycles5); // rank=1, Ts=1.5
 80023ee:	2301      	movs	r3, #1
 80023f0:	2201      	movs	r2, #1
 80023f2:	2112      	movs	r1, #18
 80023f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023f8:	f7fe fd5a 	bl	8000eb0 <ADC_RegularChannelConfig>
	ADC_StartConversion(ADC1);                                         // start
 80023fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002400:	f7fe fe4e 	bl	80010a0 <ADC_StartConversion>
	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0) {}              // wait EOC
 8002404:	bf00      	nop
 8002406:	2104      	movs	r1, #4
 8002408:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800240c:	f7fe fe65 	bl	80010da <ADC_GetFlagStatus>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f7      	beq.n	8002406 <ADC_measure_VREF+0x1c>

	return ADC_GetConversionValue(ADC1);                               // 0..4095
 8002416:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800241a:	f7fe fe51 	bl	80010c0 <ADC_GetConversionValue>
 800241e:	4603      	mov	r3, r0
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}

08002424 <iniEXTIA4>:
#include "interrupt.h"

//Mostly template for now
//Keep in mind to switch the GPIOx port and EXTI_PinSourcex and the EXTI_Linex

void iniEXTIA4(){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 800242a:	2101      	movs	r1, #1
 800242c:	2001      	movs	r0, #1
 800242e:	f7ff fb61 	bl	8001af4 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 8002432:	2104      	movs	r1, #4
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff fbaf 	bl	8001b98 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 800243a:	2304      	movs	r3, #4
 800243c:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 8002442:	2300      	movs	r3, #0
 8002444:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 8002446:	2308      	movs	r3, #8
 8002448:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fe5c 	bl	800110c <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8002454:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 8002458:	f7ff f878 	bl	800154c <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 800245c:	230a      	movs	r3, #10
 800245e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 8002460:	2301      	movs	r3, #1
 8002462:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f880 	bl	8001574 <NVIC_Init>

}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <EXTI4_IRQHandler>:

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8002480:	2004      	movs	r0, #4
 8002482:	f7fe ff49 	bl	8001318 <EXTI_GetITStatus>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
    	setLed('m');
 800248c:	206d      	movs	r0, #109	@ 0x6d
 800248e:	f000 fc81 	bl	8002d94 <setLed>

        EXTI_ClearITPendingBit(EXTI_Line4);
 8002492:	2004      	movs	r0, #4
 8002494:	f7fe ff78 	bl	8001388 <EXTI_ClearITPendingBit>
    }

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 80024a2:	2101      	movs	r1, #1
 80024a4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80024a8:	f7ff fb04 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 80024ac:	2101      	movs	r1, #1
 80024ae:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80024b2:	f7ff faff 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 80024b6:	2101      	movs	r1, #1
 80024b8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80024bc:	f7ff fafa 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 80024c0:	463b      	mov	r3, r7
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f810 	bl	80014e8 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 80024c8:	2300      	movs	r3, #0
 80024ca:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 80024cc:	2302      	movs	r3, #2
 80024ce:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 80024d0:	2310      	movs	r3, #16
 80024d2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 80024d4:	463b      	mov	r3, r7
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024dc:	f7fe ff6e 	bl	80013bc <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 80024e0:	463b      	mov	r3, r7
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f800 	bl	80014e8 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 80024e8:	2300      	movs	r3, #0
 80024ea:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 80024ec:	2302      	movs	r3, #2
 80024ee:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 80024f0:	2321      	movs	r3, #33	@ 0x21
 80024f2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 80024f4:	463b      	mov	r3, r7
 80024f6:	4619      	mov	r1, r3
 80024f8:	480a      	ldr	r0, [pc, #40]	@ (8002524 <initJoystick+0x88>)
 80024fa:	f7fe ff5f 	bl	80013bc <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 80024fe:	463b      	mov	r3, r7
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fff1 	bl	80014e8 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8002506:	2300      	movs	r3, #0
 8002508:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800250a:	2302      	movs	r3, #2
 800250c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800250e:	2303      	movs	r3, #3
 8002510:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8002512:	463b      	mov	r3, r7
 8002514:	4619      	mov	r1, r3
 8002516:	4804      	ldr	r0, [pc, #16]	@ (8002528 <initJoystick+0x8c>)
 8002518:	f7fe ff50 	bl	80013bc <GPIO_Init>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	48000400 	.word	0x48000400
 8002528:	48000800 	.word	0x48000800

0800252c <lcd_transmit_byte>:
#include "charset.h"

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <lcd_transmit_byte+0x5c>)
 8002538:	8a9b      	ldrh	r3, [r3, #20]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <lcd_transmit_byte+0x5c>)
 800253e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002542:	b29b      	uxth	r3, r3
 8002544:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8002546:	bf00      	nop
 8002548:	2102      	movs	r1, #2
 800254a:	4810      	ldr	r0, [pc, #64]	@ (800258c <lcd_transmit_byte+0x60>)
 800254c:	f7ff fb08 	bl	8001b60 <SPI_I2S_GetFlagStatus>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d1f8      	bne.n	8002548 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4619      	mov	r1, r3
 800255a:	480c      	ldr	r0, [pc, #48]	@ (800258c <lcd_transmit_byte+0x60>)
 800255c:	f7ff faea 	bl	8001b34 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8002560:	bf00      	nop
 8002562:	2102      	movs	r1, #2
 8002564:	4809      	ldr	r0, [pc, #36]	@ (800258c <lcd_transmit_byte+0x60>)
 8002566:	f7ff fafb 	bl	8001b60 <SPI_I2S_GetFlagStatus>
 800256a:	4603      	mov	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d1f8      	bne.n	8002562 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <lcd_transmit_byte+0x5c>)
 8002572:	8a9b      	ldrh	r3, [r3, #20]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <lcd_transmit_byte+0x5c>)
 8002578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800257c:	b29b      	uxth	r3, r3
 800257e:	8293      	strh	r3, [r2, #20]
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	48000400 	.word	0x48000400
 800258c:	40003800 	.word	0x40003800

08002590 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
    int i = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 800259c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025a0:	8a9b      	ldrh	r3, [r3, #20]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7ff ffbb 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80025b6:	2010      	movs	r0, #16
 80025b8:	f7ff ffb8 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 80025bc:	20b0      	movs	r0, #176	@ 0xb0
 80025be:	f7ff ffb5 	bl	800252c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80025c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025c6:	8a9b      	ldrh	r3, [r3, #20]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e009      	b.n	80025f0 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ffa1 	bl	800252c <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025f4:	ddf2      	ble.n	80025dc <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80025f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025fa:	8a9b      	ldrh	r3, [r3, #20]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002602:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002606:	b29b      	uxth	r3, r3
 8002608:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff ff8e 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8002610:	2010      	movs	r0, #16
 8002612:	f7ff ff8b 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8002616:	20b1      	movs	r0, #177	@ 0xb1
 8002618:	f7ff ff88 	bl	800252c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 800261c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002620:	8a9b      	ldrh	r3, [r3, #20]
 8002622:	b29b      	uxth	r3, r3
 8002624:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	b29b      	uxth	r3, r3
 800262e:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e009      	b.n	800264a <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff74 	bl	800252c <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2bff      	cmp	r3, #255	@ 0xff
 800264e:	ddf2      	ble.n	8002636 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8002650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002654:	8a9b      	ldrh	r3, [r3, #20]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800265c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002660:	b29b      	uxth	r3, r3
 8002662:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8002664:	2000      	movs	r0, #0
 8002666:	f7ff ff61 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 800266a:	2010      	movs	r0, #16
 800266c:	f7ff ff5e 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8002670:	20b2      	movs	r0, #178	@ 0xb2
 8002672:	f7ff ff5b 	bl	800252c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8002676:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800267a:	8a9b      	ldrh	r3, [r3, #20]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002686:	b29b      	uxth	r3, r3
 8002688:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 800268a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e009      	b.n	80026a6 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff46 	bl	800252c <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80026ac:	dbf1      	blt.n	8002692 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 80026ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026b2:	8a9b      	ldrh	r3, [r3, #20]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff ff32 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 80026c8:	2010      	movs	r0, #16
 80026ca:	f7ff ff2f 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 80026ce:	20b3      	movs	r0, #179	@ 0xb3
 80026d0:	f7ff ff2c 	bl	800252c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 80026d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026d8:	8a9b      	ldrh	r3, [r3, #20]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 80026e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e009      	b.n	8002704 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff17 	bl	800252c <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800270a:	dbf1      	blt.n	80026f0 <lcd_push_buffer+0x160>
    }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <lcd_reset>:

void lcd_reset()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 800271e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002722:	8a9b      	ldrh	r3, [r3, #20]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800272a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800272e:	b29b      	uxth	r3, r3
 8002730:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8002732:	4b2f      	ldr	r3, [pc, #188]	@ (80027f0 <lcd_reset+0xd8>)
 8002734:	8a9b      	ldrh	r3, [r3, #20]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4a2d      	ldr	r2, [pc, #180]	@ (80027f0 <lcd_reset+0xd8>)
 800273a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800273e:	b29b      	uxth	r3, r3
 8002740:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8002742:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <lcd_reset+0xd8>)
 8002744:	8a9b      	ldrh	r3, [r3, #20]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <lcd_reset+0xd8>)
 800274a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800274e:	b29b      	uxth	r3, r3
 8002750:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	e003      	b.n	8002760 <lcd_reset+0x48>
 8002758:	bf00      	nop
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3301      	adds	r3, #1
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f241 2247 	movw	r2, #4679	@ 0x1247
 8002766:	4293      	cmp	r3, r2
 8002768:	d9f6      	bls.n	8002758 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 800276a:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <lcd_reset+0xd8>)
 800276c:	8a9b      	ldrh	r3, [r3, #20]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <lcd_reset+0xd8>)
 8002772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002776:	b29b      	uxth	r3, r3
 8002778:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	e003      	b.n	8002788 <lcd_reset+0x70>
 8002780:	bf00      	nop
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4a1a      	ldr	r2, [pc, #104]	@ (80027f4 <lcd_reset+0xdc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d9f7      	bls.n	8002780 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8002790:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002794:	8a9b      	ldrh	r3, [r3, #20]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800279c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 80027a4:	20ae      	movs	r0, #174	@ 0xae
 80027a6:	f7ff fec1 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 80027aa:	20a2      	movs	r0, #162	@ 0xa2
 80027ac:	f7ff febe 	bl	800252c <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 80027b0:	20a0      	movs	r0, #160	@ 0xa0
 80027b2:	f7ff febb 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 80027b6:	20c8      	movs	r0, #200	@ 0xc8
 80027b8:	f7ff feb8 	bl	800252c <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 80027bc:	2022      	movs	r0, #34	@ 0x22
 80027be:	f7ff feb5 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 80027c2:	202f      	movs	r0, #47	@ 0x2f
 80027c4:	f7ff feb2 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 80027c8:	2040      	movs	r0, #64	@ 0x40
 80027ca:	f7ff feaf 	bl	800252c <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 80027ce:	20af      	movs	r0, #175	@ 0xaf
 80027d0:	f7ff feac 	bl	800252c <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 80027d4:	2081      	movs	r0, #129	@ 0x81
 80027d6:	f7ff fea9 	bl	800252c <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 80027da:	2017      	movs	r0, #23
 80027dc:	f7ff fea6 	bl	800252c <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 80027e0:	20a6      	movs	r0, #166	@ 0xa6
 80027e2:	f7ff fea3 	bl	800252c <lcd_transmit_byte>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	48000400 	.word	0x48000400
 80027f4:	0005f36f 	.word	0x0005f36f

080027f8 <init_spi_lcd>:

void init_spi_lcd() {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 80027fc:	4b9d      	ldr	r3, [pc, #628]	@ (8002a74 <init_spi_lcd+0x27c>)
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4a9c      	ldr	r2, [pc, #624]	@ (8002a74 <init_spi_lcd+0x27c>)
 8002802:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8002806:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8002808:	4b9a      	ldr	r3, [pc, #616]	@ (8002a74 <init_spi_lcd+0x27c>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a99      	ldr	r2, [pc, #612]	@ (8002a74 <init_spi_lcd+0x27c>)
 800280e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002812:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8002814:	4b98      	ldr	r3, [pc, #608]	@ (8002a78 <init_spi_lcd+0x280>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	4a97      	ldr	r2, [pc, #604]	@ (8002a78 <init_spi_lcd+0x280>)
 800281a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800281e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8002820:	4b95      	ldr	r3, [pc, #596]	@ (8002a78 <init_spi_lcd+0x280>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	4a94      	ldr	r2, [pc, #592]	@ (8002a78 <init_spi_lcd+0x280>)
 8002826:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800282a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 800282c:	4b92      	ldr	r3, [pc, #584]	@ (8002a78 <init_spi_lcd+0x280>)
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	4a91      	ldr	r2, [pc, #580]	@ (8002a78 <init_spi_lcd+0x280>)
 8002832:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002836:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8002838:	4b8f      	ldr	r3, [pc, #572]	@ (8002a78 <init_spi_lcd+0x280>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	4a8e      	ldr	r2, [pc, #568]	@ (8002a78 <init_spi_lcd+0x280>)
 800283e:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8002842:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8002844:	4b8c      	ldr	r3, [pc, #560]	@ (8002a78 <init_spi_lcd+0x280>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a8b      	ldr	r2, [pc, #556]	@ (8002a78 <init_spi_lcd+0x280>)
 800284a:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 800284e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002850:	4b89      	ldr	r3, [pc, #548]	@ (8002a78 <init_spi_lcd+0x280>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a88      	ldr	r2, [pc, #544]	@ (8002a78 <init_spi_lcd+0x280>)
 8002856:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 800285a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 800285c:	4b86      	ldr	r3, [pc, #536]	@ (8002a78 <init_spi_lcd+0x280>)
 800285e:	889b      	ldrh	r3, [r3, #4]
 8002860:	b29a      	uxth	r2, r3
 8002862:	4985      	ldr	r1, [pc, #532]	@ (8002a78 <init_spi_lcd+0x280>)
 8002864:	f645 73ff 	movw	r3, #24575	@ 0x5fff
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800286e:	4a82      	ldr	r2, [pc, #520]	@ (8002a78 <init_spi_lcd+0x280>)
 8002870:	4b81      	ldr	r3, [pc, #516]	@ (8002a78 <init_spi_lcd+0x280>)
 8002872:	8892      	ldrh	r2, [r2, #4]
 8002874:	b292      	uxth	r2, r2
 8002876:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8002878:	4b7f      	ldr	r3, [pc, #508]	@ (8002a78 <init_spi_lcd+0x280>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7e      	ldr	r2, [pc, #504]	@ (8002a78 <init_spi_lcd+0x280>)
 800287e:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8002882:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8002884:	4b7c      	ldr	r3, [pc, #496]	@ (8002a78 <init_spi_lcd+0x280>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7b      	ldr	r2, [pc, #492]	@ (8002a78 <init_spi_lcd+0x280>)
 800288a:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 800288e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8002890:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <init_spi_lcd+0x280>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a78      	ldr	r2, [pc, #480]	@ (8002a78 <init_spi_lcd+0x280>)
 8002896:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 800289a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800289c:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <init_spi_lcd+0x280>)
 800289e:	4a76      	ldr	r2, [pc, #472]	@ (8002a78 <init_spi_lcd+0x280>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 80028a4:	4b74      	ldr	r3, [pc, #464]	@ (8002a78 <init_spi_lcd+0x280>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a73      	ldr	r2, [pc, #460]	@ (8002a78 <init_spi_lcd+0x280>)
 80028aa:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 80028ae:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80028b0:	4b71      	ldr	r3, [pc, #452]	@ (8002a78 <init_spi_lcd+0x280>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a70      	ldr	r2, [pc, #448]	@ (8002a78 <init_spi_lcd+0x280>)
 80028b6:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 80028ba:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 80028bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002a78 <init_spi_lcd+0x280>)
 80028be:	889b      	ldrh	r3, [r3, #4]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002a78 <init_spi_lcd+0x280>)
 80028c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80028d0:	4a69      	ldr	r2, [pc, #420]	@ (8002a78 <init_spi_lcd+0x280>)
 80028d2:	4b69      	ldr	r3, [pc, #420]	@ (8002a78 <init_spi_lcd+0x280>)
 80028d4:	8892      	ldrh	r2, [r2, #4]
 80028d6:	b292      	uxth	r2, r2
 80028d8:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 80028da:	4b67      	ldr	r3, [pc, #412]	@ (8002a78 <init_spi_lcd+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a66      	ldr	r2, [pc, #408]	@ (8002a78 <init_spi_lcd+0x280>)
 80028e0:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 80028e4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80028e6:	4b64      	ldr	r3, [pc, #400]	@ (8002a78 <init_spi_lcd+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a63      	ldr	r2, [pc, #396]	@ (8002a78 <init_spi_lcd+0x280>)
 80028ec:	f043 2310 	orr.w	r3, r3, #268439552	@ 0x10001000
 80028f0:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 80028f2:	4b61      	ldr	r3, [pc, #388]	@ (8002a78 <init_spi_lcd+0x280>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a60      	ldr	r2, [pc, #384]	@ (8002a78 <init_spi_lcd+0x280>)
 80028f8:	f023 2330 	bic.w	r3, r3, #805318656	@ 0x30003000
 80028fc:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80028fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002a78 <init_spi_lcd+0x280>)
 8002900:	4a5d      	ldr	r2, [pc, #372]	@ (8002a78 <init_spi_lcd+0x280>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8002906:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002910:	0c9b      	lsrs	r3, r3, #18
 8002912:	049b      	lsls	r3, r3, #18
 8002914:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8002916:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8002926:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800292a:	889b      	ldrh	r3, [r3, #4]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002932:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 800293e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002942:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002946:	8892      	ldrh	r2, [r2, #4]
 8002948:	b292      	uxth	r2, r2
 800294a:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 800294c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002956:	0c9b      	lsrs	r3, r3, #18
 8002958:	049b      	lsls	r3, r3, #18
 800295a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 800295c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 800296c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 800297c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002986:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800298a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 800298c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	049b      	lsls	r3, r3, #18
 800299a:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 800299c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80029a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 80029a8:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <init_spi_lcd+0x280>)
 80029aa:	8a9b      	ldrh	r3, [r3, #20]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4a32      	ldr	r2, [pc, #200]	@ (8002a78 <init_spi_lcd+0x280>)
 80029b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 80029b8:	4b30      	ldr	r3, [pc, #192]	@ (8002a7c <init_spi_lcd+0x284>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <init_spi_lcd+0x284>)
 80029c0:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 80029c8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a7c <init_spi_lcd+0x284>)
 80029ca:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <init_spi_lcd+0x284>)
 80029cc:	8812      	ldrh	r2, [r2, #0]
 80029ce:	b292      	uxth	r2, r2
 80029d0:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <init_spi_lcd+0x284>)
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4a28      	ldr	r2, [pc, #160]	@ (8002a7c <init_spi_lcd+0x284>)
 80029da:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 80029de:	b29b      	uxth	r3, r3
 80029e0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 80029e2:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <init_spi_lcd+0x284>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4a24      	ldr	r2, [pc, #144]	@ (8002a7c <init_spi_lcd+0x284>)
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 80029f2:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <init_spi_lcd+0x284>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4a20      	ldr	r2, [pc, #128]	@ (8002a7c <init_spi_lcd+0x284>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8002a22:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a24:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a26:	8812      	ldrh	r2, [r2, #0]
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a2e:	889b      	ldrh	r3, [r3, #4]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a3e:	889b      	ldrh	r3, [r3, #4]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4a0e      	ldr	r2, [pc, #56]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a44:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a4e:	8b9b      	ldrh	r3, [r3, #28]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a5e:	2207      	movs	r2, #7
 8002a60:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a64:	889b      	ldrh	r3, [r3, #4]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	4a04      	ldr	r2, [pc, #16]	@ (8002a7c <init_spi_lcd+0x284>)
 8002a6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	e006      	b.n	8002a80 <init_spi_lcd+0x288>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	40003800 	.word	0x40003800
 8002a80:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <init_spi_lcd+0x2b4>)
 8002a84:	889b      	ldrh	r3, [r3, #4]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <init_spi_lcd+0x2b4>)
 8002a8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <init_spi_lcd+0x2b4>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <init_spi_lcd+0x2b4>)
 8002a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 8002aa2:	f7ff fe39 	bl	8002718 <lcd_reset>
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40003800 	.word	0x40003800

08002ab0 <generate_line_buff>:

void generate_line_buff(uint8_t * str, uint8_t * linebuff, uint16_t bufflen){
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
    uint8_t idx;
    //convert each character to a 5+1 (CHAR_WIDTH) slices and add it to the line buffer
    for(int i = 0; i<bufflen; i++){
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e06d      	b.n	8002ba0 <generate_line_buff+0xf0>
        if (str[i] == '\0'){
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d06c      	beq.n	8002baa <generate_line_buff+0xfa>
            break;
        }
        idx = CHAR_WIDTH*i;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	74fb      	strb	r3, [r7, #19]
        linebuff[idx] = character_data[str[i]-0x20][0];
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	f1a3 0220 	sub.w	r2, r3, #32
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	4419      	add	r1, r3
 8002af0:	4831      	ldr	r0, [pc, #196]	@ (8002bb8 <generate_line_buff+0x108>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	4403      	add	r3, r0
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	700b      	strb	r3, [r1, #0]
        linebuff[idx+1] = character_data[str[i]-0x20][1];
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f1a3 0220 	sub.w	r2, r3, #32
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	4419      	add	r1, r3
 8002b12:	4829      	ldr	r0, [pc, #164]	@ (8002bb8 <generate_line_buff+0x108>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	4403      	add	r3, r0
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	700b      	strb	r3, [r1, #0]
        linebuff[idx+2] = character_data[str[i]-0x20][2];
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	f1a3 0220 	sub.w	r2, r3, #32
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	3302      	adds	r3, #2
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4419      	add	r1, r3
 8002b36:	4820      	ldr	r0, [pc, #128]	@ (8002bb8 <generate_line_buff+0x108>)
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4403      	add	r3, r0
 8002b40:	3302      	adds	r3, #2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	700b      	strb	r3, [r1, #0]
        linebuff[idx+3] = character_data[str[i]-0x20][3];
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f1a3 0220 	sub.w	r2, r3, #32
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	3303      	adds	r3, #3
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4419      	add	r1, r3
 8002b5a:	4817      	ldr	r0, [pc, #92]	@ (8002bb8 <generate_line_buff+0x108>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	4403      	add	r3, r0
 8002b64:	3303      	adds	r3, #3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	700b      	strb	r3, [r1, #0]
        linebuff[idx+4] = character_data[str[i]-0x20][4];
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f1a3 0220 	sub.w	r2, r3, #32
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	4419      	add	r1, r3
 8002b7e:	480e      	ldr	r0, [pc, #56]	@ (8002bb8 <generate_line_buff+0x108>)
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	4403      	add	r3, r0
 8002b88:	3304      	adds	r3, #4
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	700b      	strb	r3, [r1, #0]
        linebuff[idx+5] = 0x00;
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	3305      	adds	r3, #5
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4413      	add	r3, r2
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i<bufflen; i++){
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	db8d      	blt.n	8002ac4 <generate_line_buff+0x14>
    }
}
 8002ba8:	e000      	b.n	8002bac <generate_line_buff+0xfc>
            break;
 8002baa:	bf00      	nop
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	08007320 	.word	0x08007320

08002bbc <write_line_buff>:

void write_line_buff(uint8_t * linebuff, uint8_t * lcdbuff, uint8_t xoffset, uint8_t yoffset, uint8_t scrollena){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	460b      	mov	r3, r1
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	71bb      	strb	r3, [r7, #6]
    //  y offset refers to the line offset
    //note:     String will be capped, if it is longer than LCD_LINE_SIZE slices (i.e. 1 line)
    //note2:    String will be capped, if it exceeds size of lcdBuffer.
    //note3:    If scrolling is enabled, the LCD line will wrap around when xoffset is large enough.
    //          Otherwise, it will be capped.
    if (scrollena > 0){
 8002bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <write_line_buff+0x52>
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
 8002bde:	e011      	b.n	8002c04 <write_line_buff+0x48>
            lcdbuff[idx+yoffset*LCD_LINE_SIZE] = linebuff[(idx + xoffset) & LCD_LINE_BUFF_SIZE-1];
 8002be0:	7dfa      	ldrb	r2, [r7, #23]
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4413      	add	r3, r2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	441a      	add	r2, r3
 8002bec:	7df9      	ldrb	r1, [r7, #23]
 8002bee:	79bb      	ldrb	r3, [r7, #6]
 8002bf0:	01db      	lsls	r3, r3, #7
 8002bf2:	440b      	add	r3, r1
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	440b      	add	r3, r1
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	701a      	strb	r2, [r3, #0]
        for(uint8_t idx = 0; idx<LCD_LINE_SIZE; idx++){
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	3301      	adds	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	dae9      	bge.n	8002be0 <write_line_buff+0x24>
        }
    }else{
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
    }

}
 8002c0c:	e00c      	b.n	8002c28 <write_line_buff+0x6c>
        memcpy(lcdbuff + xoffset+yoffset*LCD_LINE_SIZE, linebuff, sizeof(uint8_t) * LCD_LINE_SIZE-xoffset);
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	79ba      	ldrb	r2, [r7, #6]
 8002c12:	01d2      	lsls	r2, r2, #7
 8002c14:	4413      	add	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	18d0      	adds	r0, r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002c20:	461a      	mov	r2, r3
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	f001 fc7b 	bl	800451e <memcpy>
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <lcd_write_string>:

void lcd_write_string(uint8_t * str, uint8_t * lcdBuff, uint8_t xoffset, uint8_t yoffset){
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b0c7      	sub	sp, #284	@ 0x11c
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8002c3a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8002c3e:	6020      	str	r0, [r4, #0]
 8002c40:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8002c44:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8002c48:	6001      	str	r1, [r0, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c50:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c5a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c5e:	460a      	mov	r2, r1
 8002c60:	701a      	strb	r2, [r3, #0]
    uint8_t lineBuff[256];
    memset(lineBuff,0x00,256);
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fbe9 	bl	8004444 <memset>
    //render a string and add to the line buffer (256 slices long)
    generate_line_buff(str, lineBuff, 255);
 8002c72:	f107 0110 	add.w	r1, r7, #16
 8002c76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c7e:	22ff      	movs	r2, #255	@ 0xff
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	f7ff ff15 	bl	8002ab0 <generate_line_buff>
    //add line buffer to LCD buffer at a specific x,y position
    //  (horizontal scrolling is always disabled!)
    write_line_buff(lineBuff, lcdBuff, xoffset, yoffset, 0);
 8002c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c8a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c8e:	781c      	ldrb	r4, [r3, #0]
 8002c90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c94:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c9e:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002ca2:	f107 0010 	add.w	r0, r7, #16
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4623      	mov	r3, r4
 8002cac:	6809      	ldr	r1, [r1, #0]
 8002cae:	f7ff ff85 	bl	8002bbc <write_line_buff>
}
 8002cb2:	bf00      	nop
 8002cb4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}

08002cbc <lcd_init_and_print>:

/* Function added to the given lcd file
 * Can be called from main.c with this line before the while(1) loop:
 * lcd_init_and_print();
 */
void lcd_init_and_print(void) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
    static uint8_t lcdBuffer[LCD_BUFF_SIZE];	// Frame buffer for LCD

    init_spi_lcd();        // Initialize SPI + GPIOs and reset LCD
 8002cc0:	f7ff fd9a 	bl	80027f8 <init_spi_lcd>
    memset(lcdBuffer, 0x00, LCD_BUFF_SIZE);		// Clear buffer
 8002cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <lcd_init_and_print+0x2c>)
 8002ccc:	f001 fbba 	bl	8004444 <memset>

    lcd_write_string((uint8_t *)buffer, lcdBuffer, 0, 0);
    */

    // Write "Hello" at x=0, y=0
    lcd_write_string((uint8_t *)"Hello", lcdBuffer, 0, 0);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4904      	ldr	r1, [pc, #16]	@ (8002ce8 <lcd_init_and_print+0x2c>)
 8002cd6:	4805      	ldr	r0, [pc, #20]	@ (8002cec <lcd_init_and_print+0x30>)
 8002cd8:	f7ff ffaa 	bl	8002c30 <lcd_write_string>

    // Push buffer content to LCD
    lcd_push_buffer(lcdBuffer);
 8002cdc:	4802      	ldr	r0, [pc, #8]	@ (8002ce8 <lcd_init_and_print+0x2c>)
 8002cde:	f7ff fc57 	bl	8002590 <lcd_push_buffer>
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200002ec 	.word	0x200002ec
 8002cec:	08007290 	.word	0x08007290

08002cf0 <initLed>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLed() {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002cfc:	f7fe feda 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8002d00:	2101      	movs	r1, #1
 8002d02:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002d06:	f7fe fed5 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d10:	f7fe fed0 	bl	8001ab4 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8002d14:	463b      	mov	r3, r7
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fbe6 	bl	80014e8 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8002d20:	2300      	movs	r3, #0
 8002d22:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8002d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d28:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8002d2e:	463b      	mov	r3, r7
 8002d30:	4619      	mov	r1, r3
 8002d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d36:	f7fe fb41 	bl	80013bc <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fbd3 	bl	80014e8 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8002d42:	2301      	movs	r3, #1
 8002d44:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8002d46:	2300      	movs	r3, #0
 8002d48:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8002d52:	463b      	mov	r3, r7
 8002d54:	4619      	mov	r1, r3
 8002d56:	480d      	ldr	r0, [pc, #52]	@ (8002d8c <initLed+0x9c>)
 8002d58:	f7fe fb30 	bl	80013bc <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fbc2 	bl	80014e8 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8002d64:	2301      	movs	r3, #1
 8002d66:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8002d70:	2302      	movs	r3, #2
 8002d72:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8002d74:	463b      	mov	r3, r7
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	@ (8002d90 <initLed+0xa0>)
 8002d7a:	f7fe fb1f 	bl	80013bc <GPIO_Init>

	// Initialize LED to off
	setLed('d');
 8002d7e:	2064      	movs	r0, #100	@ 0x64
 8002d80:	f000 f808 	bl	8002d94 <setLed>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	48000400 	.word	0x48000400
 8002d90:	48000800 	.word	0x48000800

08002d94 <setLed>:

void setLed(char sel) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b72      	cmp	r3, #114	@ 0x72
 8002da2:	d111      	bne.n	8002dc8 <setLed+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002da4:	2200      	movs	r2, #0
 8002da6:	2110      	movs	r1, #16
 8002da8:	4852      	ldr	r0, [pc, #328]	@ (8002ef4 <setLed+0x160>)
 8002daa:	f7fe fbb7 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002dae:	2201      	movs	r2, #1
 8002db0:	2180      	movs	r1, #128	@ 0x80
 8002db2:	4851      	ldr	r0, [pc, #324]	@ (8002ef8 <setLed+0x164>)
 8002db4:	f7fe fbb2 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002db8:	2201      	movs	r2, #1
 8002dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc2:	f7fe fbab 	bl	800151c <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 8002dc6:	e091      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'g') {
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	2b67      	cmp	r3, #103	@ 0x67
 8002dcc:	d111      	bne.n	8002df2 <setLed+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	4848      	ldr	r0, [pc, #288]	@ (8002ef4 <setLed+0x160>)
 8002dd4:	f7fe fba2 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	4846      	ldr	r0, [pc, #280]	@ (8002ef8 <setLed+0x164>)
 8002dde:	f7fe fb9d 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002de2:	2201      	movs	r2, #1
 8002de4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dec:	f7fe fb96 	bl	800151c <GPIO_WriteBit>
}
 8002df0:	e07c      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'b') {
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b62      	cmp	r3, #98	@ 0x62
 8002df6:	d111      	bne.n	8002e1c <setLed+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	483d      	ldr	r0, [pc, #244]	@ (8002ef4 <setLed+0x160>)
 8002dfe:	f7fe fb8d 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002e02:	2201      	movs	r2, #1
 8002e04:	2180      	movs	r1, #128	@ 0x80
 8002e06:	483c      	ldr	r0, [pc, #240]	@ (8002ef8 <setLed+0x164>)
 8002e08:	f7fe fb88 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e16:	f7fe fb81 	bl	800151c <GPIO_WriteBit>
}
 8002e1a:	e067      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'c') {
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	2b63      	cmp	r3, #99	@ 0x63
 8002e20:	d111      	bne.n	8002e46 <setLed+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002e22:	2201      	movs	r2, #1
 8002e24:	2110      	movs	r1, #16
 8002e26:	4833      	ldr	r0, [pc, #204]	@ (8002ef4 <setLed+0x160>)
 8002e28:	f7fe fb78 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2180      	movs	r1, #128	@ 0x80
 8002e30:	4831      	ldr	r0, [pc, #196]	@ (8002ef8 <setLed+0x164>)
 8002e32:	f7fe fb73 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002e36:	2200      	movs	r2, #0
 8002e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e40:	f7fe fb6c 	bl	800151c <GPIO_WriteBit>
}
 8002e44:	e052      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'm') {
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b6d      	cmp	r3, #109	@ 0x6d
 8002e4a:	d111      	bne.n	8002e70 <setLed+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2110      	movs	r1, #16
 8002e50:	4828      	ldr	r0, [pc, #160]	@ (8002ef4 <setLed+0x160>)
 8002e52:	f7fe fb63 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002e56:	2201      	movs	r2, #1
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	4827      	ldr	r0, [pc, #156]	@ (8002ef8 <setLed+0x164>)
 8002e5c:	f7fe fb5e 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e6a:	f7fe fb57 	bl	800151c <GPIO_WriteBit>
}
 8002e6e:	e03d      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'y') {
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b79      	cmp	r3, #121	@ 0x79
 8002e74:	d111      	bne.n	8002e9a <setLed+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002e76:	2200      	movs	r2, #0
 8002e78:	2110      	movs	r1, #16
 8002e7a:	481e      	ldr	r0, [pc, #120]	@ (8002ef4 <setLed+0x160>)
 8002e7c:	f7fe fb4e 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	481c      	ldr	r0, [pc, #112]	@ (8002ef8 <setLed+0x164>)
 8002e86:	f7fe fb49 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e94:	f7fe fb42 	bl	800151c <GPIO_WriteBit>
}
 8002e98:	e028      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'w') {
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	2b77      	cmp	r3, #119	@ 0x77
 8002e9e:	d111      	bne.n	8002ec4 <setLed+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	4813      	ldr	r0, [pc, #76]	@ (8002ef4 <setLed+0x160>)
 8002ea6:	f7fe fb39 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2180      	movs	r1, #128	@ 0x80
 8002eae:	4812      	ldr	r0, [pc, #72]	@ (8002ef8 <setLed+0x164>)
 8002eb0:	f7fe fb34 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ebe:	f7fe fb2d 	bl	800151c <GPIO_WriteBit>
}
 8002ec2:	e013      	b.n	8002eec <setLed+0x158>
	} else if (sel == 'd') {
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b64      	cmp	r3, #100	@ 0x64
 8002ec8:	d110      	bne.n	8002eec <setLed+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2110      	movs	r1, #16
 8002ece:	4809      	ldr	r0, [pc, #36]	@ (8002ef4 <setLed+0x160>)
 8002ed0:	f7fe fb24 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	4807      	ldr	r0, [pc, #28]	@ (8002ef8 <setLed+0x164>)
 8002eda:	f7fe fb1f 	bl	800151c <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ee8:	f7fe fb18 	bl	800151c <GPIO_WriteBit>
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	48000400 	.word	0x48000400
 8002ef8:	48000800 	.word	0x48000800
 8002efc:	00000000 	.word	0x00000000

08002f00 <main>:
#define VREFINT_CAL *((uint16_t*) ((uint32_t) 0x1FFFF7BA)) //calibrated at 3.3V@ 30


static uint8_t lcdBuffer[LCD_BUFF_SIZE];

int main(void) {
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b09e      	sub	sp, #120	@ 0x78
 8002f04:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8002f06:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8002f0a:	f7fe ffeb 	bl	8001ee4 <uart_init>

	initJoystick();
 8002f0e:	f7ff fac5 	bl	800249c <initJoystick>
	initLed();
 8002f12:	f7ff feed 	bl	8002cf0 <initLed>
	iniEXTIA4();
 8002f16:	f7ff fa85 	bl	8002424 <iniEXTIA4>
	initTimer();
 8002f1a:	f000 fa59 	bl	80033d0 <initTimer>

	lcd_init_and_print();
 8002f1e:	f7ff fecd 	bl	8002cbc <lcd_init_and_print>

	ADC_setup_PA();
 8002f22:	f7ff f8f9 	bl	8002118 <ADC_setup_PA>
	ADC_Setup_VREFEN();
 8002f26:	f7ff f9b8 	bl	800229a <ADC_Setup_VREFEN>

	while(1) {
		static uint8_t lastDeci = 255;
		uint8_t curDeci = timeData.hundredths / 10;
 8002f2a:	4b77      	ldr	r3, [pc, #476]	@ (8003108 <main+0x208>)
 8002f2c:	78db      	ldrb	r3, [r3, #3]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4a76      	ldr	r2, [pc, #472]	@ (800310c <main+0x20c>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (curDeci != lastDeci) {
 8002f3c:	4b74      	ldr	r3, [pc, #464]	@ (8003110 <main+0x210>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d0f0      	beq.n	8002f2a <main+0x2a>
			lastDeci = curDeci;
 8002f48:	4a71      	ldr	r2, [pc, #452]	@ (8003110 <main+0x210>)
 8002f4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002f4e:	7013      	strb	r3, [r2, #0]

			uint16_t pa0 = ADC_measure_PA(1);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7ff f978 	bl	8002246 <ADC_measure_PA>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
			uint16_t pa1 = ADC_measure_PA(2);
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	f7ff f972 	bl	8002246 <ADC_measure_PA>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
			uint16_t VREF = ADC_measure_VREF();
 8002f68:	f7ff fa3f 	bl	80023ea <ADC_measure_VREF>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

			printf("VREFint = %d\n",VREF);
 8002f72:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002f76:	4619      	mov	r1, r3
 8002f78:	4866      	ldr	r0, [pc, #408]	@ (8003114 <main+0x214>)
 8002f7a:	f001 f89b 	bl	80040b4 <iprintf>

			float V_DDA = 3.3 * VREFINT_CAL / VREF;
 8002f7e:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <main+0x218>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd face 	bl	8000524 <__aeabi_i2d>
 8002f88:	a35b      	add	r3, pc, #364	@ (adr r3, 80030f8 <main+0x1f8>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f7fd fb33 	bl	80005f8 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4614      	mov	r4, r2
 8002f98:	461d      	mov	r5, r3
 8002f9a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fac0 	bl	8000524 <__aeabi_i2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7fd fc4e 	bl	800084c <__aeabi_ddiv>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fd fdf6 	bl	8000ba8 <__aeabi_d2f>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
			printf("V_DDA = %f\n", V_DDA);
 8002fc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002fc2:	f7fd fac1 	bl	8000548 <__aeabi_f2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4854      	ldr	r0, [pc, #336]	@ (800311c <main+0x21c>)
 8002fcc:	f001 f872 	bl	80040b4 <iprintf>

			float Vch0 = (V_DDA *pa0)/ (pow(2,12)-1);
 8002fd0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fdc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8003120 <main+0x220>
 8002fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fec:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
			float Vch1 = (V_DDA *pa1)/ (pow(2,12)-1);
 8002ff0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ffc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003004:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003120 <main+0x220>
 8003008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800300c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

			float Abs = sqrt(pow(Vch0,2)+pow(Vch1,2));
 8003010:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003012:	f7fd fa99 	bl	8000548 <__aeabi_f2d>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8003100 <main+0x200>
 800301e:	ec43 2b10 	vmov	d0, r2, r3
 8003022:	f003 f98d 	bl	8006340 <pow>
 8003026:	ec55 4b10 	vmov	r4, r5, d0
 800302a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800302c:	f7fd fa8c 	bl	8000548 <__aeabi_f2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8003100 <main+0x200>
 8003038:	ec43 2b10 	vmov	d0, r2, r3
 800303c:	f003 f980 	bl	8006340 <pow>
 8003040:	ec53 2b10 	vmov	r2, r3, d0
 8003044:	4620      	mov	r0, r4
 8003046:	4629      	mov	r1, r5
 8003048:	f7fd f920 	bl	800028c <__adddf3>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	ec43 2b17 	vmov	d7, r2, r3
 8003054:	eeb0 0a47 	vmov.f32	s0, s14
 8003058:	eef0 0a67 	vmov.f32	s1, s15
 800305c:	f003 f9e0 	bl	8006420 <sqrt>
 8003060:	ec53 2b10 	vmov	r2, r3, d0
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fd9e 	bl	8000ba8 <__aeabi_d2f>
 800306c:	4603      	mov	r3, r0
 800306e:	663b      	str	r3, [r7, #96]	@ 0x60

			char line0[24], line1[24], line2[24], line3[24];
			sprintf(line0, "VRef: %4u", VREF);
 8003070:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 8003074:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003078:	492a      	ldr	r1, [pc, #168]	@ (8003124 <main+0x224>)
 800307a:	4618      	mov	r0, r3
 800307c:	f001 f8e8 	bl	8004250 <siprintf>
			sprintf(line1, "VDDA: %.2fV", V_DDA);
 8003080:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003082:	f7fd fa61 	bl	8000548 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800308e:	4926      	ldr	r1, [pc, #152]	@ (8003128 <main+0x228>)
 8003090:	f001 f8de 	bl	8004250 <siprintf>
			sprintf(line2, "PA0: %4uV, PA1: %4u", pa0,pa1);
 8003094:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8003098:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800309c:	f107 0018 	add.w	r0, r7, #24
 80030a0:	4922      	ldr	r1, [pc, #136]	@ (800312c <main+0x22c>)
 80030a2:	f001 f8d5 	bl	8004250 <siprintf>
			sprintf(line3, "ABS value: %.2fV", Abs);
 80030a6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80030a8:	f7fd fa4e 	bl	8000548 <__aeabi_f2d>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4638      	mov	r0, r7
 80030b2:	491f      	ldr	r1, [pc, #124]	@ (8003130 <main+0x230>)
 80030b4:	f001 f8cc 	bl	8004250 <siprintf>


			lcd_write_string((uint8_t *)line0, lcdBuffer, 0, 0);
 80030b8:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80030bc:	2300      	movs	r3, #0
 80030be:	2200      	movs	r2, #0
 80030c0:	491c      	ldr	r1, [pc, #112]	@ (8003134 <main+0x234>)
 80030c2:	f7ff fdb5 	bl	8002c30 <lcd_write_string>
			lcd_write_string((uint8_t *)line1, lcdBuffer, 0, 1);
 80030c6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80030ca:	2301      	movs	r3, #1
 80030cc:	2200      	movs	r2, #0
 80030ce:	4919      	ldr	r1, [pc, #100]	@ (8003134 <main+0x234>)
 80030d0:	f7ff fdae 	bl	8002c30 <lcd_write_string>
			lcd_write_string((uint8_t *)line2, lcdBuffer, 0, 2);
 80030d4:	f107 0018 	add.w	r0, r7, #24
 80030d8:	2302      	movs	r3, #2
 80030da:	2200      	movs	r2, #0
 80030dc:	4915      	ldr	r1, [pc, #84]	@ (8003134 <main+0x234>)
 80030de:	f7ff fda7 	bl	8002c30 <lcd_write_string>
			lcd_write_string((uint8_t *)line3, lcdBuffer, 0, 3);
 80030e2:	4638      	mov	r0, r7
 80030e4:	2303      	movs	r3, #3
 80030e6:	2200      	movs	r2, #0
 80030e8:	4912      	ldr	r1, [pc, #72]	@ (8003134 <main+0x234>)
 80030ea:	f7ff fda1 	bl	8002c30 <lcd_write_string>
			lcd_push_buffer(lcdBuffer);
 80030ee:	4811      	ldr	r0, [pc, #68]	@ (8003134 <main+0x234>)
 80030f0:	f7ff fa4e 	bl	8002590 <lcd_push_buffer>
	while(1) {
 80030f4:	e719      	b.n	8002f2a <main+0x2a>
 80030f6:	bf00      	nop
 80030f8:	66666666 	.word	0x66666666
 80030fc:	400a6666 	.word	0x400a6666
 8003100:	00000000 	.word	0x00000000
 8003104:	40000000 	.word	0x40000000
 8003108:	200006ec 	.word	0x200006ec
 800310c:	cccccccd 	.word	0xcccccccd
 8003110:	20000000 	.word	0x20000000
 8003114:	08007298 	.word	0x08007298
 8003118:	1ffff7ba 	.word	0x1ffff7ba
 800311c:	080072a8 	.word	0x080072a8
 8003120:	457ff000 	.word	0x457ff000
 8003124:	080072b4 	.word	0x080072b4
 8003128:	080072c0 	.word	0x080072c0
 800312c:	080072cc 	.word	0x080072cc
 8003130:	080072e0 	.word	0x080072e0
 8003134:	200004ec 	.word	0x200004ec

08003138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_kill>:

int _kill(int pid, int sig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003152:	f001 f9b7 	bl	80044c4 <__errno>
 8003156:	4603      	mov	r3, r0
 8003158:	2216      	movs	r2, #22
 800315a:	601a      	str	r2, [r3, #0]
	return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_exit>:

void _exit (int status)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffe7 	bl	8003148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800317a:	bf00      	nop
 800317c:	e7fd      	b.n	800317a <_exit+0x12>

0800317e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e00a      	b.n	80031a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003190:	f3af 8000 	nop.w
 8003194:	4601      	mov	r1, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	60ba      	str	r2, [r7, #8]
 800319c:	b2ca      	uxtb	r2, r1
 800319e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dbf0      	blt.n	8003190 <_read+0x12>
	}

return len;
 80031ae:	687b      	ldr	r3, [r7, #4]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031e0:	605a      	str	r2, [r3, #4]
	return 0;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <_isatty>:

int _isatty(int file)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	return 1;
 80031f8:	2301      	movs	r3, #1
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
	return 0;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003224:	4b1f      	ldr	r3, [pc, #124]	@ (80032a4 <SystemInit+0x84>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	4a1e      	ldr	r2, [pc, #120]	@ (80032a4 <SystemInit+0x84>)
 800322c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003234:	4b1c      	ldr	r3, [pc, #112]	@ (80032a8 <SystemInit+0x88>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <SystemInit+0x88>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <SystemInit+0x88>)
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4918      	ldr	r1, [pc, #96]	@ (80032a8 <SystemInit+0x88>)
 8003246:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <SystemInit+0x8c>)
 8003248:	4013      	ands	r3, r2
 800324a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800324c:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <SystemInit+0x88>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a15      	ldr	r2, [pc, #84]	@ (80032a8 <SystemInit+0x88>)
 8003252:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8003256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800325c:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <SystemInit+0x88>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <SystemInit+0x88>)
 8003262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003266:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <SystemInit+0x88>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <SystemInit+0x88>)
 800326e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8003272:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <SystemInit+0x88>)
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <SystemInit+0x88>)
 800327a:	f023 030f 	bic.w	r3, r3, #15
 800327e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <SystemInit+0x88>)
 8003282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003284:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <SystemInit+0x88>)
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <SystemInit+0x90>)
 8003288:	4013      	ands	r3, r2
 800328a:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <SystemInit+0x88>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003292:	f000 f80f 	bl	80032b4 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003296:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <SystemInit+0x84>)
 8003298:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800329c:	609a      	str	r2, [r3, #8]
#endif  
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	f87fc00c 	.word	0xf87fc00c
 80032b0:	ff00fccc 	.word	0xff00fccc

080032b4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80032b8:	4b21      	ldr	r3, [pc, #132]	@ (8003340 <SetSysClock+0x8c>)
 80032ba:	2212      	movs	r2, #18
 80032bc:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80032be:	4b21      	ldr	r3, [pc, #132]	@ (8003344 <SetSysClock+0x90>)
 80032c0:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <SetSysClock+0x90>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80032c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003344 <SetSysClock+0x90>)
 80032c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <SetSysClock+0x90>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <SetSysClock+0x90>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <SetSysClock+0x90>)
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032d8:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80032da:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <SetSysClock+0x90>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4a19      	ldr	r2, [pc, #100]	@ (8003344 <SetSysClock+0x90>)
 80032e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80032e4:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80032e6:	4b17      	ldr	r3, [pc, #92]	@ (8003344 <SetSysClock+0x90>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a16      	ldr	r2, [pc, #88]	@ (8003344 <SetSysClock+0x90>)
 80032ec:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 80032f0:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80032f2:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <SetSysClock+0x90>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a13      	ldr	r2, [pc, #76]	@ (8003344 <SetSysClock+0x90>)
 80032f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fc:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80032fe:	bf00      	nop
 8003300:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <SetSysClock+0x90>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f9      	beq.n	8003300 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <SetSysClock+0x90>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a0c      	ldr	r2, [pc, #48]	@ (8003344 <SetSysClock+0x90>)
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <SetSysClock+0x90>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a09      	ldr	r2, [pc, #36]	@ (8003344 <SetSysClock+0x90>)
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003324:	bf00      	nop
 8003326:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <SetSysClock+0x90>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d1f9      	bne.n	8003326 <SetSysClock+0x72>
  {
  }
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40022000 	.word	0x40022000
 8003344:	40021000 	.word	0x40021000

08003348 <NVIC_EnableIRQ>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f103 	lsl.w	r1, r2, r3
 800335e:	4a06      	ldr	r2, [pc, #24]	@ (8003378 <NVIC_EnableIRQ+0x30>)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000e100 	.word	0xe000e100

0800337c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da0b      	bge.n	80033a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	@ (80033c8 <NVIC_SetPriority+0x4c>)
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	3b04      	subs	r3, #4
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	440b      	add	r3, r1
 80033a4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80033a6:	e009      	b.n	80033bc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	4907      	ldr	r1, [pc, #28]	@ (80033cc <NVIC_SetPriority+0x50>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <initTimer>:
#include "timer.h"

timestruct_t timeData;

void initTimer() {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM2, ENABLE);
	 */
	// -------------------------------------------------

	// Set reload and prescale value for 1/100 s (100 Hz) interrupt
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;		// enable clock line to timer 2
 80033d6:	4b16      	ldr	r3, [pc, #88]	@ (8003430 <initTimer+0x60>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a15      	ldr	r2, [pc, #84]	@ (8003430 <initTimer+0x60>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 = 0x0001;		// configure timer 2
 80033e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033e6:	2201      	movs	r2, #1
 80033e8:	801a      	strh	r2, [r3, #0]
	TIM2->ARR = 0x03FF;		// set reload value
 80033ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033ee:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80033f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 0x0270;		// set prescale value
 80033f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033f8:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28

	TIM2->DIER |= 0x0001;	// enable timer 2 interrupts
 80033fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	60d3      	str	r3, [r2, #12]

	uint8_t priority = 2;
 800340e:	2302      	movs	r3, #2
 8003410:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriority(TIM2_IRQn, priority);		// set interrupt priority interrupts
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	4619      	mov	r1, r3
 8003416:	201c      	movs	r0, #28
 8003418:	f7ff ffb0 	bl	800337c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt
 800341c:	201c      	movs	r0, #28
 800341e:	f7ff ff93 	bl	8003348 <NVIC_EnableIRQ>

	TIM2_IRQHandler();
 8003422:	f000 f807 	bl	8003434 <TIM2_IRQHandler>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000

08003434 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8003438:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 800343a:	78db      	ldrb	r3, [r3, #3]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3301      	adds	r3, #1
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4b25      	ldr	r3, [pc, #148]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003444:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003448:	78db      	ldrb	r3, [r3, #3]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b64      	cmp	r3, #100	@ 0x64
 800344e:	d10a      	bne.n	8003466 <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8003450:	4b21      	ldr	r3, [pc, #132]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003452:	2200      	movs	r2, #0
 8003454:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 8003456:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003458:	789b      	ldrb	r3, [r3, #2]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003462:	709a      	strb	r2, [r3, #2]
 8003464:	e030      	b.n	80034c8 <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 8003466:	4b1c      	ldr	r3, [pc, #112]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003468:	789b      	ldrb	r3, [r3, #2]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b3c      	cmp	r3, #60	@ 0x3c
 800346e:	d10a      	bne.n	8003486 <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003472:	2200      	movs	r2, #0
 8003474:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 8003476:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003482:	705a      	strb	r2, [r3, #1]
 8003484:	e020      	b.n	80034c8 <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 8003486:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b3c      	cmp	r3, #60	@ 0x3c
 800348e:	d10a      	bne.n	80034a6 <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003492:	2200      	movs	r2, #0
 8003494:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e010      	b.n	80034c8 <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 80034a6:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b18      	cmp	r3, #24
 80034ae:	d10b      	bne.n	80034c8 <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 80034c2:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <TIM2_IRQHandler+0xa4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80034c8:	2101      	movs	r1, #1
 80034ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80034ce:	f7fe fba5 	bl	8001c1c <TIM_ClearITPendingBit>
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200006ec 	.word	0x200006ec

080034dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034dc:	480d      	ldr	r0, [pc, #52]	@ (8003514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e0:	480d      	ldr	r0, [pc, #52]	@ (8003518 <LoopForever+0x6>)
  ldr r1, =_edata
 80034e2:	490e      	ldr	r1, [pc, #56]	@ (800351c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003520 <LoopForever+0xe>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003528 <LoopForever+0x16>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003506:	f7ff fe8b 	bl	8003220 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800350a:	f000 ffe1 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800350e:	f7ff fcf7 	bl	8002f00 <main>

08003512 <LoopForever>:

LoopForever:
    b LoopForever
 8003512:	e7fe      	b.n	8003512 <LoopForever>
  ldr   r0, =_estack
 8003514:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800351c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8003520:	080078c0 	.word	0x080078c0
  ldr r2, =_sbss
 8003524:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8003528:	20000840 	.word	0x20000840

0800352c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC1_2_IRQHandler>

0800352e <__cvt>:
 800352e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003532:	ec57 6b10 	vmov	r6, r7, d0
 8003536:	2f00      	cmp	r7, #0
 8003538:	460c      	mov	r4, r1
 800353a:	4619      	mov	r1, r3
 800353c:	463b      	mov	r3, r7
 800353e:	bfbb      	ittet	lt
 8003540:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003544:	461f      	movlt	r7, r3
 8003546:	2300      	movge	r3, #0
 8003548:	232d      	movlt	r3, #45	@ 0x2d
 800354a:	700b      	strb	r3, [r1, #0]
 800354c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800354e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003552:	4691      	mov	r9, r2
 8003554:	f023 0820 	bic.w	r8, r3, #32
 8003558:	bfbc      	itt	lt
 800355a:	4632      	movlt	r2, r6
 800355c:	4616      	movlt	r6, r2
 800355e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003562:	d005      	beq.n	8003570 <__cvt+0x42>
 8003564:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003568:	d100      	bne.n	800356c <__cvt+0x3e>
 800356a:	3401      	adds	r4, #1
 800356c:	2102      	movs	r1, #2
 800356e:	e000      	b.n	8003572 <__cvt+0x44>
 8003570:	2103      	movs	r1, #3
 8003572:	ab03      	add	r3, sp, #12
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	ab02      	add	r3, sp, #8
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	ec47 6b10 	vmov	d0, r6, r7
 800357e:	4653      	mov	r3, sl
 8003580:	4622      	mov	r2, r4
 8003582:	f001 f865 	bl	8004650 <_dtoa_r>
 8003586:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800358a:	4605      	mov	r5, r0
 800358c:	d119      	bne.n	80035c2 <__cvt+0x94>
 800358e:	f019 0f01 	tst.w	r9, #1
 8003592:	d00e      	beq.n	80035b2 <__cvt+0x84>
 8003594:	eb00 0904 	add.w	r9, r0, r4
 8003598:	2200      	movs	r2, #0
 800359a:	2300      	movs	r3, #0
 800359c:	4630      	mov	r0, r6
 800359e:	4639      	mov	r1, r7
 80035a0:	f7fd fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80035a4:	b108      	cbz	r0, 80035aa <__cvt+0x7c>
 80035a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80035aa:	2230      	movs	r2, #48	@ 0x30
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	454b      	cmp	r3, r9
 80035b0:	d31e      	bcc.n	80035f0 <__cvt+0xc2>
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80035b6:	1b5b      	subs	r3, r3, r5
 80035b8:	4628      	mov	r0, r5
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	b004      	add	sp, #16
 80035be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035c6:	eb00 0904 	add.w	r9, r0, r4
 80035ca:	d1e5      	bne.n	8003598 <__cvt+0x6a>
 80035cc:	7803      	ldrb	r3, [r0, #0]
 80035ce:	2b30      	cmp	r3, #48	@ 0x30
 80035d0:	d10a      	bne.n	80035e8 <__cvt+0xba>
 80035d2:	2200      	movs	r2, #0
 80035d4:	2300      	movs	r3, #0
 80035d6:	4630      	mov	r0, r6
 80035d8:	4639      	mov	r1, r7
 80035da:	f7fd fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80035de:	b918      	cbnz	r0, 80035e8 <__cvt+0xba>
 80035e0:	f1c4 0401 	rsb	r4, r4, #1
 80035e4:	f8ca 4000 	str.w	r4, [sl]
 80035e8:	f8da 3000 	ldr.w	r3, [sl]
 80035ec:	4499      	add	r9, r3
 80035ee:	e7d3      	b.n	8003598 <__cvt+0x6a>
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	9103      	str	r1, [sp, #12]
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e7d9      	b.n	80035ac <__cvt+0x7e>

080035f8 <__exponent>:
 80035f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035fa:	2900      	cmp	r1, #0
 80035fc:	bfba      	itte	lt
 80035fe:	4249      	neglt	r1, r1
 8003600:	232d      	movlt	r3, #45	@ 0x2d
 8003602:	232b      	movge	r3, #43	@ 0x2b
 8003604:	2909      	cmp	r1, #9
 8003606:	7002      	strb	r2, [r0, #0]
 8003608:	7043      	strb	r3, [r0, #1]
 800360a:	dd29      	ble.n	8003660 <__exponent+0x68>
 800360c:	f10d 0307 	add.w	r3, sp, #7
 8003610:	461d      	mov	r5, r3
 8003612:	270a      	movs	r7, #10
 8003614:	461a      	mov	r2, r3
 8003616:	fbb1 f6f7 	udiv	r6, r1, r7
 800361a:	fb07 1416 	mls	r4, r7, r6, r1
 800361e:	3430      	adds	r4, #48	@ 0x30
 8003620:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003624:	460c      	mov	r4, r1
 8003626:	2c63      	cmp	r4, #99	@ 0x63
 8003628:	f103 33ff 	add.w	r3, r3, #4294967295
 800362c:	4631      	mov	r1, r6
 800362e:	dcf1      	bgt.n	8003614 <__exponent+0x1c>
 8003630:	3130      	adds	r1, #48	@ 0x30
 8003632:	1e94      	subs	r4, r2, #2
 8003634:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003638:	1c41      	adds	r1, r0, #1
 800363a:	4623      	mov	r3, r4
 800363c:	42ab      	cmp	r3, r5
 800363e:	d30a      	bcc.n	8003656 <__exponent+0x5e>
 8003640:	f10d 0309 	add.w	r3, sp, #9
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	42ac      	cmp	r4, r5
 8003648:	bf88      	it	hi
 800364a:	2300      	movhi	r3, #0
 800364c:	3302      	adds	r3, #2
 800364e:	4403      	add	r3, r0
 8003650:	1a18      	subs	r0, r3, r0
 8003652:	b003      	add	sp, #12
 8003654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003656:	f813 6b01 	ldrb.w	r6, [r3], #1
 800365a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800365e:	e7ed      	b.n	800363c <__exponent+0x44>
 8003660:	2330      	movs	r3, #48	@ 0x30
 8003662:	3130      	adds	r1, #48	@ 0x30
 8003664:	7083      	strb	r3, [r0, #2]
 8003666:	70c1      	strb	r1, [r0, #3]
 8003668:	1d03      	adds	r3, r0, #4
 800366a:	e7f1      	b.n	8003650 <__exponent+0x58>

0800366c <_printf_float>:
 800366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003670:	b08d      	sub	sp, #52	@ 0x34
 8003672:	460c      	mov	r4, r1
 8003674:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003678:	4616      	mov	r6, r2
 800367a:	461f      	mov	r7, r3
 800367c:	4605      	mov	r5, r0
 800367e:	f000 fee9 	bl	8004454 <_localeconv_r>
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	9304      	str	r3, [sp, #16]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fdf2 	bl	8000270 <strlen>
 800368c:	2300      	movs	r3, #0
 800368e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003690:	f8d8 3000 	ldr.w	r3, [r8]
 8003694:	9005      	str	r0, [sp, #20]
 8003696:	3307      	adds	r3, #7
 8003698:	f023 0307 	bic.w	r3, r3, #7
 800369c:	f103 0208 	add.w	r2, r3, #8
 80036a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80036a4:	f8d4 b000 	ldr.w	fp, [r4]
 80036a8:	f8c8 2000 	str.w	r2, [r8]
 80036ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80036b4:	9307      	str	r3, [sp, #28]
 80036b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80036ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80036be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003934 <_printf_float+0x2c8>)
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	f7fd fa30 	bl	8000b2c <__aeabi_dcmpun>
 80036cc:	bb70      	cbnz	r0, 800372c <_printf_float+0xc0>
 80036ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036d2:	4b98      	ldr	r3, [pc, #608]	@ (8003934 <_printf_float+0x2c8>)
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	f7fd fa0a 	bl	8000af0 <__aeabi_dcmple>
 80036dc:	bb30      	cbnz	r0, 800372c <_printf_float+0xc0>
 80036de:	2200      	movs	r2, #0
 80036e0:	2300      	movs	r3, #0
 80036e2:	4640      	mov	r0, r8
 80036e4:	4649      	mov	r1, r9
 80036e6:	f7fd f9f9 	bl	8000adc <__aeabi_dcmplt>
 80036ea:	b110      	cbz	r0, 80036f2 <_printf_float+0x86>
 80036ec:	232d      	movs	r3, #45	@ 0x2d
 80036ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f2:	4a91      	ldr	r2, [pc, #580]	@ (8003938 <_printf_float+0x2cc>)
 80036f4:	4b91      	ldr	r3, [pc, #580]	@ (800393c <_printf_float+0x2d0>)
 80036f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80036fa:	bf8c      	ite	hi
 80036fc:	4690      	movhi	r8, r2
 80036fe:	4698      	movls	r8, r3
 8003700:	2303      	movs	r3, #3
 8003702:	6123      	str	r3, [r4, #16]
 8003704:	f02b 0304 	bic.w	r3, fp, #4
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	f04f 0900 	mov.w	r9, #0
 800370e:	9700      	str	r7, [sp, #0]
 8003710:	4633      	mov	r3, r6
 8003712:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003714:	4621      	mov	r1, r4
 8003716:	4628      	mov	r0, r5
 8003718:	f000 f9d2 	bl	8003ac0 <_printf_common>
 800371c:	3001      	adds	r0, #1
 800371e:	f040 808d 	bne.w	800383c <_printf_float+0x1d0>
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
 8003726:	b00d      	add	sp, #52	@ 0x34
 8003728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	4640      	mov	r0, r8
 8003732:	4649      	mov	r1, r9
 8003734:	f7fd f9fa 	bl	8000b2c <__aeabi_dcmpun>
 8003738:	b140      	cbz	r0, 800374c <_printf_float+0xe0>
 800373a:	464b      	mov	r3, r9
 800373c:	2b00      	cmp	r3, #0
 800373e:	bfbc      	itt	lt
 8003740:	232d      	movlt	r3, #45	@ 0x2d
 8003742:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003746:	4a7e      	ldr	r2, [pc, #504]	@ (8003940 <_printf_float+0x2d4>)
 8003748:	4b7e      	ldr	r3, [pc, #504]	@ (8003944 <_printf_float+0x2d8>)
 800374a:	e7d4      	b.n	80036f6 <_printf_float+0x8a>
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003752:	9206      	str	r2, [sp, #24]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	d13b      	bne.n	80037d0 <_printf_float+0x164>
 8003758:	2306      	movs	r3, #6
 800375a:	6063      	str	r3, [r4, #4]
 800375c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003760:	2300      	movs	r3, #0
 8003762:	6022      	str	r2, [r4, #0]
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	ab0a      	add	r3, sp, #40	@ 0x28
 8003768:	e9cd a301 	strd	sl, r3, [sp, #4]
 800376c:	ab09      	add	r3, sp, #36	@ 0x24
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	6861      	ldr	r1, [r4, #4]
 8003772:	ec49 8b10 	vmov	d0, r8, r9
 8003776:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800377a:	4628      	mov	r0, r5
 800377c:	f7ff fed7 	bl	800352e <__cvt>
 8003780:	9b06      	ldr	r3, [sp, #24]
 8003782:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003784:	2b47      	cmp	r3, #71	@ 0x47
 8003786:	4680      	mov	r8, r0
 8003788:	d129      	bne.n	80037de <_printf_float+0x172>
 800378a:	1cc8      	adds	r0, r1, #3
 800378c:	db02      	blt.n	8003794 <_printf_float+0x128>
 800378e:	6863      	ldr	r3, [r4, #4]
 8003790:	4299      	cmp	r1, r3
 8003792:	dd41      	ble.n	8003818 <_printf_float+0x1ac>
 8003794:	f1aa 0a02 	sub.w	sl, sl, #2
 8003798:	fa5f fa8a 	uxtb.w	sl, sl
 800379c:	3901      	subs	r1, #1
 800379e:	4652      	mov	r2, sl
 80037a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80037a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80037a6:	f7ff ff27 	bl	80035f8 <__exponent>
 80037aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80037ac:	1813      	adds	r3, r2, r0
 80037ae:	2a01      	cmp	r2, #1
 80037b0:	4681      	mov	r9, r0
 80037b2:	6123      	str	r3, [r4, #16]
 80037b4:	dc02      	bgt.n	80037bc <_printf_float+0x150>
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	07d2      	lsls	r2, r2, #31
 80037ba:	d501      	bpl.n	80037c0 <_printf_float+0x154>
 80037bc:	3301      	adds	r3, #1
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0a2      	beq.n	800370e <_printf_float+0xa2>
 80037c8:	232d      	movs	r3, #45	@ 0x2d
 80037ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037ce:	e79e      	b.n	800370e <_printf_float+0xa2>
 80037d0:	9a06      	ldr	r2, [sp, #24]
 80037d2:	2a47      	cmp	r2, #71	@ 0x47
 80037d4:	d1c2      	bne.n	800375c <_printf_float+0xf0>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1c0      	bne.n	800375c <_printf_float+0xf0>
 80037da:	2301      	movs	r3, #1
 80037dc:	e7bd      	b.n	800375a <_printf_float+0xee>
 80037de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80037e2:	d9db      	bls.n	800379c <_printf_float+0x130>
 80037e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80037e8:	d118      	bne.n	800381c <_printf_float+0x1b0>
 80037ea:	2900      	cmp	r1, #0
 80037ec:	6863      	ldr	r3, [r4, #4]
 80037ee:	dd0b      	ble.n	8003808 <_printf_float+0x19c>
 80037f0:	6121      	str	r1, [r4, #16]
 80037f2:	b913      	cbnz	r3, 80037fa <_printf_float+0x18e>
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	07d0      	lsls	r0, r2, #31
 80037f8:	d502      	bpl.n	8003800 <_printf_float+0x194>
 80037fa:	3301      	adds	r3, #1
 80037fc:	440b      	add	r3, r1
 80037fe:	6123      	str	r3, [r4, #16]
 8003800:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003802:	f04f 0900 	mov.w	r9, #0
 8003806:	e7db      	b.n	80037c0 <_printf_float+0x154>
 8003808:	b913      	cbnz	r3, 8003810 <_printf_float+0x1a4>
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	07d2      	lsls	r2, r2, #31
 800380e:	d501      	bpl.n	8003814 <_printf_float+0x1a8>
 8003810:	3302      	adds	r3, #2
 8003812:	e7f4      	b.n	80037fe <_printf_float+0x192>
 8003814:	2301      	movs	r3, #1
 8003816:	e7f2      	b.n	80037fe <_printf_float+0x192>
 8003818:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800381c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800381e:	4299      	cmp	r1, r3
 8003820:	db05      	blt.n	800382e <_printf_float+0x1c2>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6121      	str	r1, [r4, #16]
 8003826:	07d8      	lsls	r0, r3, #31
 8003828:	d5ea      	bpl.n	8003800 <_printf_float+0x194>
 800382a:	1c4b      	adds	r3, r1, #1
 800382c:	e7e7      	b.n	80037fe <_printf_float+0x192>
 800382e:	2900      	cmp	r1, #0
 8003830:	bfd4      	ite	le
 8003832:	f1c1 0202 	rsble	r2, r1, #2
 8003836:	2201      	movgt	r2, #1
 8003838:	4413      	add	r3, r2
 800383a:	e7e0      	b.n	80037fe <_printf_float+0x192>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	055a      	lsls	r2, r3, #21
 8003840:	d407      	bmi.n	8003852 <_printf_float+0x1e6>
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	4642      	mov	r2, r8
 8003846:	4631      	mov	r1, r6
 8003848:	4628      	mov	r0, r5
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	d12b      	bne.n	80038a8 <_printf_float+0x23c>
 8003850:	e767      	b.n	8003722 <_printf_float+0xb6>
 8003852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003856:	f240 80dd 	bls.w	8003a14 <_printf_float+0x3a8>
 800385a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800385e:	2200      	movs	r2, #0
 8003860:	2300      	movs	r3, #0
 8003862:	f7fd f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8003866:	2800      	cmp	r0, #0
 8003868:	d033      	beq.n	80038d2 <_printf_float+0x266>
 800386a:	4a37      	ldr	r2, [pc, #220]	@ (8003948 <_printf_float+0x2dc>)
 800386c:	2301      	movs	r3, #1
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f af54 	beq.w	8003722 <_printf_float+0xb6>
 800387a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800387e:	4543      	cmp	r3, r8
 8003880:	db02      	blt.n	8003888 <_printf_float+0x21c>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	07d8      	lsls	r0, r3, #31
 8003886:	d50f      	bpl.n	80038a8 <_printf_float+0x23c>
 8003888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800388c:	4631      	mov	r1, r6
 800388e:	4628      	mov	r0, r5
 8003890:	47b8      	blx	r7
 8003892:	3001      	adds	r0, #1
 8003894:	f43f af45 	beq.w	8003722 <_printf_float+0xb6>
 8003898:	f04f 0900 	mov.w	r9, #0
 800389c:	f108 38ff 	add.w	r8, r8, #4294967295
 80038a0:	f104 0a1a 	add.w	sl, r4, #26
 80038a4:	45c8      	cmp	r8, r9
 80038a6:	dc09      	bgt.n	80038bc <_printf_float+0x250>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	079b      	lsls	r3, r3, #30
 80038ac:	f100 8103 	bmi.w	8003ab6 <_printf_float+0x44a>
 80038b0:	68e0      	ldr	r0, [r4, #12]
 80038b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038b4:	4298      	cmp	r0, r3
 80038b6:	bfb8      	it	lt
 80038b8:	4618      	movlt	r0, r3
 80038ba:	e734      	b.n	8003726 <_printf_float+0xba>
 80038bc:	2301      	movs	r3, #1
 80038be:	4652      	mov	r2, sl
 80038c0:	4631      	mov	r1, r6
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	f43f af2b 	beq.w	8003722 <_printf_float+0xb6>
 80038cc:	f109 0901 	add.w	r9, r9, #1
 80038d0:	e7e8      	b.n	80038a4 <_printf_float+0x238>
 80038d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dc39      	bgt.n	800394c <_printf_float+0x2e0>
 80038d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003948 <_printf_float+0x2dc>)
 80038da:	2301      	movs	r3, #1
 80038dc:	4631      	mov	r1, r6
 80038de:	4628      	mov	r0, r5
 80038e0:	47b8      	blx	r7
 80038e2:	3001      	adds	r0, #1
 80038e4:	f43f af1d 	beq.w	8003722 <_printf_float+0xb6>
 80038e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80038ec:	ea59 0303 	orrs.w	r3, r9, r3
 80038f0:	d102      	bne.n	80038f8 <_printf_float+0x28c>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	07d9      	lsls	r1, r3, #31
 80038f6:	d5d7      	bpl.n	80038a8 <_printf_float+0x23c>
 80038f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038fc:	4631      	mov	r1, r6
 80038fe:	4628      	mov	r0, r5
 8003900:	47b8      	blx	r7
 8003902:	3001      	adds	r0, #1
 8003904:	f43f af0d 	beq.w	8003722 <_printf_float+0xb6>
 8003908:	f04f 0a00 	mov.w	sl, #0
 800390c:	f104 0b1a 	add.w	fp, r4, #26
 8003910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003912:	425b      	negs	r3, r3
 8003914:	4553      	cmp	r3, sl
 8003916:	dc01      	bgt.n	800391c <_printf_float+0x2b0>
 8003918:	464b      	mov	r3, r9
 800391a:	e793      	b.n	8003844 <_printf_float+0x1d8>
 800391c:	2301      	movs	r3, #1
 800391e:	465a      	mov	r2, fp
 8003920:	4631      	mov	r1, r6
 8003922:	4628      	mov	r0, r5
 8003924:	47b8      	blx	r7
 8003926:	3001      	adds	r0, #1
 8003928:	f43f aefb 	beq.w	8003722 <_printf_float+0xb6>
 800392c:	f10a 0a01 	add.w	sl, sl, #1
 8003930:	e7ee      	b.n	8003910 <_printf_float+0x2a4>
 8003932:	bf00      	nop
 8003934:	7fefffff 	.word	0x7fefffff
 8003938:	080074ff 	.word	0x080074ff
 800393c:	080074fb 	.word	0x080074fb
 8003940:	08007507 	.word	0x08007507
 8003944:	08007503 	.word	0x08007503
 8003948:	0800750b 	.word	0x0800750b
 800394c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800394e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003952:	4553      	cmp	r3, sl
 8003954:	bfa8      	it	ge
 8003956:	4653      	movge	r3, sl
 8003958:	2b00      	cmp	r3, #0
 800395a:	4699      	mov	r9, r3
 800395c:	dc36      	bgt.n	80039cc <_printf_float+0x360>
 800395e:	f04f 0b00 	mov.w	fp, #0
 8003962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003966:	f104 021a 	add.w	r2, r4, #26
 800396a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800396c:	9306      	str	r3, [sp, #24]
 800396e:	eba3 0309 	sub.w	r3, r3, r9
 8003972:	455b      	cmp	r3, fp
 8003974:	dc31      	bgt.n	80039da <_printf_float+0x36e>
 8003976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003978:	459a      	cmp	sl, r3
 800397a:	dc3a      	bgt.n	80039f2 <_printf_float+0x386>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	07da      	lsls	r2, r3, #31
 8003980:	d437      	bmi.n	80039f2 <_printf_float+0x386>
 8003982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003984:	ebaa 0903 	sub.w	r9, sl, r3
 8003988:	9b06      	ldr	r3, [sp, #24]
 800398a:	ebaa 0303 	sub.w	r3, sl, r3
 800398e:	4599      	cmp	r9, r3
 8003990:	bfa8      	it	ge
 8003992:	4699      	movge	r9, r3
 8003994:	f1b9 0f00 	cmp.w	r9, #0
 8003998:	dc33      	bgt.n	8003a02 <_printf_float+0x396>
 800399a:	f04f 0800 	mov.w	r8, #0
 800399e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039a2:	f104 0b1a 	add.w	fp, r4, #26
 80039a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039a8:	ebaa 0303 	sub.w	r3, sl, r3
 80039ac:	eba3 0309 	sub.w	r3, r3, r9
 80039b0:	4543      	cmp	r3, r8
 80039b2:	f77f af79 	ble.w	80038a8 <_printf_float+0x23c>
 80039b6:	2301      	movs	r3, #1
 80039b8:	465a      	mov	r2, fp
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	f43f aeae 	beq.w	8003722 <_printf_float+0xb6>
 80039c6:	f108 0801 	add.w	r8, r8, #1
 80039ca:	e7ec      	b.n	80039a6 <_printf_float+0x33a>
 80039cc:	4642      	mov	r2, r8
 80039ce:	4631      	mov	r1, r6
 80039d0:	4628      	mov	r0, r5
 80039d2:	47b8      	blx	r7
 80039d4:	3001      	adds	r0, #1
 80039d6:	d1c2      	bne.n	800395e <_printf_float+0x2f2>
 80039d8:	e6a3      	b.n	8003722 <_printf_float+0xb6>
 80039da:	2301      	movs	r3, #1
 80039dc:	4631      	mov	r1, r6
 80039de:	4628      	mov	r0, r5
 80039e0:	9206      	str	r2, [sp, #24]
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	f43f ae9c 	beq.w	8003722 <_printf_float+0xb6>
 80039ea:	9a06      	ldr	r2, [sp, #24]
 80039ec:	f10b 0b01 	add.w	fp, fp, #1
 80039f0:	e7bb      	b.n	800396a <_printf_float+0x2fe>
 80039f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	47b8      	blx	r7
 80039fc:	3001      	adds	r0, #1
 80039fe:	d1c0      	bne.n	8003982 <_printf_float+0x316>
 8003a00:	e68f      	b.n	8003722 <_printf_float+0xb6>
 8003a02:	9a06      	ldr	r2, [sp, #24]
 8003a04:	464b      	mov	r3, r9
 8003a06:	4442      	add	r2, r8
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	47b8      	blx	r7
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d1c3      	bne.n	800399a <_printf_float+0x32e>
 8003a12:	e686      	b.n	8003722 <_printf_float+0xb6>
 8003a14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a18:	f1ba 0f01 	cmp.w	sl, #1
 8003a1c:	dc01      	bgt.n	8003a22 <_printf_float+0x3b6>
 8003a1e:	07db      	lsls	r3, r3, #31
 8003a20:	d536      	bpl.n	8003a90 <_printf_float+0x424>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4642      	mov	r2, r8
 8003a26:	4631      	mov	r1, r6
 8003a28:	4628      	mov	r0, r5
 8003a2a:	47b8      	blx	r7
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	f43f ae78 	beq.w	8003722 <_printf_float+0xb6>
 8003a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a36:	4631      	mov	r1, r6
 8003a38:	4628      	mov	r0, r5
 8003a3a:	47b8      	blx	r7
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	f43f ae70 	beq.w	8003722 <_printf_float+0xb6>
 8003a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a46:	2200      	movs	r2, #0
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a4e:	f7fd f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a52:	b9c0      	cbnz	r0, 8003a86 <_printf_float+0x41a>
 8003a54:	4653      	mov	r3, sl
 8003a56:	f108 0201 	add.w	r2, r8, #1
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b8      	blx	r7
 8003a60:	3001      	adds	r0, #1
 8003a62:	d10c      	bne.n	8003a7e <_printf_float+0x412>
 8003a64:	e65d      	b.n	8003722 <_printf_float+0xb6>
 8003a66:	2301      	movs	r3, #1
 8003a68:	465a      	mov	r2, fp
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	f43f ae56 	beq.w	8003722 <_printf_float+0xb6>
 8003a76:	f108 0801 	add.w	r8, r8, #1
 8003a7a:	45d0      	cmp	r8, sl
 8003a7c:	dbf3      	blt.n	8003a66 <_printf_float+0x3fa>
 8003a7e:	464b      	mov	r3, r9
 8003a80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a84:	e6df      	b.n	8003846 <_printf_float+0x1da>
 8003a86:	f04f 0800 	mov.w	r8, #0
 8003a8a:	f104 0b1a 	add.w	fp, r4, #26
 8003a8e:	e7f4      	b.n	8003a7a <_printf_float+0x40e>
 8003a90:	2301      	movs	r3, #1
 8003a92:	4642      	mov	r2, r8
 8003a94:	e7e1      	b.n	8003a5a <_printf_float+0x3ee>
 8003a96:	2301      	movs	r3, #1
 8003a98:	464a      	mov	r2, r9
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	47b8      	blx	r7
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	f43f ae3e 	beq.w	8003722 <_printf_float+0xb6>
 8003aa6:	f108 0801 	add.w	r8, r8, #1
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003aae:	1a5b      	subs	r3, r3, r1
 8003ab0:	4543      	cmp	r3, r8
 8003ab2:	dcf0      	bgt.n	8003a96 <_printf_float+0x42a>
 8003ab4:	e6fc      	b.n	80038b0 <_printf_float+0x244>
 8003ab6:	f04f 0800 	mov.w	r8, #0
 8003aba:	f104 0919 	add.w	r9, r4, #25
 8003abe:	e7f4      	b.n	8003aaa <_printf_float+0x43e>

08003ac0 <_printf_common>:
 8003ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac4:	4616      	mov	r6, r2
 8003ac6:	4698      	mov	r8, r3
 8003ac8:	688a      	ldr	r2, [r1, #8]
 8003aca:	690b      	ldr	r3, [r1, #16]
 8003acc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bfb8      	it	lt
 8003ad4:	4613      	movlt	r3, r2
 8003ad6:	6033      	str	r3, [r6, #0]
 8003ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003adc:	4607      	mov	r7, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	b10a      	cbz	r2, 8003ae6 <_printf_common+0x26>
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	6033      	str	r3, [r6, #0]
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	0699      	lsls	r1, r3, #26
 8003aea:	bf42      	ittt	mi
 8003aec:	6833      	ldrmi	r3, [r6, #0]
 8003aee:	3302      	addmi	r3, #2
 8003af0:	6033      	strmi	r3, [r6, #0]
 8003af2:	6825      	ldr	r5, [r4, #0]
 8003af4:	f015 0506 	ands.w	r5, r5, #6
 8003af8:	d106      	bne.n	8003b08 <_printf_common+0x48>
 8003afa:	f104 0a19 	add.w	sl, r4, #25
 8003afe:	68e3      	ldr	r3, [r4, #12]
 8003b00:	6832      	ldr	r2, [r6, #0]
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	42ab      	cmp	r3, r5
 8003b06:	dc26      	bgt.n	8003b56 <_printf_common+0x96>
 8003b08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	3b00      	subs	r3, #0
 8003b10:	bf18      	it	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	0692      	lsls	r2, r2, #26
 8003b16:	d42b      	bmi.n	8003b70 <_printf_common+0xb0>
 8003b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	4638      	mov	r0, r7
 8003b20:	47c8      	blx	r9
 8003b22:	3001      	adds	r0, #1
 8003b24:	d01e      	beq.n	8003b64 <_printf_common+0xa4>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	6922      	ldr	r2, [r4, #16]
 8003b2a:	f003 0306 	and.w	r3, r3, #6
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	bf02      	ittt	eq
 8003b32:	68e5      	ldreq	r5, [r4, #12]
 8003b34:	6833      	ldreq	r3, [r6, #0]
 8003b36:	1aed      	subeq	r5, r5, r3
 8003b38:	68a3      	ldr	r3, [r4, #8]
 8003b3a:	bf0c      	ite	eq
 8003b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b40:	2500      	movne	r5, #0
 8003b42:	4293      	cmp	r3, r2
 8003b44:	bfc4      	itt	gt
 8003b46:	1a9b      	subgt	r3, r3, r2
 8003b48:	18ed      	addgt	r5, r5, r3
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	341a      	adds	r4, #26
 8003b4e:	42b5      	cmp	r5, r6
 8003b50:	d11a      	bne.n	8003b88 <_printf_common+0xc8>
 8003b52:	2000      	movs	r0, #0
 8003b54:	e008      	b.n	8003b68 <_printf_common+0xa8>
 8003b56:	2301      	movs	r3, #1
 8003b58:	4652      	mov	r2, sl
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	4638      	mov	r0, r7
 8003b5e:	47c8      	blx	r9
 8003b60:	3001      	adds	r0, #1
 8003b62:	d103      	bne.n	8003b6c <_printf_common+0xac>
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	3501      	adds	r5, #1
 8003b6e:	e7c6      	b.n	8003afe <_printf_common+0x3e>
 8003b70:	18e1      	adds	r1, r4, r3
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	2030      	movs	r0, #48	@ 0x30
 8003b76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b7a:	4422      	add	r2, r4
 8003b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b84:	3302      	adds	r3, #2
 8003b86:	e7c7      	b.n	8003b18 <_printf_common+0x58>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	4638      	mov	r0, r7
 8003b90:	47c8      	blx	r9
 8003b92:	3001      	adds	r0, #1
 8003b94:	d0e6      	beq.n	8003b64 <_printf_common+0xa4>
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7d9      	b.n	8003b4e <_printf_common+0x8e>
	...

08003b9c <_printf_i>:
 8003b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba0:	7e0f      	ldrb	r7, [r1, #24]
 8003ba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ba4:	2f78      	cmp	r7, #120	@ 0x78
 8003ba6:	4691      	mov	r9, r2
 8003ba8:	4680      	mov	r8, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	469a      	mov	sl, r3
 8003bae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bb2:	d807      	bhi.n	8003bc4 <_printf_i+0x28>
 8003bb4:	2f62      	cmp	r7, #98	@ 0x62
 8003bb6:	d80a      	bhi.n	8003bce <_printf_i+0x32>
 8003bb8:	2f00      	cmp	r7, #0
 8003bba:	f000 80d1 	beq.w	8003d60 <_printf_i+0x1c4>
 8003bbe:	2f58      	cmp	r7, #88	@ 0x58
 8003bc0:	f000 80b8 	beq.w	8003d34 <_printf_i+0x198>
 8003bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bcc:	e03a      	b.n	8003c44 <_printf_i+0xa8>
 8003bce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bd2:	2b15      	cmp	r3, #21
 8003bd4:	d8f6      	bhi.n	8003bc4 <_printf_i+0x28>
 8003bd6:	a101      	add	r1, pc, #4	@ (adr r1, 8003bdc <_printf_i+0x40>)
 8003bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c49 	.word	0x08003c49
 8003be4:	08003bc5 	.word	0x08003bc5
 8003be8:	08003bc5 	.word	0x08003bc5
 8003bec:	08003bc5 	.word	0x08003bc5
 8003bf0:	08003bc5 	.word	0x08003bc5
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003bc5 	.word	0x08003bc5
 8003bfc:	08003bc5 	.word	0x08003bc5
 8003c00:	08003bc5 	.word	0x08003bc5
 8003c04:	08003bc5 	.word	0x08003bc5
 8003c08:	08003d47 	.word	0x08003d47
 8003c0c:	08003c73 	.word	0x08003c73
 8003c10:	08003d01 	.word	0x08003d01
 8003c14:	08003bc5 	.word	0x08003bc5
 8003c18:	08003bc5 	.word	0x08003bc5
 8003c1c:	08003d69 	.word	0x08003d69
 8003c20:	08003bc5 	.word	0x08003bc5
 8003c24:	08003c73 	.word	0x08003c73
 8003c28:	08003bc5 	.word	0x08003bc5
 8003c2c:	08003bc5 	.word	0x08003bc5
 8003c30:	08003d09 	.word	0x08003d09
 8003c34:	6833      	ldr	r3, [r6, #0]
 8003c36:	1d1a      	adds	r2, r3, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6032      	str	r2, [r6, #0]
 8003c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c44:	2301      	movs	r3, #1
 8003c46:	e09c      	b.n	8003d82 <_printf_i+0x1e6>
 8003c48:	6833      	ldr	r3, [r6, #0]
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	1d19      	adds	r1, r3, #4
 8003c4e:	6031      	str	r1, [r6, #0]
 8003c50:	0606      	lsls	r6, r0, #24
 8003c52:	d501      	bpl.n	8003c58 <_printf_i+0xbc>
 8003c54:	681d      	ldr	r5, [r3, #0]
 8003c56:	e003      	b.n	8003c60 <_printf_i+0xc4>
 8003c58:	0645      	lsls	r5, r0, #25
 8003c5a:	d5fb      	bpl.n	8003c54 <_printf_i+0xb8>
 8003c5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c60:	2d00      	cmp	r5, #0
 8003c62:	da03      	bge.n	8003c6c <_printf_i+0xd0>
 8003c64:	232d      	movs	r3, #45	@ 0x2d
 8003c66:	426d      	negs	r5, r5
 8003c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c6c:	4858      	ldr	r0, [pc, #352]	@ (8003dd0 <_printf_i+0x234>)
 8003c6e:	230a      	movs	r3, #10
 8003c70:	e011      	b.n	8003c96 <_printf_i+0xfa>
 8003c72:	6821      	ldr	r1, [r4, #0]
 8003c74:	6833      	ldr	r3, [r6, #0]
 8003c76:	0608      	lsls	r0, r1, #24
 8003c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c7c:	d402      	bmi.n	8003c84 <_printf_i+0xe8>
 8003c7e:	0649      	lsls	r1, r1, #25
 8003c80:	bf48      	it	mi
 8003c82:	b2ad      	uxthmi	r5, r5
 8003c84:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c86:	4852      	ldr	r0, [pc, #328]	@ (8003dd0 <_printf_i+0x234>)
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	bf14      	ite	ne
 8003c8c:	230a      	movne	r3, #10
 8003c8e:	2308      	moveq	r3, #8
 8003c90:	2100      	movs	r1, #0
 8003c92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c96:	6866      	ldr	r6, [r4, #4]
 8003c98:	60a6      	str	r6, [r4, #8]
 8003c9a:	2e00      	cmp	r6, #0
 8003c9c:	db05      	blt.n	8003caa <_printf_i+0x10e>
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	432e      	orrs	r6, r5
 8003ca2:	f021 0104 	bic.w	r1, r1, #4
 8003ca6:	6021      	str	r1, [r4, #0]
 8003ca8:	d04b      	beq.n	8003d42 <_printf_i+0x1a6>
 8003caa:	4616      	mov	r6, r2
 8003cac:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cb0:	fb03 5711 	mls	r7, r3, r1, r5
 8003cb4:	5dc7      	ldrb	r7, [r0, r7]
 8003cb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cba:	462f      	mov	r7, r5
 8003cbc:	42bb      	cmp	r3, r7
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	d9f4      	bls.n	8003cac <_printf_i+0x110>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d10b      	bne.n	8003cde <_printf_i+0x142>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	07df      	lsls	r7, r3, #31
 8003cca:	d508      	bpl.n	8003cde <_printf_i+0x142>
 8003ccc:	6923      	ldr	r3, [r4, #16]
 8003cce:	6861      	ldr	r1, [r4, #4]
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	bfde      	ittt	le
 8003cd4:	2330      	movle	r3, #48	@ 0x30
 8003cd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cde:	1b92      	subs	r2, r2, r6
 8003ce0:	6122      	str	r2, [r4, #16]
 8003ce2:	f8cd a000 	str.w	sl, [sp]
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	aa03      	add	r2, sp, #12
 8003cea:	4621      	mov	r1, r4
 8003cec:	4640      	mov	r0, r8
 8003cee:	f7ff fee7 	bl	8003ac0 <_printf_common>
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d14a      	bne.n	8003d8c <_printf_i+0x1f0>
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	b004      	add	sp, #16
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	f043 0320 	orr.w	r3, r3, #32
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	4832      	ldr	r0, [pc, #200]	@ (8003dd4 <_printf_i+0x238>)
 8003d0a:	2778      	movs	r7, #120	@ 0x78
 8003d0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	6831      	ldr	r1, [r6, #0]
 8003d14:	061f      	lsls	r7, r3, #24
 8003d16:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d1a:	d402      	bmi.n	8003d22 <_printf_i+0x186>
 8003d1c:	065f      	lsls	r7, r3, #25
 8003d1e:	bf48      	it	mi
 8003d20:	b2ad      	uxthmi	r5, r5
 8003d22:	6031      	str	r1, [r6, #0]
 8003d24:	07d9      	lsls	r1, r3, #31
 8003d26:	bf44      	itt	mi
 8003d28:	f043 0320 	orrmi.w	r3, r3, #32
 8003d2c:	6023      	strmi	r3, [r4, #0]
 8003d2e:	b11d      	cbz	r5, 8003d38 <_printf_i+0x19c>
 8003d30:	2310      	movs	r3, #16
 8003d32:	e7ad      	b.n	8003c90 <_printf_i+0xf4>
 8003d34:	4826      	ldr	r0, [pc, #152]	@ (8003dd0 <_printf_i+0x234>)
 8003d36:	e7e9      	b.n	8003d0c <_printf_i+0x170>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	f023 0320 	bic.w	r3, r3, #32
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	e7f6      	b.n	8003d30 <_printf_i+0x194>
 8003d42:	4616      	mov	r6, r2
 8003d44:	e7bd      	b.n	8003cc2 <_printf_i+0x126>
 8003d46:	6833      	ldr	r3, [r6, #0]
 8003d48:	6825      	ldr	r5, [r4, #0]
 8003d4a:	6961      	ldr	r1, [r4, #20]
 8003d4c:	1d18      	adds	r0, r3, #4
 8003d4e:	6030      	str	r0, [r6, #0]
 8003d50:	062e      	lsls	r6, r5, #24
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	d501      	bpl.n	8003d5a <_printf_i+0x1be>
 8003d56:	6019      	str	r1, [r3, #0]
 8003d58:	e002      	b.n	8003d60 <_printf_i+0x1c4>
 8003d5a:	0668      	lsls	r0, r5, #25
 8003d5c:	d5fb      	bpl.n	8003d56 <_printf_i+0x1ba>
 8003d5e:	8019      	strh	r1, [r3, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	4616      	mov	r6, r2
 8003d66:	e7bc      	b.n	8003ce2 <_printf_i+0x146>
 8003d68:	6833      	ldr	r3, [r6, #0]
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	6032      	str	r2, [r6, #0]
 8003d6e:	681e      	ldr	r6, [r3, #0]
 8003d70:	6862      	ldr	r2, [r4, #4]
 8003d72:	2100      	movs	r1, #0
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7fc fa2b 	bl	80001d0 <memchr>
 8003d7a:	b108      	cbz	r0, 8003d80 <_printf_i+0x1e4>
 8003d7c:	1b80      	subs	r0, r0, r6
 8003d7e:	6060      	str	r0, [r4, #4]
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	6123      	str	r3, [r4, #16]
 8003d84:	2300      	movs	r3, #0
 8003d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d8a:	e7aa      	b.n	8003ce2 <_printf_i+0x146>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4649      	mov	r1, r9
 8003d92:	4640      	mov	r0, r8
 8003d94:	47d0      	blx	sl
 8003d96:	3001      	adds	r0, #1
 8003d98:	d0ad      	beq.n	8003cf6 <_printf_i+0x15a>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	079b      	lsls	r3, r3, #30
 8003d9e:	d413      	bmi.n	8003dc8 <_printf_i+0x22c>
 8003da0:	68e0      	ldr	r0, [r4, #12]
 8003da2:	9b03      	ldr	r3, [sp, #12]
 8003da4:	4298      	cmp	r0, r3
 8003da6:	bfb8      	it	lt
 8003da8:	4618      	movlt	r0, r3
 8003daa:	e7a6      	b.n	8003cfa <_printf_i+0x15e>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4632      	mov	r2, r6
 8003db0:	4649      	mov	r1, r9
 8003db2:	4640      	mov	r0, r8
 8003db4:	47d0      	blx	sl
 8003db6:	3001      	adds	r0, #1
 8003db8:	d09d      	beq.n	8003cf6 <_printf_i+0x15a>
 8003dba:	3501      	adds	r5, #1
 8003dbc:	68e3      	ldr	r3, [r4, #12]
 8003dbe:	9903      	ldr	r1, [sp, #12]
 8003dc0:	1a5b      	subs	r3, r3, r1
 8003dc2:	42ab      	cmp	r3, r5
 8003dc4:	dcf2      	bgt.n	8003dac <_printf_i+0x210>
 8003dc6:	e7eb      	b.n	8003da0 <_printf_i+0x204>
 8003dc8:	2500      	movs	r5, #0
 8003dca:	f104 0619 	add.w	r6, r4, #25
 8003dce:	e7f5      	b.n	8003dbc <_printf_i+0x220>
 8003dd0:	0800750d 	.word	0x0800750d
 8003dd4:	0800751e 	.word	0x0800751e

08003dd8 <__sflush_r>:
 8003dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	0716      	lsls	r6, r2, #28
 8003de2:	4605      	mov	r5, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	d454      	bmi.n	8003e92 <__sflush_r+0xba>
 8003de8:	684b      	ldr	r3, [r1, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	dc02      	bgt.n	8003df4 <__sflush_r+0x1c>
 8003dee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	dd48      	ble.n	8003e86 <__sflush_r+0xae>
 8003df4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	d045      	beq.n	8003e86 <__sflush_r+0xae>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e00:	682f      	ldr	r7, [r5, #0]
 8003e02:	6a21      	ldr	r1, [r4, #32]
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	d030      	beq.n	8003e6a <__sflush_r+0x92>
 8003e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	0759      	lsls	r1, r3, #29
 8003e0e:	d505      	bpl.n	8003e1c <__sflush_r+0x44>
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e16:	b10b      	cbz	r3, 8003e1c <__sflush_r+0x44>
 8003e18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e1a:	1ad2      	subs	r2, r2, r3
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e20:	6a21      	ldr	r1, [r4, #32]
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b0      	blx	r6
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	d106      	bne.n	8003e3a <__sflush_r+0x62>
 8003e2c:	6829      	ldr	r1, [r5, #0]
 8003e2e:	291d      	cmp	r1, #29
 8003e30:	d82b      	bhi.n	8003e8a <__sflush_r+0xb2>
 8003e32:	4a2a      	ldr	r2, [pc, #168]	@ (8003edc <__sflush_r+0x104>)
 8003e34:	40ca      	lsrs	r2, r1
 8003e36:	07d6      	lsls	r6, r2, #31
 8003e38:	d527      	bpl.n	8003e8a <__sflush_r+0xb2>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	6062      	str	r2, [r4, #4]
 8003e3e:	04d9      	lsls	r1, r3, #19
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	d504      	bpl.n	8003e50 <__sflush_r+0x78>
 8003e46:	1c42      	adds	r2, r0, #1
 8003e48:	d101      	bne.n	8003e4e <__sflush_r+0x76>
 8003e4a:	682b      	ldr	r3, [r5, #0]
 8003e4c:	b903      	cbnz	r3, 8003e50 <__sflush_r+0x78>
 8003e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e52:	602f      	str	r7, [r5, #0]
 8003e54:	b1b9      	cbz	r1, 8003e86 <__sflush_r+0xae>
 8003e56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	d002      	beq.n	8003e64 <__sflush_r+0x8c>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f001 f9c6 	bl	80051f0 <_free_r>
 8003e64:	2300      	movs	r3, #0
 8003e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e68:	e00d      	b.n	8003e86 <__sflush_r+0xae>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b0      	blx	r6
 8003e70:	4602      	mov	r2, r0
 8003e72:	1c50      	adds	r0, r2, #1
 8003e74:	d1c9      	bne.n	8003e0a <__sflush_r+0x32>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0c6      	beq.n	8003e0a <__sflush_r+0x32>
 8003e7c:	2b1d      	cmp	r3, #29
 8003e7e:	d001      	beq.n	8003e84 <__sflush_r+0xac>
 8003e80:	2b16      	cmp	r3, #22
 8003e82:	d11e      	bne.n	8003ec2 <__sflush_r+0xea>
 8003e84:	602f      	str	r7, [r5, #0]
 8003e86:	2000      	movs	r0, #0
 8003e88:	e022      	b.n	8003ed0 <__sflush_r+0xf8>
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	e01b      	b.n	8003eca <__sflush_r+0xf2>
 8003e92:	690f      	ldr	r7, [r1, #16]
 8003e94:	2f00      	cmp	r7, #0
 8003e96:	d0f6      	beq.n	8003e86 <__sflush_r+0xae>
 8003e98:	0793      	lsls	r3, r2, #30
 8003e9a:	680e      	ldr	r6, [r1, #0]
 8003e9c:	bf08      	it	eq
 8003e9e:	694b      	ldreq	r3, [r1, #20]
 8003ea0:	600f      	str	r7, [r1, #0]
 8003ea2:	bf18      	it	ne
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	eba6 0807 	sub.w	r8, r6, r7
 8003eaa:	608b      	str	r3, [r1, #8]
 8003eac:	f1b8 0f00 	cmp.w	r8, #0
 8003eb0:	dde9      	ble.n	8003e86 <__sflush_r+0xae>
 8003eb2:	6a21      	ldr	r1, [r4, #32]
 8003eb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003eb6:	4643      	mov	r3, r8
 8003eb8:	463a      	mov	r2, r7
 8003eba:	4628      	mov	r0, r5
 8003ebc:	47b0      	blx	r6
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	dc08      	bgt.n	8003ed4 <__sflush_r+0xfc>
 8003ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	4407      	add	r7, r0
 8003ed6:	eba8 0800 	sub.w	r8, r8, r0
 8003eda:	e7e7      	b.n	8003eac <__sflush_r+0xd4>
 8003edc:	20400001 	.word	0x20400001

08003ee0 <_fflush_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	690b      	ldr	r3, [r1, #16]
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b913      	cbnz	r3, 8003ef0 <_fflush_r+0x10>
 8003eea:	2500      	movs	r5, #0
 8003eec:	4628      	mov	r0, r5
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	b118      	cbz	r0, 8003efa <_fflush_r+0x1a>
 8003ef2:	6a03      	ldr	r3, [r0, #32]
 8003ef4:	b90b      	cbnz	r3, 8003efa <_fflush_r+0x1a>
 8003ef6:	f000 f8a7 	bl	8004048 <__sinit>
 8003efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f3      	beq.n	8003eea <_fflush_r+0xa>
 8003f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f04:	07d0      	lsls	r0, r2, #31
 8003f06:	d404      	bmi.n	8003f12 <_fflush_r+0x32>
 8003f08:	0599      	lsls	r1, r3, #22
 8003f0a:	d402      	bmi.n	8003f12 <_fflush_r+0x32>
 8003f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f0e:	f000 fb04 	bl	800451a <__retarget_lock_acquire_recursive>
 8003f12:	4628      	mov	r0, r5
 8003f14:	4621      	mov	r1, r4
 8003f16:	f7ff ff5f 	bl	8003dd8 <__sflush_r>
 8003f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f1c:	07da      	lsls	r2, r3, #31
 8003f1e:	4605      	mov	r5, r0
 8003f20:	d4e4      	bmi.n	8003eec <_fflush_r+0xc>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d4e1      	bmi.n	8003eec <_fflush_r+0xc>
 8003f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f2a:	f000 faf7 	bl	800451c <__retarget_lock_release_recursive>
 8003f2e:	e7dd      	b.n	8003eec <_fflush_r+0xc>

08003f30 <std>:
 8003f30:	2300      	movs	r3, #0
 8003f32:	b510      	push	{r4, lr}
 8003f34:	4604      	mov	r4, r0
 8003f36:	e9c0 3300 	strd	r3, r3, [r0]
 8003f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f3e:	6083      	str	r3, [r0, #8]
 8003f40:	8181      	strh	r1, [r0, #12]
 8003f42:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f44:	81c2      	strh	r2, [r0, #14]
 8003f46:	6183      	str	r3, [r0, #24]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	305c      	adds	r0, #92	@ 0x5c
 8003f4e:	f000 fa79 	bl	8004444 <memset>
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <std+0x58>)
 8003f54:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <std+0x5c>)
 8003f58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <std+0x60>)
 8003f5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <std+0x64>)
 8003f60:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <std+0x68>)
 8003f64:	6224      	str	r4, [r4, #32]
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d006      	beq.n	8003f78 <std+0x48>
 8003f6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f6e:	4294      	cmp	r4, r2
 8003f70:	d002      	beq.n	8003f78 <std+0x48>
 8003f72:	33d0      	adds	r3, #208	@ 0xd0
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d105      	bne.n	8003f84 <std+0x54>
 8003f78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f80:	f000 baca 	b.w	8004518 <__retarget_lock_init_recursive>
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	08004295 	.word	0x08004295
 8003f8c:	080042b7 	.word	0x080042b7
 8003f90:	080042ef 	.word	0x080042ef
 8003f94:	08004313 	.word	0x08004313
 8003f98:	200006f0 	.word	0x200006f0

08003f9c <stdio_exit_handler>:
 8003f9c:	4a02      	ldr	r2, [pc, #8]	@ (8003fa8 <stdio_exit_handler+0xc>)
 8003f9e:	4903      	ldr	r1, [pc, #12]	@ (8003fac <stdio_exit_handler+0x10>)
 8003fa0:	4803      	ldr	r0, [pc, #12]	@ (8003fb0 <stdio_exit_handler+0x14>)
 8003fa2:	f000 b869 	b.w	8004078 <_fwalk_sglue>
 8003fa6:	bf00      	nop
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	08003ee1 	.word	0x08003ee1
 8003fb0:	20000014 	.word	0x20000014

08003fb4 <cleanup_stdio>:
 8003fb4:	6841      	ldr	r1, [r0, #4]
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <cleanup_stdio+0x34>)
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	d001      	beq.n	8003fc4 <cleanup_stdio+0x10>
 8003fc0:	f7ff ff8e 	bl	8003ee0 <_fflush_r>
 8003fc4:	68a1      	ldr	r1, [r4, #8]
 8003fc6:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <cleanup_stdio+0x38>)
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d002      	beq.n	8003fd2 <cleanup_stdio+0x1e>
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff ff87 	bl	8003ee0 <_fflush_r>
 8003fd2:	68e1      	ldr	r1, [r4, #12]
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <cleanup_stdio+0x3c>)
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	d004      	beq.n	8003fe4 <cleanup_stdio+0x30>
 8003fda:	4620      	mov	r0, r4
 8003fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe0:	f7ff bf7e 	b.w	8003ee0 <_fflush_r>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200006f0 	.word	0x200006f0
 8003fec:	20000758 	.word	0x20000758
 8003ff0:	200007c0 	.word	0x200007c0

08003ff4 <global_stdio_init.part.0>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <global_stdio_init.part.0+0x30>)
 8003ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8004028 <global_stdio_init.part.0+0x34>)
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800402c <global_stdio_init.part.0+0x38>)
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4620      	mov	r0, r4
 8004000:	2200      	movs	r2, #0
 8004002:	2104      	movs	r1, #4
 8004004:	f7ff ff94 	bl	8003f30 <std>
 8004008:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800400c:	2201      	movs	r2, #1
 800400e:	2109      	movs	r1, #9
 8004010:	f7ff ff8e 	bl	8003f30 <std>
 8004014:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004018:	2202      	movs	r2, #2
 800401a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800401e:	2112      	movs	r1, #18
 8004020:	f7ff bf86 	b.w	8003f30 <std>
 8004024:	20000828 	.word	0x20000828
 8004028:	200006f0 	.word	0x200006f0
 800402c:	08003f9d 	.word	0x08003f9d

08004030 <__sfp_lock_acquire>:
 8004030:	4801      	ldr	r0, [pc, #4]	@ (8004038 <__sfp_lock_acquire+0x8>)
 8004032:	f000 ba72 	b.w	800451a <__retarget_lock_acquire_recursive>
 8004036:	bf00      	nop
 8004038:	20000831 	.word	0x20000831

0800403c <__sfp_lock_release>:
 800403c:	4801      	ldr	r0, [pc, #4]	@ (8004044 <__sfp_lock_release+0x8>)
 800403e:	f000 ba6d 	b.w	800451c <__retarget_lock_release_recursive>
 8004042:	bf00      	nop
 8004044:	20000831 	.word	0x20000831

08004048 <__sinit>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4604      	mov	r4, r0
 800404c:	f7ff fff0 	bl	8004030 <__sfp_lock_acquire>
 8004050:	6a23      	ldr	r3, [r4, #32]
 8004052:	b11b      	cbz	r3, 800405c <__sinit+0x14>
 8004054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004058:	f7ff bff0 	b.w	800403c <__sfp_lock_release>
 800405c:	4b04      	ldr	r3, [pc, #16]	@ (8004070 <__sinit+0x28>)
 800405e:	6223      	str	r3, [r4, #32]
 8004060:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <__sinit+0x2c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f5      	bne.n	8004054 <__sinit+0xc>
 8004068:	f7ff ffc4 	bl	8003ff4 <global_stdio_init.part.0>
 800406c:	e7f2      	b.n	8004054 <__sinit+0xc>
 800406e:	bf00      	nop
 8004070:	08003fb5 	.word	0x08003fb5
 8004074:	20000828 	.word	0x20000828

08004078 <_fwalk_sglue>:
 8004078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800407c:	4607      	mov	r7, r0
 800407e:	4688      	mov	r8, r1
 8004080:	4614      	mov	r4, r2
 8004082:	2600      	movs	r6, #0
 8004084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004088:	f1b9 0901 	subs.w	r9, r9, #1
 800408c:	d505      	bpl.n	800409a <_fwalk_sglue+0x22>
 800408e:	6824      	ldr	r4, [r4, #0]
 8004090:	2c00      	cmp	r4, #0
 8004092:	d1f7      	bne.n	8004084 <_fwalk_sglue+0xc>
 8004094:	4630      	mov	r0, r6
 8004096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d907      	bls.n	80040b0 <_fwalk_sglue+0x38>
 80040a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040a4:	3301      	adds	r3, #1
 80040a6:	d003      	beq.n	80040b0 <_fwalk_sglue+0x38>
 80040a8:	4629      	mov	r1, r5
 80040aa:	4638      	mov	r0, r7
 80040ac:	47c0      	blx	r8
 80040ae:	4306      	orrs	r6, r0
 80040b0:	3568      	adds	r5, #104	@ 0x68
 80040b2:	e7e9      	b.n	8004088 <_fwalk_sglue+0x10>

080040b4 <iprintf>:
 80040b4:	b40f      	push	{r0, r1, r2, r3}
 80040b6:	b507      	push	{r0, r1, r2, lr}
 80040b8:	4906      	ldr	r1, [pc, #24]	@ (80040d4 <iprintf+0x20>)
 80040ba:	ab04      	add	r3, sp, #16
 80040bc:	6808      	ldr	r0, [r1, #0]
 80040be:	f853 2b04 	ldr.w	r2, [r3], #4
 80040c2:	6881      	ldr	r1, [r0, #8]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	f001 fe8f 	bl	8005de8 <_vfiprintf_r>
 80040ca:	b003      	add	sp, #12
 80040cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d0:	b004      	add	sp, #16
 80040d2:	4770      	bx	lr
 80040d4:	20000010 	.word	0x20000010

080040d8 <setbuf>:
 80040d8:	fab1 f281 	clz	r2, r1
 80040dc:	0952      	lsrs	r2, r2, #5
 80040de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e2:	0052      	lsls	r2, r2, #1
 80040e4:	f000 b800 	b.w	80040e8 <setvbuf>

080040e8 <setvbuf>:
 80040e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040ec:	461d      	mov	r5, r3
 80040ee:	4b57      	ldr	r3, [pc, #348]	@ (800424c <setvbuf+0x164>)
 80040f0:	681f      	ldr	r7, [r3, #0]
 80040f2:	4604      	mov	r4, r0
 80040f4:	460e      	mov	r6, r1
 80040f6:	4690      	mov	r8, r2
 80040f8:	b127      	cbz	r7, 8004104 <setvbuf+0x1c>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	b913      	cbnz	r3, 8004104 <setvbuf+0x1c>
 80040fe:	4638      	mov	r0, r7
 8004100:	f7ff ffa2 	bl	8004048 <__sinit>
 8004104:	f1b8 0f02 	cmp.w	r8, #2
 8004108:	d006      	beq.n	8004118 <setvbuf+0x30>
 800410a:	f1b8 0f01 	cmp.w	r8, #1
 800410e:	f200 809a 	bhi.w	8004246 <setvbuf+0x15e>
 8004112:	2d00      	cmp	r5, #0
 8004114:	f2c0 8097 	blt.w	8004246 <setvbuf+0x15e>
 8004118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800411a:	07d9      	lsls	r1, r3, #31
 800411c:	d405      	bmi.n	800412a <setvbuf+0x42>
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	059a      	lsls	r2, r3, #22
 8004122:	d402      	bmi.n	800412a <setvbuf+0x42>
 8004124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004126:	f000 f9f8 	bl	800451a <__retarget_lock_acquire_recursive>
 800412a:	4621      	mov	r1, r4
 800412c:	4638      	mov	r0, r7
 800412e:	f7ff fed7 	bl	8003ee0 <_fflush_r>
 8004132:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004134:	b141      	cbz	r1, 8004148 <setvbuf+0x60>
 8004136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800413a:	4299      	cmp	r1, r3
 800413c:	d002      	beq.n	8004144 <setvbuf+0x5c>
 800413e:	4638      	mov	r0, r7
 8004140:	f001 f856 	bl	80051f0 <_free_r>
 8004144:	2300      	movs	r3, #0
 8004146:	6363      	str	r3, [r4, #52]	@ 0x34
 8004148:	2300      	movs	r3, #0
 800414a:	61a3      	str	r3, [r4, #24]
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	d503      	bpl.n	800415c <setvbuf+0x74>
 8004154:	6921      	ldr	r1, [r4, #16]
 8004156:	4638      	mov	r0, r7
 8004158:	f001 f84a 	bl	80051f0 <_free_r>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	f1b8 0f02 	cmp.w	r8, #2
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	d061      	beq.n	8004232 <setvbuf+0x14a>
 800416e:	ab01      	add	r3, sp, #4
 8004170:	466a      	mov	r2, sp
 8004172:	4621      	mov	r1, r4
 8004174:	4638      	mov	r0, r7
 8004176:	f001 ff4f 	bl	8006018 <__swhatbuf_r>
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	4318      	orrs	r0, r3
 800417e:	81a0      	strh	r0, [r4, #12]
 8004180:	bb2d      	cbnz	r5, 80041ce <setvbuf+0xe6>
 8004182:	9d00      	ldr	r5, [sp, #0]
 8004184:	4628      	mov	r0, r5
 8004186:	f001 f87d 	bl	8005284 <malloc>
 800418a:	4606      	mov	r6, r0
 800418c:	2800      	cmp	r0, #0
 800418e:	d152      	bne.n	8004236 <setvbuf+0x14e>
 8004190:	f8dd 9000 	ldr.w	r9, [sp]
 8004194:	45a9      	cmp	r9, r5
 8004196:	d140      	bne.n	800421a <setvbuf+0x132>
 8004198:	f04f 35ff 	mov.w	r5, #4294967295
 800419c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a0:	f043 0202 	orr.w	r2, r3, #2
 80041a4:	81a2      	strh	r2, [r4, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	60a2      	str	r2, [r4, #8]
 80041aa:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80041ae:	6022      	str	r2, [r4, #0]
 80041b0:	6122      	str	r2, [r4, #16]
 80041b2:	2201      	movs	r2, #1
 80041b4:	6162      	str	r2, [r4, #20]
 80041b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041b8:	07d6      	lsls	r6, r2, #31
 80041ba:	d404      	bmi.n	80041c6 <setvbuf+0xde>
 80041bc:	0598      	lsls	r0, r3, #22
 80041be:	d402      	bmi.n	80041c6 <setvbuf+0xde>
 80041c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041c2:	f000 f9ab 	bl	800451c <__retarget_lock_release_recursive>
 80041c6:	4628      	mov	r0, r5
 80041c8:	b003      	add	sp, #12
 80041ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	d0d8      	beq.n	8004184 <setvbuf+0x9c>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	b913      	cbnz	r3, 80041dc <setvbuf+0xf4>
 80041d6:	4638      	mov	r0, r7
 80041d8:	f7ff ff36 	bl	8004048 <__sinit>
 80041dc:	f1b8 0f01 	cmp.w	r8, #1
 80041e0:	bf08      	it	eq
 80041e2:	89a3      	ldrheq	r3, [r4, #12]
 80041e4:	6026      	str	r6, [r4, #0]
 80041e6:	bf04      	itt	eq
 80041e8:	f043 0301 	orreq.w	r3, r3, #1
 80041ec:	81a3      	strheq	r3, [r4, #12]
 80041ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f2:	f013 0208 	ands.w	r2, r3, #8
 80041f6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80041fa:	d01e      	beq.n	800423a <setvbuf+0x152>
 80041fc:	07d9      	lsls	r1, r3, #31
 80041fe:	bf41      	itttt	mi
 8004200:	2200      	movmi	r2, #0
 8004202:	426d      	negmi	r5, r5
 8004204:	60a2      	strmi	r2, [r4, #8]
 8004206:	61a5      	strmi	r5, [r4, #24]
 8004208:	bf58      	it	pl
 800420a:	60a5      	strpl	r5, [r4, #8]
 800420c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800420e:	07d2      	lsls	r2, r2, #31
 8004210:	d401      	bmi.n	8004216 <setvbuf+0x12e>
 8004212:	059b      	lsls	r3, r3, #22
 8004214:	d513      	bpl.n	800423e <setvbuf+0x156>
 8004216:	2500      	movs	r5, #0
 8004218:	e7d5      	b.n	80041c6 <setvbuf+0xde>
 800421a:	4648      	mov	r0, r9
 800421c:	f001 f832 	bl	8005284 <malloc>
 8004220:	4606      	mov	r6, r0
 8004222:	2800      	cmp	r0, #0
 8004224:	d0b8      	beq.n	8004198 <setvbuf+0xb0>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	464d      	mov	r5, r9
 8004230:	e7cf      	b.n	80041d2 <setvbuf+0xea>
 8004232:	2500      	movs	r5, #0
 8004234:	e7b2      	b.n	800419c <setvbuf+0xb4>
 8004236:	46a9      	mov	r9, r5
 8004238:	e7f5      	b.n	8004226 <setvbuf+0x13e>
 800423a:	60a2      	str	r2, [r4, #8]
 800423c:	e7e6      	b.n	800420c <setvbuf+0x124>
 800423e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004240:	f000 f96c 	bl	800451c <__retarget_lock_release_recursive>
 8004244:	e7e7      	b.n	8004216 <setvbuf+0x12e>
 8004246:	f04f 35ff 	mov.w	r5, #4294967295
 800424a:	e7bc      	b.n	80041c6 <setvbuf+0xde>
 800424c:	20000010 	.word	0x20000010

08004250 <siprintf>:
 8004250:	b40e      	push	{r1, r2, r3}
 8004252:	b510      	push	{r4, lr}
 8004254:	b09d      	sub	sp, #116	@ 0x74
 8004256:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004258:	9002      	str	r0, [sp, #8]
 800425a:	9006      	str	r0, [sp, #24]
 800425c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004260:	480a      	ldr	r0, [pc, #40]	@ (800428c <siprintf+0x3c>)
 8004262:	9107      	str	r1, [sp, #28]
 8004264:	9104      	str	r1, [sp, #16]
 8004266:	490a      	ldr	r1, [pc, #40]	@ (8004290 <siprintf+0x40>)
 8004268:	f853 2b04 	ldr.w	r2, [r3], #4
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	2400      	movs	r4, #0
 8004270:	a902      	add	r1, sp, #8
 8004272:	6800      	ldr	r0, [r0, #0]
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004278:	f001 fc90 	bl	8005b9c <_svfiprintf_r>
 800427c:	9b02      	ldr	r3, [sp, #8]
 800427e:	701c      	strb	r4, [r3, #0]
 8004280:	b01d      	add	sp, #116	@ 0x74
 8004282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004286:	b003      	add	sp, #12
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000010 	.word	0x20000010
 8004290:	ffff0208 	.word	0xffff0208

08004294 <__sread>:
 8004294:	b510      	push	{r4, lr}
 8004296:	460c      	mov	r4, r1
 8004298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429c:	f000 f900 	bl	80044a0 <_read_r>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	bfab      	itete	ge
 80042a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042a6:	89a3      	ldrhlt	r3, [r4, #12]
 80042a8:	181b      	addge	r3, r3, r0
 80042aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042ae:	bfac      	ite	ge
 80042b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042b2:	81a3      	strhlt	r3, [r4, #12]
 80042b4:	bd10      	pop	{r4, pc}

080042b6 <__swrite>:
 80042b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ba:	461f      	mov	r7, r3
 80042bc:	898b      	ldrh	r3, [r1, #12]
 80042be:	05db      	lsls	r3, r3, #23
 80042c0:	4605      	mov	r5, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	4616      	mov	r6, r2
 80042c6:	d505      	bpl.n	80042d4 <__swrite+0x1e>
 80042c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042cc:	2302      	movs	r3, #2
 80042ce:	2200      	movs	r2, #0
 80042d0:	f000 f8d4 	bl	800447c <_lseek_r>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	4632      	mov	r2, r6
 80042e2:	463b      	mov	r3, r7
 80042e4:	4628      	mov	r0, r5
 80042e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ea:	f7fd bd9b 	b.w	8001e24 <_write_r>

080042ee <__sseek>:
 80042ee:	b510      	push	{r4, lr}
 80042f0:	460c      	mov	r4, r1
 80042f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f6:	f000 f8c1 	bl	800447c <_lseek_r>
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	bf15      	itete	ne
 8004300:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004302:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004306:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800430a:	81a3      	strheq	r3, [r4, #12]
 800430c:	bf18      	it	ne
 800430e:	81a3      	strhne	r3, [r4, #12]
 8004310:	bd10      	pop	{r4, pc}

08004312 <__sclose>:
 8004312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004316:	f000 b8a1 	b.w	800445c <_close_r>

0800431a <__swbuf_r>:
 800431a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431c:	460e      	mov	r6, r1
 800431e:	4614      	mov	r4, r2
 8004320:	4605      	mov	r5, r0
 8004322:	b118      	cbz	r0, 800432c <__swbuf_r+0x12>
 8004324:	6a03      	ldr	r3, [r0, #32]
 8004326:	b90b      	cbnz	r3, 800432c <__swbuf_r+0x12>
 8004328:	f7ff fe8e 	bl	8004048 <__sinit>
 800432c:	69a3      	ldr	r3, [r4, #24]
 800432e:	60a3      	str	r3, [r4, #8]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	071a      	lsls	r2, r3, #28
 8004334:	d501      	bpl.n	800433a <__swbuf_r+0x20>
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	b943      	cbnz	r3, 800434c <__swbuf_r+0x32>
 800433a:	4621      	mov	r1, r4
 800433c:	4628      	mov	r0, r5
 800433e:	f000 f82b 	bl	8004398 <__swsetup_r>
 8004342:	b118      	cbz	r0, 800434c <__swbuf_r+0x32>
 8004344:	f04f 37ff 	mov.w	r7, #4294967295
 8004348:	4638      	mov	r0, r7
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	6922      	ldr	r2, [r4, #16]
 8004350:	1a98      	subs	r0, r3, r2
 8004352:	6963      	ldr	r3, [r4, #20]
 8004354:	b2f6      	uxtb	r6, r6
 8004356:	4283      	cmp	r3, r0
 8004358:	4637      	mov	r7, r6
 800435a:	dc05      	bgt.n	8004368 <__swbuf_r+0x4e>
 800435c:	4621      	mov	r1, r4
 800435e:	4628      	mov	r0, r5
 8004360:	f7ff fdbe 	bl	8003ee0 <_fflush_r>
 8004364:	2800      	cmp	r0, #0
 8004366:	d1ed      	bne.n	8004344 <__swbuf_r+0x2a>
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	3b01      	subs	r3, #1
 800436c:	60a3      	str	r3, [r4, #8]
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	6022      	str	r2, [r4, #0]
 8004374:	701e      	strb	r6, [r3, #0]
 8004376:	6962      	ldr	r2, [r4, #20]
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	d004      	beq.n	8004388 <__swbuf_r+0x6e>
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	07db      	lsls	r3, r3, #31
 8004382:	d5e1      	bpl.n	8004348 <__swbuf_r+0x2e>
 8004384:	2e0a      	cmp	r6, #10
 8004386:	d1df      	bne.n	8004348 <__swbuf_r+0x2e>
 8004388:	4621      	mov	r1, r4
 800438a:	4628      	mov	r0, r5
 800438c:	f7ff fda8 	bl	8003ee0 <_fflush_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	d0d9      	beq.n	8004348 <__swbuf_r+0x2e>
 8004394:	e7d6      	b.n	8004344 <__swbuf_r+0x2a>
	...

08004398 <__swsetup_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <__swsetup_r+0xa8>)
 800439c:	4605      	mov	r5, r0
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	460c      	mov	r4, r1
 80043a2:	b118      	cbz	r0, 80043ac <__swsetup_r+0x14>
 80043a4:	6a03      	ldr	r3, [r0, #32]
 80043a6:	b90b      	cbnz	r3, 80043ac <__swsetup_r+0x14>
 80043a8:	f7ff fe4e 	bl	8004048 <__sinit>
 80043ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b0:	0719      	lsls	r1, r3, #28
 80043b2:	d422      	bmi.n	80043fa <__swsetup_r+0x62>
 80043b4:	06da      	lsls	r2, r3, #27
 80043b6:	d407      	bmi.n	80043c8 <__swsetup_r+0x30>
 80043b8:	2209      	movs	r2, #9
 80043ba:	602a      	str	r2, [r5, #0]
 80043bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
 80043c6:	e033      	b.n	8004430 <__swsetup_r+0x98>
 80043c8:	0758      	lsls	r0, r3, #29
 80043ca:	d512      	bpl.n	80043f2 <__swsetup_r+0x5a>
 80043cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043ce:	b141      	cbz	r1, 80043e2 <__swsetup_r+0x4a>
 80043d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043d4:	4299      	cmp	r1, r3
 80043d6:	d002      	beq.n	80043de <__swsetup_r+0x46>
 80043d8:	4628      	mov	r0, r5
 80043da:	f000 ff09 	bl	80051f0 <_free_r>
 80043de:	2300      	movs	r3, #0
 80043e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	2300      	movs	r3, #0
 80043ec:	6063      	str	r3, [r4, #4]
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	b94b      	cbnz	r3, 8004412 <__swsetup_r+0x7a>
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004408:	d003      	beq.n	8004412 <__swsetup_r+0x7a>
 800440a:	4621      	mov	r1, r4
 800440c:	4628      	mov	r0, r5
 800440e:	f001 fe29 	bl	8006064 <__smakebuf_r>
 8004412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004416:	f013 0201 	ands.w	r2, r3, #1
 800441a:	d00a      	beq.n	8004432 <__swsetup_r+0x9a>
 800441c:	2200      	movs	r2, #0
 800441e:	60a2      	str	r2, [r4, #8]
 8004420:	6962      	ldr	r2, [r4, #20]
 8004422:	4252      	negs	r2, r2
 8004424:	61a2      	str	r2, [r4, #24]
 8004426:	6922      	ldr	r2, [r4, #16]
 8004428:	b942      	cbnz	r2, 800443c <__swsetup_r+0xa4>
 800442a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800442e:	d1c5      	bne.n	80043bc <__swsetup_r+0x24>
 8004430:	bd38      	pop	{r3, r4, r5, pc}
 8004432:	0799      	lsls	r1, r3, #30
 8004434:	bf58      	it	pl
 8004436:	6962      	ldrpl	r2, [r4, #20]
 8004438:	60a2      	str	r2, [r4, #8]
 800443a:	e7f4      	b.n	8004426 <__swsetup_r+0x8e>
 800443c:	2000      	movs	r0, #0
 800443e:	e7f7      	b.n	8004430 <__swsetup_r+0x98>
 8004440:	20000010 	.word	0x20000010

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <_localeconv_r>:
 8004454:	4800      	ldr	r0, [pc, #0]	@ (8004458 <_localeconv_r+0x4>)
 8004456:	4770      	bx	lr
 8004458:	20000150 	.word	0x20000150

0800445c <_close_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	@ (8004478 <_close_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fe fea6 	bl	80031b8 <_close>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_close_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_close_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	2000082c 	.word	0x2000082c

0800447c <_lseek_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4d07      	ldr	r5, [pc, #28]	@ (800449c <_lseek_r+0x20>)
 8004480:	4604      	mov	r4, r0
 8004482:	4608      	mov	r0, r1
 8004484:	4611      	mov	r1, r2
 8004486:	2200      	movs	r2, #0
 8004488:	602a      	str	r2, [r5, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f7fe febb 	bl	8003206 <_lseek>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_lseek_r+0x1e>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_lseek_r+0x1e>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	2000082c 	.word	0x2000082c

080044a0 <_read_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d07      	ldr	r5, [pc, #28]	@ (80044c0 <_read_r+0x20>)
 80044a4:	4604      	mov	r4, r0
 80044a6:	4608      	mov	r0, r1
 80044a8:	4611      	mov	r1, r2
 80044aa:	2200      	movs	r2, #0
 80044ac:	602a      	str	r2, [r5, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f7fe fe65 	bl	800317e <_read>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_read_r+0x1e>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_read_r+0x1e>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	2000082c 	.word	0x2000082c

080044c4 <__errno>:
 80044c4:	4b01      	ldr	r3, [pc, #4]	@ (80044cc <__errno+0x8>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000010 	.word	0x20000010

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004508 <__libc_init_array+0x38>)
 80044d4:	4c0d      	ldr	r4, [pc, #52]	@ (800450c <__libc_init_array+0x3c>)
 80044d6:	1b64      	subs	r4, r4, r5
 80044d8:	10a4      	asrs	r4, r4, #2
 80044da:	2600      	movs	r6, #0
 80044dc:	42a6      	cmp	r6, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004510 <__libc_init_array+0x40>)
 80044e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004514 <__libc_init_array+0x44>)
 80044e4:	f002 fec6 	bl	8007274 <_init>
 80044e8:	1b64      	subs	r4, r4, r5
 80044ea:	10a4      	asrs	r4, r4, #2
 80044ec:	2600      	movs	r6, #0
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f8:	4798      	blx	r3
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004502:	4798      	blx	r3
 8004504:	3601      	adds	r6, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	080078b8 	.word	0x080078b8
 800450c:	080078b8 	.word	0x080078b8
 8004510:	080078b8 	.word	0x080078b8
 8004514:	080078bc 	.word	0x080078bc

08004518 <__retarget_lock_init_recursive>:
 8004518:	4770      	bx	lr

0800451a <__retarget_lock_acquire_recursive>:
 800451a:	4770      	bx	lr

0800451c <__retarget_lock_release_recursive>:
 800451c:	4770      	bx	lr

0800451e <memcpy>:
 800451e:	440a      	add	r2, r1
 8004520:	4291      	cmp	r1, r2
 8004522:	f100 33ff 	add.w	r3, r0, #4294967295
 8004526:	d100      	bne.n	800452a <memcpy+0xc>
 8004528:	4770      	bx	lr
 800452a:	b510      	push	{r4, lr}
 800452c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004534:	4291      	cmp	r1, r2
 8004536:	d1f9      	bne.n	800452c <memcpy+0xe>
 8004538:	bd10      	pop	{r4, pc}

0800453a <quorem>:
 800453a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453e:	6903      	ldr	r3, [r0, #16]
 8004540:	690c      	ldr	r4, [r1, #16]
 8004542:	42a3      	cmp	r3, r4
 8004544:	4607      	mov	r7, r0
 8004546:	db7e      	blt.n	8004646 <quorem+0x10c>
 8004548:	3c01      	subs	r4, #1
 800454a:	f101 0814 	add.w	r8, r1, #20
 800454e:	00a3      	lsls	r3, r4, #2
 8004550:	f100 0514 	add.w	r5, r0, #20
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004564:	3301      	adds	r3, #1
 8004566:	429a      	cmp	r2, r3
 8004568:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800456c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004570:	d32e      	bcc.n	80045d0 <quorem+0x96>
 8004572:	f04f 0a00 	mov.w	sl, #0
 8004576:	46c4      	mov	ip, r8
 8004578:	46ae      	mov	lr, r5
 800457a:	46d3      	mov	fp, sl
 800457c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004580:	b298      	uxth	r0, r3
 8004582:	fb06 a000 	mla	r0, r6, r0, sl
 8004586:	0c02      	lsrs	r2, r0, #16
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	fb06 2303 	mla	r3, r6, r3, r2
 800458e:	f8de 2000 	ldr.w	r2, [lr]
 8004592:	b280      	uxth	r0, r0
 8004594:	b292      	uxth	r2, r2
 8004596:	1a12      	subs	r2, r2, r0
 8004598:	445a      	add	r2, fp
 800459a:	f8de 0000 	ldr.w	r0, [lr]
 800459e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80045a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80045ac:	b292      	uxth	r2, r2
 80045ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80045b2:	45e1      	cmp	r9, ip
 80045b4:	f84e 2b04 	str.w	r2, [lr], #4
 80045b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80045bc:	d2de      	bcs.n	800457c <quorem+0x42>
 80045be:	9b00      	ldr	r3, [sp, #0]
 80045c0:	58eb      	ldr	r3, [r5, r3]
 80045c2:	b92b      	cbnz	r3, 80045d0 <quorem+0x96>
 80045c4:	9b01      	ldr	r3, [sp, #4]
 80045c6:	3b04      	subs	r3, #4
 80045c8:	429d      	cmp	r5, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	d32f      	bcc.n	800462e <quorem+0xf4>
 80045ce:	613c      	str	r4, [r7, #16]
 80045d0:	4638      	mov	r0, r7
 80045d2:	f001 f97f 	bl	80058d4 <__mcmp>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	db25      	blt.n	8004626 <quorem+0xec>
 80045da:	4629      	mov	r1, r5
 80045dc:	2000      	movs	r0, #0
 80045de:	f858 2b04 	ldr.w	r2, [r8], #4
 80045e2:	f8d1 c000 	ldr.w	ip, [r1]
 80045e6:	fa1f fe82 	uxth.w	lr, r2
 80045ea:	fa1f f38c 	uxth.w	r3, ip
 80045ee:	eba3 030e 	sub.w	r3, r3, lr
 80045f2:	4403      	add	r3, r0
 80045f4:	0c12      	lsrs	r2, r2, #16
 80045f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045fe:	b29b      	uxth	r3, r3
 8004600:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004604:	45c1      	cmp	r9, r8
 8004606:	f841 3b04 	str.w	r3, [r1], #4
 800460a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800460e:	d2e6      	bcs.n	80045de <quorem+0xa4>
 8004610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004614:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004618:	b922      	cbnz	r2, 8004624 <quorem+0xea>
 800461a:	3b04      	subs	r3, #4
 800461c:	429d      	cmp	r5, r3
 800461e:	461a      	mov	r2, r3
 8004620:	d30b      	bcc.n	800463a <quorem+0x100>
 8004622:	613c      	str	r4, [r7, #16]
 8004624:	3601      	adds	r6, #1
 8004626:	4630      	mov	r0, r6
 8004628:	b003      	add	sp, #12
 800462a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	3b04      	subs	r3, #4
 8004632:	2a00      	cmp	r2, #0
 8004634:	d1cb      	bne.n	80045ce <quorem+0x94>
 8004636:	3c01      	subs	r4, #1
 8004638:	e7c6      	b.n	80045c8 <quorem+0x8e>
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	3b04      	subs	r3, #4
 800463e:	2a00      	cmp	r2, #0
 8004640:	d1ef      	bne.n	8004622 <quorem+0xe8>
 8004642:	3c01      	subs	r4, #1
 8004644:	e7ea      	b.n	800461c <quorem+0xe2>
 8004646:	2000      	movs	r0, #0
 8004648:	e7ee      	b.n	8004628 <quorem+0xee>
 800464a:	0000      	movs	r0, r0
 800464c:	0000      	movs	r0, r0
	...

08004650 <_dtoa_r>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	69c7      	ldr	r7, [r0, #28]
 8004656:	b097      	sub	sp, #92	@ 0x5c
 8004658:	ed8d 0b04 	vstr	d0, [sp, #16]
 800465c:	ec55 4b10 	vmov	r4, r5, d0
 8004660:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004662:	9107      	str	r1, [sp, #28]
 8004664:	4681      	mov	r9, r0
 8004666:	920c      	str	r2, [sp, #48]	@ 0x30
 8004668:	9311      	str	r3, [sp, #68]	@ 0x44
 800466a:	b97f      	cbnz	r7, 800468c <_dtoa_r+0x3c>
 800466c:	2010      	movs	r0, #16
 800466e:	f000 fe09 	bl	8005284 <malloc>
 8004672:	4602      	mov	r2, r0
 8004674:	f8c9 001c 	str.w	r0, [r9, #28]
 8004678:	b920      	cbnz	r0, 8004684 <_dtoa_r+0x34>
 800467a:	4ba9      	ldr	r3, [pc, #676]	@ (8004920 <_dtoa_r+0x2d0>)
 800467c:	21ef      	movs	r1, #239	@ 0xef
 800467e:	48a9      	ldr	r0, [pc, #676]	@ (8004924 <_dtoa_r+0x2d4>)
 8004680:	f001 fd78 	bl	8006174 <__assert_func>
 8004684:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004688:	6007      	str	r7, [r0, #0]
 800468a:	60c7      	str	r7, [r0, #12]
 800468c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	b159      	cbz	r1, 80046ac <_dtoa_r+0x5c>
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	604a      	str	r2, [r1, #4]
 8004698:	2301      	movs	r3, #1
 800469a:	4093      	lsls	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
 800469e:	4648      	mov	r0, r9
 80046a0:	f000 fee6 	bl	8005470 <_Bfree>
 80046a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	1e2b      	subs	r3, r5, #0
 80046ae:	bfb9      	ittee	lt
 80046b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80046b4:	9305      	strlt	r3, [sp, #20]
 80046b6:	2300      	movge	r3, #0
 80046b8:	6033      	strge	r3, [r6, #0]
 80046ba:	9f05      	ldr	r7, [sp, #20]
 80046bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004928 <_dtoa_r+0x2d8>)
 80046be:	bfbc      	itt	lt
 80046c0:	2201      	movlt	r2, #1
 80046c2:	6032      	strlt	r2, [r6, #0]
 80046c4:	43bb      	bics	r3, r7
 80046c6:	d112      	bne.n	80046ee <_dtoa_r+0x9e>
 80046c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80046ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80046d4:	4323      	orrs	r3, r4
 80046d6:	f000 855a 	beq.w	800518e <_dtoa_r+0xb3e>
 80046da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800493c <_dtoa_r+0x2ec>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 855c 	beq.w	800519e <_dtoa_r+0xb4e>
 80046e6:	f10a 0303 	add.w	r3, sl, #3
 80046ea:	f000 bd56 	b.w	800519a <_dtoa_r+0xb4a>
 80046ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80046f2:	2200      	movs	r2, #0
 80046f4:	ec51 0b17 	vmov	r0, r1, d7
 80046f8:	2300      	movs	r3, #0
 80046fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80046fe:	f7fc f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004702:	4680      	mov	r8, r0
 8004704:	b158      	cbz	r0, 800471e <_dtoa_r+0xce>
 8004706:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004708:	2301      	movs	r3, #1
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800470e:	b113      	cbz	r3, 8004716 <_dtoa_r+0xc6>
 8004710:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004712:	4b86      	ldr	r3, [pc, #536]	@ (800492c <_dtoa_r+0x2dc>)
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004940 <_dtoa_r+0x2f0>
 800471a:	f000 bd40 	b.w	800519e <_dtoa_r+0xb4e>
 800471e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004722:	aa14      	add	r2, sp, #80	@ 0x50
 8004724:	a915      	add	r1, sp, #84	@ 0x54
 8004726:	4648      	mov	r0, r9
 8004728:	f001 f984 	bl	8005a34 <__d2b>
 800472c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004730:	9002      	str	r0, [sp, #8]
 8004732:	2e00      	cmp	r6, #0
 8004734:	d078      	beq.n	8004828 <_dtoa_r+0x1d8>
 8004736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004738:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800473c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004744:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004748:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800474c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004750:	4619      	mov	r1, r3
 8004752:	2200      	movs	r2, #0
 8004754:	4b76      	ldr	r3, [pc, #472]	@ (8004930 <_dtoa_r+0x2e0>)
 8004756:	f7fb fd97 	bl	8000288 <__aeabi_dsub>
 800475a:	a36b      	add	r3, pc, #428	@ (adr r3, 8004908 <_dtoa_r+0x2b8>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb ff4a 	bl	80005f8 <__aeabi_dmul>
 8004764:	a36a      	add	r3, pc, #424	@ (adr r3, 8004910 <_dtoa_r+0x2c0>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f7fb fd8f 	bl	800028c <__adddf3>
 800476e:	4604      	mov	r4, r0
 8004770:	4630      	mov	r0, r6
 8004772:	460d      	mov	r5, r1
 8004774:	f7fb fed6 	bl	8000524 <__aeabi_i2d>
 8004778:	a367      	add	r3, pc, #412	@ (adr r3, 8004918 <_dtoa_r+0x2c8>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb ff3b 	bl	80005f8 <__aeabi_dmul>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fb fd7f 	bl	800028c <__adddf3>
 800478e:	4604      	mov	r4, r0
 8004790:	460d      	mov	r5, r1
 8004792:	f7fc f9e1 	bl	8000b58 <__aeabi_d2iz>
 8004796:	2200      	movs	r2, #0
 8004798:	4607      	mov	r7, r0
 800479a:	2300      	movs	r3, #0
 800479c:	4620      	mov	r0, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	f7fc f99c 	bl	8000adc <__aeabi_dcmplt>
 80047a4:	b140      	cbz	r0, 80047b8 <_dtoa_r+0x168>
 80047a6:	4638      	mov	r0, r7
 80047a8:	f7fb febc 	bl	8000524 <__aeabi_i2d>
 80047ac:	4622      	mov	r2, r4
 80047ae:	462b      	mov	r3, r5
 80047b0:	f7fc f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80047b4:	b900      	cbnz	r0, 80047b8 <_dtoa_r+0x168>
 80047b6:	3f01      	subs	r7, #1
 80047b8:	2f16      	cmp	r7, #22
 80047ba:	d852      	bhi.n	8004862 <_dtoa_r+0x212>
 80047bc:	4b5d      	ldr	r3, [pc, #372]	@ (8004934 <_dtoa_r+0x2e4>)
 80047be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80047ca:	f7fc f987 	bl	8000adc <__aeabi_dcmplt>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d049      	beq.n	8004866 <_dtoa_r+0x216>
 80047d2:	3f01      	subs	r7, #1
 80047d4:	2300      	movs	r3, #0
 80047d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80047d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80047da:	1b9b      	subs	r3, r3, r6
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	bf45      	ittet	mi
 80047e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80047e4:	9300      	strmi	r3, [sp, #0]
 80047e6:	2300      	movpl	r3, #0
 80047e8:	2300      	movmi	r3, #0
 80047ea:	9206      	str	r2, [sp, #24]
 80047ec:	bf54      	ite	pl
 80047ee:	9300      	strpl	r3, [sp, #0]
 80047f0:	9306      	strmi	r3, [sp, #24]
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	db39      	blt.n	800486a <_dtoa_r+0x21a>
 80047f6:	9b06      	ldr	r3, [sp, #24]
 80047f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80047fa:	443b      	add	r3, r7
 80047fc:	9306      	str	r3, [sp, #24]
 80047fe:	2300      	movs	r3, #0
 8004800:	9308      	str	r3, [sp, #32]
 8004802:	9b07      	ldr	r3, [sp, #28]
 8004804:	2b09      	cmp	r3, #9
 8004806:	d863      	bhi.n	80048d0 <_dtoa_r+0x280>
 8004808:	2b05      	cmp	r3, #5
 800480a:	bfc4      	itt	gt
 800480c:	3b04      	subgt	r3, #4
 800480e:	9307      	strgt	r3, [sp, #28]
 8004810:	9b07      	ldr	r3, [sp, #28]
 8004812:	f1a3 0302 	sub.w	r3, r3, #2
 8004816:	bfcc      	ite	gt
 8004818:	2400      	movgt	r4, #0
 800481a:	2401      	movle	r4, #1
 800481c:	2b03      	cmp	r3, #3
 800481e:	d863      	bhi.n	80048e8 <_dtoa_r+0x298>
 8004820:	e8df f003 	tbb	[pc, r3]
 8004824:	2b375452 	.word	0x2b375452
 8004828:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800482c:	441e      	add	r6, r3
 800482e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004832:	2b20      	cmp	r3, #32
 8004834:	bfc1      	itttt	gt
 8004836:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800483a:	409f      	lslgt	r7, r3
 800483c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004840:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004844:	bfd6      	itet	le
 8004846:	f1c3 0320 	rsble	r3, r3, #32
 800484a:	ea47 0003 	orrgt.w	r0, r7, r3
 800484e:	fa04 f003 	lslle.w	r0, r4, r3
 8004852:	f7fb fe57 	bl	8000504 <__aeabi_ui2d>
 8004856:	2201      	movs	r2, #1
 8004858:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800485c:	3e01      	subs	r6, #1
 800485e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004860:	e776      	b.n	8004750 <_dtoa_r+0x100>
 8004862:	2301      	movs	r3, #1
 8004864:	e7b7      	b.n	80047d6 <_dtoa_r+0x186>
 8004866:	9010      	str	r0, [sp, #64]	@ 0x40
 8004868:	e7b6      	b.n	80047d8 <_dtoa_r+0x188>
 800486a:	9b00      	ldr	r3, [sp, #0]
 800486c:	1bdb      	subs	r3, r3, r7
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	427b      	negs	r3, r7
 8004872:	9308      	str	r3, [sp, #32]
 8004874:	2300      	movs	r3, #0
 8004876:	930d      	str	r3, [sp, #52]	@ 0x34
 8004878:	e7c3      	b.n	8004802 <_dtoa_r+0x1b2>
 800487a:	2301      	movs	r3, #1
 800487c:	9309      	str	r3, [sp, #36]	@ 0x24
 800487e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004880:	eb07 0b03 	add.w	fp, r7, r3
 8004884:	f10b 0301 	add.w	r3, fp, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	9303      	str	r3, [sp, #12]
 800488c:	bfb8      	it	lt
 800488e:	2301      	movlt	r3, #1
 8004890:	e006      	b.n	80048a0 <_dtoa_r+0x250>
 8004892:	2301      	movs	r3, #1
 8004894:	9309      	str	r3, [sp, #36]	@ 0x24
 8004896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004898:	2b00      	cmp	r3, #0
 800489a:	dd28      	ble.n	80048ee <_dtoa_r+0x29e>
 800489c:	469b      	mov	fp, r3
 800489e:	9303      	str	r3, [sp, #12]
 80048a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80048a4:	2100      	movs	r1, #0
 80048a6:	2204      	movs	r2, #4
 80048a8:	f102 0514 	add.w	r5, r2, #20
 80048ac:	429d      	cmp	r5, r3
 80048ae:	d926      	bls.n	80048fe <_dtoa_r+0x2ae>
 80048b0:	6041      	str	r1, [r0, #4]
 80048b2:	4648      	mov	r0, r9
 80048b4:	f000 fd9c 	bl	80053f0 <_Balloc>
 80048b8:	4682      	mov	sl, r0
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d142      	bne.n	8004944 <_dtoa_r+0x2f4>
 80048be:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <_dtoa_r+0x2e8>)
 80048c0:	4602      	mov	r2, r0
 80048c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80048c6:	e6da      	b.n	800467e <_dtoa_r+0x2e>
 80048c8:	2300      	movs	r3, #0
 80048ca:	e7e3      	b.n	8004894 <_dtoa_r+0x244>
 80048cc:	2300      	movs	r3, #0
 80048ce:	e7d5      	b.n	800487c <_dtoa_r+0x22c>
 80048d0:	2401      	movs	r4, #1
 80048d2:	2300      	movs	r3, #0
 80048d4:	9307      	str	r3, [sp, #28]
 80048d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80048d8:	f04f 3bff 	mov.w	fp, #4294967295
 80048dc:	2200      	movs	r2, #0
 80048de:	f8cd b00c 	str.w	fp, [sp, #12]
 80048e2:	2312      	movs	r3, #18
 80048e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80048e6:	e7db      	b.n	80048a0 <_dtoa_r+0x250>
 80048e8:	2301      	movs	r3, #1
 80048ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ec:	e7f4      	b.n	80048d8 <_dtoa_r+0x288>
 80048ee:	f04f 0b01 	mov.w	fp, #1
 80048f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80048f6:	465b      	mov	r3, fp
 80048f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80048fc:	e7d0      	b.n	80048a0 <_dtoa_r+0x250>
 80048fe:	3101      	adds	r1, #1
 8004900:	0052      	lsls	r2, r2, #1
 8004902:	e7d1      	b.n	80048a8 <_dtoa_r+0x258>
 8004904:	f3af 8000 	nop.w
 8004908:	636f4361 	.word	0x636f4361
 800490c:	3fd287a7 	.word	0x3fd287a7
 8004910:	8b60c8b3 	.word	0x8b60c8b3
 8004914:	3fc68a28 	.word	0x3fc68a28
 8004918:	509f79fb 	.word	0x509f79fb
 800491c:	3fd34413 	.word	0x3fd34413
 8004920:	0800753c 	.word	0x0800753c
 8004924:	08007553 	.word	0x08007553
 8004928:	7ff00000 	.word	0x7ff00000
 800492c:	0800750c 	.word	0x0800750c
 8004930:	3ff80000 	.word	0x3ff80000
 8004934:	080076a0 	.word	0x080076a0
 8004938:	080075ab 	.word	0x080075ab
 800493c:	08007538 	.word	0x08007538
 8004940:	0800750b 	.word	0x0800750b
 8004944:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004948:	6018      	str	r0, [r3, #0]
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	2b0e      	cmp	r3, #14
 800494e:	f200 80a1 	bhi.w	8004a94 <_dtoa_r+0x444>
 8004952:	2c00      	cmp	r4, #0
 8004954:	f000 809e 	beq.w	8004a94 <_dtoa_r+0x444>
 8004958:	2f00      	cmp	r7, #0
 800495a:	dd33      	ble.n	80049c4 <_dtoa_r+0x374>
 800495c:	4b9c      	ldr	r3, [pc, #624]	@ (8004bd0 <_dtoa_r+0x580>)
 800495e:	f007 020f 	and.w	r2, r7, #15
 8004962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004966:	ed93 7b00 	vldr	d7, [r3]
 800496a:	05f8      	lsls	r0, r7, #23
 800496c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004970:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004974:	d516      	bpl.n	80049a4 <_dtoa_r+0x354>
 8004976:	4b97      	ldr	r3, [pc, #604]	@ (8004bd4 <_dtoa_r+0x584>)
 8004978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800497c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004980:	f7fb ff64 	bl	800084c <__aeabi_ddiv>
 8004984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004988:	f004 040f 	and.w	r4, r4, #15
 800498c:	2603      	movs	r6, #3
 800498e:	4d91      	ldr	r5, [pc, #580]	@ (8004bd4 <_dtoa_r+0x584>)
 8004990:	b954      	cbnz	r4, 80049a8 <_dtoa_r+0x358>
 8004992:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800499a:	f7fb ff57 	bl	800084c <__aeabi_ddiv>
 800499e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049a2:	e028      	b.n	80049f6 <_dtoa_r+0x3a6>
 80049a4:	2602      	movs	r6, #2
 80049a6:	e7f2      	b.n	800498e <_dtoa_r+0x33e>
 80049a8:	07e1      	lsls	r1, r4, #31
 80049aa:	d508      	bpl.n	80049be <_dtoa_r+0x36e>
 80049ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80049b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049b4:	f7fb fe20 	bl	80005f8 <__aeabi_dmul>
 80049b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80049bc:	3601      	adds	r6, #1
 80049be:	1064      	asrs	r4, r4, #1
 80049c0:	3508      	adds	r5, #8
 80049c2:	e7e5      	b.n	8004990 <_dtoa_r+0x340>
 80049c4:	f000 80af 	beq.w	8004b26 <_dtoa_r+0x4d6>
 80049c8:	427c      	negs	r4, r7
 80049ca:	4b81      	ldr	r3, [pc, #516]	@ (8004bd0 <_dtoa_r+0x580>)
 80049cc:	4d81      	ldr	r5, [pc, #516]	@ (8004bd4 <_dtoa_r+0x584>)
 80049ce:	f004 020f 	and.w	r2, r4, #15
 80049d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049de:	f7fb fe0b 	bl	80005f8 <__aeabi_dmul>
 80049e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049e6:	1124      	asrs	r4, r4, #4
 80049e8:	2300      	movs	r3, #0
 80049ea:	2602      	movs	r6, #2
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	f040 808f 	bne.w	8004b10 <_dtoa_r+0x4c0>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1d3      	bne.n	800499e <_dtoa_r+0x34e>
 80049f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80049f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8094 	beq.w	8004b2a <_dtoa_r+0x4da>
 8004a02:	4b75      	ldr	r3, [pc, #468]	@ (8004bd8 <_dtoa_r+0x588>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	4620      	mov	r0, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f7fc f867 	bl	8000adc <__aeabi_dcmplt>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f000 808b 	beq.w	8004b2a <_dtoa_r+0x4da>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8087 	beq.w	8004b2a <_dtoa_r+0x4da>
 8004a1c:	f1bb 0f00 	cmp.w	fp, #0
 8004a20:	dd34      	ble.n	8004a8c <_dtoa_r+0x43c>
 8004a22:	4620      	mov	r0, r4
 8004a24:	4b6d      	ldr	r3, [pc, #436]	@ (8004bdc <_dtoa_r+0x58c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7fb fde5 	bl	80005f8 <__aeabi_dmul>
 8004a2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a32:	f107 38ff 	add.w	r8, r7, #4294967295
 8004a36:	3601      	adds	r6, #1
 8004a38:	465c      	mov	r4, fp
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f7fb fd72 	bl	8000524 <__aeabi_i2d>
 8004a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a44:	f7fb fdd8 	bl	80005f8 <__aeabi_dmul>
 8004a48:	4b65      	ldr	r3, [pc, #404]	@ (8004be0 <_dtoa_r+0x590>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f7fb fc1e 	bl	800028c <__adddf3>
 8004a50:	4605      	mov	r5, r0
 8004a52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	d16a      	bne.n	8004b30 <_dtoa_r+0x4e0>
 8004a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a5e:	4b61      	ldr	r3, [pc, #388]	@ (8004be4 <_dtoa_r+0x594>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	f7fb fc11 	bl	8000288 <__aeabi_dsub>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4633      	mov	r3, r6
 8004a72:	f7fc f851 	bl	8000b18 <__aeabi_dcmpgt>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f040 8298 	bne.w	8004fac <_dtoa_r+0x95c>
 8004a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a80:	462a      	mov	r2, r5
 8004a82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a86:	f7fc f829 	bl	8000adc <__aeabi_dcmplt>
 8004a8a:	bb38      	cbnz	r0, 8004adc <_dtoa_r+0x48c>
 8004a8c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004a90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f2c0 8157 	blt.w	8004d4a <_dtoa_r+0x6fa>
 8004a9c:	2f0e      	cmp	r7, #14
 8004a9e:	f300 8154 	bgt.w	8004d4a <_dtoa_r+0x6fa>
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <_dtoa_r+0x580>)
 8004aa4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004aa8:	ed93 7b00 	vldr	d7, [r3]
 8004aac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	ed8d 7b00 	vstr	d7, [sp]
 8004ab4:	f280 80e5 	bge.w	8004c82 <_dtoa_r+0x632>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f300 80e1 	bgt.w	8004c82 <_dtoa_r+0x632>
 8004ac0:	d10c      	bne.n	8004adc <_dtoa_r+0x48c>
 8004ac2:	4b48      	ldr	r3, [pc, #288]	@ (8004be4 <_dtoa_r+0x594>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	ec51 0b17 	vmov	r0, r1, d7
 8004aca:	f7fb fd95 	bl	80005f8 <__aeabi_dmul>
 8004ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad2:	f7fc f817 	bl	8000b04 <__aeabi_dcmpge>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	f000 8266 	beq.w	8004fa8 <_dtoa_r+0x958>
 8004adc:	2400      	movs	r4, #0
 8004ade:	4625      	mov	r5, r4
 8004ae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ae2:	4656      	mov	r6, sl
 8004ae4:	ea6f 0803 	mvn.w	r8, r3
 8004ae8:	2700      	movs	r7, #0
 8004aea:	4621      	mov	r1, r4
 8004aec:	4648      	mov	r0, r9
 8004aee:	f000 fcbf 	bl	8005470 <_Bfree>
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	f000 80bd 	beq.w	8004c72 <_dtoa_r+0x622>
 8004af8:	b12f      	cbz	r7, 8004b06 <_dtoa_r+0x4b6>
 8004afa:	42af      	cmp	r7, r5
 8004afc:	d003      	beq.n	8004b06 <_dtoa_r+0x4b6>
 8004afe:	4639      	mov	r1, r7
 8004b00:	4648      	mov	r0, r9
 8004b02:	f000 fcb5 	bl	8005470 <_Bfree>
 8004b06:	4629      	mov	r1, r5
 8004b08:	4648      	mov	r0, r9
 8004b0a:	f000 fcb1 	bl	8005470 <_Bfree>
 8004b0e:	e0b0      	b.n	8004c72 <_dtoa_r+0x622>
 8004b10:	07e2      	lsls	r2, r4, #31
 8004b12:	d505      	bpl.n	8004b20 <_dtoa_r+0x4d0>
 8004b14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b18:	f7fb fd6e 	bl	80005f8 <__aeabi_dmul>
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	2301      	movs	r3, #1
 8004b20:	1064      	asrs	r4, r4, #1
 8004b22:	3508      	adds	r5, #8
 8004b24:	e762      	b.n	80049ec <_dtoa_r+0x39c>
 8004b26:	2602      	movs	r6, #2
 8004b28:	e765      	b.n	80049f6 <_dtoa_r+0x3a6>
 8004b2a:	9c03      	ldr	r4, [sp, #12]
 8004b2c:	46b8      	mov	r8, r7
 8004b2e:	e784      	b.n	8004a3a <_dtoa_r+0x3ea>
 8004b30:	4b27      	ldr	r3, [pc, #156]	@ (8004bd0 <_dtoa_r+0x580>)
 8004b32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b3c:	4454      	add	r4, sl
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	d054      	beq.n	8004bec <_dtoa_r+0x59c>
 8004b42:	4929      	ldr	r1, [pc, #164]	@ (8004be8 <_dtoa_r+0x598>)
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7fb fe81 	bl	800084c <__aeabi_ddiv>
 8004b4a:	4633      	mov	r3, r6
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	f7fb fb9b 	bl	8000288 <__aeabi_dsub>
 8004b52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004b56:	4656      	mov	r6, sl
 8004b58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b5c:	f7fb fffc 	bl	8000b58 <__aeabi_d2iz>
 8004b60:	4605      	mov	r5, r0
 8004b62:	f7fb fcdf 	bl	8000524 <__aeabi_i2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b6e:	f7fb fb8b 	bl	8000288 <__aeabi_dsub>
 8004b72:	3530      	adds	r5, #48	@ 0x30
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b7c:	f806 5b01 	strb.w	r5, [r6], #1
 8004b80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b84:	f7fb ffaa 	bl	8000adc <__aeabi_dcmplt>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d172      	bne.n	8004c72 <_dtoa_r+0x622>
 8004b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b90:	4911      	ldr	r1, [pc, #68]	@ (8004bd8 <_dtoa_r+0x588>)
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fb fb78 	bl	8000288 <__aeabi_dsub>
 8004b98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b9c:	f7fb ff9e 	bl	8000adc <__aeabi_dcmplt>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	f040 80b4 	bne.w	8004d0e <_dtoa_r+0x6be>
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	f43f af70 	beq.w	8004a8c <_dtoa_r+0x43c>
 8004bac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <_dtoa_r+0x58c>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <_dtoa_r+0x58c>)
 8004bba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc4:	f7fb fd18 	bl	80005f8 <__aeabi_dmul>
 8004bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bcc:	e7c4      	b.n	8004b58 <_dtoa_r+0x508>
 8004bce:	bf00      	nop
 8004bd0:	080076a0 	.word	0x080076a0
 8004bd4:	08007678 	.word	0x08007678
 8004bd8:	3ff00000 	.word	0x3ff00000
 8004bdc:	40240000 	.word	0x40240000
 8004be0:	401c0000 	.word	0x401c0000
 8004be4:	40140000 	.word	0x40140000
 8004be8:	3fe00000 	.word	0x3fe00000
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f7fb fd02 	bl	80005f8 <__aeabi_dmul>
 8004bf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004bf8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004bfa:	4656      	mov	r6, sl
 8004bfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c00:	f7fb ffaa 	bl	8000b58 <__aeabi_d2iz>
 8004c04:	4605      	mov	r5, r0
 8004c06:	f7fb fc8d 	bl	8000524 <__aeabi_i2d>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c12:	f7fb fb39 	bl	8000288 <__aeabi_dsub>
 8004c16:	3530      	adds	r5, #48	@ 0x30
 8004c18:	f806 5b01 	strb.w	r5, [r6], #1
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	42a6      	cmp	r6, r4
 8004c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	d124      	bne.n	8004c76 <_dtoa_r+0x626>
 8004c2c:	4baf      	ldr	r3, [pc, #700]	@ (8004eec <_dtoa_r+0x89c>)
 8004c2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004c32:	f7fb fb2b 	bl	800028c <__adddf3>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c3e:	f7fb ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d163      	bne.n	8004d0e <_dtoa_r+0x6be>
 8004c46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c4a:	49a8      	ldr	r1, [pc, #672]	@ (8004eec <_dtoa_r+0x89c>)
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7fb fb1b 	bl	8000288 <__aeabi_dsub>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c5a:	f7fb ff3f 	bl	8000adc <__aeabi_dcmplt>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f af14 	beq.w	8004a8c <_dtoa_r+0x43c>
 8004c64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c66:	1e73      	subs	r3, r6, #1
 8004c68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c6e:	2b30      	cmp	r3, #48	@ 0x30
 8004c70:	d0f8      	beq.n	8004c64 <_dtoa_r+0x614>
 8004c72:	4647      	mov	r7, r8
 8004c74:	e03b      	b.n	8004cee <_dtoa_r+0x69e>
 8004c76:	4b9e      	ldr	r3, [pc, #632]	@ (8004ef0 <_dtoa_r+0x8a0>)
 8004c78:	f7fb fcbe 	bl	80005f8 <__aeabi_dmul>
 8004c7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c80:	e7bc      	b.n	8004bfc <_dtoa_r+0x5ac>
 8004c82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004c86:	4656      	mov	r6, sl
 8004c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	4629      	mov	r1, r5
 8004c90:	f7fb fddc 	bl	800084c <__aeabi_ddiv>
 8004c94:	f7fb ff60 	bl	8000b58 <__aeabi_d2iz>
 8004c98:	4680      	mov	r8, r0
 8004c9a:	f7fb fc43 	bl	8000524 <__aeabi_i2d>
 8004c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ca2:	f7fb fca9 	bl	80005f8 <__aeabi_dmul>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4620      	mov	r0, r4
 8004cac:	4629      	mov	r1, r5
 8004cae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004cb2:	f7fb fae9 	bl	8000288 <__aeabi_dsub>
 8004cb6:	f806 4b01 	strb.w	r4, [r6], #1
 8004cba:	9d03      	ldr	r5, [sp, #12]
 8004cbc:	eba6 040a 	sub.w	r4, r6, sl
 8004cc0:	42a5      	cmp	r5, r4
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	d133      	bne.n	8004d30 <_dtoa_r+0x6e0>
 8004cc8:	f7fb fae0 	bl	800028c <__adddf3>
 8004ccc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	460d      	mov	r5, r1
 8004cd4:	f7fb ff20 	bl	8000b18 <__aeabi_dcmpgt>
 8004cd8:	b9c0      	cbnz	r0, 8004d0c <_dtoa_r+0x6bc>
 8004cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ce6:	b110      	cbz	r0, 8004cee <_dtoa_r+0x69e>
 8004ce8:	f018 0f01 	tst.w	r8, #1
 8004cec:	d10e      	bne.n	8004d0c <_dtoa_r+0x6bc>
 8004cee:	9902      	ldr	r1, [sp, #8]
 8004cf0:	4648      	mov	r0, r9
 8004cf2:	f000 fbbd 	bl	8005470 <_Bfree>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	7033      	strb	r3, [r6, #0]
 8004cfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004cfc:	3701      	adds	r7, #1
 8004cfe:	601f      	str	r7, [r3, #0]
 8004d00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 824b 	beq.w	800519e <_dtoa_r+0xb4e>
 8004d08:	601e      	str	r6, [r3, #0]
 8004d0a:	e248      	b.n	800519e <_dtoa_r+0xb4e>
 8004d0c:	46b8      	mov	r8, r7
 8004d0e:	4633      	mov	r3, r6
 8004d10:	461e      	mov	r6, r3
 8004d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d16:	2a39      	cmp	r2, #57	@ 0x39
 8004d18:	d106      	bne.n	8004d28 <_dtoa_r+0x6d8>
 8004d1a:	459a      	cmp	sl, r3
 8004d1c:	d1f8      	bne.n	8004d10 <_dtoa_r+0x6c0>
 8004d1e:	2230      	movs	r2, #48	@ 0x30
 8004d20:	f108 0801 	add.w	r8, r8, #1
 8004d24:	f88a 2000 	strb.w	r2, [sl]
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	3201      	adds	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e7a0      	b.n	8004c72 <_dtoa_r+0x622>
 8004d30:	4b6f      	ldr	r3, [pc, #444]	@ (8004ef0 <_dtoa_r+0x8a0>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	f7fb fc60 	bl	80005f8 <__aeabi_dmul>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	460d      	mov	r5, r1
 8004d40:	f7fb fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d09f      	beq.n	8004c88 <_dtoa_r+0x638>
 8004d48:	e7d1      	b.n	8004cee <_dtoa_r+0x69e>
 8004d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	f000 80ea 	beq.w	8004f26 <_dtoa_r+0x8d6>
 8004d52:	9a07      	ldr	r2, [sp, #28]
 8004d54:	2a01      	cmp	r2, #1
 8004d56:	f300 80cd 	bgt.w	8004ef4 <_dtoa_r+0x8a4>
 8004d5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	f000 80c1 	beq.w	8004ee4 <_dtoa_r+0x894>
 8004d62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d66:	9c08      	ldr	r4, [sp, #32]
 8004d68:	9e00      	ldr	r6, [sp, #0]
 8004d6a:	9a00      	ldr	r2, [sp, #0]
 8004d6c:	441a      	add	r2, r3
 8004d6e:	9200      	str	r2, [sp, #0]
 8004d70:	9a06      	ldr	r2, [sp, #24]
 8004d72:	2101      	movs	r1, #1
 8004d74:	441a      	add	r2, r3
 8004d76:	4648      	mov	r0, r9
 8004d78:	9206      	str	r2, [sp, #24]
 8004d7a:	f000 fc2d 	bl	80055d8 <__i2b>
 8004d7e:	4605      	mov	r5, r0
 8004d80:	b166      	cbz	r6, 8004d9c <_dtoa_r+0x74c>
 8004d82:	9b06      	ldr	r3, [sp, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dd09      	ble.n	8004d9c <_dtoa_r+0x74c>
 8004d88:	42b3      	cmp	r3, r6
 8004d8a:	9a00      	ldr	r2, [sp, #0]
 8004d8c:	bfa8      	it	ge
 8004d8e:	4633      	movge	r3, r6
 8004d90:	1ad2      	subs	r2, r2, r3
 8004d92:	9200      	str	r2, [sp, #0]
 8004d94:	9a06      	ldr	r2, [sp, #24]
 8004d96:	1af6      	subs	r6, r6, r3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	9306      	str	r3, [sp, #24]
 8004d9c:	9b08      	ldr	r3, [sp, #32]
 8004d9e:	b30b      	cbz	r3, 8004de4 <_dtoa_r+0x794>
 8004da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80c6 	beq.w	8004f34 <_dtoa_r+0x8e4>
 8004da8:	2c00      	cmp	r4, #0
 8004daa:	f000 80c0 	beq.w	8004f2e <_dtoa_r+0x8de>
 8004dae:	4629      	mov	r1, r5
 8004db0:	4622      	mov	r2, r4
 8004db2:	4648      	mov	r0, r9
 8004db4:	f000 fcc8 	bl	8005748 <__pow5mult>
 8004db8:	9a02      	ldr	r2, [sp, #8]
 8004dba:	4601      	mov	r1, r0
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	4648      	mov	r0, r9
 8004dc0:	f000 fc20 	bl	8005604 <__multiply>
 8004dc4:	9902      	ldr	r1, [sp, #8]
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	4648      	mov	r0, r9
 8004dca:	f000 fb51 	bl	8005470 <_Bfree>
 8004dce:	9b08      	ldr	r3, [sp, #32]
 8004dd0:	1b1b      	subs	r3, r3, r4
 8004dd2:	9308      	str	r3, [sp, #32]
 8004dd4:	f000 80b1 	beq.w	8004f3a <_dtoa_r+0x8ea>
 8004dd8:	9a08      	ldr	r2, [sp, #32]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	4648      	mov	r0, r9
 8004dde:	f000 fcb3 	bl	8005748 <__pow5mult>
 8004de2:	9002      	str	r0, [sp, #8]
 8004de4:	2101      	movs	r1, #1
 8004de6:	4648      	mov	r0, r9
 8004de8:	f000 fbf6 	bl	80055d8 <__i2b>
 8004dec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dee:	4604      	mov	r4, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 81d8 	beq.w	80051a6 <_dtoa_r+0xb56>
 8004df6:	461a      	mov	r2, r3
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4648      	mov	r0, r9
 8004dfc:	f000 fca4 	bl	8005748 <__pow5mult>
 8004e00:	9b07      	ldr	r3, [sp, #28]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	4604      	mov	r4, r0
 8004e06:	f300 809f 	bgt.w	8004f48 <_dtoa_r+0x8f8>
 8004e0a:	9b04      	ldr	r3, [sp, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f040 8097 	bne.w	8004f40 <_dtoa_r+0x8f0>
 8004e12:	9b05      	ldr	r3, [sp, #20]
 8004e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f040 8093 	bne.w	8004f44 <_dtoa_r+0x8f4>
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	051b      	lsls	r3, r3, #20
 8004e28:	b133      	cbz	r3, 8004e38 <_dtoa_r+0x7e8>
 8004e2a:	9b00      	ldr	r3, [sp, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	9b06      	ldr	r3, [sp, #24]
 8004e32:	3301      	adds	r3, #1
 8004e34:	9306      	str	r3, [sp, #24]
 8004e36:	2301      	movs	r3, #1
 8004e38:	9308      	str	r3, [sp, #32]
 8004e3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 81b8 	beq.w	80051b2 <_dtoa_r+0xb62>
 8004e42:	6923      	ldr	r3, [r4, #16]
 8004e44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e48:	6918      	ldr	r0, [r3, #16]
 8004e4a:	f000 fb79 	bl	8005540 <__hi0bits>
 8004e4e:	f1c0 0020 	rsb	r0, r0, #32
 8004e52:	9b06      	ldr	r3, [sp, #24]
 8004e54:	4418      	add	r0, r3
 8004e56:	f010 001f 	ands.w	r0, r0, #31
 8004e5a:	f000 8082 	beq.w	8004f62 <_dtoa_r+0x912>
 8004e5e:	f1c0 0320 	rsb	r3, r0, #32
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	dd73      	ble.n	8004f4e <_dtoa_r+0x8fe>
 8004e66:	9b00      	ldr	r3, [sp, #0]
 8004e68:	f1c0 001c 	rsb	r0, r0, #28
 8004e6c:	4403      	add	r3, r0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	9b06      	ldr	r3, [sp, #24]
 8004e72:	4403      	add	r3, r0
 8004e74:	4406      	add	r6, r0
 8004e76:	9306      	str	r3, [sp, #24]
 8004e78:	9b00      	ldr	r3, [sp, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	dd05      	ble.n	8004e8a <_dtoa_r+0x83a>
 8004e7e:	9902      	ldr	r1, [sp, #8]
 8004e80:	461a      	mov	r2, r3
 8004e82:	4648      	mov	r0, r9
 8004e84:	f000 fcba 	bl	80057fc <__lshift>
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9b06      	ldr	r3, [sp, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dd05      	ble.n	8004e9c <_dtoa_r+0x84c>
 8004e90:	4621      	mov	r1, r4
 8004e92:	461a      	mov	r2, r3
 8004e94:	4648      	mov	r0, r9
 8004e96:	f000 fcb1 	bl	80057fc <__lshift>
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d061      	beq.n	8004f66 <_dtoa_r+0x916>
 8004ea2:	9802      	ldr	r0, [sp, #8]
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	f000 fd15 	bl	80058d4 <__mcmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	da5b      	bge.n	8004f66 <_dtoa_r+0x916>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9902      	ldr	r1, [sp, #8]
 8004eb2:	220a      	movs	r2, #10
 8004eb4:	4648      	mov	r0, r9
 8004eb6:	f000 fafd 	bl	80054b4 <__multadd>
 8004eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ebc:	9002      	str	r0, [sp, #8]
 8004ebe:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8177 	beq.w	80051b6 <_dtoa_r+0xb66>
 8004ec8:	4629      	mov	r1, r5
 8004eca:	2300      	movs	r3, #0
 8004ecc:	220a      	movs	r2, #10
 8004ece:	4648      	mov	r0, r9
 8004ed0:	f000 faf0 	bl	80054b4 <__multadd>
 8004ed4:	f1bb 0f00 	cmp.w	fp, #0
 8004ed8:	4605      	mov	r5, r0
 8004eda:	dc6f      	bgt.n	8004fbc <_dtoa_r+0x96c>
 8004edc:	9b07      	ldr	r3, [sp, #28]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	dc49      	bgt.n	8004f76 <_dtoa_r+0x926>
 8004ee2:	e06b      	b.n	8004fbc <_dtoa_r+0x96c>
 8004ee4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ee6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004eea:	e73c      	b.n	8004d66 <_dtoa_r+0x716>
 8004eec:	3fe00000 	.word	0x3fe00000
 8004ef0:	40240000 	.word	0x40240000
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	1e5c      	subs	r4, r3, #1
 8004ef8:	9b08      	ldr	r3, [sp, #32]
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	db09      	blt.n	8004f12 <_dtoa_r+0x8c2>
 8004efe:	1b1c      	subs	r4, r3, r4
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f6bf af30 	bge.w	8004d68 <_dtoa_r+0x718>
 8004f08:	9b00      	ldr	r3, [sp, #0]
 8004f0a:	9a03      	ldr	r2, [sp, #12]
 8004f0c:	1a9e      	subs	r6, r3, r2
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e72b      	b.n	8004d6a <_dtoa_r+0x71a>
 8004f12:	9b08      	ldr	r3, [sp, #32]
 8004f14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f16:	9408      	str	r4, [sp, #32]
 8004f18:	1ae3      	subs	r3, r4, r3
 8004f1a:	441a      	add	r2, r3
 8004f1c:	9e00      	ldr	r6, [sp, #0]
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	920d      	str	r2, [sp, #52]	@ 0x34
 8004f22:	2400      	movs	r4, #0
 8004f24:	e721      	b.n	8004d6a <_dtoa_r+0x71a>
 8004f26:	9c08      	ldr	r4, [sp, #32]
 8004f28:	9e00      	ldr	r6, [sp, #0]
 8004f2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004f2c:	e728      	b.n	8004d80 <_dtoa_r+0x730>
 8004f2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004f32:	e751      	b.n	8004dd8 <_dtoa_r+0x788>
 8004f34:	9a08      	ldr	r2, [sp, #32]
 8004f36:	9902      	ldr	r1, [sp, #8]
 8004f38:	e750      	b.n	8004ddc <_dtoa_r+0x78c>
 8004f3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8004f3e:	e751      	b.n	8004de4 <_dtoa_r+0x794>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e779      	b.n	8004e38 <_dtoa_r+0x7e8>
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	e777      	b.n	8004e38 <_dtoa_r+0x7e8>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9308      	str	r3, [sp, #32]
 8004f4c:	e779      	b.n	8004e42 <_dtoa_r+0x7f2>
 8004f4e:	d093      	beq.n	8004e78 <_dtoa_r+0x828>
 8004f50:	9a00      	ldr	r2, [sp, #0]
 8004f52:	331c      	adds	r3, #28
 8004f54:	441a      	add	r2, r3
 8004f56:	9200      	str	r2, [sp, #0]
 8004f58:	9a06      	ldr	r2, [sp, #24]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	441e      	add	r6, r3
 8004f5e:	9206      	str	r2, [sp, #24]
 8004f60:	e78a      	b.n	8004e78 <_dtoa_r+0x828>
 8004f62:	4603      	mov	r3, r0
 8004f64:	e7f4      	b.n	8004f50 <_dtoa_r+0x900>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	46b8      	mov	r8, r7
 8004f6c:	dc20      	bgt.n	8004fb0 <_dtoa_r+0x960>
 8004f6e:	469b      	mov	fp, r3
 8004f70:	9b07      	ldr	r3, [sp, #28]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	dd1e      	ble.n	8004fb4 <_dtoa_r+0x964>
 8004f76:	f1bb 0f00 	cmp.w	fp, #0
 8004f7a:	f47f adb1 	bne.w	8004ae0 <_dtoa_r+0x490>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	465b      	mov	r3, fp
 8004f82:	2205      	movs	r2, #5
 8004f84:	4648      	mov	r0, r9
 8004f86:	f000 fa95 	bl	80054b4 <__multadd>
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	9802      	ldr	r0, [sp, #8]
 8004f90:	f000 fca0 	bl	80058d4 <__mcmp>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f77f ada3 	ble.w	8004ae0 <_dtoa_r+0x490>
 8004f9a:	4656      	mov	r6, sl
 8004f9c:	2331      	movs	r3, #49	@ 0x31
 8004f9e:	f806 3b01 	strb.w	r3, [r6], #1
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	e59f      	b.n	8004ae8 <_dtoa_r+0x498>
 8004fa8:	9c03      	ldr	r4, [sp, #12]
 8004faa:	46b8      	mov	r8, r7
 8004fac:	4625      	mov	r5, r4
 8004fae:	e7f4      	b.n	8004f9a <_dtoa_r+0x94a>
 8004fb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8101 	beq.w	80051be <_dtoa_r+0xb6e>
 8004fbc:	2e00      	cmp	r6, #0
 8004fbe:	dd05      	ble.n	8004fcc <_dtoa_r+0x97c>
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	4648      	mov	r0, r9
 8004fc6:	f000 fc19 	bl	80057fc <__lshift>
 8004fca:	4605      	mov	r5, r0
 8004fcc:	9b08      	ldr	r3, [sp, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d05c      	beq.n	800508c <_dtoa_r+0xa3c>
 8004fd2:	6869      	ldr	r1, [r5, #4]
 8004fd4:	4648      	mov	r0, r9
 8004fd6:	f000 fa0b 	bl	80053f0 <_Balloc>
 8004fda:	4606      	mov	r6, r0
 8004fdc:	b928      	cbnz	r0, 8004fea <_dtoa_r+0x99a>
 8004fde:	4b82      	ldr	r3, [pc, #520]	@ (80051e8 <_dtoa_r+0xb98>)
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004fe6:	f7ff bb4a 	b.w	800467e <_dtoa_r+0x2e>
 8004fea:	692a      	ldr	r2, [r5, #16]
 8004fec:	3202      	adds	r2, #2
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	f105 010c 	add.w	r1, r5, #12
 8004ff4:	300c      	adds	r0, #12
 8004ff6:	f7ff fa92 	bl	800451e <memcpy>
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4648      	mov	r0, r9
 8005000:	f000 fbfc 	bl	80057fc <__lshift>
 8005004:	f10a 0301 	add.w	r3, sl, #1
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	eb0a 030b 	add.w	r3, sl, fp
 800500e:	9308      	str	r3, [sp, #32]
 8005010:	9b04      	ldr	r3, [sp, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	462f      	mov	r7, r5
 8005018:	9306      	str	r3, [sp, #24]
 800501a:	4605      	mov	r5, r0
 800501c:	9b00      	ldr	r3, [sp, #0]
 800501e:	9802      	ldr	r0, [sp, #8]
 8005020:	4621      	mov	r1, r4
 8005022:	f103 3bff 	add.w	fp, r3, #4294967295
 8005026:	f7ff fa88 	bl	800453a <quorem>
 800502a:	4603      	mov	r3, r0
 800502c:	3330      	adds	r3, #48	@ 0x30
 800502e:	9003      	str	r0, [sp, #12]
 8005030:	4639      	mov	r1, r7
 8005032:	9802      	ldr	r0, [sp, #8]
 8005034:	9309      	str	r3, [sp, #36]	@ 0x24
 8005036:	f000 fc4d 	bl	80058d4 <__mcmp>
 800503a:	462a      	mov	r2, r5
 800503c:	9004      	str	r0, [sp, #16]
 800503e:	4621      	mov	r1, r4
 8005040:	4648      	mov	r0, r9
 8005042:	f000 fc63 	bl	800590c <__mdiff>
 8005046:	68c2      	ldr	r2, [r0, #12]
 8005048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504a:	4606      	mov	r6, r0
 800504c:	bb02      	cbnz	r2, 8005090 <_dtoa_r+0xa40>
 800504e:	4601      	mov	r1, r0
 8005050:	9802      	ldr	r0, [sp, #8]
 8005052:	f000 fc3f 	bl	80058d4 <__mcmp>
 8005056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005058:	4602      	mov	r2, r0
 800505a:	4631      	mov	r1, r6
 800505c:	4648      	mov	r0, r9
 800505e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005060:	9309      	str	r3, [sp, #36]	@ 0x24
 8005062:	f000 fa05 	bl	8005470 <_Bfree>
 8005066:	9b07      	ldr	r3, [sp, #28]
 8005068:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800506a:	9e00      	ldr	r6, [sp, #0]
 800506c:	ea42 0103 	orr.w	r1, r2, r3
 8005070:	9b06      	ldr	r3, [sp, #24]
 8005072:	4319      	orrs	r1, r3
 8005074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005076:	d10d      	bne.n	8005094 <_dtoa_r+0xa44>
 8005078:	2b39      	cmp	r3, #57	@ 0x39
 800507a:	d027      	beq.n	80050cc <_dtoa_r+0xa7c>
 800507c:	9a04      	ldr	r2, [sp, #16]
 800507e:	2a00      	cmp	r2, #0
 8005080:	dd01      	ble.n	8005086 <_dtoa_r+0xa36>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	3331      	adds	r3, #49	@ 0x31
 8005086:	f88b 3000 	strb.w	r3, [fp]
 800508a:	e52e      	b.n	8004aea <_dtoa_r+0x49a>
 800508c:	4628      	mov	r0, r5
 800508e:	e7b9      	b.n	8005004 <_dtoa_r+0x9b4>
 8005090:	2201      	movs	r2, #1
 8005092:	e7e2      	b.n	800505a <_dtoa_r+0xa0a>
 8005094:	9904      	ldr	r1, [sp, #16]
 8005096:	2900      	cmp	r1, #0
 8005098:	db04      	blt.n	80050a4 <_dtoa_r+0xa54>
 800509a:	9807      	ldr	r0, [sp, #28]
 800509c:	4301      	orrs	r1, r0
 800509e:	9806      	ldr	r0, [sp, #24]
 80050a0:	4301      	orrs	r1, r0
 80050a2:	d120      	bne.n	80050e6 <_dtoa_r+0xa96>
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	ddee      	ble.n	8005086 <_dtoa_r+0xa36>
 80050a8:	9902      	ldr	r1, [sp, #8]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	4648      	mov	r0, r9
 80050b0:	f000 fba4 	bl	80057fc <__lshift>
 80050b4:	4621      	mov	r1, r4
 80050b6:	9002      	str	r0, [sp, #8]
 80050b8:	f000 fc0c 	bl	80058d4 <__mcmp>
 80050bc:	2800      	cmp	r0, #0
 80050be:	9b00      	ldr	r3, [sp, #0]
 80050c0:	dc02      	bgt.n	80050c8 <_dtoa_r+0xa78>
 80050c2:	d1e0      	bne.n	8005086 <_dtoa_r+0xa36>
 80050c4:	07da      	lsls	r2, r3, #31
 80050c6:	d5de      	bpl.n	8005086 <_dtoa_r+0xa36>
 80050c8:	2b39      	cmp	r3, #57	@ 0x39
 80050ca:	d1da      	bne.n	8005082 <_dtoa_r+0xa32>
 80050cc:	2339      	movs	r3, #57	@ 0x39
 80050ce:	f88b 3000 	strb.w	r3, [fp]
 80050d2:	4633      	mov	r3, r6
 80050d4:	461e      	mov	r6, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050dc:	2a39      	cmp	r2, #57	@ 0x39
 80050de:	d04e      	beq.n	800517e <_dtoa_r+0xb2e>
 80050e0:	3201      	adds	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e501      	b.n	8004aea <_dtoa_r+0x49a>
 80050e6:	2a00      	cmp	r2, #0
 80050e8:	dd03      	ble.n	80050f2 <_dtoa_r+0xaa2>
 80050ea:	2b39      	cmp	r3, #57	@ 0x39
 80050ec:	d0ee      	beq.n	80050cc <_dtoa_r+0xa7c>
 80050ee:	3301      	adds	r3, #1
 80050f0:	e7c9      	b.n	8005086 <_dtoa_r+0xa36>
 80050f2:	9a00      	ldr	r2, [sp, #0]
 80050f4:	9908      	ldr	r1, [sp, #32]
 80050f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80050fa:	428a      	cmp	r2, r1
 80050fc:	d028      	beq.n	8005150 <_dtoa_r+0xb00>
 80050fe:	9902      	ldr	r1, [sp, #8]
 8005100:	2300      	movs	r3, #0
 8005102:	220a      	movs	r2, #10
 8005104:	4648      	mov	r0, r9
 8005106:	f000 f9d5 	bl	80054b4 <__multadd>
 800510a:	42af      	cmp	r7, r5
 800510c:	9002      	str	r0, [sp, #8]
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	f04f 020a 	mov.w	r2, #10
 8005116:	4639      	mov	r1, r7
 8005118:	4648      	mov	r0, r9
 800511a:	d107      	bne.n	800512c <_dtoa_r+0xadc>
 800511c:	f000 f9ca 	bl	80054b4 <__multadd>
 8005120:	4607      	mov	r7, r0
 8005122:	4605      	mov	r5, r0
 8005124:	9b00      	ldr	r3, [sp, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	e777      	b.n	800501c <_dtoa_r+0x9cc>
 800512c:	f000 f9c2 	bl	80054b4 <__multadd>
 8005130:	4629      	mov	r1, r5
 8005132:	4607      	mov	r7, r0
 8005134:	2300      	movs	r3, #0
 8005136:	220a      	movs	r2, #10
 8005138:	4648      	mov	r0, r9
 800513a:	f000 f9bb 	bl	80054b4 <__multadd>
 800513e:	4605      	mov	r5, r0
 8005140:	e7f0      	b.n	8005124 <_dtoa_r+0xad4>
 8005142:	f1bb 0f00 	cmp.w	fp, #0
 8005146:	bfcc      	ite	gt
 8005148:	465e      	movgt	r6, fp
 800514a:	2601      	movle	r6, #1
 800514c:	4456      	add	r6, sl
 800514e:	2700      	movs	r7, #0
 8005150:	9902      	ldr	r1, [sp, #8]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	4648      	mov	r0, r9
 8005158:	f000 fb50 	bl	80057fc <__lshift>
 800515c:	4621      	mov	r1, r4
 800515e:	9002      	str	r0, [sp, #8]
 8005160:	f000 fbb8 	bl	80058d4 <__mcmp>
 8005164:	2800      	cmp	r0, #0
 8005166:	dcb4      	bgt.n	80050d2 <_dtoa_r+0xa82>
 8005168:	d102      	bne.n	8005170 <_dtoa_r+0xb20>
 800516a:	9b00      	ldr	r3, [sp, #0]
 800516c:	07db      	lsls	r3, r3, #31
 800516e:	d4b0      	bmi.n	80050d2 <_dtoa_r+0xa82>
 8005170:	4633      	mov	r3, r6
 8005172:	461e      	mov	r6, r3
 8005174:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005178:	2a30      	cmp	r2, #48	@ 0x30
 800517a:	d0fa      	beq.n	8005172 <_dtoa_r+0xb22>
 800517c:	e4b5      	b.n	8004aea <_dtoa_r+0x49a>
 800517e:	459a      	cmp	sl, r3
 8005180:	d1a8      	bne.n	80050d4 <_dtoa_r+0xa84>
 8005182:	2331      	movs	r3, #49	@ 0x31
 8005184:	f108 0801 	add.w	r8, r8, #1
 8005188:	f88a 3000 	strb.w	r3, [sl]
 800518c:	e4ad      	b.n	8004aea <_dtoa_r+0x49a>
 800518e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005190:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80051ec <_dtoa_r+0xb9c>
 8005194:	b11b      	cbz	r3, 800519e <_dtoa_r+0xb4e>
 8005196:	f10a 0308 	add.w	r3, sl, #8
 800519a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4650      	mov	r0, sl
 80051a0:	b017      	add	sp, #92	@ 0x5c
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	9b07      	ldr	r3, [sp, #28]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	f77f ae2e 	ble.w	8004e0a <_dtoa_r+0x7ba>
 80051ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051b0:	9308      	str	r3, [sp, #32]
 80051b2:	2001      	movs	r0, #1
 80051b4:	e64d      	b.n	8004e52 <_dtoa_r+0x802>
 80051b6:	f1bb 0f00 	cmp.w	fp, #0
 80051ba:	f77f aed9 	ble.w	8004f70 <_dtoa_r+0x920>
 80051be:	4656      	mov	r6, sl
 80051c0:	9802      	ldr	r0, [sp, #8]
 80051c2:	4621      	mov	r1, r4
 80051c4:	f7ff f9b9 	bl	800453a <quorem>
 80051c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80051cc:	f806 3b01 	strb.w	r3, [r6], #1
 80051d0:	eba6 020a 	sub.w	r2, r6, sl
 80051d4:	4593      	cmp	fp, r2
 80051d6:	ddb4      	ble.n	8005142 <_dtoa_r+0xaf2>
 80051d8:	9902      	ldr	r1, [sp, #8]
 80051da:	2300      	movs	r3, #0
 80051dc:	220a      	movs	r2, #10
 80051de:	4648      	mov	r0, r9
 80051e0:	f000 f968 	bl	80054b4 <__multadd>
 80051e4:	9002      	str	r0, [sp, #8]
 80051e6:	e7eb      	b.n	80051c0 <_dtoa_r+0xb70>
 80051e8:	080075ab 	.word	0x080075ab
 80051ec:	0800752f 	.word	0x0800752f

080051f0 <_free_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4605      	mov	r5, r0
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d041      	beq.n	800527c <_free_r+0x8c>
 80051f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051fc:	1f0c      	subs	r4, r1, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bfb8      	it	lt
 8005202:	18e4      	addlt	r4, r4, r3
 8005204:	f000 f8e8 	bl	80053d8 <__malloc_lock>
 8005208:	4a1d      	ldr	r2, [pc, #116]	@ (8005280 <_free_r+0x90>)
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	b933      	cbnz	r3, 800521c <_free_r+0x2c>
 800520e:	6063      	str	r3, [r4, #4]
 8005210:	6014      	str	r4, [r2, #0]
 8005212:	4628      	mov	r0, r5
 8005214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005218:	f000 b8e4 	b.w	80053e4 <__malloc_unlock>
 800521c:	42a3      	cmp	r3, r4
 800521e:	d908      	bls.n	8005232 <_free_r+0x42>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	1821      	adds	r1, r4, r0
 8005224:	428b      	cmp	r3, r1
 8005226:	bf01      	itttt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	1809      	addeq	r1, r1, r0
 800522e:	6021      	streq	r1, [r4, #0]
 8005230:	e7ed      	b.n	800520e <_free_r+0x1e>
 8005232:	461a      	mov	r2, r3
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b10b      	cbz	r3, 800523c <_free_r+0x4c>
 8005238:	42a3      	cmp	r3, r4
 800523a:	d9fa      	bls.n	8005232 <_free_r+0x42>
 800523c:	6811      	ldr	r1, [r2, #0]
 800523e:	1850      	adds	r0, r2, r1
 8005240:	42a0      	cmp	r0, r4
 8005242:	d10b      	bne.n	800525c <_free_r+0x6c>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	4401      	add	r1, r0
 8005248:	1850      	adds	r0, r2, r1
 800524a:	4283      	cmp	r3, r0
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	d1e0      	bne.n	8005212 <_free_r+0x22>
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	6053      	str	r3, [r2, #4]
 8005256:	4408      	add	r0, r1
 8005258:	6010      	str	r0, [r2, #0]
 800525a:	e7da      	b.n	8005212 <_free_r+0x22>
 800525c:	d902      	bls.n	8005264 <_free_r+0x74>
 800525e:	230c      	movs	r3, #12
 8005260:	602b      	str	r3, [r5, #0]
 8005262:	e7d6      	b.n	8005212 <_free_r+0x22>
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	1821      	adds	r1, r4, r0
 8005268:	428b      	cmp	r3, r1
 800526a:	bf04      	itt	eq
 800526c:	6819      	ldreq	r1, [r3, #0]
 800526e:	685b      	ldreq	r3, [r3, #4]
 8005270:	6063      	str	r3, [r4, #4]
 8005272:	bf04      	itt	eq
 8005274:	1809      	addeq	r1, r1, r0
 8005276:	6021      	streq	r1, [r4, #0]
 8005278:	6054      	str	r4, [r2, #4]
 800527a:	e7ca      	b.n	8005212 <_free_r+0x22>
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	20000838 	.word	0x20000838

08005284 <malloc>:
 8005284:	4b02      	ldr	r3, [pc, #8]	@ (8005290 <malloc+0xc>)
 8005286:	4601      	mov	r1, r0
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f000 b825 	b.w	80052d8 <_malloc_r>
 800528e:	bf00      	nop
 8005290:	20000010 	.word	0x20000010

08005294 <sbrk_aligned>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4e0f      	ldr	r6, [pc, #60]	@ (80052d4 <sbrk_aligned+0x40>)
 8005298:	460c      	mov	r4, r1
 800529a:	6831      	ldr	r1, [r6, #0]
 800529c:	4605      	mov	r5, r0
 800529e:	b911      	cbnz	r1, 80052a6 <sbrk_aligned+0x12>
 80052a0:	f000 ff58 	bl	8006154 <_sbrk_r>
 80052a4:	6030      	str	r0, [r6, #0]
 80052a6:	4621      	mov	r1, r4
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 ff53 	bl	8006154 <_sbrk_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	d103      	bne.n	80052ba <sbrk_aligned+0x26>
 80052b2:	f04f 34ff 	mov.w	r4, #4294967295
 80052b6:	4620      	mov	r0, r4
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	1cc4      	adds	r4, r0, #3
 80052bc:	f024 0403 	bic.w	r4, r4, #3
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d0f8      	beq.n	80052b6 <sbrk_aligned+0x22>
 80052c4:	1a21      	subs	r1, r4, r0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 ff44 	bl	8006154 <_sbrk_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d1f2      	bne.n	80052b6 <sbrk_aligned+0x22>
 80052d0:	e7ef      	b.n	80052b2 <sbrk_aligned+0x1e>
 80052d2:	bf00      	nop
 80052d4:	20000834 	.word	0x20000834

080052d8 <_malloc_r>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	1ccd      	adds	r5, r1, #3
 80052de:	f025 0503 	bic.w	r5, r5, #3
 80052e2:	3508      	adds	r5, #8
 80052e4:	2d0c      	cmp	r5, #12
 80052e6:	bf38      	it	cc
 80052e8:	250c      	movcc	r5, #12
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	4606      	mov	r6, r0
 80052ee:	db01      	blt.n	80052f4 <_malloc_r+0x1c>
 80052f0:	42a9      	cmp	r1, r5
 80052f2:	d904      	bls.n	80052fe <_malloc_r+0x26>
 80052f4:	230c      	movs	r3, #12
 80052f6:	6033      	str	r3, [r6, #0]
 80052f8:	2000      	movs	r0, #0
 80052fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053d4 <_malloc_r+0xfc>
 8005302:	f000 f869 	bl	80053d8 <__malloc_lock>
 8005306:	f8d8 3000 	ldr.w	r3, [r8]
 800530a:	461c      	mov	r4, r3
 800530c:	bb44      	cbnz	r4, 8005360 <_malloc_r+0x88>
 800530e:	4629      	mov	r1, r5
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff ffbf 	bl	8005294 <sbrk_aligned>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	4604      	mov	r4, r0
 800531a:	d158      	bne.n	80053ce <_malloc_r+0xf6>
 800531c:	f8d8 4000 	ldr.w	r4, [r8]
 8005320:	4627      	mov	r7, r4
 8005322:	2f00      	cmp	r7, #0
 8005324:	d143      	bne.n	80053ae <_malloc_r+0xd6>
 8005326:	2c00      	cmp	r4, #0
 8005328:	d04b      	beq.n	80053c2 <_malloc_r+0xea>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	4639      	mov	r1, r7
 800532e:	4630      	mov	r0, r6
 8005330:	eb04 0903 	add.w	r9, r4, r3
 8005334:	f000 ff0e 	bl	8006154 <_sbrk_r>
 8005338:	4581      	cmp	r9, r0
 800533a:	d142      	bne.n	80053c2 <_malloc_r+0xea>
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	1a6d      	subs	r5, r5, r1
 8005340:	4629      	mov	r1, r5
 8005342:	4630      	mov	r0, r6
 8005344:	f7ff ffa6 	bl	8005294 <sbrk_aligned>
 8005348:	3001      	adds	r0, #1
 800534a:	d03a      	beq.n	80053c2 <_malloc_r+0xea>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	442b      	add	r3, r5
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	f8d8 3000 	ldr.w	r3, [r8]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	bb62      	cbnz	r2, 80053b4 <_malloc_r+0xdc>
 800535a:	f8c8 7000 	str.w	r7, [r8]
 800535e:	e00f      	b.n	8005380 <_malloc_r+0xa8>
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	1b52      	subs	r2, r2, r5
 8005364:	d420      	bmi.n	80053a8 <_malloc_r+0xd0>
 8005366:	2a0b      	cmp	r2, #11
 8005368:	d917      	bls.n	800539a <_malloc_r+0xc2>
 800536a:	1961      	adds	r1, r4, r5
 800536c:	42a3      	cmp	r3, r4
 800536e:	6025      	str	r5, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	6059      	strne	r1, [r3, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	bf08      	it	eq
 8005378:	f8c8 1000 	streq.w	r1, [r8]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4630      	mov	r0, r6
 8005382:	f000 f82f 	bl	80053e4 <__malloc_unlock>
 8005386:	f104 000b 	add.w	r0, r4, #11
 800538a:	1d23      	adds	r3, r4, #4
 800538c:	f020 0007 	bic.w	r0, r0, #7
 8005390:	1ac2      	subs	r2, r0, r3
 8005392:	bf1c      	itt	ne
 8005394:	1a1b      	subne	r3, r3, r0
 8005396:	50a3      	strne	r3, [r4, r2]
 8005398:	e7af      	b.n	80052fa <_malloc_r+0x22>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	42a3      	cmp	r3, r4
 800539e:	bf0c      	ite	eq
 80053a0:	f8c8 2000 	streq.w	r2, [r8]
 80053a4:	605a      	strne	r2, [r3, #4]
 80053a6:	e7eb      	b.n	8005380 <_malloc_r+0xa8>
 80053a8:	4623      	mov	r3, r4
 80053aa:	6864      	ldr	r4, [r4, #4]
 80053ac:	e7ae      	b.n	800530c <_malloc_r+0x34>
 80053ae:	463c      	mov	r4, r7
 80053b0:	687f      	ldr	r7, [r7, #4]
 80053b2:	e7b6      	b.n	8005322 <_malloc_r+0x4a>
 80053b4:	461a      	mov	r2, r3
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d1fb      	bne.n	80053b4 <_malloc_r+0xdc>
 80053bc:	2300      	movs	r3, #0
 80053be:	6053      	str	r3, [r2, #4]
 80053c0:	e7de      	b.n	8005380 <_malloc_r+0xa8>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	4630      	mov	r0, r6
 80053c8:	f000 f80c 	bl	80053e4 <__malloc_unlock>
 80053cc:	e794      	b.n	80052f8 <_malloc_r+0x20>
 80053ce:	6005      	str	r5, [r0, #0]
 80053d0:	e7d6      	b.n	8005380 <_malloc_r+0xa8>
 80053d2:	bf00      	nop
 80053d4:	20000838 	.word	0x20000838

080053d8 <__malloc_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	@ (80053e0 <__malloc_lock+0x8>)
 80053da:	f7ff b89e 	b.w	800451a <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	20000830 	.word	0x20000830

080053e4 <__malloc_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	@ (80053ec <__malloc_unlock+0x8>)
 80053e6:	f7ff b899 	b.w	800451c <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	20000830 	.word	0x20000830

080053f0 <_Balloc>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	69c6      	ldr	r6, [r0, #28]
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	b976      	cbnz	r6, 8005418 <_Balloc+0x28>
 80053fa:	2010      	movs	r0, #16
 80053fc:	f7ff ff42 	bl	8005284 <malloc>
 8005400:	4602      	mov	r2, r0
 8005402:	61e0      	str	r0, [r4, #28]
 8005404:	b920      	cbnz	r0, 8005410 <_Balloc+0x20>
 8005406:	4b18      	ldr	r3, [pc, #96]	@ (8005468 <_Balloc+0x78>)
 8005408:	4818      	ldr	r0, [pc, #96]	@ (800546c <_Balloc+0x7c>)
 800540a:	216b      	movs	r1, #107	@ 0x6b
 800540c:	f000 feb2 	bl	8006174 <__assert_func>
 8005410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005414:	6006      	str	r6, [r0, #0]
 8005416:	60c6      	str	r6, [r0, #12]
 8005418:	69e6      	ldr	r6, [r4, #28]
 800541a:	68f3      	ldr	r3, [r6, #12]
 800541c:	b183      	cbz	r3, 8005440 <_Balloc+0x50>
 800541e:	69e3      	ldr	r3, [r4, #28]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005426:	b9b8      	cbnz	r0, 8005458 <_Balloc+0x68>
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f605 	lsl.w	r6, r1, r5
 800542e:	1d72      	adds	r2, r6, #5
 8005430:	0092      	lsls	r2, r2, #2
 8005432:	4620      	mov	r0, r4
 8005434:	f000 febc 	bl	80061b0 <_calloc_r>
 8005438:	b160      	cbz	r0, 8005454 <_Balloc+0x64>
 800543a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800543e:	e00e      	b.n	800545e <_Balloc+0x6e>
 8005440:	2221      	movs	r2, #33	@ 0x21
 8005442:	2104      	movs	r1, #4
 8005444:	4620      	mov	r0, r4
 8005446:	f000 feb3 	bl	80061b0 <_calloc_r>
 800544a:	69e3      	ldr	r3, [r4, #28]
 800544c:	60f0      	str	r0, [r6, #12]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e4      	bne.n	800541e <_Balloc+0x2e>
 8005454:	2000      	movs	r0, #0
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	6802      	ldr	r2, [r0, #0]
 800545a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800545e:	2300      	movs	r3, #0
 8005460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005464:	e7f7      	b.n	8005456 <_Balloc+0x66>
 8005466:	bf00      	nop
 8005468:	0800753c 	.word	0x0800753c
 800546c:	080075bc 	.word	0x080075bc

08005470 <_Bfree>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	69c6      	ldr	r6, [r0, #28]
 8005474:	4605      	mov	r5, r0
 8005476:	460c      	mov	r4, r1
 8005478:	b976      	cbnz	r6, 8005498 <_Bfree+0x28>
 800547a:	2010      	movs	r0, #16
 800547c:	f7ff ff02 	bl	8005284 <malloc>
 8005480:	4602      	mov	r2, r0
 8005482:	61e8      	str	r0, [r5, #28]
 8005484:	b920      	cbnz	r0, 8005490 <_Bfree+0x20>
 8005486:	4b09      	ldr	r3, [pc, #36]	@ (80054ac <_Bfree+0x3c>)
 8005488:	4809      	ldr	r0, [pc, #36]	@ (80054b0 <_Bfree+0x40>)
 800548a:	218f      	movs	r1, #143	@ 0x8f
 800548c:	f000 fe72 	bl	8006174 <__assert_func>
 8005490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005494:	6006      	str	r6, [r0, #0]
 8005496:	60c6      	str	r6, [r0, #12]
 8005498:	b13c      	cbz	r4, 80054aa <_Bfree+0x3a>
 800549a:	69eb      	ldr	r3, [r5, #28]
 800549c:	6862      	ldr	r2, [r4, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054a4:	6021      	str	r1, [r4, #0]
 80054a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	0800753c 	.word	0x0800753c
 80054b0:	080075bc 	.word	0x080075bc

080054b4 <__multadd>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	690d      	ldr	r5, [r1, #16]
 80054ba:	4607      	mov	r7, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	461e      	mov	r6, r3
 80054c0:	f101 0c14 	add.w	ip, r1, #20
 80054c4:	2000      	movs	r0, #0
 80054c6:	f8dc 3000 	ldr.w	r3, [ip]
 80054ca:	b299      	uxth	r1, r3
 80054cc:	fb02 6101 	mla	r1, r2, r1, r6
 80054d0:	0c1e      	lsrs	r6, r3, #16
 80054d2:	0c0b      	lsrs	r3, r1, #16
 80054d4:	fb02 3306 	mla	r3, r2, r6, r3
 80054d8:	b289      	uxth	r1, r1
 80054da:	3001      	adds	r0, #1
 80054dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054e0:	4285      	cmp	r5, r0
 80054e2:	f84c 1b04 	str.w	r1, [ip], #4
 80054e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054ea:	dcec      	bgt.n	80054c6 <__multadd+0x12>
 80054ec:	b30e      	cbz	r6, 8005532 <__multadd+0x7e>
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	42ab      	cmp	r3, r5
 80054f2:	dc19      	bgt.n	8005528 <__multadd+0x74>
 80054f4:	6861      	ldr	r1, [r4, #4]
 80054f6:	4638      	mov	r0, r7
 80054f8:	3101      	adds	r1, #1
 80054fa:	f7ff ff79 	bl	80053f0 <_Balloc>
 80054fe:	4680      	mov	r8, r0
 8005500:	b928      	cbnz	r0, 800550e <__multadd+0x5a>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0c      	ldr	r3, [pc, #48]	@ (8005538 <__multadd+0x84>)
 8005506:	480d      	ldr	r0, [pc, #52]	@ (800553c <__multadd+0x88>)
 8005508:	21ba      	movs	r1, #186	@ 0xba
 800550a:	f000 fe33 	bl	8006174 <__assert_func>
 800550e:	6922      	ldr	r2, [r4, #16]
 8005510:	3202      	adds	r2, #2
 8005512:	f104 010c 	add.w	r1, r4, #12
 8005516:	0092      	lsls	r2, r2, #2
 8005518:	300c      	adds	r0, #12
 800551a:	f7ff f800 	bl	800451e <memcpy>
 800551e:	4621      	mov	r1, r4
 8005520:	4638      	mov	r0, r7
 8005522:	f7ff ffa5 	bl	8005470 <_Bfree>
 8005526:	4644      	mov	r4, r8
 8005528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800552c:	3501      	adds	r5, #1
 800552e:	615e      	str	r6, [r3, #20]
 8005530:	6125      	str	r5, [r4, #16]
 8005532:	4620      	mov	r0, r4
 8005534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005538:	080075ab 	.word	0x080075ab
 800553c:	080075bc 	.word	0x080075bc

08005540 <__hi0bits>:
 8005540:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005544:	4603      	mov	r3, r0
 8005546:	bf36      	itet	cc
 8005548:	0403      	lslcc	r3, r0, #16
 800554a:	2000      	movcs	r0, #0
 800554c:	2010      	movcc	r0, #16
 800554e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005552:	bf3c      	itt	cc
 8005554:	021b      	lslcc	r3, r3, #8
 8005556:	3008      	addcc	r0, #8
 8005558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800555c:	bf3c      	itt	cc
 800555e:	011b      	lslcc	r3, r3, #4
 8005560:	3004      	addcc	r0, #4
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	bf3c      	itt	cc
 8005568:	009b      	lslcc	r3, r3, #2
 800556a:	3002      	addcc	r0, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	db05      	blt.n	800557c <__hi0bits+0x3c>
 8005570:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005574:	f100 0001 	add.w	r0, r0, #1
 8005578:	bf08      	it	eq
 800557a:	2020      	moveq	r0, #32
 800557c:	4770      	bx	lr

0800557e <__lo0bits>:
 800557e:	6803      	ldr	r3, [r0, #0]
 8005580:	4602      	mov	r2, r0
 8005582:	f013 0007 	ands.w	r0, r3, #7
 8005586:	d00b      	beq.n	80055a0 <__lo0bits+0x22>
 8005588:	07d9      	lsls	r1, r3, #31
 800558a:	d421      	bmi.n	80055d0 <__lo0bits+0x52>
 800558c:	0798      	lsls	r0, r3, #30
 800558e:	bf49      	itett	mi
 8005590:	085b      	lsrmi	r3, r3, #1
 8005592:	089b      	lsrpl	r3, r3, #2
 8005594:	2001      	movmi	r0, #1
 8005596:	6013      	strmi	r3, [r2, #0]
 8005598:	bf5c      	itt	pl
 800559a:	6013      	strpl	r3, [r2, #0]
 800559c:	2002      	movpl	r0, #2
 800559e:	4770      	bx	lr
 80055a0:	b299      	uxth	r1, r3
 80055a2:	b909      	cbnz	r1, 80055a8 <__lo0bits+0x2a>
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	2010      	movs	r0, #16
 80055a8:	b2d9      	uxtb	r1, r3
 80055aa:	b909      	cbnz	r1, 80055b0 <__lo0bits+0x32>
 80055ac:	3008      	adds	r0, #8
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	0719      	lsls	r1, r3, #28
 80055b2:	bf04      	itt	eq
 80055b4:	091b      	lsreq	r3, r3, #4
 80055b6:	3004      	addeq	r0, #4
 80055b8:	0799      	lsls	r1, r3, #30
 80055ba:	bf04      	itt	eq
 80055bc:	089b      	lsreq	r3, r3, #2
 80055be:	3002      	addeq	r0, #2
 80055c0:	07d9      	lsls	r1, r3, #31
 80055c2:	d403      	bmi.n	80055cc <__lo0bits+0x4e>
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	f100 0001 	add.w	r0, r0, #1
 80055ca:	d003      	beq.n	80055d4 <__lo0bits+0x56>
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4770      	bx	lr
 80055d0:	2000      	movs	r0, #0
 80055d2:	4770      	bx	lr
 80055d4:	2020      	movs	r0, #32
 80055d6:	4770      	bx	lr

080055d8 <__i2b>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	460c      	mov	r4, r1
 80055dc:	2101      	movs	r1, #1
 80055de:	f7ff ff07 	bl	80053f0 <_Balloc>
 80055e2:	4602      	mov	r2, r0
 80055e4:	b928      	cbnz	r0, 80055f2 <__i2b+0x1a>
 80055e6:	4b05      	ldr	r3, [pc, #20]	@ (80055fc <__i2b+0x24>)
 80055e8:	4805      	ldr	r0, [pc, #20]	@ (8005600 <__i2b+0x28>)
 80055ea:	f240 1145 	movw	r1, #325	@ 0x145
 80055ee:	f000 fdc1 	bl	8006174 <__assert_func>
 80055f2:	2301      	movs	r3, #1
 80055f4:	6144      	str	r4, [r0, #20]
 80055f6:	6103      	str	r3, [r0, #16]
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	bf00      	nop
 80055fc:	080075ab 	.word	0x080075ab
 8005600:	080075bc 	.word	0x080075bc

08005604 <__multiply>:
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	4617      	mov	r7, r2
 800560a:	690a      	ldr	r2, [r1, #16]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	bfa8      	it	ge
 8005612:	463b      	movge	r3, r7
 8005614:	4689      	mov	r9, r1
 8005616:	bfa4      	itt	ge
 8005618:	460f      	movge	r7, r1
 800561a:	4699      	movge	r9, r3
 800561c:	693d      	ldr	r5, [r7, #16]
 800561e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	eb05 060a 	add.w	r6, r5, sl
 800562a:	42b3      	cmp	r3, r6
 800562c:	b085      	sub	sp, #20
 800562e:	bfb8      	it	lt
 8005630:	3101      	addlt	r1, #1
 8005632:	f7ff fedd 	bl	80053f0 <_Balloc>
 8005636:	b930      	cbnz	r0, 8005646 <__multiply+0x42>
 8005638:	4602      	mov	r2, r0
 800563a:	4b41      	ldr	r3, [pc, #260]	@ (8005740 <__multiply+0x13c>)
 800563c:	4841      	ldr	r0, [pc, #260]	@ (8005744 <__multiply+0x140>)
 800563e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005642:	f000 fd97 	bl	8006174 <__assert_func>
 8005646:	f100 0414 	add.w	r4, r0, #20
 800564a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800564e:	4623      	mov	r3, r4
 8005650:	2200      	movs	r2, #0
 8005652:	4573      	cmp	r3, lr
 8005654:	d320      	bcc.n	8005698 <__multiply+0x94>
 8005656:	f107 0814 	add.w	r8, r7, #20
 800565a:	f109 0114 	add.w	r1, r9, #20
 800565e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005662:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005666:	9302      	str	r3, [sp, #8]
 8005668:	1beb      	subs	r3, r5, r7
 800566a:	3b15      	subs	r3, #21
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	3304      	adds	r3, #4
 8005672:	3715      	adds	r7, #21
 8005674:	42bd      	cmp	r5, r7
 8005676:	bf38      	it	cc
 8005678:	2304      	movcc	r3, #4
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	9b02      	ldr	r3, [sp, #8]
 800567e:	9103      	str	r1, [sp, #12]
 8005680:	428b      	cmp	r3, r1
 8005682:	d80c      	bhi.n	800569e <__multiply+0x9a>
 8005684:	2e00      	cmp	r6, #0
 8005686:	dd03      	ble.n	8005690 <__multiply+0x8c>
 8005688:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800568c:	2b00      	cmp	r3, #0
 800568e:	d055      	beq.n	800573c <__multiply+0x138>
 8005690:	6106      	str	r6, [r0, #16]
 8005692:	b005      	add	sp, #20
 8005694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005698:	f843 2b04 	str.w	r2, [r3], #4
 800569c:	e7d9      	b.n	8005652 <__multiply+0x4e>
 800569e:	f8b1 a000 	ldrh.w	sl, [r1]
 80056a2:	f1ba 0f00 	cmp.w	sl, #0
 80056a6:	d01f      	beq.n	80056e8 <__multiply+0xe4>
 80056a8:	46c4      	mov	ip, r8
 80056aa:	46a1      	mov	r9, r4
 80056ac:	2700      	movs	r7, #0
 80056ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80056b2:	f8d9 3000 	ldr.w	r3, [r9]
 80056b6:	fa1f fb82 	uxth.w	fp, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80056c0:	443b      	add	r3, r7
 80056c2:	f8d9 7000 	ldr.w	r7, [r9]
 80056c6:	0c12      	lsrs	r2, r2, #16
 80056c8:	0c3f      	lsrs	r7, r7, #16
 80056ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80056ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056d8:	4565      	cmp	r5, ip
 80056da:	f849 3b04 	str.w	r3, [r9], #4
 80056de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80056e2:	d8e4      	bhi.n	80056ae <__multiply+0xaa>
 80056e4:	9b01      	ldr	r3, [sp, #4]
 80056e6:	50e7      	str	r7, [r4, r3]
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80056ee:	3104      	adds	r1, #4
 80056f0:	f1b9 0f00 	cmp.w	r9, #0
 80056f4:	d020      	beq.n	8005738 <__multiply+0x134>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	4647      	mov	r7, r8
 80056fa:	46a4      	mov	ip, r4
 80056fc:	f04f 0a00 	mov.w	sl, #0
 8005700:	f8b7 b000 	ldrh.w	fp, [r7]
 8005704:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005708:	fb09 220b 	mla	r2, r9, fp, r2
 800570c:	4452      	add	r2, sl
 800570e:	b29b      	uxth	r3, r3
 8005710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005714:	f84c 3b04 	str.w	r3, [ip], #4
 8005718:	f857 3b04 	ldr.w	r3, [r7], #4
 800571c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005720:	f8bc 3000 	ldrh.w	r3, [ip]
 8005724:	fb09 330a 	mla	r3, r9, sl, r3
 8005728:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800572c:	42bd      	cmp	r5, r7
 800572e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005732:	d8e5      	bhi.n	8005700 <__multiply+0xfc>
 8005734:	9a01      	ldr	r2, [sp, #4]
 8005736:	50a3      	str	r3, [r4, r2]
 8005738:	3404      	adds	r4, #4
 800573a:	e79f      	b.n	800567c <__multiply+0x78>
 800573c:	3e01      	subs	r6, #1
 800573e:	e7a1      	b.n	8005684 <__multiply+0x80>
 8005740:	080075ab 	.word	0x080075ab
 8005744:	080075bc 	.word	0x080075bc

08005748 <__pow5mult>:
 8005748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574c:	4615      	mov	r5, r2
 800574e:	f012 0203 	ands.w	r2, r2, #3
 8005752:	4607      	mov	r7, r0
 8005754:	460e      	mov	r6, r1
 8005756:	d007      	beq.n	8005768 <__pow5mult+0x20>
 8005758:	4c25      	ldr	r4, [pc, #148]	@ (80057f0 <__pow5mult+0xa8>)
 800575a:	3a01      	subs	r2, #1
 800575c:	2300      	movs	r3, #0
 800575e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005762:	f7ff fea7 	bl	80054b4 <__multadd>
 8005766:	4606      	mov	r6, r0
 8005768:	10ad      	asrs	r5, r5, #2
 800576a:	d03d      	beq.n	80057e8 <__pow5mult+0xa0>
 800576c:	69fc      	ldr	r4, [r7, #28]
 800576e:	b97c      	cbnz	r4, 8005790 <__pow5mult+0x48>
 8005770:	2010      	movs	r0, #16
 8005772:	f7ff fd87 	bl	8005284 <malloc>
 8005776:	4602      	mov	r2, r0
 8005778:	61f8      	str	r0, [r7, #28]
 800577a:	b928      	cbnz	r0, 8005788 <__pow5mult+0x40>
 800577c:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <__pow5mult+0xac>)
 800577e:	481e      	ldr	r0, [pc, #120]	@ (80057f8 <__pow5mult+0xb0>)
 8005780:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005784:	f000 fcf6 	bl	8006174 <__assert_func>
 8005788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800578c:	6004      	str	r4, [r0, #0]
 800578e:	60c4      	str	r4, [r0, #12]
 8005790:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005798:	b94c      	cbnz	r4, 80057ae <__pow5mult+0x66>
 800579a:	f240 2171 	movw	r1, #625	@ 0x271
 800579e:	4638      	mov	r0, r7
 80057a0:	f7ff ff1a 	bl	80055d8 <__i2b>
 80057a4:	2300      	movs	r3, #0
 80057a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80057aa:	4604      	mov	r4, r0
 80057ac:	6003      	str	r3, [r0, #0]
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	07eb      	lsls	r3, r5, #31
 80057b4:	d50a      	bpl.n	80057cc <__pow5mult+0x84>
 80057b6:	4631      	mov	r1, r6
 80057b8:	4622      	mov	r2, r4
 80057ba:	4638      	mov	r0, r7
 80057bc:	f7ff ff22 	bl	8005604 <__multiply>
 80057c0:	4631      	mov	r1, r6
 80057c2:	4680      	mov	r8, r0
 80057c4:	4638      	mov	r0, r7
 80057c6:	f7ff fe53 	bl	8005470 <_Bfree>
 80057ca:	4646      	mov	r6, r8
 80057cc:	106d      	asrs	r5, r5, #1
 80057ce:	d00b      	beq.n	80057e8 <__pow5mult+0xa0>
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	b938      	cbnz	r0, 80057e4 <__pow5mult+0x9c>
 80057d4:	4622      	mov	r2, r4
 80057d6:	4621      	mov	r1, r4
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ff13 	bl	8005604 <__multiply>
 80057de:	6020      	str	r0, [r4, #0]
 80057e0:	f8c0 9000 	str.w	r9, [r0]
 80057e4:	4604      	mov	r4, r0
 80057e6:	e7e4      	b.n	80057b2 <__pow5mult+0x6a>
 80057e8:	4630      	mov	r0, r6
 80057ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ee:	bf00      	nop
 80057f0:	0800766c 	.word	0x0800766c
 80057f4:	0800753c 	.word	0x0800753c
 80057f8:	080075bc 	.word	0x080075bc

080057fc <__lshift>:
 80057fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	460c      	mov	r4, r1
 8005802:	6849      	ldr	r1, [r1, #4]
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800580a:	68a3      	ldr	r3, [r4, #8]
 800580c:	4607      	mov	r7, r0
 800580e:	4691      	mov	r9, r2
 8005810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005814:	f108 0601 	add.w	r6, r8, #1
 8005818:	42b3      	cmp	r3, r6
 800581a:	db0b      	blt.n	8005834 <__lshift+0x38>
 800581c:	4638      	mov	r0, r7
 800581e:	f7ff fde7 	bl	80053f0 <_Balloc>
 8005822:	4605      	mov	r5, r0
 8005824:	b948      	cbnz	r0, 800583a <__lshift+0x3e>
 8005826:	4602      	mov	r2, r0
 8005828:	4b28      	ldr	r3, [pc, #160]	@ (80058cc <__lshift+0xd0>)
 800582a:	4829      	ldr	r0, [pc, #164]	@ (80058d0 <__lshift+0xd4>)
 800582c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005830:	f000 fca0 	bl	8006174 <__assert_func>
 8005834:	3101      	adds	r1, #1
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	e7ee      	b.n	8005818 <__lshift+0x1c>
 800583a:	2300      	movs	r3, #0
 800583c:	f100 0114 	add.w	r1, r0, #20
 8005840:	f100 0210 	add.w	r2, r0, #16
 8005844:	4618      	mov	r0, r3
 8005846:	4553      	cmp	r3, sl
 8005848:	db33      	blt.n	80058b2 <__lshift+0xb6>
 800584a:	6920      	ldr	r0, [r4, #16]
 800584c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005850:	f104 0314 	add.w	r3, r4, #20
 8005854:	f019 091f 	ands.w	r9, r9, #31
 8005858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800585c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005860:	d02b      	beq.n	80058ba <__lshift+0xbe>
 8005862:	f1c9 0e20 	rsb	lr, r9, #32
 8005866:	468a      	mov	sl, r1
 8005868:	2200      	movs	r2, #0
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	fa00 f009 	lsl.w	r0, r0, r9
 8005870:	4310      	orrs	r0, r2
 8005872:	f84a 0b04 	str.w	r0, [sl], #4
 8005876:	f853 2b04 	ldr.w	r2, [r3], #4
 800587a:	459c      	cmp	ip, r3
 800587c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005880:	d8f3      	bhi.n	800586a <__lshift+0x6e>
 8005882:	ebac 0304 	sub.w	r3, ip, r4
 8005886:	3b15      	subs	r3, #21
 8005888:	f023 0303 	bic.w	r3, r3, #3
 800588c:	3304      	adds	r3, #4
 800588e:	f104 0015 	add.w	r0, r4, #21
 8005892:	4560      	cmp	r0, ip
 8005894:	bf88      	it	hi
 8005896:	2304      	movhi	r3, #4
 8005898:	50ca      	str	r2, [r1, r3]
 800589a:	b10a      	cbz	r2, 80058a0 <__lshift+0xa4>
 800589c:	f108 0602 	add.w	r6, r8, #2
 80058a0:	3e01      	subs	r6, #1
 80058a2:	4638      	mov	r0, r7
 80058a4:	612e      	str	r6, [r5, #16]
 80058a6:	4621      	mov	r1, r4
 80058a8:	f7ff fde2 	bl	8005470 <_Bfree>
 80058ac:	4628      	mov	r0, r5
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80058b6:	3301      	adds	r3, #1
 80058b8:	e7c5      	b.n	8005846 <__lshift+0x4a>
 80058ba:	3904      	subs	r1, #4
 80058bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80058c4:	459c      	cmp	ip, r3
 80058c6:	d8f9      	bhi.n	80058bc <__lshift+0xc0>
 80058c8:	e7ea      	b.n	80058a0 <__lshift+0xa4>
 80058ca:	bf00      	nop
 80058cc:	080075ab 	.word	0x080075ab
 80058d0:	080075bc 	.word	0x080075bc

080058d4 <__mcmp>:
 80058d4:	690a      	ldr	r2, [r1, #16]
 80058d6:	4603      	mov	r3, r0
 80058d8:	6900      	ldr	r0, [r0, #16]
 80058da:	1a80      	subs	r0, r0, r2
 80058dc:	b530      	push	{r4, r5, lr}
 80058de:	d10e      	bne.n	80058fe <__mcmp+0x2a>
 80058e0:	3314      	adds	r3, #20
 80058e2:	3114      	adds	r1, #20
 80058e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80058e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80058ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058f4:	4295      	cmp	r5, r2
 80058f6:	d003      	beq.n	8005900 <__mcmp+0x2c>
 80058f8:	d205      	bcs.n	8005906 <__mcmp+0x32>
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	bd30      	pop	{r4, r5, pc}
 8005900:	42a3      	cmp	r3, r4
 8005902:	d3f3      	bcc.n	80058ec <__mcmp+0x18>
 8005904:	e7fb      	b.n	80058fe <__mcmp+0x2a>
 8005906:	2001      	movs	r0, #1
 8005908:	e7f9      	b.n	80058fe <__mcmp+0x2a>
	...

0800590c <__mdiff>:
 800590c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	4689      	mov	r9, r1
 8005912:	4606      	mov	r6, r0
 8005914:	4611      	mov	r1, r2
 8005916:	4648      	mov	r0, r9
 8005918:	4614      	mov	r4, r2
 800591a:	f7ff ffdb 	bl	80058d4 <__mcmp>
 800591e:	1e05      	subs	r5, r0, #0
 8005920:	d112      	bne.n	8005948 <__mdiff+0x3c>
 8005922:	4629      	mov	r1, r5
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff fd63 	bl	80053f0 <_Balloc>
 800592a:	4602      	mov	r2, r0
 800592c:	b928      	cbnz	r0, 800593a <__mdiff+0x2e>
 800592e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a2c <__mdiff+0x120>)
 8005930:	f240 2137 	movw	r1, #567	@ 0x237
 8005934:	483e      	ldr	r0, [pc, #248]	@ (8005a30 <__mdiff+0x124>)
 8005936:	f000 fc1d 	bl	8006174 <__assert_func>
 800593a:	2301      	movs	r3, #1
 800593c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005940:	4610      	mov	r0, r2
 8005942:	b003      	add	sp, #12
 8005944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005948:	bfbc      	itt	lt
 800594a:	464b      	movlt	r3, r9
 800594c:	46a1      	movlt	r9, r4
 800594e:	4630      	mov	r0, r6
 8005950:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005954:	bfba      	itte	lt
 8005956:	461c      	movlt	r4, r3
 8005958:	2501      	movlt	r5, #1
 800595a:	2500      	movge	r5, #0
 800595c:	f7ff fd48 	bl	80053f0 <_Balloc>
 8005960:	4602      	mov	r2, r0
 8005962:	b918      	cbnz	r0, 800596c <__mdiff+0x60>
 8005964:	4b31      	ldr	r3, [pc, #196]	@ (8005a2c <__mdiff+0x120>)
 8005966:	f240 2145 	movw	r1, #581	@ 0x245
 800596a:	e7e3      	b.n	8005934 <__mdiff+0x28>
 800596c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005970:	6926      	ldr	r6, [r4, #16]
 8005972:	60c5      	str	r5, [r0, #12]
 8005974:	f109 0310 	add.w	r3, r9, #16
 8005978:	f109 0514 	add.w	r5, r9, #20
 800597c:	f104 0e14 	add.w	lr, r4, #20
 8005980:	f100 0b14 	add.w	fp, r0, #20
 8005984:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005988:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	46d9      	mov	r9, fp
 8005990:	f04f 0c00 	mov.w	ip, #0
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	f85e 0b04 	ldr.w	r0, [lr], #4
 800599a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	fa1f f38a 	uxth.w	r3, sl
 80059a4:	4619      	mov	r1, r3
 80059a6:	b283      	uxth	r3, r0
 80059a8:	1acb      	subs	r3, r1, r3
 80059aa:	0c00      	lsrs	r0, r0, #16
 80059ac:	4463      	add	r3, ip
 80059ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059bc:	4576      	cmp	r6, lr
 80059be:	f849 3b04 	str.w	r3, [r9], #4
 80059c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059c6:	d8e5      	bhi.n	8005994 <__mdiff+0x88>
 80059c8:	1b33      	subs	r3, r6, r4
 80059ca:	3b15      	subs	r3, #21
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	3415      	adds	r4, #21
 80059d2:	3304      	adds	r3, #4
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	bf38      	it	cc
 80059d8:	2304      	movcc	r3, #4
 80059da:	441d      	add	r5, r3
 80059dc:	445b      	add	r3, fp
 80059de:	461e      	mov	r6, r3
 80059e0:	462c      	mov	r4, r5
 80059e2:	4544      	cmp	r4, r8
 80059e4:	d30e      	bcc.n	8005a04 <__mdiff+0xf8>
 80059e6:	f108 0103 	add.w	r1, r8, #3
 80059ea:	1b49      	subs	r1, r1, r5
 80059ec:	f021 0103 	bic.w	r1, r1, #3
 80059f0:	3d03      	subs	r5, #3
 80059f2:	45a8      	cmp	r8, r5
 80059f4:	bf38      	it	cc
 80059f6:	2100      	movcc	r1, #0
 80059f8:	440b      	add	r3, r1
 80059fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059fe:	b191      	cbz	r1, 8005a26 <__mdiff+0x11a>
 8005a00:	6117      	str	r7, [r2, #16]
 8005a02:	e79d      	b.n	8005940 <__mdiff+0x34>
 8005a04:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a08:	46e6      	mov	lr, ip
 8005a0a:	0c08      	lsrs	r0, r1, #16
 8005a0c:	fa1c fc81 	uxtah	ip, ip, r1
 8005a10:	4471      	add	r1, lr
 8005a12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a16:	b289      	uxth	r1, r1
 8005a18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a1c:	f846 1b04 	str.w	r1, [r6], #4
 8005a20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a24:	e7dd      	b.n	80059e2 <__mdiff+0xd6>
 8005a26:	3f01      	subs	r7, #1
 8005a28:	e7e7      	b.n	80059fa <__mdiff+0xee>
 8005a2a:	bf00      	nop
 8005a2c:	080075ab 	.word	0x080075ab
 8005a30:	080075bc 	.word	0x080075bc

08005a34 <__d2b>:
 8005a34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a38:	460f      	mov	r7, r1
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	ec59 8b10 	vmov	r8, r9, d0
 8005a40:	4616      	mov	r6, r2
 8005a42:	f7ff fcd5 	bl	80053f0 <_Balloc>
 8005a46:	4604      	mov	r4, r0
 8005a48:	b930      	cbnz	r0, 8005a58 <__d2b+0x24>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	4b23      	ldr	r3, [pc, #140]	@ (8005adc <__d2b+0xa8>)
 8005a4e:	4824      	ldr	r0, [pc, #144]	@ (8005ae0 <__d2b+0xac>)
 8005a50:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a54:	f000 fb8e 	bl	8006174 <__assert_func>
 8005a58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a60:	b10d      	cbz	r5, 8005a66 <__d2b+0x32>
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	f1b8 0300 	subs.w	r3, r8, #0
 8005a6c:	d023      	beq.n	8005ab6 <__d2b+0x82>
 8005a6e:	4668      	mov	r0, sp
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	f7ff fd84 	bl	800557e <__lo0bits>
 8005a76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a7a:	b1d0      	cbz	r0, 8005ab2 <__d2b+0x7e>
 8005a7c:	f1c0 0320 	rsb	r3, r0, #32
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	430b      	orrs	r3, r1
 8005a86:	40c2      	lsrs	r2, r0
 8005a88:	6163      	str	r3, [r4, #20]
 8005a8a:	9201      	str	r2, [sp, #4]
 8005a8c:	9b01      	ldr	r3, [sp, #4]
 8005a8e:	61a3      	str	r3, [r4, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf0c      	ite	eq
 8005a94:	2201      	moveq	r2, #1
 8005a96:	2202      	movne	r2, #2
 8005a98:	6122      	str	r2, [r4, #16]
 8005a9a:	b1a5      	cbz	r5, 8005ac6 <__d2b+0x92>
 8005a9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005aa0:	4405      	add	r5, r0
 8005aa2:	603d      	str	r5, [r7, #0]
 8005aa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005aa8:	6030      	str	r0, [r6, #0]
 8005aaa:	4620      	mov	r0, r4
 8005aac:	b003      	add	sp, #12
 8005aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ab2:	6161      	str	r1, [r4, #20]
 8005ab4:	e7ea      	b.n	8005a8c <__d2b+0x58>
 8005ab6:	a801      	add	r0, sp, #4
 8005ab8:	f7ff fd61 	bl	800557e <__lo0bits>
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	6163      	str	r3, [r4, #20]
 8005ac0:	3020      	adds	r0, #32
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	e7e8      	b.n	8005a98 <__d2b+0x64>
 8005ac6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005aca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ace:	6038      	str	r0, [r7, #0]
 8005ad0:	6918      	ldr	r0, [r3, #16]
 8005ad2:	f7ff fd35 	bl	8005540 <__hi0bits>
 8005ad6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ada:	e7e5      	b.n	8005aa8 <__d2b+0x74>
 8005adc:	080075ab 	.word	0x080075ab
 8005ae0:	080075bc 	.word	0x080075bc

08005ae4 <__ssputs_r>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	688e      	ldr	r6, [r1, #8]
 8005aea:	461f      	mov	r7, r3
 8005aec:	42be      	cmp	r6, r7
 8005aee:	680b      	ldr	r3, [r1, #0]
 8005af0:	4682      	mov	sl, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	4690      	mov	r8, r2
 8005af6:	d82d      	bhi.n	8005b54 <__ssputs_r+0x70>
 8005af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005afc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b00:	d026      	beq.n	8005b50 <__ssputs_r+0x6c>
 8005b02:	6965      	ldr	r5, [r4, #20]
 8005b04:	6909      	ldr	r1, [r1, #16]
 8005b06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b0a:	eba3 0901 	sub.w	r9, r3, r1
 8005b0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b12:	1c7b      	adds	r3, r7, #1
 8005b14:	444b      	add	r3, r9
 8005b16:	106d      	asrs	r5, r5, #1
 8005b18:	429d      	cmp	r5, r3
 8005b1a:	bf38      	it	cc
 8005b1c:	461d      	movcc	r5, r3
 8005b1e:	0553      	lsls	r3, r2, #21
 8005b20:	d527      	bpl.n	8005b72 <__ssputs_r+0x8e>
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7ff fbd8 	bl	80052d8 <_malloc_r>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	b360      	cbz	r0, 8005b86 <__ssputs_r+0xa2>
 8005b2c:	6921      	ldr	r1, [r4, #16]
 8005b2e:	464a      	mov	r2, r9
 8005b30:	f7fe fcf5 	bl	800451e <memcpy>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	6126      	str	r6, [r4, #16]
 8005b42:	6165      	str	r5, [r4, #20]
 8005b44:	444e      	add	r6, r9
 8005b46:	eba5 0509 	sub.w	r5, r5, r9
 8005b4a:	6026      	str	r6, [r4, #0]
 8005b4c:	60a5      	str	r5, [r4, #8]
 8005b4e:	463e      	mov	r6, r7
 8005b50:	42be      	cmp	r6, r7
 8005b52:	d900      	bls.n	8005b56 <__ssputs_r+0x72>
 8005b54:	463e      	mov	r6, r7
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4641      	mov	r1, r8
 8005b5c:	f000 fabe 	bl	80060dc <memmove>
 8005b60:	68a3      	ldr	r3, [r4, #8]
 8005b62:	1b9b      	subs	r3, r3, r6
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	4433      	add	r3, r6
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b72:	462a      	mov	r2, r5
 8005b74:	f000 fb42 	bl	80061fc <_realloc_r>
 8005b78:	4606      	mov	r6, r0
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d1e0      	bne.n	8005b40 <__ssputs_r+0x5c>
 8005b7e:	6921      	ldr	r1, [r4, #16]
 8005b80:	4650      	mov	r0, sl
 8005b82:	f7ff fb35 	bl	80051f0 <_free_r>
 8005b86:	230c      	movs	r3, #12
 8005b88:	f8ca 3000 	str.w	r3, [sl]
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e7e9      	b.n	8005b6e <__ssputs_r+0x8a>
	...

08005b9c <_svfiprintf_r>:
 8005b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	898b      	ldrh	r3, [r1, #12]
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	b09d      	sub	sp, #116	@ 0x74
 8005ba8:	4607      	mov	r7, r0
 8005baa:	460d      	mov	r5, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	d510      	bpl.n	8005bd2 <_svfiprintf_r+0x36>
 8005bb0:	690b      	ldr	r3, [r1, #16]
 8005bb2:	b973      	cbnz	r3, 8005bd2 <_svfiprintf_r+0x36>
 8005bb4:	2140      	movs	r1, #64	@ 0x40
 8005bb6:	f7ff fb8f 	bl	80052d8 <_malloc_r>
 8005bba:	6028      	str	r0, [r5, #0]
 8005bbc:	6128      	str	r0, [r5, #16]
 8005bbe:	b930      	cbnz	r0, 8005bce <_svfiprintf_r+0x32>
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	b01d      	add	sp, #116	@ 0x74
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	2340      	movs	r3, #64	@ 0x40
 8005bd0:	616b      	str	r3, [r5, #20]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be0:	2330      	movs	r3, #48	@ 0x30
 8005be2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d80 <_svfiprintf_r+0x1e4>
 8005be6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bea:	f04f 0901 	mov.w	r9, #1
 8005bee:	4623      	mov	r3, r4
 8005bf0:	469a      	mov	sl, r3
 8005bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf6:	b10a      	cbz	r2, 8005bfc <_svfiprintf_r+0x60>
 8005bf8:	2a25      	cmp	r2, #37	@ 0x25
 8005bfa:	d1f9      	bne.n	8005bf0 <_svfiprintf_r+0x54>
 8005bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8005c00:	d00b      	beq.n	8005c1a <_svfiprintf_r+0x7e>
 8005c02:	465b      	mov	r3, fp
 8005c04:	4622      	mov	r2, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	4638      	mov	r0, r7
 8005c0a:	f7ff ff6b 	bl	8005ae4 <__ssputs_r>
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f000 80a7 	beq.w	8005d62 <_svfiprintf_r+0x1c6>
 8005c14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c16:	445a      	add	r2, fp
 8005c18:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 809f 	beq.w	8005d62 <_svfiprintf_r+0x1c6>
 8005c24:	2300      	movs	r3, #0
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c2e:	f10a 0a01 	add.w	sl, sl, #1
 8005c32:	9304      	str	r3, [sp, #16]
 8005c34:	9307      	str	r3, [sp, #28]
 8005c36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c3c:	4654      	mov	r4, sl
 8005c3e:	2205      	movs	r2, #5
 8005c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c44:	484e      	ldr	r0, [pc, #312]	@ (8005d80 <_svfiprintf_r+0x1e4>)
 8005c46:	f7fa fac3 	bl	80001d0 <memchr>
 8005c4a:	9a04      	ldr	r2, [sp, #16]
 8005c4c:	b9d8      	cbnz	r0, 8005c86 <_svfiprintf_r+0xea>
 8005c4e:	06d0      	lsls	r0, r2, #27
 8005c50:	bf44      	itt	mi
 8005c52:	2320      	movmi	r3, #32
 8005c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c58:	0711      	lsls	r1, r2, #28
 8005c5a:	bf44      	itt	mi
 8005c5c:	232b      	movmi	r3, #43	@ 0x2b
 8005c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c62:	f89a 3000 	ldrb.w	r3, [sl]
 8005c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c68:	d015      	beq.n	8005c96 <_svfiprintf_r+0xfa>
 8005c6a:	9a07      	ldr	r2, [sp, #28]
 8005c6c:	4654      	mov	r4, sl
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f04f 0c0a 	mov.w	ip, #10
 8005c74:	4621      	mov	r1, r4
 8005c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c7a:	3b30      	subs	r3, #48	@ 0x30
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d94b      	bls.n	8005d18 <_svfiprintf_r+0x17c>
 8005c80:	b1b0      	cbz	r0, 8005cb0 <_svfiprintf_r+0x114>
 8005c82:	9207      	str	r2, [sp, #28]
 8005c84:	e014      	b.n	8005cb0 <_svfiprintf_r+0x114>
 8005c86:	eba0 0308 	sub.w	r3, r0, r8
 8005c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	46a2      	mov	sl, r4
 8005c94:	e7d2      	b.n	8005c3c <_svfiprintf_r+0xa0>
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	1d19      	adds	r1, r3, #4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	9103      	str	r1, [sp, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfbb      	ittet	lt
 8005ca2:	425b      	neglt	r3, r3
 8005ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ca8:	9307      	strge	r3, [sp, #28]
 8005caa:	9307      	strlt	r3, [sp, #28]
 8005cac:	bfb8      	it	lt
 8005cae:	9204      	strlt	r2, [sp, #16]
 8005cb0:	7823      	ldrb	r3, [r4, #0]
 8005cb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cb4:	d10a      	bne.n	8005ccc <_svfiprintf_r+0x130>
 8005cb6:	7863      	ldrb	r3, [r4, #1]
 8005cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cba:	d132      	bne.n	8005d22 <_svfiprintf_r+0x186>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	1d1a      	adds	r2, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	9203      	str	r2, [sp, #12]
 8005cc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cc8:	3402      	adds	r4, #2
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d90 <_svfiprintf_r+0x1f4>
 8005cd0:	7821      	ldrb	r1, [r4, #0]
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f7fa fa7b 	bl	80001d0 <memchr>
 8005cda:	b138      	cbz	r0, 8005cec <_svfiprintf_r+0x150>
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	eba0 000a 	sub.w	r0, r0, sl
 8005ce2:	2240      	movs	r2, #64	@ 0x40
 8005ce4:	4082      	lsls	r2, r0
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	3401      	adds	r4, #1
 8005cea:	9304      	str	r3, [sp, #16]
 8005cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf0:	4824      	ldr	r0, [pc, #144]	@ (8005d84 <_svfiprintf_r+0x1e8>)
 8005cf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cf6:	2206      	movs	r2, #6
 8005cf8:	f7fa fa6a 	bl	80001d0 <memchr>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d036      	beq.n	8005d6e <_svfiprintf_r+0x1d2>
 8005d00:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <_svfiprintf_r+0x1ec>)
 8005d02:	bb1b      	cbnz	r3, 8005d4c <_svfiprintf_r+0x1b0>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	3307      	adds	r3, #7
 8005d08:	f023 0307 	bic.w	r3, r3, #7
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	9303      	str	r3, [sp, #12]
 8005d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d12:	4433      	add	r3, r6
 8005d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d16:	e76a      	b.n	8005bee <_svfiprintf_r+0x52>
 8005d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	2001      	movs	r0, #1
 8005d20:	e7a8      	b.n	8005c74 <_svfiprintf_r+0xd8>
 8005d22:	2300      	movs	r3, #0
 8005d24:	3401      	adds	r4, #1
 8005d26:	9305      	str	r3, [sp, #20]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f04f 0c0a 	mov.w	ip, #10
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d34:	3a30      	subs	r2, #48	@ 0x30
 8005d36:	2a09      	cmp	r2, #9
 8005d38:	d903      	bls.n	8005d42 <_svfiprintf_r+0x1a6>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0c6      	beq.n	8005ccc <_svfiprintf_r+0x130>
 8005d3e:	9105      	str	r1, [sp, #20]
 8005d40:	e7c4      	b.n	8005ccc <_svfiprintf_r+0x130>
 8005d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d46:	4604      	mov	r4, r0
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e7f0      	b.n	8005d2e <_svfiprintf_r+0x192>
 8005d4c:	ab03      	add	r3, sp, #12
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4b0e      	ldr	r3, [pc, #56]	@ (8005d8c <_svfiprintf_r+0x1f0>)
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	4638      	mov	r0, r7
 8005d58:	f7fd fc88 	bl	800366c <_printf_float>
 8005d5c:	1c42      	adds	r2, r0, #1
 8005d5e:	4606      	mov	r6, r0
 8005d60:	d1d6      	bne.n	8005d10 <_svfiprintf_r+0x174>
 8005d62:	89ab      	ldrh	r3, [r5, #12]
 8005d64:	065b      	lsls	r3, r3, #25
 8005d66:	f53f af2d 	bmi.w	8005bc4 <_svfiprintf_r+0x28>
 8005d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d6c:	e72c      	b.n	8005bc8 <_svfiprintf_r+0x2c>
 8005d6e:	ab03      	add	r3, sp, #12
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	462a      	mov	r2, r5
 8005d74:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <_svfiprintf_r+0x1f0>)
 8005d76:	a904      	add	r1, sp, #16
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7fd ff0f 	bl	8003b9c <_printf_i>
 8005d7e:	e7ed      	b.n	8005d5c <_svfiprintf_r+0x1c0>
 8005d80:	08007615 	.word	0x08007615
 8005d84:	0800761f 	.word	0x0800761f
 8005d88:	0800366d 	.word	0x0800366d
 8005d8c:	08005ae5 	.word	0x08005ae5
 8005d90:	0800761b 	.word	0x0800761b

08005d94 <__sfputc_r>:
 8005d94:	6893      	ldr	r3, [r2, #8]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	b410      	push	{r4}
 8005d9c:	6093      	str	r3, [r2, #8]
 8005d9e:	da08      	bge.n	8005db2 <__sfputc_r+0x1e>
 8005da0:	6994      	ldr	r4, [r2, #24]
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	db01      	blt.n	8005daa <__sfputc_r+0x16>
 8005da6:	290a      	cmp	r1, #10
 8005da8:	d103      	bne.n	8005db2 <__sfputc_r+0x1e>
 8005daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dae:	f7fe bab4 	b.w	800431a <__swbuf_r>
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	1c58      	adds	r0, r3, #1
 8005db6:	6010      	str	r0, [r2, #0]
 8005db8:	7019      	strb	r1, [r3, #0]
 8005dba:	4608      	mov	r0, r1
 8005dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <__sfputs_r>:
 8005dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	460f      	mov	r7, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	18d5      	adds	r5, r2, r3
 8005dcc:	42ac      	cmp	r4, r5
 8005dce:	d101      	bne.n	8005dd4 <__sfputs_r+0x12>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e007      	b.n	8005de4 <__sfputs_r+0x22>
 8005dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd8:	463a      	mov	r2, r7
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ffda 	bl	8005d94 <__sfputc_r>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d1f3      	bne.n	8005dcc <__sfputs_r+0xa>
 8005de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005de8 <_vfiprintf_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	460d      	mov	r5, r1
 8005dee:	b09d      	sub	sp, #116	@ 0x74
 8005df0:	4614      	mov	r4, r2
 8005df2:	4698      	mov	r8, r3
 8005df4:	4606      	mov	r6, r0
 8005df6:	b118      	cbz	r0, 8005e00 <_vfiprintf_r+0x18>
 8005df8:	6a03      	ldr	r3, [r0, #32]
 8005dfa:	b90b      	cbnz	r3, 8005e00 <_vfiprintf_r+0x18>
 8005dfc:	f7fe f924 	bl	8004048 <__sinit>
 8005e00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e02:	07d9      	lsls	r1, r3, #31
 8005e04:	d405      	bmi.n	8005e12 <_vfiprintf_r+0x2a>
 8005e06:	89ab      	ldrh	r3, [r5, #12]
 8005e08:	059a      	lsls	r2, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <_vfiprintf_r+0x2a>
 8005e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e0e:	f7fe fb84 	bl	800451a <__retarget_lock_acquire_recursive>
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	071b      	lsls	r3, r3, #28
 8005e16:	d501      	bpl.n	8005e1c <_vfiprintf_r+0x34>
 8005e18:	692b      	ldr	r3, [r5, #16]
 8005e1a:	b99b      	cbnz	r3, 8005e44 <_vfiprintf_r+0x5c>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7fe faba 	bl	8004398 <__swsetup_r>
 8005e24:	b170      	cbz	r0, 8005e44 <_vfiprintf_r+0x5c>
 8005e26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e28:	07dc      	lsls	r4, r3, #31
 8005e2a:	d504      	bpl.n	8005e36 <_vfiprintf_r+0x4e>
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	b01d      	add	sp, #116	@ 0x74
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	0598      	lsls	r0, r3, #22
 8005e3a:	d4f7      	bmi.n	8005e2c <_vfiprintf_r+0x44>
 8005e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e3e:	f7fe fb6d 	bl	800451c <__retarget_lock_release_recursive>
 8005e42:	e7f3      	b.n	8005e2c <_vfiprintf_r+0x44>
 8005e44:	2300      	movs	r3, #0
 8005e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e48:	2320      	movs	r3, #32
 8005e4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e52:	2330      	movs	r3, #48	@ 0x30
 8005e54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006004 <_vfiprintf_r+0x21c>
 8005e58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e5c:	f04f 0901 	mov.w	r9, #1
 8005e60:	4623      	mov	r3, r4
 8005e62:	469a      	mov	sl, r3
 8005e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e68:	b10a      	cbz	r2, 8005e6e <_vfiprintf_r+0x86>
 8005e6a:	2a25      	cmp	r2, #37	@ 0x25
 8005e6c:	d1f9      	bne.n	8005e62 <_vfiprintf_r+0x7a>
 8005e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e72:	d00b      	beq.n	8005e8c <_vfiprintf_r+0xa4>
 8005e74:	465b      	mov	r3, fp
 8005e76:	4622      	mov	r2, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7ff ffa1 	bl	8005dc2 <__sfputs_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	f000 80a7 	beq.w	8005fd4 <_vfiprintf_r+0x1ec>
 8005e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e88:	445a      	add	r2, fp
 8005e8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 809f 	beq.w	8005fd4 <_vfiprintf_r+0x1ec>
 8005e96:	2300      	movs	r3, #0
 8005e98:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea0:	f10a 0a01 	add.w	sl, sl, #1
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eac:	931a      	str	r3, [sp, #104]	@ 0x68
 8005eae:	4654      	mov	r4, sl
 8005eb0:	2205      	movs	r2, #5
 8005eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb6:	4853      	ldr	r0, [pc, #332]	@ (8006004 <_vfiprintf_r+0x21c>)
 8005eb8:	f7fa f98a 	bl	80001d0 <memchr>
 8005ebc:	9a04      	ldr	r2, [sp, #16]
 8005ebe:	b9d8      	cbnz	r0, 8005ef8 <_vfiprintf_r+0x110>
 8005ec0:	06d1      	lsls	r1, r2, #27
 8005ec2:	bf44      	itt	mi
 8005ec4:	2320      	movmi	r3, #32
 8005ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eca:	0713      	lsls	r3, r2, #28
 8005ecc:	bf44      	itt	mi
 8005ece:	232b      	movmi	r3, #43	@ 0x2b
 8005ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eda:	d015      	beq.n	8005f08 <_vfiprintf_r+0x120>
 8005edc:	9a07      	ldr	r2, [sp, #28]
 8005ede:	4654      	mov	r4, sl
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f04f 0c0a 	mov.w	ip, #10
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eec:	3b30      	subs	r3, #48	@ 0x30
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	d94b      	bls.n	8005f8a <_vfiprintf_r+0x1a2>
 8005ef2:	b1b0      	cbz	r0, 8005f22 <_vfiprintf_r+0x13a>
 8005ef4:	9207      	str	r2, [sp, #28]
 8005ef6:	e014      	b.n	8005f22 <_vfiprintf_r+0x13a>
 8005ef8:	eba0 0308 	sub.w	r3, r0, r8
 8005efc:	fa09 f303 	lsl.w	r3, r9, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	46a2      	mov	sl, r4
 8005f06:	e7d2      	b.n	8005eae <_vfiprintf_r+0xc6>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	1d19      	adds	r1, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	9103      	str	r1, [sp, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfbb      	ittet	lt
 8005f14:	425b      	neglt	r3, r3
 8005f16:	f042 0202 	orrlt.w	r2, r2, #2
 8005f1a:	9307      	strge	r3, [sp, #28]
 8005f1c:	9307      	strlt	r3, [sp, #28]
 8005f1e:	bfb8      	it	lt
 8005f20:	9204      	strlt	r2, [sp, #16]
 8005f22:	7823      	ldrb	r3, [r4, #0]
 8005f24:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f26:	d10a      	bne.n	8005f3e <_vfiprintf_r+0x156>
 8005f28:	7863      	ldrb	r3, [r4, #1]
 8005f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f2c:	d132      	bne.n	8005f94 <_vfiprintf_r+0x1ac>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	1d1a      	adds	r2, r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	9203      	str	r2, [sp, #12]
 8005f36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f3a:	3402      	adds	r4, #2
 8005f3c:	9305      	str	r3, [sp, #20]
 8005f3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006014 <_vfiprintf_r+0x22c>
 8005f42:	7821      	ldrb	r1, [r4, #0]
 8005f44:	2203      	movs	r2, #3
 8005f46:	4650      	mov	r0, sl
 8005f48:	f7fa f942 	bl	80001d0 <memchr>
 8005f4c:	b138      	cbz	r0, 8005f5e <_vfiprintf_r+0x176>
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	eba0 000a 	sub.w	r0, r0, sl
 8005f54:	2240      	movs	r2, #64	@ 0x40
 8005f56:	4082      	lsls	r2, r0
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	3401      	adds	r4, #1
 8005f5c:	9304      	str	r3, [sp, #16]
 8005f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f62:	4829      	ldr	r0, [pc, #164]	@ (8006008 <_vfiprintf_r+0x220>)
 8005f64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f68:	2206      	movs	r2, #6
 8005f6a:	f7fa f931 	bl	80001d0 <memchr>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d03f      	beq.n	8005ff2 <_vfiprintf_r+0x20a>
 8005f72:	4b26      	ldr	r3, [pc, #152]	@ (800600c <_vfiprintf_r+0x224>)
 8005f74:	bb1b      	cbnz	r3, 8005fbe <_vfiprintf_r+0x1d6>
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	3307      	adds	r3, #7
 8005f7a:	f023 0307 	bic.w	r3, r3, #7
 8005f7e:	3308      	adds	r3, #8
 8005f80:	9303      	str	r3, [sp, #12]
 8005f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f84:	443b      	add	r3, r7
 8005f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f88:	e76a      	b.n	8005e60 <_vfiprintf_r+0x78>
 8005f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f8e:	460c      	mov	r4, r1
 8005f90:	2001      	movs	r0, #1
 8005f92:	e7a8      	b.n	8005ee6 <_vfiprintf_r+0xfe>
 8005f94:	2300      	movs	r3, #0
 8005f96:	3401      	adds	r4, #1
 8005f98:	9305      	str	r3, [sp, #20]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f04f 0c0a 	mov.w	ip, #10
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa6:	3a30      	subs	r2, #48	@ 0x30
 8005fa8:	2a09      	cmp	r2, #9
 8005faa:	d903      	bls.n	8005fb4 <_vfiprintf_r+0x1cc>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0c6      	beq.n	8005f3e <_vfiprintf_r+0x156>
 8005fb0:	9105      	str	r1, [sp, #20]
 8005fb2:	e7c4      	b.n	8005f3e <_vfiprintf_r+0x156>
 8005fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fb8:	4604      	mov	r4, r0
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e7f0      	b.n	8005fa0 <_vfiprintf_r+0x1b8>
 8005fbe:	ab03      	add	r3, sp, #12
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	462a      	mov	r2, r5
 8005fc4:	4b12      	ldr	r3, [pc, #72]	@ (8006010 <_vfiprintf_r+0x228>)
 8005fc6:	a904      	add	r1, sp, #16
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7fd fb4f 	bl	800366c <_printf_float>
 8005fce:	4607      	mov	r7, r0
 8005fd0:	1c78      	adds	r0, r7, #1
 8005fd2:	d1d6      	bne.n	8005f82 <_vfiprintf_r+0x19a>
 8005fd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fd6:	07d9      	lsls	r1, r3, #31
 8005fd8:	d405      	bmi.n	8005fe6 <_vfiprintf_r+0x1fe>
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	059a      	lsls	r2, r3, #22
 8005fde:	d402      	bmi.n	8005fe6 <_vfiprintf_r+0x1fe>
 8005fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fe2:	f7fe fa9b 	bl	800451c <__retarget_lock_release_recursive>
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	065b      	lsls	r3, r3, #25
 8005fea:	f53f af1f 	bmi.w	8005e2c <_vfiprintf_r+0x44>
 8005fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ff0:	e71e      	b.n	8005e30 <_vfiprintf_r+0x48>
 8005ff2:	ab03      	add	r3, sp, #12
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	4b05      	ldr	r3, [pc, #20]	@ (8006010 <_vfiprintf_r+0x228>)
 8005ffa:	a904      	add	r1, sp, #16
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7fd fdcd 	bl	8003b9c <_printf_i>
 8006002:	e7e4      	b.n	8005fce <_vfiprintf_r+0x1e6>
 8006004:	08007615 	.word	0x08007615
 8006008:	0800761f 	.word	0x0800761f
 800600c:	0800366d 	.word	0x0800366d
 8006010:	08005dc3 	.word	0x08005dc3
 8006014:	0800761b 	.word	0x0800761b

08006018 <__swhatbuf_r>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	460c      	mov	r4, r1
 800601c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006020:	2900      	cmp	r1, #0
 8006022:	b096      	sub	sp, #88	@ 0x58
 8006024:	4615      	mov	r5, r2
 8006026:	461e      	mov	r6, r3
 8006028:	da0d      	bge.n	8006046 <__swhatbuf_r+0x2e>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	bf14      	ite	ne
 8006036:	2340      	movne	r3, #64	@ 0x40
 8006038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800603c:	2000      	movs	r0, #0
 800603e:	6031      	str	r1, [r6, #0]
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	b016      	add	sp, #88	@ 0x58
 8006044:	bd70      	pop	{r4, r5, r6, pc}
 8006046:	466a      	mov	r2, sp
 8006048:	f000 f862 	bl	8006110 <_fstat_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	dbec      	blt.n	800602a <__swhatbuf_r+0x12>
 8006050:	9901      	ldr	r1, [sp, #4]
 8006052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800605a:	4259      	negs	r1, r3
 800605c:	4159      	adcs	r1, r3
 800605e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006062:	e7eb      	b.n	800603c <__swhatbuf_r+0x24>

08006064 <__smakebuf_r>:
 8006064:	898b      	ldrh	r3, [r1, #12]
 8006066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006068:	079d      	lsls	r5, r3, #30
 800606a:	4606      	mov	r6, r0
 800606c:	460c      	mov	r4, r1
 800606e:	d507      	bpl.n	8006080 <__smakebuf_r+0x1c>
 8006070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	2301      	movs	r3, #1
 800607a:	6163      	str	r3, [r4, #20]
 800607c:	b003      	add	sp, #12
 800607e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006080:	ab01      	add	r3, sp, #4
 8006082:	466a      	mov	r2, sp
 8006084:	f7ff ffc8 	bl	8006018 <__swhatbuf_r>
 8006088:	9f00      	ldr	r7, [sp, #0]
 800608a:	4605      	mov	r5, r0
 800608c:	4639      	mov	r1, r7
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff f922 	bl	80052d8 <_malloc_r>
 8006094:	b948      	cbnz	r0, 80060aa <__smakebuf_r+0x46>
 8006096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609a:	059a      	lsls	r2, r3, #22
 800609c:	d4ee      	bmi.n	800607c <__smakebuf_r+0x18>
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	e7e2      	b.n	8006070 <__smakebuf_r+0xc>
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	6020      	str	r0, [r4, #0]
 80060ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060ba:	b15b      	cbz	r3, 80060d4 <__smakebuf_r+0x70>
 80060bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 f837 	bl	8006134 <_isatty_r>
 80060c6:	b128      	cbz	r0, 80060d4 <__smakebuf_r+0x70>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	431d      	orrs	r5, r3
 80060d8:	81a5      	strh	r5, [r4, #12]
 80060da:	e7cf      	b.n	800607c <__smakebuf_r+0x18>

080060dc <memmove>:
 80060dc:	4288      	cmp	r0, r1
 80060de:	b510      	push	{r4, lr}
 80060e0:	eb01 0402 	add.w	r4, r1, r2
 80060e4:	d902      	bls.n	80060ec <memmove+0x10>
 80060e6:	4284      	cmp	r4, r0
 80060e8:	4623      	mov	r3, r4
 80060ea:	d807      	bhi.n	80060fc <memmove+0x20>
 80060ec:	1e43      	subs	r3, r0, #1
 80060ee:	42a1      	cmp	r1, r4
 80060f0:	d008      	beq.n	8006104 <memmove+0x28>
 80060f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060fa:	e7f8      	b.n	80060ee <memmove+0x12>
 80060fc:	4402      	add	r2, r0
 80060fe:	4601      	mov	r1, r0
 8006100:	428a      	cmp	r2, r1
 8006102:	d100      	bne.n	8006106 <memmove+0x2a>
 8006104:	bd10      	pop	{r4, pc}
 8006106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800610a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800610e:	e7f7      	b.n	8006100 <memmove+0x24>

08006110 <_fstat_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	@ (8006130 <_fstat_r+0x20>)
 8006114:	2300      	movs	r3, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	f7fd f857 	bl	80031d0 <_fstat>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d102      	bne.n	800612c <_fstat_r+0x1c>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	b103      	cbz	r3, 800612c <_fstat_r+0x1c>
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	bf00      	nop
 8006130:	2000082c 	.word	0x2000082c

08006134 <_isatty_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d06      	ldr	r5, [pc, #24]	@ (8006150 <_isatty_r+0x1c>)
 8006138:	2300      	movs	r3, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fd f856 	bl	80031f0 <_isatty>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_isatty_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_isatty_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	2000082c 	.word	0x2000082c

08006154 <_sbrk_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d06      	ldr	r5, [pc, #24]	@ (8006170 <_sbrk_r+0x1c>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f001 f87a 	bl	8007258 <_sbrk>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_sbrk_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_sbrk_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	2000082c 	.word	0x2000082c

08006174 <__assert_func>:
 8006174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006176:	4614      	mov	r4, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <__assert_func+0x2c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4605      	mov	r5, r0
 8006180:	68d8      	ldr	r0, [r3, #12]
 8006182:	b14c      	cbz	r4, 8006198 <__assert_func+0x24>
 8006184:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <__assert_func+0x30>)
 8006186:	9100      	str	r1, [sp, #0]
 8006188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800618c:	4906      	ldr	r1, [pc, #24]	@ (80061a8 <__assert_func+0x34>)
 800618e:	462b      	mov	r3, r5
 8006190:	f000 f870 	bl	8006274 <fiprintf>
 8006194:	f000 f880 	bl	8006298 <abort>
 8006198:	4b04      	ldr	r3, [pc, #16]	@ (80061ac <__assert_func+0x38>)
 800619a:	461c      	mov	r4, r3
 800619c:	e7f3      	b.n	8006186 <__assert_func+0x12>
 800619e:	bf00      	nop
 80061a0:	20000010 	.word	0x20000010
 80061a4:	08007630 	.word	0x08007630
 80061a8:	0800763d 	.word	0x0800763d
 80061ac:	0800766b 	.word	0x0800766b

080061b0 <_calloc_r>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	fba1 5402 	umull	r5, r4, r1, r2
 80061b6:	b934      	cbnz	r4, 80061c6 <_calloc_r+0x16>
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7ff f88d 	bl	80052d8 <_malloc_r>
 80061be:	4606      	mov	r6, r0
 80061c0:	b928      	cbnz	r0, 80061ce <_calloc_r+0x1e>
 80061c2:	4630      	mov	r0, r6
 80061c4:	bd70      	pop	{r4, r5, r6, pc}
 80061c6:	220c      	movs	r2, #12
 80061c8:	6002      	str	r2, [r0, #0]
 80061ca:	2600      	movs	r6, #0
 80061cc:	e7f9      	b.n	80061c2 <_calloc_r+0x12>
 80061ce:	462a      	mov	r2, r5
 80061d0:	4621      	mov	r1, r4
 80061d2:	f7fe f937 	bl	8004444 <memset>
 80061d6:	e7f4      	b.n	80061c2 <_calloc_r+0x12>

080061d8 <__ascii_mbtowc>:
 80061d8:	b082      	sub	sp, #8
 80061da:	b901      	cbnz	r1, 80061de <__ascii_mbtowc+0x6>
 80061dc:	a901      	add	r1, sp, #4
 80061de:	b142      	cbz	r2, 80061f2 <__ascii_mbtowc+0x1a>
 80061e0:	b14b      	cbz	r3, 80061f6 <__ascii_mbtowc+0x1e>
 80061e2:	7813      	ldrb	r3, [r2, #0]
 80061e4:	600b      	str	r3, [r1, #0]
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	1e10      	subs	r0, r2, #0
 80061ea:	bf18      	it	ne
 80061ec:	2001      	movne	r0, #1
 80061ee:	b002      	add	sp, #8
 80061f0:	4770      	bx	lr
 80061f2:	4610      	mov	r0, r2
 80061f4:	e7fb      	b.n	80061ee <__ascii_mbtowc+0x16>
 80061f6:	f06f 0001 	mvn.w	r0, #1
 80061fa:	e7f8      	b.n	80061ee <__ascii_mbtowc+0x16>

080061fc <_realloc_r>:
 80061fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006200:	4607      	mov	r7, r0
 8006202:	4614      	mov	r4, r2
 8006204:	460d      	mov	r5, r1
 8006206:	b921      	cbnz	r1, 8006212 <_realloc_r+0x16>
 8006208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	4611      	mov	r1, r2
 800620e:	f7ff b863 	b.w	80052d8 <_malloc_r>
 8006212:	b92a      	cbnz	r2, 8006220 <_realloc_r+0x24>
 8006214:	f7fe ffec 	bl	80051f0 <_free_r>
 8006218:	4625      	mov	r5, r4
 800621a:	4628      	mov	r0, r5
 800621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006220:	f000 f841 	bl	80062a6 <_malloc_usable_size_r>
 8006224:	4284      	cmp	r4, r0
 8006226:	4606      	mov	r6, r0
 8006228:	d802      	bhi.n	8006230 <_realloc_r+0x34>
 800622a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800622e:	d8f4      	bhi.n	800621a <_realloc_r+0x1e>
 8006230:	4621      	mov	r1, r4
 8006232:	4638      	mov	r0, r7
 8006234:	f7ff f850 	bl	80052d8 <_malloc_r>
 8006238:	4680      	mov	r8, r0
 800623a:	b908      	cbnz	r0, 8006240 <_realloc_r+0x44>
 800623c:	4645      	mov	r5, r8
 800623e:	e7ec      	b.n	800621a <_realloc_r+0x1e>
 8006240:	42b4      	cmp	r4, r6
 8006242:	4622      	mov	r2, r4
 8006244:	4629      	mov	r1, r5
 8006246:	bf28      	it	cs
 8006248:	4632      	movcs	r2, r6
 800624a:	f7fe f968 	bl	800451e <memcpy>
 800624e:	4629      	mov	r1, r5
 8006250:	4638      	mov	r0, r7
 8006252:	f7fe ffcd 	bl	80051f0 <_free_r>
 8006256:	e7f1      	b.n	800623c <_realloc_r+0x40>

08006258 <__ascii_wctomb>:
 8006258:	4603      	mov	r3, r0
 800625a:	4608      	mov	r0, r1
 800625c:	b141      	cbz	r1, 8006270 <__ascii_wctomb+0x18>
 800625e:	2aff      	cmp	r2, #255	@ 0xff
 8006260:	d904      	bls.n	800626c <__ascii_wctomb+0x14>
 8006262:	228a      	movs	r2, #138	@ 0x8a
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	4770      	bx	lr
 800626c:	700a      	strb	r2, [r1, #0]
 800626e:	2001      	movs	r0, #1
 8006270:	4770      	bx	lr
	...

08006274 <fiprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b503      	push	{r0, r1, lr}
 8006278:	4601      	mov	r1, r0
 800627a:	ab03      	add	r3, sp, #12
 800627c:	4805      	ldr	r0, [pc, #20]	@ (8006294 <fiprintf+0x20>)
 800627e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006282:	6800      	ldr	r0, [r0, #0]
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	f7ff fdaf 	bl	8005de8 <_vfiprintf_r>
 800628a:	b002      	add	sp, #8
 800628c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006290:	b003      	add	sp, #12
 8006292:	4770      	bx	lr
 8006294:	20000010 	.word	0x20000010

08006298 <abort>:
 8006298:	b508      	push	{r3, lr}
 800629a:	2006      	movs	r0, #6
 800629c:	f000 f834 	bl	8006308 <raise>
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7fc ff61 	bl	8003168 <_exit>

080062a6 <_malloc_usable_size_r>:
 80062a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062aa:	1f18      	subs	r0, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfbc      	itt	lt
 80062b0:	580b      	ldrlt	r3, [r1, r0]
 80062b2:	18c0      	addlt	r0, r0, r3
 80062b4:	4770      	bx	lr

080062b6 <_raise_r>:
 80062b6:	291f      	cmp	r1, #31
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4605      	mov	r5, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	d904      	bls.n	80062ca <_raise_r+0x14>
 80062c0:	2316      	movs	r3, #22
 80062c2:	6003      	str	r3, [r0, #0]
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062cc:	b112      	cbz	r2, 80062d4 <_raise_r+0x1e>
 80062ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062d2:	b94b      	cbnz	r3, 80062e8 <_raise_r+0x32>
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 f831 	bl	800633c <_getpid_r>
 80062da:	4622      	mov	r2, r4
 80062dc:	4601      	mov	r1, r0
 80062de:	4628      	mov	r0, r5
 80062e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062e4:	f000 b818 	b.w	8006318 <_kill_r>
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d00a      	beq.n	8006302 <_raise_r+0x4c>
 80062ec:	1c59      	adds	r1, r3, #1
 80062ee:	d103      	bne.n	80062f8 <_raise_r+0x42>
 80062f0:	2316      	movs	r3, #22
 80062f2:	6003      	str	r3, [r0, #0]
 80062f4:	2001      	movs	r0, #1
 80062f6:	e7e7      	b.n	80062c8 <_raise_r+0x12>
 80062f8:	2100      	movs	r1, #0
 80062fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062fe:	4620      	mov	r0, r4
 8006300:	4798      	blx	r3
 8006302:	2000      	movs	r0, #0
 8006304:	e7e0      	b.n	80062c8 <_raise_r+0x12>
	...

08006308 <raise>:
 8006308:	4b02      	ldr	r3, [pc, #8]	@ (8006314 <raise+0xc>)
 800630a:	4601      	mov	r1, r0
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	f7ff bfd2 	b.w	80062b6 <_raise_r>
 8006312:	bf00      	nop
 8006314:	20000010 	.word	0x20000010

08006318 <_kill_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d07      	ldr	r5, [pc, #28]	@ (8006338 <_kill_r+0x20>)
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	f7fc ff0f 	bl	8003148 <_kill>
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	d102      	bne.n	8006334 <_kill_r+0x1c>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	b103      	cbz	r3, 8006334 <_kill_r+0x1c>
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	bf00      	nop
 8006338:	2000082c 	.word	0x2000082c

0800633c <_getpid_r>:
 800633c:	f7fc befc 	b.w	8003138 <_getpid>

08006340 <pow>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	ed2d 8b02 	vpush	{d8}
 8006346:	eeb0 8a40 	vmov.f32	s16, s0
 800634a:	eef0 8a60 	vmov.f32	s17, s1
 800634e:	ec55 4b11 	vmov	r4, r5, d1
 8006352:	f000 f975 	bl	8006640 <__ieee754_pow>
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	ec57 6b10 	vmov	r6, r7, d0
 8006362:	f7fa fbe3 	bl	8000b2c <__aeabi_dcmpun>
 8006366:	2800      	cmp	r0, #0
 8006368:	d13b      	bne.n	80063e2 <pow+0xa2>
 800636a:	ec51 0b18 	vmov	r0, r1, d8
 800636e:	2200      	movs	r2, #0
 8006370:	2300      	movs	r3, #0
 8006372:	f7fa fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006376:	b1b8      	cbz	r0, 80063a8 <pow+0x68>
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	4620      	mov	r0, r4
 800637e:	4629      	mov	r1, r5
 8006380:	f7fa fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006384:	2800      	cmp	r0, #0
 8006386:	d146      	bne.n	8006416 <pow+0xd6>
 8006388:	ec45 4b10 	vmov	d0, r4, r5
 800638c:	f000 f874 	bl	8006478 <finite>
 8006390:	b338      	cbz	r0, 80063e2 <pow+0xa2>
 8006392:	2200      	movs	r2, #0
 8006394:	2300      	movs	r3, #0
 8006396:	4620      	mov	r0, r4
 8006398:	4629      	mov	r1, r5
 800639a:	f7fa fb9f 	bl	8000adc <__aeabi_dcmplt>
 800639e:	b300      	cbz	r0, 80063e2 <pow+0xa2>
 80063a0:	f7fe f890 	bl	80044c4 <__errno>
 80063a4:	2322      	movs	r3, #34	@ 0x22
 80063a6:	e01b      	b.n	80063e0 <pow+0xa0>
 80063a8:	ec47 6b10 	vmov	d0, r6, r7
 80063ac:	f000 f864 	bl	8006478 <finite>
 80063b0:	b9e0      	cbnz	r0, 80063ec <pow+0xac>
 80063b2:	eeb0 0a48 	vmov.f32	s0, s16
 80063b6:	eef0 0a68 	vmov.f32	s1, s17
 80063ba:	f000 f85d 	bl	8006478 <finite>
 80063be:	b1a8      	cbz	r0, 80063ec <pow+0xac>
 80063c0:	ec45 4b10 	vmov	d0, r4, r5
 80063c4:	f000 f858 	bl	8006478 <finite>
 80063c8:	b180      	cbz	r0, 80063ec <pow+0xac>
 80063ca:	4632      	mov	r2, r6
 80063cc:	463b      	mov	r3, r7
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa fbab 	bl	8000b2c <__aeabi_dcmpun>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0e2      	beq.n	80063a0 <pow+0x60>
 80063da:	f7fe f873 	bl	80044c4 <__errno>
 80063de:	2321      	movs	r3, #33	@ 0x21
 80063e0:	6003      	str	r3, [r0, #0]
 80063e2:	ecbd 8b02 	vpop	{d8}
 80063e6:	ec47 6b10 	vmov	d0, r6, r7
 80063ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ec:	2200      	movs	r2, #0
 80063ee:	2300      	movs	r3, #0
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7fa fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d0f2      	beq.n	80063e2 <pow+0xa2>
 80063fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006400:	eef0 0a68 	vmov.f32	s1, s17
 8006404:	f000 f838 	bl	8006478 <finite>
 8006408:	2800      	cmp	r0, #0
 800640a:	d0ea      	beq.n	80063e2 <pow+0xa2>
 800640c:	ec45 4b10 	vmov	d0, r4, r5
 8006410:	f000 f832 	bl	8006478 <finite>
 8006414:	e7c3      	b.n	800639e <pow+0x5e>
 8006416:	4f01      	ldr	r7, [pc, #4]	@ (800641c <pow+0xdc>)
 8006418:	2600      	movs	r6, #0
 800641a:	e7e2      	b.n	80063e2 <pow+0xa2>
 800641c:	3ff00000 	.word	0x3ff00000

08006420 <sqrt>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	ed2d 8b02 	vpush	{d8}
 8006426:	ec55 4b10 	vmov	r4, r5, d0
 800642a:	f000 f831 	bl	8006490 <__ieee754_sqrt>
 800642e:	4622      	mov	r2, r4
 8006430:	462b      	mov	r3, r5
 8006432:	4620      	mov	r0, r4
 8006434:	4629      	mov	r1, r5
 8006436:	eeb0 8a40 	vmov.f32	s16, s0
 800643a:	eef0 8a60 	vmov.f32	s17, s1
 800643e:	f7fa fb75 	bl	8000b2c <__aeabi_dcmpun>
 8006442:	b990      	cbnz	r0, 800646a <sqrt+0x4a>
 8006444:	2200      	movs	r2, #0
 8006446:	2300      	movs	r3, #0
 8006448:	4620      	mov	r0, r4
 800644a:	4629      	mov	r1, r5
 800644c:	f7fa fb46 	bl	8000adc <__aeabi_dcmplt>
 8006450:	b158      	cbz	r0, 800646a <sqrt+0x4a>
 8006452:	f7fe f837 	bl	80044c4 <__errno>
 8006456:	2321      	movs	r3, #33	@ 0x21
 8006458:	6003      	str	r3, [r0, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	f7fa f9f3 	bl	800084c <__aeabi_ddiv>
 8006466:	ec41 0b18 	vmov	d8, r0, r1
 800646a:	eeb0 0a48 	vmov.f32	s0, s16
 800646e:	eef0 0a68 	vmov.f32	s1, s17
 8006472:	ecbd 8b02 	vpop	{d8}
 8006476:	bd38      	pop	{r3, r4, r5, pc}

08006478 <finite>:
 8006478:	b082      	sub	sp, #8
 800647a:	ed8d 0b00 	vstr	d0, [sp]
 800647e:	9801      	ldr	r0, [sp, #4]
 8006480:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006484:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006488:	0fc0      	lsrs	r0, r0, #31
 800648a:	b002      	add	sp, #8
 800648c:	4770      	bx	lr
	...

08006490 <__ieee754_sqrt>:
 8006490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	4a66      	ldr	r2, [pc, #408]	@ (8006630 <__ieee754_sqrt+0x1a0>)
 8006496:	ec55 4b10 	vmov	r4, r5, d0
 800649a:	43aa      	bics	r2, r5
 800649c:	462b      	mov	r3, r5
 800649e:	4621      	mov	r1, r4
 80064a0:	d110      	bne.n	80064c4 <__ieee754_sqrt+0x34>
 80064a2:	4622      	mov	r2, r4
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4620      	mov	r0, r4
 80064b2:	4629      	mov	r1, r5
 80064b4:	f7f9 feea 	bl	800028c <__adddf3>
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	ec45 4b10 	vmov	d0, r4, r5
 80064c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	dc0e      	bgt.n	80064e6 <__ieee754_sqrt+0x56>
 80064c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80064cc:	4322      	orrs	r2, r4
 80064ce:	d0f5      	beq.n	80064bc <__ieee754_sqrt+0x2c>
 80064d0:	b19d      	cbz	r5, 80064fa <__ieee754_sqrt+0x6a>
 80064d2:	4622      	mov	r2, r4
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7f9 fed6 	bl	8000288 <__aeabi_dsub>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	f7fa f9b4 	bl	800084c <__aeabi_ddiv>
 80064e4:	e7e8      	b.n	80064b8 <__ieee754_sqrt+0x28>
 80064e6:	152a      	asrs	r2, r5, #20
 80064e8:	d115      	bne.n	8006516 <__ieee754_sqrt+0x86>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e009      	b.n	8006502 <__ieee754_sqrt+0x72>
 80064ee:	0acb      	lsrs	r3, r1, #11
 80064f0:	3a15      	subs	r2, #21
 80064f2:	0549      	lsls	r1, r1, #21
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0fa      	beq.n	80064ee <__ieee754_sqrt+0x5e>
 80064f8:	e7f7      	b.n	80064ea <__ieee754_sqrt+0x5a>
 80064fa:	462a      	mov	r2, r5
 80064fc:	e7fa      	b.n	80064f4 <__ieee754_sqrt+0x64>
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	3001      	adds	r0, #1
 8006502:	02dc      	lsls	r4, r3, #11
 8006504:	d5fb      	bpl.n	80064fe <__ieee754_sqrt+0x6e>
 8006506:	1e44      	subs	r4, r0, #1
 8006508:	1b12      	subs	r2, r2, r4
 800650a:	f1c0 0420 	rsb	r4, r0, #32
 800650e:	fa21 f404 	lsr.w	r4, r1, r4
 8006512:	4323      	orrs	r3, r4
 8006514:	4081      	lsls	r1, r0
 8006516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800651a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800651e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006522:	07d2      	lsls	r2, r2, #31
 8006524:	bf5c      	itt	pl
 8006526:	005b      	lslpl	r3, r3, #1
 8006528:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800652c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006530:	bf58      	it	pl
 8006532:	0049      	lslpl	r1, r1, #1
 8006534:	2600      	movs	r6, #0
 8006536:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800653a:	107f      	asrs	r7, r7, #1
 800653c:	0049      	lsls	r1, r1, #1
 800653e:	2016      	movs	r0, #22
 8006540:	4632      	mov	r2, r6
 8006542:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006546:	1915      	adds	r5, r2, r4
 8006548:	429d      	cmp	r5, r3
 800654a:	bfde      	ittt	le
 800654c:	192a      	addle	r2, r5, r4
 800654e:	1b5b      	suble	r3, r3, r5
 8006550:	1936      	addle	r6, r6, r4
 8006552:	0fcd      	lsrs	r5, r1, #31
 8006554:	3801      	subs	r0, #1
 8006556:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800655a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800655e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006562:	d1f0      	bne.n	8006546 <__ieee754_sqrt+0xb6>
 8006564:	4605      	mov	r5, r0
 8006566:	2420      	movs	r4, #32
 8006568:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800656c:	4293      	cmp	r3, r2
 800656e:	eb0c 0e00 	add.w	lr, ip, r0
 8006572:	dc02      	bgt.n	800657a <__ieee754_sqrt+0xea>
 8006574:	d113      	bne.n	800659e <__ieee754_sqrt+0x10e>
 8006576:	458e      	cmp	lr, r1
 8006578:	d811      	bhi.n	800659e <__ieee754_sqrt+0x10e>
 800657a:	f1be 0f00 	cmp.w	lr, #0
 800657e:	eb0e 000c 	add.w	r0, lr, ip
 8006582:	da3f      	bge.n	8006604 <__ieee754_sqrt+0x174>
 8006584:	2800      	cmp	r0, #0
 8006586:	db3d      	blt.n	8006604 <__ieee754_sqrt+0x174>
 8006588:	f102 0801 	add.w	r8, r2, #1
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	458e      	cmp	lr, r1
 8006590:	bf88      	it	hi
 8006592:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006596:	eba1 010e 	sub.w	r1, r1, lr
 800659a:	4465      	add	r5, ip
 800659c:	4642      	mov	r2, r8
 800659e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80065a2:	3c01      	subs	r4, #1
 80065a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80065a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80065b0:	d1dc      	bne.n	800656c <__ieee754_sqrt+0xdc>
 80065b2:	4319      	orrs	r1, r3
 80065b4:	d01b      	beq.n	80065ee <__ieee754_sqrt+0x15e>
 80065b6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006634 <__ieee754_sqrt+0x1a4>
 80065ba:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006638 <__ieee754_sqrt+0x1a8>
 80065be:	e9da 0100 	ldrd	r0, r1, [sl]
 80065c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80065c6:	f7f9 fe5f 	bl	8000288 <__aeabi_dsub>
 80065ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	f7fa fa8b 	bl	8000af0 <__aeabi_dcmple>
 80065da:	b140      	cbz	r0, 80065ee <__ieee754_sqrt+0x15e>
 80065dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80065e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80065e8:	d10e      	bne.n	8006608 <__ieee754_sqrt+0x178>
 80065ea:	3601      	adds	r6, #1
 80065ec:	4625      	mov	r5, r4
 80065ee:	1073      	asrs	r3, r6, #1
 80065f0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80065f4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80065f8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80065fc:	086b      	lsrs	r3, r5, #1
 80065fe:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006602:	e759      	b.n	80064b8 <__ieee754_sqrt+0x28>
 8006604:	4690      	mov	r8, r2
 8006606:	e7c1      	b.n	800658c <__ieee754_sqrt+0xfc>
 8006608:	f7f9 fe40 	bl	800028c <__adddf3>
 800660c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	f7fa fa60 	bl	8000adc <__aeabi_dcmplt>
 800661c:	b120      	cbz	r0, 8006628 <__ieee754_sqrt+0x198>
 800661e:	1cab      	adds	r3, r5, #2
 8006620:	bf08      	it	eq
 8006622:	3601      	addeq	r6, #1
 8006624:	3502      	adds	r5, #2
 8006626:	e7e2      	b.n	80065ee <__ieee754_sqrt+0x15e>
 8006628:	1c6b      	adds	r3, r5, #1
 800662a:	f023 0501 	bic.w	r5, r3, #1
 800662e:	e7de      	b.n	80065ee <__ieee754_sqrt+0x15e>
 8006630:	7ff00000 	.word	0x7ff00000
 8006634:	08007878 	.word	0x08007878
 8006638:	08007870 	.word	0x08007870
 800663c:	00000000 	.word	0x00000000

08006640 <__ieee754_pow>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	b091      	sub	sp, #68	@ 0x44
 8006646:	ed8d 1b00 	vstr	d1, [sp]
 800664a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800664e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006652:	ea5a 0001 	orrs.w	r0, sl, r1
 8006656:	ec57 6b10 	vmov	r6, r7, d0
 800665a:	d113      	bne.n	8006684 <__ieee754_pow+0x44>
 800665c:	19b3      	adds	r3, r6, r6
 800665e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006662:	4152      	adcs	r2, r2
 8006664:	4298      	cmp	r0, r3
 8006666:	4b9a      	ldr	r3, [pc, #616]	@ (80068d0 <__ieee754_pow+0x290>)
 8006668:	4193      	sbcs	r3, r2
 800666a:	f080 84ee 	bcs.w	800704a <__ieee754_pow+0xa0a>
 800666e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	f7f9 fe09 	bl	800028c <__adddf3>
 800667a:	ec41 0b10 	vmov	d0, r0, r1
 800667e:	b011      	add	sp, #68	@ 0x44
 8006680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006684:	4a93      	ldr	r2, [pc, #588]	@ (80068d4 <__ieee754_pow+0x294>)
 8006686:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800668a:	4295      	cmp	r5, r2
 800668c:	46b8      	mov	r8, r7
 800668e:	4633      	mov	r3, r6
 8006690:	d80a      	bhi.n	80066a8 <__ieee754_pow+0x68>
 8006692:	d104      	bne.n	800669e <__ieee754_pow+0x5e>
 8006694:	2e00      	cmp	r6, #0
 8006696:	d1ea      	bne.n	800666e <__ieee754_pow+0x2e>
 8006698:	45aa      	cmp	sl, r5
 800669a:	d8e8      	bhi.n	800666e <__ieee754_pow+0x2e>
 800669c:	e001      	b.n	80066a2 <__ieee754_pow+0x62>
 800669e:	4592      	cmp	sl, r2
 80066a0:	d802      	bhi.n	80066a8 <__ieee754_pow+0x68>
 80066a2:	4592      	cmp	sl, r2
 80066a4:	d10f      	bne.n	80066c6 <__ieee754_pow+0x86>
 80066a6:	b171      	cbz	r1, 80066c6 <__ieee754_pow+0x86>
 80066a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80066ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80066b0:	ea58 0803 	orrs.w	r8, r8, r3
 80066b4:	d1db      	bne.n	800666e <__ieee754_pow+0x2e>
 80066b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066ba:	18db      	adds	r3, r3, r3
 80066bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80066c0:	4152      	adcs	r2, r2
 80066c2:	4598      	cmp	r8, r3
 80066c4:	e7cf      	b.n	8006666 <__ieee754_pow+0x26>
 80066c6:	f1b8 0f00 	cmp.w	r8, #0
 80066ca:	46ab      	mov	fp, r5
 80066cc:	da43      	bge.n	8006756 <__ieee754_pow+0x116>
 80066ce:	4a82      	ldr	r2, [pc, #520]	@ (80068d8 <__ieee754_pow+0x298>)
 80066d0:	4592      	cmp	sl, r2
 80066d2:	d856      	bhi.n	8006782 <__ieee754_pow+0x142>
 80066d4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80066d8:	4592      	cmp	sl, r2
 80066da:	f240 84c5 	bls.w	8007068 <__ieee754_pow+0xa28>
 80066de:	ea4f 522a 	mov.w	r2, sl, asr #20
 80066e2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80066e6:	2a14      	cmp	r2, #20
 80066e8:	dd18      	ble.n	800671c <__ieee754_pow+0xdc>
 80066ea:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80066ee:	fa21 f402 	lsr.w	r4, r1, r2
 80066f2:	fa04 f202 	lsl.w	r2, r4, r2
 80066f6:	428a      	cmp	r2, r1
 80066f8:	f040 84b6 	bne.w	8007068 <__ieee754_pow+0xa28>
 80066fc:	f004 0401 	and.w	r4, r4, #1
 8006700:	f1c4 0402 	rsb	r4, r4, #2
 8006704:	2900      	cmp	r1, #0
 8006706:	d159      	bne.n	80067bc <__ieee754_pow+0x17c>
 8006708:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800670c:	d148      	bne.n	80067a0 <__ieee754_pow+0x160>
 800670e:	4632      	mov	r2, r6
 8006710:	463b      	mov	r3, r7
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	e7ae      	b.n	800667a <__ieee754_pow+0x3a>
 800671c:	2900      	cmp	r1, #0
 800671e:	d14c      	bne.n	80067ba <__ieee754_pow+0x17a>
 8006720:	f1c2 0214 	rsb	r2, r2, #20
 8006724:	fa4a f402 	asr.w	r4, sl, r2
 8006728:	fa04 f202 	lsl.w	r2, r4, r2
 800672c:	4552      	cmp	r2, sl
 800672e:	f040 8498 	bne.w	8007062 <__ieee754_pow+0xa22>
 8006732:	f004 0401 	and.w	r4, r4, #1
 8006736:	f1c4 0402 	rsb	r4, r4, #2
 800673a:	4a68      	ldr	r2, [pc, #416]	@ (80068dc <__ieee754_pow+0x29c>)
 800673c:	4592      	cmp	sl, r2
 800673e:	d1e3      	bne.n	8006708 <__ieee754_pow+0xc8>
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	f280 8489 	bge.w	800705a <__ieee754_pow+0xa1a>
 8006748:	4964      	ldr	r1, [pc, #400]	@ (80068dc <__ieee754_pow+0x29c>)
 800674a:	4632      	mov	r2, r6
 800674c:	463b      	mov	r3, r7
 800674e:	2000      	movs	r0, #0
 8006750:	f7fa f87c 	bl	800084c <__aeabi_ddiv>
 8006754:	e791      	b.n	800667a <__ieee754_pow+0x3a>
 8006756:	2400      	movs	r4, #0
 8006758:	bb81      	cbnz	r1, 80067bc <__ieee754_pow+0x17c>
 800675a:	4a5e      	ldr	r2, [pc, #376]	@ (80068d4 <__ieee754_pow+0x294>)
 800675c:	4592      	cmp	sl, r2
 800675e:	d1ec      	bne.n	800673a <__ieee754_pow+0xfa>
 8006760:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8006764:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006768:	431a      	orrs	r2, r3
 800676a:	f000 846e 	beq.w	800704a <__ieee754_pow+0xa0a>
 800676e:	4b5c      	ldr	r3, [pc, #368]	@ (80068e0 <__ieee754_pow+0x2a0>)
 8006770:	429d      	cmp	r5, r3
 8006772:	d908      	bls.n	8006786 <__ieee754_pow+0x146>
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	f280 846b 	bge.w	8007052 <__ieee754_pow+0xa12>
 800677c:	2000      	movs	r0, #0
 800677e:	2100      	movs	r1, #0
 8006780:	e77b      	b.n	800667a <__ieee754_pow+0x3a>
 8006782:	2402      	movs	r4, #2
 8006784:	e7e8      	b.n	8006758 <__ieee754_pow+0x118>
 8006786:	f1b9 0f00 	cmp.w	r9, #0
 800678a:	f04f 0000 	mov.w	r0, #0
 800678e:	f04f 0100 	mov.w	r1, #0
 8006792:	f6bf af72 	bge.w	800667a <__ieee754_pow+0x3a>
 8006796:	e9dd 0300 	ldrd	r0, r3, [sp]
 800679a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800679e:	e76c      	b.n	800667a <__ieee754_pow+0x3a>
 80067a0:	4a50      	ldr	r2, [pc, #320]	@ (80068e4 <__ieee754_pow+0x2a4>)
 80067a2:	4591      	cmp	r9, r2
 80067a4:	d10a      	bne.n	80067bc <__ieee754_pow+0x17c>
 80067a6:	f1b8 0f00 	cmp.w	r8, #0
 80067aa:	db07      	blt.n	80067bc <__ieee754_pow+0x17c>
 80067ac:	ec47 6b10 	vmov	d0, r6, r7
 80067b0:	b011      	add	sp, #68	@ 0x44
 80067b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b6:	f7ff be6b 	b.w	8006490 <__ieee754_sqrt>
 80067ba:	2400      	movs	r4, #0
 80067bc:	ec47 6b10 	vmov	d0, r6, r7
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	f000 fc87 	bl	80070d4 <fabs>
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	ec51 0b10 	vmov	r0, r1, d0
 80067cc:	bb43      	cbnz	r3, 8006820 <__ieee754_pow+0x1e0>
 80067ce:	4b43      	ldr	r3, [pc, #268]	@ (80068dc <__ieee754_pow+0x29c>)
 80067d0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d000      	beq.n	80067da <__ieee754_pow+0x19a>
 80067d8:	bb15      	cbnz	r5, 8006820 <__ieee754_pow+0x1e0>
 80067da:	f1b9 0f00 	cmp.w	r9, #0
 80067de:	da05      	bge.n	80067ec <__ieee754_pow+0x1ac>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	2000      	movs	r0, #0
 80067e6:	493d      	ldr	r1, [pc, #244]	@ (80068dc <__ieee754_pow+0x29c>)
 80067e8:	f7fa f830 	bl	800084c <__aeabi_ddiv>
 80067ec:	f1b8 0f00 	cmp.w	r8, #0
 80067f0:	f6bf af43 	bge.w	800667a <__ieee754_pow+0x3a>
 80067f4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80067f8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80067fc:	4325      	orrs	r5, r4
 80067fe:	d108      	bne.n	8006812 <__ieee754_pow+0x1d2>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4610      	mov	r0, r2
 8006806:	4619      	mov	r1, r3
 8006808:	f7f9 fd3e 	bl	8000288 <__aeabi_dsub>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	e79e      	b.n	8006750 <__ieee754_pow+0x110>
 8006812:	2c01      	cmp	r4, #1
 8006814:	f47f af31 	bne.w	800667a <__ieee754_pow+0x3a>
 8006818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800681c:	4619      	mov	r1, r3
 800681e:	e72c      	b.n	800667a <__ieee754_pow+0x3a>
 8006820:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006824:	3b01      	subs	r3, #1
 8006826:	ea53 0204 	orrs.w	r2, r3, r4
 800682a:	d102      	bne.n	8006832 <__ieee754_pow+0x1f2>
 800682c:	4632      	mov	r2, r6
 800682e:	463b      	mov	r3, r7
 8006830:	e7e8      	b.n	8006804 <__ieee754_pow+0x1c4>
 8006832:	3c01      	subs	r4, #1
 8006834:	431c      	orrs	r4, r3
 8006836:	d016      	beq.n	8006866 <__ieee754_pow+0x226>
 8006838:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80068c0 <__ieee754_pow+0x280>
 800683c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006840:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006844:	f240 8110 	bls.w	8006a68 <__ieee754_pow+0x428>
 8006848:	4b27      	ldr	r3, [pc, #156]	@ (80068e8 <__ieee754_pow+0x2a8>)
 800684a:	459a      	cmp	sl, r3
 800684c:	4b24      	ldr	r3, [pc, #144]	@ (80068e0 <__ieee754_pow+0x2a0>)
 800684e:	d916      	bls.n	800687e <__ieee754_pow+0x23e>
 8006850:	429d      	cmp	r5, r3
 8006852:	d80b      	bhi.n	800686c <__ieee754_pow+0x22c>
 8006854:	f1b9 0f00 	cmp.w	r9, #0
 8006858:	da0b      	bge.n	8006872 <__ieee754_pow+0x232>
 800685a:	2000      	movs	r0, #0
 800685c:	b011      	add	sp, #68	@ 0x44
 800685e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006862:	f000 bcf1 	b.w	8007248 <__math_oflow>
 8006866:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80068c8 <__ieee754_pow+0x288>
 800686a:	e7e7      	b.n	800683c <__ieee754_pow+0x1fc>
 800686c:	f1b9 0f00 	cmp.w	r9, #0
 8006870:	dcf3      	bgt.n	800685a <__ieee754_pow+0x21a>
 8006872:	2000      	movs	r0, #0
 8006874:	b011      	add	sp, #68	@ 0x44
 8006876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	f000 bcdd 	b.w	8007238 <__math_uflow>
 800687e:	429d      	cmp	r5, r3
 8006880:	d20c      	bcs.n	800689c <__ieee754_pow+0x25c>
 8006882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	f7fa f927 	bl	8000adc <__aeabi_dcmplt>
 800688e:	3800      	subs	r0, #0
 8006890:	bf18      	it	ne
 8006892:	2001      	movne	r0, #1
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	daec      	bge.n	8006874 <__ieee754_pow+0x234>
 800689a:	e7df      	b.n	800685c <__ieee754_pow+0x21c>
 800689c:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <__ieee754_pow+0x29c>)
 800689e:	429d      	cmp	r5, r3
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	d922      	bls.n	80068ec <__ieee754_pow+0x2ac>
 80068a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068aa:	2300      	movs	r3, #0
 80068ac:	f7fa f916 	bl	8000adc <__aeabi_dcmplt>
 80068b0:	3800      	subs	r0, #0
 80068b2:	bf18      	it	ne
 80068b4:	2001      	movne	r0, #1
 80068b6:	f1b9 0f00 	cmp.w	r9, #0
 80068ba:	dccf      	bgt.n	800685c <__ieee754_pow+0x21c>
 80068bc:	e7da      	b.n	8006874 <__ieee754_pow+0x234>
 80068be:	bf00      	nop
 80068c0:	00000000 	.word	0x00000000
 80068c4:	3ff00000 	.word	0x3ff00000
 80068c8:	00000000 	.word	0x00000000
 80068cc:	bff00000 	.word	0xbff00000
 80068d0:	fff00000 	.word	0xfff00000
 80068d4:	7ff00000 	.word	0x7ff00000
 80068d8:	433fffff 	.word	0x433fffff
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	3fefffff 	.word	0x3fefffff
 80068e4:	3fe00000 	.word	0x3fe00000
 80068e8:	43f00000 	.word	0x43f00000
 80068ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006a58 <__ieee754_pow+0x418>)
 80068ee:	f7f9 fccb 	bl	8000288 <__aeabi_dsub>
 80068f2:	a351      	add	r3, pc, #324	@ (adr r3, 8006a38 <__ieee754_pow+0x3f8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	4604      	mov	r4, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	f7f9 fe7c 	bl	80005f8 <__aeabi_dmul>
 8006900:	a34f      	add	r3, pc, #316	@ (adr r3, 8006a40 <__ieee754_pow+0x400>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	4620      	mov	r0, r4
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fe73 	bl	80005f8 <__aeabi_dmul>
 8006912:	4b52      	ldr	r3, [pc, #328]	@ (8006a5c <__ieee754_pow+0x41c>)
 8006914:	4682      	mov	sl, r0
 8006916:	468b      	mov	fp, r1
 8006918:	2200      	movs	r2, #0
 800691a:	4620      	mov	r0, r4
 800691c:	4629      	mov	r1, r5
 800691e:	f7f9 fe6b 	bl	80005f8 <__aeabi_dmul>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	a148      	add	r1, pc, #288	@ (adr r1, 8006a48 <__ieee754_pow+0x408>)
 8006928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800692c:	f7f9 fcac 	bl	8000288 <__aeabi_dsub>
 8006930:	4622      	mov	r2, r4
 8006932:	462b      	mov	r3, r5
 8006934:	f7f9 fe60 	bl	80005f8 <__aeabi_dmul>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	2000      	movs	r0, #0
 800693e:	4948      	ldr	r1, [pc, #288]	@ (8006a60 <__ieee754_pow+0x420>)
 8006940:	f7f9 fca2 	bl	8000288 <__aeabi_dsub>
 8006944:	4622      	mov	r2, r4
 8006946:	4680      	mov	r8, r0
 8006948:	4689      	mov	r9, r1
 800694a:	462b      	mov	r3, r5
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7f9 fe52 	bl	80005f8 <__aeabi_dmul>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4640      	mov	r0, r8
 800695a:	4649      	mov	r1, r9
 800695c:	f7f9 fe4c 	bl	80005f8 <__aeabi_dmul>
 8006960:	a33b      	add	r3, pc, #236	@ (adr r3, 8006a50 <__ieee754_pow+0x410>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f7f9 fe47 	bl	80005f8 <__aeabi_dmul>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	f7f9 fc89 	bl	8000288 <__aeabi_dsub>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4680      	mov	r8, r0
 800697c:	4689      	mov	r9, r1
 800697e:	4630      	mov	r0, r6
 8006980:	4639      	mov	r1, r7
 8006982:	f7f9 fc83 	bl	800028c <__adddf3>
 8006986:	2400      	movs	r4, #0
 8006988:	4632      	mov	r2, r6
 800698a:	463b      	mov	r3, r7
 800698c:	4620      	mov	r0, r4
 800698e:	460d      	mov	r5, r1
 8006990:	f7f9 fc7a 	bl	8000288 <__aeabi_dsub>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7f9 fc74 	bl	8000288 <__aeabi_dsub>
 80069a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069a8:	2300      	movs	r3, #0
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80069b0:	4606      	mov	r6, r0
 80069b2:	460f      	mov	r7, r1
 80069b4:	465b      	mov	r3, fp
 80069b6:	4652      	mov	r2, sl
 80069b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069bc:	f7f9 fc64 	bl	8000288 <__aeabi_dsub>
 80069c0:	4622      	mov	r2, r4
 80069c2:	462b      	mov	r3, r5
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069cc:	4680      	mov	r8, r0
 80069ce:	4689      	mov	r9, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7f9 fc54 	bl	800028c <__adddf3>
 80069e4:	465b      	mov	r3, fp
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	4652      	mov	r2, sl
 80069ec:	4620      	mov	r0, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	f7f9 fe02 	bl	80005f8 <__aeabi_dmul>
 80069f4:	460b      	mov	r3, r1
 80069f6:	4602      	mov	r2, r0
 80069f8:	4680      	mov	r8, r0
 80069fa:	4689      	mov	r9, r1
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7f9 fc44 	bl	800028c <__adddf3>
 8006a04:	4b17      	ldr	r3, [pc, #92]	@ (8006a64 <__ieee754_pow+0x424>)
 8006a06:	4299      	cmp	r1, r3
 8006a08:	4604      	mov	r4, r0
 8006a0a:	460d      	mov	r5, r1
 8006a0c:	468b      	mov	fp, r1
 8006a0e:	f340 820b 	ble.w	8006e28 <__ieee754_pow+0x7e8>
 8006a12:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006a16:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006a1a:	4303      	orrs	r3, r0
 8006a1c:	f000 81ea 	beq.w	8006df4 <__ieee754_pow+0x7b4>
 8006a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	2300      	movs	r3, #0
 8006a28:	f7fa f858 	bl	8000adc <__aeabi_dcmplt>
 8006a2c:	3800      	subs	r0, #0
 8006a2e:	bf18      	it	ne
 8006a30:	2001      	movne	r0, #1
 8006a32:	e713      	b.n	800685c <__ieee754_pow+0x21c>
 8006a34:	f3af 8000 	nop.w
 8006a38:	60000000 	.word	0x60000000
 8006a3c:	3ff71547 	.word	0x3ff71547
 8006a40:	f85ddf44 	.word	0xf85ddf44
 8006a44:	3e54ae0b 	.word	0x3e54ae0b
 8006a48:	55555555 	.word	0x55555555
 8006a4c:	3fd55555 	.word	0x3fd55555
 8006a50:	652b82fe 	.word	0x652b82fe
 8006a54:	3ff71547 	.word	0x3ff71547
 8006a58:	3ff00000 	.word	0x3ff00000
 8006a5c:	3fd00000 	.word	0x3fd00000
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	408fffff 	.word	0x408fffff
 8006a68:	4bd5      	ldr	r3, [pc, #852]	@ (8006dc0 <__ieee754_pow+0x780>)
 8006a6a:	ea08 0303 	and.w	r3, r8, r3
 8006a6e:	2200      	movs	r2, #0
 8006a70:	b92b      	cbnz	r3, 8006a7e <__ieee754_pow+0x43e>
 8006a72:	4bd4      	ldr	r3, [pc, #848]	@ (8006dc4 <__ieee754_pow+0x784>)
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006a7c:	468b      	mov	fp, r1
 8006a7e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006a82:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006a86:	4413      	add	r3, r2
 8006a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a8a:	4bcf      	ldr	r3, [pc, #828]	@ (8006dc8 <__ieee754_pow+0x788>)
 8006a8c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006a90:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006a94:	459b      	cmp	fp, r3
 8006a96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006a9a:	dd08      	ble.n	8006aae <__ieee754_pow+0x46e>
 8006a9c:	4bcb      	ldr	r3, [pc, #812]	@ (8006dcc <__ieee754_pow+0x78c>)
 8006a9e:	459b      	cmp	fp, r3
 8006aa0:	f340 81a5 	ble.w	8006dee <__ieee754_pow+0x7ae>
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aaa:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006aae:	f04f 0a00 	mov.w	sl, #0
 8006ab2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ab8:	4bc5      	ldr	r3, [pc, #788]	@ (8006dd0 <__ieee754_pow+0x790>)
 8006aba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006abe:	ed93 7b00 	vldr	d7, [r3]
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	ec53 2b17 	vmov	r2, r3, d7
 8006ac8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006acc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ad0:	f7f9 fbda 	bl	8000288 <__aeabi_dsub>
 8006ad4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ad8:	4606      	mov	r6, r0
 8006ada:	460f      	mov	r7, r1
 8006adc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ae0:	f7f9 fbd4 	bl	800028c <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	2000      	movs	r0, #0
 8006aea:	49ba      	ldr	r1, [pc, #744]	@ (8006dd4 <__ieee754_pow+0x794>)
 8006aec:	f7f9 feae 	bl	800084c <__aeabi_ddiv>
 8006af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7f9 fd7c 	bl	80005f8 <__aeabi_dmul>
 8006b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b04:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006b08:	106d      	asrs	r5, r5, #1
 8006b0a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006b0e:	f04f 0b00 	mov.w	fp, #0
 8006b12:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006b16:	4661      	mov	r1, ip
 8006b18:	2200      	movs	r2, #0
 8006b1a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006b1e:	4658      	mov	r0, fp
 8006b20:	46e1      	mov	r9, ip
 8006b22:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006b26:	4614      	mov	r4, r2
 8006b28:	461d      	mov	r5, r3
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 fba7 	bl	8000288 <__aeabi_dsub>
 8006b3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	4620      	mov	r0, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	f7f9 fb9f 	bl	8000288 <__aeabi_dsub>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b52:	f7f9 fb99 	bl	8000288 <__aeabi_dsub>
 8006b56:	465a      	mov	r2, fp
 8006b58:	464b      	mov	r3, r9
 8006b5a:	f7f9 fd4d 	bl	80005f8 <__aeabi_dmul>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 fb8f 	bl	8000288 <__aeabi_dsub>
 8006b6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006b6e:	f7f9 fd43 	bl	80005f8 <__aeabi_dmul>
 8006b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f7f9 fd3b 	bl	80005f8 <__aeabi_dmul>
 8006b82:	a37d      	add	r3, pc, #500	@ (adr r3, 8006d78 <__ieee754_pow+0x738>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	4604      	mov	r4, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	f7f9 fd34 	bl	80005f8 <__aeabi_dmul>
 8006b90:	a37b      	add	r3, pc, #492	@ (adr r3, 8006d80 <__ieee754_pow+0x740>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fb79 	bl	800028c <__adddf3>
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	f7f9 fd2b 	bl	80005f8 <__aeabi_dmul>
 8006ba2:	a379      	add	r3, pc, #484	@ (adr r3, 8006d88 <__ieee754_pow+0x748>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fb70 	bl	800028c <__adddf3>
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	f7f9 fd22 	bl	80005f8 <__aeabi_dmul>
 8006bb4:	a376      	add	r3, pc, #472	@ (adr r3, 8006d90 <__ieee754_pow+0x750>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 fb67 	bl	800028c <__adddf3>
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	f7f9 fd19 	bl	80005f8 <__aeabi_dmul>
 8006bc6:	a374      	add	r3, pc, #464	@ (adr r3, 8006d98 <__ieee754_pow+0x758>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 fb5e 	bl	800028c <__adddf3>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	f7f9 fd10 	bl	80005f8 <__aeabi_dmul>
 8006bd8:	a371      	add	r3, pc, #452	@ (adr r3, 8006da0 <__ieee754_pow+0x760>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 fb55 	bl	800028c <__adddf3>
 8006be2:	4622      	mov	r2, r4
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	462b      	mov	r3, r5
 8006bea:	4620      	mov	r0, r4
 8006bec:	4629      	mov	r1, r5
 8006bee:	f7f9 fd03 	bl	80005f8 <__aeabi_dmul>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	f7f9 fcfd 	bl	80005f8 <__aeabi_dmul>
 8006bfe:	465a      	mov	r2, fp
 8006c00:	4604      	mov	r4, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	464b      	mov	r3, r9
 8006c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0a:	f7f9 fb3f 	bl	800028c <__adddf3>
 8006c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c12:	f7f9 fcf1 	bl	80005f8 <__aeabi_dmul>
 8006c16:	4622      	mov	r2, r4
 8006c18:	462b      	mov	r3, r5
 8006c1a:	f7f9 fb37 	bl	800028c <__adddf3>
 8006c1e:	465a      	mov	r2, fp
 8006c20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c24:	464b      	mov	r3, r9
 8006c26:	4658      	mov	r0, fp
 8006c28:	4649      	mov	r1, r9
 8006c2a:	f7f9 fce5 	bl	80005f8 <__aeabi_dmul>
 8006c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd8 <__ieee754_pow+0x798>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	f7f9 fb29 	bl	800028c <__adddf3>
 8006c3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c3e:	f7f9 fb25 	bl	800028c <__adddf3>
 8006c42:	46d8      	mov	r8, fp
 8006c44:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006c48:	460d      	mov	r5, r1
 8006c4a:	465a      	mov	r2, fp
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4649      	mov	r1, r9
 8006c52:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006c56:	f7f9 fccf 	bl	80005f8 <__aeabi_dmul>
 8006c5a:	465c      	mov	r4, fp
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4689      	mov	r9, r1
 8006c60:	4b5d      	ldr	r3, [pc, #372]	@ (8006dd8 <__ieee754_pow+0x798>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fb0e 	bl	8000288 <__aeabi_dsub>
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	463b      	mov	r3, r7
 8006c70:	f7f9 fb0a 	bl	8000288 <__aeabi_dsub>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c7c:	f7f9 fb04 	bl	8000288 <__aeabi_dsub>
 8006c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c84:	f7f9 fcb8 	bl	80005f8 <__aeabi_dmul>
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	462b      	mov	r3, r5
 8006c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f7f9 faf4 	bl	800028c <__adddf3>
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	f7f9 faec 	bl	800028c <__adddf3>
 8006cb4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006cb8:	a33b      	add	r3, pc, #236	@ (adr r3, 8006da8 <__ieee754_pow+0x768>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	f7f9 fc97 	bl	80005f8 <__aeabi_dmul>
 8006cca:	465c      	mov	r4, fp
 8006ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fad6 	bl	8000288 <__aeabi_dsub>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	f7f9 fad0 	bl	8000288 <__aeabi_dsub>
 8006ce8:	a331      	add	r3, pc, #196	@ (adr r3, 8006db0 <__ieee754_pow+0x770>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fc83 	bl	80005f8 <__aeabi_dmul>
 8006cf2:	a331      	add	r3, pc, #196	@ (adr r3, 8006db8 <__ieee754_pow+0x778>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fc7a 	bl	80005f8 <__aeabi_dmul>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 fabe 	bl	800028c <__adddf3>
 8006d10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d12:	4b32      	ldr	r3, [pc, #200]	@ (8006ddc <__ieee754_pow+0x79c>)
 8006d14:	4413      	add	r3, r2
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fab7 	bl	800028c <__adddf3>
 8006d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d24:	f7f9 fbfe 	bl	8000524 <__aeabi_i2d>
 8006d28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8006de0 <__ieee754_pow+0x7a0>)
 8006d2c:	4413      	add	r3, r2
 8006d2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d32:	4606      	mov	r6, r0
 8006d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d38:	460f      	mov	r7, r1
 8006d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d3e:	f7f9 faa5 	bl	800028c <__adddf3>
 8006d42:	4642      	mov	r2, r8
 8006d44:	464b      	mov	r3, r9
 8006d46:	f7f9 faa1 	bl	800028c <__adddf3>
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	f7f9 fa9d 	bl	800028c <__adddf3>
 8006d52:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006d56:	4632      	mov	r2, r6
 8006d58:	463b      	mov	r3, r7
 8006d5a:	4658      	mov	r0, fp
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	f7f9 fa93 	bl	8000288 <__aeabi_dsub>
 8006d62:	4642      	mov	r2, r8
 8006d64:	464b      	mov	r3, r9
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6e:	f7f9 fa8b 	bl	8000288 <__aeabi_dsub>
 8006d72:	465c      	mov	r4, fp
 8006d74:	e036      	b.n	8006de4 <__ieee754_pow+0x7a4>
 8006d76:	bf00      	nop
 8006d78:	4a454eef 	.word	0x4a454eef
 8006d7c:	3fca7e28 	.word	0x3fca7e28
 8006d80:	93c9db65 	.word	0x93c9db65
 8006d84:	3fcd864a 	.word	0x3fcd864a
 8006d88:	a91d4101 	.word	0xa91d4101
 8006d8c:	3fd17460 	.word	0x3fd17460
 8006d90:	518f264d 	.word	0x518f264d
 8006d94:	3fd55555 	.word	0x3fd55555
 8006d98:	db6fabff 	.word	0xdb6fabff
 8006d9c:	3fdb6db6 	.word	0x3fdb6db6
 8006da0:	33333303 	.word	0x33333303
 8006da4:	3fe33333 	.word	0x3fe33333
 8006da8:	e0000000 	.word	0xe0000000
 8006dac:	3feec709 	.word	0x3feec709
 8006db0:	dc3a03fd 	.word	0xdc3a03fd
 8006db4:	3feec709 	.word	0x3feec709
 8006db8:	145b01f5 	.word	0x145b01f5
 8006dbc:	be3e2fe0 	.word	0xbe3e2fe0
 8006dc0:	7ff00000 	.word	0x7ff00000
 8006dc4:	43400000 	.word	0x43400000
 8006dc8:	0003988e 	.word	0x0003988e
 8006dcc:	000bb679 	.word	0x000bb679
 8006dd0:	080078a0 	.word	0x080078a0
 8006dd4:	3ff00000 	.word	0x3ff00000
 8006dd8:	40080000 	.word	0x40080000
 8006ddc:	08007880 	.word	0x08007880
 8006de0:	08007890 	.word	0x08007890
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dec:	e5d6      	b.n	800699c <__ieee754_pow+0x35c>
 8006dee:	f04f 0a01 	mov.w	sl, #1
 8006df2:	e65e      	b.n	8006ab2 <__ieee754_pow+0x472>
 8006df4:	a3b5      	add	r3, pc, #724	@ (adr r3, 80070cc <__ieee754_pow+0xa8c>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 fa45 	bl	800028c <__adddf3>
 8006e02:	4642      	mov	r2, r8
 8006e04:	e9cd 0100 	strd	r0, r1, [sp]
 8006e08:	464b      	mov	r3, r9
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 fa3b 	bl	8000288 <__aeabi_dsub>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e1a:	f7f9 fe7d 	bl	8000b18 <__aeabi_dcmpgt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f47f adfe 	bne.w	8006a20 <__ieee754_pow+0x3e0>
 8006e24:	4ba2      	ldr	r3, [pc, #648]	@ (80070b0 <__ieee754_pow+0xa70>)
 8006e26:	e022      	b.n	8006e6e <__ieee754_pow+0x82e>
 8006e28:	4ca2      	ldr	r4, [pc, #648]	@ (80070b4 <__ieee754_pow+0xa74>)
 8006e2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	d919      	bls.n	8006e66 <__ieee754_pow+0x826>
 8006e32:	4ba1      	ldr	r3, [pc, #644]	@ (80070b8 <__ieee754_pow+0xa78>)
 8006e34:	440b      	add	r3, r1
 8006e36:	4303      	orrs	r3, r0
 8006e38:	d009      	beq.n	8006e4e <__ieee754_pow+0x80e>
 8006e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2300      	movs	r3, #0
 8006e42:	f7f9 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8006e46:	3800      	subs	r0, #0
 8006e48:	bf18      	it	ne
 8006e4a:	2001      	movne	r0, #1
 8006e4c:	e512      	b.n	8006874 <__ieee754_pow+0x234>
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	f7f9 fa19 	bl	8000288 <__aeabi_dsub>
 8006e56:	4632      	mov	r2, r6
 8006e58:	463b      	mov	r3, r7
 8006e5a:	f7f9 fe53 	bl	8000b04 <__aeabi_dcmpge>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d1eb      	bne.n	8006e3a <__ieee754_pow+0x7fa>
 8006e62:	4b96      	ldr	r3, [pc, #600]	@ (80070bc <__ieee754_pow+0xa7c>)
 8006e64:	e003      	b.n	8006e6e <__ieee754_pow+0x82e>
 8006e66:	4a96      	ldr	r2, [pc, #600]	@ (80070c0 <__ieee754_pow+0xa80>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	f240 80e7 	bls.w	800703c <__ieee754_pow+0x9fc>
 8006e6e:	151b      	asrs	r3, r3, #20
 8006e70:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006e74:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8006e78:	fa4a fa03 	asr.w	sl, sl, r3
 8006e7c:	44da      	add	sl, fp
 8006e7e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006e82:	4890      	ldr	r0, [pc, #576]	@ (80070c4 <__ieee754_pow+0xa84>)
 8006e84:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006e88:	4108      	asrs	r0, r1
 8006e8a:	ea00 030a 	and.w	r3, r0, sl
 8006e8e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006e92:	f1c1 0114 	rsb	r1, r1, #20
 8006e96:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006e9a:	fa4a fa01 	asr.w	sl, sl, r1
 8006e9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	bfb8      	it	lt
 8006eac:	f1ca 0a00 	rsblt	sl, sl, #0
 8006eb0:	f7f9 f9ea 	bl	8000288 <__aeabi_dsub>
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 f9e4 	bl	800028c <__adddf3>
 8006ec4:	2400      	movs	r4, #0
 8006ec6:	a36a      	add	r3, pc, #424	@ (adr r3, 8007070 <__ieee754_pow+0xa30>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	460d      	mov	r5, r1
 8006ed0:	f7f9 fb92 	bl	80005f8 <__aeabi_dmul>
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8006eda:	464b      	mov	r3, r9
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 f9d2 	bl	8000288 <__aeabi_dsub>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4630      	mov	r0, r6
 8006eea:	4639      	mov	r1, r7
 8006eec:	f7f9 f9cc 	bl	8000288 <__aeabi_dsub>
 8006ef0:	a361      	add	r3, pc, #388	@ (adr r3, 8007078 <__ieee754_pow+0xa38>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 fb7f 	bl	80005f8 <__aeabi_dmul>
 8006efa:	a361      	add	r3, pc, #388	@ (adr r3, 8007080 <__ieee754_pow+0xa40>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 fb76 	bl	80005f8 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	f7f9 f9ba 	bl	800028c <__adddf3>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f24:	f7f9 f9b2 	bl	800028c <__adddf3>
 8006f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	4689      	mov	r9, r1
 8006f30:	f7f9 f9aa 	bl	8000288 <__aeabi_dsub>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 f9a4 	bl	8000288 <__aeabi_dsub>
 8006f40:	4642      	mov	r2, r8
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	464b      	mov	r3, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 fb54 	bl	80005f8 <__aeabi_dmul>
 8006f50:	a34d      	add	r3, pc, #308	@ (adr r3, 8007088 <__ieee754_pow+0xa48>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007090 <__ieee754_pow+0xa50>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 f990 	bl	8000288 <__aeabi_dsub>
 8006f68:	4622      	mov	r2, r4
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	f7f9 fb44 	bl	80005f8 <__aeabi_dmul>
 8006f70:	a349      	add	r3, pc, #292	@ (adr r3, 8007098 <__ieee754_pow+0xa58>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 f989 	bl	800028c <__adddf3>
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	f7f9 fb3b 	bl	80005f8 <__aeabi_dmul>
 8006f82:	a347      	add	r3, pc, #284	@ (adr r3, 80070a0 <__ieee754_pow+0xa60>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 f97e 	bl	8000288 <__aeabi_dsub>
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	462b      	mov	r3, r5
 8006f90:	f7f9 fb32 	bl	80005f8 <__aeabi_dmul>
 8006f94:	a344      	add	r3, pc, #272	@ (adr r3, 80070a8 <__ieee754_pow+0xa68>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 f977 	bl	800028c <__adddf3>
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	f7f9 fb29 	bl	80005f8 <__aeabi_dmul>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f7f9 f96b 	bl	8000288 <__aeabi_dsub>
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 fb1b 	bl	80005f8 <__aeabi_dmul>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	e9cd 0100 	strd	r0, r1, [sp]
 8006fc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	f7f9 f95a 	bl	8000288 <__aeabi_dsub>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fdc:	f7f9 fc36 	bl	800084c <__aeabi_ddiv>
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	f7f9 f94a 	bl	800028c <__adddf3>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 f942 	bl	8000288 <__aeabi_dsub>
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	f7f9 f93e 	bl	8000288 <__aeabi_dsub>
 800700c:	460b      	mov	r3, r1
 800700e:	4602      	mov	r2, r0
 8007010:	492d      	ldr	r1, [pc, #180]	@ (80070c8 <__ieee754_pow+0xa88>)
 8007012:	2000      	movs	r0, #0
 8007014:	f7f9 f938 	bl	8000288 <__aeabi_dsub>
 8007018:	ec41 0b10 	vmov	d0, r0, r1
 800701c:	ee10 3a90 	vmov	r3, s1
 8007020:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007028:	da0b      	bge.n	8007042 <__ieee754_pow+0xa02>
 800702a:	4650      	mov	r0, sl
 800702c:	f000 f85c 	bl	80070e8 <scalbn>
 8007030:	ec51 0b10 	vmov	r0, r1, d0
 8007034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007038:	f7ff bb6d 	b.w	8006716 <__ieee754_pow+0xd6>
 800703c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007040:	e73a      	b.n	8006eb8 <__ieee754_pow+0x878>
 8007042:	ec51 0b10 	vmov	r0, r1, d0
 8007046:	4619      	mov	r1, r3
 8007048:	e7f4      	b.n	8007034 <__ieee754_pow+0x9f4>
 800704a:	491f      	ldr	r1, [pc, #124]	@ (80070c8 <__ieee754_pow+0xa88>)
 800704c:	2000      	movs	r0, #0
 800704e:	f7ff bb14 	b.w	800667a <__ieee754_pow+0x3a>
 8007052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007056:	f7ff bb10 	b.w	800667a <__ieee754_pow+0x3a>
 800705a:	4630      	mov	r0, r6
 800705c:	4639      	mov	r1, r7
 800705e:	f7ff bb0c 	b.w	800667a <__ieee754_pow+0x3a>
 8007062:	460c      	mov	r4, r1
 8007064:	f7ff bb69 	b.w	800673a <__ieee754_pow+0xfa>
 8007068:	2400      	movs	r4, #0
 800706a:	f7ff bb4b 	b.w	8006704 <__ieee754_pow+0xc4>
 800706e:	bf00      	nop
 8007070:	00000000 	.word	0x00000000
 8007074:	3fe62e43 	.word	0x3fe62e43
 8007078:	fefa39ef 	.word	0xfefa39ef
 800707c:	3fe62e42 	.word	0x3fe62e42
 8007080:	0ca86c39 	.word	0x0ca86c39
 8007084:	be205c61 	.word	0xbe205c61
 8007088:	72bea4d0 	.word	0x72bea4d0
 800708c:	3e663769 	.word	0x3e663769
 8007090:	c5d26bf1 	.word	0xc5d26bf1
 8007094:	3ebbbd41 	.word	0x3ebbbd41
 8007098:	af25de2c 	.word	0xaf25de2c
 800709c:	3f11566a 	.word	0x3f11566a
 80070a0:	16bebd93 	.word	0x16bebd93
 80070a4:	3f66c16c 	.word	0x3f66c16c
 80070a8:	5555553e 	.word	0x5555553e
 80070ac:	3fc55555 	.word	0x3fc55555
 80070b0:	40900000 	.word	0x40900000
 80070b4:	4090cbff 	.word	0x4090cbff
 80070b8:	3f6f3400 	.word	0x3f6f3400
 80070bc:	4090cc00 	.word	0x4090cc00
 80070c0:	3fe00000 	.word	0x3fe00000
 80070c4:	fff00000 	.word	0xfff00000
 80070c8:	3ff00000 	.word	0x3ff00000
 80070cc:	652b82fe 	.word	0x652b82fe
 80070d0:	3c971547 	.word	0x3c971547

080070d4 <fabs>:
 80070d4:	ec51 0b10 	vmov	r0, r1, d0
 80070d8:	4602      	mov	r2, r0
 80070da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80070de:	ec43 2b10 	vmov	d0, r2, r3
 80070e2:	4770      	bx	lr
 80070e4:	0000      	movs	r0, r0
	...

080070e8 <scalbn>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	ec55 4b10 	vmov	r4, r5, d0
 80070ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80070f2:	4606      	mov	r6, r0
 80070f4:	462b      	mov	r3, r5
 80070f6:	b991      	cbnz	r1, 800711e <scalbn+0x36>
 80070f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80070fc:	4323      	orrs	r3, r4
 80070fe:	d03b      	beq.n	8007178 <scalbn+0x90>
 8007100:	4b33      	ldr	r3, [pc, #204]	@ (80071d0 <scalbn+0xe8>)
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	2200      	movs	r2, #0
 8007108:	f7f9 fa76 	bl	80005f8 <__aeabi_dmul>
 800710c:	4b31      	ldr	r3, [pc, #196]	@ (80071d4 <scalbn+0xec>)
 800710e:	429e      	cmp	r6, r3
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	da0f      	bge.n	8007136 <scalbn+0x4e>
 8007116:	a326      	add	r3, pc, #152	@ (adr r3, 80071b0 <scalbn+0xc8>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	e01e      	b.n	800715c <scalbn+0x74>
 800711e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007122:	4291      	cmp	r1, r2
 8007124:	d10b      	bne.n	800713e <scalbn+0x56>
 8007126:	4622      	mov	r2, r4
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	f7f9 f8ae 	bl	800028c <__adddf3>
 8007130:	4604      	mov	r4, r0
 8007132:	460d      	mov	r5, r1
 8007134:	e020      	b.n	8007178 <scalbn+0x90>
 8007136:	460b      	mov	r3, r1
 8007138:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800713c:	3936      	subs	r1, #54	@ 0x36
 800713e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007142:	4296      	cmp	r6, r2
 8007144:	dd0d      	ble.n	8007162 <scalbn+0x7a>
 8007146:	2d00      	cmp	r5, #0
 8007148:	a11b      	add	r1, pc, #108	@ (adr r1, 80071b8 <scalbn+0xd0>)
 800714a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800714e:	da02      	bge.n	8007156 <scalbn+0x6e>
 8007150:	a11b      	add	r1, pc, #108	@ (adr r1, 80071c0 <scalbn+0xd8>)
 8007152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007156:	a318      	add	r3, pc, #96	@ (adr r3, 80071b8 <scalbn+0xd0>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	e7e6      	b.n	8007130 <scalbn+0x48>
 8007162:	1872      	adds	r2, r6, r1
 8007164:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007168:	428a      	cmp	r2, r1
 800716a:	dcec      	bgt.n	8007146 <scalbn+0x5e>
 800716c:	2a00      	cmp	r2, #0
 800716e:	dd06      	ble.n	800717e <scalbn+0x96>
 8007170:	f36f 531e 	bfc	r3, #20, #11
 8007174:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007178:	ec45 4b10 	vmov	d0, r4, r5
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007182:	da08      	bge.n	8007196 <scalbn+0xae>
 8007184:	2d00      	cmp	r5, #0
 8007186:	a10a      	add	r1, pc, #40	@ (adr r1, 80071b0 <scalbn+0xc8>)
 8007188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800718c:	dac3      	bge.n	8007116 <scalbn+0x2e>
 800718e:	a10e      	add	r1, pc, #56	@ (adr r1, 80071c8 <scalbn+0xe0>)
 8007190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007194:	e7bf      	b.n	8007116 <scalbn+0x2e>
 8007196:	3236      	adds	r2, #54	@ 0x36
 8007198:	f36f 531e 	bfc	r3, #20, #11
 800719c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80071a0:	4620      	mov	r0, r4
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <scalbn+0xf0>)
 80071a4:	4629      	mov	r1, r5
 80071a6:	2200      	movs	r2, #0
 80071a8:	e7d8      	b.n	800715c <scalbn+0x74>
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	c2f8f359 	.word	0xc2f8f359
 80071b4:	01a56e1f 	.word	0x01a56e1f
 80071b8:	8800759c 	.word	0x8800759c
 80071bc:	7e37e43c 	.word	0x7e37e43c
 80071c0:	8800759c 	.word	0x8800759c
 80071c4:	fe37e43c 	.word	0xfe37e43c
 80071c8:	c2f8f359 	.word	0xc2f8f359
 80071cc:	81a56e1f 	.word	0x81a56e1f
 80071d0:	43500000 	.word	0x43500000
 80071d4:	ffff3cb0 	.word	0xffff3cb0
 80071d8:	3c900000 	.word	0x3c900000

080071dc <with_errno>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	ed2d 8b02 	vpush	{d8}
 80071e2:	eeb0 8a40 	vmov.f32	s16, s0
 80071e6:	eef0 8a60 	vmov.f32	s17, s1
 80071ea:	4604      	mov	r4, r0
 80071ec:	f7fd f96a 	bl	80044c4 <__errno>
 80071f0:	eeb0 0a48 	vmov.f32	s0, s16
 80071f4:	eef0 0a68 	vmov.f32	s1, s17
 80071f8:	ecbd 8b02 	vpop	{d8}
 80071fc:	6004      	str	r4, [r0, #0]
 80071fe:	bd10      	pop	{r4, pc}

08007200 <xflow>:
 8007200:	4603      	mov	r3, r0
 8007202:	b507      	push	{r0, r1, r2, lr}
 8007204:	ec51 0b10 	vmov	r0, r1, d0
 8007208:	b183      	cbz	r3, 800722c <xflow+0x2c>
 800720a:	4602      	mov	r2, r0
 800720c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007210:	e9cd 2300 	strd	r2, r3, [sp]
 8007214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007218:	f7f9 f9ee 	bl	80005f8 <__aeabi_dmul>
 800721c:	ec41 0b10 	vmov	d0, r0, r1
 8007220:	2022      	movs	r0, #34	@ 0x22
 8007222:	b003      	add	sp, #12
 8007224:	f85d eb04 	ldr.w	lr, [sp], #4
 8007228:	f7ff bfd8 	b.w	80071dc <with_errno>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	e7ee      	b.n	8007210 <xflow+0x10>
 8007232:	0000      	movs	r0, r0
 8007234:	0000      	movs	r0, r0
	...

08007238 <__math_uflow>:
 8007238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007240 <__math_uflow+0x8>
 800723c:	f7ff bfe0 	b.w	8007200 <xflow>
 8007240:	00000000 	.word	0x00000000
 8007244:	10000000 	.word	0x10000000

08007248 <__math_oflow>:
 8007248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007250 <__math_oflow+0x8>
 800724c:	f7ff bfd8 	b.w	8007200 <xflow>
 8007250:	00000000 	.word	0x00000000
 8007254:	70000000 	.word	0x70000000

08007258 <_sbrk>:
 8007258:	4a04      	ldr	r2, [pc, #16]	@ (800726c <_sbrk+0x14>)
 800725a:	6811      	ldr	r1, [r2, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	b909      	cbnz	r1, 8007264 <_sbrk+0xc>
 8007260:	4903      	ldr	r1, [pc, #12]	@ (8007270 <_sbrk+0x18>)
 8007262:	6011      	str	r1, [r2, #0]
 8007264:	6810      	ldr	r0, [r2, #0]
 8007266:	4403      	add	r3, r0
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	4770      	bx	lr
 800726c:	2000083c 	.word	0x2000083c
 8007270:	20000840 	.word	0x20000840

08007274 <_init>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	bf00      	nop
 8007278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727a:	bc08      	pop	{r3}
 800727c:	469e      	mov	lr, r3
 800727e:	4770      	bx	lr

08007280 <_fini>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	bf00      	nop
 8007284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007286:	bc08      	pop	{r3}
 8007288:	469e      	mov	lr, r3
 800728a:	4770      	bx	lr
