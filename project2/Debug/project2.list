
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800299c  0800299c  0000399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a84  08002a84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a8c  08002a8c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08002af0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002af0  000042cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057d1  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001667  00000000  00000000  0000985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d8  00000000  00000000  0000b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dd3  00000000  00000000  0000ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cc7  00000000  00000000  0000f81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005afa6  00000000  00000000  000184e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00073488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002310  00000000  00000000  000734cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  000757dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002984 	.word	0x08002984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002984 	.word	0x08002984

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800027c:	4b7b      	ldr	r3, [pc, #492]	@ (800046c <EXTI_Init+0x1fc>)
 800027e:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	799b      	ldrb	r3, [r3, #6]
 8000284:	2b00      	cmp	r3, #0
 8000286:	f000 80d2 	beq.w	800042e <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000294:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000298:	015b      	lsls	r3, r3, #5
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	2201      	movs	r2, #1
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	43da      	mvns	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	095b      	lsrs	r3, r3, #5
 80002b2:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80002b6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80002ba:	015b      	lsls	r3, r3, #5
 80002bc:	4618      	mov	r0, r3
 80002be:	ea01 0302 	and.w	r3, r1, r2
 80002c2:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	095b      	lsrs	r3, r3, #5
 80002ca:	015a      	lsls	r2, r3, #5
 80002cc:	4b68      	ldr	r3, [pc, #416]	@ (8000470 <EXTI_Init+0x200>)
 80002ce:	4413      	add	r3, r2
 80002d0:	6819      	ldr	r1, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f003 031f 	and.w	r3, r3, #31
 80002da:	2201      	movs	r2, #1
 80002dc:	fa02 f303 	lsl.w	r3, r2, r3
 80002e0:	43da      	mvns	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	095b      	lsrs	r3, r3, #5
 80002e8:	0158      	lsls	r0, r3, #5
 80002ea:	4b61      	ldr	r3, [pc, #388]	@ (8000470 <EXTI_Init+0x200>)
 80002ec:	4403      	add	r3, r0
 80002ee:	4618      	mov	r0, r3
 80002f0:	ea01 0302 	and.w	r3, r1, r2
 80002f4:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	791b      	ldrb	r3, [r3, #4]
 80002fa:	461a      	mov	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	095b      	lsrs	r3, r3, #5
 8000302:	015b      	lsls	r3, r3, #5
 8000304:	4413      	add	r3, r2
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4413      	add	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 031f 	and.w	r3, r3, #31
 8000318:	2101      	movs	r1, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	4619      	mov	r1, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000326:	4b51      	ldr	r3, [pc, #324]	@ (800046c <EXTI_Init+0x1fc>)
 8000328:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	015a      	lsls	r2, r3, #5
 8000332:	4b50      	ldr	r3, [pc, #320]	@ (8000474 <EXTI_Init+0x204>)
 8000334:	4413      	add	r3, r2
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 031f 	and.w	r3, r3, #31
 8000340:	2201      	movs	r2, #1
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	43da      	mvns	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	095b      	lsrs	r3, r3, #5
 800034e:	0158      	lsls	r0, r3, #5
 8000350:	4b48      	ldr	r3, [pc, #288]	@ (8000474 <EXTI_Init+0x204>)
 8000352:	4403      	add	r3, r0
 8000354:	4618      	mov	r0, r3
 8000356:	ea01 0302 	and.w	r3, r1, r2
 800035a:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	095b      	lsrs	r3, r3, #5
 8000362:	015a      	lsls	r2, r3, #5
 8000364:	4b44      	ldr	r3, [pc, #272]	@ (8000478 <EXTI_Init+0x208>)
 8000366:	4413      	add	r3, r2
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f003 031f 	and.w	r3, r3, #31
 8000372:	2201      	movs	r2, #1
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	43da      	mvns	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	095b      	lsrs	r3, r3, #5
 8000380:	0158      	lsls	r0, r3, #5
 8000382:	4b3d      	ldr	r3, [pc, #244]	@ (8000478 <EXTI_Init+0x208>)
 8000384:	4403      	add	r3, r0
 8000386:	4618      	mov	r0, r3
 8000388:	ea01 0302 	and.w	r3, r1, r2
 800038c:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	795b      	ldrb	r3, [r3, #5]
 8000392:	2b10      	cmp	r3, #16
 8000394:	d132      	bne.n	80003fc <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	095b      	lsrs	r3, r3, #5
 800039c:	015a      	lsls	r2, r3, #5
 800039e:	4b35      	ldr	r3, [pc, #212]	@ (8000474 <EXTI_Init+0x204>)
 80003a0:	4413      	add	r3, r2
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 031f 	and.w	r3, r3, #31
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	095b      	lsrs	r3, r3, #5
 80003ba:	0159      	lsls	r1, r3, #5
 80003bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000474 <EXTI_Init+0x204>)
 80003be:	440b      	add	r3, r1
 80003c0:	4619      	mov	r1, r3
 80003c2:	ea42 0300 	orr.w	r3, r2, r0
 80003c6:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	095b      	lsrs	r3, r3, #5
 80003ce:	015a      	lsls	r2, r3, #5
 80003d0:	4b29      	ldr	r3, [pc, #164]	@ (8000478 <EXTI_Init+0x208>)
 80003d2:	4413      	add	r3, r2
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 031f 	and.w	r3, r3, #31
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	095b      	lsrs	r3, r3, #5
 80003ec:	0159      	lsls	r1, r3, #5
 80003ee:	4b22      	ldr	r3, [pc, #136]	@ (8000478 <EXTI_Init+0x208>)
 80003f0:	440b      	add	r3, r1
 80003f2:	4619      	mov	r1, r3
 80003f4:	ea42 0300 	orr.w	r3, r2, r0
 80003f8:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 80003fa:	e030      	b.n	800045e <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	095b      	lsrs	r3, r3, #5
 8000408:	015b      	lsls	r3, r3, #5
 800040a:	4413      	add	r3, r2
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4413      	add	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	4619      	mov	r1, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	e017      	b.n	800045e <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	461a      	mov	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	095b      	lsrs	r3, r3, #5
 800043a:	015b      	lsls	r3, r3, #5
 800043c:	4413      	add	r3, r2
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	4413      	add	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	6819      	ldr	r1, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f003 031f 	and.w	r3, r3, #31
 8000450:	2201      	movs	r2, #1
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	43da      	mvns	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	400a      	ands	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40010400 	.word	0x40010400
 8000470:	40010404 	.word	0x40010404
 8000474:	40010408 	.word	0x40010408
 8000478:	4001040c 	.word	0x4001040c

0800047c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000494:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000498:	015b      	lsls	r3, r3, #5
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	f002 021f 	and.w	r2, r2, #31
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	095b      	lsrs	r3, r3, #5
 80004b0:	015a      	lsls	r2, r3, #5
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <EXTI_GetITStatus+0x6c>)
 80004b4:	4413      	add	r3, r2
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	f002 021f 	and.w	r2, r2, #31
 80004be:	2101      	movs	r1, #1
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	4013      	ands	r3, r2
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d005      	beq.n	80004d6 <EXTI_GetITStatus+0x5a>
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d002      	beq.n	80004d6 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 80004d0:	2301      	movs	r3, #1
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e001      	b.n	80004da <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004da:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40010414 	.word	0x40010414

080004ec <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f003 031f 	and.w	r3, r3, #31
 80004fa:	2201      	movs	r2, #1
 80004fc:	fa02 f103 	lsl.w	r1, r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	095b      	lsrs	r3, r3, #5
 8000504:	015a      	lsls	r2, r3, #5
 8000506:	4b05      	ldr	r3, [pc, #20]	@ (800051c <EXTI_ClearITPendingBit+0x30>)
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40010414 	.word	0x40010414

08000520 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000520:	b480      	push	{r7}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e07c      	b.n	8000636 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800053c:	2201      	movs	r2, #1
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d16b      	bne.n	8000630 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d003      	beq.n	8000568 <GPIO_Init+0x48>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d134      	bne.n	80005d2 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	4619      	mov	r1, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	889b      	ldrh	r3, [r3, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	2301      	movs	r3, #1
 80005a4:	408b      	lsls	r3, r1
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4013      	ands	r3, r2
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	4619      	mov	r1, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2103      	movs	r1, #3
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	401a      	ands	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	4619      	mov	r1, r3
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	b29b      	uxth	r3, r3
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2103      	movs	r1, #3
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	401a      	ands	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	79db      	ldrb	r3, [r3, #7]
 8000620:	4619      	mov	r1, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	431a      	orrs	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	f67f af7f 	bls.w	800053c <GPIO_Init+0x1c>
    }
  }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	371c      	adds	r7, #28
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800065a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2202      	movs	r2, #2
 8000666:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	71da      	strb	r2, [r3, #7]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8a1b      	ldrh	r3, [r3, #16]
 8000694:	b29a      	uxth	r2, r3
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	4013      	ands	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e001      	b.n	80006aa <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
 80006c4:	4613      	mov	r3, r2
 80006c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80006c8:	787b      	ldrb	r3, [r7, #1]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006d4:	e002      	b.n	80006dc <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	887a      	ldrh	r2, [r7, #2]
 80006da:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80006f0:	4a06      	ldr	r2, [pc, #24]	@ (800070c <NVIC_PriorityGroupConfig+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006fc:	60d3      	str	r3, [r2, #12]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	78db      	ldrb	r3, [r3, #3]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d03a      	beq.n	80007a2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <NVIC_Init+0xc0>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	43db      	mvns	r3, r3
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	f1c3 0304 	rsb	r3, r3, #4
 8000740:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa22 f303 	lsr.w	r3, r2, r3
 800074a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	461a      	mov	r2, r3
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4013      	ands	r3, r2
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	4313      	orrs	r3, r2
 8000768:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000770:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <NVIC_Init+0xc4>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	6979      	ldr	r1, [r7, #20]
 8000778:	b2c9      	uxtb	r1, r1
 800077a:	4413      	add	r3, r2
 800077c:	460a      	mov	r2, r1
 800077e:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800078a:	4912      	ldr	r1, [pc, #72]	@ (80007d4 <NVIC_Init+0xc4>)
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	0952      	lsrs	r2, r2, #5
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000796:	2201      	movs	r2, #1
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800079c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80007a0:	e00f      	b.n	80007c2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007aa:	490a      	ldr	r1, [pc, #40]	@ (80007d4 <NVIC_Init+0xc4>)
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	0952      	lsrs	r2, r2, #5
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007b6:	2201      	movs	r2, #1
 80007b8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007ba:	f100 0320 	add.w	r3, r0, #32
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007d8:	b480      	push	{r7}
 80007da:	b08b      	sub	sp, #44	@ 0x2c
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000800:	4b8b      	ldr	r3, [pc, #556]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f003 030c 	and.w	r3, r3, #12
 8000808:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	2b08      	cmp	r3, #8
 800080e:	d011      	beq.n	8000834 <RCC_GetClocksFreq+0x5c>
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	2b08      	cmp	r3, #8
 8000814:	d837      	bhi.n	8000886 <RCC_GetClocksFreq+0xae>
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <RCC_GetClocksFreq+0x4c>
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d004      	beq.n	800082c <RCC_GetClocksFreq+0x54>
 8000822:	e030      	b.n	8000886 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a83      	ldr	r2, [pc, #524]	@ (8000a34 <RCC_GetClocksFreq+0x25c>)
 8000828:	601a      	str	r2, [r3, #0]
      break;
 800082a:	e030      	b.n	800088e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a81      	ldr	r2, [pc, #516]	@ (8000a34 <RCC_GetClocksFreq+0x25c>)
 8000830:	601a      	str	r2, [r3, #0]
      break;
 8000832:	e02c      	b.n	800088e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000834:	4b7e      	ldr	r3, [pc, #504]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800083c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800083e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000846:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	3302      	adds	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	4a77      	ldr	r2, [pc, #476]	@ (8000a38 <RCC_GetClocksFreq+0x260>)
 800085a:	fb02 f303 	mul.w	r3, r2, r3
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000860:	e00d      	b.n	800087e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000862:	4b73      	ldr	r3, [pc, #460]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800086e:	4a71      	ldr	r2, [pc, #452]	@ (8000a34 <RCC_GetClocksFreq+0x25c>)
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fbb2 f2f3 	udiv	r2, r2, r3
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000882:	601a      	str	r2, [r3, #0]
      break;
 8000884:	e003      	b.n	800088e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a6a      	ldr	r2, [pc, #424]	@ (8000a34 <RCC_GetClocksFreq+0x25c>)
 800088a:	601a      	str	r2, [r3, #0]
      break;
 800088c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800088e:	4b68      	ldr	r3, [pc, #416]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000896:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800089e:	4a67      	ldr	r2, [pc, #412]	@ (8000a3c <RCC_GetClocksFreq+0x264>)
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	40da      	lsrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008b6:	4b5e      	ldr	r3, [pc, #376]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80008be:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80008c6:	4a5d      	ldr	r2, [pc, #372]	@ (8000a3c <RCC_GetClocksFreq+0x264>)
 80008c8:	6a3b      	ldr	r3, [r7, #32]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	40da      	lsrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008de:	4b54      	ldr	r3, [pc, #336]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80008e6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	0adb      	lsrs	r3, r3, #11
 80008ec:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80008ee:	4a53      	ldr	r2, [pc, #332]	@ (8000a3c <RCC_GetClocksFreq+0x264>)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685a      	ldr	r2, [r3, #4]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	40da      	lsrs	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000906:	4b4a      	ldr	r3, [pc, #296]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800090e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	091b      	lsrs	r3, r3, #4
 8000914:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000916:	4a4a      	ldr	r2, [pc, #296]	@ (8000a40 <RCC_GetClocksFreq+0x268>)
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091e:	b29b      	uxth	r3, r3
 8000920:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800092c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fbb2 f2f3 	udiv	r2, r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	611a      	str	r2, [r3, #16]
 8000938:	e003      	b.n	8000942 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000942:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000946:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800094a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	0a5b      	lsrs	r3, r3, #9
 8000950:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000952:	4a3b      	ldr	r2, [pc, #236]	@ (8000a40 <RCC_GetClocksFreq+0x268>)
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095a:	b29b      	uxth	r3, r3
 800095c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	e003      	b.n	800097e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	2b10      	cmp	r3, #16
 8000988:	d003      	beq.n	8000992 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a29      	ldr	r2, [pc, #164]	@ (8000a34 <RCC_GetClocksFreq+0x25c>)
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	e003      	b.n	800099a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	d003      	beq.n	80009ae <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a22      	ldr	r2, [pc, #136]	@ (8000a34 <RCC_GetClocksFreq+0x25c>)
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	e003      	b.n	80009b6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009c2:	d10d      	bne.n	80009e0 <RCC_GetClocksFreq+0x208>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d108      	bne.n	80009e0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d104      	bne.n	80009e0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d8:	005a      	lsls	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	621a      	str	r2, [r3, #32]
 80009de:	e003      	b.n	80009e8 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009f4:	d10d      	bne.n	8000a12 <RCC_GetClocksFreq+0x23a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d108      	bne.n	8000a12 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d104      	bne.n	8000a12 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0a:	005a      	lsls	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a10:	e003      	b.n	8000a1a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <RCC_GetClocksFreq+0x258>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10e      	bne.n	8000a44 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a2e:	e028      	b.n	8000a82 <RCC_GetClocksFreq+0x2aa>
 8000a30:	40021000 	.word	0x40021000
 8000a34:	007a1200 	.word	0x007a1200
 8000a38:	003d0900 	.word	0x003d0900
 8000a3c:	08002a24 	.word	0x08002a24
 8000a40:	08002a34 	.word	0x08002a34
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a44:	4b6c      	ldr	r3, [pc, #432]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d104      	bne.n	8000a5a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a58:	e013      	b.n	8000a82 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a5a:	4b67      	ldr	r3, [pc, #412]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d104      	bne.n	8000a70 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a6e:	e008      	b.n	8000a82 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a70:	4b61      	ldr	r3, [pc, #388]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d102      	bne.n	8000a82 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a5f      	ldr	r2, [pc, #380]	@ (8000bfc <RCC_GetClocksFreq+0x424>)
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000a82:	4b5d      	ldr	r3, [pc, #372]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d104      	bne.n	8000a98 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a96:	e021      	b.n	8000adc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000a98:	4b57      	ldr	r3, [pc, #348]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aa4:	d104      	bne.n	8000ab0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	e015      	b.n	8000adc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000ab0:	4b51      	ldr	r3, [pc, #324]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ab8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000abc:	d104      	bne.n	8000ac8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ac6:	e009      	b.n	8000adc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ad0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8000ad4:	d102      	bne.n	8000adc <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a48      	ldr	r2, [pc, #288]	@ (8000bfc <RCC_GetClocksFreq+0x424>)
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000adc:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d104      	bne.n	8000af2 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	631a      	str	r2, [r3, #48]	@ 0x30
 8000af0:	e021      	b.n	8000b36 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000af2:	4b41      	ldr	r3, [pc, #260]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000afa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000afe:	d104      	bne.n	8000b0a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b08:	e015      	b.n	8000b36 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000b12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000b16:	d104      	bne.n	8000b22 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b20:	e009      	b.n	8000b36 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000b22:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8000b2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8000b2e:	d102      	bne.n	8000b36 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a32      	ldr	r2, [pc, #200]	@ (8000bfc <RCC_GetClocksFreq+0x424>)
 8000b34:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000b36:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b4a:	e021      	b.n	8000b90 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000b58:	d104      	bne.n	8000b64 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b62:	e015      	b.n	8000b90 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000b70:	d104      	bne.n	8000b7c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7a:	e009      	b.n	8000b90 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8000b88:	d102      	bne.n	8000b90 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <RCC_GetClocksFreq+0x424>)
 8000b8e:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b94:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000ba4:	e021      	b.n	8000bea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bb2:	d104      	bne.n	8000bbe <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bbc:	e015      	b.n	8000bea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bca:	d104      	bne.n	8000bd6 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bd2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bd4:	e009      	b.n	8000bea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <RCC_GetClocksFreq+0x420>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000be2:	d102      	bne.n	8000bea <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <RCC_GetClocksFreq+0x424>)
 8000be8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bea:	bf00      	nop
 8000bec:	372c      	adds	r7, #44	@ 0x2c
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	007a1200 	.word	0x007a1200

08000c00 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	4909      	ldr	r1, [pc, #36]	@ (8000c3c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c1e:	e006      	b.n	8000c2e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	4904      	ldr	r1, [pc, #16]	@ (8000c3c <RCC_AHBPeriphClockCmd+0x3c>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	614b      	str	r3, [r1, #20]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c54:	699a      	ldr	r2, [r3, #24]
 8000c56:	4909      	ldr	r1, [pc, #36]	@ (8000c7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c5e:	e006      	b.n	8000c6e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c62:	699a      	ldr	r2, [r3, #24]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4904      	ldr	r1, [pc, #16]	@ (8000c7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	618b      	str	r3, [r1, #24]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000ca4:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <SYSCFG_EXTILineConfig+0x80>)
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	3302      	adds	r3, #2
 8000cae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <SYSCFG_EXTILineConfig+0x80>)
 8000cb8:	79b9      	ldrb	r1, [r7, #6]
 8000cba:	0889      	lsrs	r1, r1, #2
 8000cbc:	b2c9      	uxtb	r1, r1
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	1c8b      	adds	r3, r1, #2
 8000cc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <SYSCFG_EXTILineConfig+0x80>)
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3302      	adds	r3, #2
 8000cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cd4:	79f9      	ldrb	r1, [r7, #7]
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <SYSCFG_EXTILineConfig+0x80>)
 8000ce4:	79b9      	ldrb	r1, [r7, #6]
 8000ce6:	0889      	lsrs	r1, r1, #2
 8000ce8:	b2c9      	uxtb	r1, r1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	1c8b      	adds	r3, r1, #2
 8000cee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40010000 	.word	0x40010000

08000d04 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d103      	bne.n	8000d72 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	e005      	b.n	8000d7e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d102      	bne.n	8000d7e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000d90:	e006      	b.n	8000da0 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	3724      	adds	r7, #36	@ 0x24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69da      	ldr	r2, [r3, #28]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e001      	b.n	8000dd0 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b087      	sub	sp, #28
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e00d      	b.n	8000e40 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d105      	bne.n	8000e36 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e004      	b.n	8000e40 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e46:	2201      	movs	r2, #1
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <USART_GetITStatus+0x8e>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000e66:	2301      	movs	r3, #1
 8000e68:	74fb      	strb	r3, [r7, #19]
 8000e6a:	e001      	b.n	8000e70 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2201      	movs	r2, #1
 8000e92:	fa02 f103 	lsl.w	r1, r2, r3
 8000e96:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <NVIC_EnableIRQ+0x30>)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	095b      	lsrs	r3, r3, #5
 8000e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <uart_put_char+0x30>)
 8000ec6:	f7ff ff1d 	bl	8000d04 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000eca:	bf00      	nop
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <uart_put_char+0x30>)
 8000ed0:	f7ff ff6c 	bl	8000dac <USART_GetFlagStatus>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <uart_put_char+0x18>
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e012      	b.n	8000f22 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b0a      	cmp	r3, #10
 8000f06:	d102      	bne.n	8000f0e <_write_r+0x26>
            uart_put_char('\r');
 8000f08:	200d      	movs	r0, #13
 8000f0a:	f7ff ffd3 	bl	8000eb4 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffcc 	bl	8000eb4 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbe8      	blt.n	8000efc <_write_r+0x14>
    }

    return len;
 8000f2a:	683b      	ldr	r3, [r7, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000f38:	4915      	ldr	r1, [pc, #84]	@ (8000f90 <USART2_IRQHandler+0x5c>)
 8000f3a:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <USART2_IRQHandler+0x60>)
 8000f3c:	f7ff ff4f 	bl	8000dde <USART_GetITStatus>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d021      	beq.n	8000f8a <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <USART2_IRQHandler+0x60>)
 8000f48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <USART2_IRQHandler+0x64>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	b2d0      	uxtb	r0, r2
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <USART2_IRQHandler+0x64>)
 8000f58:	7010      	strb	r0, [r2, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	b2c9      	uxtb	r1, r1
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <USART2_IRQHandler+0x68>)
 8000f60:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <USART2_IRQHandler+0x6c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2bff      	cmp	r3, #255	@ 0xff
 8000f6a:	d107      	bne.n	8000f7c <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <USART2_IRQHandler+0x70>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <USART2_IRQHandler+0x70>)
 8000f78:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000f7a:	e006      	b.n	8000f8a <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <USART2_IRQHandler+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <USART2_IRQHandler+0x6c>)
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	00050105 	.word	0x00050105
 8000f94:	40004400 	.word	0x40004400
 8000f98:	20000178 	.word	0x20000178
 8000f9c:	20000078 	.word	0x20000078
 8000fa0:	2000017a 	.word	0x2000017a
 8000fa4:	20000179 	.word	0x20000179

08000fa8 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000fb0:	4b86      	ldr	r3, [pc, #536]	@ (80011cc <uart_init+0x224>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fdcf 	bl	8001b5c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000fbe:	4b83      	ldr	r3, [pc, #524]	@ (80011cc <uart_init+0x224>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fdc8 	bl	8001b5c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000fcc:	4b80      	ldr	r3, [pc, #512]	@ (80011d0 <uart_init+0x228>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	4a7f      	ldr	r2, [pc, #508]	@ (80011d0 <uart_init+0x228>)
 8000fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80011d0 <uart_init+0x228>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	4a7c      	ldr	r2, [pc, #496]	@ (80011d0 <uart_init+0x228>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe2:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000fe4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ff2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000ff4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ffe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001002:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001004:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800100e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001012:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001014:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800101e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001022:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001024:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800102e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001032:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001034:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800103e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001042:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001044:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	b29b      	uxth	r3, r3
 800104c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001050:	f023 030c 	bic.w	r3, r3, #12
 8001054:	b29b      	uxth	r3, r3
 8001056:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001058:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800105c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001060:	8892      	ldrh	r2, [r2, #4]
 8001062:	b292      	uxth	r2, r2
 8001064:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001066:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001074:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001076:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001080:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001084:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001086:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001090:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001094:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001096:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010a0:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80010a4:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 80010a6:	4b4b      	ldr	r3, [pc, #300]	@ (80011d4 <uart_init+0x22c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a4a      	ldr	r2, [pc, #296]	@ (80011d4 <uart_init+0x22c>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80010b2:	4b48      	ldr	r3, [pc, #288]	@ (80011d4 <uart_init+0x22c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4a47      	ldr	r2, [pc, #284]	@ (80011d4 <uart_init+0x22c>)
 80010b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010bc:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80010be:	4b45      	ldr	r3, [pc, #276]	@ (80011d4 <uart_init+0x22c>)
 80010c0:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <uart_init+0x22c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80010c6:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <uart_init+0x22c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a42      	ldr	r2, [pc, #264]	@ (80011d4 <uart_init+0x22c>)
 80010cc:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80010d0:	f023 030c 	bic.w	r3, r3, #12
 80010d4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <uart_init+0x22c>)
 80010d8:	4a3e      	ldr	r2, [pc, #248]	@ (80011d4 <uart_init+0x22c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80010de:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <uart_init+0x22c>)
 80010e0:	4a3c      	ldr	r2, [pc, #240]	@ (80011d4 <uart_init+0x22c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <uart_init+0x22c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a3a      	ldr	r2, [pc, #232]	@ (80011d4 <uart_init+0x22c>)
 80010ec:	f043 030c 	orr.w	r3, r3, #12
 80010f0:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <uart_init+0x22c>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a37      	ldr	r2, [pc, #220]	@ (80011d4 <uart_init+0x22c>)
 80010f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010fc:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <uart_init+0x22c>)
 8001100:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <uart_init+0x22c>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800110a:	2300      	movs	r3, #0
 800110c:	647b      	str	r3, [r7, #68]	@ 0x44
 800110e:	2300      	movs	r3, #0
 8001110:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fb5e 	bl	80007d8 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800111c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111e:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <uart_init+0x22c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d010      	beq.n	800114e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800112c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800112e:	005a      	lsls	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	fb01 f202 	mul.w	r2, r1, r2
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800114c:	e00d      	b.n	800116a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800114e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	fb01 f202 	mul.w	r2, r1, r2
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	085b      	lsrs	r3, r3, #1
 800116e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001170:	429a      	cmp	r2, r3
 8001172:	d302      	bcc.n	800117a <uart_init+0x1d2>
        divider++;
 8001174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001176:	3301      	adds	r3, #1
 8001178:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <uart_init+0x22c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001188:	085b      	lsrs	r3, r3, #1
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001192:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001196:	4013      	ands	r3, r2
 8001198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800119a:	4313      	orrs	r3, r2
 800119c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <uart_init+0x22c>)
 80011a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011a2:	b292      	uxth	r2, r2
 80011a4:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <uart_init+0x22c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <uart_init+0x22c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80011b2:	2201      	movs	r2, #1
 80011b4:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <uart_init+0x230>)
 80011b6:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <uart_init+0x22c>)
 80011b8:	f7ff fdb6 	bl	8000d28 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80011bc:	2026      	movs	r0, #38	@ 0x26
 80011be:	f7ff fe5f 	bl	8000e80 <NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3750      	adds	r7, #80	@ 0x50
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40004400 	.word	0x40004400
 80011d8:	00050105 	.word	0x00050105

080011dc <initJoystick>:

#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" 		// Input/output library for this course


void initJoystick(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB,ENABLE);
 80011e2:	2101      	movs	r1, #1
 80011e4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80011e8:	f7ff fd0a 	bl	8000c00 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
 80011ec:	2101      	movs	r1, #1
 80011ee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011f2:	f7ff fd05 	bl	8000c00 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 80011f6:	2101      	movs	r1, #1
 80011f8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80011fc:	f7ff fd00 	bl	8000c00 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;

	GPIO_StructInit(&GPIO_InitStructAll);
 8001200:	463b      	mov	r3, r7
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fa22 	bl	800064c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001208:	2300      	movs	r3, #0
 800120a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800120c:	2302      	movs	r3, #2
 800120e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 8001210:	2310      	movs	r3, #16
 8001212:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructAll);
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121c:	f7ff f980 	bl	8000520 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 8001220:	463b      	mov	r3, r7
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fa12 	bl	800064c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001228:	2300      	movs	r3, #0
 800122a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800122c:	2302      	movs	r3, #2
 800122e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_0;
 8001230:	2321      	movs	r3, #33	@ 0x21
 8001232:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <initJoystick+0x88>)
 800123a:	f7ff f971 	bl	8000520 <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructAll);
 800123e:	463b      	mov	r3, r7
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fa03 	bl	800064c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_IN;
 8001246:	2300      	movs	r3, #0
 8001248:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_PuPd = GPIO_PuPd_DOWN;
 800124a:	2302      	movs	r3, #2
 800124c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800124e:	2303      	movs	r3, #3
 8001250:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	@ (8001268 <initJoystick+0x8c>)
 8001258:	f7ff f962 	bl	8000520 <GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800

0800126c <readJoystick>:


int8_t readJoystick(){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

	int8_t bit = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]

	int8_t Up = GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);
 8001276:	2110      	movs	r1, #16
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f7ff fa00 	bl	8000680 <GPIO_ReadInputDataBit>
 8001280:	4603      	mov	r3, r0
 8001282:	71bb      	strb	r3, [r7, #6]
	int8_t Center= GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5);
 8001284:	2120      	movs	r1, #32
 8001286:	4821      	ldr	r0, [pc, #132]	@ (800130c <readJoystick+0xa0>)
 8001288:	f7ff f9fa 	bl	8000680 <GPIO_ReadInputDataBit>
 800128c:	4603      	mov	r3, r0
 800128e:	717b      	strb	r3, [r7, #5]
	int8_t Down = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8001290:	2101      	movs	r1, #1
 8001292:	481e      	ldr	r0, [pc, #120]	@ (800130c <readJoystick+0xa0>)
 8001294:	f7ff f9f4 	bl	8000680 <GPIO_ReadInputDataBit>
 8001298:	4603      	mov	r3, r0
 800129a:	713b      	strb	r3, [r7, #4]
	int8_t Left = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1);
 800129c:	2102      	movs	r1, #2
 800129e:	481c      	ldr	r0, [pc, #112]	@ (8001310 <readJoystick+0xa4>)
 80012a0:	f7ff f9ee 	bl	8000680 <GPIO_ReadInputDataBit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	70fb      	strb	r3, [r7, #3]
	int8_t Right = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0);
 80012a8:	2101      	movs	r1, #1
 80012aa:	4819      	ldr	r0, [pc, #100]	@ (8001310 <readJoystick+0xa4>)
 80012ac:	f7ff f9e8 	bl	8000680 <GPIO_ReadInputDataBit>
 80012b0:	4603      	mov	r3, r0
 80012b2:	70bb      	strb	r3, [r7, #2]

	if (Up == 1){
 80012b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <readJoystick+0x56>
		bit = Up;
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e01e      	b.n	8001300 <readJoystick+0x94>
	} else if (Down == 1){
 80012c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d103      	bne.n	80012d2 <readJoystick+0x66>
		bit = Down << 1;
 80012ca:	793b      	ldrb	r3, [r7, #4]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	e016      	b.n	8001300 <readJoystick+0x94>
	} else if (Left == 1){
 80012d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d103      	bne.n	80012e2 <readJoystick+0x76>
		bit = Left << 2;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	e00e      	b.n	8001300 <readJoystick+0x94>
	} else if (Right == 1){
 80012e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d103      	bne.n	80012f2 <readJoystick+0x86>
		bit = Right << 3;
 80012ea:	78bb      	ldrb	r3, [r7, #2]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	e006      	b.n	8001300 <readJoystick+0x94>
	} else if (Center == 1){
 80012f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <readJoystick+0x94>
		bit = Center << 4;
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	71fb      	strb	r3, [r7, #7]
	}

	return bit;
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800

08001314 <initLED>:
#include "led.h"

// Code needed in main.c is included in the bottom of the file

void initLED() {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Ports
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);	// Port A
 800131a:	2101      	movs	r1, #1
 800131c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001320:	f7ff fc6e 	bl	8000c00 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8001324:	2101      	movs	r1, #1
 8001326:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800132a:	f7ff fc69 	bl	8000c00 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);	// Port C
 800132e:	2101      	movs	r1, #1
 8001330:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001334:	f7ff fc64 	bl	8000c00 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll; 				// Define typedef struct for setting pins


	// Sets PA9 (BLUE) to output
	GPIO_StructInit(&GPIO_InitStructAll);				// Initialize GPIO struct
 8001338:	463b      	mov	r3, r7
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f986 	bl	800064c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;		// Set as output
 8001340:	2301      	movs	r3, #1
 8001342:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;		// Set as Push-Pull
 8001344:	2300      	movs	r3, #0
 8001346:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_9;			// Set so the configuration is on pin 9
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;	// Set speed to 2 MHz
 800134e:	2302      	movs	r3, #2
 8001350:	717b      	strb	r3, [r7, #5]
														// For all options see SPL/inc/stm32f30x_gpio.h
	GPIO_Init(GPIOA, &GPIO_InitStructAll); 				// Setup of GPIO with the settings chosen
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135a:	f7ff f8e1 	bl	8000520 <GPIO_Init>

	// Sets PB4 (RED) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 800135e:	463b      	mov	r3, r7
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f973 	bl	800064c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001366:	2301      	movs	r3, #1
 8001368:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 800136a:	2300      	movs	r3, #0
 800136c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4;
 800136e:	2310      	movs	r3, #16
 8001370:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001372:	2302      	movs	r3, #2
 8001374:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <initLED+0x9c>)
 800137c:	f7ff f8d0 	bl	8000520 <GPIO_Init>

	// Sets PC7 (GREEN) to output
	GPIO_StructInit(&GPIO_InitStructAll);
 8001380:	463b      	mov	r3, r7
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f962 	bl	800064c <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001388:	2301      	movs	r3, #1
 800138a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 800138c:	2300      	movs	r3, #0
 800138e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_7;
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_2MHz;
 8001394:	2302      	movs	r3, #2
 8001396:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOC, &GPIO_InitStructAll);
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <initLED+0xa0>)
 800139e:	f7ff f8bf 	bl	8000520 <GPIO_Init>

	// Initialize LED to off
	setLED('d');
 80013a2:	2064      	movs	r0, #100	@ 0x64
 80013a4:	f000 f808 	bl	80013b8 <setLED>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48000800 	.word	0x48000800

080013b8 <setLED>:

void setLED(char sel) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b72      	cmp	r3, #114	@ 0x72
 80013c6:	d111      	bne.n	80013ec <setLED+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80013c8:	2200      	movs	r2, #0
 80013ca:	2110      	movs	r1, #16
 80013cc:	4852      	ldr	r0, [pc, #328]	@ (8001518 <setLED+0x160>)
 80013ce:	f7ff f973 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80013d2:	2201      	movs	r2, #1
 80013d4:	2180      	movs	r1, #128	@ 0x80
 80013d6:	4851      	ldr	r0, [pc, #324]	@ (800151c <setLED+0x164>)
 80013d8:	f7ff f96e 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e6:	f7ff f967 	bl	80006b8 <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 80013ea:	e091      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'g') {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b67      	cmp	r3, #103	@ 0x67
 80013f0:	d111      	bne.n	8001416 <setLED+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80013f2:	2201      	movs	r2, #1
 80013f4:	2110      	movs	r1, #16
 80013f6:	4848      	ldr	r0, [pc, #288]	@ (8001518 <setLED+0x160>)
 80013f8:	f7ff f95e 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80013fc:	2200      	movs	r2, #0
 80013fe:	2180      	movs	r1, #128	@ 0x80
 8001400:	4846      	ldr	r0, [pc, #280]	@ (800151c <setLED+0x164>)
 8001402:	f7ff f959 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f7ff f952 	bl	80006b8 <GPIO_WriteBit>
}
 8001414:	e07c      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'b') {
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b62      	cmp	r3, #98	@ 0x62
 800141a:	d111      	bne.n	8001440 <setLED+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 800141c:	2201      	movs	r2, #1
 800141e:	2110      	movs	r1, #16
 8001420:	483d      	ldr	r0, [pc, #244]	@ (8001518 <setLED+0x160>)
 8001422:	f7ff f949 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001426:	2201      	movs	r2, #1
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	483c      	ldr	r0, [pc, #240]	@ (800151c <setLED+0x164>)
 800142c:	f7ff f944 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f7ff f93d 	bl	80006b8 <GPIO_WriteBit>
}
 800143e:	e067      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'c') {
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b63      	cmp	r3, #99	@ 0x63
 8001444:	d111      	bne.n	800146a <setLED+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	4833      	ldr	r0, [pc, #204]	@ (8001518 <setLED+0x160>)
 800144c:	f7ff f934 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001450:	2200      	movs	r2, #0
 8001452:	2180      	movs	r1, #128	@ 0x80
 8001454:	4831      	ldr	r0, [pc, #196]	@ (800151c <setLED+0x164>)
 8001456:	f7ff f92f 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001464:	f7ff f928 	bl	80006b8 <GPIO_WriteBit>
}
 8001468:	e052      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'm') {
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b6d      	cmp	r3, #109	@ 0x6d
 800146e:	d111      	bne.n	8001494 <setLED+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 8001470:	2200      	movs	r2, #0
 8001472:	2110      	movs	r1, #16
 8001474:	4828      	ldr	r0, [pc, #160]	@ (8001518 <setLED+0x160>)
 8001476:	f7ff f91f 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800147a:	2201      	movs	r2, #1
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	4827      	ldr	r0, [pc, #156]	@ (800151c <setLED+0x164>)
 8001480:	f7ff f91a 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148e:	f7ff f913 	bl	80006b8 <GPIO_WriteBit>
}
 8001492:	e03d      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'y') {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b79      	cmp	r3, #121	@ 0x79
 8001498:	d111      	bne.n	80014be <setLED+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	481e      	ldr	r0, [pc, #120]	@ (8001518 <setLED+0x160>)
 80014a0:	f7ff f90a 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80014a4:	2200      	movs	r2, #0
 80014a6:	2180      	movs	r1, #128	@ 0x80
 80014a8:	481c      	ldr	r0, [pc, #112]	@ (800151c <setLED+0x164>)
 80014aa:	f7ff f905 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b8:	f7ff f8fe 	bl	80006b8 <GPIO_WriteBit>
}
 80014bc:	e028      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'w') {
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b77      	cmp	r3, #119	@ 0x77
 80014c2:	d111      	bne.n	80014e8 <setLED+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4813      	ldr	r0, [pc, #76]	@ (8001518 <setLED+0x160>)
 80014ca:	f7ff f8f5 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80014ce:	2200      	movs	r2, #0
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	4812      	ldr	r0, [pc, #72]	@ (800151c <setLED+0x164>)
 80014d4:	f7ff f8f0 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f7ff f8e9 	bl	80006b8 <GPIO_WriteBit>
}
 80014e6:	e013      	b.n	8001510 <setLED+0x158>
	} else if (sel == 'd') {
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d110      	bne.n	8001510 <setLED+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <setLED+0x160>)
 80014f4:	f7ff f8e0 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80014f8:	2201      	movs	r2, #1
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4807      	ldr	r0, [pc, #28]	@ (800151c <setLED+0x164>)
 80014fe:	f7ff f8db 	bl	80006b8 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f7ff f8d4 	bl	80006b8 <GPIO_WriteBit>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	48000400 	.word	0x48000400
 800151c:	48000800 	.word	0x48000800

08001520 <EXTI9_5_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_InitStructure);
}

void EXTI9_5_IRQHandler(void){
 8001520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af02      	add	r7, sp, #8
	if(EXTI_GetITStatus(EXTI_Line5) != RESET){
 8001528:	2005      	movs	r0, #5
 800152a:	f7fe ffa7 	bl	800047c <EXTI_GetITStatus>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d02d      	beq.n	8001590 <EXTI9_5_IRQHandler+0x70>
		printf("Right : %d | Up : %d | Center : %d | Left : %d | Down : %d\n",GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0),GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5),GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0));
 8001534:	2101      	movs	r1, #1
 8001536:	4818      	ldr	r0, [pc, #96]	@ (8001598 <EXTI9_5_IRQHandler+0x78>)
 8001538:	f7ff f8a2 	bl	8000680 <GPIO_ReadInputDataBit>
 800153c:	4603      	mov	r3, r0
 800153e:	461d      	mov	r5, r3
 8001540:	2110      	movs	r1, #16
 8001542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001546:	f7ff f89b 	bl	8000680 <GPIO_ReadInputDataBit>
 800154a:	4603      	mov	r3, r0
 800154c:	461e      	mov	r6, r3
 800154e:	2120      	movs	r1, #32
 8001550:	4812      	ldr	r0, [pc, #72]	@ (800159c <EXTI9_5_IRQHandler+0x7c>)
 8001552:	f7ff f895 	bl	8000680 <GPIO_ReadInputDataBit>
 8001556:	4603      	mov	r3, r0
 8001558:	4698      	mov	r8, r3
 800155a:	2102      	movs	r1, #2
 800155c:	480e      	ldr	r0, [pc, #56]	@ (8001598 <EXTI9_5_IRQHandler+0x78>)
 800155e:	f7ff f88f 	bl	8000680 <GPIO_ReadInputDataBit>
 8001562:	4603      	mov	r3, r0
 8001564:	461c      	mov	r4, r3
 8001566:	2101      	movs	r1, #1
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <EXTI9_5_IRQHandler+0x7c>)
 800156a:	f7ff f889 	bl	8000680 <GPIO_ReadInputDataBit>
 800156e:	4603      	mov	r3, r0
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	9400      	str	r4, [sp, #0]
 8001574:	4643      	mov	r3, r8
 8001576:	4632      	mov	r2, r6
 8001578:	4629      	mov	r1, r5
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <EXTI9_5_IRQHandler+0x80>)
 800157c:	f000 fa7e 	bl	8001a7c <iprintf>
		GPIO_WriteBit(GPIOC,GPIO_Pin_7,Bit_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <EXTI9_5_IRQHandler+0x78>)
 8001586:	f7ff f897 	bl	80006b8 <GPIO_WriteBit>
		EXTI_ClearITPendingBit(EXTI_Line5);
 800158a:	2005      	movs	r0, #5
 800158c:	f7fe ffae 	bl	80004ec <EXTI_ClearITPendingBit>
	}
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001598:	48000800 	.word	0x48000800
 800159c:	48000400 	.word	0x48000400
 80015a0:	0800299c 	.word	0x0800299c

080015a4 <configEXTIA4>:


void configEXTIA4(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80015aa:	2101      	movs	r1, #1
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fb47 	bl	8000c40 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource4);
 80015b2:	2104      	movs	r1, #4
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fb63 	bl	8000c80 <SYSCFG_EXTILineConfig>
	EXTI_InitTypeDef EXTI_InitStructureUp;
	EXTI_InitStructureUp.EXTI_Line = EXTI_Line4; // line 5 see [RM p. 215]
 80015ba:	2304      	movs	r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructureUp.EXTI_LineCmd = ENABLE;
 80015be:	2301      	movs	r3, #1
 80015c0:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStructureUp.EXTI_Mode = EXTI_Mode_Interrupt;
 80015c2:	2300      	movs	r3, #0
 80015c4:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructureUp.EXTI_Trigger = EXTI_Trigger_Rising;
 80015c6:	2308      	movs	r3, #8
 80015c8:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStructureUp);
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe4e 	bl	8000270 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80015d4:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 80015d8:	f7ff f886 	bl	80006e8 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructureUp;
	NVIC_InitStructureUp.NVIC_IRQChannel = EXTI4_IRQn;
 80015dc:	230a      	movs	r3, #10
 80015de:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructureUp.NVIC_IRQChannelCmd = ENABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructureUp.NVIC_IRQChannelPreemptionPriority = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructureUp.NVIC_IRQChannelSubPriority = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStructureUp);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f88e 	bl	8000710 <NVIC_Init>

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001600:	2004      	movs	r0, #4
 8001602:	f7fe ff3b 	bl	800047c <EXTI_GetITStatus>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
        setLED('r');
 800160c:	2072      	movs	r0, #114	@ 0x72
 800160e:	f7ff fed3 	bl	80013b8 <setLED>
        // Clear the interrupt flag
        EXTI_ClearITPendingBit(EXTI_Line4);
 8001612:	2004      	movs	r0, #4
 8001614:	f7fe ff6a 	bl	80004ec <EXTI_ClearITPendingBit>
	//Do some important stuff here!...
//	NVIC_SetPriority(EXTI4_IRQn, priority); // Set interrupt priority
//	NVIC_EnableIRQ(EXTI4_IRQn); // Enable interrupt
//	EXTI_ClearITPendingBit(EXTI_Line4); //Clear the interrupt pending bit

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	//Do some important stuff here!...

	EXTI_ClearITPendingBit(EXTI_Line0); //Clear the interrupt pending bit
 8001620:	2000      	movs	r0, #0
 8001622:	f7fe ff63 	bl	80004ec <EXTI_ClearITPendingBit>

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <main>:

int main(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8001632:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8001636:	f7ff fcb7 	bl	8000fa8 <uart_init>

	initJoystick();
 800163a:	f7ff fdcf 	bl	80011dc <initJoystick>
	initLED();
 800163e:	f7ff fe69 	bl	8001314 <initLED>
//	ini_EXTI_NVIC();
	configEXTIA4();
 8001642:	f7ff ffaf 	bl	80015a4 <configEXTIA4>
	EXTI_ClearITPendingBit(EXTI_Line4);
 8001646:	2004      	movs	r0, #4
 8001648:	f7fe ff50 	bl	80004ec <EXTI_ClearITPendingBit>


	int8_t prev_state = readJoystick();
 800164c:	f7ff fe0e 	bl	800126c <readJoystick>
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
	int8_t current_state;

	while(1) {
		current_state = readJoystick();
 8001654:	f7ff fe0a 	bl	800126c <readJoystick>
 8001658:	4603      	mov	r3, r0
 800165a:	71bb      	strb	r3, [r7, #6]
		if (prev_state != current_state) {
 800165c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001660:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001664:	429a      	cmp	r2, r3
 8001666:	d0f5      	beq.n	8001654 <main+0x28>
			if (current_state == 1) {
 8001668:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d103      	bne.n	8001678 <main+0x4c>
//				setLED('r');
				printf("UP (red)\n");
 8001670:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <main+0x98>)
 8001672:	f000 fa6b 	bl	8001b4c <puts>
 8001676:	e022      	b.n	80016be <main+0x92>
			} else if (current_state == 2) {
 8001678:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d103      	bne.n	8001688 <main+0x5c>
//				setLED('g');
				printf("DOWN (green)\n");
 8001680:	4811      	ldr	r0, [pc, #68]	@ (80016c8 <main+0x9c>)
 8001682:	f000 fa63 	bl	8001b4c <puts>
 8001686:	e01a      	b.n	80016be <main+0x92>
			} else if (current_state == 4) {
 8001688:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d103      	bne.n	8001698 <main+0x6c>
//				setLED('b');
				printf("LEFT (blue)\n");
 8001690:	480e      	ldr	r0, [pc, #56]	@ (80016cc <main+0xa0>)
 8001692:	f000 fa5b 	bl	8001b4c <puts>
 8001696:	e012      	b.n	80016be <main+0x92>
			} else if (current_state == 8) {
 8001698:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800169c:	2b08      	cmp	r3, #8
 800169e:	d103      	bne.n	80016a8 <main+0x7c>
//				setLED('c');
				printf("RIGHT (cyan)\n");
 80016a0:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <main+0xa4>)
 80016a2:	f000 fa53 	bl	8001b4c <puts>
 80016a6:	e00a      	b.n	80016be <main+0x92>
			} else if (current_state == 16) {
 80016a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d103      	bne.n	80016b8 <main+0x8c>
//				setLED('m');
				printf("CENTER (magenta)\n");
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <main+0xa8>)
 80016b2:	f000 fa4b 	bl	8001b4c <puts>
 80016b6:	e002      	b.n	80016be <main+0x92>
			} else {
				setLED('d');
 80016b8:	2064      	movs	r0, #100	@ 0x64
 80016ba:	f7ff fe7d 	bl	80013b8 <setLED>
			}
			prev_state = current_state;
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	71fb      	strb	r3, [r7, #7]
		current_state = readJoystick();
 80016c2:	e7c7      	b.n	8001654 <main+0x28>
 80016c4:	080029d8 	.word	0x080029d8
 80016c8:	080029e4 	.word	0x080029e4
 80016cc:	080029f4 	.word	0x080029f4
 80016d0:	08002a00 	.word	0x08002a00
 80016d4:	08002a10 	.word	0x08002a10

080016d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e00a      	b.n	8001700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ea:	f3af 8000 	nop.w
 80016ee:	4601      	mov	r1, r0
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf0      	blt.n	80016ea <_read+0x12>
	}

return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800173a:	605a      	str	r2, [r3, #4]
	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
	return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <SystemInit+0x84>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001786:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <SystemInit+0x84>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <SystemInit+0x88>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <SystemInit+0x88>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <SystemInit+0x88>)
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4918      	ldr	r1, [pc, #96]	@ (8001804 <SystemInit+0x88>)
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <SystemInit+0x8c>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <SystemInit+0x88>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <SystemInit+0x88>)
 80017ae:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <SystemInit+0x88>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <SystemInit+0x88>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <SystemInit+0x88>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <SystemInit+0x88>)
 80017ca:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80017ce:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <SystemInit+0x88>)
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <SystemInit+0x88>)
 80017d6:	f023 030f 	bic.w	r3, r3, #15
 80017da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <SystemInit+0x88>)
 80017de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e0:	4908      	ldr	r1, [pc, #32]	@ (8001804 <SystemInit+0x88>)
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <SystemInit+0x90>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x88>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80017ee:	f000 f80f 	bl	8001810 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017f2:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <SystemInit+0x84>)
 80017f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017f8:	609a      	str	r2, [r3, #8]
#endif  
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	40021000 	.word	0x40021000
 8001808:	f87fc00c 	.word	0xf87fc00c
 800180c:	ff00fccc 	.word	0xff00fccc

08001810 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001814:	4b21      	ldr	r3, [pc, #132]	@ (800189c <SetSysClock+0x8c>)
 8001816:	2212      	movs	r2, #18
 8001818:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <SetSysClock+0x90>)
 800181c:	4a20      	ldr	r2, [pc, #128]	@ (80018a0 <SetSysClock+0x90>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <SetSysClock+0x90>)
 8001824:	4a1e      	ldr	r2, [pc, #120]	@ (80018a0 <SetSysClock+0x90>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800182a:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <SetSysClock+0x90>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a1c      	ldr	r2, [pc, #112]	@ (80018a0 <SetSysClock+0x90>)
 8001830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001834:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <SetSysClock+0x90>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <SetSysClock+0x90>)
 800183c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001840:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <SetSysClock+0x90>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <SetSysClock+0x90>)
 8001848:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 800184c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <SetSysClock+0x90>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <SetSysClock+0x90>)
 8001854:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001858:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800185a:	bf00      	nop
 800185c:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <SetSysClock+0x90>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f9      	beq.n	800185c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <SetSysClock+0x90>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <SetSysClock+0x90>)
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <SetSysClock+0x90>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <SetSysClock+0x90>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001880:	bf00      	nop
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <SetSysClock+0x90>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b08      	cmp	r3, #8
 800188c:	d1f9      	bne.n	8001882 <SetSysClock+0x72>
  {
  }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000
 80018a0:	40021000 	.word	0x40021000

080018a4 <Reset_Handler>:
 80018a4:	480d      	ldr	r0, [pc, #52]	@ (80018dc <LoopForever+0x2>)
 80018a6:	4685      	mov	sp, r0
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <LoopForever+0x6>)
 80018aa:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <LoopForever+0xa>)
 80018ac:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <LoopForever+0xe>)
 80018ae:	2300      	movs	r3, #0
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:
 80018b2:	58d4      	ldr	r4, [r2, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:
 80018b8:	18c4      	adds	r4, r0, r3
 80018ba:	428c      	cmp	r4, r1
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <LoopForever+0x12>)
 80018c0:	4c0b      	ldr	r4, [pc, #44]	@ (80018f0 <LoopForever+0x16>)
 80018c2:	2300      	movs	r3, #0
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:
 80018ca:	42a2      	cmp	r2, r4
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>
 80018ce:	f7ff ff55 	bl	800177c <SystemInit>
 80018d2:	f000 fb13 	bl	8001efc <__libc_init_array>
 80018d6:	f7ff fea9 	bl	800162c <main>

080018da <LoopForever>:
 80018da:	e7fe      	b.n	80018da <LoopForever>
 80018dc:	20004000 	.word	0x20004000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	2000005c 	.word	0x2000005c
 80018e8:	08002a94 	.word	0x08002a94
 80018ec:	2000005c 	.word	0x2000005c
 80018f0:	200002cc 	.word	0x200002cc

080018f4 <ADC1_2_IRQHandler>:
 80018f4:	e7fe      	b.n	80018f4 <ADC1_2_IRQHandler>
	...

080018f8 <std>:
 80018f8:	2300      	movs	r3, #0
 80018fa:	b510      	push	{r4, lr}
 80018fc:	4604      	mov	r4, r0
 80018fe:	e9c0 3300 	strd	r3, r3, [r0]
 8001902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001906:	6083      	str	r3, [r0, #8]
 8001908:	8181      	strh	r1, [r0, #12]
 800190a:	6643      	str	r3, [r0, #100]	@ 0x64
 800190c:	81c2      	strh	r2, [r0, #14]
 800190e:	6183      	str	r3, [r0, #24]
 8001910:	4619      	mov	r1, r3
 8001912:	2208      	movs	r2, #8
 8001914:	305c      	adds	r0, #92	@ 0x5c
 8001916:	f000 fab5 	bl	8001e84 <memset>
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <std+0x58>)
 800191c:	6263      	str	r3, [r4, #36]	@ 0x24
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <std+0x5c>)
 8001920:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <std+0x60>)
 8001924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <std+0x64>)
 8001928:	6323      	str	r3, [r4, #48]	@ 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <std+0x68>)
 800192c:	6224      	str	r4, [r4, #32]
 800192e:	429c      	cmp	r4, r3
 8001930:	d006      	beq.n	8001940 <std+0x48>
 8001932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001936:	4294      	cmp	r4, r2
 8001938:	d002      	beq.n	8001940 <std+0x48>
 800193a:	33d0      	adds	r3, #208	@ 0xd0
 800193c:	429c      	cmp	r4, r3
 800193e:	d105      	bne.n	800194c <std+0x54>
 8001940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001948:	f000 bafc 	b.w	8001f44 <__retarget_lock_init_recursive>
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop
 8001950:	08001cd5 	.word	0x08001cd5
 8001954:	08001cf7 	.word	0x08001cf7
 8001958:	08001d2f 	.word	0x08001d2f
 800195c:	08001d53 	.word	0x08001d53
 8001960:	2000017c 	.word	0x2000017c

08001964 <stdio_exit_handler>:
 8001964:	4a02      	ldr	r2, [pc, #8]	@ (8001970 <stdio_exit_handler+0xc>)
 8001966:	4903      	ldr	r1, [pc, #12]	@ (8001974 <stdio_exit_handler+0x10>)
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <stdio_exit_handler+0x14>)
 800196a:	f000 b869 	b.w	8001a40 <_fwalk_sglue>
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000
 8001974:	080027f1 	.word	0x080027f1
 8001978:	20000010 	.word	0x20000010

0800197c <cleanup_stdio>:
 800197c:	6841      	ldr	r1, [r0, #4]
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <cleanup_stdio+0x34>)
 8001980:	4299      	cmp	r1, r3
 8001982:	b510      	push	{r4, lr}
 8001984:	4604      	mov	r4, r0
 8001986:	d001      	beq.n	800198c <cleanup_stdio+0x10>
 8001988:	f000 ff32 	bl	80027f0 <_fflush_r>
 800198c:	68a1      	ldr	r1, [r4, #8]
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <cleanup_stdio+0x38>)
 8001990:	4299      	cmp	r1, r3
 8001992:	d002      	beq.n	800199a <cleanup_stdio+0x1e>
 8001994:	4620      	mov	r0, r4
 8001996:	f000 ff2b 	bl	80027f0 <_fflush_r>
 800199a:	68e1      	ldr	r1, [r4, #12]
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <cleanup_stdio+0x3c>)
 800199e:	4299      	cmp	r1, r3
 80019a0:	d004      	beq.n	80019ac <cleanup_stdio+0x30>
 80019a2:	4620      	mov	r0, r4
 80019a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019a8:	f000 bf22 	b.w	80027f0 <_fflush_r>
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	bf00      	nop
 80019b0:	2000017c 	.word	0x2000017c
 80019b4:	200001e4 	.word	0x200001e4
 80019b8:	2000024c 	.word	0x2000024c

080019bc <global_stdio_init.part.0>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <global_stdio_init.part.0+0x30>)
 80019c0:	4c0b      	ldr	r4, [pc, #44]	@ (80019f0 <global_stdio_init.part.0+0x34>)
 80019c2:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <global_stdio_init.part.0+0x38>)
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	4620      	mov	r0, r4
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	f7ff ff94 	bl	80018f8 <std>
 80019d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80019d4:	2201      	movs	r2, #1
 80019d6:	2109      	movs	r1, #9
 80019d8:	f7ff ff8e 	bl	80018f8 <std>
 80019dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80019e0:	2202      	movs	r2, #2
 80019e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019e6:	2112      	movs	r1, #18
 80019e8:	f7ff bf86 	b.w	80018f8 <std>
 80019ec:	200002b4 	.word	0x200002b4
 80019f0:	2000017c 	.word	0x2000017c
 80019f4:	08001965 	.word	0x08001965

080019f8 <__sfp_lock_acquire>:
 80019f8:	4801      	ldr	r0, [pc, #4]	@ (8001a00 <__sfp_lock_acquire+0x8>)
 80019fa:	f000 baa4 	b.w	8001f46 <__retarget_lock_acquire_recursive>
 80019fe:	bf00      	nop
 8001a00:	200002bd 	.word	0x200002bd

08001a04 <__sfp_lock_release>:
 8001a04:	4801      	ldr	r0, [pc, #4]	@ (8001a0c <__sfp_lock_release+0x8>)
 8001a06:	f000 ba9f 	b.w	8001f48 <__retarget_lock_release_recursive>
 8001a0a:	bf00      	nop
 8001a0c:	200002bd 	.word	0x200002bd

08001a10 <__sinit>:
 8001a10:	b510      	push	{r4, lr}
 8001a12:	4604      	mov	r4, r0
 8001a14:	f7ff fff0 	bl	80019f8 <__sfp_lock_acquire>
 8001a18:	6a23      	ldr	r3, [r4, #32]
 8001a1a:	b11b      	cbz	r3, 8001a24 <__sinit+0x14>
 8001a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a20:	f7ff bff0 	b.w	8001a04 <__sfp_lock_release>
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <__sinit+0x28>)
 8001a26:	6223      	str	r3, [r4, #32]
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <__sinit+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f5      	bne.n	8001a1c <__sinit+0xc>
 8001a30:	f7ff ffc4 	bl	80019bc <global_stdio_init.part.0>
 8001a34:	e7f2      	b.n	8001a1c <__sinit+0xc>
 8001a36:	bf00      	nop
 8001a38:	0800197d 	.word	0x0800197d
 8001a3c:	200002b4 	.word	0x200002b4

08001a40 <_fwalk_sglue>:
 8001a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a44:	4607      	mov	r7, r0
 8001a46:	4688      	mov	r8, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a50:	f1b9 0901 	subs.w	r9, r9, #1
 8001a54:	d505      	bpl.n	8001a62 <_fwalk_sglue+0x22>
 8001a56:	6824      	ldr	r4, [r4, #0]
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d1f7      	bne.n	8001a4c <_fwalk_sglue+0xc>
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a62:	89ab      	ldrh	r3, [r5, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d907      	bls.n	8001a78 <_fwalk_sglue+0x38>
 8001a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	d003      	beq.n	8001a78 <_fwalk_sglue+0x38>
 8001a70:	4629      	mov	r1, r5
 8001a72:	4638      	mov	r0, r7
 8001a74:	47c0      	blx	r8
 8001a76:	4306      	orrs	r6, r0
 8001a78:	3568      	adds	r5, #104	@ 0x68
 8001a7a:	e7e9      	b.n	8001a50 <_fwalk_sglue+0x10>

08001a7c <iprintf>:
 8001a7c:	b40f      	push	{r0, r1, r2, r3}
 8001a7e:	b507      	push	{r0, r1, r2, lr}
 8001a80:	4906      	ldr	r1, [pc, #24]	@ (8001a9c <iprintf+0x20>)
 8001a82:	ab04      	add	r3, sp, #16
 8001a84:	6808      	ldr	r0, [r1, #0]
 8001a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a8a:	6881      	ldr	r1, [r0, #8]
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	f000 fb87 	bl	80021a0 <_vfiprintf_r>
 8001a92:	b003      	add	sp, #12
 8001a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a98:	b004      	add	sp, #16
 8001a9a:	4770      	bx	lr
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <_puts_r>:
 8001aa0:	6a03      	ldr	r3, [r0, #32]
 8001aa2:	b570      	push	{r4, r5, r6, lr}
 8001aa4:	6884      	ldr	r4, [r0, #8]
 8001aa6:	4605      	mov	r5, r0
 8001aa8:	460e      	mov	r6, r1
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <_puts_r+0x10>
 8001aac:	f7ff ffb0 	bl	8001a10 <__sinit>
 8001ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ab2:	07db      	lsls	r3, r3, #31
 8001ab4:	d405      	bmi.n	8001ac2 <_puts_r+0x22>
 8001ab6:	89a3      	ldrh	r3, [r4, #12]
 8001ab8:	0598      	lsls	r0, r3, #22
 8001aba:	d402      	bmi.n	8001ac2 <_puts_r+0x22>
 8001abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001abe:	f000 fa42 	bl	8001f46 <__retarget_lock_acquire_recursive>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	0719      	lsls	r1, r3, #28
 8001ac6:	d502      	bpl.n	8001ace <_puts_r+0x2e>
 8001ac8:	6923      	ldr	r3, [r4, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d135      	bne.n	8001b3a <_puts_r+0x9a>
 8001ace:	4621      	mov	r1, r4
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f000 f981 	bl	8001dd8 <__swsetup_r>
 8001ad6:	b380      	cbz	r0, 8001b3a <_puts_r+0x9a>
 8001ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8001adc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ade:	07da      	lsls	r2, r3, #31
 8001ae0:	d405      	bmi.n	8001aee <_puts_r+0x4e>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	d402      	bmi.n	8001aee <_puts_r+0x4e>
 8001ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001aea:	f000 fa2d 	bl	8001f48 <__retarget_lock_release_recursive>
 8001aee:	4628      	mov	r0, r5
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da04      	bge.n	8001b00 <_puts_r+0x60>
 8001af6:	69a2      	ldr	r2, [r4, #24]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dc17      	bgt.n	8001b2c <_puts_r+0x8c>
 8001afc:	290a      	cmp	r1, #10
 8001afe:	d015      	beq.n	8001b2c <_puts_r+0x8c>
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	6022      	str	r2, [r4, #0]
 8001b06:	7019      	strb	r1, [r3, #0]
 8001b08:	68a3      	ldr	r3, [r4, #8]
 8001b0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60a3      	str	r3, [r4, #8]
 8001b12:	2900      	cmp	r1, #0
 8001b14:	d1ed      	bne.n	8001af2 <_puts_r+0x52>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da11      	bge.n	8001b3e <_puts_r+0x9e>
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	210a      	movs	r1, #10
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f000 f91b 	bl	8001d5a <__swbuf_r>
 8001b24:	3001      	adds	r0, #1
 8001b26:	d0d7      	beq.n	8001ad8 <_puts_r+0x38>
 8001b28:	250a      	movs	r5, #10
 8001b2a:	e7d7      	b.n	8001adc <_puts_r+0x3c>
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f000 f913 	bl	8001d5a <__swbuf_r>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d1e7      	bne.n	8001b08 <_puts_r+0x68>
 8001b38:	e7ce      	b.n	8001ad8 <_puts_r+0x38>
 8001b3a:	3e01      	subs	r6, #1
 8001b3c:	e7e4      	b.n	8001b08 <_puts_r+0x68>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	6022      	str	r2, [r4, #0]
 8001b44:	220a      	movs	r2, #10
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e7ee      	b.n	8001b28 <_puts_r+0x88>
	...

08001b4c <puts>:
 8001b4c:	4b02      	ldr	r3, [pc, #8]	@ (8001b58 <puts+0xc>)
 8001b4e:	4601      	mov	r1, r0
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f7ff bfa5 	b.w	8001aa0 <_puts_r>
 8001b56:	bf00      	nop
 8001b58:	2000000c 	.word	0x2000000c

08001b5c <setbuf>:
 8001b5c:	fab1 f281 	clz	r2, r1
 8001b60:	0952      	lsrs	r2, r2, #5
 8001b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b66:	0052      	lsls	r2, r2, #1
 8001b68:	f000 b800 	b.w	8001b6c <setvbuf>

08001b6c <setvbuf>:
 8001b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001b70:	461d      	mov	r5, r3
 8001b72:	4b57      	ldr	r3, [pc, #348]	@ (8001cd0 <setvbuf+0x164>)
 8001b74:	681f      	ldr	r7, [r3, #0]
 8001b76:	4604      	mov	r4, r0
 8001b78:	460e      	mov	r6, r1
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	b127      	cbz	r7, 8001b88 <setvbuf+0x1c>
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	b913      	cbnz	r3, 8001b88 <setvbuf+0x1c>
 8001b82:	4638      	mov	r0, r7
 8001b84:	f7ff ff44 	bl	8001a10 <__sinit>
 8001b88:	f1b8 0f02 	cmp.w	r8, #2
 8001b8c:	d006      	beq.n	8001b9c <setvbuf+0x30>
 8001b8e:	f1b8 0f01 	cmp.w	r8, #1
 8001b92:	f200 809a 	bhi.w	8001cca <setvbuf+0x15e>
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	f2c0 8097 	blt.w	8001cca <setvbuf+0x15e>
 8001b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b9e:	07d9      	lsls	r1, r3, #31
 8001ba0:	d405      	bmi.n	8001bae <setvbuf+0x42>
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	059a      	lsls	r2, r3, #22
 8001ba6:	d402      	bmi.n	8001bae <setvbuf+0x42>
 8001ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001baa:	f000 f9cc 	bl	8001f46 <__retarget_lock_acquire_recursive>
 8001bae:	4621      	mov	r1, r4
 8001bb0:	4638      	mov	r0, r7
 8001bb2:	f000 fe1d 	bl	80027f0 <_fflush_r>
 8001bb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bb8:	b141      	cbz	r1, 8001bcc <setvbuf+0x60>
 8001bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bbe:	4299      	cmp	r1, r3
 8001bc0:	d002      	beq.n	8001bc8 <setvbuf+0x5c>
 8001bc2:	4638      	mov	r0, r7
 8001bc4:	f000 f9c2 	bl	8001f4c <_free_r>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61a3      	str	r3, [r4, #24]
 8001bd0:	6063      	str	r3, [r4, #4]
 8001bd2:	89a3      	ldrh	r3, [r4, #12]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	d503      	bpl.n	8001be0 <setvbuf+0x74>
 8001bd8:	6921      	ldr	r1, [r4, #16]
 8001bda:	4638      	mov	r0, r7
 8001bdc:	f000 f9b6 	bl	8001f4c <_free_r>
 8001be0:	89a3      	ldrh	r3, [r4, #12]
 8001be2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	f1b8 0f02 	cmp.w	r8, #2
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	d061      	beq.n	8001cb6 <setvbuf+0x14a>
 8001bf2:	ab01      	add	r3, sp, #4
 8001bf4:	466a      	mov	r2, sp
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4638      	mov	r0, r7
 8001bfa:	f000 fe21 	bl	8002840 <__swhatbuf_r>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	4318      	orrs	r0, r3
 8001c02:	81a0      	strh	r0, [r4, #12]
 8001c04:	bb2d      	cbnz	r5, 8001c52 <setvbuf+0xe6>
 8001c06:	9d00      	ldr	r5, [sp, #0]
 8001c08:	4628      	mov	r0, r5
 8001c0a:	f000 f9e9 	bl	8001fe0 <malloc>
 8001c0e:	4606      	mov	r6, r0
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d152      	bne.n	8001cba <setvbuf+0x14e>
 8001c14:	f8dd 9000 	ldr.w	r9, [sp]
 8001c18:	45a9      	cmp	r9, r5
 8001c1a:	d140      	bne.n	8001c9e <setvbuf+0x132>
 8001c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8001c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c24:	f043 0202 	orr.w	r2, r3, #2
 8001c28:	81a2      	strh	r2, [r4, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60a2      	str	r2, [r4, #8]
 8001c2e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8001c32:	6022      	str	r2, [r4, #0]
 8001c34:	6122      	str	r2, [r4, #16]
 8001c36:	2201      	movs	r2, #1
 8001c38:	6162      	str	r2, [r4, #20]
 8001c3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c3c:	07d6      	lsls	r6, r2, #31
 8001c3e:	d404      	bmi.n	8001c4a <setvbuf+0xde>
 8001c40:	0598      	lsls	r0, r3, #22
 8001c42:	d402      	bmi.n	8001c4a <setvbuf+0xde>
 8001c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c46:	f000 f97f 	bl	8001f48 <__retarget_lock_release_recursive>
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	b003      	add	sp, #12
 8001c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c52:	2e00      	cmp	r6, #0
 8001c54:	d0d8      	beq.n	8001c08 <setvbuf+0x9c>
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	b913      	cbnz	r3, 8001c60 <setvbuf+0xf4>
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	f7ff fed8 	bl	8001a10 <__sinit>
 8001c60:	f1b8 0f01 	cmp.w	r8, #1
 8001c64:	bf08      	it	eq
 8001c66:	89a3      	ldrheq	r3, [r4, #12]
 8001c68:	6026      	str	r6, [r4, #0]
 8001c6a:	bf04      	itt	eq
 8001c6c:	f043 0301 	orreq.w	r3, r3, #1
 8001c70:	81a3      	strheq	r3, [r4, #12]
 8001c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c76:	f013 0208 	ands.w	r2, r3, #8
 8001c7a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001c7e:	d01e      	beq.n	8001cbe <setvbuf+0x152>
 8001c80:	07d9      	lsls	r1, r3, #31
 8001c82:	bf41      	itttt	mi
 8001c84:	2200      	movmi	r2, #0
 8001c86:	426d      	negmi	r5, r5
 8001c88:	60a2      	strmi	r2, [r4, #8]
 8001c8a:	61a5      	strmi	r5, [r4, #24]
 8001c8c:	bf58      	it	pl
 8001c8e:	60a5      	strpl	r5, [r4, #8]
 8001c90:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c92:	07d2      	lsls	r2, r2, #31
 8001c94:	d401      	bmi.n	8001c9a <setvbuf+0x12e>
 8001c96:	059b      	lsls	r3, r3, #22
 8001c98:	d513      	bpl.n	8001cc2 <setvbuf+0x156>
 8001c9a:	2500      	movs	r5, #0
 8001c9c:	e7d5      	b.n	8001c4a <setvbuf+0xde>
 8001c9e:	4648      	mov	r0, r9
 8001ca0:	f000 f99e 	bl	8001fe0 <malloc>
 8001ca4:	4606      	mov	r6, r0
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d0b8      	beq.n	8001c1c <setvbuf+0xb0>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb0:	81a3      	strh	r3, [r4, #12]
 8001cb2:	464d      	mov	r5, r9
 8001cb4:	e7cf      	b.n	8001c56 <setvbuf+0xea>
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	e7b2      	b.n	8001c20 <setvbuf+0xb4>
 8001cba:	46a9      	mov	r9, r5
 8001cbc:	e7f5      	b.n	8001caa <setvbuf+0x13e>
 8001cbe:	60a2      	str	r2, [r4, #8]
 8001cc0:	e7e6      	b.n	8001c90 <setvbuf+0x124>
 8001cc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cc4:	f000 f940 	bl	8001f48 <__retarget_lock_release_recursive>
 8001cc8:	e7e7      	b.n	8001c9a <setvbuf+0x12e>
 8001cca:	f04f 35ff 	mov.w	r5, #4294967295
 8001cce:	e7bc      	b.n	8001c4a <setvbuf+0xde>
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <__sread>:
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cdc:	f000 f8fc 	bl	8001ed8 <_read_r>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	bfab      	itete	ge
 8001ce4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ce8:	181b      	addge	r3, r3, r0
 8001cea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001cee:	bfac      	ite	ge
 8001cf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001cf2:	81a3      	strhlt	r3, [r4, #12]
 8001cf4:	bd10      	pop	{r4, pc}

08001cf6 <__swrite>:
 8001cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfa:	461f      	mov	r7, r3
 8001cfc:	898b      	ldrh	r3, [r1, #12]
 8001cfe:	05db      	lsls	r3, r3, #23
 8001d00:	4605      	mov	r5, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	4616      	mov	r6, r2
 8001d06:	d505      	bpl.n	8001d14 <__swrite+0x1e>
 8001d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f000 f8d0 	bl	8001eb4 <_lseek_r>
 8001d14:	89a3      	ldrh	r3, [r4, #12]
 8001d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d1e:	81a3      	strh	r3, [r4, #12]
 8001d20:	4632      	mov	r2, r6
 8001d22:	463b      	mov	r3, r7
 8001d24:	4628      	mov	r0, r5
 8001d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d2a:	f7ff b8dd 	b.w	8000ee8 <_write_r>

08001d2e <__sseek>:
 8001d2e:	b510      	push	{r4, lr}
 8001d30:	460c      	mov	r4, r1
 8001d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d36:	f000 f8bd 	bl	8001eb4 <_lseek_r>
 8001d3a:	1c43      	adds	r3, r0, #1
 8001d3c:	89a3      	ldrh	r3, [r4, #12]
 8001d3e:	bf15      	itete	ne
 8001d40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d4a:	81a3      	strheq	r3, [r4, #12]
 8001d4c:	bf18      	it	ne
 8001d4e:	81a3      	strhne	r3, [r4, #12]
 8001d50:	bd10      	pop	{r4, pc}

08001d52 <__sclose>:
 8001d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d56:	f000 b89d 	b.w	8001e94 <_close_r>

08001d5a <__swbuf_r>:
 8001d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5c:	460e      	mov	r6, r1
 8001d5e:	4614      	mov	r4, r2
 8001d60:	4605      	mov	r5, r0
 8001d62:	b118      	cbz	r0, 8001d6c <__swbuf_r+0x12>
 8001d64:	6a03      	ldr	r3, [r0, #32]
 8001d66:	b90b      	cbnz	r3, 8001d6c <__swbuf_r+0x12>
 8001d68:	f7ff fe52 	bl	8001a10 <__sinit>
 8001d6c:	69a3      	ldr	r3, [r4, #24]
 8001d6e:	60a3      	str	r3, [r4, #8]
 8001d70:	89a3      	ldrh	r3, [r4, #12]
 8001d72:	071a      	lsls	r2, r3, #28
 8001d74:	d501      	bpl.n	8001d7a <__swbuf_r+0x20>
 8001d76:	6923      	ldr	r3, [r4, #16]
 8001d78:	b943      	cbnz	r3, 8001d8c <__swbuf_r+0x32>
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f000 f82b 	bl	8001dd8 <__swsetup_r>
 8001d82:	b118      	cbz	r0, 8001d8c <__swbuf_r+0x32>
 8001d84:	f04f 37ff 	mov.w	r7, #4294967295
 8001d88:	4638      	mov	r0, r7
 8001d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	6922      	ldr	r2, [r4, #16]
 8001d90:	1a98      	subs	r0, r3, r2
 8001d92:	6963      	ldr	r3, [r4, #20]
 8001d94:	b2f6      	uxtb	r6, r6
 8001d96:	4283      	cmp	r3, r0
 8001d98:	4637      	mov	r7, r6
 8001d9a:	dc05      	bgt.n	8001da8 <__swbuf_r+0x4e>
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f000 fd26 	bl	80027f0 <_fflush_r>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d1ed      	bne.n	8001d84 <__swbuf_r+0x2a>
 8001da8:	68a3      	ldr	r3, [r4, #8]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	60a3      	str	r3, [r4, #8]
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	6022      	str	r2, [r4, #0]
 8001db4:	701e      	strb	r6, [r3, #0]
 8001db6:	6962      	ldr	r2, [r4, #20]
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d004      	beq.n	8001dc8 <__swbuf_r+0x6e>
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	07db      	lsls	r3, r3, #31
 8001dc2:	d5e1      	bpl.n	8001d88 <__swbuf_r+0x2e>
 8001dc4:	2e0a      	cmp	r6, #10
 8001dc6:	d1df      	bne.n	8001d88 <__swbuf_r+0x2e>
 8001dc8:	4621      	mov	r1, r4
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f000 fd10 	bl	80027f0 <_fflush_r>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d0d9      	beq.n	8001d88 <__swbuf_r+0x2e>
 8001dd4:	e7d6      	b.n	8001d84 <__swbuf_r+0x2a>
	...

08001dd8 <__swsetup_r>:
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <__swsetup_r+0xa8>)
 8001ddc:	4605      	mov	r5, r0
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	460c      	mov	r4, r1
 8001de2:	b118      	cbz	r0, 8001dec <__swsetup_r+0x14>
 8001de4:	6a03      	ldr	r3, [r0, #32]
 8001de6:	b90b      	cbnz	r3, 8001dec <__swsetup_r+0x14>
 8001de8:	f7ff fe12 	bl	8001a10 <__sinit>
 8001dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df0:	0719      	lsls	r1, r3, #28
 8001df2:	d422      	bmi.n	8001e3a <__swsetup_r+0x62>
 8001df4:	06da      	lsls	r2, r3, #27
 8001df6:	d407      	bmi.n	8001e08 <__swsetup_r+0x30>
 8001df8:	2209      	movs	r2, #9
 8001dfa:	602a      	str	r2, [r5, #0]
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	f04f 30ff 	mov.w	r0, #4294967295
 8001e06:	e033      	b.n	8001e70 <__swsetup_r+0x98>
 8001e08:	0758      	lsls	r0, r3, #29
 8001e0a:	d512      	bpl.n	8001e32 <__swsetup_r+0x5a>
 8001e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e0e:	b141      	cbz	r1, 8001e22 <__swsetup_r+0x4a>
 8001e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e14:	4299      	cmp	r1, r3
 8001e16:	d002      	beq.n	8001e1e <__swsetup_r+0x46>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 f897 	bl	8001f4c <_free_r>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e22:	89a3      	ldrh	r3, [r4, #12]
 8001e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001e28:	81a3      	strh	r3, [r4, #12]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6063      	str	r3, [r4, #4]
 8001e2e:	6923      	ldr	r3, [r4, #16]
 8001e30:	6023      	str	r3, [r4, #0]
 8001e32:	89a3      	ldrh	r3, [r4, #12]
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	6923      	ldr	r3, [r4, #16]
 8001e3c:	b94b      	cbnz	r3, 8001e52 <__swsetup_r+0x7a>
 8001e3e:	89a3      	ldrh	r3, [r4, #12]
 8001e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e48:	d003      	beq.n	8001e52 <__swsetup_r+0x7a>
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	f000 fd1d 	bl	800288c <__smakebuf_r>
 8001e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e56:	f013 0201 	ands.w	r2, r3, #1
 8001e5a:	d00a      	beq.n	8001e72 <__swsetup_r+0x9a>
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60a2      	str	r2, [r4, #8]
 8001e60:	6962      	ldr	r2, [r4, #20]
 8001e62:	4252      	negs	r2, r2
 8001e64:	61a2      	str	r2, [r4, #24]
 8001e66:	6922      	ldr	r2, [r4, #16]
 8001e68:	b942      	cbnz	r2, 8001e7c <__swsetup_r+0xa4>
 8001e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e6e:	d1c5      	bne.n	8001dfc <__swsetup_r+0x24>
 8001e70:	bd38      	pop	{r3, r4, r5, pc}
 8001e72:	0799      	lsls	r1, r3, #30
 8001e74:	bf58      	it	pl
 8001e76:	6962      	ldrpl	r2, [r4, #20]
 8001e78:	60a2      	str	r2, [r4, #8]
 8001e7a:	e7f4      	b.n	8001e66 <__swsetup_r+0x8e>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	e7f7      	b.n	8001e70 <__swsetup_r+0x98>
 8001e80:	2000000c 	.word	0x2000000c

08001e84 <memset>:
 8001e84:	4402      	add	r2, r0
 8001e86:	4603      	mov	r3, r0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <memset+0xa>
 8001e8c:	4770      	bx	lr
 8001e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e92:	e7f9      	b.n	8001e88 <memset+0x4>

08001e94 <_close_r>:
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	4d06      	ldr	r5, [pc, #24]	@ (8001eb0 <_close_r+0x1c>)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	602b      	str	r3, [r5, #0]
 8001ea0:	f7ff fc37 	bl	8001712 <_close>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d102      	bne.n	8001eae <_close_r+0x1a>
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	b103      	cbz	r3, 8001eae <_close_r+0x1a>
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	200002b8 	.word	0x200002b8

08001eb4 <_lseek_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4d07      	ldr	r5, [pc, #28]	@ (8001ed4 <_lseek_r+0x20>)
 8001eb8:	4604      	mov	r4, r0
 8001eba:	4608      	mov	r0, r1
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	602a      	str	r2, [r5, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f7ff fc4c 	bl	8001760 <_lseek>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d102      	bne.n	8001ed2 <_lseek_r+0x1e>
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	b103      	cbz	r3, 8001ed2 <_lseek_r+0x1e>
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	200002b8 	.word	0x200002b8

08001ed8 <_read_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4d07      	ldr	r5, [pc, #28]	@ (8001ef8 <_read_r+0x20>)
 8001edc:	4604      	mov	r4, r0
 8001ede:	4608      	mov	r0, r1
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	602a      	str	r2, [r5, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f7ff fbf6 	bl	80016d8 <_read>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_read_r+0x1e>
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_read_r+0x1e>
 8001ef4:	6023      	str	r3, [r4, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	200002b8 	.word	0x200002b8

08001efc <__libc_init_array>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4d0d      	ldr	r5, [pc, #52]	@ (8001f34 <__libc_init_array+0x38>)
 8001f00:	4c0d      	ldr	r4, [pc, #52]	@ (8001f38 <__libc_init_array+0x3c>)
 8001f02:	1b64      	subs	r4, r4, r5
 8001f04:	10a4      	asrs	r4, r4, #2
 8001f06:	2600      	movs	r6, #0
 8001f08:	42a6      	cmp	r6, r4
 8001f0a:	d109      	bne.n	8001f20 <__libc_init_array+0x24>
 8001f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8001f3c <__libc_init_array+0x40>)
 8001f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8001f40 <__libc_init_array+0x44>)
 8001f10:	f000 fd38 	bl	8002984 <_init>
 8001f14:	1b64      	subs	r4, r4, r5
 8001f16:	10a4      	asrs	r4, r4, #2
 8001f18:	2600      	movs	r6, #0
 8001f1a:	42a6      	cmp	r6, r4
 8001f1c:	d105      	bne.n	8001f2a <__libc_init_array+0x2e>
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f24:	4798      	blx	r3
 8001f26:	3601      	adds	r6, #1
 8001f28:	e7ee      	b.n	8001f08 <__libc_init_array+0xc>
 8001f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2e:	4798      	blx	r3
 8001f30:	3601      	adds	r6, #1
 8001f32:	e7f2      	b.n	8001f1a <__libc_init_array+0x1e>
 8001f34:	08002a8c 	.word	0x08002a8c
 8001f38:	08002a8c 	.word	0x08002a8c
 8001f3c:	08002a8c 	.word	0x08002a8c
 8001f40:	08002a90 	.word	0x08002a90

08001f44 <__retarget_lock_init_recursive>:
 8001f44:	4770      	bx	lr

08001f46 <__retarget_lock_acquire_recursive>:
 8001f46:	4770      	bx	lr

08001f48 <__retarget_lock_release_recursive>:
 8001f48:	4770      	bx	lr
	...

08001f4c <_free_r>:
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	4605      	mov	r5, r0
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d041      	beq.n	8001fd8 <_free_r+0x8c>
 8001f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f58:	1f0c      	subs	r4, r1, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bfb8      	it	lt
 8001f5e:	18e4      	addlt	r4, r4, r3
 8001f60:	f000 f8e8 	bl	8002134 <__malloc_lock>
 8001f64:	4a1d      	ldr	r2, [pc, #116]	@ (8001fdc <_free_r+0x90>)
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	b933      	cbnz	r3, 8001f78 <_free_r+0x2c>
 8001f6a:	6063      	str	r3, [r4, #4]
 8001f6c:	6014      	str	r4, [r2, #0]
 8001f6e:	4628      	mov	r0, r5
 8001f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f74:	f000 b8e4 	b.w	8002140 <__malloc_unlock>
 8001f78:	42a3      	cmp	r3, r4
 8001f7a:	d908      	bls.n	8001f8e <_free_r+0x42>
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	1821      	adds	r1, r4, r0
 8001f80:	428b      	cmp	r3, r1
 8001f82:	bf01      	itttt	eq
 8001f84:	6819      	ldreq	r1, [r3, #0]
 8001f86:	685b      	ldreq	r3, [r3, #4]
 8001f88:	1809      	addeq	r1, r1, r0
 8001f8a:	6021      	streq	r1, [r4, #0]
 8001f8c:	e7ed      	b.n	8001f6a <_free_r+0x1e>
 8001f8e:	461a      	mov	r2, r3
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	b10b      	cbz	r3, 8001f98 <_free_r+0x4c>
 8001f94:	42a3      	cmp	r3, r4
 8001f96:	d9fa      	bls.n	8001f8e <_free_r+0x42>
 8001f98:	6811      	ldr	r1, [r2, #0]
 8001f9a:	1850      	adds	r0, r2, r1
 8001f9c:	42a0      	cmp	r0, r4
 8001f9e:	d10b      	bne.n	8001fb8 <_free_r+0x6c>
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	4401      	add	r1, r0
 8001fa4:	1850      	adds	r0, r2, r1
 8001fa6:	4283      	cmp	r3, r0
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	d1e0      	bne.n	8001f6e <_free_r+0x22>
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	6053      	str	r3, [r2, #4]
 8001fb2:	4408      	add	r0, r1
 8001fb4:	6010      	str	r0, [r2, #0]
 8001fb6:	e7da      	b.n	8001f6e <_free_r+0x22>
 8001fb8:	d902      	bls.n	8001fc0 <_free_r+0x74>
 8001fba:	230c      	movs	r3, #12
 8001fbc:	602b      	str	r3, [r5, #0]
 8001fbe:	e7d6      	b.n	8001f6e <_free_r+0x22>
 8001fc0:	6820      	ldr	r0, [r4, #0]
 8001fc2:	1821      	adds	r1, r4, r0
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	bf04      	itt	eq
 8001fc8:	6819      	ldreq	r1, [r3, #0]
 8001fca:	685b      	ldreq	r3, [r3, #4]
 8001fcc:	6063      	str	r3, [r4, #4]
 8001fce:	bf04      	itt	eq
 8001fd0:	1809      	addeq	r1, r1, r0
 8001fd2:	6021      	streq	r1, [r4, #0]
 8001fd4:	6054      	str	r4, [r2, #4]
 8001fd6:	e7ca      	b.n	8001f6e <_free_r+0x22>
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}
 8001fda:	bf00      	nop
 8001fdc:	200002c4 	.word	0x200002c4

08001fe0 <malloc>:
 8001fe0:	4b02      	ldr	r3, [pc, #8]	@ (8001fec <malloc+0xc>)
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	f000 b825 	b.w	8002034 <_malloc_r>
 8001fea:	bf00      	nop
 8001fec:	2000000c 	.word	0x2000000c

08001ff0 <sbrk_aligned>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8002030 <sbrk_aligned+0x40>)
 8001ff4:	460c      	mov	r4, r1
 8001ff6:	6831      	ldr	r1, [r6, #0]
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	b911      	cbnz	r1, 8002002 <sbrk_aligned+0x12>
 8001ffc:	f000 fca4 	bl	8002948 <_sbrk_r>
 8002000:	6030      	str	r0, [r6, #0]
 8002002:	4621      	mov	r1, r4
 8002004:	4628      	mov	r0, r5
 8002006:	f000 fc9f 	bl	8002948 <_sbrk_r>
 800200a:	1c43      	adds	r3, r0, #1
 800200c:	d103      	bne.n	8002016 <sbrk_aligned+0x26>
 800200e:	f04f 34ff 	mov.w	r4, #4294967295
 8002012:	4620      	mov	r0, r4
 8002014:	bd70      	pop	{r4, r5, r6, pc}
 8002016:	1cc4      	adds	r4, r0, #3
 8002018:	f024 0403 	bic.w	r4, r4, #3
 800201c:	42a0      	cmp	r0, r4
 800201e:	d0f8      	beq.n	8002012 <sbrk_aligned+0x22>
 8002020:	1a21      	subs	r1, r4, r0
 8002022:	4628      	mov	r0, r5
 8002024:	f000 fc90 	bl	8002948 <_sbrk_r>
 8002028:	3001      	adds	r0, #1
 800202a:	d1f2      	bne.n	8002012 <sbrk_aligned+0x22>
 800202c:	e7ef      	b.n	800200e <sbrk_aligned+0x1e>
 800202e:	bf00      	nop
 8002030:	200002c0 	.word	0x200002c0

08002034 <_malloc_r>:
 8002034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002038:	1ccd      	adds	r5, r1, #3
 800203a:	f025 0503 	bic.w	r5, r5, #3
 800203e:	3508      	adds	r5, #8
 8002040:	2d0c      	cmp	r5, #12
 8002042:	bf38      	it	cc
 8002044:	250c      	movcc	r5, #12
 8002046:	2d00      	cmp	r5, #0
 8002048:	4606      	mov	r6, r0
 800204a:	db01      	blt.n	8002050 <_malloc_r+0x1c>
 800204c:	42a9      	cmp	r1, r5
 800204e:	d904      	bls.n	800205a <_malloc_r+0x26>
 8002050:	230c      	movs	r3, #12
 8002052:	6033      	str	r3, [r6, #0]
 8002054:	2000      	movs	r0, #0
 8002056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800205a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002130 <_malloc_r+0xfc>
 800205e:	f000 f869 	bl	8002134 <__malloc_lock>
 8002062:	f8d8 3000 	ldr.w	r3, [r8]
 8002066:	461c      	mov	r4, r3
 8002068:	bb44      	cbnz	r4, 80020bc <_malloc_r+0x88>
 800206a:	4629      	mov	r1, r5
 800206c:	4630      	mov	r0, r6
 800206e:	f7ff ffbf 	bl	8001ff0 <sbrk_aligned>
 8002072:	1c43      	adds	r3, r0, #1
 8002074:	4604      	mov	r4, r0
 8002076:	d158      	bne.n	800212a <_malloc_r+0xf6>
 8002078:	f8d8 4000 	ldr.w	r4, [r8]
 800207c:	4627      	mov	r7, r4
 800207e:	2f00      	cmp	r7, #0
 8002080:	d143      	bne.n	800210a <_malloc_r+0xd6>
 8002082:	2c00      	cmp	r4, #0
 8002084:	d04b      	beq.n	800211e <_malloc_r+0xea>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	4639      	mov	r1, r7
 800208a:	4630      	mov	r0, r6
 800208c:	eb04 0903 	add.w	r9, r4, r3
 8002090:	f000 fc5a 	bl	8002948 <_sbrk_r>
 8002094:	4581      	cmp	r9, r0
 8002096:	d142      	bne.n	800211e <_malloc_r+0xea>
 8002098:	6821      	ldr	r1, [r4, #0]
 800209a:	1a6d      	subs	r5, r5, r1
 800209c:	4629      	mov	r1, r5
 800209e:	4630      	mov	r0, r6
 80020a0:	f7ff ffa6 	bl	8001ff0 <sbrk_aligned>
 80020a4:	3001      	adds	r0, #1
 80020a6:	d03a      	beq.n	800211e <_malloc_r+0xea>
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	442b      	add	r3, r5
 80020ac:	6023      	str	r3, [r4, #0]
 80020ae:	f8d8 3000 	ldr.w	r3, [r8]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	bb62      	cbnz	r2, 8002110 <_malloc_r+0xdc>
 80020b6:	f8c8 7000 	str.w	r7, [r8]
 80020ba:	e00f      	b.n	80020dc <_malloc_r+0xa8>
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	1b52      	subs	r2, r2, r5
 80020c0:	d420      	bmi.n	8002104 <_malloc_r+0xd0>
 80020c2:	2a0b      	cmp	r2, #11
 80020c4:	d917      	bls.n	80020f6 <_malloc_r+0xc2>
 80020c6:	1961      	adds	r1, r4, r5
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	6025      	str	r5, [r4, #0]
 80020cc:	bf18      	it	ne
 80020ce:	6059      	strne	r1, [r3, #4]
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	bf08      	it	eq
 80020d4:	f8c8 1000 	streq.w	r1, [r8]
 80020d8:	5162      	str	r2, [r4, r5]
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	4630      	mov	r0, r6
 80020de:	f000 f82f 	bl	8002140 <__malloc_unlock>
 80020e2:	f104 000b 	add.w	r0, r4, #11
 80020e6:	1d23      	adds	r3, r4, #4
 80020e8:	f020 0007 	bic.w	r0, r0, #7
 80020ec:	1ac2      	subs	r2, r0, r3
 80020ee:	bf1c      	itt	ne
 80020f0:	1a1b      	subne	r3, r3, r0
 80020f2:	50a3      	strne	r3, [r4, r2]
 80020f4:	e7af      	b.n	8002056 <_malloc_r+0x22>
 80020f6:	6862      	ldr	r2, [r4, #4]
 80020f8:	42a3      	cmp	r3, r4
 80020fa:	bf0c      	ite	eq
 80020fc:	f8c8 2000 	streq.w	r2, [r8]
 8002100:	605a      	strne	r2, [r3, #4]
 8002102:	e7eb      	b.n	80020dc <_malloc_r+0xa8>
 8002104:	4623      	mov	r3, r4
 8002106:	6864      	ldr	r4, [r4, #4]
 8002108:	e7ae      	b.n	8002068 <_malloc_r+0x34>
 800210a:	463c      	mov	r4, r7
 800210c:	687f      	ldr	r7, [r7, #4]
 800210e:	e7b6      	b.n	800207e <_malloc_r+0x4a>
 8002110:	461a      	mov	r2, r3
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	42a3      	cmp	r3, r4
 8002116:	d1fb      	bne.n	8002110 <_malloc_r+0xdc>
 8002118:	2300      	movs	r3, #0
 800211a:	6053      	str	r3, [r2, #4]
 800211c:	e7de      	b.n	80020dc <_malloc_r+0xa8>
 800211e:	230c      	movs	r3, #12
 8002120:	6033      	str	r3, [r6, #0]
 8002122:	4630      	mov	r0, r6
 8002124:	f000 f80c 	bl	8002140 <__malloc_unlock>
 8002128:	e794      	b.n	8002054 <_malloc_r+0x20>
 800212a:	6005      	str	r5, [r0, #0]
 800212c:	e7d6      	b.n	80020dc <_malloc_r+0xa8>
 800212e:	bf00      	nop
 8002130:	200002c4 	.word	0x200002c4

08002134 <__malloc_lock>:
 8002134:	4801      	ldr	r0, [pc, #4]	@ (800213c <__malloc_lock+0x8>)
 8002136:	f7ff bf06 	b.w	8001f46 <__retarget_lock_acquire_recursive>
 800213a:	bf00      	nop
 800213c:	200002bc 	.word	0x200002bc

08002140 <__malloc_unlock>:
 8002140:	4801      	ldr	r0, [pc, #4]	@ (8002148 <__malloc_unlock+0x8>)
 8002142:	f7ff bf01 	b.w	8001f48 <__retarget_lock_release_recursive>
 8002146:	bf00      	nop
 8002148:	200002bc 	.word	0x200002bc

0800214c <__sfputc_r>:
 800214c:	6893      	ldr	r3, [r2, #8]
 800214e:	3b01      	subs	r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	b410      	push	{r4}
 8002154:	6093      	str	r3, [r2, #8]
 8002156:	da08      	bge.n	800216a <__sfputc_r+0x1e>
 8002158:	6994      	ldr	r4, [r2, #24]
 800215a:	42a3      	cmp	r3, r4
 800215c:	db01      	blt.n	8002162 <__sfputc_r+0x16>
 800215e:	290a      	cmp	r1, #10
 8002160:	d103      	bne.n	800216a <__sfputc_r+0x1e>
 8002162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002166:	f7ff bdf8 	b.w	8001d5a <__swbuf_r>
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	1c58      	adds	r0, r3, #1
 800216e:	6010      	str	r0, [r2, #0]
 8002170:	7019      	strb	r1, [r3, #0]
 8002172:	4608      	mov	r0, r1
 8002174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002178:	4770      	bx	lr

0800217a <__sfputs_r>:
 800217a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217c:	4606      	mov	r6, r0
 800217e:	460f      	mov	r7, r1
 8002180:	4614      	mov	r4, r2
 8002182:	18d5      	adds	r5, r2, r3
 8002184:	42ac      	cmp	r4, r5
 8002186:	d101      	bne.n	800218c <__sfputs_r+0x12>
 8002188:	2000      	movs	r0, #0
 800218a:	e007      	b.n	800219c <__sfputs_r+0x22>
 800218c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002190:	463a      	mov	r2, r7
 8002192:	4630      	mov	r0, r6
 8002194:	f7ff ffda 	bl	800214c <__sfputc_r>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d1f3      	bne.n	8002184 <__sfputs_r+0xa>
 800219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021a0 <_vfiprintf_r>:
 80021a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a4:	460d      	mov	r5, r1
 80021a6:	b09d      	sub	sp, #116	@ 0x74
 80021a8:	4614      	mov	r4, r2
 80021aa:	4698      	mov	r8, r3
 80021ac:	4606      	mov	r6, r0
 80021ae:	b118      	cbz	r0, 80021b8 <_vfiprintf_r+0x18>
 80021b0:	6a03      	ldr	r3, [r0, #32]
 80021b2:	b90b      	cbnz	r3, 80021b8 <_vfiprintf_r+0x18>
 80021b4:	f7ff fc2c 	bl	8001a10 <__sinit>
 80021b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021ba:	07d9      	lsls	r1, r3, #31
 80021bc:	d405      	bmi.n	80021ca <_vfiprintf_r+0x2a>
 80021be:	89ab      	ldrh	r3, [r5, #12]
 80021c0:	059a      	lsls	r2, r3, #22
 80021c2:	d402      	bmi.n	80021ca <_vfiprintf_r+0x2a>
 80021c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021c6:	f7ff febe 	bl	8001f46 <__retarget_lock_acquire_recursive>
 80021ca:	89ab      	ldrh	r3, [r5, #12]
 80021cc:	071b      	lsls	r3, r3, #28
 80021ce:	d501      	bpl.n	80021d4 <_vfiprintf_r+0x34>
 80021d0:	692b      	ldr	r3, [r5, #16]
 80021d2:	b99b      	cbnz	r3, 80021fc <_vfiprintf_r+0x5c>
 80021d4:	4629      	mov	r1, r5
 80021d6:	4630      	mov	r0, r6
 80021d8:	f7ff fdfe 	bl	8001dd8 <__swsetup_r>
 80021dc:	b170      	cbz	r0, 80021fc <_vfiprintf_r+0x5c>
 80021de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021e0:	07dc      	lsls	r4, r3, #31
 80021e2:	d504      	bpl.n	80021ee <_vfiprintf_r+0x4e>
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	b01d      	add	sp, #116	@ 0x74
 80021ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ee:	89ab      	ldrh	r3, [r5, #12]
 80021f0:	0598      	lsls	r0, r3, #22
 80021f2:	d4f7      	bmi.n	80021e4 <_vfiprintf_r+0x44>
 80021f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021f6:	f7ff fea7 	bl	8001f48 <__retarget_lock_release_recursive>
 80021fa:	e7f3      	b.n	80021e4 <_vfiprintf_r+0x44>
 80021fc:	2300      	movs	r3, #0
 80021fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002200:	2320      	movs	r3, #32
 8002202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002206:	f8cd 800c 	str.w	r8, [sp, #12]
 800220a:	2330      	movs	r3, #48	@ 0x30
 800220c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80023bc <_vfiprintf_r+0x21c>
 8002210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002214:	f04f 0901 	mov.w	r9, #1
 8002218:	4623      	mov	r3, r4
 800221a:	469a      	mov	sl, r3
 800221c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002220:	b10a      	cbz	r2, 8002226 <_vfiprintf_r+0x86>
 8002222:	2a25      	cmp	r2, #37	@ 0x25
 8002224:	d1f9      	bne.n	800221a <_vfiprintf_r+0x7a>
 8002226:	ebba 0b04 	subs.w	fp, sl, r4
 800222a:	d00b      	beq.n	8002244 <_vfiprintf_r+0xa4>
 800222c:	465b      	mov	r3, fp
 800222e:	4622      	mov	r2, r4
 8002230:	4629      	mov	r1, r5
 8002232:	4630      	mov	r0, r6
 8002234:	f7ff ffa1 	bl	800217a <__sfputs_r>
 8002238:	3001      	adds	r0, #1
 800223a:	f000 80a7 	beq.w	800238c <_vfiprintf_r+0x1ec>
 800223e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002240:	445a      	add	r2, fp
 8002242:	9209      	str	r2, [sp, #36]	@ 0x24
 8002244:	f89a 3000 	ldrb.w	r3, [sl]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 809f 	beq.w	800238c <_vfiprintf_r+0x1ec>
 800224e:	2300      	movs	r3, #0
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002258:	f10a 0a01 	add.w	sl, sl, #1
 800225c:	9304      	str	r3, [sp, #16]
 800225e:	9307      	str	r3, [sp, #28]
 8002260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002264:	931a      	str	r3, [sp, #104]	@ 0x68
 8002266:	4654      	mov	r4, sl
 8002268:	2205      	movs	r2, #5
 800226a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800226e:	4853      	ldr	r0, [pc, #332]	@ (80023bc <_vfiprintf_r+0x21c>)
 8002270:	f7fd ffae 	bl	80001d0 <memchr>
 8002274:	9a04      	ldr	r2, [sp, #16]
 8002276:	b9d8      	cbnz	r0, 80022b0 <_vfiprintf_r+0x110>
 8002278:	06d1      	lsls	r1, r2, #27
 800227a:	bf44      	itt	mi
 800227c:	2320      	movmi	r3, #32
 800227e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002282:	0713      	lsls	r3, r2, #28
 8002284:	bf44      	itt	mi
 8002286:	232b      	movmi	r3, #43	@ 0x2b
 8002288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800228c:	f89a 3000 	ldrb.w	r3, [sl]
 8002290:	2b2a      	cmp	r3, #42	@ 0x2a
 8002292:	d015      	beq.n	80022c0 <_vfiprintf_r+0x120>
 8002294:	9a07      	ldr	r2, [sp, #28]
 8002296:	4654      	mov	r4, sl
 8002298:	2000      	movs	r0, #0
 800229a:	f04f 0c0a 	mov.w	ip, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022a4:	3b30      	subs	r3, #48	@ 0x30
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	d94b      	bls.n	8002342 <_vfiprintf_r+0x1a2>
 80022aa:	b1b0      	cbz	r0, 80022da <_vfiprintf_r+0x13a>
 80022ac:	9207      	str	r2, [sp, #28]
 80022ae:	e014      	b.n	80022da <_vfiprintf_r+0x13a>
 80022b0:	eba0 0308 	sub.w	r3, r0, r8
 80022b4:	fa09 f303 	lsl.w	r3, r9, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	9304      	str	r3, [sp, #16]
 80022bc:	46a2      	mov	sl, r4
 80022be:	e7d2      	b.n	8002266 <_vfiprintf_r+0xc6>
 80022c0:	9b03      	ldr	r3, [sp, #12]
 80022c2:	1d19      	adds	r1, r3, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	9103      	str	r1, [sp, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bfbb      	ittet	lt
 80022cc:	425b      	neglt	r3, r3
 80022ce:	f042 0202 	orrlt.w	r2, r2, #2
 80022d2:	9307      	strge	r3, [sp, #28]
 80022d4:	9307      	strlt	r3, [sp, #28]
 80022d6:	bfb8      	it	lt
 80022d8:	9204      	strlt	r2, [sp, #16]
 80022da:	7823      	ldrb	r3, [r4, #0]
 80022dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80022de:	d10a      	bne.n	80022f6 <_vfiprintf_r+0x156>
 80022e0:	7863      	ldrb	r3, [r4, #1]
 80022e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80022e4:	d132      	bne.n	800234c <_vfiprintf_r+0x1ac>
 80022e6:	9b03      	ldr	r3, [sp, #12]
 80022e8:	1d1a      	adds	r2, r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	9203      	str	r2, [sp, #12]
 80022ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022f2:	3402      	adds	r4, #2
 80022f4:	9305      	str	r3, [sp, #20]
 80022f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80023cc <_vfiprintf_r+0x22c>
 80022fa:	7821      	ldrb	r1, [r4, #0]
 80022fc:	2203      	movs	r2, #3
 80022fe:	4650      	mov	r0, sl
 8002300:	f7fd ff66 	bl	80001d0 <memchr>
 8002304:	b138      	cbz	r0, 8002316 <_vfiprintf_r+0x176>
 8002306:	9b04      	ldr	r3, [sp, #16]
 8002308:	eba0 000a 	sub.w	r0, r0, sl
 800230c:	2240      	movs	r2, #64	@ 0x40
 800230e:	4082      	lsls	r2, r0
 8002310:	4313      	orrs	r3, r2
 8002312:	3401      	adds	r4, #1
 8002314:	9304      	str	r3, [sp, #16]
 8002316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800231a:	4829      	ldr	r0, [pc, #164]	@ (80023c0 <_vfiprintf_r+0x220>)
 800231c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002320:	2206      	movs	r2, #6
 8002322:	f7fd ff55 	bl	80001d0 <memchr>
 8002326:	2800      	cmp	r0, #0
 8002328:	d03f      	beq.n	80023aa <_vfiprintf_r+0x20a>
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <_vfiprintf_r+0x224>)
 800232c:	bb1b      	cbnz	r3, 8002376 <_vfiprintf_r+0x1d6>
 800232e:	9b03      	ldr	r3, [sp, #12]
 8002330:	3307      	adds	r3, #7
 8002332:	f023 0307 	bic.w	r3, r3, #7
 8002336:	3308      	adds	r3, #8
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800233c:	443b      	add	r3, r7
 800233e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002340:	e76a      	b.n	8002218 <_vfiprintf_r+0x78>
 8002342:	fb0c 3202 	mla	r2, ip, r2, r3
 8002346:	460c      	mov	r4, r1
 8002348:	2001      	movs	r0, #1
 800234a:	e7a8      	b.n	800229e <_vfiprintf_r+0xfe>
 800234c:	2300      	movs	r3, #0
 800234e:	3401      	adds	r4, #1
 8002350:	9305      	str	r3, [sp, #20]
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 0c0a 	mov.w	ip, #10
 8002358:	4620      	mov	r0, r4
 800235a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800235e:	3a30      	subs	r2, #48	@ 0x30
 8002360:	2a09      	cmp	r2, #9
 8002362:	d903      	bls.n	800236c <_vfiprintf_r+0x1cc>
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0c6      	beq.n	80022f6 <_vfiprintf_r+0x156>
 8002368:	9105      	str	r1, [sp, #20]
 800236a:	e7c4      	b.n	80022f6 <_vfiprintf_r+0x156>
 800236c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002370:	4604      	mov	r4, r0
 8002372:	2301      	movs	r3, #1
 8002374:	e7f0      	b.n	8002358 <_vfiprintf_r+0x1b8>
 8002376:	ab03      	add	r3, sp, #12
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	462a      	mov	r2, r5
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <_vfiprintf_r+0x228>)
 800237e:	a904      	add	r1, sp, #16
 8002380:	4630      	mov	r0, r6
 8002382:	f3af 8000 	nop.w
 8002386:	4607      	mov	r7, r0
 8002388:	1c78      	adds	r0, r7, #1
 800238a:	d1d6      	bne.n	800233a <_vfiprintf_r+0x19a>
 800238c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800238e:	07d9      	lsls	r1, r3, #31
 8002390:	d405      	bmi.n	800239e <_vfiprintf_r+0x1fe>
 8002392:	89ab      	ldrh	r3, [r5, #12]
 8002394:	059a      	lsls	r2, r3, #22
 8002396:	d402      	bmi.n	800239e <_vfiprintf_r+0x1fe>
 8002398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800239a:	f7ff fdd5 	bl	8001f48 <__retarget_lock_release_recursive>
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	065b      	lsls	r3, r3, #25
 80023a2:	f53f af1f 	bmi.w	80021e4 <_vfiprintf_r+0x44>
 80023a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80023a8:	e71e      	b.n	80021e8 <_vfiprintf_r+0x48>
 80023aa:	ab03      	add	r3, sp, #12
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	462a      	mov	r2, r5
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <_vfiprintf_r+0x228>)
 80023b2:	a904      	add	r1, sp, #16
 80023b4:	4630      	mov	r0, r6
 80023b6:	f000 f879 	bl	80024ac <_printf_i>
 80023ba:	e7e4      	b.n	8002386 <_vfiprintf_r+0x1e6>
 80023bc:	08002a4e 	.word	0x08002a4e
 80023c0:	08002a58 	.word	0x08002a58
 80023c4:	00000000 	.word	0x00000000
 80023c8:	0800217b 	.word	0x0800217b
 80023cc:	08002a54 	.word	0x08002a54

080023d0 <_printf_common>:
 80023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d4:	4616      	mov	r6, r2
 80023d6:	4698      	mov	r8, r3
 80023d8:	688a      	ldr	r2, [r1, #8]
 80023da:	690b      	ldr	r3, [r1, #16]
 80023dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bfb8      	it	lt
 80023e4:	4613      	movlt	r3, r2
 80023e6:	6033      	str	r3, [r6, #0]
 80023e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023ec:	4607      	mov	r7, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	b10a      	cbz	r2, 80023f6 <_printf_common+0x26>
 80023f2:	3301      	adds	r3, #1
 80023f4:	6033      	str	r3, [r6, #0]
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	0699      	lsls	r1, r3, #26
 80023fa:	bf42      	ittt	mi
 80023fc:	6833      	ldrmi	r3, [r6, #0]
 80023fe:	3302      	addmi	r3, #2
 8002400:	6033      	strmi	r3, [r6, #0]
 8002402:	6825      	ldr	r5, [r4, #0]
 8002404:	f015 0506 	ands.w	r5, r5, #6
 8002408:	d106      	bne.n	8002418 <_printf_common+0x48>
 800240a:	f104 0a19 	add.w	sl, r4, #25
 800240e:	68e3      	ldr	r3, [r4, #12]
 8002410:	6832      	ldr	r2, [r6, #0]
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	42ab      	cmp	r3, r5
 8002416:	dc26      	bgt.n	8002466 <_printf_common+0x96>
 8002418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800241c:	6822      	ldr	r2, [r4, #0]
 800241e:	3b00      	subs	r3, #0
 8002420:	bf18      	it	ne
 8002422:	2301      	movne	r3, #1
 8002424:	0692      	lsls	r2, r2, #26
 8002426:	d42b      	bmi.n	8002480 <_printf_common+0xb0>
 8002428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800242c:	4641      	mov	r1, r8
 800242e:	4638      	mov	r0, r7
 8002430:	47c8      	blx	r9
 8002432:	3001      	adds	r0, #1
 8002434:	d01e      	beq.n	8002474 <_printf_common+0xa4>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	6922      	ldr	r2, [r4, #16]
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf02      	ittt	eq
 8002442:	68e5      	ldreq	r5, [r4, #12]
 8002444:	6833      	ldreq	r3, [r6, #0]
 8002446:	1aed      	subeq	r5, r5, r3
 8002448:	68a3      	ldr	r3, [r4, #8]
 800244a:	bf0c      	ite	eq
 800244c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002450:	2500      	movne	r5, #0
 8002452:	4293      	cmp	r3, r2
 8002454:	bfc4      	itt	gt
 8002456:	1a9b      	subgt	r3, r3, r2
 8002458:	18ed      	addgt	r5, r5, r3
 800245a:	2600      	movs	r6, #0
 800245c:	341a      	adds	r4, #26
 800245e:	42b5      	cmp	r5, r6
 8002460:	d11a      	bne.n	8002498 <_printf_common+0xc8>
 8002462:	2000      	movs	r0, #0
 8002464:	e008      	b.n	8002478 <_printf_common+0xa8>
 8002466:	2301      	movs	r3, #1
 8002468:	4652      	mov	r2, sl
 800246a:	4641      	mov	r1, r8
 800246c:	4638      	mov	r0, r7
 800246e:	47c8      	blx	r9
 8002470:	3001      	adds	r0, #1
 8002472:	d103      	bne.n	800247c <_printf_common+0xac>
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247c:	3501      	adds	r5, #1
 800247e:	e7c6      	b.n	800240e <_printf_common+0x3e>
 8002480:	18e1      	adds	r1, r4, r3
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	2030      	movs	r0, #48	@ 0x30
 8002486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800248a:	4422      	add	r2, r4
 800248c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002494:	3302      	adds	r3, #2
 8002496:	e7c7      	b.n	8002428 <_printf_common+0x58>
 8002498:	2301      	movs	r3, #1
 800249a:	4622      	mov	r2, r4
 800249c:	4641      	mov	r1, r8
 800249e:	4638      	mov	r0, r7
 80024a0:	47c8      	blx	r9
 80024a2:	3001      	adds	r0, #1
 80024a4:	d0e6      	beq.n	8002474 <_printf_common+0xa4>
 80024a6:	3601      	adds	r6, #1
 80024a8:	e7d9      	b.n	800245e <_printf_common+0x8e>
	...

080024ac <_printf_i>:
 80024ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024b0:	7e0f      	ldrb	r7, [r1, #24]
 80024b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024b4:	2f78      	cmp	r7, #120	@ 0x78
 80024b6:	4691      	mov	r9, r2
 80024b8:	4680      	mov	r8, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	469a      	mov	sl, r3
 80024be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024c2:	d807      	bhi.n	80024d4 <_printf_i+0x28>
 80024c4:	2f62      	cmp	r7, #98	@ 0x62
 80024c6:	d80a      	bhi.n	80024de <_printf_i+0x32>
 80024c8:	2f00      	cmp	r7, #0
 80024ca:	f000 80d1 	beq.w	8002670 <_printf_i+0x1c4>
 80024ce:	2f58      	cmp	r7, #88	@ 0x58
 80024d0:	f000 80b8 	beq.w	8002644 <_printf_i+0x198>
 80024d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024dc:	e03a      	b.n	8002554 <_printf_i+0xa8>
 80024de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024e2:	2b15      	cmp	r3, #21
 80024e4:	d8f6      	bhi.n	80024d4 <_printf_i+0x28>
 80024e6:	a101      	add	r1, pc, #4	@ (adr r1, 80024ec <_printf_i+0x40>)
 80024e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024ec:	08002545 	.word	0x08002545
 80024f0:	08002559 	.word	0x08002559
 80024f4:	080024d5 	.word	0x080024d5
 80024f8:	080024d5 	.word	0x080024d5
 80024fc:	080024d5 	.word	0x080024d5
 8002500:	080024d5 	.word	0x080024d5
 8002504:	08002559 	.word	0x08002559
 8002508:	080024d5 	.word	0x080024d5
 800250c:	080024d5 	.word	0x080024d5
 8002510:	080024d5 	.word	0x080024d5
 8002514:	080024d5 	.word	0x080024d5
 8002518:	08002657 	.word	0x08002657
 800251c:	08002583 	.word	0x08002583
 8002520:	08002611 	.word	0x08002611
 8002524:	080024d5 	.word	0x080024d5
 8002528:	080024d5 	.word	0x080024d5
 800252c:	08002679 	.word	0x08002679
 8002530:	080024d5 	.word	0x080024d5
 8002534:	08002583 	.word	0x08002583
 8002538:	080024d5 	.word	0x080024d5
 800253c:	080024d5 	.word	0x080024d5
 8002540:	08002619 	.word	0x08002619
 8002544:	6833      	ldr	r3, [r6, #0]
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6032      	str	r2, [r6, #0]
 800254c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002554:	2301      	movs	r3, #1
 8002556:	e09c      	b.n	8002692 <_printf_i+0x1e6>
 8002558:	6833      	ldr	r3, [r6, #0]
 800255a:	6820      	ldr	r0, [r4, #0]
 800255c:	1d19      	adds	r1, r3, #4
 800255e:	6031      	str	r1, [r6, #0]
 8002560:	0606      	lsls	r6, r0, #24
 8002562:	d501      	bpl.n	8002568 <_printf_i+0xbc>
 8002564:	681d      	ldr	r5, [r3, #0]
 8002566:	e003      	b.n	8002570 <_printf_i+0xc4>
 8002568:	0645      	lsls	r5, r0, #25
 800256a:	d5fb      	bpl.n	8002564 <_printf_i+0xb8>
 800256c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002570:	2d00      	cmp	r5, #0
 8002572:	da03      	bge.n	800257c <_printf_i+0xd0>
 8002574:	232d      	movs	r3, #45	@ 0x2d
 8002576:	426d      	negs	r5, r5
 8002578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800257c:	4858      	ldr	r0, [pc, #352]	@ (80026e0 <_printf_i+0x234>)
 800257e:	230a      	movs	r3, #10
 8002580:	e011      	b.n	80025a6 <_printf_i+0xfa>
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	6833      	ldr	r3, [r6, #0]
 8002586:	0608      	lsls	r0, r1, #24
 8002588:	f853 5b04 	ldr.w	r5, [r3], #4
 800258c:	d402      	bmi.n	8002594 <_printf_i+0xe8>
 800258e:	0649      	lsls	r1, r1, #25
 8002590:	bf48      	it	mi
 8002592:	b2ad      	uxthmi	r5, r5
 8002594:	2f6f      	cmp	r7, #111	@ 0x6f
 8002596:	4852      	ldr	r0, [pc, #328]	@ (80026e0 <_printf_i+0x234>)
 8002598:	6033      	str	r3, [r6, #0]
 800259a:	bf14      	ite	ne
 800259c:	230a      	movne	r3, #10
 800259e:	2308      	moveq	r3, #8
 80025a0:	2100      	movs	r1, #0
 80025a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025a6:	6866      	ldr	r6, [r4, #4]
 80025a8:	60a6      	str	r6, [r4, #8]
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	db05      	blt.n	80025ba <_printf_i+0x10e>
 80025ae:	6821      	ldr	r1, [r4, #0]
 80025b0:	432e      	orrs	r6, r5
 80025b2:	f021 0104 	bic.w	r1, r1, #4
 80025b6:	6021      	str	r1, [r4, #0]
 80025b8:	d04b      	beq.n	8002652 <_printf_i+0x1a6>
 80025ba:	4616      	mov	r6, r2
 80025bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80025c0:	fb03 5711 	mls	r7, r3, r1, r5
 80025c4:	5dc7      	ldrb	r7, [r0, r7]
 80025c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025ca:	462f      	mov	r7, r5
 80025cc:	42bb      	cmp	r3, r7
 80025ce:	460d      	mov	r5, r1
 80025d0:	d9f4      	bls.n	80025bc <_printf_i+0x110>
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d10b      	bne.n	80025ee <_printf_i+0x142>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	07df      	lsls	r7, r3, #31
 80025da:	d508      	bpl.n	80025ee <_printf_i+0x142>
 80025dc:	6923      	ldr	r3, [r4, #16]
 80025de:	6861      	ldr	r1, [r4, #4]
 80025e0:	4299      	cmp	r1, r3
 80025e2:	bfde      	ittt	le
 80025e4:	2330      	movle	r3, #48	@ 0x30
 80025e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025ee:	1b92      	subs	r2, r2, r6
 80025f0:	6122      	str	r2, [r4, #16]
 80025f2:	f8cd a000 	str.w	sl, [sp]
 80025f6:	464b      	mov	r3, r9
 80025f8:	aa03      	add	r2, sp, #12
 80025fa:	4621      	mov	r1, r4
 80025fc:	4640      	mov	r0, r8
 80025fe:	f7ff fee7 	bl	80023d0 <_printf_common>
 8002602:	3001      	adds	r0, #1
 8002604:	d14a      	bne.n	800269c <_printf_i+0x1f0>
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
 800260a:	b004      	add	sp, #16
 800260c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	f043 0320 	orr.w	r3, r3, #32
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	4832      	ldr	r0, [pc, #200]	@ (80026e4 <_printf_i+0x238>)
 800261a:	2778      	movs	r7, #120	@ 0x78
 800261c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	6831      	ldr	r1, [r6, #0]
 8002624:	061f      	lsls	r7, r3, #24
 8002626:	f851 5b04 	ldr.w	r5, [r1], #4
 800262a:	d402      	bmi.n	8002632 <_printf_i+0x186>
 800262c:	065f      	lsls	r7, r3, #25
 800262e:	bf48      	it	mi
 8002630:	b2ad      	uxthmi	r5, r5
 8002632:	6031      	str	r1, [r6, #0]
 8002634:	07d9      	lsls	r1, r3, #31
 8002636:	bf44      	itt	mi
 8002638:	f043 0320 	orrmi.w	r3, r3, #32
 800263c:	6023      	strmi	r3, [r4, #0]
 800263e:	b11d      	cbz	r5, 8002648 <_printf_i+0x19c>
 8002640:	2310      	movs	r3, #16
 8002642:	e7ad      	b.n	80025a0 <_printf_i+0xf4>
 8002644:	4826      	ldr	r0, [pc, #152]	@ (80026e0 <_printf_i+0x234>)
 8002646:	e7e9      	b.n	800261c <_printf_i+0x170>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f023 0320 	bic.w	r3, r3, #32
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	e7f6      	b.n	8002640 <_printf_i+0x194>
 8002652:	4616      	mov	r6, r2
 8002654:	e7bd      	b.n	80025d2 <_printf_i+0x126>
 8002656:	6833      	ldr	r3, [r6, #0]
 8002658:	6825      	ldr	r5, [r4, #0]
 800265a:	6961      	ldr	r1, [r4, #20]
 800265c:	1d18      	adds	r0, r3, #4
 800265e:	6030      	str	r0, [r6, #0]
 8002660:	062e      	lsls	r6, r5, #24
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	d501      	bpl.n	800266a <_printf_i+0x1be>
 8002666:	6019      	str	r1, [r3, #0]
 8002668:	e002      	b.n	8002670 <_printf_i+0x1c4>
 800266a:	0668      	lsls	r0, r5, #25
 800266c:	d5fb      	bpl.n	8002666 <_printf_i+0x1ba>
 800266e:	8019      	strh	r1, [r3, #0]
 8002670:	2300      	movs	r3, #0
 8002672:	6123      	str	r3, [r4, #16]
 8002674:	4616      	mov	r6, r2
 8002676:	e7bc      	b.n	80025f2 <_printf_i+0x146>
 8002678:	6833      	ldr	r3, [r6, #0]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	6032      	str	r2, [r6, #0]
 800267e:	681e      	ldr	r6, [r3, #0]
 8002680:	6862      	ldr	r2, [r4, #4]
 8002682:	2100      	movs	r1, #0
 8002684:	4630      	mov	r0, r6
 8002686:	f7fd fda3 	bl	80001d0 <memchr>
 800268a:	b108      	cbz	r0, 8002690 <_printf_i+0x1e4>
 800268c:	1b80      	subs	r0, r0, r6
 800268e:	6060      	str	r0, [r4, #4]
 8002690:	6863      	ldr	r3, [r4, #4]
 8002692:	6123      	str	r3, [r4, #16]
 8002694:	2300      	movs	r3, #0
 8002696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800269a:	e7aa      	b.n	80025f2 <_printf_i+0x146>
 800269c:	6923      	ldr	r3, [r4, #16]
 800269e:	4632      	mov	r2, r6
 80026a0:	4649      	mov	r1, r9
 80026a2:	4640      	mov	r0, r8
 80026a4:	47d0      	blx	sl
 80026a6:	3001      	adds	r0, #1
 80026a8:	d0ad      	beq.n	8002606 <_printf_i+0x15a>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	079b      	lsls	r3, r3, #30
 80026ae:	d413      	bmi.n	80026d8 <_printf_i+0x22c>
 80026b0:	68e0      	ldr	r0, [r4, #12]
 80026b2:	9b03      	ldr	r3, [sp, #12]
 80026b4:	4298      	cmp	r0, r3
 80026b6:	bfb8      	it	lt
 80026b8:	4618      	movlt	r0, r3
 80026ba:	e7a6      	b.n	800260a <_printf_i+0x15e>
 80026bc:	2301      	movs	r3, #1
 80026be:	4632      	mov	r2, r6
 80026c0:	4649      	mov	r1, r9
 80026c2:	4640      	mov	r0, r8
 80026c4:	47d0      	blx	sl
 80026c6:	3001      	adds	r0, #1
 80026c8:	d09d      	beq.n	8002606 <_printf_i+0x15a>
 80026ca:	3501      	adds	r5, #1
 80026cc:	68e3      	ldr	r3, [r4, #12]
 80026ce:	9903      	ldr	r1, [sp, #12]
 80026d0:	1a5b      	subs	r3, r3, r1
 80026d2:	42ab      	cmp	r3, r5
 80026d4:	dcf2      	bgt.n	80026bc <_printf_i+0x210>
 80026d6:	e7eb      	b.n	80026b0 <_printf_i+0x204>
 80026d8:	2500      	movs	r5, #0
 80026da:	f104 0619 	add.w	r6, r4, #25
 80026de:	e7f5      	b.n	80026cc <_printf_i+0x220>
 80026e0:	08002a5f 	.word	0x08002a5f
 80026e4:	08002a70 	.word	0x08002a70

080026e8 <__sflush_r>:
 80026e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f0:	0716      	lsls	r6, r2, #28
 80026f2:	4605      	mov	r5, r0
 80026f4:	460c      	mov	r4, r1
 80026f6:	d454      	bmi.n	80027a2 <__sflush_r+0xba>
 80026f8:	684b      	ldr	r3, [r1, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	dc02      	bgt.n	8002704 <__sflush_r+0x1c>
 80026fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	dd48      	ble.n	8002796 <__sflush_r+0xae>
 8002704:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002706:	2e00      	cmp	r6, #0
 8002708:	d045      	beq.n	8002796 <__sflush_r+0xae>
 800270a:	2300      	movs	r3, #0
 800270c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002710:	682f      	ldr	r7, [r5, #0]
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	602b      	str	r3, [r5, #0]
 8002716:	d030      	beq.n	800277a <__sflush_r+0x92>
 8002718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	0759      	lsls	r1, r3, #29
 800271e:	d505      	bpl.n	800272c <__sflush_r+0x44>
 8002720:	6863      	ldr	r3, [r4, #4]
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002726:	b10b      	cbz	r3, 800272c <__sflush_r+0x44>
 8002728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002730:	6a21      	ldr	r1, [r4, #32]
 8002732:	4628      	mov	r0, r5
 8002734:	47b0      	blx	r6
 8002736:	1c43      	adds	r3, r0, #1
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	d106      	bne.n	800274a <__sflush_r+0x62>
 800273c:	6829      	ldr	r1, [r5, #0]
 800273e:	291d      	cmp	r1, #29
 8002740:	d82b      	bhi.n	800279a <__sflush_r+0xb2>
 8002742:	4a2a      	ldr	r2, [pc, #168]	@ (80027ec <__sflush_r+0x104>)
 8002744:	40ca      	lsrs	r2, r1
 8002746:	07d6      	lsls	r6, r2, #31
 8002748:	d527      	bpl.n	800279a <__sflush_r+0xb2>
 800274a:	2200      	movs	r2, #0
 800274c:	6062      	str	r2, [r4, #4]
 800274e:	04d9      	lsls	r1, r3, #19
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	6022      	str	r2, [r4, #0]
 8002754:	d504      	bpl.n	8002760 <__sflush_r+0x78>
 8002756:	1c42      	adds	r2, r0, #1
 8002758:	d101      	bne.n	800275e <__sflush_r+0x76>
 800275a:	682b      	ldr	r3, [r5, #0]
 800275c:	b903      	cbnz	r3, 8002760 <__sflush_r+0x78>
 800275e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002762:	602f      	str	r7, [r5, #0]
 8002764:	b1b9      	cbz	r1, 8002796 <__sflush_r+0xae>
 8002766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800276a:	4299      	cmp	r1, r3
 800276c:	d002      	beq.n	8002774 <__sflush_r+0x8c>
 800276e:	4628      	mov	r0, r5
 8002770:	f7ff fbec 	bl	8001f4c <_free_r>
 8002774:	2300      	movs	r3, #0
 8002776:	6363      	str	r3, [r4, #52]	@ 0x34
 8002778:	e00d      	b.n	8002796 <__sflush_r+0xae>
 800277a:	2301      	movs	r3, #1
 800277c:	4628      	mov	r0, r5
 800277e:	47b0      	blx	r6
 8002780:	4602      	mov	r2, r0
 8002782:	1c50      	adds	r0, r2, #1
 8002784:	d1c9      	bne.n	800271a <__sflush_r+0x32>
 8002786:	682b      	ldr	r3, [r5, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0c6      	beq.n	800271a <__sflush_r+0x32>
 800278c:	2b1d      	cmp	r3, #29
 800278e:	d001      	beq.n	8002794 <__sflush_r+0xac>
 8002790:	2b16      	cmp	r3, #22
 8002792:	d11e      	bne.n	80027d2 <__sflush_r+0xea>
 8002794:	602f      	str	r7, [r5, #0]
 8002796:	2000      	movs	r0, #0
 8002798:	e022      	b.n	80027e0 <__sflush_r+0xf8>
 800279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800279e:	b21b      	sxth	r3, r3
 80027a0:	e01b      	b.n	80027da <__sflush_r+0xf2>
 80027a2:	690f      	ldr	r7, [r1, #16]
 80027a4:	2f00      	cmp	r7, #0
 80027a6:	d0f6      	beq.n	8002796 <__sflush_r+0xae>
 80027a8:	0793      	lsls	r3, r2, #30
 80027aa:	680e      	ldr	r6, [r1, #0]
 80027ac:	bf08      	it	eq
 80027ae:	694b      	ldreq	r3, [r1, #20]
 80027b0:	600f      	str	r7, [r1, #0]
 80027b2:	bf18      	it	ne
 80027b4:	2300      	movne	r3, #0
 80027b6:	eba6 0807 	sub.w	r8, r6, r7
 80027ba:	608b      	str	r3, [r1, #8]
 80027bc:	f1b8 0f00 	cmp.w	r8, #0
 80027c0:	dde9      	ble.n	8002796 <__sflush_r+0xae>
 80027c2:	6a21      	ldr	r1, [r4, #32]
 80027c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80027c6:	4643      	mov	r3, r8
 80027c8:	463a      	mov	r2, r7
 80027ca:	4628      	mov	r0, r5
 80027cc:	47b0      	blx	r6
 80027ce:	2800      	cmp	r0, #0
 80027d0:	dc08      	bgt.n	80027e4 <__sflush_r+0xfc>
 80027d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027da:	81a3      	strh	r3, [r4, #12]
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e4:	4407      	add	r7, r0
 80027e6:	eba8 0800 	sub.w	r8, r8, r0
 80027ea:	e7e7      	b.n	80027bc <__sflush_r+0xd4>
 80027ec:	20400001 	.word	0x20400001

080027f0 <_fflush_r>:
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	690b      	ldr	r3, [r1, #16]
 80027f4:	4605      	mov	r5, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	b913      	cbnz	r3, 8002800 <_fflush_r+0x10>
 80027fa:	2500      	movs	r5, #0
 80027fc:	4628      	mov	r0, r5
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	b118      	cbz	r0, 800280a <_fflush_r+0x1a>
 8002802:	6a03      	ldr	r3, [r0, #32]
 8002804:	b90b      	cbnz	r3, 800280a <_fflush_r+0x1a>
 8002806:	f7ff f903 	bl	8001a10 <__sinit>
 800280a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f3      	beq.n	80027fa <_fflush_r+0xa>
 8002812:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002814:	07d0      	lsls	r0, r2, #31
 8002816:	d404      	bmi.n	8002822 <_fflush_r+0x32>
 8002818:	0599      	lsls	r1, r3, #22
 800281a:	d402      	bmi.n	8002822 <_fflush_r+0x32>
 800281c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800281e:	f7ff fb92 	bl	8001f46 <__retarget_lock_acquire_recursive>
 8002822:	4628      	mov	r0, r5
 8002824:	4621      	mov	r1, r4
 8002826:	f7ff ff5f 	bl	80026e8 <__sflush_r>
 800282a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800282c:	07da      	lsls	r2, r3, #31
 800282e:	4605      	mov	r5, r0
 8002830:	d4e4      	bmi.n	80027fc <_fflush_r+0xc>
 8002832:	89a3      	ldrh	r3, [r4, #12]
 8002834:	059b      	lsls	r3, r3, #22
 8002836:	d4e1      	bmi.n	80027fc <_fflush_r+0xc>
 8002838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800283a:	f7ff fb85 	bl	8001f48 <__retarget_lock_release_recursive>
 800283e:	e7dd      	b.n	80027fc <_fflush_r+0xc>

08002840 <__swhatbuf_r>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	460c      	mov	r4, r1
 8002844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002848:	2900      	cmp	r1, #0
 800284a:	b096      	sub	sp, #88	@ 0x58
 800284c:	4615      	mov	r5, r2
 800284e:	461e      	mov	r6, r3
 8002850:	da0d      	bge.n	800286e <__swhatbuf_r+0x2e>
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	bf14      	ite	ne
 800285e:	2340      	movne	r3, #64	@ 0x40
 8002860:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002864:	2000      	movs	r0, #0
 8002866:	6031      	str	r1, [r6, #0]
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	b016      	add	sp, #88	@ 0x58
 800286c:	bd70      	pop	{r4, r5, r6, pc}
 800286e:	466a      	mov	r2, sp
 8002870:	f000 f848 	bl	8002904 <_fstat_r>
 8002874:	2800      	cmp	r0, #0
 8002876:	dbec      	blt.n	8002852 <__swhatbuf_r+0x12>
 8002878:	9901      	ldr	r1, [sp, #4]
 800287a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800287e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002882:	4259      	negs	r1, r3
 8002884:	4159      	adcs	r1, r3
 8002886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800288a:	e7eb      	b.n	8002864 <__swhatbuf_r+0x24>

0800288c <__smakebuf_r>:
 800288c:	898b      	ldrh	r3, [r1, #12]
 800288e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002890:	079d      	lsls	r5, r3, #30
 8002892:	4606      	mov	r6, r0
 8002894:	460c      	mov	r4, r1
 8002896:	d507      	bpl.n	80028a8 <__smakebuf_r+0x1c>
 8002898:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	6123      	str	r3, [r4, #16]
 80028a0:	2301      	movs	r3, #1
 80028a2:	6163      	str	r3, [r4, #20]
 80028a4:	b003      	add	sp, #12
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	ab01      	add	r3, sp, #4
 80028aa:	466a      	mov	r2, sp
 80028ac:	f7ff ffc8 	bl	8002840 <__swhatbuf_r>
 80028b0:	9f00      	ldr	r7, [sp, #0]
 80028b2:	4605      	mov	r5, r0
 80028b4:	4639      	mov	r1, r7
 80028b6:	4630      	mov	r0, r6
 80028b8:	f7ff fbbc 	bl	8002034 <_malloc_r>
 80028bc:	b948      	cbnz	r0, 80028d2 <__smakebuf_r+0x46>
 80028be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c2:	059a      	lsls	r2, r3, #22
 80028c4:	d4ee      	bmi.n	80028a4 <__smakebuf_r+0x18>
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	81a3      	strh	r3, [r4, #12]
 80028d0:	e7e2      	b.n	8002898 <__smakebuf_r+0xc>
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	6020      	str	r0, [r4, #0]
 80028d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028da:	81a3      	strh	r3, [r4, #12]
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80028e2:	b15b      	cbz	r3, 80028fc <__smakebuf_r+0x70>
 80028e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028e8:	4630      	mov	r0, r6
 80028ea:	f000 f81d 	bl	8002928 <_isatty_r>
 80028ee:	b128      	cbz	r0, 80028fc <__smakebuf_r+0x70>
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	431d      	orrs	r5, r3
 8002900:	81a5      	strh	r5, [r4, #12]
 8002902:	e7cf      	b.n	80028a4 <__smakebuf_r+0x18>

08002904 <_fstat_r>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	4d07      	ldr	r5, [pc, #28]	@ (8002924 <_fstat_r+0x20>)
 8002908:	2300      	movs	r3, #0
 800290a:	4604      	mov	r4, r0
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	602b      	str	r3, [r5, #0]
 8002912:	f7fe ff0a 	bl	800172a <_fstat>
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	d102      	bne.n	8002920 <_fstat_r+0x1c>
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	b103      	cbz	r3, 8002920 <_fstat_r+0x1c>
 800291e:	6023      	str	r3, [r4, #0]
 8002920:	bd38      	pop	{r3, r4, r5, pc}
 8002922:	bf00      	nop
 8002924:	200002b8 	.word	0x200002b8

08002928 <_isatty_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	4d06      	ldr	r5, [pc, #24]	@ (8002944 <_isatty_r+0x1c>)
 800292c:	2300      	movs	r3, #0
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	f7fe ff09 	bl	800174a <_isatty>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_isatty_r+0x1a>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	b103      	cbz	r3, 8002942 <_isatty_r+0x1a>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	200002b8 	.word	0x200002b8

08002948 <_sbrk_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4d06      	ldr	r5, [pc, #24]	@ (8002964 <_sbrk_r+0x1c>)
 800294c:	2300      	movs	r3, #0
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	f000 f808 	bl	8002968 <_sbrk>
 8002958:	1c43      	adds	r3, r0, #1
 800295a:	d102      	bne.n	8002962 <_sbrk_r+0x1a>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	b103      	cbz	r3, 8002962 <_sbrk_r+0x1a>
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	bd38      	pop	{r3, r4, r5, pc}
 8002964:	200002b8 	.word	0x200002b8

08002968 <_sbrk>:
 8002968:	4a04      	ldr	r2, [pc, #16]	@ (800297c <_sbrk+0x14>)
 800296a:	6811      	ldr	r1, [r2, #0]
 800296c:	4603      	mov	r3, r0
 800296e:	b909      	cbnz	r1, 8002974 <_sbrk+0xc>
 8002970:	4903      	ldr	r1, [pc, #12]	@ (8002980 <_sbrk+0x18>)
 8002972:	6011      	str	r1, [r2, #0]
 8002974:	6810      	ldr	r0, [r2, #0]
 8002976:	4403      	add	r3, r0
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4770      	bx	lr
 800297c:	200002c8 	.word	0x200002c8
 8002980:	200002d0 	.word	0x200002d0

08002984 <_init>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr

08002990 <_fini>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr
