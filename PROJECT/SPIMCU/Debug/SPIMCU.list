
SPIMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004b58  08004b58  00005b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f8c  08004f8c  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00005f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00005f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004f94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001c8  0800515c  000061c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800515c  0000643c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b29  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a75  00000000  00000000  0000ed21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00010798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084e  00000000  00000000  000112e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ff3  00000000  00000000  00011b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c21a  00000000  00000000  00016b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bf39  00000000  00000000  00022d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007ec74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  0007ecb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dc  00000000  00000000  00082dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b3c 	.word	0x08004b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08004b3c 	.word	0x08004b3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000bc0:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8000bc4:	015b      	lsls	r3, r3, #5
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f002 021f 	and.w	r2, r2, #31
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	015a      	lsls	r2, r3, #5
 8000bde:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <EXTI_GetITStatus+0x6c>)
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	f002 021f 	and.w	r2, r2, #31
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <EXTI_GetITStatus+0x5a>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e001      	b.n	8000c06 <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40010414 	.word	0x40010414

08000c18 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	2201      	movs	r2, #1
 8000c28:	fa02 f103 	lsl.w	r1, r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	015a      	lsls	r2, r3, #5
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <EXTI_ClearITPendingBit+0x30>)
 8000c34:	4413      	add	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40010414 	.word	0x40010414

08000c4c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e07c      	b.n	8000d62 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d16b      	bne.n	8000d5c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <GPIO_Init+0x48>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d134      	bne.n	8000cfe <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	795b      	ldrb	r3, [r3, #5]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	889b      	ldrh	r3, [r3, #4]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2301      	movs	r3, #1
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	799b      	ldrb	r3, [r3, #6]
 8000cea:	4619      	mov	r1, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2103      	movs	r1, #3
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2103      	movs	r1, #3
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	79db      	ldrb	r3, [r3, #7]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	f67f af7f 	bls.w	8000c68 <GPIO_Init+0x1c>
    }
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2202      	movs	r2, #2
 8000d92:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dc8:	e002      	b.n	8000dd0 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	887a      	ldrh	r2, [r7, #2]
 8000dce:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	@ 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e04:	4b8b      	ldr	r3, [pc, #556]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d011      	beq.n	8000e38 <RCC_GetClocksFreq+0x5c>
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d837      	bhi.n	8000e8a <RCC_GetClocksFreq+0xae>
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <RCC_GetClocksFreq+0x4c>
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d004      	beq.n	8000e30 <RCC_GetClocksFreq+0x54>
 8000e26:	e030      	b.n	8000e8a <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a83      	ldr	r2, [pc, #524]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e2c:	601a      	str	r2, [r3, #0]
      break;
 8000e2e:	e030      	b.n	8000e92 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a81      	ldr	r2, [pc, #516]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e34:	601a      	str	r2, [r3, #0]
      break;
 8000e36:	e02c      	b.n	8000e92 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000e38:	4b7e      	ldr	r3, [pc, #504]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000e40:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e42:	4b7c      	ldr	r3, [pc, #496]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3302      	adds	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	4a77      	ldr	r2, [pc, #476]	@ (800103c <RCC_GetClocksFreq+0x260>)
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e64:	e00d      	b.n	8000e82 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000e66:	4b73      	ldr	r3, [pc, #460]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000e72:	4a71      	ldr	r2, [pc, #452]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e86:	601a      	str	r2, [r3, #0]
      break;
 8000e88:	e003      	b.n	8000e92 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000e8e:	601a      	str	r2, [r3, #0]
      break;
 8000e90:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e92:	4b68      	ldr	r3, [pc, #416]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e9a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000ea2:	4a67      	ldr	r2, [pc, #412]	@ (8001040 <RCC_GetClocksFreq+0x264>)
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	40da      	lsrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000eba:	4b5e      	ldr	r3, [pc, #376]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000ec2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000eca:	4a5d      	ldr	r2, [pc, #372]	@ (8001040 <RCC_GetClocksFreq+0x264>)
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	40da      	lsrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000ee2:	4b54      	ldr	r3, [pc, #336]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000eea:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	0adb      	lsrs	r3, r3, #11
 8000ef0:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000ef2:	4a53      	ldr	r2, [pc, #332]	@ (8001040 <RCC_GetClocksFreq+0x264>)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	40da      	lsrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000f12:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001044 <RCC_GetClocksFreq+0x268>)
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	e003      	b.n	8000f46 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8000f4e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000f56:	4a3b      	ldr	r2, [pc, #236]	@ (8001044 <RCC_GetClocksFreq+0x268>)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	e003      	b.n	8000f82 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000f82:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d003      	beq.n	8000f96 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000f92:	619a      	str	r2, [r3, #24]
 8000f94:	e003      	b.n	8000f9e <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	d003      	beq.n	8000fb2 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <RCC_GetClocksFreq+0x25c>)
 8000fae:	61da      	str	r2, [r3, #28]
 8000fb0:	e003      	b.n	8000fba <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fc6:	d10d      	bne.n	8000fe4 <RCC_GetClocksFreq+0x208>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d108      	bne.n	8000fe4 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d104      	bne.n	8000fe4 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	005a      	lsls	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	621a      	str	r2, [r3, #32]
 8000fe2:	e003      	b.n	8000fec <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff8:	d10d      	bne.n	8001016 <RCC_GetClocksFreq+0x23a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001000:	429a      	cmp	r2, r3
 8001002:	d108      	bne.n	8001016 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	429a      	cmp	r2, r3
 800100a:	d104      	bne.n	8001016 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	005a      	lsls	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
 8001014:	e003      	b.n	800101e <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800101e:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <RCC_GetClocksFreq+0x258>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
 8001032:	e028      	b.n	8001086 <RCC_GetClocksFreq+0x2aa>
 8001034:	40021000 	.word	0x40021000
 8001038:	007a1200 	.word	0x007a1200
 800103c:	003d0900 	.word	0x003d0900
 8001040:	08004be8 	.word	0x08004be8
 8001044:	08004bf8 	.word	0x08004bf8
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001048:	4b6c      	ldr	r3, [pc, #432]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d104      	bne.n	800105e <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
 800105c:	e013      	b.n	8001086 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800105e:	4b67      	ldr	r3, [pc, #412]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d104      	bne.n	8001074 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
 8001072:	e008      	b.n	8001086 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001074:	4b61      	ldr	r3, [pc, #388]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d102      	bne.n	8001086 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a5f      	ldr	r2, [pc, #380]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001086:	4b5d      	ldr	r3, [pc, #372]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	62da      	str	r2, [r3, #44]	@ 0x2c
 800109a:	e021      	b.n	80010e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800109c:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a8:	d104      	bne.n	80010b4 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010b2:	e015      	b.n	80010e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80010b4:	4b51      	ldr	r3, [pc, #324]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80010c0:	d104      	bne.n	80010cc <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ca:	e009      	b.n	80010e0 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80010cc:	4b4b      	ldr	r3, [pc, #300]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80010d8:	d102      	bne.n	80010e0 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a48      	ldr	r2, [pc, #288]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80010e0:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f4:	e021      	b.n	800113a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80010f6:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80010fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001102:	d104      	bne.n	800110e <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
 800110c:	e015      	b.n	800113a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800110e:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8001116:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800111a:	d104      	bne.n	8001126 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
 8001124:	e009      	b.n	800113a <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8001126:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800112e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001132:	d102      	bne.n	800113a <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 800113a:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d104      	bne.n	8001150 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	635a      	str	r2, [r3, #52]	@ 0x34
 800114e:	e021      	b.n	8001194 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8001150:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800115c:	d104      	bne.n	8001168 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
 8001166:	e015      	b.n	8001194 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001170:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001174:	d104      	bne.n	8001180 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
 800117e:	e009      	b.n	8001194 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001188:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800118c:	d102      	bne.n	8001194 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	639a      	str	r2, [r3, #56]	@ 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80011a8:	e021      	b.n	80011ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80011b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011b6:	d104      	bne.n	80011c2 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011c0:	e015      	b.n	80011ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80011ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011ce:	d104      	bne.n	80011da <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011d8:	e009      	b.n	80011ee <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <RCC_GetClocksFreq+0x420>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80011e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80011e6:	d102      	bne.n	80011ee <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <RCC_GetClocksFreq+0x424>)
 80011ec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011ee:	bf00      	nop
 80011f0:	372c      	adds	r7, #44	@ 0x2c
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	007a1200 	.word	0x007a1200

08001204 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	4909      	ldr	r1, [pc, #36]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001222:	e006      	b.n	8001232 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	43db      	mvns	r3, r3
 800122c:	4904      	ldr	r1, [pc, #16]	@ (8001240 <RCC_AHBPeriphClockCmd+0x3c>)
 800122e:	4013      	ands	r3, r2
 8001230:	614b      	str	r3, [r1, #20]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	330c      	adds	r3, #12
 800125c:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	701a      	strb	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	330c      	adds	r3, #12
 8001284:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	891b      	ldrh	r3, [r3, #8]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	4013      	ands	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e001      	b.n	80012c2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	43db      	mvns	r3, r3
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	@ 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4613      	mov	r3, r2
 8001324:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29b      	uxth	r3, r3
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d103      	bne.n	8001362 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	e005      	b.n	800136e <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d102      	bne.n	800136e <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3308      	adds	r3, #8
 800136c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001380:	e006      	b.n	8001390 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43da      	mvns	r2, r3
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	3724      	adds	r7, #36	@ 0x24
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69da      	ldr	r2, [r3, #28]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e001      	b.n	80013c0 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80013f8:	2201      	movs	r2, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4013      	ands	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e00d      	b.n	8001430 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d105      	bne.n	8001426 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e004      	b.n	8001430 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4013      	ands	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001436:	2201      	movs	r2, #1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <USART_GetITStatus+0x8e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	74fb      	strb	r3, [r7, #19]
 800145a:	e001      	b.n	8001460 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001460:	7cfb      	ldrb	r3, [r7, #19]
}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	2201      	movs	r2, #1
 8001482:	fa02 f103 	lsl.w	r1, r2, r3
 8001486:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <NVIC_EnableIRQ+0x30>)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <uart_put_char+0x30>)
 80014b6:	f7ff ff1d 	bl	80012f4 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80014ba:	bf00      	nop
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <uart_put_char+0x30>)
 80014c0:	f7ff ff6c 	bl	800139c <USART_GetFlagStatus>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f8      	beq.n	80014bc <uart_put_char+0x18>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400

080014d8 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e012      	b.n	8001512 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b0a      	cmp	r3, #10
 80014f6:	d102      	bne.n	80014fe <_write_r+0x26>
            uart_put_char('\r');
 80014f8:	200d      	movs	r0, #13
 80014fa:	f7ff ffd3 	bl	80014a4 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ffcc 	bl	80014a4 <uart_put_char>
    for (n = 0; n < len; n++) {
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbe8      	blt.n	80014ec <_write_r+0x14>
    }

    return len;
 800151a:	683b      	ldr	r3, [r7, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001528:	4915      	ldr	r1, [pc, #84]	@ (8001580 <USART2_IRQHandler+0x5c>)
 800152a:	4816      	ldr	r0, [pc, #88]	@ (8001584 <USART2_IRQHandler+0x60>)
 800152c:	f7ff ff4f 	bl	80013ce <USART_GetITStatus>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d021      	beq.n	800157a <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <USART2_IRQHandler+0x60>)
 8001538:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800153a:	b299      	uxth	r1, r3
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <USART2_IRQHandler+0x64>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	b2d0      	uxtb	r0, r2
 8001546:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <USART2_IRQHandler+0x64>)
 8001548:	7010      	strb	r0, [r2, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	b2c9      	uxtb	r1, r1
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <USART2_IRQHandler+0x68>)
 8001550:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <USART2_IRQHandler+0x6c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2bff      	cmp	r3, #255	@ 0xff
 800155a:	d107      	bne.n	800156c <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <USART2_IRQHandler+0x70>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <USART2_IRQHandler+0x70>)
 8001568:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800156a:	e006      	b.n	800157a <USART2_IRQHandler+0x56>
            UART_COUNT++;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <USART2_IRQHandler+0x6c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	3301      	adds	r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <USART2_IRQHandler+0x6c>)
 8001578:	701a      	strb	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	00050105 	.word	0x00050105
 8001584:	40004400 	.word	0x40004400
 8001588:	200002e4 	.word	0x200002e4
 800158c:	200001e4 	.word	0x200001e4
 8001590:	200002e6 	.word	0x200002e6
 8001594:	200002e5 	.word	0x200002e5

08001598 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	@ 0x50
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 80015a0:	4b86      	ldr	r3, [pc, #536]	@ (80017bc <uart_init+0x224>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb4f 	bl	8002c4c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80015ae:	4b83      	ldr	r3, [pc, #524]	@ (80017bc <uart_init+0x224>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fb48 	bl	8002c4c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80015bc:	4b80      	ldr	r3, [pc, #512]	@ (80017c0 <uart_init+0x228>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4a7f      	ldr	r2, [pc, #508]	@ (80017c0 <uart_init+0x228>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80015c8:	4b7d      	ldr	r3, [pc, #500]	@ (80017c0 <uart_init+0x228>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a7c      	ldr	r2, [pc, #496]	@ (80017c0 <uart_init+0x228>)
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d2:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80015d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015e2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80015e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015f2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80015f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001602:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001604:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800160e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001612:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8001614:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800161e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001622:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001624:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800162e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001632:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001634:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	b29b      	uxth	r3, r3
 800163c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001640:	f023 030c 	bic.w	r3, r3, #12
 8001644:	b29b      	uxth	r3, r3
 8001646:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001648:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800164c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001650:	8892      	ldrh	r2, [r2, #4]
 8001652:	b292      	uxth	r2, r2
 8001654:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001656:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001660:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001664:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001666:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001670:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001674:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001676:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001680:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001684:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001686:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001690:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001694:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001696:	4b4b      	ldr	r3, [pc, #300]	@ (80017c4 <uart_init+0x22c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a4a      	ldr	r2, [pc, #296]	@ (80017c4 <uart_init+0x22c>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 80016a2:	4b48      	ldr	r3, [pc, #288]	@ (80017c4 <uart_init+0x22c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a47      	ldr	r2, [pc, #284]	@ (80017c4 <uart_init+0x22c>)
 80016a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016ac:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80016ae:	4b45      	ldr	r3, [pc, #276]	@ (80017c4 <uart_init+0x22c>)
 80016b0:	4a44      	ldr	r2, [pc, #272]	@ (80017c4 <uart_init+0x22c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80016b6:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <uart_init+0x22c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a42      	ldr	r2, [pc, #264]	@ (80017c4 <uart_init+0x22c>)
 80016bc:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80016c0:	f023 030c 	bic.w	r3, r3, #12
 80016c4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80016c6:	4b3f      	ldr	r3, [pc, #252]	@ (80017c4 <uart_init+0x22c>)
 80016c8:	4a3e      	ldr	r2, [pc, #248]	@ (80017c4 <uart_init+0x22c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <uart_init+0x22c>)
 80016d0:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <uart_init+0x22c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <uart_init+0x22c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <uart_init+0x22c>)
 80016dc:	f043 030c 	orr.w	r3, r3, #12
 80016e0:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80016e2:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <uart_init+0x22c>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4a37      	ldr	r2, [pc, #220]	@ (80017c4 <uart_init+0x22c>)
 80016e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016ec:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <uart_init+0x22c>)
 80016f0:	4a34      	ldr	r2, [pc, #208]	@ (80017c4 <uart_init+0x22c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016fa:	2300      	movs	r3, #0
 80016fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80016fe:	2300      	movs	r3, #0
 8001700:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb68 	bl	8000ddc <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800170c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170e:	647b      	str	r3, [r7, #68]	@ 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <uart_init+0x22c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d010      	beq.n	800173e <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 800171c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800171e:	005a      	lsls	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	fb01 f202 	mul.w	r2, r1, r2
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800173c:	e00d      	b.n	800175a <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800173e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tmpreg  = apbclock % baud;
 8001748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	fb01 f202 	mul.w	r2, r1, r2
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (tmpreg >=  baud / 2) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001760:	429a      	cmp	r2, r3
 8001762:	d302      	bcc.n	800176a <uart_init+0x1d2>
        divider++;
 8001764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001766:	3301      	adds	r3, #1
 8001768:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <uart_init+0x22c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	64bb      	str	r3, [r7, #72]	@ 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001782:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001786:	4013      	ands	r3, r2
 8001788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800178a:	4313      	orrs	r3, r2
 800178c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <uart_init+0x22c>)
 8001790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001792:	b292      	uxth	r2, r2
 8001794:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <uart_init+0x22c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <uart_init+0x22c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80017a2:	2201      	movs	r2, #1
 80017a4:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <uart_init+0x230>)
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <uart_init+0x22c>)
 80017a8:	f7ff fdb6 	bl	8001318 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 80017ac:	2026      	movs	r0, #38	@ 0x26
 80017ae:	f7ff fe5f 	bl	8001470 <NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	@ 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40004400 	.word	0x40004400
 80017c8:	00050105 	.word	0x00050105

080017cc <EXTI4_IRQHandler>:
	NVIC_Init(&NVIC_InitStructureUp);

}

// IRQHandler for when the joystick is being pushed upwards
void EXTI4_IRQHandler(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 80017d0:	2004      	movs	r0, #4
 80017d2:	f7ff f9e9 	bl	8000ba8 <EXTI_GetITStatus>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <EXTI4_IRQHandler+0x1c>
        // --- Your handler code here ---
    	setLed('m');
 80017dc:	206d      	movs	r0, #109	@ 0x6d
 80017de:	f000 f805 	bl	80017ec <setLed>

        EXTI_ClearITPendingBit(EXTI_Line4);
 80017e2:	2004      	movs	r0, #4
 80017e4:	f7ff fa18 	bl	8000c18 <EXTI_ClearITPendingBit>
    }

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <setLed>:

	// Initialize LED to off
	setLed('d');
}

void setLed(char sel) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	 * Yellow	255	255	0
	 * Cyan:	0	255	255
	 * Magenta:	255	0	255
	 */

	if (sel == 'r') {
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b72      	cmp	r3, #114	@ 0x72
 80017fa:	d111      	bne.n	8001820 <setLed+0x34>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80017fc:	2200      	movs	r2, #0
 80017fe:	2110      	movs	r1, #16
 8001800:	4852      	ldr	r0, [pc, #328]	@ (800194c <setLed+0x160>)
 8001802:	f7ff fad3 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 8001806:	2201      	movs	r2, #1
 8001808:	2180      	movs	r1, #128	@ 0x80
 800180a:	4851      	ldr	r0, [pc, #324]	@ (8001950 <setLed+0x164>)
 800180c:	f7ff face 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181a:	f7ff fac7 	bl	8000dac <GPIO_WriteBit>
	} else if (sel == 'd') {
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
	}
}
 800181e:	e091      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'g') {
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b67      	cmp	r3, #103	@ 0x67
 8001824:	d111      	bne.n	800184a <setLed+0x5e>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001826:	2201      	movs	r2, #1
 8001828:	2110      	movs	r1, #16
 800182a:	4848      	ldr	r0, [pc, #288]	@ (800194c <setLed+0x160>)
 800182c:	f7ff fabe 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001830:	2200      	movs	r2, #0
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	4846      	ldr	r0, [pc, #280]	@ (8001950 <setLed+0x164>)
 8001836:	f7ff fab9 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001844:	f7ff fab2 	bl	8000dac <GPIO_WriteBit>
}
 8001848:	e07c      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'b') {
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b62      	cmp	r3, #98	@ 0x62
 800184e:	d111      	bne.n	8001874 <setLed+0x88>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001850:	2201      	movs	r2, #1
 8001852:	2110      	movs	r1, #16
 8001854:	483d      	ldr	r0, [pc, #244]	@ (800194c <setLed+0x160>)
 8001856:	f7ff faa9 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800185a:	2201      	movs	r2, #1
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	483c      	ldr	r0, [pc, #240]	@ (8001950 <setLed+0x164>)
 8001860:	f7ff faa4 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f7ff fa9d 	bl	8000dac <GPIO_WriteBit>
}
 8001872:	e067      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'c') {
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b63      	cmp	r3, #99	@ 0x63
 8001878:	d111      	bne.n	800189e <setLed+0xb2>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 800187a:	2201      	movs	r2, #1
 800187c:	2110      	movs	r1, #16
 800187e:	4833      	ldr	r0, [pc, #204]	@ (800194c <setLed+0x160>)
 8001880:	f7ff fa94 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001884:	2200      	movs	r2, #0
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	4831      	ldr	r0, [pc, #196]	@ (8001950 <setLed+0x164>)
 800188a:	f7ff fa8f 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f7ff fa88 	bl	8000dac <GPIO_WriteBit>
}
 800189c:	e052      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'm') {
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b6d      	cmp	r3, #109	@ 0x6d
 80018a2:	d111      	bne.n	80018c8 <setLed+0xdc>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80018a4:	2200      	movs	r2, #0
 80018a6:	2110      	movs	r1, #16
 80018a8:	4828      	ldr	r0, [pc, #160]	@ (800194c <setLed+0x160>)
 80018aa:	f7ff fa7f 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 80018ae:	2201      	movs	r2, #1
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	4827      	ldr	r0, [pc, #156]	@ (8001950 <setLed+0x164>)
 80018b4:	f7ff fa7a 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c2:	f7ff fa73 	bl	8000dac <GPIO_WriteBit>
}
 80018c6:	e03d      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'y') {
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b79      	cmp	r3, #121	@ 0x79
 80018cc:	d111      	bne.n	80018f2 <setLed+0x106>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80018ce:	2200      	movs	r2, #0
 80018d0:	2110      	movs	r1, #16
 80018d2:	481e      	ldr	r0, [pc, #120]	@ (800194c <setLed+0x160>)
 80018d4:	f7ff fa6a 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 80018d8:	2200      	movs	r2, #0
 80018da:	2180      	movs	r1, #128	@ 0x80
 80018dc:	481c      	ldr	r0, [pc, #112]	@ (8001950 <setLed+0x164>)
 80018de:	f7ff fa65 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f7ff fa5e 	bl	8000dac <GPIO_WriteBit>
}
 80018f0:	e028      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'w') {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b77      	cmp	r3, #119	@ 0x77
 80018f6:	d111      	bne.n	800191c <setLed+0x130>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 0);	// red
 80018f8:	2200      	movs	r2, #0
 80018fa:	2110      	movs	r1, #16
 80018fc:	4813      	ldr	r0, [pc, #76]	@ (800194c <setLed+0x160>)
 80018fe:	f7ff fa55 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 0);	// green
 8001902:	2200      	movs	r2, #0
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	4812      	ldr	r0, [pc, #72]	@ (8001950 <setLed+0x164>)
 8001908:	f7ff fa50 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 0);	// blue
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001916:	f7ff fa49 	bl	8000dac <GPIO_WriteBit>
}
 800191a:	e013      	b.n	8001944 <setLed+0x158>
	} else if (sel == 'd') {
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d110      	bne.n	8001944 <setLed+0x158>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, 1);	// red
 8001922:	2201      	movs	r2, #1
 8001924:	2110      	movs	r1, #16
 8001926:	4809      	ldr	r0, [pc, #36]	@ (800194c <setLed+0x160>)
 8001928:	f7ff fa40 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOC, GPIO_Pin_7, 1);	// green
 800192c:	2201      	movs	r2, #1
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	4807      	ldr	r0, [pc, #28]	@ (8001950 <setLed+0x164>)
 8001932:	f7ff fa3b 	bl	8000dac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, 1);	// blue
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800193c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001940:	f7ff fa34 	bl	8000dac <GPIO_WriteBit>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	48000400 	.word	0x48000400
 8001950:	48000800 	.word	0x48000800

08001954 <spi2_transfer>:
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);


}

uint8_t spi2_transfer(uint8_t data) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET);
 800195e:	bf00      	nop
 8001960:	2102      	movs	r1, #2
 8001962:	480d      	ldr	r0, [pc, #52]	@ (8001998 <spi2_transfer+0x44>)
 8001964:	f7ff fc98 	bl	8001298 <SPI_I2S_GetFlagStatus>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	d1f8      	bne.n	8001960 <spi2_transfer+0xc>
	SPI_SendData8(SPI2, data);
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4619      	mov	r1, r3
 8001972:	4809      	ldr	r0, [pc, #36]	@ (8001998 <spi2_transfer+0x44>)
 8001974:	f7ff fc66 	bl	8001244 <SPI_SendData8>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) != SET);
 8001978:	bf00      	nop
 800197a:	2101      	movs	r1, #1
 800197c:	4806      	ldr	r0, [pc, #24]	@ (8001998 <spi2_transfer+0x44>)
 800197e:	f7ff fc8b 	bl	8001298 <SPI_I2S_GetFlagStatus>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1f8      	bne.n	800197a <spi2_transfer+0x26>
	return SPI_ReceiveData8(SPI2);
 8001988:	4803      	ldr	r0, [pc, #12]	@ (8001998 <spi2_transfer+0x44>)
 800198a:	f7ff fc71 	bl	8001270 <SPI_ReceiveData8>
 800198e:	4603      	mov	r3, r0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40003800 	.word	0x40003800

0800199c <readAG>:

uint8_t readAG(uint8_t reg) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2120      	movs	r1, #32
 80019aa:	4810      	ldr	r0, [pc, #64]	@ (80019ec <readAG+0x50>)
 80019ac:	f7ff f9fe 	bl	8000dac <GPIO_WriteBit>
	spi2_transfer(0x80 | reg);           // send address
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ffcb 	bl	8001954 <spi2_transfer>
	int8_t val = spi2_transfer(0x00);    // send dummy & read value
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff ffc8 	bl	8001954 <spi2_transfer>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);
 80019c8:	bf00      	nop
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <readAG+0x54>)
 80019ce:	f7ff fc63 	bl	8001298 <SPI_I2S_GetFlagStatus>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d0f8      	beq.n	80019ca <readAG+0x2e>
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2120      	movs	r1, #32
 80019dc:	4803      	ldr	r0, [pc, #12]	@ (80019ec <readAG+0x50>)
 80019de:	f7ff f9e5 	bl	8000dac <GPIO_WriteBit>
	return val;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	48000400 	.word	0x48000400
 80019f0:	40003800 	.word	0x40003800

080019f4 <writeAG>:

void writeAG(uint8_t reg, uint8_t data) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2120      	movs	r1, #32
 8001a08:	480f      	ldr	r0, [pc, #60]	@ (8001a48 <writeAG+0x54>)
 8001a0a:	f7ff f9cf 	bl	8000dac <GPIO_WriteBit>
	spi2_transfer(0x7F & reg); // makes sure bit 7 is 0
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff9c 	bl	8001954 <spi2_transfer>
	spi2_transfer(data);
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff98 	bl	8001954 <spi2_transfer>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);
 8001a24:	bf00      	nop
 8001a26:	2180      	movs	r1, #128	@ 0x80
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <writeAG+0x58>)
 8001a2a:	f7ff fc35 	bl	8001298 <SPI_I2S_GetFlagStatus>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d0f8      	beq.n	8001a26 <writeAG+0x32>
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2120      	movs	r1, #32
 8001a38:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <writeAG+0x54>)
 8001a3a:	f7ff f9b7 	bl	8000dac <GPIO_WriteBit>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	40003800 	.word	0x40003800

08001a50 <readOutput>:


int16_t readOutput(uint8_t lowReg){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	uint8_t lower = readAG(lowReg);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff9d 	bl	800199c <readAG>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
	uint8_t higher = readAG(lowReg+1);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff95 	bl	800199c <readAG>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73bb      	strb	r3, [r7, #14]

	int16_t Gvalue = ((higher << 8) | lower);
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	81bb      	strh	r3, [r7, #12]

	return Gvalue;
 8001a86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <readTempteratureC>:
	int16_t accelZ = readOutput(0x2C);

	printf("accelX= %d | accelY= %d | accelZ= %d\n",accelX,accelY,accelZ);
}

void readTempteratureC(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

	int16_t tempVal = readOutput(0x15);
 8001a9a:	2015      	movs	r0, #21
 8001a9c:	f7ff ffd8 	bl	8001a50 <readOutput>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	80fb      	strh	r3, [r7, #6]
	float tempC = 25.0f + (tempVal /16.0f);
 8001aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ac0:	edc7 7a00 	vstr	s15, [r7]

	printf("Temperature in C = %f\n", tempC);
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7fe fd3f 	bl	8000548 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4803      	ldr	r0, [pc, #12]	@ (8001adc <readTempteratureC+0x48>)
 8001ad0:	f001 f8aa 	bl	8002c28 <iprintf>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08004ba4 	.word	0x08004ba4

08001ae0 <writeM>:
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);
	return val;
}

void writeM(uint8_t reg, uint8_t data) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460a      	mov	r2, r1
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71bb      	strb	r3, [r7, #6]
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2110      	movs	r1, #16
 8001af4:	480f      	ldr	r0, [pc, #60]	@ (8001b34 <writeM+0x54>)
 8001af6:	f7ff f959 	bl	8000dac <GPIO_WriteBit>
	spi2_transfer(0x7F & reg); // makes sure bit 7 is 0
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff26 	bl	8001954 <spi2_transfer>
	spi2_transfer(data);
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff22 	bl	8001954 <spi2_transfer>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == SET);
 8001b10:	bf00      	nop
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	4808      	ldr	r0, [pc, #32]	@ (8001b38 <writeM+0x58>)
 8001b16:	f7ff fbbf 	bl	8001298 <SPI_I2S_GetFlagStatus>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d0f8      	beq.n	8001b12 <writeM+0x32>
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2110      	movs	r1, #16
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <writeM+0x54>)
 8001b26:	f7ff f941 	bl	8000dac <GPIO_WriteBit>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	48000400 	.word	0x48000400
 8001b38:	40003800 	.word	0x40003800

08001b3c <initAG>:
	int16_t magnetZ = readOutput(0x2C);

	printf("magnetX= %d | magnetY= %d | magnetZ= %d\n",magnetX,magnetY,magnetZ);
}

void initAG(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	//enable Gyroscope
	writeAG(0x10,0b01100000);
 8001b40:	2160      	movs	r1, #96	@ 0x60
 8001b42:	2010      	movs	r0, #16
 8001b44:	f7ff ff56 	bl	80019f4 <writeAG>

	//enable Accelerometer
	writeAG(0x1F,0b01111000);
 8001b48:	2178      	movs	r1, #120	@ 0x78
 8001b4a:	201f      	movs	r0, #31
 8001b4c:	f7ff ff52 	bl	80019f4 <writeAG>
	writeAG(0x20,0b01000000);
 8001b50:	2140      	movs	r1, #64	@ 0x40
 8001b52:	2020      	movs	r0, #32
 8001b54:	f7ff ff4e 	bl	80019f4 <writeAG>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <initMag>:

void initMag(){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	//enable Magnetometer
	writeM(0x20,0b00010000);
 8001b60:	2110      	movs	r1, #16
 8001b62:	2020      	movs	r0, #32
 8001b64:	f7ff ffbc 	bl	8001ae0 <writeM>
	writeM(0x21,0b00000000);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2021      	movs	r0, #33	@ 0x21
 8001b6c:	f7ff ffb8 	bl	8001ae0 <writeM>
	writeM(0x22,0b10000111);
 8001b70:	2187      	movs	r1, #135	@ 0x87
 8001b72:	2022      	movs	r0, #34	@ 0x22
 8001b74:	f7ff ffb4 	bl	8001ae0 <writeM>
	writeM(0x23,0b00000000);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2023      	movs	r0, #35	@ 0x23
 8001b7c:	f7ff ffb0 	bl	8001ae0 <writeM>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <main>:
#include "flash.h"

#include "lsm9ds1.h"
#include "spiMaster.h"

int main(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	uart_init( 9600 ); // Initialize USB serial at 9600 baud
 8001b88:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8001b8c:	f7ff fd04 	bl	8001598 <uart_init>

	initMasterSPI();
 8001b90:	f000 f808 	bl	8001ba4 <initMasterSPI>

	initAG();
 8001b94:	f7ff ffd2 	bl	8001b3c <initAG>
	initMag();
 8001b98:	f7ff ffe0 	bl	8001b5c <initMag>

	while(1) {

		readTempteratureC();
 8001b9c:	f7ff ff7a 	bl	8001a94 <readTempteratureC>
 8001ba0:	e7fc      	b.n	8001b9c <main+0x18>
	...

08001ba4 <initMasterSPI>:
#include "spiMaster.h"

void initMasterSPI(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	// Enable Clocks
	RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8001baa:	4b78      	ldr	r3, [pc, #480]	@ (8001d8c <initMasterSPI+0x1e8>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a77      	ldr	r2, [pc, #476]	@ (8001d8c <initMasterSPI+0x1e8>)
 8001bb0:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001bb4:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8001bb6:	4b75      	ldr	r3, [pc, #468]	@ (8001d8c <initMasterSPI+0x1e8>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a74      	ldr	r2, [pc, #464]	@ (8001d8c <initMasterSPI+0x1e8>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc0:	61d3      	str	r3, [r2, #28]

	// Connect pins to SPI2
	GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001bc2:	4b73      	ldr	r3, [pc, #460]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	4a72      	ldr	r2, [pc, #456]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bc8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001bcc:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001bce:	4b70      	ldr	r3, [pc, #448]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bd4:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001bd8:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->AFR[14 >> 0x03] &= ~(0x0000000F << ((14 & 0x00000007) * 4)); // Clear alternate function for PB13
 8001bda:	4b6d      	ldr	r3, [pc, #436]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	4a6c      	ldr	r2, [pc, #432]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001be0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001be4:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[14 >> 0x03] |=  (0x00000005 << ((14 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8001be6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	4a69      	ldr	r2, [pc, #420]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bec:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8001bf0:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8001bf2:	4b67      	ldr	r3, [pc, #412]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	4a66      	ldr	r2, [pc, #408]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001bf8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001bfc:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8001bfe:	4b64      	ldr	r3, [pc, #400]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	4a63      	ldr	r2, [pc, #396]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c04:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8001c08:	6253      	str	r3, [r2, #36]	@ 0x24

	// Configure pins PB13 and PB15 for 10 MHz alternate function
	GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (14 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8001c0a:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a60      	ldr	r2, [pc, #384]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c10:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001c14:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (14 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001c16:	4b5e      	ldr	r3, [pc, #376]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c1c:	f043 43a8 	orr.w	r3, r3, #1409286144	@ 0x54000000
 8001c20:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001 	<< (14) 	| 0x0001     << (15));        // Clear output type register
 8001c22:	4b5b      	ldr	r3, [pc, #364]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c24:	889b      	ldrh	r3, [r3, #4]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4a59      	ldr	r2, [pc, #356]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000 	<< (14) 	| 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001c32:	4a57      	ldr	r2, [pc, #348]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c34:	4b56      	ldr	r3, [pc, #344]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c36:	8892      	ldrh	r2, [r2, #4]
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (14 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8001c3c:	4b54      	ldr	r3, [pc, #336]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a53      	ldr	r2, [pc, #332]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c42:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001c46:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (14 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001c48:	4b51      	ldr	r3, [pc, #324]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c4e:	f043 4328 	orr.w	r3, r3, #2818572288	@ 0xa8000000
 8001c52:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8001c54:	4b4e      	ldr	r3, [pc, #312]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a4d      	ldr	r2, [pc, #308]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c5a:	f023 434c 	bic.w	r3, r3, #3422552064	@ 0xcc000000
 8001c5e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001c60:	4b4b      	ldr	r3, [pc, #300]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c62:	4a4b      	ldr	r2, [pc, #300]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	60d3      	str	r3, [r2, #12]

	// Configure SPI2
	SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8001c68:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4a49      	ldr	r2, [pc, #292]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c70:	f403 5341 	and.w	r3, r3, #12352	@ 0x3040
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8001c78:	4a46      	ldr	r2, [pc, #280]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c7a:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c7c:	8812      	ldrh	r2, [r2, #0]
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	801a      	strh	r2, [r3, #0]
	SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8001c82:	4b44      	ldr	r3, [pc, #272]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4a42      	ldr	r2, [pc, #264]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c8a:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4a3e      	ldr	r2, [pc, #248]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8001cb2:	4b38      	ldr	r3, [pc, #224]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4a36      	ldr	r2, [pc, #216]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0018; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8001cc2:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4a32      	ldr	r2, [pc, #200]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cca:	f043 0318 	orr.w	r3, r3, #24
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8001cd2:	4a30      	ldr	r2, [pc, #192]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	801a      	strh	r2, [r3, #0]
	SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001ce4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	8093      	strh	r3, [r2, #4]
	SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 8001cec:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4a28      	ldr	r2, [pc, #160]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cf4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	8093      	strh	r3, [r2, #4]
	SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 8001cfc:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001cfe:	8b9b      	ldrh	r3, [r3, #28]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4a24      	ldr	r2, [pc, #144]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	8393      	strh	r3, [r2, #28]
	SPI2->CRCPR = 7; // Set CRC polynomial order
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d0e:	2207      	movs	r2, #7
 8001d10:	821a      	strh	r2, [r3, #16]
	SPI2->CR2 &= ~0x1000;
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d14:	889b      	ldrh	r3, [r3, #4]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	8093      	strh	r3, [r2, #4]
	SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d24:	889b      	ldrh	r3, [r3, #4]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4a1a      	ldr	r2, [pc, #104]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	8093      	strh	r3, [r2, #4]
	SPI2->CR1 |= 0x0040; // Enable SPI2
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4a16      	ldr	r2, [pc, #88]	@ (8001d94 <initMasterSPI+0x1f0>)
 8001d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	8013      	strh	r3, [r2, #0]

	//	lcd_reset();

	// CSM = PB4/D5 ;; CSAG = PB5/D4
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);	// Port B
 8001d42:	2101      	movs	r1, #1
 8001d44:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001d48:	f7ff fa5c 	bl	8001204 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructAll;
	GPIO_StructInit(&GPIO_InitStructAll);
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f812 	bl	8000d78 <GPIO_StructInit>
	GPIO_InitStructAll.GPIO_Mode = GPIO_Mode_OUT;
 8001d54:	2301      	movs	r3, #1
 8001d56:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructAll.GPIO_OType = GPIO_OType_PP;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructAll.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8001d5c:	2330      	movs	r3, #48	@ 0x30
 8001d5e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructAll.GPIO_Speed = GPIO_Speed_10MHz;
 8001d60:	2301      	movs	r3, #1
 8001d62:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructAll);
 8001d64:	463b      	mov	r3, r7
 8001d66:	4619      	mov	r1, r3
 8001d68:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001d6a:	f7fe ff6f 	bl	8000c4c <GPIO_Init>

	// Bit_SET = high / disabled
	// Bit_RESET = low / enabled
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	2120      	movs	r1, #32
 8001d72:	4807      	ldr	r0, [pc, #28]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001d74:	f7ff f81a 	bl	8000dac <GPIO_WriteBit>
	GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <initMasterSPI+0x1ec>)
 8001d7e:	f7ff f815 	bl	8000dac <GPIO_WriteBit>


}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	40003800 	.word	0x40003800

08001d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
	return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_kill>:

int _kill(int pid, int sig)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001db2:	f001 f91f 	bl	8002ff4 <__errno>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2216      	movs	r2, #22
 8001dba:	601a      	str	r2, [r3, #0]
	return -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_exit>:

void _exit (int status)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ffe7 	bl	8001da8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <_exit+0x12>

08001dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e00a      	b.n	8001e06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001df0:	f3af 8000 	nop.w
 8001df4:	4601      	mov	r1, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf0      	blt.n	8001df0 <_read+0x12>
	}

return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e40:	605a      	str	r2, [r3, #4]
	return 0;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_isatty>:

int _isatty(int file)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	return 1;
 8001e58:	2301      	movs	r3, #1
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
	return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <SystemInit+0x84>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <SystemInit+0x84>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e94:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <SystemInit+0x88>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1b      	ldr	r2, [pc, #108]	@ (8001f08 <SystemInit+0x88>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <SystemInit+0x88>)
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4918      	ldr	r1, [pc, #96]	@ (8001f08 <SystemInit+0x88>)
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <SystemInit+0x8c>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001eac:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <SystemInit+0x88>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <SystemInit+0x88>)
 8001eb2:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <SystemInit+0x88>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a11      	ldr	r2, [pc, #68]	@ (8001f08 <SystemInit+0x88>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <SystemInit+0x88>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <SystemInit+0x88>)
 8001ece:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001ed2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <SystemInit+0x88>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <SystemInit+0x88>)
 8001eda:	f023 030f 	bic.w	r3, r3, #15
 8001ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <SystemInit+0x88>)
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ee4:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <SystemInit+0x88>)
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <SystemInit+0x90>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	630b      	str	r3, [r1, #48]	@ 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <SystemInit+0x88>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001ef2:	f000 f80f 	bl	8001f14 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ef6:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <SystemInit+0x84>)
 8001ef8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001efc:	609a      	str	r2, [r3, #8]
#endif  
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	f87fc00c 	.word	0xf87fc00c
 8001f10:	ff00fccc 	.word	0xff00fccc

08001f14 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <SetSysClock+0x8c>)
 8001f1a:	2212      	movs	r2, #18
 8001f1c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <SetSysClock+0x90>)
 8001f20:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <SetSysClock+0x90>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001f26:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <SetSysClock+0x90>)
 8001f28:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa4 <SetSysClock+0x90>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <SetSysClock+0x90>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <SetSysClock+0x90>)
 8001f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f38:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <SetSysClock+0x90>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <SetSysClock+0x90>)
 8001f40:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001f44:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <SetSysClock+0x90>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a16      	ldr	r2, [pc, #88]	@ (8001fa4 <SetSysClock+0x90>)
 8001f4c:	f443 1360 	orr.w	r3, r3, #3670016	@ 0x380000
 8001f50:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <SetSysClock+0x90>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a13      	ldr	r2, [pc, #76]	@ (8001fa4 <SetSysClock+0x90>)
 8001f58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f5e:	bf00      	nop
 8001f60:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <SetSysClock+0x90>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f9      	beq.n	8001f60 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <SetSysClock+0x90>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <SetSysClock+0x90>)
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <SetSysClock+0x90>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <SetSysClock+0x90>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001f84:	bf00      	nop
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <SetSysClock+0x90>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d1f9      	bne.n	8001f86 <SetSysClock+0x72>
  {
  }
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <TIM2_IRQHandler>:
	NVIC_EnableIRQ(TIM2_IRQn);					// enable interrupt

	TIM2_IRQHandler();
}

void TIM2_IRQHandler(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

	// ... Do whatever you want here, but make sure it doesn’t take too much time
	timeData.hundredths++;
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fae:	78db      	ldrb	r3, [r3, #3]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b25      	ldr	r3, [pc, #148]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fb8:	70da      	strb	r2, [r3, #3]

	if (timeData.hundredths == 100) {
 8001fba:	4b24      	ldr	r3, [pc, #144]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fbc:	78db      	ldrb	r3, [r3, #3]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b64      	cmp	r3, #100	@ 0x64
 8001fc2:	d10a      	bne.n	8001fda <TIM2_IRQHandler+0x32>
		timeData.hundredths = 0;		// reset hundredths counter
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	70da      	strb	r2, [r3, #3]
		timeData.seconds++;				// increment seconds counter
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fcc:	789b      	ldrb	r3, [r3, #2]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fd6:	709a      	strb	r2, [r3, #2]
 8001fd8:	e030      	b.n	800203c <TIM2_IRQHandler+0x94>
	} else if (timeData.seconds == 60) {
 8001fda:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b3c      	cmp	r3, #60	@ 0x3c
 8001fe2:	d10a      	bne.n	8001ffa <TIM2_IRQHandler+0x52>
		timeData.seconds = 0;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	709a      	strb	r2, [r3, #2]
		timeData.minutes++;
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b15      	ldr	r3, [pc, #84]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001ff6:	705a      	strb	r2, [r3, #1]
 8001ff8:	e020      	b.n	800203c <TIM2_IRQHandler+0x94>
	} else if (timeData.minutes == 60) {
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b3c      	cmp	r3, #60	@ 0x3c
 8002002:	d10a      	bne.n	800201a <TIM2_IRQHandler+0x72>
		timeData.minutes = 0;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	705a      	strb	r2, [r3, #1]
		timeData.hours++;
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <TIM2_IRQHandler+0xa4>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e010      	b.n	800203c <TIM2_IRQHandler+0x94>
	} else if (timeData.hours == 24) {
 800201a:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <TIM2_IRQHandler+0xa4>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b18      	cmp	r3, #24
 8002022:	d10b      	bne.n	800203c <TIM2_IRQHandler+0x94>
		// Reset all
		timeData.hundredths = 0;
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	70da      	strb	r2, [r3, #3]
		timeData.seconds = 0;
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <TIM2_IRQHandler+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	709a      	strb	r2, [r3, #2]
		timeData.minutes = 0;
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
		timeData.hours = 0;
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <TIM2_IRQHandler+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
	}

	// Clear interrupt bit
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 800203c:	2101      	movs	r1, #1
 800203e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002042:	f7ff f945 	bl	80012d0 <TIM_ClearITPendingBit>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002e8 	.word	0x200002e8

08002050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002050:	480d      	ldr	r0, [pc, #52]	@ (8002088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480d      	ldr	r0, [pc, #52]	@ (800208c <LoopForever+0x6>)
  ldr r1, =_edata
 8002056:	490e      	ldr	r1, [pc, #56]	@ (8002090 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002058:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <LoopForever+0xe>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	@ (8002098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800206c:	4c0b      	ldr	r4, [pc, #44]	@ (800209c <LoopForever+0x16>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800207a:	f7ff ff01 	bl	8001e80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800207e:	f000 ffbf 	bl	8003000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002082:	f7ff fd7f 	bl	8001b84 <main>

08002086 <LoopForever>:

LoopForever:
    b LoopForever
 8002086:	e7fe      	b.n	8002086 <LoopForever>
  ldr   r0, =_estack
 8002088:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002094:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 8002098:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800209c:	2000043c 	.word	0x2000043c

080020a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC1_2_IRQHandler>

080020a2 <__cvt>:
 80020a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020a6:	ec57 6b10 	vmov	r6, r7, d0
 80020aa:	2f00      	cmp	r7, #0
 80020ac:	460c      	mov	r4, r1
 80020ae:	4619      	mov	r1, r3
 80020b0:	463b      	mov	r3, r7
 80020b2:	bfbb      	ittet	lt
 80020b4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80020b8:	461f      	movlt	r7, r3
 80020ba:	2300      	movge	r3, #0
 80020bc:	232d      	movlt	r3, #45	@ 0x2d
 80020be:	700b      	strb	r3, [r1, #0]
 80020c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80020c2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80020c6:	4691      	mov	r9, r2
 80020c8:	f023 0820 	bic.w	r8, r3, #32
 80020cc:	bfbc      	itt	lt
 80020ce:	4632      	movlt	r2, r6
 80020d0:	4616      	movlt	r6, r2
 80020d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80020d6:	d005      	beq.n	80020e4 <__cvt+0x42>
 80020d8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80020dc:	d100      	bne.n	80020e0 <__cvt+0x3e>
 80020de:	3401      	adds	r4, #1
 80020e0:	2102      	movs	r1, #2
 80020e2:	e000      	b.n	80020e6 <__cvt+0x44>
 80020e4:	2103      	movs	r1, #3
 80020e6:	ab03      	add	r3, sp, #12
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	ab02      	add	r3, sp, #8
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	ec47 6b10 	vmov	d0, r6, r7
 80020f2:	4653      	mov	r3, sl
 80020f4:	4622      	mov	r2, r4
 80020f6:	f001 f843 	bl	8003180 <_dtoa_r>
 80020fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80020fe:	4605      	mov	r5, r0
 8002100:	d119      	bne.n	8002136 <__cvt+0x94>
 8002102:	f019 0f01 	tst.w	r9, #1
 8002106:	d00e      	beq.n	8002126 <__cvt+0x84>
 8002108:	eb00 0904 	add.w	r9, r0, r4
 800210c:	2200      	movs	r2, #0
 800210e:	2300      	movs	r3, #0
 8002110:	4630      	mov	r0, r6
 8002112:	4639      	mov	r1, r7
 8002114:	f7fe fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8002118:	b108      	cbz	r0, 800211e <__cvt+0x7c>
 800211a:	f8cd 900c 	str.w	r9, [sp, #12]
 800211e:	2230      	movs	r2, #48	@ 0x30
 8002120:	9b03      	ldr	r3, [sp, #12]
 8002122:	454b      	cmp	r3, r9
 8002124:	d31e      	bcc.n	8002164 <__cvt+0xc2>
 8002126:	9b03      	ldr	r3, [sp, #12]
 8002128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800212a:	1b5b      	subs	r3, r3, r5
 800212c:	4628      	mov	r0, r5
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	b004      	add	sp, #16
 8002132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002136:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800213a:	eb00 0904 	add.w	r9, r0, r4
 800213e:	d1e5      	bne.n	800210c <__cvt+0x6a>
 8002140:	7803      	ldrb	r3, [r0, #0]
 8002142:	2b30      	cmp	r3, #48	@ 0x30
 8002144:	d10a      	bne.n	800215c <__cvt+0xba>
 8002146:	2200      	movs	r2, #0
 8002148:	2300      	movs	r3, #0
 800214a:	4630      	mov	r0, r6
 800214c:	4639      	mov	r1, r7
 800214e:	f7fe fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8002152:	b918      	cbnz	r0, 800215c <__cvt+0xba>
 8002154:	f1c4 0401 	rsb	r4, r4, #1
 8002158:	f8ca 4000 	str.w	r4, [sl]
 800215c:	f8da 3000 	ldr.w	r3, [sl]
 8002160:	4499      	add	r9, r3
 8002162:	e7d3      	b.n	800210c <__cvt+0x6a>
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	9103      	str	r1, [sp, #12]
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e7d9      	b.n	8002120 <__cvt+0x7e>

0800216c <__exponent>:
 800216c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800216e:	2900      	cmp	r1, #0
 8002170:	bfba      	itte	lt
 8002172:	4249      	neglt	r1, r1
 8002174:	232d      	movlt	r3, #45	@ 0x2d
 8002176:	232b      	movge	r3, #43	@ 0x2b
 8002178:	2909      	cmp	r1, #9
 800217a:	7002      	strb	r2, [r0, #0]
 800217c:	7043      	strb	r3, [r0, #1]
 800217e:	dd29      	ble.n	80021d4 <__exponent+0x68>
 8002180:	f10d 0307 	add.w	r3, sp, #7
 8002184:	461d      	mov	r5, r3
 8002186:	270a      	movs	r7, #10
 8002188:	461a      	mov	r2, r3
 800218a:	fbb1 f6f7 	udiv	r6, r1, r7
 800218e:	fb07 1416 	mls	r4, r7, r6, r1
 8002192:	3430      	adds	r4, #48	@ 0x30
 8002194:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002198:	460c      	mov	r4, r1
 800219a:	2c63      	cmp	r4, #99	@ 0x63
 800219c:	f103 33ff 	add.w	r3, r3, #4294967295
 80021a0:	4631      	mov	r1, r6
 80021a2:	dcf1      	bgt.n	8002188 <__exponent+0x1c>
 80021a4:	3130      	adds	r1, #48	@ 0x30
 80021a6:	1e94      	subs	r4, r2, #2
 80021a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80021ac:	1c41      	adds	r1, r0, #1
 80021ae:	4623      	mov	r3, r4
 80021b0:	42ab      	cmp	r3, r5
 80021b2:	d30a      	bcc.n	80021ca <__exponent+0x5e>
 80021b4:	f10d 0309 	add.w	r3, sp, #9
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	42ac      	cmp	r4, r5
 80021bc:	bf88      	it	hi
 80021be:	2300      	movhi	r3, #0
 80021c0:	3302      	adds	r3, #2
 80021c2:	4403      	add	r3, r0
 80021c4:	1a18      	subs	r0, r3, r0
 80021c6:	b003      	add	sp, #12
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80021ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80021d2:	e7ed      	b.n	80021b0 <__exponent+0x44>
 80021d4:	2330      	movs	r3, #48	@ 0x30
 80021d6:	3130      	adds	r1, #48	@ 0x30
 80021d8:	7083      	strb	r3, [r0, #2]
 80021da:	70c1      	strb	r1, [r0, #3]
 80021dc:	1d03      	adds	r3, r0, #4
 80021de:	e7f1      	b.n	80021c4 <__exponent+0x58>

080021e0 <_printf_float>:
 80021e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e4:	b08d      	sub	sp, #52	@ 0x34
 80021e6:	460c      	mov	r4, r1
 80021e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80021ec:	4616      	mov	r6, r2
 80021ee:	461f      	mov	r7, r3
 80021f0:	4605      	mov	r5, r0
 80021f2:	f000 fec7 	bl	8002f84 <_localeconv_r>
 80021f6:	6803      	ldr	r3, [r0, #0]
 80021f8:	9304      	str	r3, [sp, #16]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f838 	bl	8000270 <strlen>
 8002200:	2300      	movs	r3, #0
 8002202:	930a      	str	r3, [sp, #40]	@ 0x28
 8002204:	f8d8 3000 	ldr.w	r3, [r8]
 8002208:	9005      	str	r0, [sp, #20]
 800220a:	3307      	adds	r3, #7
 800220c:	f023 0307 	bic.w	r3, r3, #7
 8002210:	f103 0208 	add.w	r2, r3, #8
 8002214:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002218:	f8d4 b000 	ldr.w	fp, [r4]
 800221c:	f8c8 2000 	str.w	r2, [r8]
 8002220:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002224:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002228:	9307      	str	r3, [sp, #28]
 800222a:	f8cd 8018 	str.w	r8, [sp, #24]
 800222e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002236:	4b9c      	ldr	r3, [pc, #624]	@ (80024a8 <_printf_float+0x2c8>)
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	f7fe fc76 	bl	8000b2c <__aeabi_dcmpun>
 8002240:	bb70      	cbnz	r0, 80022a0 <_printf_float+0xc0>
 8002242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002246:	4b98      	ldr	r3, [pc, #608]	@ (80024a8 <_printf_float+0x2c8>)
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	f7fe fc50 	bl	8000af0 <__aeabi_dcmple>
 8002250:	bb30      	cbnz	r0, 80022a0 <_printf_float+0xc0>
 8002252:	2200      	movs	r2, #0
 8002254:	2300      	movs	r3, #0
 8002256:	4640      	mov	r0, r8
 8002258:	4649      	mov	r1, r9
 800225a:	f7fe fc3f 	bl	8000adc <__aeabi_dcmplt>
 800225e:	b110      	cbz	r0, 8002266 <_printf_float+0x86>
 8002260:	232d      	movs	r3, #45	@ 0x2d
 8002262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002266:	4a91      	ldr	r2, [pc, #580]	@ (80024ac <_printf_float+0x2cc>)
 8002268:	4b91      	ldr	r3, [pc, #580]	@ (80024b0 <_printf_float+0x2d0>)
 800226a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800226e:	bf8c      	ite	hi
 8002270:	4690      	movhi	r8, r2
 8002272:	4698      	movls	r8, r3
 8002274:	2303      	movs	r3, #3
 8002276:	6123      	str	r3, [r4, #16]
 8002278:	f02b 0304 	bic.w	r3, fp, #4
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	f04f 0900 	mov.w	r9, #0
 8002282:	9700      	str	r7, [sp, #0]
 8002284:	4633      	mov	r3, r6
 8002286:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002288:	4621      	mov	r1, r4
 800228a:	4628      	mov	r0, r5
 800228c:	f000 f9d2 	bl	8002634 <_printf_common>
 8002290:	3001      	adds	r0, #1
 8002292:	f040 808d 	bne.w	80023b0 <_printf_float+0x1d0>
 8002296:	f04f 30ff 	mov.w	r0, #4294967295
 800229a:	b00d      	add	sp, #52	@ 0x34
 800229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a0:	4642      	mov	r2, r8
 80022a2:	464b      	mov	r3, r9
 80022a4:	4640      	mov	r0, r8
 80022a6:	4649      	mov	r1, r9
 80022a8:	f7fe fc40 	bl	8000b2c <__aeabi_dcmpun>
 80022ac:	b140      	cbz	r0, 80022c0 <_printf_float+0xe0>
 80022ae:	464b      	mov	r3, r9
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bfbc      	itt	lt
 80022b4:	232d      	movlt	r3, #45	@ 0x2d
 80022b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80022ba:	4a7e      	ldr	r2, [pc, #504]	@ (80024b4 <_printf_float+0x2d4>)
 80022bc:	4b7e      	ldr	r3, [pc, #504]	@ (80024b8 <_printf_float+0x2d8>)
 80022be:	e7d4      	b.n	800226a <_printf_float+0x8a>
 80022c0:	6863      	ldr	r3, [r4, #4]
 80022c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80022c6:	9206      	str	r2, [sp, #24]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	d13b      	bne.n	8002344 <_printf_float+0x164>
 80022cc:	2306      	movs	r3, #6
 80022ce:	6063      	str	r3, [r4, #4]
 80022d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80022d4:	2300      	movs	r3, #0
 80022d6:	6022      	str	r2, [r4, #0]
 80022d8:	9303      	str	r3, [sp, #12]
 80022da:	ab0a      	add	r3, sp, #40	@ 0x28
 80022dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80022e0:	ab09      	add	r3, sp, #36	@ 0x24
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	6861      	ldr	r1, [r4, #4]
 80022e6:	ec49 8b10 	vmov	d0, r8, r9
 80022ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80022ee:	4628      	mov	r0, r5
 80022f0:	f7ff fed7 	bl	80020a2 <__cvt>
 80022f4:	9b06      	ldr	r3, [sp, #24]
 80022f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80022f8:	2b47      	cmp	r3, #71	@ 0x47
 80022fa:	4680      	mov	r8, r0
 80022fc:	d129      	bne.n	8002352 <_printf_float+0x172>
 80022fe:	1cc8      	adds	r0, r1, #3
 8002300:	db02      	blt.n	8002308 <_printf_float+0x128>
 8002302:	6863      	ldr	r3, [r4, #4]
 8002304:	4299      	cmp	r1, r3
 8002306:	dd41      	ble.n	800238c <_printf_float+0x1ac>
 8002308:	f1aa 0a02 	sub.w	sl, sl, #2
 800230c:	fa5f fa8a 	uxtb.w	sl, sl
 8002310:	3901      	subs	r1, #1
 8002312:	4652      	mov	r2, sl
 8002314:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002318:	9109      	str	r1, [sp, #36]	@ 0x24
 800231a:	f7ff ff27 	bl	800216c <__exponent>
 800231e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002320:	1813      	adds	r3, r2, r0
 8002322:	2a01      	cmp	r2, #1
 8002324:	4681      	mov	r9, r0
 8002326:	6123      	str	r3, [r4, #16]
 8002328:	dc02      	bgt.n	8002330 <_printf_float+0x150>
 800232a:	6822      	ldr	r2, [r4, #0]
 800232c:	07d2      	lsls	r2, r2, #31
 800232e:	d501      	bpl.n	8002334 <_printf_float+0x154>
 8002330:	3301      	adds	r3, #1
 8002332:	6123      	str	r3, [r4, #16]
 8002334:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0a2      	beq.n	8002282 <_printf_float+0xa2>
 800233c:	232d      	movs	r3, #45	@ 0x2d
 800233e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002342:	e79e      	b.n	8002282 <_printf_float+0xa2>
 8002344:	9a06      	ldr	r2, [sp, #24]
 8002346:	2a47      	cmp	r2, #71	@ 0x47
 8002348:	d1c2      	bne.n	80022d0 <_printf_float+0xf0>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1c0      	bne.n	80022d0 <_printf_float+0xf0>
 800234e:	2301      	movs	r3, #1
 8002350:	e7bd      	b.n	80022ce <_printf_float+0xee>
 8002352:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002356:	d9db      	bls.n	8002310 <_printf_float+0x130>
 8002358:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800235c:	d118      	bne.n	8002390 <_printf_float+0x1b0>
 800235e:	2900      	cmp	r1, #0
 8002360:	6863      	ldr	r3, [r4, #4]
 8002362:	dd0b      	ble.n	800237c <_printf_float+0x19c>
 8002364:	6121      	str	r1, [r4, #16]
 8002366:	b913      	cbnz	r3, 800236e <_printf_float+0x18e>
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	07d0      	lsls	r0, r2, #31
 800236c:	d502      	bpl.n	8002374 <_printf_float+0x194>
 800236e:	3301      	adds	r3, #1
 8002370:	440b      	add	r3, r1
 8002372:	6123      	str	r3, [r4, #16]
 8002374:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002376:	f04f 0900 	mov.w	r9, #0
 800237a:	e7db      	b.n	8002334 <_printf_float+0x154>
 800237c:	b913      	cbnz	r3, 8002384 <_printf_float+0x1a4>
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	07d2      	lsls	r2, r2, #31
 8002382:	d501      	bpl.n	8002388 <_printf_float+0x1a8>
 8002384:	3302      	adds	r3, #2
 8002386:	e7f4      	b.n	8002372 <_printf_float+0x192>
 8002388:	2301      	movs	r3, #1
 800238a:	e7f2      	b.n	8002372 <_printf_float+0x192>
 800238c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002392:	4299      	cmp	r1, r3
 8002394:	db05      	blt.n	80023a2 <_printf_float+0x1c2>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	6121      	str	r1, [r4, #16]
 800239a:	07d8      	lsls	r0, r3, #31
 800239c:	d5ea      	bpl.n	8002374 <_printf_float+0x194>
 800239e:	1c4b      	adds	r3, r1, #1
 80023a0:	e7e7      	b.n	8002372 <_printf_float+0x192>
 80023a2:	2900      	cmp	r1, #0
 80023a4:	bfd4      	ite	le
 80023a6:	f1c1 0202 	rsble	r2, r1, #2
 80023aa:	2201      	movgt	r2, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	e7e0      	b.n	8002372 <_printf_float+0x192>
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	055a      	lsls	r2, r3, #21
 80023b4:	d407      	bmi.n	80023c6 <_printf_float+0x1e6>
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	4642      	mov	r2, r8
 80023ba:	4631      	mov	r1, r6
 80023bc:	4628      	mov	r0, r5
 80023be:	47b8      	blx	r7
 80023c0:	3001      	adds	r0, #1
 80023c2:	d12b      	bne.n	800241c <_printf_float+0x23c>
 80023c4:	e767      	b.n	8002296 <_printf_float+0xb6>
 80023c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80023ca:	f240 80dd 	bls.w	8002588 <_printf_float+0x3a8>
 80023ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80023d2:	2200      	movs	r2, #0
 80023d4:	2300      	movs	r3, #0
 80023d6:	f7fe fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80023da:	2800      	cmp	r0, #0
 80023dc:	d033      	beq.n	8002446 <_printf_float+0x266>
 80023de:	4a37      	ldr	r2, [pc, #220]	@ (80024bc <_printf_float+0x2dc>)
 80023e0:	2301      	movs	r3, #1
 80023e2:	4631      	mov	r1, r6
 80023e4:	4628      	mov	r0, r5
 80023e6:	47b8      	blx	r7
 80023e8:	3001      	adds	r0, #1
 80023ea:	f43f af54 	beq.w	8002296 <_printf_float+0xb6>
 80023ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80023f2:	4543      	cmp	r3, r8
 80023f4:	db02      	blt.n	80023fc <_printf_float+0x21c>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	07d8      	lsls	r0, r3, #31
 80023fa:	d50f      	bpl.n	800241c <_printf_float+0x23c>
 80023fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002400:	4631      	mov	r1, r6
 8002402:	4628      	mov	r0, r5
 8002404:	47b8      	blx	r7
 8002406:	3001      	adds	r0, #1
 8002408:	f43f af45 	beq.w	8002296 <_printf_float+0xb6>
 800240c:	f04f 0900 	mov.w	r9, #0
 8002410:	f108 38ff 	add.w	r8, r8, #4294967295
 8002414:	f104 0a1a 	add.w	sl, r4, #26
 8002418:	45c8      	cmp	r8, r9
 800241a:	dc09      	bgt.n	8002430 <_printf_float+0x250>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	079b      	lsls	r3, r3, #30
 8002420:	f100 8103 	bmi.w	800262a <_printf_float+0x44a>
 8002424:	68e0      	ldr	r0, [r4, #12]
 8002426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002428:	4298      	cmp	r0, r3
 800242a:	bfb8      	it	lt
 800242c:	4618      	movlt	r0, r3
 800242e:	e734      	b.n	800229a <_printf_float+0xba>
 8002430:	2301      	movs	r3, #1
 8002432:	4652      	mov	r2, sl
 8002434:	4631      	mov	r1, r6
 8002436:	4628      	mov	r0, r5
 8002438:	47b8      	blx	r7
 800243a:	3001      	adds	r0, #1
 800243c:	f43f af2b 	beq.w	8002296 <_printf_float+0xb6>
 8002440:	f109 0901 	add.w	r9, r9, #1
 8002444:	e7e8      	b.n	8002418 <_printf_float+0x238>
 8002446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	dc39      	bgt.n	80024c0 <_printf_float+0x2e0>
 800244c:	4a1b      	ldr	r2, [pc, #108]	@ (80024bc <_printf_float+0x2dc>)
 800244e:	2301      	movs	r3, #1
 8002450:	4631      	mov	r1, r6
 8002452:	4628      	mov	r0, r5
 8002454:	47b8      	blx	r7
 8002456:	3001      	adds	r0, #1
 8002458:	f43f af1d 	beq.w	8002296 <_printf_float+0xb6>
 800245c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002460:	ea59 0303 	orrs.w	r3, r9, r3
 8002464:	d102      	bne.n	800246c <_printf_float+0x28c>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	07d9      	lsls	r1, r3, #31
 800246a:	d5d7      	bpl.n	800241c <_printf_float+0x23c>
 800246c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002470:	4631      	mov	r1, r6
 8002472:	4628      	mov	r0, r5
 8002474:	47b8      	blx	r7
 8002476:	3001      	adds	r0, #1
 8002478:	f43f af0d 	beq.w	8002296 <_printf_float+0xb6>
 800247c:	f04f 0a00 	mov.w	sl, #0
 8002480:	f104 0b1a 	add.w	fp, r4, #26
 8002484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002486:	425b      	negs	r3, r3
 8002488:	4553      	cmp	r3, sl
 800248a:	dc01      	bgt.n	8002490 <_printf_float+0x2b0>
 800248c:	464b      	mov	r3, r9
 800248e:	e793      	b.n	80023b8 <_printf_float+0x1d8>
 8002490:	2301      	movs	r3, #1
 8002492:	465a      	mov	r2, fp
 8002494:	4631      	mov	r1, r6
 8002496:	4628      	mov	r0, r5
 8002498:	47b8      	blx	r7
 800249a:	3001      	adds	r0, #1
 800249c:	f43f aefb 	beq.w	8002296 <_printf_float+0xb6>
 80024a0:	f10a 0a01 	add.w	sl, sl, #1
 80024a4:	e7ee      	b.n	8002484 <_printf_float+0x2a4>
 80024a6:	bf00      	nop
 80024a8:	7fefffff 	.word	0x7fefffff
 80024ac:	08004c16 	.word	0x08004c16
 80024b0:	08004c12 	.word	0x08004c12
 80024b4:	08004c1e 	.word	0x08004c1e
 80024b8:	08004c1a 	.word	0x08004c1a
 80024bc:	08004c22 	.word	0x08004c22
 80024c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80024c6:	4553      	cmp	r3, sl
 80024c8:	bfa8      	it	ge
 80024ca:	4653      	movge	r3, sl
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	4699      	mov	r9, r3
 80024d0:	dc36      	bgt.n	8002540 <_printf_float+0x360>
 80024d2:	f04f 0b00 	mov.w	fp, #0
 80024d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024da:	f104 021a 	add.w	r2, r4, #26
 80024de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024e0:	9306      	str	r3, [sp, #24]
 80024e2:	eba3 0309 	sub.w	r3, r3, r9
 80024e6:	455b      	cmp	r3, fp
 80024e8:	dc31      	bgt.n	800254e <_printf_float+0x36e>
 80024ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024ec:	459a      	cmp	sl, r3
 80024ee:	dc3a      	bgt.n	8002566 <_printf_float+0x386>
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	07da      	lsls	r2, r3, #31
 80024f4:	d437      	bmi.n	8002566 <_printf_float+0x386>
 80024f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024f8:	ebaa 0903 	sub.w	r9, sl, r3
 80024fc:	9b06      	ldr	r3, [sp, #24]
 80024fe:	ebaa 0303 	sub.w	r3, sl, r3
 8002502:	4599      	cmp	r9, r3
 8002504:	bfa8      	it	ge
 8002506:	4699      	movge	r9, r3
 8002508:	f1b9 0f00 	cmp.w	r9, #0
 800250c:	dc33      	bgt.n	8002576 <_printf_float+0x396>
 800250e:	f04f 0800 	mov.w	r8, #0
 8002512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002516:	f104 0b1a 	add.w	fp, r4, #26
 800251a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800251c:	ebaa 0303 	sub.w	r3, sl, r3
 8002520:	eba3 0309 	sub.w	r3, r3, r9
 8002524:	4543      	cmp	r3, r8
 8002526:	f77f af79 	ble.w	800241c <_printf_float+0x23c>
 800252a:	2301      	movs	r3, #1
 800252c:	465a      	mov	r2, fp
 800252e:	4631      	mov	r1, r6
 8002530:	4628      	mov	r0, r5
 8002532:	47b8      	blx	r7
 8002534:	3001      	adds	r0, #1
 8002536:	f43f aeae 	beq.w	8002296 <_printf_float+0xb6>
 800253a:	f108 0801 	add.w	r8, r8, #1
 800253e:	e7ec      	b.n	800251a <_printf_float+0x33a>
 8002540:	4642      	mov	r2, r8
 8002542:	4631      	mov	r1, r6
 8002544:	4628      	mov	r0, r5
 8002546:	47b8      	blx	r7
 8002548:	3001      	adds	r0, #1
 800254a:	d1c2      	bne.n	80024d2 <_printf_float+0x2f2>
 800254c:	e6a3      	b.n	8002296 <_printf_float+0xb6>
 800254e:	2301      	movs	r3, #1
 8002550:	4631      	mov	r1, r6
 8002552:	4628      	mov	r0, r5
 8002554:	9206      	str	r2, [sp, #24]
 8002556:	47b8      	blx	r7
 8002558:	3001      	adds	r0, #1
 800255a:	f43f ae9c 	beq.w	8002296 <_printf_float+0xb6>
 800255e:	9a06      	ldr	r2, [sp, #24]
 8002560:	f10b 0b01 	add.w	fp, fp, #1
 8002564:	e7bb      	b.n	80024de <_printf_float+0x2fe>
 8002566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800256a:	4631      	mov	r1, r6
 800256c:	4628      	mov	r0, r5
 800256e:	47b8      	blx	r7
 8002570:	3001      	adds	r0, #1
 8002572:	d1c0      	bne.n	80024f6 <_printf_float+0x316>
 8002574:	e68f      	b.n	8002296 <_printf_float+0xb6>
 8002576:	9a06      	ldr	r2, [sp, #24]
 8002578:	464b      	mov	r3, r9
 800257a:	4442      	add	r2, r8
 800257c:	4631      	mov	r1, r6
 800257e:	4628      	mov	r0, r5
 8002580:	47b8      	blx	r7
 8002582:	3001      	adds	r0, #1
 8002584:	d1c3      	bne.n	800250e <_printf_float+0x32e>
 8002586:	e686      	b.n	8002296 <_printf_float+0xb6>
 8002588:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800258c:	f1ba 0f01 	cmp.w	sl, #1
 8002590:	dc01      	bgt.n	8002596 <_printf_float+0x3b6>
 8002592:	07db      	lsls	r3, r3, #31
 8002594:	d536      	bpl.n	8002604 <_printf_float+0x424>
 8002596:	2301      	movs	r3, #1
 8002598:	4642      	mov	r2, r8
 800259a:	4631      	mov	r1, r6
 800259c:	4628      	mov	r0, r5
 800259e:	47b8      	blx	r7
 80025a0:	3001      	adds	r0, #1
 80025a2:	f43f ae78 	beq.w	8002296 <_printf_float+0xb6>
 80025a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025aa:	4631      	mov	r1, r6
 80025ac:	4628      	mov	r0, r5
 80025ae:	47b8      	blx	r7
 80025b0:	3001      	adds	r0, #1
 80025b2:	f43f ae70 	beq.w	8002296 <_printf_float+0xb6>
 80025b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80025ba:	2200      	movs	r2, #0
 80025bc:	2300      	movs	r3, #0
 80025be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80025c2:	f7fe fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80025c6:	b9c0      	cbnz	r0, 80025fa <_printf_float+0x41a>
 80025c8:	4653      	mov	r3, sl
 80025ca:	f108 0201 	add.w	r2, r8, #1
 80025ce:	4631      	mov	r1, r6
 80025d0:	4628      	mov	r0, r5
 80025d2:	47b8      	blx	r7
 80025d4:	3001      	adds	r0, #1
 80025d6:	d10c      	bne.n	80025f2 <_printf_float+0x412>
 80025d8:	e65d      	b.n	8002296 <_printf_float+0xb6>
 80025da:	2301      	movs	r3, #1
 80025dc:	465a      	mov	r2, fp
 80025de:	4631      	mov	r1, r6
 80025e0:	4628      	mov	r0, r5
 80025e2:	47b8      	blx	r7
 80025e4:	3001      	adds	r0, #1
 80025e6:	f43f ae56 	beq.w	8002296 <_printf_float+0xb6>
 80025ea:	f108 0801 	add.w	r8, r8, #1
 80025ee:	45d0      	cmp	r8, sl
 80025f0:	dbf3      	blt.n	80025da <_printf_float+0x3fa>
 80025f2:	464b      	mov	r3, r9
 80025f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80025f8:	e6df      	b.n	80023ba <_printf_float+0x1da>
 80025fa:	f04f 0800 	mov.w	r8, #0
 80025fe:	f104 0b1a 	add.w	fp, r4, #26
 8002602:	e7f4      	b.n	80025ee <_printf_float+0x40e>
 8002604:	2301      	movs	r3, #1
 8002606:	4642      	mov	r2, r8
 8002608:	e7e1      	b.n	80025ce <_printf_float+0x3ee>
 800260a:	2301      	movs	r3, #1
 800260c:	464a      	mov	r2, r9
 800260e:	4631      	mov	r1, r6
 8002610:	4628      	mov	r0, r5
 8002612:	47b8      	blx	r7
 8002614:	3001      	adds	r0, #1
 8002616:	f43f ae3e 	beq.w	8002296 <_printf_float+0xb6>
 800261a:	f108 0801 	add.w	r8, r8, #1
 800261e:	68e3      	ldr	r3, [r4, #12]
 8002620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002622:	1a5b      	subs	r3, r3, r1
 8002624:	4543      	cmp	r3, r8
 8002626:	dcf0      	bgt.n	800260a <_printf_float+0x42a>
 8002628:	e6fc      	b.n	8002424 <_printf_float+0x244>
 800262a:	f04f 0800 	mov.w	r8, #0
 800262e:	f104 0919 	add.w	r9, r4, #25
 8002632:	e7f4      	b.n	800261e <_printf_float+0x43e>

08002634 <_printf_common>:
 8002634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002638:	4616      	mov	r6, r2
 800263a:	4698      	mov	r8, r3
 800263c:	688a      	ldr	r2, [r1, #8]
 800263e:	690b      	ldr	r3, [r1, #16]
 8002640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002644:	4293      	cmp	r3, r2
 8002646:	bfb8      	it	lt
 8002648:	4613      	movlt	r3, r2
 800264a:	6033      	str	r3, [r6, #0]
 800264c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002650:	4607      	mov	r7, r0
 8002652:	460c      	mov	r4, r1
 8002654:	b10a      	cbz	r2, 800265a <_printf_common+0x26>
 8002656:	3301      	adds	r3, #1
 8002658:	6033      	str	r3, [r6, #0]
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	0699      	lsls	r1, r3, #26
 800265e:	bf42      	ittt	mi
 8002660:	6833      	ldrmi	r3, [r6, #0]
 8002662:	3302      	addmi	r3, #2
 8002664:	6033      	strmi	r3, [r6, #0]
 8002666:	6825      	ldr	r5, [r4, #0]
 8002668:	f015 0506 	ands.w	r5, r5, #6
 800266c:	d106      	bne.n	800267c <_printf_common+0x48>
 800266e:	f104 0a19 	add.w	sl, r4, #25
 8002672:	68e3      	ldr	r3, [r4, #12]
 8002674:	6832      	ldr	r2, [r6, #0]
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	42ab      	cmp	r3, r5
 800267a:	dc26      	bgt.n	80026ca <_printf_common+0x96>
 800267c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002680:	6822      	ldr	r2, [r4, #0]
 8002682:	3b00      	subs	r3, #0
 8002684:	bf18      	it	ne
 8002686:	2301      	movne	r3, #1
 8002688:	0692      	lsls	r2, r2, #26
 800268a:	d42b      	bmi.n	80026e4 <_printf_common+0xb0>
 800268c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002690:	4641      	mov	r1, r8
 8002692:	4638      	mov	r0, r7
 8002694:	47c8      	blx	r9
 8002696:	3001      	adds	r0, #1
 8002698:	d01e      	beq.n	80026d8 <_printf_common+0xa4>
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	6922      	ldr	r2, [r4, #16]
 800269e:	f003 0306 	and.w	r3, r3, #6
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf02      	ittt	eq
 80026a6:	68e5      	ldreq	r5, [r4, #12]
 80026a8:	6833      	ldreq	r3, [r6, #0]
 80026aa:	1aed      	subeq	r5, r5, r3
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	bf0c      	ite	eq
 80026b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026b4:	2500      	movne	r5, #0
 80026b6:	4293      	cmp	r3, r2
 80026b8:	bfc4      	itt	gt
 80026ba:	1a9b      	subgt	r3, r3, r2
 80026bc:	18ed      	addgt	r5, r5, r3
 80026be:	2600      	movs	r6, #0
 80026c0:	341a      	adds	r4, #26
 80026c2:	42b5      	cmp	r5, r6
 80026c4:	d11a      	bne.n	80026fc <_printf_common+0xc8>
 80026c6:	2000      	movs	r0, #0
 80026c8:	e008      	b.n	80026dc <_printf_common+0xa8>
 80026ca:	2301      	movs	r3, #1
 80026cc:	4652      	mov	r2, sl
 80026ce:	4641      	mov	r1, r8
 80026d0:	4638      	mov	r0, r7
 80026d2:	47c8      	blx	r9
 80026d4:	3001      	adds	r0, #1
 80026d6:	d103      	bne.n	80026e0 <_printf_common+0xac>
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e0:	3501      	adds	r5, #1
 80026e2:	e7c6      	b.n	8002672 <_printf_common+0x3e>
 80026e4:	18e1      	adds	r1, r4, r3
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	2030      	movs	r0, #48	@ 0x30
 80026ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80026ee:	4422      	add	r2, r4
 80026f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80026f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80026f8:	3302      	adds	r3, #2
 80026fa:	e7c7      	b.n	800268c <_printf_common+0x58>
 80026fc:	2301      	movs	r3, #1
 80026fe:	4622      	mov	r2, r4
 8002700:	4641      	mov	r1, r8
 8002702:	4638      	mov	r0, r7
 8002704:	47c8      	blx	r9
 8002706:	3001      	adds	r0, #1
 8002708:	d0e6      	beq.n	80026d8 <_printf_common+0xa4>
 800270a:	3601      	adds	r6, #1
 800270c:	e7d9      	b.n	80026c2 <_printf_common+0x8e>
	...

08002710 <_printf_i>:
 8002710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	7e0f      	ldrb	r7, [r1, #24]
 8002716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002718:	2f78      	cmp	r7, #120	@ 0x78
 800271a:	4691      	mov	r9, r2
 800271c:	4680      	mov	r8, r0
 800271e:	460c      	mov	r4, r1
 8002720:	469a      	mov	sl, r3
 8002722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002726:	d807      	bhi.n	8002738 <_printf_i+0x28>
 8002728:	2f62      	cmp	r7, #98	@ 0x62
 800272a:	d80a      	bhi.n	8002742 <_printf_i+0x32>
 800272c:	2f00      	cmp	r7, #0
 800272e:	f000 80d1 	beq.w	80028d4 <_printf_i+0x1c4>
 8002732:	2f58      	cmp	r7, #88	@ 0x58
 8002734:	f000 80b8 	beq.w	80028a8 <_printf_i+0x198>
 8002738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800273c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002740:	e03a      	b.n	80027b8 <_printf_i+0xa8>
 8002742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002746:	2b15      	cmp	r3, #21
 8002748:	d8f6      	bhi.n	8002738 <_printf_i+0x28>
 800274a:	a101      	add	r1, pc, #4	@ (adr r1, 8002750 <_printf_i+0x40>)
 800274c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002750:	080027a9 	.word	0x080027a9
 8002754:	080027bd 	.word	0x080027bd
 8002758:	08002739 	.word	0x08002739
 800275c:	08002739 	.word	0x08002739
 8002760:	08002739 	.word	0x08002739
 8002764:	08002739 	.word	0x08002739
 8002768:	080027bd 	.word	0x080027bd
 800276c:	08002739 	.word	0x08002739
 8002770:	08002739 	.word	0x08002739
 8002774:	08002739 	.word	0x08002739
 8002778:	08002739 	.word	0x08002739
 800277c:	080028bb 	.word	0x080028bb
 8002780:	080027e7 	.word	0x080027e7
 8002784:	08002875 	.word	0x08002875
 8002788:	08002739 	.word	0x08002739
 800278c:	08002739 	.word	0x08002739
 8002790:	080028dd 	.word	0x080028dd
 8002794:	08002739 	.word	0x08002739
 8002798:	080027e7 	.word	0x080027e7
 800279c:	08002739 	.word	0x08002739
 80027a0:	08002739 	.word	0x08002739
 80027a4:	0800287d 	.word	0x0800287d
 80027a8:	6833      	ldr	r3, [r6, #0]
 80027aa:	1d1a      	adds	r2, r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6032      	str	r2, [r6, #0]
 80027b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027b8:	2301      	movs	r3, #1
 80027ba:	e09c      	b.n	80028f6 <_printf_i+0x1e6>
 80027bc:	6833      	ldr	r3, [r6, #0]
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	1d19      	adds	r1, r3, #4
 80027c2:	6031      	str	r1, [r6, #0]
 80027c4:	0606      	lsls	r6, r0, #24
 80027c6:	d501      	bpl.n	80027cc <_printf_i+0xbc>
 80027c8:	681d      	ldr	r5, [r3, #0]
 80027ca:	e003      	b.n	80027d4 <_printf_i+0xc4>
 80027cc:	0645      	lsls	r5, r0, #25
 80027ce:	d5fb      	bpl.n	80027c8 <_printf_i+0xb8>
 80027d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	da03      	bge.n	80027e0 <_printf_i+0xd0>
 80027d8:	232d      	movs	r3, #45	@ 0x2d
 80027da:	426d      	negs	r5, r5
 80027dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027e0:	4858      	ldr	r0, [pc, #352]	@ (8002944 <_printf_i+0x234>)
 80027e2:	230a      	movs	r3, #10
 80027e4:	e011      	b.n	800280a <_printf_i+0xfa>
 80027e6:	6821      	ldr	r1, [r4, #0]
 80027e8:	6833      	ldr	r3, [r6, #0]
 80027ea:	0608      	lsls	r0, r1, #24
 80027ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80027f0:	d402      	bmi.n	80027f8 <_printf_i+0xe8>
 80027f2:	0649      	lsls	r1, r1, #25
 80027f4:	bf48      	it	mi
 80027f6:	b2ad      	uxthmi	r5, r5
 80027f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80027fa:	4852      	ldr	r0, [pc, #328]	@ (8002944 <_printf_i+0x234>)
 80027fc:	6033      	str	r3, [r6, #0]
 80027fe:	bf14      	ite	ne
 8002800:	230a      	movne	r3, #10
 8002802:	2308      	moveq	r3, #8
 8002804:	2100      	movs	r1, #0
 8002806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800280a:	6866      	ldr	r6, [r4, #4]
 800280c:	60a6      	str	r6, [r4, #8]
 800280e:	2e00      	cmp	r6, #0
 8002810:	db05      	blt.n	800281e <_printf_i+0x10e>
 8002812:	6821      	ldr	r1, [r4, #0]
 8002814:	432e      	orrs	r6, r5
 8002816:	f021 0104 	bic.w	r1, r1, #4
 800281a:	6021      	str	r1, [r4, #0]
 800281c:	d04b      	beq.n	80028b6 <_printf_i+0x1a6>
 800281e:	4616      	mov	r6, r2
 8002820:	fbb5 f1f3 	udiv	r1, r5, r3
 8002824:	fb03 5711 	mls	r7, r3, r1, r5
 8002828:	5dc7      	ldrb	r7, [r0, r7]
 800282a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800282e:	462f      	mov	r7, r5
 8002830:	42bb      	cmp	r3, r7
 8002832:	460d      	mov	r5, r1
 8002834:	d9f4      	bls.n	8002820 <_printf_i+0x110>
 8002836:	2b08      	cmp	r3, #8
 8002838:	d10b      	bne.n	8002852 <_printf_i+0x142>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	07df      	lsls	r7, r3, #31
 800283e:	d508      	bpl.n	8002852 <_printf_i+0x142>
 8002840:	6923      	ldr	r3, [r4, #16]
 8002842:	6861      	ldr	r1, [r4, #4]
 8002844:	4299      	cmp	r1, r3
 8002846:	bfde      	ittt	le
 8002848:	2330      	movle	r3, #48	@ 0x30
 800284a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800284e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002852:	1b92      	subs	r2, r2, r6
 8002854:	6122      	str	r2, [r4, #16]
 8002856:	f8cd a000 	str.w	sl, [sp]
 800285a:	464b      	mov	r3, r9
 800285c:	aa03      	add	r2, sp, #12
 800285e:	4621      	mov	r1, r4
 8002860:	4640      	mov	r0, r8
 8002862:	f7ff fee7 	bl	8002634 <_printf_common>
 8002866:	3001      	adds	r0, #1
 8002868:	d14a      	bne.n	8002900 <_printf_i+0x1f0>
 800286a:	f04f 30ff 	mov.w	r0, #4294967295
 800286e:	b004      	add	sp, #16
 8002870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	f043 0320 	orr.w	r3, r3, #32
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	4832      	ldr	r0, [pc, #200]	@ (8002948 <_printf_i+0x238>)
 800287e:	2778      	movs	r7, #120	@ 0x78
 8002880:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	6831      	ldr	r1, [r6, #0]
 8002888:	061f      	lsls	r7, r3, #24
 800288a:	f851 5b04 	ldr.w	r5, [r1], #4
 800288e:	d402      	bmi.n	8002896 <_printf_i+0x186>
 8002890:	065f      	lsls	r7, r3, #25
 8002892:	bf48      	it	mi
 8002894:	b2ad      	uxthmi	r5, r5
 8002896:	6031      	str	r1, [r6, #0]
 8002898:	07d9      	lsls	r1, r3, #31
 800289a:	bf44      	itt	mi
 800289c:	f043 0320 	orrmi.w	r3, r3, #32
 80028a0:	6023      	strmi	r3, [r4, #0]
 80028a2:	b11d      	cbz	r5, 80028ac <_printf_i+0x19c>
 80028a4:	2310      	movs	r3, #16
 80028a6:	e7ad      	b.n	8002804 <_printf_i+0xf4>
 80028a8:	4826      	ldr	r0, [pc, #152]	@ (8002944 <_printf_i+0x234>)
 80028aa:	e7e9      	b.n	8002880 <_printf_i+0x170>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	f023 0320 	bic.w	r3, r3, #32
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	e7f6      	b.n	80028a4 <_printf_i+0x194>
 80028b6:	4616      	mov	r6, r2
 80028b8:	e7bd      	b.n	8002836 <_printf_i+0x126>
 80028ba:	6833      	ldr	r3, [r6, #0]
 80028bc:	6825      	ldr	r5, [r4, #0]
 80028be:	6961      	ldr	r1, [r4, #20]
 80028c0:	1d18      	adds	r0, r3, #4
 80028c2:	6030      	str	r0, [r6, #0]
 80028c4:	062e      	lsls	r6, r5, #24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	d501      	bpl.n	80028ce <_printf_i+0x1be>
 80028ca:	6019      	str	r1, [r3, #0]
 80028cc:	e002      	b.n	80028d4 <_printf_i+0x1c4>
 80028ce:	0668      	lsls	r0, r5, #25
 80028d0:	d5fb      	bpl.n	80028ca <_printf_i+0x1ba>
 80028d2:	8019      	strh	r1, [r3, #0]
 80028d4:	2300      	movs	r3, #0
 80028d6:	6123      	str	r3, [r4, #16]
 80028d8:	4616      	mov	r6, r2
 80028da:	e7bc      	b.n	8002856 <_printf_i+0x146>
 80028dc:	6833      	ldr	r3, [r6, #0]
 80028de:	1d1a      	adds	r2, r3, #4
 80028e0:	6032      	str	r2, [r6, #0]
 80028e2:	681e      	ldr	r6, [r3, #0]
 80028e4:	6862      	ldr	r2, [r4, #4]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4630      	mov	r0, r6
 80028ea:	f7fd fc71 	bl	80001d0 <memchr>
 80028ee:	b108      	cbz	r0, 80028f4 <_printf_i+0x1e4>
 80028f0:	1b80      	subs	r0, r0, r6
 80028f2:	6060      	str	r0, [r4, #4]
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	6123      	str	r3, [r4, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028fe:	e7aa      	b.n	8002856 <_printf_i+0x146>
 8002900:	6923      	ldr	r3, [r4, #16]
 8002902:	4632      	mov	r2, r6
 8002904:	4649      	mov	r1, r9
 8002906:	4640      	mov	r0, r8
 8002908:	47d0      	blx	sl
 800290a:	3001      	adds	r0, #1
 800290c:	d0ad      	beq.n	800286a <_printf_i+0x15a>
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	079b      	lsls	r3, r3, #30
 8002912:	d413      	bmi.n	800293c <_printf_i+0x22c>
 8002914:	68e0      	ldr	r0, [r4, #12]
 8002916:	9b03      	ldr	r3, [sp, #12]
 8002918:	4298      	cmp	r0, r3
 800291a:	bfb8      	it	lt
 800291c:	4618      	movlt	r0, r3
 800291e:	e7a6      	b.n	800286e <_printf_i+0x15e>
 8002920:	2301      	movs	r3, #1
 8002922:	4632      	mov	r2, r6
 8002924:	4649      	mov	r1, r9
 8002926:	4640      	mov	r0, r8
 8002928:	47d0      	blx	sl
 800292a:	3001      	adds	r0, #1
 800292c:	d09d      	beq.n	800286a <_printf_i+0x15a>
 800292e:	3501      	adds	r5, #1
 8002930:	68e3      	ldr	r3, [r4, #12]
 8002932:	9903      	ldr	r1, [sp, #12]
 8002934:	1a5b      	subs	r3, r3, r1
 8002936:	42ab      	cmp	r3, r5
 8002938:	dcf2      	bgt.n	8002920 <_printf_i+0x210>
 800293a:	e7eb      	b.n	8002914 <_printf_i+0x204>
 800293c:	2500      	movs	r5, #0
 800293e:	f104 0619 	add.w	r6, r4, #25
 8002942:	e7f5      	b.n	8002930 <_printf_i+0x220>
 8002944:	08004c24 	.word	0x08004c24
 8002948:	08004c35 	.word	0x08004c35

0800294c <__sflush_r>:
 800294c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002954:	0716      	lsls	r6, r2, #28
 8002956:	4605      	mov	r5, r0
 8002958:	460c      	mov	r4, r1
 800295a:	d454      	bmi.n	8002a06 <__sflush_r+0xba>
 800295c:	684b      	ldr	r3, [r1, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	dc02      	bgt.n	8002968 <__sflush_r+0x1c>
 8002962:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	dd48      	ble.n	80029fa <__sflush_r+0xae>
 8002968:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800296a:	2e00      	cmp	r6, #0
 800296c:	d045      	beq.n	80029fa <__sflush_r+0xae>
 800296e:	2300      	movs	r3, #0
 8002970:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002974:	682f      	ldr	r7, [r5, #0]
 8002976:	6a21      	ldr	r1, [r4, #32]
 8002978:	602b      	str	r3, [r5, #0]
 800297a:	d030      	beq.n	80029de <__sflush_r+0x92>
 800297c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	0759      	lsls	r1, r3, #29
 8002982:	d505      	bpl.n	8002990 <__sflush_r+0x44>
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800298a:	b10b      	cbz	r3, 8002990 <__sflush_r+0x44>
 800298c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800298e:	1ad2      	subs	r2, r2, r3
 8002990:	2300      	movs	r3, #0
 8002992:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002994:	6a21      	ldr	r1, [r4, #32]
 8002996:	4628      	mov	r0, r5
 8002998:	47b0      	blx	r6
 800299a:	1c43      	adds	r3, r0, #1
 800299c:	89a3      	ldrh	r3, [r4, #12]
 800299e:	d106      	bne.n	80029ae <__sflush_r+0x62>
 80029a0:	6829      	ldr	r1, [r5, #0]
 80029a2:	291d      	cmp	r1, #29
 80029a4:	d82b      	bhi.n	80029fe <__sflush_r+0xb2>
 80029a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a50 <__sflush_r+0x104>)
 80029a8:	40ca      	lsrs	r2, r1
 80029aa:	07d6      	lsls	r6, r2, #31
 80029ac:	d527      	bpl.n	80029fe <__sflush_r+0xb2>
 80029ae:	2200      	movs	r2, #0
 80029b0:	6062      	str	r2, [r4, #4]
 80029b2:	04d9      	lsls	r1, r3, #19
 80029b4:	6922      	ldr	r2, [r4, #16]
 80029b6:	6022      	str	r2, [r4, #0]
 80029b8:	d504      	bpl.n	80029c4 <__sflush_r+0x78>
 80029ba:	1c42      	adds	r2, r0, #1
 80029bc:	d101      	bne.n	80029c2 <__sflush_r+0x76>
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	b903      	cbnz	r3, 80029c4 <__sflush_r+0x78>
 80029c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80029c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029c6:	602f      	str	r7, [r5, #0]
 80029c8:	b1b9      	cbz	r1, 80029fa <__sflush_r+0xae>
 80029ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029ce:	4299      	cmp	r1, r3
 80029d0:	d002      	beq.n	80029d8 <__sflush_r+0x8c>
 80029d2:	4628      	mov	r0, r5
 80029d4:	f001 f9a4 	bl	8003d20 <_free_r>
 80029d8:	2300      	movs	r3, #0
 80029da:	6363      	str	r3, [r4, #52]	@ 0x34
 80029dc:	e00d      	b.n	80029fa <__sflush_r+0xae>
 80029de:	2301      	movs	r3, #1
 80029e0:	4628      	mov	r0, r5
 80029e2:	47b0      	blx	r6
 80029e4:	4602      	mov	r2, r0
 80029e6:	1c50      	adds	r0, r2, #1
 80029e8:	d1c9      	bne.n	800297e <__sflush_r+0x32>
 80029ea:	682b      	ldr	r3, [r5, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0c6      	beq.n	800297e <__sflush_r+0x32>
 80029f0:	2b1d      	cmp	r3, #29
 80029f2:	d001      	beq.n	80029f8 <__sflush_r+0xac>
 80029f4:	2b16      	cmp	r3, #22
 80029f6:	d11e      	bne.n	8002a36 <__sflush_r+0xea>
 80029f8:	602f      	str	r7, [r5, #0]
 80029fa:	2000      	movs	r0, #0
 80029fc:	e022      	b.n	8002a44 <__sflush_r+0xf8>
 80029fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	e01b      	b.n	8002a3e <__sflush_r+0xf2>
 8002a06:	690f      	ldr	r7, [r1, #16]
 8002a08:	2f00      	cmp	r7, #0
 8002a0a:	d0f6      	beq.n	80029fa <__sflush_r+0xae>
 8002a0c:	0793      	lsls	r3, r2, #30
 8002a0e:	680e      	ldr	r6, [r1, #0]
 8002a10:	bf08      	it	eq
 8002a12:	694b      	ldreq	r3, [r1, #20]
 8002a14:	600f      	str	r7, [r1, #0]
 8002a16:	bf18      	it	ne
 8002a18:	2300      	movne	r3, #0
 8002a1a:	eba6 0807 	sub.w	r8, r6, r7
 8002a1e:	608b      	str	r3, [r1, #8]
 8002a20:	f1b8 0f00 	cmp.w	r8, #0
 8002a24:	dde9      	ble.n	80029fa <__sflush_r+0xae>
 8002a26:	6a21      	ldr	r1, [r4, #32]
 8002a28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002a2a:	4643      	mov	r3, r8
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	4628      	mov	r0, r5
 8002a30:	47b0      	blx	r6
 8002a32:	2800      	cmp	r0, #0
 8002a34:	dc08      	bgt.n	8002a48 <__sflush_r+0xfc>
 8002a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a48:	4407      	add	r7, r0
 8002a4a:	eba8 0800 	sub.w	r8, r8, r0
 8002a4e:	e7e7      	b.n	8002a20 <__sflush_r+0xd4>
 8002a50:	20400001 	.word	0x20400001

08002a54 <_fflush_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	690b      	ldr	r3, [r1, #16]
 8002a58:	4605      	mov	r5, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	b913      	cbnz	r3, 8002a64 <_fflush_r+0x10>
 8002a5e:	2500      	movs	r5, #0
 8002a60:	4628      	mov	r0, r5
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
 8002a64:	b118      	cbz	r0, 8002a6e <_fflush_r+0x1a>
 8002a66:	6a03      	ldr	r3, [r0, #32]
 8002a68:	b90b      	cbnz	r3, 8002a6e <_fflush_r+0x1a>
 8002a6a:	f000 f8a7 	bl	8002bbc <__sinit>
 8002a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f3      	beq.n	8002a5e <_fflush_r+0xa>
 8002a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002a78:	07d0      	lsls	r0, r2, #31
 8002a7a:	d404      	bmi.n	8002a86 <_fflush_r+0x32>
 8002a7c:	0599      	lsls	r1, r3, #22
 8002a7e:	d402      	bmi.n	8002a86 <_fflush_r+0x32>
 8002a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a82:	f000 fae2 	bl	800304a <__retarget_lock_acquire_recursive>
 8002a86:	4628      	mov	r0, r5
 8002a88:	4621      	mov	r1, r4
 8002a8a:	f7ff ff5f 	bl	800294c <__sflush_r>
 8002a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a90:	07da      	lsls	r2, r3, #31
 8002a92:	4605      	mov	r5, r0
 8002a94:	d4e4      	bmi.n	8002a60 <_fflush_r+0xc>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	059b      	lsls	r3, r3, #22
 8002a9a:	d4e1      	bmi.n	8002a60 <_fflush_r+0xc>
 8002a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a9e:	f000 fad5 	bl	800304c <__retarget_lock_release_recursive>
 8002aa2:	e7dd      	b.n	8002a60 <_fflush_r+0xc>

08002aa4 <std>:
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8002aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab2:	6083      	str	r3, [r0, #8]
 8002ab4:	8181      	strh	r1, [r0, #12]
 8002ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ab8:	81c2      	strh	r2, [r0, #14]
 8002aba:	6183      	str	r3, [r0, #24]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2208      	movs	r2, #8
 8002ac0:	305c      	adds	r0, #92	@ 0x5c
 8002ac2:	f000 fa57 	bl	8002f74 <memset>
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <std+0x58>)
 8002ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <std+0x5c>)
 8002acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <std+0x60>)
 8002ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <std+0x64>)
 8002ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <std+0x68>)
 8002ad8:	6224      	str	r4, [r4, #32]
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d006      	beq.n	8002aec <std+0x48>
 8002ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ae2:	4294      	cmp	r4, r2
 8002ae4:	d002      	beq.n	8002aec <std+0x48>
 8002ae6:	33d0      	adds	r3, #208	@ 0xd0
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d105      	bne.n	8002af8 <std+0x54>
 8002aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af4:	f000 baa8 	b.w	8003048 <__retarget_lock_init_recursive>
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	08002dc5 	.word	0x08002dc5
 8002b00:	08002de7 	.word	0x08002de7
 8002b04:	08002e1f 	.word	0x08002e1f
 8002b08:	08002e43 	.word	0x08002e43
 8002b0c:	200002ec 	.word	0x200002ec

08002b10 <stdio_exit_handler>:
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <stdio_exit_handler+0xc>)
 8002b12:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <stdio_exit_handler+0x10>)
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <stdio_exit_handler+0x14>)
 8002b16:	f000 b869 	b.w	8002bec <_fwalk_sglue>
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	08002a55 	.word	0x08002a55
 8002b24:	20000010 	.word	0x20000010

08002b28 <cleanup_stdio>:
 8002b28:	6841      	ldr	r1, [r0, #4]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <cleanup_stdio+0x34>)
 8002b2c:	4299      	cmp	r1, r3
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	4604      	mov	r4, r0
 8002b32:	d001      	beq.n	8002b38 <cleanup_stdio+0x10>
 8002b34:	f7ff ff8e 	bl	8002a54 <_fflush_r>
 8002b38:	68a1      	ldr	r1, [r4, #8]
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <cleanup_stdio+0x38>)
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	d002      	beq.n	8002b46 <cleanup_stdio+0x1e>
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff ff87 	bl	8002a54 <_fflush_r>
 8002b46:	68e1      	ldr	r1, [r4, #12]
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <cleanup_stdio+0x3c>)
 8002b4a:	4299      	cmp	r1, r3
 8002b4c:	d004      	beq.n	8002b58 <cleanup_stdio+0x30>
 8002b4e:	4620      	mov	r0, r4
 8002b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b54:	f7ff bf7e 	b.w	8002a54 <_fflush_r>
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200002ec 	.word	0x200002ec
 8002b60:	20000354 	.word	0x20000354
 8002b64:	200003bc 	.word	0x200003bc

08002b68 <global_stdio_init.part.0>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <global_stdio_init.part.0+0x30>)
 8002b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002b9c <global_stdio_init.part.0+0x34>)
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <global_stdio_init.part.0+0x38>)
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4620      	mov	r0, r4
 8002b74:	2200      	movs	r2, #0
 8002b76:	2104      	movs	r1, #4
 8002b78:	f7ff ff94 	bl	8002aa4 <std>
 8002b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b80:	2201      	movs	r2, #1
 8002b82:	2109      	movs	r1, #9
 8002b84:	f7ff ff8e 	bl	8002aa4 <std>
 8002b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b92:	2112      	movs	r1, #18
 8002b94:	f7ff bf86 	b.w	8002aa4 <std>
 8002b98:	20000424 	.word	0x20000424
 8002b9c:	200002ec 	.word	0x200002ec
 8002ba0:	08002b11 	.word	0x08002b11

08002ba4 <__sfp_lock_acquire>:
 8002ba4:	4801      	ldr	r0, [pc, #4]	@ (8002bac <__sfp_lock_acquire+0x8>)
 8002ba6:	f000 ba50 	b.w	800304a <__retarget_lock_acquire_recursive>
 8002baa:	bf00      	nop
 8002bac:	2000042d 	.word	0x2000042d

08002bb0 <__sfp_lock_release>:
 8002bb0:	4801      	ldr	r0, [pc, #4]	@ (8002bb8 <__sfp_lock_release+0x8>)
 8002bb2:	f000 ba4b 	b.w	800304c <__retarget_lock_release_recursive>
 8002bb6:	bf00      	nop
 8002bb8:	2000042d 	.word	0x2000042d

08002bbc <__sinit>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f7ff fff0 	bl	8002ba4 <__sfp_lock_acquire>
 8002bc4:	6a23      	ldr	r3, [r4, #32]
 8002bc6:	b11b      	cbz	r3, 8002bd0 <__sinit+0x14>
 8002bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bcc:	f7ff bff0 	b.w	8002bb0 <__sfp_lock_release>
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <__sinit+0x28>)
 8002bd2:	6223      	str	r3, [r4, #32]
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__sinit+0x2c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f5      	bne.n	8002bc8 <__sinit+0xc>
 8002bdc:	f7ff ffc4 	bl	8002b68 <global_stdio_init.part.0>
 8002be0:	e7f2      	b.n	8002bc8 <__sinit+0xc>
 8002be2:	bf00      	nop
 8002be4:	08002b29 	.word	0x08002b29
 8002be8:	20000424 	.word	0x20000424

08002bec <_fwalk_sglue>:
 8002bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf0:	4607      	mov	r7, r0
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002c00:	d505      	bpl.n	8002c0e <_fwalk_sglue+0x22>
 8002c02:	6824      	ldr	r4, [r4, #0]
 8002c04:	2c00      	cmp	r4, #0
 8002c06:	d1f7      	bne.n	8002bf8 <_fwalk_sglue+0xc>
 8002c08:	4630      	mov	r0, r6
 8002c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d907      	bls.n	8002c24 <_fwalk_sglue+0x38>
 8002c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d003      	beq.n	8002c24 <_fwalk_sglue+0x38>
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4638      	mov	r0, r7
 8002c20:	47c0      	blx	r8
 8002c22:	4306      	orrs	r6, r0
 8002c24:	3568      	adds	r5, #104	@ 0x68
 8002c26:	e7e9      	b.n	8002bfc <_fwalk_sglue+0x10>

08002c28 <iprintf>:
 8002c28:	b40f      	push	{r0, r1, r2, r3}
 8002c2a:	b507      	push	{r0, r1, r2, lr}
 8002c2c:	4906      	ldr	r1, [pc, #24]	@ (8002c48 <iprintf+0x20>)
 8002c2e:	ab04      	add	r3, sp, #16
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c36:	6881      	ldr	r1, [r0, #8]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	f001 fd15 	bl	8004668 <_vfiprintf_r>
 8002c3e:	b003      	add	sp, #12
 8002c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c44:	b004      	add	sp, #16
 8002c46:	4770      	bx	lr
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <setbuf>:
 8002c4c:	fab1 f281 	clz	r2, r1
 8002c50:	0952      	lsrs	r2, r2, #5
 8002c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c56:	0052      	lsls	r2, r2, #1
 8002c58:	f000 b800 	b.w	8002c5c <setvbuf>

08002c5c <setvbuf>:
 8002c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002c60:	461d      	mov	r5, r3
 8002c62:	4b57      	ldr	r3, [pc, #348]	@ (8002dc0 <setvbuf+0x164>)
 8002c64:	681f      	ldr	r7, [r3, #0]
 8002c66:	4604      	mov	r4, r0
 8002c68:	460e      	mov	r6, r1
 8002c6a:	4690      	mov	r8, r2
 8002c6c:	b127      	cbz	r7, 8002c78 <setvbuf+0x1c>
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	b913      	cbnz	r3, 8002c78 <setvbuf+0x1c>
 8002c72:	4638      	mov	r0, r7
 8002c74:	f7ff ffa2 	bl	8002bbc <__sinit>
 8002c78:	f1b8 0f02 	cmp.w	r8, #2
 8002c7c:	d006      	beq.n	8002c8c <setvbuf+0x30>
 8002c7e:	f1b8 0f01 	cmp.w	r8, #1
 8002c82:	f200 809a 	bhi.w	8002dba <setvbuf+0x15e>
 8002c86:	2d00      	cmp	r5, #0
 8002c88:	f2c0 8097 	blt.w	8002dba <setvbuf+0x15e>
 8002c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c8e:	07d9      	lsls	r1, r3, #31
 8002c90:	d405      	bmi.n	8002c9e <setvbuf+0x42>
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	059a      	lsls	r2, r3, #22
 8002c96:	d402      	bmi.n	8002c9e <setvbuf+0x42>
 8002c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c9a:	f000 f9d6 	bl	800304a <__retarget_lock_acquire_recursive>
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff fed7 	bl	8002a54 <_fflush_r>
 8002ca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ca8:	b141      	cbz	r1, 8002cbc <setvbuf+0x60>
 8002caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cae:	4299      	cmp	r1, r3
 8002cb0:	d002      	beq.n	8002cb8 <setvbuf+0x5c>
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	f001 f834 	bl	8003d20 <_free_r>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61a3      	str	r3, [r4, #24]
 8002cc0:	6063      	str	r3, [r4, #4]
 8002cc2:	89a3      	ldrh	r3, [r4, #12]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	d503      	bpl.n	8002cd0 <setvbuf+0x74>
 8002cc8:	6921      	ldr	r1, [r4, #16]
 8002cca:	4638      	mov	r0, r7
 8002ccc:	f001 f828 	bl	8003d20 <_free_r>
 8002cd0:	89a3      	ldrh	r3, [r4, #12]
 8002cd2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	f1b8 0f02 	cmp.w	r8, #2
 8002cde:	81a3      	strh	r3, [r4, #12]
 8002ce0:	d061      	beq.n	8002da6 <setvbuf+0x14a>
 8002ce2:	ab01      	add	r3, sp, #4
 8002ce4:	466a      	mov	r2, sp
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4638      	mov	r0, r7
 8002cea:	f001 fdd5 	bl	8004898 <__swhatbuf_r>
 8002cee:	89a3      	ldrh	r3, [r4, #12]
 8002cf0:	4318      	orrs	r0, r3
 8002cf2:	81a0      	strh	r0, [r4, #12]
 8002cf4:	bb2d      	cbnz	r5, 8002d42 <setvbuf+0xe6>
 8002cf6:	9d00      	ldr	r5, [sp, #0]
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f001 f85b 	bl	8003db4 <malloc>
 8002cfe:	4606      	mov	r6, r0
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d152      	bne.n	8002daa <setvbuf+0x14e>
 8002d04:	f8dd 9000 	ldr.w	r9, [sp]
 8002d08:	45a9      	cmp	r9, r5
 8002d0a:	d140      	bne.n	8002d8e <setvbuf+0x132>
 8002d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8002d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	81a2      	strh	r2, [r4, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60a2      	str	r2, [r4, #8]
 8002d1e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002d22:	6022      	str	r2, [r4, #0]
 8002d24:	6122      	str	r2, [r4, #16]
 8002d26:	2201      	movs	r2, #1
 8002d28:	6162      	str	r2, [r4, #20]
 8002d2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d2c:	07d6      	lsls	r6, r2, #31
 8002d2e:	d404      	bmi.n	8002d3a <setvbuf+0xde>
 8002d30:	0598      	lsls	r0, r3, #22
 8002d32:	d402      	bmi.n	8002d3a <setvbuf+0xde>
 8002d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d36:	f000 f989 	bl	800304c <__retarget_lock_release_recursive>
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	b003      	add	sp, #12
 8002d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d42:	2e00      	cmp	r6, #0
 8002d44:	d0d8      	beq.n	8002cf8 <setvbuf+0x9c>
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	b913      	cbnz	r3, 8002d50 <setvbuf+0xf4>
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	f7ff ff36 	bl	8002bbc <__sinit>
 8002d50:	f1b8 0f01 	cmp.w	r8, #1
 8002d54:	bf08      	it	eq
 8002d56:	89a3      	ldrheq	r3, [r4, #12]
 8002d58:	6026      	str	r6, [r4, #0]
 8002d5a:	bf04      	itt	eq
 8002d5c:	f043 0301 	orreq.w	r3, r3, #1
 8002d60:	81a3      	strheq	r3, [r4, #12]
 8002d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d66:	f013 0208 	ands.w	r2, r3, #8
 8002d6a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002d6e:	d01e      	beq.n	8002dae <setvbuf+0x152>
 8002d70:	07d9      	lsls	r1, r3, #31
 8002d72:	bf41      	itttt	mi
 8002d74:	2200      	movmi	r2, #0
 8002d76:	426d      	negmi	r5, r5
 8002d78:	60a2      	strmi	r2, [r4, #8]
 8002d7a:	61a5      	strmi	r5, [r4, #24]
 8002d7c:	bf58      	it	pl
 8002d7e:	60a5      	strpl	r5, [r4, #8]
 8002d80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d82:	07d2      	lsls	r2, r2, #31
 8002d84:	d401      	bmi.n	8002d8a <setvbuf+0x12e>
 8002d86:	059b      	lsls	r3, r3, #22
 8002d88:	d513      	bpl.n	8002db2 <setvbuf+0x156>
 8002d8a:	2500      	movs	r5, #0
 8002d8c:	e7d5      	b.n	8002d3a <setvbuf+0xde>
 8002d8e:	4648      	mov	r0, r9
 8002d90:	f001 f810 	bl	8003db4 <malloc>
 8002d94:	4606      	mov	r6, r0
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d0b8      	beq.n	8002d0c <setvbuf+0xb0>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da0:	81a3      	strh	r3, [r4, #12]
 8002da2:	464d      	mov	r5, r9
 8002da4:	e7cf      	b.n	8002d46 <setvbuf+0xea>
 8002da6:	2500      	movs	r5, #0
 8002da8:	e7b2      	b.n	8002d10 <setvbuf+0xb4>
 8002daa:	46a9      	mov	r9, r5
 8002dac:	e7f5      	b.n	8002d9a <setvbuf+0x13e>
 8002dae:	60a2      	str	r2, [r4, #8]
 8002db0:	e7e6      	b.n	8002d80 <setvbuf+0x124>
 8002db2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002db4:	f000 f94a 	bl	800304c <__retarget_lock_release_recursive>
 8002db8:	e7e7      	b.n	8002d8a <setvbuf+0x12e>
 8002dba:	f04f 35ff 	mov.w	r5, #4294967295
 8002dbe:	e7bc      	b.n	8002d3a <setvbuf+0xde>
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <__sread>:
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dcc:	f000 f900 	bl	8002fd0 <_read_r>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	bfab      	itete	ge
 8002dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8002dd8:	181b      	addge	r3, r3, r0
 8002dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dde:	bfac      	ite	ge
 8002de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002de2:	81a3      	strhlt	r3, [r4, #12]
 8002de4:	bd10      	pop	{r4, pc}

08002de6 <__swrite>:
 8002de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dea:	461f      	mov	r7, r3
 8002dec:	898b      	ldrh	r3, [r1, #12]
 8002dee:	05db      	lsls	r3, r3, #23
 8002df0:	4605      	mov	r5, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	4616      	mov	r6, r2
 8002df6:	d505      	bpl.n	8002e04 <__swrite+0x1e>
 8002df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f000 f8d4 	bl	8002fac <_lseek_r>
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e0e:	81a3      	strh	r3, [r4, #12]
 8002e10:	4632      	mov	r2, r6
 8002e12:	463b      	mov	r3, r7
 8002e14:	4628      	mov	r0, r5
 8002e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e1a:	f7fe bb5d 	b.w	80014d8 <_write_r>

08002e1e <__sseek>:
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	460c      	mov	r4, r1
 8002e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e26:	f000 f8c1 	bl	8002fac <_lseek_r>
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	bf15      	itete	ne
 8002e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e3a:	81a3      	strheq	r3, [r4, #12]
 8002e3c:	bf18      	it	ne
 8002e3e:	81a3      	strhne	r3, [r4, #12]
 8002e40:	bd10      	pop	{r4, pc}

08002e42 <__sclose>:
 8002e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e46:	f000 b8a1 	b.w	8002f8c <_close_r>

08002e4a <__swbuf_r>:
 8002e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4c:	460e      	mov	r6, r1
 8002e4e:	4614      	mov	r4, r2
 8002e50:	4605      	mov	r5, r0
 8002e52:	b118      	cbz	r0, 8002e5c <__swbuf_r+0x12>
 8002e54:	6a03      	ldr	r3, [r0, #32]
 8002e56:	b90b      	cbnz	r3, 8002e5c <__swbuf_r+0x12>
 8002e58:	f7ff feb0 	bl	8002bbc <__sinit>
 8002e5c:	69a3      	ldr	r3, [r4, #24]
 8002e5e:	60a3      	str	r3, [r4, #8]
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	071a      	lsls	r2, r3, #28
 8002e64:	d501      	bpl.n	8002e6a <__swbuf_r+0x20>
 8002e66:	6923      	ldr	r3, [r4, #16]
 8002e68:	b943      	cbnz	r3, 8002e7c <__swbuf_r+0x32>
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f82b 	bl	8002ec8 <__swsetup_r>
 8002e72:	b118      	cbz	r0, 8002e7c <__swbuf_r+0x32>
 8002e74:	f04f 37ff 	mov.w	r7, #4294967295
 8002e78:	4638      	mov	r0, r7
 8002e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	6922      	ldr	r2, [r4, #16]
 8002e80:	1a98      	subs	r0, r3, r2
 8002e82:	6963      	ldr	r3, [r4, #20]
 8002e84:	b2f6      	uxtb	r6, r6
 8002e86:	4283      	cmp	r3, r0
 8002e88:	4637      	mov	r7, r6
 8002e8a:	dc05      	bgt.n	8002e98 <__swbuf_r+0x4e>
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f7ff fde0 	bl	8002a54 <_fflush_r>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d1ed      	bne.n	8002e74 <__swbuf_r+0x2a>
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	60a3      	str	r3, [r4, #8]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	6022      	str	r2, [r4, #0]
 8002ea4:	701e      	strb	r6, [r3, #0]
 8002ea6:	6962      	ldr	r2, [r4, #20]
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d004      	beq.n	8002eb8 <__swbuf_r+0x6e>
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	07db      	lsls	r3, r3, #31
 8002eb2:	d5e1      	bpl.n	8002e78 <__swbuf_r+0x2e>
 8002eb4:	2e0a      	cmp	r6, #10
 8002eb6:	d1df      	bne.n	8002e78 <__swbuf_r+0x2e>
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f7ff fdca 	bl	8002a54 <_fflush_r>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d0d9      	beq.n	8002e78 <__swbuf_r+0x2e>
 8002ec4:	e7d6      	b.n	8002e74 <__swbuf_r+0x2a>
	...

08002ec8 <__swsetup_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <__swsetup_r+0xa8>)
 8002ecc:	4605      	mov	r5, r0
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	b118      	cbz	r0, 8002edc <__swsetup_r+0x14>
 8002ed4:	6a03      	ldr	r3, [r0, #32]
 8002ed6:	b90b      	cbnz	r3, 8002edc <__swsetup_r+0x14>
 8002ed8:	f7ff fe70 	bl	8002bbc <__sinit>
 8002edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee0:	0719      	lsls	r1, r3, #28
 8002ee2:	d422      	bmi.n	8002f2a <__swsetup_r+0x62>
 8002ee4:	06da      	lsls	r2, r3, #27
 8002ee6:	d407      	bmi.n	8002ef8 <__swsetup_r+0x30>
 8002ee8:	2209      	movs	r2, #9
 8002eea:	602a      	str	r2, [r5, #0]
 8002eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	e033      	b.n	8002f60 <__swsetup_r+0x98>
 8002ef8:	0758      	lsls	r0, r3, #29
 8002efa:	d512      	bpl.n	8002f22 <__swsetup_r+0x5a>
 8002efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002efe:	b141      	cbz	r1, 8002f12 <__swsetup_r+0x4a>
 8002f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d002      	beq.n	8002f0e <__swsetup_r+0x46>
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 ff09 	bl	8003d20 <_free_r>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	b94b      	cbnz	r3, 8002f42 <__swsetup_r+0x7a>
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f38:	d003      	beq.n	8002f42 <__swsetup_r+0x7a>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f001 fcd1 	bl	80048e4 <__smakebuf_r>
 8002f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f46:	f013 0201 	ands.w	r2, r3, #1
 8002f4a:	d00a      	beq.n	8002f62 <__swsetup_r+0x9a>
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60a2      	str	r2, [r4, #8]
 8002f50:	6962      	ldr	r2, [r4, #20]
 8002f52:	4252      	negs	r2, r2
 8002f54:	61a2      	str	r2, [r4, #24]
 8002f56:	6922      	ldr	r2, [r4, #16]
 8002f58:	b942      	cbnz	r2, 8002f6c <__swsetup_r+0xa4>
 8002f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f5e:	d1c5      	bne.n	8002eec <__swsetup_r+0x24>
 8002f60:	bd38      	pop	{r3, r4, r5, pc}
 8002f62:	0799      	lsls	r1, r3, #30
 8002f64:	bf58      	it	pl
 8002f66:	6962      	ldrpl	r2, [r4, #20]
 8002f68:	60a2      	str	r2, [r4, #8]
 8002f6a:	e7f4      	b.n	8002f56 <__swsetup_r+0x8e>
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e7f7      	b.n	8002f60 <__swsetup_r+0x98>
 8002f70:	2000000c 	.word	0x2000000c

08002f74 <memset>:
 8002f74:	4402      	add	r2, r0
 8002f76:	4603      	mov	r3, r0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <_localeconv_r>:
 8002f84:	4800      	ldr	r0, [pc, #0]	@ (8002f88 <_localeconv_r+0x4>)
 8002f86:	4770      	bx	lr
 8002f88:	2000014c 	.word	0x2000014c

08002f8c <_close_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4d06      	ldr	r5, [pc, #24]	@ (8002fa8 <_close_r+0x1c>)
 8002f90:	2300      	movs	r3, #0
 8002f92:	4604      	mov	r4, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	602b      	str	r3, [r5, #0]
 8002f98:	f7fe ff3e 	bl	8001e18 <_close>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d102      	bne.n	8002fa6 <_close_r+0x1a>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b103      	cbz	r3, 8002fa6 <_close_r+0x1a>
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	bd38      	pop	{r3, r4, r5, pc}
 8002fa8:	20000428 	.word	0x20000428

08002fac <_lseek_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4d07      	ldr	r5, [pc, #28]	@ (8002fcc <_lseek_r+0x20>)
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	4608      	mov	r0, r1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	602a      	str	r2, [r5, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7fe ff53 	bl	8001e66 <_lseek>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_lseek_r+0x1e>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_lseek_r+0x1e>
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	20000428 	.word	0x20000428

08002fd0 <_read_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4d07      	ldr	r5, [pc, #28]	@ (8002ff0 <_read_r+0x20>)
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	4611      	mov	r1, r2
 8002fda:	2200      	movs	r2, #0
 8002fdc:	602a      	str	r2, [r5, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7fe fefd 	bl	8001dde <_read>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_read_r+0x1e>
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_read_r+0x1e>
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	20000428 	.word	0x20000428

08002ff4 <__errno>:
 8002ff4:	4b01      	ldr	r3, [pc, #4]	@ (8002ffc <__errno+0x8>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <__libc_init_array>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	4d0d      	ldr	r5, [pc, #52]	@ (8003038 <__libc_init_array+0x38>)
 8003004:	4c0d      	ldr	r4, [pc, #52]	@ (800303c <__libc_init_array+0x3c>)
 8003006:	1b64      	subs	r4, r4, r5
 8003008:	10a4      	asrs	r4, r4, #2
 800300a:	2600      	movs	r6, #0
 800300c:	42a6      	cmp	r6, r4
 800300e:	d109      	bne.n	8003024 <__libc_init_array+0x24>
 8003010:	4d0b      	ldr	r5, [pc, #44]	@ (8003040 <__libc_init_array+0x40>)
 8003012:	4c0c      	ldr	r4, [pc, #48]	@ (8003044 <__libc_init_array+0x44>)
 8003014:	f001 fd92 	bl	8004b3c <_init>
 8003018:	1b64      	subs	r4, r4, r5
 800301a:	10a4      	asrs	r4, r4, #2
 800301c:	2600      	movs	r6, #0
 800301e:	42a6      	cmp	r6, r4
 8003020:	d105      	bne.n	800302e <__libc_init_array+0x2e>
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	f855 3b04 	ldr.w	r3, [r5], #4
 8003028:	4798      	blx	r3
 800302a:	3601      	adds	r6, #1
 800302c:	e7ee      	b.n	800300c <__libc_init_array+0xc>
 800302e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003032:	4798      	blx	r3
 8003034:	3601      	adds	r6, #1
 8003036:	e7f2      	b.n	800301e <__libc_init_array+0x1e>
 8003038:	08004f8c 	.word	0x08004f8c
 800303c:	08004f8c 	.word	0x08004f8c
 8003040:	08004f8c 	.word	0x08004f8c
 8003044:	08004f90 	.word	0x08004f90

08003048 <__retarget_lock_init_recursive>:
 8003048:	4770      	bx	lr

0800304a <__retarget_lock_acquire_recursive>:
 800304a:	4770      	bx	lr

0800304c <__retarget_lock_release_recursive>:
 800304c:	4770      	bx	lr

0800304e <memcpy>:
 800304e:	440a      	add	r2, r1
 8003050:	4291      	cmp	r1, r2
 8003052:	f100 33ff 	add.w	r3, r0, #4294967295
 8003056:	d100      	bne.n	800305a <memcpy+0xc>
 8003058:	4770      	bx	lr
 800305a:	b510      	push	{r4, lr}
 800305c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003064:	4291      	cmp	r1, r2
 8003066:	d1f9      	bne.n	800305c <memcpy+0xe>
 8003068:	bd10      	pop	{r4, pc}

0800306a <quorem>:
 800306a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306e:	6903      	ldr	r3, [r0, #16]
 8003070:	690c      	ldr	r4, [r1, #16]
 8003072:	42a3      	cmp	r3, r4
 8003074:	4607      	mov	r7, r0
 8003076:	db7e      	blt.n	8003176 <quorem+0x10c>
 8003078:	3c01      	subs	r4, #1
 800307a:	f101 0814 	add.w	r8, r1, #20
 800307e:	00a3      	lsls	r3, r4, #2
 8003080:	f100 0514 	add.w	r5, r0, #20
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003094:	3301      	adds	r3, #1
 8003096:	429a      	cmp	r2, r3
 8003098:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800309c:	fbb2 f6f3 	udiv	r6, r2, r3
 80030a0:	d32e      	bcc.n	8003100 <quorem+0x96>
 80030a2:	f04f 0a00 	mov.w	sl, #0
 80030a6:	46c4      	mov	ip, r8
 80030a8:	46ae      	mov	lr, r5
 80030aa:	46d3      	mov	fp, sl
 80030ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80030b0:	b298      	uxth	r0, r3
 80030b2:	fb06 a000 	mla	r0, r6, r0, sl
 80030b6:	0c02      	lsrs	r2, r0, #16
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	fb06 2303 	mla	r3, r6, r3, r2
 80030be:	f8de 2000 	ldr.w	r2, [lr]
 80030c2:	b280      	uxth	r0, r0
 80030c4:	b292      	uxth	r2, r2
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	445a      	add	r2, fp
 80030ca:	f8de 0000 	ldr.w	r0, [lr]
 80030ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80030d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80030dc:	b292      	uxth	r2, r2
 80030de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80030e2:	45e1      	cmp	r9, ip
 80030e4:	f84e 2b04 	str.w	r2, [lr], #4
 80030e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80030ec:	d2de      	bcs.n	80030ac <quorem+0x42>
 80030ee:	9b00      	ldr	r3, [sp, #0]
 80030f0:	58eb      	ldr	r3, [r5, r3]
 80030f2:	b92b      	cbnz	r3, 8003100 <quorem+0x96>
 80030f4:	9b01      	ldr	r3, [sp, #4]
 80030f6:	3b04      	subs	r3, #4
 80030f8:	429d      	cmp	r5, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	d32f      	bcc.n	800315e <quorem+0xf4>
 80030fe:	613c      	str	r4, [r7, #16]
 8003100:	4638      	mov	r0, r7
 8003102:	f001 f97f 	bl	8004404 <__mcmp>
 8003106:	2800      	cmp	r0, #0
 8003108:	db25      	blt.n	8003156 <quorem+0xec>
 800310a:	4629      	mov	r1, r5
 800310c:	2000      	movs	r0, #0
 800310e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003112:	f8d1 c000 	ldr.w	ip, [r1]
 8003116:	fa1f fe82 	uxth.w	lr, r2
 800311a:	fa1f f38c 	uxth.w	r3, ip
 800311e:	eba3 030e 	sub.w	r3, r3, lr
 8003122:	4403      	add	r3, r0
 8003124:	0c12      	lsrs	r2, r2, #16
 8003126:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800312a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800312e:	b29b      	uxth	r3, r3
 8003130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003134:	45c1      	cmp	r9, r8
 8003136:	f841 3b04 	str.w	r3, [r1], #4
 800313a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800313e:	d2e6      	bcs.n	800310e <quorem+0xa4>
 8003140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003148:	b922      	cbnz	r2, 8003154 <quorem+0xea>
 800314a:	3b04      	subs	r3, #4
 800314c:	429d      	cmp	r5, r3
 800314e:	461a      	mov	r2, r3
 8003150:	d30b      	bcc.n	800316a <quorem+0x100>
 8003152:	613c      	str	r4, [r7, #16]
 8003154:	3601      	adds	r6, #1
 8003156:	4630      	mov	r0, r6
 8003158:	b003      	add	sp, #12
 800315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	3b04      	subs	r3, #4
 8003162:	2a00      	cmp	r2, #0
 8003164:	d1cb      	bne.n	80030fe <quorem+0x94>
 8003166:	3c01      	subs	r4, #1
 8003168:	e7c6      	b.n	80030f8 <quorem+0x8e>
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	3b04      	subs	r3, #4
 800316e:	2a00      	cmp	r2, #0
 8003170:	d1ef      	bne.n	8003152 <quorem+0xe8>
 8003172:	3c01      	subs	r4, #1
 8003174:	e7ea      	b.n	800314c <quorem+0xe2>
 8003176:	2000      	movs	r0, #0
 8003178:	e7ee      	b.n	8003158 <quorem+0xee>
 800317a:	0000      	movs	r0, r0
 800317c:	0000      	movs	r0, r0
	...

08003180 <_dtoa_r>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	69c7      	ldr	r7, [r0, #28]
 8003186:	b097      	sub	sp, #92	@ 0x5c
 8003188:	ed8d 0b04 	vstr	d0, [sp, #16]
 800318c:	ec55 4b10 	vmov	r4, r5, d0
 8003190:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003192:	9107      	str	r1, [sp, #28]
 8003194:	4681      	mov	r9, r0
 8003196:	920c      	str	r2, [sp, #48]	@ 0x30
 8003198:	9311      	str	r3, [sp, #68]	@ 0x44
 800319a:	b97f      	cbnz	r7, 80031bc <_dtoa_r+0x3c>
 800319c:	2010      	movs	r0, #16
 800319e:	f000 fe09 	bl	8003db4 <malloc>
 80031a2:	4602      	mov	r2, r0
 80031a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80031a8:	b920      	cbnz	r0, 80031b4 <_dtoa_r+0x34>
 80031aa:	4ba9      	ldr	r3, [pc, #676]	@ (8003450 <_dtoa_r+0x2d0>)
 80031ac:	21ef      	movs	r1, #239	@ 0xef
 80031ae:	48a9      	ldr	r0, [pc, #676]	@ (8003454 <_dtoa_r+0x2d4>)
 80031b0:	f001 fc06 	bl	80049c0 <__assert_func>
 80031b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80031b8:	6007      	str	r7, [r0, #0]
 80031ba:	60c7      	str	r7, [r0, #12]
 80031bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	b159      	cbz	r1, 80031dc <_dtoa_r+0x5c>
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	604a      	str	r2, [r1, #4]
 80031c8:	2301      	movs	r3, #1
 80031ca:	4093      	lsls	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
 80031ce:	4648      	mov	r0, r9
 80031d0:	f000 fee6 	bl	8003fa0 <_Bfree>
 80031d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	1e2b      	subs	r3, r5, #0
 80031de:	bfb9      	ittee	lt
 80031e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80031e4:	9305      	strlt	r3, [sp, #20]
 80031e6:	2300      	movge	r3, #0
 80031e8:	6033      	strge	r3, [r6, #0]
 80031ea:	9f05      	ldr	r7, [sp, #20]
 80031ec:	4b9a      	ldr	r3, [pc, #616]	@ (8003458 <_dtoa_r+0x2d8>)
 80031ee:	bfbc      	itt	lt
 80031f0:	2201      	movlt	r2, #1
 80031f2:	6032      	strlt	r2, [r6, #0]
 80031f4:	43bb      	bics	r3, r7
 80031f6:	d112      	bne.n	800321e <_dtoa_r+0x9e>
 80031f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80031fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003204:	4323      	orrs	r3, r4
 8003206:	f000 855a 	beq.w	8003cbe <_dtoa_r+0xb3e>
 800320a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800320c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800346c <_dtoa_r+0x2ec>
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 855c 	beq.w	8003cce <_dtoa_r+0xb4e>
 8003216:	f10a 0303 	add.w	r3, sl, #3
 800321a:	f000 bd56 	b.w	8003cca <_dtoa_r+0xb4a>
 800321e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003222:	2200      	movs	r2, #0
 8003224:	ec51 0b17 	vmov	r0, r1, d7
 8003228:	2300      	movs	r3, #0
 800322a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800322e:	f7fd fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003232:	4680      	mov	r8, r0
 8003234:	b158      	cbz	r0, 800324e <_dtoa_r+0xce>
 8003236:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003238:	2301      	movs	r3, #1
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800323e:	b113      	cbz	r3, 8003246 <_dtoa_r+0xc6>
 8003240:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003242:	4b86      	ldr	r3, [pc, #536]	@ (800345c <_dtoa_r+0x2dc>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003470 <_dtoa_r+0x2f0>
 800324a:	f000 bd40 	b.w	8003cce <_dtoa_r+0xb4e>
 800324e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003252:	aa14      	add	r2, sp, #80	@ 0x50
 8003254:	a915      	add	r1, sp, #84	@ 0x54
 8003256:	4648      	mov	r0, r9
 8003258:	f001 f984 	bl	8004564 <__d2b>
 800325c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003260:	9002      	str	r0, [sp, #8]
 8003262:	2e00      	cmp	r6, #0
 8003264:	d078      	beq.n	8003358 <_dtoa_r+0x1d8>
 8003266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003268:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800326c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800327c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003280:	4619      	mov	r1, r3
 8003282:	2200      	movs	r2, #0
 8003284:	4b76      	ldr	r3, [pc, #472]	@ (8003460 <_dtoa_r+0x2e0>)
 8003286:	f7fc ffff 	bl	8000288 <__aeabi_dsub>
 800328a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003438 <_dtoa_r+0x2b8>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fd f9b2 	bl	80005f8 <__aeabi_dmul>
 8003294:	a36a      	add	r3, pc, #424	@ (adr r3, 8003440 <_dtoa_r+0x2c0>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fc fff7 	bl	800028c <__adddf3>
 800329e:	4604      	mov	r4, r0
 80032a0:	4630      	mov	r0, r6
 80032a2:	460d      	mov	r5, r1
 80032a4:	f7fd f93e 	bl	8000524 <__aeabi_i2d>
 80032a8:	a367      	add	r3, pc, #412	@ (adr r3, 8003448 <_dtoa_r+0x2c8>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f7fd f9a3 	bl	80005f8 <__aeabi_dmul>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4620      	mov	r0, r4
 80032b8:	4629      	mov	r1, r5
 80032ba:	f7fc ffe7 	bl	800028c <__adddf3>
 80032be:	4604      	mov	r4, r0
 80032c0:	460d      	mov	r5, r1
 80032c2:	f7fd fc49 	bl	8000b58 <__aeabi_d2iz>
 80032c6:	2200      	movs	r2, #0
 80032c8:	4607      	mov	r7, r0
 80032ca:	2300      	movs	r3, #0
 80032cc:	4620      	mov	r0, r4
 80032ce:	4629      	mov	r1, r5
 80032d0:	f7fd fc04 	bl	8000adc <__aeabi_dcmplt>
 80032d4:	b140      	cbz	r0, 80032e8 <_dtoa_r+0x168>
 80032d6:	4638      	mov	r0, r7
 80032d8:	f7fd f924 	bl	8000524 <__aeabi_i2d>
 80032dc:	4622      	mov	r2, r4
 80032de:	462b      	mov	r3, r5
 80032e0:	f7fd fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80032e4:	b900      	cbnz	r0, 80032e8 <_dtoa_r+0x168>
 80032e6:	3f01      	subs	r7, #1
 80032e8:	2f16      	cmp	r7, #22
 80032ea:	d852      	bhi.n	8003392 <_dtoa_r+0x212>
 80032ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003464 <_dtoa_r+0x2e4>)
 80032ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032fa:	f7fd fbef 	bl	8000adc <__aeabi_dcmplt>
 80032fe:	2800      	cmp	r0, #0
 8003300:	d049      	beq.n	8003396 <_dtoa_r+0x216>
 8003302:	3f01      	subs	r7, #1
 8003304:	2300      	movs	r3, #0
 8003306:	9310      	str	r3, [sp, #64]	@ 0x40
 8003308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800330a:	1b9b      	subs	r3, r3, r6
 800330c:	1e5a      	subs	r2, r3, #1
 800330e:	bf45      	ittet	mi
 8003310:	f1c3 0301 	rsbmi	r3, r3, #1
 8003314:	9300      	strmi	r3, [sp, #0]
 8003316:	2300      	movpl	r3, #0
 8003318:	2300      	movmi	r3, #0
 800331a:	9206      	str	r2, [sp, #24]
 800331c:	bf54      	ite	pl
 800331e:	9300      	strpl	r3, [sp, #0]
 8003320:	9306      	strmi	r3, [sp, #24]
 8003322:	2f00      	cmp	r7, #0
 8003324:	db39      	blt.n	800339a <_dtoa_r+0x21a>
 8003326:	9b06      	ldr	r3, [sp, #24]
 8003328:	970d      	str	r7, [sp, #52]	@ 0x34
 800332a:	443b      	add	r3, r7
 800332c:	9306      	str	r3, [sp, #24]
 800332e:	2300      	movs	r3, #0
 8003330:	9308      	str	r3, [sp, #32]
 8003332:	9b07      	ldr	r3, [sp, #28]
 8003334:	2b09      	cmp	r3, #9
 8003336:	d863      	bhi.n	8003400 <_dtoa_r+0x280>
 8003338:	2b05      	cmp	r3, #5
 800333a:	bfc4      	itt	gt
 800333c:	3b04      	subgt	r3, #4
 800333e:	9307      	strgt	r3, [sp, #28]
 8003340:	9b07      	ldr	r3, [sp, #28]
 8003342:	f1a3 0302 	sub.w	r3, r3, #2
 8003346:	bfcc      	ite	gt
 8003348:	2400      	movgt	r4, #0
 800334a:	2401      	movle	r4, #1
 800334c:	2b03      	cmp	r3, #3
 800334e:	d863      	bhi.n	8003418 <_dtoa_r+0x298>
 8003350:	e8df f003 	tbb	[pc, r3]
 8003354:	2b375452 	.word	0x2b375452
 8003358:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800335c:	441e      	add	r6, r3
 800335e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003362:	2b20      	cmp	r3, #32
 8003364:	bfc1      	itttt	gt
 8003366:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800336a:	409f      	lslgt	r7, r3
 800336c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003370:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003374:	bfd6      	itet	le
 8003376:	f1c3 0320 	rsble	r3, r3, #32
 800337a:	ea47 0003 	orrgt.w	r0, r7, r3
 800337e:	fa04 f003 	lslle.w	r0, r4, r3
 8003382:	f7fd f8bf 	bl	8000504 <__aeabi_ui2d>
 8003386:	2201      	movs	r2, #1
 8003388:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800338c:	3e01      	subs	r6, #1
 800338e:	9212      	str	r2, [sp, #72]	@ 0x48
 8003390:	e776      	b.n	8003280 <_dtoa_r+0x100>
 8003392:	2301      	movs	r3, #1
 8003394:	e7b7      	b.n	8003306 <_dtoa_r+0x186>
 8003396:	9010      	str	r0, [sp, #64]	@ 0x40
 8003398:	e7b6      	b.n	8003308 <_dtoa_r+0x188>
 800339a:	9b00      	ldr	r3, [sp, #0]
 800339c:	1bdb      	subs	r3, r3, r7
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	427b      	negs	r3, r7
 80033a2:	9308      	str	r3, [sp, #32]
 80033a4:	2300      	movs	r3, #0
 80033a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80033a8:	e7c3      	b.n	8003332 <_dtoa_r+0x1b2>
 80033aa:	2301      	movs	r3, #1
 80033ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80033ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80033b0:	eb07 0b03 	add.w	fp, r7, r3
 80033b4:	f10b 0301 	add.w	r3, fp, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	9303      	str	r3, [sp, #12]
 80033bc:	bfb8      	it	lt
 80033be:	2301      	movlt	r3, #1
 80033c0:	e006      	b.n	80033d0 <_dtoa_r+0x250>
 80033c2:	2301      	movs	r3, #1
 80033c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80033c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	dd28      	ble.n	800341e <_dtoa_r+0x29e>
 80033cc:	469b      	mov	fp, r3
 80033ce:	9303      	str	r3, [sp, #12]
 80033d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80033d4:	2100      	movs	r1, #0
 80033d6:	2204      	movs	r2, #4
 80033d8:	f102 0514 	add.w	r5, r2, #20
 80033dc:	429d      	cmp	r5, r3
 80033de:	d926      	bls.n	800342e <_dtoa_r+0x2ae>
 80033e0:	6041      	str	r1, [r0, #4]
 80033e2:	4648      	mov	r0, r9
 80033e4:	f000 fd9c 	bl	8003f20 <_Balloc>
 80033e8:	4682      	mov	sl, r0
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d142      	bne.n	8003474 <_dtoa_r+0x2f4>
 80033ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <_dtoa_r+0x2e8>)
 80033f0:	4602      	mov	r2, r0
 80033f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80033f6:	e6da      	b.n	80031ae <_dtoa_r+0x2e>
 80033f8:	2300      	movs	r3, #0
 80033fa:	e7e3      	b.n	80033c4 <_dtoa_r+0x244>
 80033fc:	2300      	movs	r3, #0
 80033fe:	e7d5      	b.n	80033ac <_dtoa_r+0x22c>
 8003400:	2401      	movs	r4, #1
 8003402:	2300      	movs	r3, #0
 8003404:	9307      	str	r3, [sp, #28]
 8003406:	9409      	str	r4, [sp, #36]	@ 0x24
 8003408:	f04f 3bff 	mov.w	fp, #4294967295
 800340c:	2200      	movs	r2, #0
 800340e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003412:	2312      	movs	r3, #18
 8003414:	920c      	str	r2, [sp, #48]	@ 0x30
 8003416:	e7db      	b.n	80033d0 <_dtoa_r+0x250>
 8003418:	2301      	movs	r3, #1
 800341a:	9309      	str	r3, [sp, #36]	@ 0x24
 800341c:	e7f4      	b.n	8003408 <_dtoa_r+0x288>
 800341e:	f04f 0b01 	mov.w	fp, #1
 8003422:	f8cd b00c 	str.w	fp, [sp, #12]
 8003426:	465b      	mov	r3, fp
 8003428:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800342c:	e7d0      	b.n	80033d0 <_dtoa_r+0x250>
 800342e:	3101      	adds	r1, #1
 8003430:	0052      	lsls	r2, r2, #1
 8003432:	e7d1      	b.n	80033d8 <_dtoa_r+0x258>
 8003434:	f3af 8000 	nop.w
 8003438:	636f4361 	.word	0x636f4361
 800343c:	3fd287a7 	.word	0x3fd287a7
 8003440:	8b60c8b3 	.word	0x8b60c8b3
 8003444:	3fc68a28 	.word	0x3fc68a28
 8003448:	509f79fb 	.word	0x509f79fb
 800344c:	3fd34413 	.word	0x3fd34413
 8003450:	08004c53 	.word	0x08004c53
 8003454:	08004c6a 	.word	0x08004c6a
 8003458:	7ff00000 	.word	0x7ff00000
 800345c:	08004c23 	.word	0x08004c23
 8003460:	3ff80000 	.word	0x3ff80000
 8003464:	08004db8 	.word	0x08004db8
 8003468:	08004cc2 	.word	0x08004cc2
 800346c:	08004c4f 	.word	0x08004c4f
 8003470:	08004c22 	.word	0x08004c22
 8003474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003478:	6018      	str	r0, [r3, #0]
 800347a:	9b03      	ldr	r3, [sp, #12]
 800347c:	2b0e      	cmp	r3, #14
 800347e:	f200 80a1 	bhi.w	80035c4 <_dtoa_r+0x444>
 8003482:	2c00      	cmp	r4, #0
 8003484:	f000 809e 	beq.w	80035c4 <_dtoa_r+0x444>
 8003488:	2f00      	cmp	r7, #0
 800348a:	dd33      	ble.n	80034f4 <_dtoa_r+0x374>
 800348c:	4b9c      	ldr	r3, [pc, #624]	@ (8003700 <_dtoa_r+0x580>)
 800348e:	f007 020f 	and.w	r2, r7, #15
 8003492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003496:	ed93 7b00 	vldr	d7, [r3]
 800349a:	05f8      	lsls	r0, r7, #23
 800349c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80034a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80034a4:	d516      	bpl.n	80034d4 <_dtoa_r+0x354>
 80034a6:	4b97      	ldr	r3, [pc, #604]	@ (8003704 <_dtoa_r+0x584>)
 80034a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80034ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034b0:	f7fd f9cc 	bl	800084c <__aeabi_ddiv>
 80034b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034b8:	f004 040f 	and.w	r4, r4, #15
 80034bc:	2603      	movs	r6, #3
 80034be:	4d91      	ldr	r5, [pc, #580]	@ (8003704 <_dtoa_r+0x584>)
 80034c0:	b954      	cbnz	r4, 80034d8 <_dtoa_r+0x358>
 80034c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80034c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034ca:	f7fd f9bf 	bl	800084c <__aeabi_ddiv>
 80034ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034d2:	e028      	b.n	8003526 <_dtoa_r+0x3a6>
 80034d4:	2602      	movs	r6, #2
 80034d6:	e7f2      	b.n	80034be <_dtoa_r+0x33e>
 80034d8:	07e1      	lsls	r1, r4, #31
 80034da:	d508      	bpl.n	80034ee <_dtoa_r+0x36e>
 80034dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80034e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80034e4:	f7fd f888 	bl	80005f8 <__aeabi_dmul>
 80034e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80034ec:	3601      	adds	r6, #1
 80034ee:	1064      	asrs	r4, r4, #1
 80034f0:	3508      	adds	r5, #8
 80034f2:	e7e5      	b.n	80034c0 <_dtoa_r+0x340>
 80034f4:	f000 80af 	beq.w	8003656 <_dtoa_r+0x4d6>
 80034f8:	427c      	negs	r4, r7
 80034fa:	4b81      	ldr	r3, [pc, #516]	@ (8003700 <_dtoa_r+0x580>)
 80034fc:	4d81      	ldr	r5, [pc, #516]	@ (8003704 <_dtoa_r+0x584>)
 80034fe:	f004 020f 	and.w	r2, r4, #15
 8003502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800350e:	f7fd f873 	bl	80005f8 <__aeabi_dmul>
 8003512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003516:	1124      	asrs	r4, r4, #4
 8003518:	2300      	movs	r3, #0
 800351a:	2602      	movs	r6, #2
 800351c:	2c00      	cmp	r4, #0
 800351e:	f040 808f 	bne.w	8003640 <_dtoa_r+0x4c0>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1d3      	bne.n	80034ce <_dtoa_r+0x34e>
 8003526:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003528:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8094 	beq.w	800365a <_dtoa_r+0x4da>
 8003532:	4b75      	ldr	r3, [pc, #468]	@ (8003708 <_dtoa_r+0x588>)
 8003534:	2200      	movs	r2, #0
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f7fd facf 	bl	8000adc <__aeabi_dcmplt>
 800353e:	2800      	cmp	r0, #0
 8003540:	f000 808b 	beq.w	800365a <_dtoa_r+0x4da>
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8087 	beq.w	800365a <_dtoa_r+0x4da>
 800354c:	f1bb 0f00 	cmp.w	fp, #0
 8003550:	dd34      	ble.n	80035bc <_dtoa_r+0x43c>
 8003552:	4620      	mov	r0, r4
 8003554:	4b6d      	ldr	r3, [pc, #436]	@ (800370c <_dtoa_r+0x58c>)
 8003556:	2200      	movs	r2, #0
 8003558:	4629      	mov	r1, r5
 800355a:	f7fd f84d 	bl	80005f8 <__aeabi_dmul>
 800355e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003562:	f107 38ff 	add.w	r8, r7, #4294967295
 8003566:	3601      	adds	r6, #1
 8003568:	465c      	mov	r4, fp
 800356a:	4630      	mov	r0, r6
 800356c:	f7fc ffda 	bl	8000524 <__aeabi_i2d>
 8003570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003574:	f7fd f840 	bl	80005f8 <__aeabi_dmul>
 8003578:	4b65      	ldr	r3, [pc, #404]	@ (8003710 <_dtoa_r+0x590>)
 800357a:	2200      	movs	r2, #0
 800357c:	f7fc fe86 	bl	800028c <__adddf3>
 8003580:	4605      	mov	r5, r0
 8003582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003586:	2c00      	cmp	r4, #0
 8003588:	d16a      	bne.n	8003660 <_dtoa_r+0x4e0>
 800358a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800358e:	4b61      	ldr	r3, [pc, #388]	@ (8003714 <_dtoa_r+0x594>)
 8003590:	2200      	movs	r2, #0
 8003592:	f7fc fe79 	bl	8000288 <__aeabi_dsub>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800359e:	462a      	mov	r2, r5
 80035a0:	4633      	mov	r3, r6
 80035a2:	f7fd fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	f040 8298 	bne.w	8003adc <_dtoa_r+0x95c>
 80035ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035b0:	462a      	mov	r2, r5
 80035b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80035b6:	f7fd fa91 	bl	8000adc <__aeabi_dcmplt>
 80035ba:	bb38      	cbnz	r0, 800360c <_dtoa_r+0x48c>
 80035bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80035c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80035c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f2c0 8157 	blt.w	800387a <_dtoa_r+0x6fa>
 80035cc:	2f0e      	cmp	r7, #14
 80035ce:	f300 8154 	bgt.w	800387a <_dtoa_r+0x6fa>
 80035d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003700 <_dtoa_r+0x580>)
 80035d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80035d8:	ed93 7b00 	vldr	d7, [r3]
 80035dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80035de:	2b00      	cmp	r3, #0
 80035e0:	ed8d 7b00 	vstr	d7, [sp]
 80035e4:	f280 80e5 	bge.w	80037b2 <_dtoa_r+0x632>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f300 80e1 	bgt.w	80037b2 <_dtoa_r+0x632>
 80035f0:	d10c      	bne.n	800360c <_dtoa_r+0x48c>
 80035f2:	4b48      	ldr	r3, [pc, #288]	@ (8003714 <_dtoa_r+0x594>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	ec51 0b17 	vmov	r0, r1, d7
 80035fa:	f7fc fffd 	bl	80005f8 <__aeabi_dmul>
 80035fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003602:	f7fd fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8003606:	2800      	cmp	r0, #0
 8003608:	f000 8266 	beq.w	8003ad8 <_dtoa_r+0x958>
 800360c:	2400      	movs	r4, #0
 800360e:	4625      	mov	r5, r4
 8003610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003612:	4656      	mov	r6, sl
 8003614:	ea6f 0803 	mvn.w	r8, r3
 8003618:	2700      	movs	r7, #0
 800361a:	4621      	mov	r1, r4
 800361c:	4648      	mov	r0, r9
 800361e:	f000 fcbf 	bl	8003fa0 <_Bfree>
 8003622:	2d00      	cmp	r5, #0
 8003624:	f000 80bd 	beq.w	80037a2 <_dtoa_r+0x622>
 8003628:	b12f      	cbz	r7, 8003636 <_dtoa_r+0x4b6>
 800362a:	42af      	cmp	r7, r5
 800362c:	d003      	beq.n	8003636 <_dtoa_r+0x4b6>
 800362e:	4639      	mov	r1, r7
 8003630:	4648      	mov	r0, r9
 8003632:	f000 fcb5 	bl	8003fa0 <_Bfree>
 8003636:	4629      	mov	r1, r5
 8003638:	4648      	mov	r0, r9
 800363a:	f000 fcb1 	bl	8003fa0 <_Bfree>
 800363e:	e0b0      	b.n	80037a2 <_dtoa_r+0x622>
 8003640:	07e2      	lsls	r2, r4, #31
 8003642:	d505      	bpl.n	8003650 <_dtoa_r+0x4d0>
 8003644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003648:	f7fc ffd6 	bl	80005f8 <__aeabi_dmul>
 800364c:	3601      	adds	r6, #1
 800364e:	2301      	movs	r3, #1
 8003650:	1064      	asrs	r4, r4, #1
 8003652:	3508      	adds	r5, #8
 8003654:	e762      	b.n	800351c <_dtoa_r+0x39c>
 8003656:	2602      	movs	r6, #2
 8003658:	e765      	b.n	8003526 <_dtoa_r+0x3a6>
 800365a:	9c03      	ldr	r4, [sp, #12]
 800365c:	46b8      	mov	r8, r7
 800365e:	e784      	b.n	800356a <_dtoa_r+0x3ea>
 8003660:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <_dtoa_r+0x580>)
 8003662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800366c:	4454      	add	r4, sl
 800366e:	2900      	cmp	r1, #0
 8003670:	d054      	beq.n	800371c <_dtoa_r+0x59c>
 8003672:	4929      	ldr	r1, [pc, #164]	@ (8003718 <_dtoa_r+0x598>)
 8003674:	2000      	movs	r0, #0
 8003676:	f7fd f8e9 	bl	800084c <__aeabi_ddiv>
 800367a:	4633      	mov	r3, r6
 800367c:	462a      	mov	r2, r5
 800367e:	f7fc fe03 	bl	8000288 <__aeabi_dsub>
 8003682:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003686:	4656      	mov	r6, sl
 8003688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800368c:	f7fd fa64 	bl	8000b58 <__aeabi_d2iz>
 8003690:	4605      	mov	r5, r0
 8003692:	f7fc ff47 	bl	8000524 <__aeabi_i2d>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800369e:	f7fc fdf3 	bl	8000288 <__aeabi_dsub>
 80036a2:	3530      	adds	r5, #48	@ 0x30
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036ac:	f806 5b01 	strb.w	r5, [r6], #1
 80036b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80036b4:	f7fd fa12 	bl	8000adc <__aeabi_dcmplt>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d172      	bne.n	80037a2 <_dtoa_r+0x622>
 80036bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036c0:	4911      	ldr	r1, [pc, #68]	@ (8003708 <_dtoa_r+0x588>)
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7fc fde0 	bl	8000288 <__aeabi_dsub>
 80036c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80036cc:	f7fd fa06 	bl	8000adc <__aeabi_dcmplt>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	f040 80b4 	bne.w	800383e <_dtoa_r+0x6be>
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	f43f af70 	beq.w	80035bc <_dtoa_r+0x43c>
 80036dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <_dtoa_r+0x58c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	f7fc ff88 	bl	80005f8 <__aeabi_dmul>
 80036e8:	4b08      	ldr	r3, [pc, #32]	@ (800370c <_dtoa_r+0x58c>)
 80036ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80036ee:	2200      	movs	r2, #0
 80036f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036f4:	f7fc ff80 	bl	80005f8 <__aeabi_dmul>
 80036f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036fc:	e7c4      	b.n	8003688 <_dtoa_r+0x508>
 80036fe:	bf00      	nop
 8003700:	08004db8 	.word	0x08004db8
 8003704:	08004d90 	.word	0x08004d90
 8003708:	3ff00000 	.word	0x3ff00000
 800370c:	40240000 	.word	0x40240000
 8003710:	401c0000 	.word	0x401c0000
 8003714:	40140000 	.word	0x40140000
 8003718:	3fe00000 	.word	0x3fe00000
 800371c:	4631      	mov	r1, r6
 800371e:	4628      	mov	r0, r5
 8003720:	f7fc ff6a 	bl	80005f8 <__aeabi_dmul>
 8003724:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003728:	9413      	str	r4, [sp, #76]	@ 0x4c
 800372a:	4656      	mov	r6, sl
 800372c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003730:	f7fd fa12 	bl	8000b58 <__aeabi_d2iz>
 8003734:	4605      	mov	r5, r0
 8003736:	f7fc fef5 	bl	8000524 <__aeabi_i2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003742:	f7fc fda1 	bl	8000288 <__aeabi_dsub>
 8003746:	3530      	adds	r5, #48	@ 0x30
 8003748:	f806 5b01 	strb.w	r5, [r6], #1
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	42a6      	cmp	r6, r4
 8003752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	d124      	bne.n	80037a6 <_dtoa_r+0x626>
 800375c:	4baf      	ldr	r3, [pc, #700]	@ (8003a1c <_dtoa_r+0x89c>)
 800375e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003762:	f7fc fd93 	bl	800028c <__adddf3>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800376e:	f7fd f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8003772:	2800      	cmp	r0, #0
 8003774:	d163      	bne.n	800383e <_dtoa_r+0x6be>
 8003776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800377a:	49a8      	ldr	r1, [pc, #672]	@ (8003a1c <_dtoa_r+0x89c>)
 800377c:	2000      	movs	r0, #0
 800377e:	f7fc fd83 	bl	8000288 <__aeabi_dsub>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800378a:	f7fd f9a7 	bl	8000adc <__aeabi_dcmplt>
 800378e:	2800      	cmp	r0, #0
 8003790:	f43f af14 	beq.w	80035bc <_dtoa_r+0x43c>
 8003794:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003796:	1e73      	subs	r3, r6, #1
 8003798:	9313      	str	r3, [sp, #76]	@ 0x4c
 800379a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800379e:	2b30      	cmp	r3, #48	@ 0x30
 80037a0:	d0f8      	beq.n	8003794 <_dtoa_r+0x614>
 80037a2:	4647      	mov	r7, r8
 80037a4:	e03b      	b.n	800381e <_dtoa_r+0x69e>
 80037a6:	4b9e      	ldr	r3, [pc, #632]	@ (8003a20 <_dtoa_r+0x8a0>)
 80037a8:	f7fc ff26 	bl	80005f8 <__aeabi_dmul>
 80037ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037b0:	e7bc      	b.n	800372c <_dtoa_r+0x5ac>
 80037b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80037b6:	4656      	mov	r6, sl
 80037b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fd f844 	bl	800084c <__aeabi_ddiv>
 80037c4:	f7fd f9c8 	bl	8000b58 <__aeabi_d2iz>
 80037c8:	4680      	mov	r8, r0
 80037ca:	f7fc feab 	bl	8000524 <__aeabi_i2d>
 80037ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037d2:	f7fc ff11 	bl	80005f8 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4620      	mov	r0, r4
 80037dc:	4629      	mov	r1, r5
 80037de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80037e2:	f7fc fd51 	bl	8000288 <__aeabi_dsub>
 80037e6:	f806 4b01 	strb.w	r4, [r6], #1
 80037ea:	9d03      	ldr	r5, [sp, #12]
 80037ec:	eba6 040a 	sub.w	r4, r6, sl
 80037f0:	42a5      	cmp	r5, r4
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	d133      	bne.n	8003860 <_dtoa_r+0x6e0>
 80037f8:	f7fc fd48 	bl	800028c <__adddf3>
 80037fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
 8003804:	f7fd f988 	bl	8000b18 <__aeabi_dcmpgt>
 8003808:	b9c0      	cbnz	r0, 800383c <_dtoa_r+0x6bc>
 800380a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800380e:	4620      	mov	r0, r4
 8003810:	4629      	mov	r1, r5
 8003812:	f7fd f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8003816:	b110      	cbz	r0, 800381e <_dtoa_r+0x69e>
 8003818:	f018 0f01 	tst.w	r8, #1
 800381c:	d10e      	bne.n	800383c <_dtoa_r+0x6bc>
 800381e:	9902      	ldr	r1, [sp, #8]
 8003820:	4648      	mov	r0, r9
 8003822:	f000 fbbd 	bl	8003fa0 <_Bfree>
 8003826:	2300      	movs	r3, #0
 8003828:	7033      	strb	r3, [r6, #0]
 800382a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800382c:	3701      	adds	r7, #1
 800382e:	601f      	str	r7, [r3, #0]
 8003830:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 824b 	beq.w	8003cce <_dtoa_r+0xb4e>
 8003838:	601e      	str	r6, [r3, #0]
 800383a:	e248      	b.n	8003cce <_dtoa_r+0xb4e>
 800383c:	46b8      	mov	r8, r7
 800383e:	4633      	mov	r3, r6
 8003840:	461e      	mov	r6, r3
 8003842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003846:	2a39      	cmp	r2, #57	@ 0x39
 8003848:	d106      	bne.n	8003858 <_dtoa_r+0x6d8>
 800384a:	459a      	cmp	sl, r3
 800384c:	d1f8      	bne.n	8003840 <_dtoa_r+0x6c0>
 800384e:	2230      	movs	r2, #48	@ 0x30
 8003850:	f108 0801 	add.w	r8, r8, #1
 8003854:	f88a 2000 	strb.w	r2, [sl]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	3201      	adds	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e7a0      	b.n	80037a2 <_dtoa_r+0x622>
 8003860:	4b6f      	ldr	r3, [pc, #444]	@ (8003a20 <_dtoa_r+0x8a0>)
 8003862:	2200      	movs	r2, #0
 8003864:	f7fc fec8 	bl	80005f8 <__aeabi_dmul>
 8003868:	2200      	movs	r2, #0
 800386a:	2300      	movs	r3, #0
 800386c:	4604      	mov	r4, r0
 800386e:	460d      	mov	r5, r1
 8003870:	f7fd f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003874:	2800      	cmp	r0, #0
 8003876:	d09f      	beq.n	80037b8 <_dtoa_r+0x638>
 8003878:	e7d1      	b.n	800381e <_dtoa_r+0x69e>
 800387a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800387c:	2a00      	cmp	r2, #0
 800387e:	f000 80ea 	beq.w	8003a56 <_dtoa_r+0x8d6>
 8003882:	9a07      	ldr	r2, [sp, #28]
 8003884:	2a01      	cmp	r2, #1
 8003886:	f300 80cd 	bgt.w	8003a24 <_dtoa_r+0x8a4>
 800388a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800388c:	2a00      	cmp	r2, #0
 800388e:	f000 80c1 	beq.w	8003a14 <_dtoa_r+0x894>
 8003892:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003896:	9c08      	ldr	r4, [sp, #32]
 8003898:	9e00      	ldr	r6, [sp, #0]
 800389a:	9a00      	ldr	r2, [sp, #0]
 800389c:	441a      	add	r2, r3
 800389e:	9200      	str	r2, [sp, #0]
 80038a0:	9a06      	ldr	r2, [sp, #24]
 80038a2:	2101      	movs	r1, #1
 80038a4:	441a      	add	r2, r3
 80038a6:	4648      	mov	r0, r9
 80038a8:	9206      	str	r2, [sp, #24]
 80038aa:	f000 fc2d 	bl	8004108 <__i2b>
 80038ae:	4605      	mov	r5, r0
 80038b0:	b166      	cbz	r6, 80038cc <_dtoa_r+0x74c>
 80038b2:	9b06      	ldr	r3, [sp, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dd09      	ble.n	80038cc <_dtoa_r+0x74c>
 80038b8:	42b3      	cmp	r3, r6
 80038ba:	9a00      	ldr	r2, [sp, #0]
 80038bc:	bfa8      	it	ge
 80038be:	4633      	movge	r3, r6
 80038c0:	1ad2      	subs	r2, r2, r3
 80038c2:	9200      	str	r2, [sp, #0]
 80038c4:	9a06      	ldr	r2, [sp, #24]
 80038c6:	1af6      	subs	r6, r6, r3
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	9306      	str	r3, [sp, #24]
 80038cc:	9b08      	ldr	r3, [sp, #32]
 80038ce:	b30b      	cbz	r3, 8003914 <_dtoa_r+0x794>
 80038d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80c6 	beq.w	8003a64 <_dtoa_r+0x8e4>
 80038d8:	2c00      	cmp	r4, #0
 80038da:	f000 80c0 	beq.w	8003a5e <_dtoa_r+0x8de>
 80038de:	4629      	mov	r1, r5
 80038e0:	4622      	mov	r2, r4
 80038e2:	4648      	mov	r0, r9
 80038e4:	f000 fcc8 	bl	8004278 <__pow5mult>
 80038e8:	9a02      	ldr	r2, [sp, #8]
 80038ea:	4601      	mov	r1, r0
 80038ec:	4605      	mov	r5, r0
 80038ee:	4648      	mov	r0, r9
 80038f0:	f000 fc20 	bl	8004134 <__multiply>
 80038f4:	9902      	ldr	r1, [sp, #8]
 80038f6:	4680      	mov	r8, r0
 80038f8:	4648      	mov	r0, r9
 80038fa:	f000 fb51 	bl	8003fa0 <_Bfree>
 80038fe:	9b08      	ldr	r3, [sp, #32]
 8003900:	1b1b      	subs	r3, r3, r4
 8003902:	9308      	str	r3, [sp, #32]
 8003904:	f000 80b1 	beq.w	8003a6a <_dtoa_r+0x8ea>
 8003908:	9a08      	ldr	r2, [sp, #32]
 800390a:	4641      	mov	r1, r8
 800390c:	4648      	mov	r0, r9
 800390e:	f000 fcb3 	bl	8004278 <__pow5mult>
 8003912:	9002      	str	r0, [sp, #8]
 8003914:	2101      	movs	r1, #1
 8003916:	4648      	mov	r0, r9
 8003918:	f000 fbf6 	bl	8004108 <__i2b>
 800391c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800391e:	4604      	mov	r4, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 81d8 	beq.w	8003cd6 <_dtoa_r+0xb56>
 8003926:	461a      	mov	r2, r3
 8003928:	4601      	mov	r1, r0
 800392a:	4648      	mov	r0, r9
 800392c:	f000 fca4 	bl	8004278 <__pow5mult>
 8003930:	9b07      	ldr	r3, [sp, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	4604      	mov	r4, r0
 8003936:	f300 809f 	bgt.w	8003a78 <_dtoa_r+0x8f8>
 800393a:	9b04      	ldr	r3, [sp, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 8097 	bne.w	8003a70 <_dtoa_r+0x8f0>
 8003942:	9b05      	ldr	r3, [sp, #20]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 8093 	bne.w	8003a74 <_dtoa_r+0x8f4>
 800394e:	9b05      	ldr	r3, [sp, #20]
 8003950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003954:	0d1b      	lsrs	r3, r3, #20
 8003956:	051b      	lsls	r3, r3, #20
 8003958:	b133      	cbz	r3, 8003968 <_dtoa_r+0x7e8>
 800395a:	9b00      	ldr	r3, [sp, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	9b06      	ldr	r3, [sp, #24]
 8003962:	3301      	adds	r3, #1
 8003964:	9306      	str	r3, [sp, #24]
 8003966:	2301      	movs	r3, #1
 8003968:	9308      	str	r3, [sp, #32]
 800396a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 81b8 	beq.w	8003ce2 <_dtoa_r+0xb62>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003978:	6918      	ldr	r0, [r3, #16]
 800397a:	f000 fb79 	bl	8004070 <__hi0bits>
 800397e:	f1c0 0020 	rsb	r0, r0, #32
 8003982:	9b06      	ldr	r3, [sp, #24]
 8003984:	4418      	add	r0, r3
 8003986:	f010 001f 	ands.w	r0, r0, #31
 800398a:	f000 8082 	beq.w	8003a92 <_dtoa_r+0x912>
 800398e:	f1c0 0320 	rsb	r3, r0, #32
 8003992:	2b04      	cmp	r3, #4
 8003994:	dd73      	ble.n	8003a7e <_dtoa_r+0x8fe>
 8003996:	9b00      	ldr	r3, [sp, #0]
 8003998:	f1c0 001c 	rsb	r0, r0, #28
 800399c:	4403      	add	r3, r0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	9b06      	ldr	r3, [sp, #24]
 80039a2:	4403      	add	r3, r0
 80039a4:	4406      	add	r6, r0
 80039a6:	9306      	str	r3, [sp, #24]
 80039a8:	9b00      	ldr	r3, [sp, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	dd05      	ble.n	80039ba <_dtoa_r+0x83a>
 80039ae:	9902      	ldr	r1, [sp, #8]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4648      	mov	r0, r9
 80039b4:	f000 fcba 	bl	800432c <__lshift>
 80039b8:	9002      	str	r0, [sp, #8]
 80039ba:	9b06      	ldr	r3, [sp, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	dd05      	ble.n	80039cc <_dtoa_r+0x84c>
 80039c0:	4621      	mov	r1, r4
 80039c2:	461a      	mov	r2, r3
 80039c4:	4648      	mov	r0, r9
 80039c6:	f000 fcb1 	bl	800432c <__lshift>
 80039ca:	4604      	mov	r4, r0
 80039cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d061      	beq.n	8003a96 <_dtoa_r+0x916>
 80039d2:	9802      	ldr	r0, [sp, #8]
 80039d4:	4621      	mov	r1, r4
 80039d6:	f000 fd15 	bl	8004404 <__mcmp>
 80039da:	2800      	cmp	r0, #0
 80039dc:	da5b      	bge.n	8003a96 <_dtoa_r+0x916>
 80039de:	2300      	movs	r3, #0
 80039e0:	9902      	ldr	r1, [sp, #8]
 80039e2:	220a      	movs	r2, #10
 80039e4:	4648      	mov	r0, r9
 80039e6:	f000 fafd 	bl	8003fe4 <__multadd>
 80039ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039ec:	9002      	str	r0, [sp, #8]
 80039ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8177 	beq.w	8003ce6 <_dtoa_r+0xb66>
 80039f8:	4629      	mov	r1, r5
 80039fa:	2300      	movs	r3, #0
 80039fc:	220a      	movs	r2, #10
 80039fe:	4648      	mov	r0, r9
 8003a00:	f000 faf0 	bl	8003fe4 <__multadd>
 8003a04:	f1bb 0f00 	cmp.w	fp, #0
 8003a08:	4605      	mov	r5, r0
 8003a0a:	dc6f      	bgt.n	8003aec <_dtoa_r+0x96c>
 8003a0c:	9b07      	ldr	r3, [sp, #28]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	dc49      	bgt.n	8003aa6 <_dtoa_r+0x926>
 8003a12:	e06b      	b.n	8003aec <_dtoa_r+0x96c>
 8003a14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003a1a:	e73c      	b.n	8003896 <_dtoa_r+0x716>
 8003a1c:	3fe00000 	.word	0x3fe00000
 8003a20:	40240000 	.word	0x40240000
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	1e5c      	subs	r4, r3, #1
 8003a28:	9b08      	ldr	r3, [sp, #32]
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	db09      	blt.n	8003a42 <_dtoa_r+0x8c2>
 8003a2e:	1b1c      	subs	r4, r3, r4
 8003a30:	9b03      	ldr	r3, [sp, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f6bf af30 	bge.w	8003898 <_dtoa_r+0x718>
 8003a38:	9b00      	ldr	r3, [sp, #0]
 8003a3a:	9a03      	ldr	r2, [sp, #12]
 8003a3c:	1a9e      	subs	r6, r3, r2
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e72b      	b.n	800389a <_dtoa_r+0x71a>
 8003a42:	9b08      	ldr	r3, [sp, #32]
 8003a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003a46:	9408      	str	r4, [sp, #32]
 8003a48:	1ae3      	subs	r3, r4, r3
 8003a4a:	441a      	add	r2, r3
 8003a4c:	9e00      	ldr	r6, [sp, #0]
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	920d      	str	r2, [sp, #52]	@ 0x34
 8003a52:	2400      	movs	r4, #0
 8003a54:	e721      	b.n	800389a <_dtoa_r+0x71a>
 8003a56:	9c08      	ldr	r4, [sp, #32]
 8003a58:	9e00      	ldr	r6, [sp, #0]
 8003a5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003a5c:	e728      	b.n	80038b0 <_dtoa_r+0x730>
 8003a5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003a62:	e751      	b.n	8003908 <_dtoa_r+0x788>
 8003a64:	9a08      	ldr	r2, [sp, #32]
 8003a66:	9902      	ldr	r1, [sp, #8]
 8003a68:	e750      	b.n	800390c <_dtoa_r+0x78c>
 8003a6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8003a6e:	e751      	b.n	8003914 <_dtoa_r+0x794>
 8003a70:	2300      	movs	r3, #0
 8003a72:	e779      	b.n	8003968 <_dtoa_r+0x7e8>
 8003a74:	9b04      	ldr	r3, [sp, #16]
 8003a76:	e777      	b.n	8003968 <_dtoa_r+0x7e8>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9308      	str	r3, [sp, #32]
 8003a7c:	e779      	b.n	8003972 <_dtoa_r+0x7f2>
 8003a7e:	d093      	beq.n	80039a8 <_dtoa_r+0x828>
 8003a80:	9a00      	ldr	r2, [sp, #0]
 8003a82:	331c      	adds	r3, #28
 8003a84:	441a      	add	r2, r3
 8003a86:	9200      	str	r2, [sp, #0]
 8003a88:	9a06      	ldr	r2, [sp, #24]
 8003a8a:	441a      	add	r2, r3
 8003a8c:	441e      	add	r6, r3
 8003a8e:	9206      	str	r2, [sp, #24]
 8003a90:	e78a      	b.n	80039a8 <_dtoa_r+0x828>
 8003a92:	4603      	mov	r3, r0
 8003a94:	e7f4      	b.n	8003a80 <_dtoa_r+0x900>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	46b8      	mov	r8, r7
 8003a9c:	dc20      	bgt.n	8003ae0 <_dtoa_r+0x960>
 8003a9e:	469b      	mov	fp, r3
 8003aa0:	9b07      	ldr	r3, [sp, #28]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	dd1e      	ble.n	8003ae4 <_dtoa_r+0x964>
 8003aa6:	f1bb 0f00 	cmp.w	fp, #0
 8003aaa:	f47f adb1 	bne.w	8003610 <_dtoa_r+0x490>
 8003aae:	4621      	mov	r1, r4
 8003ab0:	465b      	mov	r3, fp
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	4648      	mov	r0, r9
 8003ab6:	f000 fa95 	bl	8003fe4 <__multadd>
 8003aba:	4601      	mov	r1, r0
 8003abc:	4604      	mov	r4, r0
 8003abe:	9802      	ldr	r0, [sp, #8]
 8003ac0:	f000 fca0 	bl	8004404 <__mcmp>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f77f ada3 	ble.w	8003610 <_dtoa_r+0x490>
 8003aca:	4656      	mov	r6, sl
 8003acc:	2331      	movs	r3, #49	@ 0x31
 8003ace:	f806 3b01 	strb.w	r3, [r6], #1
 8003ad2:	f108 0801 	add.w	r8, r8, #1
 8003ad6:	e59f      	b.n	8003618 <_dtoa_r+0x498>
 8003ad8:	9c03      	ldr	r4, [sp, #12]
 8003ada:	46b8      	mov	r8, r7
 8003adc:	4625      	mov	r5, r4
 8003ade:	e7f4      	b.n	8003aca <_dtoa_r+0x94a>
 8003ae0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8101 	beq.w	8003cee <_dtoa_r+0xb6e>
 8003aec:	2e00      	cmp	r6, #0
 8003aee:	dd05      	ble.n	8003afc <_dtoa_r+0x97c>
 8003af0:	4629      	mov	r1, r5
 8003af2:	4632      	mov	r2, r6
 8003af4:	4648      	mov	r0, r9
 8003af6:	f000 fc19 	bl	800432c <__lshift>
 8003afa:	4605      	mov	r5, r0
 8003afc:	9b08      	ldr	r3, [sp, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d05c      	beq.n	8003bbc <_dtoa_r+0xa3c>
 8003b02:	6869      	ldr	r1, [r5, #4]
 8003b04:	4648      	mov	r0, r9
 8003b06:	f000 fa0b 	bl	8003f20 <_Balloc>
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	b928      	cbnz	r0, 8003b1a <_dtoa_r+0x99a>
 8003b0e:	4b82      	ldr	r3, [pc, #520]	@ (8003d18 <_dtoa_r+0xb98>)
 8003b10:	4602      	mov	r2, r0
 8003b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003b16:	f7ff bb4a 	b.w	80031ae <_dtoa_r+0x2e>
 8003b1a:	692a      	ldr	r2, [r5, #16]
 8003b1c:	3202      	adds	r2, #2
 8003b1e:	0092      	lsls	r2, r2, #2
 8003b20:	f105 010c 	add.w	r1, r5, #12
 8003b24:	300c      	adds	r0, #12
 8003b26:	f7ff fa92 	bl	800304e <memcpy>
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4648      	mov	r0, r9
 8003b30:	f000 fbfc 	bl	800432c <__lshift>
 8003b34:	f10a 0301 	add.w	r3, sl, #1
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	eb0a 030b 	add.w	r3, sl, fp
 8003b3e:	9308      	str	r3, [sp, #32]
 8003b40:	9b04      	ldr	r3, [sp, #16]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	462f      	mov	r7, r5
 8003b48:	9306      	str	r3, [sp, #24]
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	9b00      	ldr	r3, [sp, #0]
 8003b4e:	9802      	ldr	r0, [sp, #8]
 8003b50:	4621      	mov	r1, r4
 8003b52:	f103 3bff 	add.w	fp, r3, #4294967295
 8003b56:	f7ff fa88 	bl	800306a <quorem>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	3330      	adds	r3, #48	@ 0x30
 8003b5e:	9003      	str	r0, [sp, #12]
 8003b60:	4639      	mov	r1, r7
 8003b62:	9802      	ldr	r0, [sp, #8]
 8003b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b66:	f000 fc4d 	bl	8004404 <__mcmp>
 8003b6a:	462a      	mov	r2, r5
 8003b6c:	9004      	str	r0, [sp, #16]
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4648      	mov	r0, r9
 8003b72:	f000 fc63 	bl	800443c <__mdiff>
 8003b76:	68c2      	ldr	r2, [r0, #12]
 8003b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	bb02      	cbnz	r2, 8003bc0 <_dtoa_r+0xa40>
 8003b7e:	4601      	mov	r1, r0
 8003b80:	9802      	ldr	r0, [sp, #8]
 8003b82:	f000 fc3f 	bl	8004404 <__mcmp>
 8003b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4648      	mov	r0, r9
 8003b8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b92:	f000 fa05 	bl	8003fa0 <_Bfree>
 8003b96:	9b07      	ldr	r3, [sp, #28]
 8003b98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003b9a:	9e00      	ldr	r6, [sp, #0]
 8003b9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ba0:	9b06      	ldr	r3, [sp, #24]
 8003ba2:	4319      	orrs	r1, r3
 8003ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba6:	d10d      	bne.n	8003bc4 <_dtoa_r+0xa44>
 8003ba8:	2b39      	cmp	r3, #57	@ 0x39
 8003baa:	d027      	beq.n	8003bfc <_dtoa_r+0xa7c>
 8003bac:	9a04      	ldr	r2, [sp, #16]
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	dd01      	ble.n	8003bb6 <_dtoa_r+0xa36>
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	3331      	adds	r3, #49	@ 0x31
 8003bb6:	f88b 3000 	strb.w	r3, [fp]
 8003bba:	e52e      	b.n	800361a <_dtoa_r+0x49a>
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	e7b9      	b.n	8003b34 <_dtoa_r+0x9b4>
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	e7e2      	b.n	8003b8a <_dtoa_r+0xa0a>
 8003bc4:	9904      	ldr	r1, [sp, #16]
 8003bc6:	2900      	cmp	r1, #0
 8003bc8:	db04      	blt.n	8003bd4 <_dtoa_r+0xa54>
 8003bca:	9807      	ldr	r0, [sp, #28]
 8003bcc:	4301      	orrs	r1, r0
 8003bce:	9806      	ldr	r0, [sp, #24]
 8003bd0:	4301      	orrs	r1, r0
 8003bd2:	d120      	bne.n	8003c16 <_dtoa_r+0xa96>
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	ddee      	ble.n	8003bb6 <_dtoa_r+0xa36>
 8003bd8:	9902      	ldr	r1, [sp, #8]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	4648      	mov	r0, r9
 8003be0:	f000 fba4 	bl	800432c <__lshift>
 8003be4:	4621      	mov	r1, r4
 8003be6:	9002      	str	r0, [sp, #8]
 8003be8:	f000 fc0c 	bl	8004404 <__mcmp>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	9b00      	ldr	r3, [sp, #0]
 8003bf0:	dc02      	bgt.n	8003bf8 <_dtoa_r+0xa78>
 8003bf2:	d1e0      	bne.n	8003bb6 <_dtoa_r+0xa36>
 8003bf4:	07da      	lsls	r2, r3, #31
 8003bf6:	d5de      	bpl.n	8003bb6 <_dtoa_r+0xa36>
 8003bf8:	2b39      	cmp	r3, #57	@ 0x39
 8003bfa:	d1da      	bne.n	8003bb2 <_dtoa_r+0xa32>
 8003bfc:	2339      	movs	r3, #57	@ 0x39
 8003bfe:	f88b 3000 	strb.w	r3, [fp]
 8003c02:	4633      	mov	r3, r6
 8003c04:	461e      	mov	r6, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003c0c:	2a39      	cmp	r2, #57	@ 0x39
 8003c0e:	d04e      	beq.n	8003cae <_dtoa_r+0xb2e>
 8003c10:	3201      	adds	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e501      	b.n	800361a <_dtoa_r+0x49a>
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	dd03      	ble.n	8003c22 <_dtoa_r+0xaa2>
 8003c1a:	2b39      	cmp	r3, #57	@ 0x39
 8003c1c:	d0ee      	beq.n	8003bfc <_dtoa_r+0xa7c>
 8003c1e:	3301      	adds	r3, #1
 8003c20:	e7c9      	b.n	8003bb6 <_dtoa_r+0xa36>
 8003c22:	9a00      	ldr	r2, [sp, #0]
 8003c24:	9908      	ldr	r1, [sp, #32]
 8003c26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003c2a:	428a      	cmp	r2, r1
 8003c2c:	d028      	beq.n	8003c80 <_dtoa_r+0xb00>
 8003c2e:	9902      	ldr	r1, [sp, #8]
 8003c30:	2300      	movs	r3, #0
 8003c32:	220a      	movs	r2, #10
 8003c34:	4648      	mov	r0, r9
 8003c36:	f000 f9d5 	bl	8003fe4 <__multadd>
 8003c3a:	42af      	cmp	r7, r5
 8003c3c:	9002      	str	r0, [sp, #8]
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	f04f 020a 	mov.w	r2, #10
 8003c46:	4639      	mov	r1, r7
 8003c48:	4648      	mov	r0, r9
 8003c4a:	d107      	bne.n	8003c5c <_dtoa_r+0xadc>
 8003c4c:	f000 f9ca 	bl	8003fe4 <__multadd>
 8003c50:	4607      	mov	r7, r0
 8003c52:	4605      	mov	r5, r0
 8003c54:	9b00      	ldr	r3, [sp, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	e777      	b.n	8003b4c <_dtoa_r+0x9cc>
 8003c5c:	f000 f9c2 	bl	8003fe4 <__multadd>
 8003c60:	4629      	mov	r1, r5
 8003c62:	4607      	mov	r7, r0
 8003c64:	2300      	movs	r3, #0
 8003c66:	220a      	movs	r2, #10
 8003c68:	4648      	mov	r0, r9
 8003c6a:	f000 f9bb 	bl	8003fe4 <__multadd>
 8003c6e:	4605      	mov	r5, r0
 8003c70:	e7f0      	b.n	8003c54 <_dtoa_r+0xad4>
 8003c72:	f1bb 0f00 	cmp.w	fp, #0
 8003c76:	bfcc      	ite	gt
 8003c78:	465e      	movgt	r6, fp
 8003c7a:	2601      	movle	r6, #1
 8003c7c:	4456      	add	r6, sl
 8003c7e:	2700      	movs	r7, #0
 8003c80:	9902      	ldr	r1, [sp, #8]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4648      	mov	r0, r9
 8003c88:	f000 fb50 	bl	800432c <__lshift>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	9002      	str	r0, [sp, #8]
 8003c90:	f000 fbb8 	bl	8004404 <__mcmp>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	dcb4      	bgt.n	8003c02 <_dtoa_r+0xa82>
 8003c98:	d102      	bne.n	8003ca0 <_dtoa_r+0xb20>
 8003c9a:	9b00      	ldr	r3, [sp, #0]
 8003c9c:	07db      	lsls	r3, r3, #31
 8003c9e:	d4b0      	bmi.n	8003c02 <_dtoa_r+0xa82>
 8003ca0:	4633      	mov	r3, r6
 8003ca2:	461e      	mov	r6, r3
 8003ca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003ca8:	2a30      	cmp	r2, #48	@ 0x30
 8003caa:	d0fa      	beq.n	8003ca2 <_dtoa_r+0xb22>
 8003cac:	e4b5      	b.n	800361a <_dtoa_r+0x49a>
 8003cae:	459a      	cmp	sl, r3
 8003cb0:	d1a8      	bne.n	8003c04 <_dtoa_r+0xa84>
 8003cb2:	2331      	movs	r3, #49	@ 0x31
 8003cb4:	f108 0801 	add.w	r8, r8, #1
 8003cb8:	f88a 3000 	strb.w	r3, [sl]
 8003cbc:	e4ad      	b.n	800361a <_dtoa_r+0x49a>
 8003cbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003cc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003d1c <_dtoa_r+0xb9c>
 8003cc4:	b11b      	cbz	r3, 8003cce <_dtoa_r+0xb4e>
 8003cc6:	f10a 0308 	add.w	r3, sl, #8
 8003cca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4650      	mov	r0, sl
 8003cd0:	b017      	add	sp, #92	@ 0x5c
 8003cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd6:	9b07      	ldr	r3, [sp, #28]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f77f ae2e 	ble.w	800393a <_dtoa_r+0x7ba>
 8003cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ce0:	9308      	str	r3, [sp, #32]
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	e64d      	b.n	8003982 <_dtoa_r+0x802>
 8003ce6:	f1bb 0f00 	cmp.w	fp, #0
 8003cea:	f77f aed9 	ble.w	8003aa0 <_dtoa_r+0x920>
 8003cee:	4656      	mov	r6, sl
 8003cf0:	9802      	ldr	r0, [sp, #8]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f7ff f9b9 	bl	800306a <quorem>
 8003cf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8003d00:	eba6 020a 	sub.w	r2, r6, sl
 8003d04:	4593      	cmp	fp, r2
 8003d06:	ddb4      	ble.n	8003c72 <_dtoa_r+0xaf2>
 8003d08:	9902      	ldr	r1, [sp, #8]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	220a      	movs	r2, #10
 8003d0e:	4648      	mov	r0, r9
 8003d10:	f000 f968 	bl	8003fe4 <__multadd>
 8003d14:	9002      	str	r0, [sp, #8]
 8003d16:	e7eb      	b.n	8003cf0 <_dtoa_r+0xb70>
 8003d18:	08004cc2 	.word	0x08004cc2
 8003d1c:	08004c46 	.word	0x08004c46

08003d20 <_free_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4605      	mov	r5, r0
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d041      	beq.n	8003dac <_free_r+0x8c>
 8003d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2c:	1f0c      	subs	r4, r1, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfb8      	it	lt
 8003d32:	18e4      	addlt	r4, r4, r3
 8003d34:	f000 f8e8 	bl	8003f08 <__malloc_lock>
 8003d38:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <_free_r+0x90>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	b933      	cbnz	r3, 8003d4c <_free_r+0x2c>
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	6014      	str	r4, [r2, #0]
 8003d42:	4628      	mov	r0, r5
 8003d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d48:	f000 b8e4 	b.w	8003f14 <__malloc_unlock>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d908      	bls.n	8003d62 <_free_r+0x42>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	1821      	adds	r1, r4, r0
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	e7ed      	b.n	8003d3e <_free_r+0x1e>
 8003d62:	461a      	mov	r2, r3
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b10b      	cbz	r3, 8003d6c <_free_r+0x4c>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d9fa      	bls.n	8003d62 <_free_r+0x42>
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	1850      	adds	r0, r2, r1
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d10b      	bne.n	8003d8c <_free_r+0x6c>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	4401      	add	r1, r0
 8003d78:	1850      	adds	r0, r2, r1
 8003d7a:	4283      	cmp	r3, r0
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	d1e0      	bne.n	8003d42 <_free_r+0x22>
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	6053      	str	r3, [r2, #4]
 8003d86:	4408      	add	r0, r1
 8003d88:	6010      	str	r0, [r2, #0]
 8003d8a:	e7da      	b.n	8003d42 <_free_r+0x22>
 8003d8c:	d902      	bls.n	8003d94 <_free_r+0x74>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	e7d6      	b.n	8003d42 <_free_r+0x22>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	1821      	adds	r1, r4, r0
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf04      	itt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	bf04      	itt	eq
 8003da4:	1809      	addeq	r1, r1, r0
 8003da6:	6021      	streq	r1, [r4, #0]
 8003da8:	6054      	str	r4, [r2, #4]
 8003daa:	e7ca      	b.n	8003d42 <_free_r+0x22>
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop
 8003db0:	20000434 	.word	0x20000434

08003db4 <malloc>:
 8003db4:	4b02      	ldr	r3, [pc, #8]	@ (8003dc0 <malloc+0xc>)
 8003db6:	4601      	mov	r1, r0
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f000 b825 	b.w	8003e08 <_malloc_r>
 8003dbe:	bf00      	nop
 8003dc0:	2000000c 	.word	0x2000000c

08003dc4 <sbrk_aligned>:
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8003e04 <sbrk_aligned+0x40>)
 8003dc8:	460c      	mov	r4, r1
 8003dca:	6831      	ldr	r1, [r6, #0]
 8003dcc:	4605      	mov	r5, r0
 8003dce:	b911      	cbnz	r1, 8003dd6 <sbrk_aligned+0x12>
 8003dd0:	f000 fde6 	bl	80049a0 <_sbrk_r>
 8003dd4:	6030      	str	r0, [r6, #0]
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 fde1 	bl	80049a0 <_sbrk_r>
 8003dde:	1c43      	adds	r3, r0, #1
 8003de0:	d103      	bne.n	8003dea <sbrk_aligned+0x26>
 8003de2:	f04f 34ff 	mov.w	r4, #4294967295
 8003de6:	4620      	mov	r0, r4
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
 8003dea:	1cc4      	adds	r4, r0, #3
 8003dec:	f024 0403 	bic.w	r4, r4, #3
 8003df0:	42a0      	cmp	r0, r4
 8003df2:	d0f8      	beq.n	8003de6 <sbrk_aligned+0x22>
 8003df4:	1a21      	subs	r1, r4, r0
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 fdd2 	bl	80049a0 <_sbrk_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d1f2      	bne.n	8003de6 <sbrk_aligned+0x22>
 8003e00:	e7ef      	b.n	8003de2 <sbrk_aligned+0x1e>
 8003e02:	bf00      	nop
 8003e04:	20000430 	.word	0x20000430

08003e08 <_malloc_r>:
 8003e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e0c:	1ccd      	adds	r5, r1, #3
 8003e0e:	f025 0503 	bic.w	r5, r5, #3
 8003e12:	3508      	adds	r5, #8
 8003e14:	2d0c      	cmp	r5, #12
 8003e16:	bf38      	it	cc
 8003e18:	250c      	movcc	r5, #12
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	db01      	blt.n	8003e24 <_malloc_r+0x1c>
 8003e20:	42a9      	cmp	r1, r5
 8003e22:	d904      	bls.n	8003e2e <_malloc_r+0x26>
 8003e24:	230c      	movs	r3, #12
 8003e26:	6033      	str	r3, [r6, #0]
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f04 <_malloc_r+0xfc>
 8003e32:	f000 f869 	bl	8003f08 <__malloc_lock>
 8003e36:	f8d8 3000 	ldr.w	r3, [r8]
 8003e3a:	461c      	mov	r4, r3
 8003e3c:	bb44      	cbnz	r4, 8003e90 <_malloc_r+0x88>
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4630      	mov	r0, r6
 8003e42:	f7ff ffbf 	bl	8003dc4 <sbrk_aligned>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	4604      	mov	r4, r0
 8003e4a:	d158      	bne.n	8003efe <_malloc_r+0xf6>
 8003e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e50:	4627      	mov	r7, r4
 8003e52:	2f00      	cmp	r7, #0
 8003e54:	d143      	bne.n	8003ede <_malloc_r+0xd6>
 8003e56:	2c00      	cmp	r4, #0
 8003e58:	d04b      	beq.n	8003ef2 <_malloc_r+0xea>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	4630      	mov	r0, r6
 8003e60:	eb04 0903 	add.w	r9, r4, r3
 8003e64:	f000 fd9c 	bl	80049a0 <_sbrk_r>
 8003e68:	4581      	cmp	r9, r0
 8003e6a:	d142      	bne.n	8003ef2 <_malloc_r+0xea>
 8003e6c:	6821      	ldr	r1, [r4, #0]
 8003e6e:	1a6d      	subs	r5, r5, r1
 8003e70:	4629      	mov	r1, r5
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7ff ffa6 	bl	8003dc4 <sbrk_aligned>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d03a      	beq.n	8003ef2 <_malloc_r+0xea>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	442b      	add	r3, r5
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	f8d8 3000 	ldr.w	r3, [r8]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	bb62      	cbnz	r2, 8003ee4 <_malloc_r+0xdc>
 8003e8a:	f8c8 7000 	str.w	r7, [r8]
 8003e8e:	e00f      	b.n	8003eb0 <_malloc_r+0xa8>
 8003e90:	6822      	ldr	r2, [r4, #0]
 8003e92:	1b52      	subs	r2, r2, r5
 8003e94:	d420      	bmi.n	8003ed8 <_malloc_r+0xd0>
 8003e96:	2a0b      	cmp	r2, #11
 8003e98:	d917      	bls.n	8003eca <_malloc_r+0xc2>
 8003e9a:	1961      	adds	r1, r4, r5
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	6025      	str	r5, [r4, #0]
 8003ea0:	bf18      	it	ne
 8003ea2:	6059      	strne	r1, [r3, #4]
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	bf08      	it	eq
 8003ea8:	f8c8 1000 	streq.w	r1, [r8]
 8003eac:	5162      	str	r2, [r4, r5]
 8003eae:	604b      	str	r3, [r1, #4]
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f000 f82f 	bl	8003f14 <__malloc_unlock>
 8003eb6:	f104 000b 	add.w	r0, r4, #11
 8003eba:	1d23      	adds	r3, r4, #4
 8003ebc:	f020 0007 	bic.w	r0, r0, #7
 8003ec0:	1ac2      	subs	r2, r0, r3
 8003ec2:	bf1c      	itt	ne
 8003ec4:	1a1b      	subne	r3, r3, r0
 8003ec6:	50a3      	strne	r3, [r4, r2]
 8003ec8:	e7af      	b.n	8003e2a <_malloc_r+0x22>
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	bf0c      	ite	eq
 8003ed0:	f8c8 2000 	streq.w	r2, [r8]
 8003ed4:	605a      	strne	r2, [r3, #4]
 8003ed6:	e7eb      	b.n	8003eb0 <_malloc_r+0xa8>
 8003ed8:	4623      	mov	r3, r4
 8003eda:	6864      	ldr	r4, [r4, #4]
 8003edc:	e7ae      	b.n	8003e3c <_malloc_r+0x34>
 8003ede:	463c      	mov	r4, r7
 8003ee0:	687f      	ldr	r7, [r7, #4]
 8003ee2:	e7b6      	b.n	8003e52 <_malloc_r+0x4a>
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	d1fb      	bne.n	8003ee4 <_malloc_r+0xdc>
 8003eec:	2300      	movs	r3, #0
 8003eee:	6053      	str	r3, [r2, #4]
 8003ef0:	e7de      	b.n	8003eb0 <_malloc_r+0xa8>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	6033      	str	r3, [r6, #0]
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f000 f80c 	bl	8003f14 <__malloc_unlock>
 8003efc:	e794      	b.n	8003e28 <_malloc_r+0x20>
 8003efe:	6005      	str	r5, [r0, #0]
 8003f00:	e7d6      	b.n	8003eb0 <_malloc_r+0xa8>
 8003f02:	bf00      	nop
 8003f04:	20000434 	.word	0x20000434

08003f08 <__malloc_lock>:
 8003f08:	4801      	ldr	r0, [pc, #4]	@ (8003f10 <__malloc_lock+0x8>)
 8003f0a:	f7ff b89e 	b.w	800304a <__retarget_lock_acquire_recursive>
 8003f0e:	bf00      	nop
 8003f10:	2000042c 	.word	0x2000042c

08003f14 <__malloc_unlock>:
 8003f14:	4801      	ldr	r0, [pc, #4]	@ (8003f1c <__malloc_unlock+0x8>)
 8003f16:	f7ff b899 	b.w	800304c <__retarget_lock_release_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	2000042c 	.word	0x2000042c

08003f20 <_Balloc>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	69c6      	ldr	r6, [r0, #28]
 8003f24:	4604      	mov	r4, r0
 8003f26:	460d      	mov	r5, r1
 8003f28:	b976      	cbnz	r6, 8003f48 <_Balloc+0x28>
 8003f2a:	2010      	movs	r0, #16
 8003f2c:	f7ff ff42 	bl	8003db4 <malloc>
 8003f30:	4602      	mov	r2, r0
 8003f32:	61e0      	str	r0, [r4, #28]
 8003f34:	b920      	cbnz	r0, 8003f40 <_Balloc+0x20>
 8003f36:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <_Balloc+0x78>)
 8003f38:	4818      	ldr	r0, [pc, #96]	@ (8003f9c <_Balloc+0x7c>)
 8003f3a:	216b      	movs	r1, #107	@ 0x6b
 8003f3c:	f000 fd40 	bl	80049c0 <__assert_func>
 8003f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f44:	6006      	str	r6, [r0, #0]
 8003f46:	60c6      	str	r6, [r0, #12]
 8003f48:	69e6      	ldr	r6, [r4, #28]
 8003f4a:	68f3      	ldr	r3, [r6, #12]
 8003f4c:	b183      	cbz	r3, 8003f70 <_Balloc+0x50>
 8003f4e:	69e3      	ldr	r3, [r4, #28]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003f56:	b9b8      	cbnz	r0, 8003f88 <_Balloc+0x68>
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8003f5e:	1d72      	adds	r2, r6, #5
 8003f60:	0092      	lsls	r2, r2, #2
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 fd4a 	bl	80049fc <_calloc_r>
 8003f68:	b160      	cbz	r0, 8003f84 <_Balloc+0x64>
 8003f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f6e:	e00e      	b.n	8003f8e <_Balloc+0x6e>
 8003f70:	2221      	movs	r2, #33	@ 0x21
 8003f72:	2104      	movs	r1, #4
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 fd41 	bl	80049fc <_calloc_r>
 8003f7a:	69e3      	ldr	r3, [r4, #28]
 8003f7c:	60f0      	str	r0, [r6, #12]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e4      	bne.n	8003f4e <_Balloc+0x2e>
 8003f84:	2000      	movs	r0, #0
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	6802      	ldr	r2, [r0, #0]
 8003f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f94:	e7f7      	b.n	8003f86 <_Balloc+0x66>
 8003f96:	bf00      	nop
 8003f98:	08004c53 	.word	0x08004c53
 8003f9c:	08004cd3 	.word	0x08004cd3

08003fa0 <_Bfree>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	69c6      	ldr	r6, [r0, #28]
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	b976      	cbnz	r6, 8003fc8 <_Bfree+0x28>
 8003faa:	2010      	movs	r0, #16
 8003fac:	f7ff ff02 	bl	8003db4 <malloc>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	61e8      	str	r0, [r5, #28]
 8003fb4:	b920      	cbnz	r0, 8003fc0 <_Bfree+0x20>
 8003fb6:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <_Bfree+0x3c>)
 8003fb8:	4809      	ldr	r0, [pc, #36]	@ (8003fe0 <_Bfree+0x40>)
 8003fba:	218f      	movs	r1, #143	@ 0x8f
 8003fbc:	f000 fd00 	bl	80049c0 <__assert_func>
 8003fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fc4:	6006      	str	r6, [r0, #0]
 8003fc6:	60c6      	str	r6, [r0, #12]
 8003fc8:	b13c      	cbz	r4, 8003fda <_Bfree+0x3a>
 8003fca:	69eb      	ldr	r3, [r5, #28]
 8003fcc:	6862      	ldr	r2, [r4, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fd4:	6021      	str	r1, [r4, #0]
 8003fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	08004c53 	.word	0x08004c53
 8003fe0:	08004cd3 	.word	0x08004cd3

08003fe4 <__multadd>:
 8003fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe8:	690d      	ldr	r5, [r1, #16]
 8003fea:	4607      	mov	r7, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	461e      	mov	r6, r3
 8003ff0:	f101 0c14 	add.w	ip, r1, #20
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8003ffa:	b299      	uxth	r1, r3
 8003ffc:	fb02 6101 	mla	r1, r2, r1, r6
 8004000:	0c1e      	lsrs	r6, r3, #16
 8004002:	0c0b      	lsrs	r3, r1, #16
 8004004:	fb02 3306 	mla	r3, r2, r6, r3
 8004008:	b289      	uxth	r1, r1
 800400a:	3001      	adds	r0, #1
 800400c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004010:	4285      	cmp	r5, r0
 8004012:	f84c 1b04 	str.w	r1, [ip], #4
 8004016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800401a:	dcec      	bgt.n	8003ff6 <__multadd+0x12>
 800401c:	b30e      	cbz	r6, 8004062 <__multadd+0x7e>
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	42ab      	cmp	r3, r5
 8004022:	dc19      	bgt.n	8004058 <__multadd+0x74>
 8004024:	6861      	ldr	r1, [r4, #4]
 8004026:	4638      	mov	r0, r7
 8004028:	3101      	adds	r1, #1
 800402a:	f7ff ff79 	bl	8003f20 <_Balloc>
 800402e:	4680      	mov	r8, r0
 8004030:	b928      	cbnz	r0, 800403e <__multadd+0x5a>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <__multadd+0x84>)
 8004036:	480d      	ldr	r0, [pc, #52]	@ (800406c <__multadd+0x88>)
 8004038:	21ba      	movs	r1, #186	@ 0xba
 800403a:	f000 fcc1 	bl	80049c0 <__assert_func>
 800403e:	6922      	ldr	r2, [r4, #16]
 8004040:	3202      	adds	r2, #2
 8004042:	f104 010c 	add.w	r1, r4, #12
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	300c      	adds	r0, #12
 800404a:	f7ff f800 	bl	800304e <memcpy>
 800404e:	4621      	mov	r1, r4
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff ffa5 	bl	8003fa0 <_Bfree>
 8004056:	4644      	mov	r4, r8
 8004058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800405c:	3501      	adds	r5, #1
 800405e:	615e      	str	r6, [r3, #20]
 8004060:	6125      	str	r5, [r4, #16]
 8004062:	4620      	mov	r0, r4
 8004064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004068:	08004cc2 	.word	0x08004cc2
 800406c:	08004cd3 	.word	0x08004cd3

08004070 <__hi0bits>:
 8004070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004074:	4603      	mov	r3, r0
 8004076:	bf36      	itet	cc
 8004078:	0403      	lslcc	r3, r0, #16
 800407a:	2000      	movcs	r0, #0
 800407c:	2010      	movcc	r0, #16
 800407e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004082:	bf3c      	itt	cc
 8004084:	021b      	lslcc	r3, r3, #8
 8004086:	3008      	addcc	r0, #8
 8004088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800408c:	bf3c      	itt	cc
 800408e:	011b      	lslcc	r3, r3, #4
 8004090:	3004      	addcc	r0, #4
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004096:	bf3c      	itt	cc
 8004098:	009b      	lslcc	r3, r3, #2
 800409a:	3002      	addcc	r0, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	db05      	blt.n	80040ac <__hi0bits+0x3c>
 80040a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80040a4:	f100 0001 	add.w	r0, r0, #1
 80040a8:	bf08      	it	eq
 80040aa:	2020      	moveq	r0, #32
 80040ac:	4770      	bx	lr

080040ae <__lo0bits>:
 80040ae:	6803      	ldr	r3, [r0, #0]
 80040b0:	4602      	mov	r2, r0
 80040b2:	f013 0007 	ands.w	r0, r3, #7
 80040b6:	d00b      	beq.n	80040d0 <__lo0bits+0x22>
 80040b8:	07d9      	lsls	r1, r3, #31
 80040ba:	d421      	bmi.n	8004100 <__lo0bits+0x52>
 80040bc:	0798      	lsls	r0, r3, #30
 80040be:	bf49      	itett	mi
 80040c0:	085b      	lsrmi	r3, r3, #1
 80040c2:	089b      	lsrpl	r3, r3, #2
 80040c4:	2001      	movmi	r0, #1
 80040c6:	6013      	strmi	r3, [r2, #0]
 80040c8:	bf5c      	itt	pl
 80040ca:	6013      	strpl	r3, [r2, #0]
 80040cc:	2002      	movpl	r0, #2
 80040ce:	4770      	bx	lr
 80040d0:	b299      	uxth	r1, r3
 80040d2:	b909      	cbnz	r1, 80040d8 <__lo0bits+0x2a>
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	2010      	movs	r0, #16
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	b909      	cbnz	r1, 80040e0 <__lo0bits+0x32>
 80040dc:	3008      	adds	r0, #8
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	0719      	lsls	r1, r3, #28
 80040e2:	bf04      	itt	eq
 80040e4:	091b      	lsreq	r3, r3, #4
 80040e6:	3004      	addeq	r0, #4
 80040e8:	0799      	lsls	r1, r3, #30
 80040ea:	bf04      	itt	eq
 80040ec:	089b      	lsreq	r3, r3, #2
 80040ee:	3002      	addeq	r0, #2
 80040f0:	07d9      	lsls	r1, r3, #31
 80040f2:	d403      	bmi.n	80040fc <__lo0bits+0x4e>
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	f100 0001 	add.w	r0, r0, #1
 80040fa:	d003      	beq.n	8004104 <__lo0bits+0x56>
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4770      	bx	lr
 8004100:	2000      	movs	r0, #0
 8004102:	4770      	bx	lr
 8004104:	2020      	movs	r0, #32
 8004106:	4770      	bx	lr

08004108 <__i2b>:
 8004108:	b510      	push	{r4, lr}
 800410a:	460c      	mov	r4, r1
 800410c:	2101      	movs	r1, #1
 800410e:	f7ff ff07 	bl	8003f20 <_Balloc>
 8004112:	4602      	mov	r2, r0
 8004114:	b928      	cbnz	r0, 8004122 <__i2b+0x1a>
 8004116:	4b05      	ldr	r3, [pc, #20]	@ (800412c <__i2b+0x24>)
 8004118:	4805      	ldr	r0, [pc, #20]	@ (8004130 <__i2b+0x28>)
 800411a:	f240 1145 	movw	r1, #325	@ 0x145
 800411e:	f000 fc4f 	bl	80049c0 <__assert_func>
 8004122:	2301      	movs	r3, #1
 8004124:	6144      	str	r4, [r0, #20]
 8004126:	6103      	str	r3, [r0, #16]
 8004128:	bd10      	pop	{r4, pc}
 800412a:	bf00      	nop
 800412c:	08004cc2 	.word	0x08004cc2
 8004130:	08004cd3 	.word	0x08004cd3

08004134 <__multiply>:
 8004134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	4617      	mov	r7, r2
 800413a:	690a      	ldr	r2, [r1, #16]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	429a      	cmp	r2, r3
 8004140:	bfa8      	it	ge
 8004142:	463b      	movge	r3, r7
 8004144:	4689      	mov	r9, r1
 8004146:	bfa4      	itt	ge
 8004148:	460f      	movge	r7, r1
 800414a:	4699      	movge	r9, r3
 800414c:	693d      	ldr	r5, [r7, #16]
 800414e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	eb05 060a 	add.w	r6, r5, sl
 800415a:	42b3      	cmp	r3, r6
 800415c:	b085      	sub	sp, #20
 800415e:	bfb8      	it	lt
 8004160:	3101      	addlt	r1, #1
 8004162:	f7ff fedd 	bl	8003f20 <_Balloc>
 8004166:	b930      	cbnz	r0, 8004176 <__multiply+0x42>
 8004168:	4602      	mov	r2, r0
 800416a:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <__multiply+0x13c>)
 800416c:	4841      	ldr	r0, [pc, #260]	@ (8004274 <__multiply+0x140>)
 800416e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004172:	f000 fc25 	bl	80049c0 <__assert_func>
 8004176:	f100 0414 	add.w	r4, r0, #20
 800417a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800417e:	4623      	mov	r3, r4
 8004180:	2200      	movs	r2, #0
 8004182:	4573      	cmp	r3, lr
 8004184:	d320      	bcc.n	80041c8 <__multiply+0x94>
 8004186:	f107 0814 	add.w	r8, r7, #20
 800418a:	f109 0114 	add.w	r1, r9, #20
 800418e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004192:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	1beb      	subs	r3, r5, r7
 800419a:	3b15      	subs	r3, #21
 800419c:	f023 0303 	bic.w	r3, r3, #3
 80041a0:	3304      	adds	r3, #4
 80041a2:	3715      	adds	r7, #21
 80041a4:	42bd      	cmp	r5, r7
 80041a6:	bf38      	it	cc
 80041a8:	2304      	movcc	r3, #4
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	9b02      	ldr	r3, [sp, #8]
 80041ae:	9103      	str	r1, [sp, #12]
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d80c      	bhi.n	80041ce <__multiply+0x9a>
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	dd03      	ble.n	80041c0 <__multiply+0x8c>
 80041b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d055      	beq.n	800426c <__multiply+0x138>
 80041c0:	6106      	str	r6, [r0, #16]
 80041c2:	b005      	add	sp, #20
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	f843 2b04 	str.w	r2, [r3], #4
 80041cc:	e7d9      	b.n	8004182 <__multiply+0x4e>
 80041ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80041d2:	f1ba 0f00 	cmp.w	sl, #0
 80041d6:	d01f      	beq.n	8004218 <__multiply+0xe4>
 80041d8:	46c4      	mov	ip, r8
 80041da:	46a1      	mov	r9, r4
 80041dc:	2700      	movs	r7, #0
 80041de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80041e2:	f8d9 3000 	ldr.w	r3, [r9]
 80041e6:	fa1f fb82 	uxth.w	fp, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80041f0:	443b      	add	r3, r7
 80041f2:	f8d9 7000 	ldr.w	r7, [r9]
 80041f6:	0c12      	lsrs	r2, r2, #16
 80041f8:	0c3f      	lsrs	r7, r7, #16
 80041fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80041fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004202:	b29b      	uxth	r3, r3
 8004204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004208:	4565      	cmp	r5, ip
 800420a:	f849 3b04 	str.w	r3, [r9], #4
 800420e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004212:	d8e4      	bhi.n	80041de <__multiply+0xaa>
 8004214:	9b01      	ldr	r3, [sp, #4]
 8004216:	50e7      	str	r7, [r4, r3]
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800421e:	3104      	adds	r1, #4
 8004220:	f1b9 0f00 	cmp.w	r9, #0
 8004224:	d020      	beq.n	8004268 <__multiply+0x134>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	4647      	mov	r7, r8
 800422a:	46a4      	mov	ip, r4
 800422c:	f04f 0a00 	mov.w	sl, #0
 8004230:	f8b7 b000 	ldrh.w	fp, [r7]
 8004234:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004238:	fb09 220b 	mla	r2, r9, fp, r2
 800423c:	4452      	add	r2, sl
 800423e:	b29b      	uxth	r3, r3
 8004240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004244:	f84c 3b04 	str.w	r3, [ip], #4
 8004248:	f857 3b04 	ldr.w	r3, [r7], #4
 800424c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004250:	f8bc 3000 	ldrh.w	r3, [ip]
 8004254:	fb09 330a 	mla	r3, r9, sl, r3
 8004258:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800425c:	42bd      	cmp	r5, r7
 800425e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004262:	d8e5      	bhi.n	8004230 <__multiply+0xfc>
 8004264:	9a01      	ldr	r2, [sp, #4]
 8004266:	50a3      	str	r3, [r4, r2]
 8004268:	3404      	adds	r4, #4
 800426a:	e79f      	b.n	80041ac <__multiply+0x78>
 800426c:	3e01      	subs	r6, #1
 800426e:	e7a1      	b.n	80041b4 <__multiply+0x80>
 8004270:	08004cc2 	.word	0x08004cc2
 8004274:	08004cd3 	.word	0x08004cd3

08004278 <__pow5mult>:
 8004278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800427c:	4615      	mov	r5, r2
 800427e:	f012 0203 	ands.w	r2, r2, #3
 8004282:	4607      	mov	r7, r0
 8004284:	460e      	mov	r6, r1
 8004286:	d007      	beq.n	8004298 <__pow5mult+0x20>
 8004288:	4c25      	ldr	r4, [pc, #148]	@ (8004320 <__pow5mult+0xa8>)
 800428a:	3a01      	subs	r2, #1
 800428c:	2300      	movs	r3, #0
 800428e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004292:	f7ff fea7 	bl	8003fe4 <__multadd>
 8004296:	4606      	mov	r6, r0
 8004298:	10ad      	asrs	r5, r5, #2
 800429a:	d03d      	beq.n	8004318 <__pow5mult+0xa0>
 800429c:	69fc      	ldr	r4, [r7, #28]
 800429e:	b97c      	cbnz	r4, 80042c0 <__pow5mult+0x48>
 80042a0:	2010      	movs	r0, #16
 80042a2:	f7ff fd87 	bl	8003db4 <malloc>
 80042a6:	4602      	mov	r2, r0
 80042a8:	61f8      	str	r0, [r7, #28]
 80042aa:	b928      	cbnz	r0, 80042b8 <__pow5mult+0x40>
 80042ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <__pow5mult+0xac>)
 80042ae:	481e      	ldr	r0, [pc, #120]	@ (8004328 <__pow5mult+0xb0>)
 80042b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80042b4:	f000 fb84 	bl	80049c0 <__assert_func>
 80042b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042bc:	6004      	str	r4, [r0, #0]
 80042be:	60c4      	str	r4, [r0, #12]
 80042c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80042c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042c8:	b94c      	cbnz	r4, 80042de <__pow5mult+0x66>
 80042ca:	f240 2171 	movw	r1, #625	@ 0x271
 80042ce:	4638      	mov	r0, r7
 80042d0:	f7ff ff1a 	bl	8004108 <__i2b>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80042da:	4604      	mov	r4, r0
 80042dc:	6003      	str	r3, [r0, #0]
 80042de:	f04f 0900 	mov.w	r9, #0
 80042e2:	07eb      	lsls	r3, r5, #31
 80042e4:	d50a      	bpl.n	80042fc <__pow5mult+0x84>
 80042e6:	4631      	mov	r1, r6
 80042e8:	4622      	mov	r2, r4
 80042ea:	4638      	mov	r0, r7
 80042ec:	f7ff ff22 	bl	8004134 <__multiply>
 80042f0:	4631      	mov	r1, r6
 80042f2:	4680      	mov	r8, r0
 80042f4:	4638      	mov	r0, r7
 80042f6:	f7ff fe53 	bl	8003fa0 <_Bfree>
 80042fa:	4646      	mov	r6, r8
 80042fc:	106d      	asrs	r5, r5, #1
 80042fe:	d00b      	beq.n	8004318 <__pow5mult+0xa0>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	b938      	cbnz	r0, 8004314 <__pow5mult+0x9c>
 8004304:	4622      	mov	r2, r4
 8004306:	4621      	mov	r1, r4
 8004308:	4638      	mov	r0, r7
 800430a:	f7ff ff13 	bl	8004134 <__multiply>
 800430e:	6020      	str	r0, [r4, #0]
 8004310:	f8c0 9000 	str.w	r9, [r0]
 8004314:	4604      	mov	r4, r0
 8004316:	e7e4      	b.n	80042e2 <__pow5mult+0x6a>
 8004318:	4630      	mov	r0, r6
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431e:	bf00      	nop
 8004320:	08004d84 	.word	0x08004d84
 8004324:	08004c53 	.word	0x08004c53
 8004328:	08004cd3 	.word	0x08004cd3

0800432c <__lshift>:
 800432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	460c      	mov	r4, r1
 8004332:	6849      	ldr	r1, [r1, #4]
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	4607      	mov	r7, r0
 800433e:	4691      	mov	r9, r2
 8004340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004344:	f108 0601 	add.w	r6, r8, #1
 8004348:	42b3      	cmp	r3, r6
 800434a:	db0b      	blt.n	8004364 <__lshift+0x38>
 800434c:	4638      	mov	r0, r7
 800434e:	f7ff fde7 	bl	8003f20 <_Balloc>
 8004352:	4605      	mov	r5, r0
 8004354:	b948      	cbnz	r0, 800436a <__lshift+0x3e>
 8004356:	4602      	mov	r2, r0
 8004358:	4b28      	ldr	r3, [pc, #160]	@ (80043fc <__lshift+0xd0>)
 800435a:	4829      	ldr	r0, [pc, #164]	@ (8004400 <__lshift+0xd4>)
 800435c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004360:	f000 fb2e 	bl	80049c0 <__assert_func>
 8004364:	3101      	adds	r1, #1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	e7ee      	b.n	8004348 <__lshift+0x1c>
 800436a:	2300      	movs	r3, #0
 800436c:	f100 0114 	add.w	r1, r0, #20
 8004370:	f100 0210 	add.w	r2, r0, #16
 8004374:	4618      	mov	r0, r3
 8004376:	4553      	cmp	r3, sl
 8004378:	db33      	blt.n	80043e2 <__lshift+0xb6>
 800437a:	6920      	ldr	r0, [r4, #16]
 800437c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004380:	f104 0314 	add.w	r3, r4, #20
 8004384:	f019 091f 	ands.w	r9, r9, #31
 8004388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800438c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004390:	d02b      	beq.n	80043ea <__lshift+0xbe>
 8004392:	f1c9 0e20 	rsb	lr, r9, #32
 8004396:	468a      	mov	sl, r1
 8004398:	2200      	movs	r2, #0
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	fa00 f009 	lsl.w	r0, r0, r9
 80043a0:	4310      	orrs	r0, r2
 80043a2:	f84a 0b04 	str.w	r0, [sl], #4
 80043a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80043aa:	459c      	cmp	ip, r3
 80043ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80043b0:	d8f3      	bhi.n	800439a <__lshift+0x6e>
 80043b2:	ebac 0304 	sub.w	r3, ip, r4
 80043b6:	3b15      	subs	r3, #21
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	3304      	adds	r3, #4
 80043be:	f104 0015 	add.w	r0, r4, #21
 80043c2:	4560      	cmp	r0, ip
 80043c4:	bf88      	it	hi
 80043c6:	2304      	movhi	r3, #4
 80043c8:	50ca      	str	r2, [r1, r3]
 80043ca:	b10a      	cbz	r2, 80043d0 <__lshift+0xa4>
 80043cc:	f108 0602 	add.w	r6, r8, #2
 80043d0:	3e01      	subs	r6, #1
 80043d2:	4638      	mov	r0, r7
 80043d4:	612e      	str	r6, [r5, #16]
 80043d6:	4621      	mov	r1, r4
 80043d8:	f7ff fde2 	bl	8003fa0 <_Bfree>
 80043dc:	4628      	mov	r0, r5
 80043de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80043e6:	3301      	adds	r3, #1
 80043e8:	e7c5      	b.n	8004376 <__lshift+0x4a>
 80043ea:	3904      	subs	r1, #4
 80043ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80043f4:	459c      	cmp	ip, r3
 80043f6:	d8f9      	bhi.n	80043ec <__lshift+0xc0>
 80043f8:	e7ea      	b.n	80043d0 <__lshift+0xa4>
 80043fa:	bf00      	nop
 80043fc:	08004cc2 	.word	0x08004cc2
 8004400:	08004cd3 	.word	0x08004cd3

08004404 <__mcmp>:
 8004404:	690a      	ldr	r2, [r1, #16]
 8004406:	4603      	mov	r3, r0
 8004408:	6900      	ldr	r0, [r0, #16]
 800440a:	1a80      	subs	r0, r0, r2
 800440c:	b530      	push	{r4, r5, lr}
 800440e:	d10e      	bne.n	800442e <__mcmp+0x2a>
 8004410:	3314      	adds	r3, #20
 8004412:	3114      	adds	r1, #20
 8004414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800441c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004424:	4295      	cmp	r5, r2
 8004426:	d003      	beq.n	8004430 <__mcmp+0x2c>
 8004428:	d205      	bcs.n	8004436 <__mcmp+0x32>
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	bd30      	pop	{r4, r5, pc}
 8004430:	42a3      	cmp	r3, r4
 8004432:	d3f3      	bcc.n	800441c <__mcmp+0x18>
 8004434:	e7fb      	b.n	800442e <__mcmp+0x2a>
 8004436:	2001      	movs	r0, #1
 8004438:	e7f9      	b.n	800442e <__mcmp+0x2a>
	...

0800443c <__mdiff>:
 800443c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	4689      	mov	r9, r1
 8004442:	4606      	mov	r6, r0
 8004444:	4611      	mov	r1, r2
 8004446:	4648      	mov	r0, r9
 8004448:	4614      	mov	r4, r2
 800444a:	f7ff ffdb 	bl	8004404 <__mcmp>
 800444e:	1e05      	subs	r5, r0, #0
 8004450:	d112      	bne.n	8004478 <__mdiff+0x3c>
 8004452:	4629      	mov	r1, r5
 8004454:	4630      	mov	r0, r6
 8004456:	f7ff fd63 	bl	8003f20 <_Balloc>
 800445a:	4602      	mov	r2, r0
 800445c:	b928      	cbnz	r0, 800446a <__mdiff+0x2e>
 800445e:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <__mdiff+0x120>)
 8004460:	f240 2137 	movw	r1, #567	@ 0x237
 8004464:	483e      	ldr	r0, [pc, #248]	@ (8004560 <__mdiff+0x124>)
 8004466:	f000 faab 	bl	80049c0 <__assert_func>
 800446a:	2301      	movs	r3, #1
 800446c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004470:	4610      	mov	r0, r2
 8004472:	b003      	add	sp, #12
 8004474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004478:	bfbc      	itt	lt
 800447a:	464b      	movlt	r3, r9
 800447c:	46a1      	movlt	r9, r4
 800447e:	4630      	mov	r0, r6
 8004480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004484:	bfba      	itte	lt
 8004486:	461c      	movlt	r4, r3
 8004488:	2501      	movlt	r5, #1
 800448a:	2500      	movge	r5, #0
 800448c:	f7ff fd48 	bl	8003f20 <_Balloc>
 8004490:	4602      	mov	r2, r0
 8004492:	b918      	cbnz	r0, 800449c <__mdiff+0x60>
 8004494:	4b31      	ldr	r3, [pc, #196]	@ (800455c <__mdiff+0x120>)
 8004496:	f240 2145 	movw	r1, #581	@ 0x245
 800449a:	e7e3      	b.n	8004464 <__mdiff+0x28>
 800449c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80044a0:	6926      	ldr	r6, [r4, #16]
 80044a2:	60c5      	str	r5, [r0, #12]
 80044a4:	f109 0310 	add.w	r3, r9, #16
 80044a8:	f109 0514 	add.w	r5, r9, #20
 80044ac:	f104 0e14 	add.w	lr, r4, #20
 80044b0:	f100 0b14 	add.w	fp, r0, #20
 80044b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80044b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	46d9      	mov	r9, fp
 80044c0:	f04f 0c00 	mov.w	ip, #0
 80044c4:	9b01      	ldr	r3, [sp, #4]
 80044c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80044ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	fa1f f38a 	uxth.w	r3, sl
 80044d4:	4619      	mov	r1, r3
 80044d6:	b283      	uxth	r3, r0
 80044d8:	1acb      	subs	r3, r1, r3
 80044da:	0c00      	lsrs	r0, r0, #16
 80044dc:	4463      	add	r3, ip
 80044de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80044e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80044ec:	4576      	cmp	r6, lr
 80044ee:	f849 3b04 	str.w	r3, [r9], #4
 80044f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044f6:	d8e5      	bhi.n	80044c4 <__mdiff+0x88>
 80044f8:	1b33      	subs	r3, r6, r4
 80044fa:	3b15      	subs	r3, #21
 80044fc:	f023 0303 	bic.w	r3, r3, #3
 8004500:	3415      	adds	r4, #21
 8004502:	3304      	adds	r3, #4
 8004504:	42a6      	cmp	r6, r4
 8004506:	bf38      	it	cc
 8004508:	2304      	movcc	r3, #4
 800450a:	441d      	add	r5, r3
 800450c:	445b      	add	r3, fp
 800450e:	461e      	mov	r6, r3
 8004510:	462c      	mov	r4, r5
 8004512:	4544      	cmp	r4, r8
 8004514:	d30e      	bcc.n	8004534 <__mdiff+0xf8>
 8004516:	f108 0103 	add.w	r1, r8, #3
 800451a:	1b49      	subs	r1, r1, r5
 800451c:	f021 0103 	bic.w	r1, r1, #3
 8004520:	3d03      	subs	r5, #3
 8004522:	45a8      	cmp	r8, r5
 8004524:	bf38      	it	cc
 8004526:	2100      	movcc	r1, #0
 8004528:	440b      	add	r3, r1
 800452a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800452e:	b191      	cbz	r1, 8004556 <__mdiff+0x11a>
 8004530:	6117      	str	r7, [r2, #16]
 8004532:	e79d      	b.n	8004470 <__mdiff+0x34>
 8004534:	f854 1b04 	ldr.w	r1, [r4], #4
 8004538:	46e6      	mov	lr, ip
 800453a:	0c08      	lsrs	r0, r1, #16
 800453c:	fa1c fc81 	uxtah	ip, ip, r1
 8004540:	4471      	add	r1, lr
 8004542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004546:	b289      	uxth	r1, r1
 8004548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800454c:	f846 1b04 	str.w	r1, [r6], #4
 8004550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004554:	e7dd      	b.n	8004512 <__mdiff+0xd6>
 8004556:	3f01      	subs	r7, #1
 8004558:	e7e7      	b.n	800452a <__mdiff+0xee>
 800455a:	bf00      	nop
 800455c:	08004cc2 	.word	0x08004cc2
 8004560:	08004cd3 	.word	0x08004cd3

08004564 <__d2b>:
 8004564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004568:	460f      	mov	r7, r1
 800456a:	2101      	movs	r1, #1
 800456c:	ec59 8b10 	vmov	r8, r9, d0
 8004570:	4616      	mov	r6, r2
 8004572:	f7ff fcd5 	bl	8003f20 <_Balloc>
 8004576:	4604      	mov	r4, r0
 8004578:	b930      	cbnz	r0, 8004588 <__d2b+0x24>
 800457a:	4602      	mov	r2, r0
 800457c:	4b23      	ldr	r3, [pc, #140]	@ (800460c <__d2b+0xa8>)
 800457e:	4824      	ldr	r0, [pc, #144]	@ (8004610 <__d2b+0xac>)
 8004580:	f240 310f 	movw	r1, #783	@ 0x30f
 8004584:	f000 fa1c 	bl	80049c0 <__assert_func>
 8004588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800458c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004590:	b10d      	cbz	r5, 8004596 <__d2b+0x32>
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	f1b8 0300 	subs.w	r3, r8, #0
 800459c:	d023      	beq.n	80045e6 <__d2b+0x82>
 800459e:	4668      	mov	r0, sp
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	f7ff fd84 	bl	80040ae <__lo0bits>
 80045a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80045aa:	b1d0      	cbz	r0, 80045e2 <__d2b+0x7e>
 80045ac:	f1c0 0320 	rsb	r3, r0, #32
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	430b      	orrs	r3, r1
 80045b6:	40c2      	lsrs	r2, r0
 80045b8:	6163      	str	r3, [r4, #20]
 80045ba:	9201      	str	r2, [sp, #4]
 80045bc:	9b01      	ldr	r3, [sp, #4]
 80045be:	61a3      	str	r3, [r4, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2201      	moveq	r2, #1
 80045c6:	2202      	movne	r2, #2
 80045c8:	6122      	str	r2, [r4, #16]
 80045ca:	b1a5      	cbz	r5, 80045f6 <__d2b+0x92>
 80045cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80045d0:	4405      	add	r5, r0
 80045d2:	603d      	str	r5, [r7, #0]
 80045d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80045d8:	6030      	str	r0, [r6, #0]
 80045da:	4620      	mov	r0, r4
 80045dc:	b003      	add	sp, #12
 80045de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045e2:	6161      	str	r1, [r4, #20]
 80045e4:	e7ea      	b.n	80045bc <__d2b+0x58>
 80045e6:	a801      	add	r0, sp, #4
 80045e8:	f7ff fd61 	bl	80040ae <__lo0bits>
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	6163      	str	r3, [r4, #20]
 80045f0:	3020      	adds	r0, #32
 80045f2:	2201      	movs	r2, #1
 80045f4:	e7e8      	b.n	80045c8 <__d2b+0x64>
 80045f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80045fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80045fe:	6038      	str	r0, [r7, #0]
 8004600:	6918      	ldr	r0, [r3, #16]
 8004602:	f7ff fd35 	bl	8004070 <__hi0bits>
 8004606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800460a:	e7e5      	b.n	80045d8 <__d2b+0x74>
 800460c:	08004cc2 	.word	0x08004cc2
 8004610:	08004cd3 	.word	0x08004cd3

08004614 <__sfputc_r>:
 8004614:	6893      	ldr	r3, [r2, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	b410      	push	{r4}
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	da08      	bge.n	8004632 <__sfputc_r+0x1e>
 8004620:	6994      	ldr	r4, [r2, #24]
 8004622:	42a3      	cmp	r3, r4
 8004624:	db01      	blt.n	800462a <__sfputc_r+0x16>
 8004626:	290a      	cmp	r1, #10
 8004628:	d103      	bne.n	8004632 <__sfputc_r+0x1e>
 800462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462e:	f7fe bc0c 	b.w	8002e4a <__swbuf_r>
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	1c58      	adds	r0, r3, #1
 8004636:	6010      	str	r0, [r2, #0]
 8004638:	7019      	strb	r1, [r3, #0]
 800463a:	4608      	mov	r0, r1
 800463c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004640:	4770      	bx	lr

08004642 <__sfputs_r>:
 8004642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
 8004648:	4614      	mov	r4, r2
 800464a:	18d5      	adds	r5, r2, r3
 800464c:	42ac      	cmp	r4, r5
 800464e:	d101      	bne.n	8004654 <__sfputs_r+0x12>
 8004650:	2000      	movs	r0, #0
 8004652:	e007      	b.n	8004664 <__sfputs_r+0x22>
 8004654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004658:	463a      	mov	r2, r7
 800465a:	4630      	mov	r0, r6
 800465c:	f7ff ffda 	bl	8004614 <__sfputc_r>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d1f3      	bne.n	800464c <__sfputs_r+0xa>
 8004664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004668 <_vfiprintf_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	460d      	mov	r5, r1
 800466e:	b09d      	sub	sp, #116	@ 0x74
 8004670:	4614      	mov	r4, r2
 8004672:	4698      	mov	r8, r3
 8004674:	4606      	mov	r6, r0
 8004676:	b118      	cbz	r0, 8004680 <_vfiprintf_r+0x18>
 8004678:	6a03      	ldr	r3, [r0, #32]
 800467a:	b90b      	cbnz	r3, 8004680 <_vfiprintf_r+0x18>
 800467c:	f7fe fa9e 	bl	8002bbc <__sinit>
 8004680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004682:	07d9      	lsls	r1, r3, #31
 8004684:	d405      	bmi.n	8004692 <_vfiprintf_r+0x2a>
 8004686:	89ab      	ldrh	r3, [r5, #12]
 8004688:	059a      	lsls	r2, r3, #22
 800468a:	d402      	bmi.n	8004692 <_vfiprintf_r+0x2a>
 800468c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800468e:	f7fe fcdc 	bl	800304a <__retarget_lock_acquire_recursive>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	071b      	lsls	r3, r3, #28
 8004696:	d501      	bpl.n	800469c <_vfiprintf_r+0x34>
 8004698:	692b      	ldr	r3, [r5, #16]
 800469a:	b99b      	cbnz	r3, 80046c4 <_vfiprintf_r+0x5c>
 800469c:	4629      	mov	r1, r5
 800469e:	4630      	mov	r0, r6
 80046a0:	f7fe fc12 	bl	8002ec8 <__swsetup_r>
 80046a4:	b170      	cbz	r0, 80046c4 <_vfiprintf_r+0x5c>
 80046a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046a8:	07dc      	lsls	r4, r3, #31
 80046aa:	d504      	bpl.n	80046b6 <_vfiprintf_r+0x4e>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	b01d      	add	sp, #116	@ 0x74
 80046b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b6:	89ab      	ldrh	r3, [r5, #12]
 80046b8:	0598      	lsls	r0, r3, #22
 80046ba:	d4f7      	bmi.n	80046ac <_vfiprintf_r+0x44>
 80046bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046be:	f7fe fcc5 	bl	800304c <__retarget_lock_release_recursive>
 80046c2:	e7f3      	b.n	80046ac <_vfiprintf_r+0x44>
 80046c4:	2300      	movs	r3, #0
 80046c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046c8:	2320      	movs	r3, #32
 80046ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d2:	2330      	movs	r3, #48	@ 0x30
 80046d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004884 <_vfiprintf_r+0x21c>
 80046d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046dc:	f04f 0901 	mov.w	r9, #1
 80046e0:	4623      	mov	r3, r4
 80046e2:	469a      	mov	sl, r3
 80046e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e8:	b10a      	cbz	r2, 80046ee <_vfiprintf_r+0x86>
 80046ea:	2a25      	cmp	r2, #37	@ 0x25
 80046ec:	d1f9      	bne.n	80046e2 <_vfiprintf_r+0x7a>
 80046ee:	ebba 0b04 	subs.w	fp, sl, r4
 80046f2:	d00b      	beq.n	800470c <_vfiprintf_r+0xa4>
 80046f4:	465b      	mov	r3, fp
 80046f6:	4622      	mov	r2, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	4630      	mov	r0, r6
 80046fc:	f7ff ffa1 	bl	8004642 <__sfputs_r>
 8004700:	3001      	adds	r0, #1
 8004702:	f000 80a7 	beq.w	8004854 <_vfiprintf_r+0x1ec>
 8004706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004708:	445a      	add	r2, fp
 800470a:	9209      	str	r2, [sp, #36]	@ 0x24
 800470c:	f89a 3000 	ldrb.w	r3, [sl]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 809f 	beq.w	8004854 <_vfiprintf_r+0x1ec>
 8004716:	2300      	movs	r3, #0
 8004718:	f04f 32ff 	mov.w	r2, #4294967295
 800471c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004720:	f10a 0a01 	add.w	sl, sl, #1
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	9307      	str	r3, [sp, #28]
 8004728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800472c:	931a      	str	r3, [sp, #104]	@ 0x68
 800472e:	4654      	mov	r4, sl
 8004730:	2205      	movs	r2, #5
 8004732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004736:	4853      	ldr	r0, [pc, #332]	@ (8004884 <_vfiprintf_r+0x21c>)
 8004738:	f7fb fd4a 	bl	80001d0 <memchr>
 800473c:	9a04      	ldr	r2, [sp, #16]
 800473e:	b9d8      	cbnz	r0, 8004778 <_vfiprintf_r+0x110>
 8004740:	06d1      	lsls	r1, r2, #27
 8004742:	bf44      	itt	mi
 8004744:	2320      	movmi	r3, #32
 8004746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800474a:	0713      	lsls	r3, r2, #28
 800474c:	bf44      	itt	mi
 800474e:	232b      	movmi	r3, #43	@ 0x2b
 8004750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004754:	f89a 3000 	ldrb.w	r3, [sl]
 8004758:	2b2a      	cmp	r3, #42	@ 0x2a
 800475a:	d015      	beq.n	8004788 <_vfiprintf_r+0x120>
 800475c:	9a07      	ldr	r2, [sp, #28]
 800475e:	4654      	mov	r4, sl
 8004760:	2000      	movs	r0, #0
 8004762:	f04f 0c0a 	mov.w	ip, #10
 8004766:	4621      	mov	r1, r4
 8004768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800476c:	3b30      	subs	r3, #48	@ 0x30
 800476e:	2b09      	cmp	r3, #9
 8004770:	d94b      	bls.n	800480a <_vfiprintf_r+0x1a2>
 8004772:	b1b0      	cbz	r0, 80047a2 <_vfiprintf_r+0x13a>
 8004774:	9207      	str	r2, [sp, #28]
 8004776:	e014      	b.n	80047a2 <_vfiprintf_r+0x13a>
 8004778:	eba0 0308 	sub.w	r3, r0, r8
 800477c:	fa09 f303 	lsl.w	r3, r9, r3
 8004780:	4313      	orrs	r3, r2
 8004782:	9304      	str	r3, [sp, #16]
 8004784:	46a2      	mov	sl, r4
 8004786:	e7d2      	b.n	800472e <_vfiprintf_r+0xc6>
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	1d19      	adds	r1, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	9103      	str	r1, [sp, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	bfbb      	ittet	lt
 8004794:	425b      	neglt	r3, r3
 8004796:	f042 0202 	orrlt.w	r2, r2, #2
 800479a:	9307      	strge	r3, [sp, #28]
 800479c:	9307      	strlt	r3, [sp, #28]
 800479e:	bfb8      	it	lt
 80047a0:	9204      	strlt	r2, [sp, #16]
 80047a2:	7823      	ldrb	r3, [r4, #0]
 80047a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80047a6:	d10a      	bne.n	80047be <_vfiprintf_r+0x156>
 80047a8:	7863      	ldrb	r3, [r4, #1]
 80047aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ac:	d132      	bne.n	8004814 <_vfiprintf_r+0x1ac>
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	9203      	str	r2, [sp, #12]
 80047b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047ba:	3402      	adds	r4, #2
 80047bc:	9305      	str	r3, [sp, #20]
 80047be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004894 <_vfiprintf_r+0x22c>
 80047c2:	7821      	ldrb	r1, [r4, #0]
 80047c4:	2203      	movs	r2, #3
 80047c6:	4650      	mov	r0, sl
 80047c8:	f7fb fd02 	bl	80001d0 <memchr>
 80047cc:	b138      	cbz	r0, 80047de <_vfiprintf_r+0x176>
 80047ce:	9b04      	ldr	r3, [sp, #16]
 80047d0:	eba0 000a 	sub.w	r0, r0, sl
 80047d4:	2240      	movs	r2, #64	@ 0x40
 80047d6:	4082      	lsls	r2, r0
 80047d8:	4313      	orrs	r3, r2
 80047da:	3401      	adds	r4, #1
 80047dc:	9304      	str	r3, [sp, #16]
 80047de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e2:	4829      	ldr	r0, [pc, #164]	@ (8004888 <_vfiprintf_r+0x220>)
 80047e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047e8:	2206      	movs	r2, #6
 80047ea:	f7fb fcf1 	bl	80001d0 <memchr>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d03f      	beq.n	8004872 <_vfiprintf_r+0x20a>
 80047f2:	4b26      	ldr	r3, [pc, #152]	@ (800488c <_vfiprintf_r+0x224>)
 80047f4:	bb1b      	cbnz	r3, 800483e <_vfiprintf_r+0x1d6>
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	3307      	adds	r3, #7
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	3308      	adds	r3, #8
 8004800:	9303      	str	r3, [sp, #12]
 8004802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004804:	443b      	add	r3, r7
 8004806:	9309      	str	r3, [sp, #36]	@ 0x24
 8004808:	e76a      	b.n	80046e0 <_vfiprintf_r+0x78>
 800480a:	fb0c 3202 	mla	r2, ip, r2, r3
 800480e:	460c      	mov	r4, r1
 8004810:	2001      	movs	r0, #1
 8004812:	e7a8      	b.n	8004766 <_vfiprintf_r+0xfe>
 8004814:	2300      	movs	r3, #0
 8004816:	3401      	adds	r4, #1
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	4619      	mov	r1, r3
 800481c:	f04f 0c0a 	mov.w	ip, #10
 8004820:	4620      	mov	r0, r4
 8004822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004826:	3a30      	subs	r2, #48	@ 0x30
 8004828:	2a09      	cmp	r2, #9
 800482a:	d903      	bls.n	8004834 <_vfiprintf_r+0x1cc>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0c6      	beq.n	80047be <_vfiprintf_r+0x156>
 8004830:	9105      	str	r1, [sp, #20]
 8004832:	e7c4      	b.n	80047be <_vfiprintf_r+0x156>
 8004834:	fb0c 2101 	mla	r1, ip, r1, r2
 8004838:	4604      	mov	r4, r0
 800483a:	2301      	movs	r3, #1
 800483c:	e7f0      	b.n	8004820 <_vfiprintf_r+0x1b8>
 800483e:	ab03      	add	r3, sp, #12
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	462a      	mov	r2, r5
 8004844:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <_vfiprintf_r+0x228>)
 8004846:	a904      	add	r1, sp, #16
 8004848:	4630      	mov	r0, r6
 800484a:	f7fd fcc9 	bl	80021e0 <_printf_float>
 800484e:	4607      	mov	r7, r0
 8004850:	1c78      	adds	r0, r7, #1
 8004852:	d1d6      	bne.n	8004802 <_vfiprintf_r+0x19a>
 8004854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004856:	07d9      	lsls	r1, r3, #31
 8004858:	d405      	bmi.n	8004866 <_vfiprintf_r+0x1fe>
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	059a      	lsls	r2, r3, #22
 800485e:	d402      	bmi.n	8004866 <_vfiprintf_r+0x1fe>
 8004860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004862:	f7fe fbf3 	bl	800304c <__retarget_lock_release_recursive>
 8004866:	89ab      	ldrh	r3, [r5, #12]
 8004868:	065b      	lsls	r3, r3, #25
 800486a:	f53f af1f 	bmi.w	80046ac <_vfiprintf_r+0x44>
 800486e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004870:	e71e      	b.n	80046b0 <_vfiprintf_r+0x48>
 8004872:	ab03      	add	r3, sp, #12
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	462a      	mov	r2, r5
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <_vfiprintf_r+0x228>)
 800487a:	a904      	add	r1, sp, #16
 800487c:	4630      	mov	r0, r6
 800487e:	f7fd ff47 	bl	8002710 <_printf_i>
 8004882:	e7e4      	b.n	800484e <_vfiprintf_r+0x1e6>
 8004884:	08004d2c 	.word	0x08004d2c
 8004888:	08004d36 	.word	0x08004d36
 800488c:	080021e1 	.word	0x080021e1
 8004890:	08004643 	.word	0x08004643
 8004894:	08004d32 	.word	0x08004d32

08004898 <__swhatbuf_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	460c      	mov	r4, r1
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2900      	cmp	r1, #0
 80048a2:	b096      	sub	sp, #88	@ 0x58
 80048a4:	4615      	mov	r5, r2
 80048a6:	461e      	mov	r6, r3
 80048a8:	da0d      	bge.n	80048c6 <__swhatbuf_r+0x2e>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2340      	movne	r3, #64	@ 0x40
 80048b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048bc:	2000      	movs	r0, #0
 80048be:	6031      	str	r1, [r6, #0]
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	b016      	add	sp, #88	@ 0x58
 80048c4:	bd70      	pop	{r4, r5, r6, pc}
 80048c6:	466a      	mov	r2, sp
 80048c8:	f000 f848 	bl	800495c <_fstat_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	dbec      	blt.n	80048aa <__swhatbuf_r+0x12>
 80048d0:	9901      	ldr	r1, [sp, #4]
 80048d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048da:	4259      	negs	r1, r3
 80048dc:	4159      	adcs	r1, r3
 80048de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048e2:	e7eb      	b.n	80048bc <__swhatbuf_r+0x24>

080048e4 <__smakebuf_r>:
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e8:	079d      	lsls	r5, r3, #30
 80048ea:	4606      	mov	r6, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	d507      	bpl.n	8004900 <__smakebuf_r+0x1c>
 80048f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	2301      	movs	r3, #1
 80048fa:	6163      	str	r3, [r4, #20]
 80048fc:	b003      	add	sp, #12
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	ab01      	add	r3, sp, #4
 8004902:	466a      	mov	r2, sp
 8004904:	f7ff ffc8 	bl	8004898 <__swhatbuf_r>
 8004908:	9f00      	ldr	r7, [sp, #0]
 800490a:	4605      	mov	r5, r0
 800490c:	4639      	mov	r1, r7
 800490e:	4630      	mov	r0, r6
 8004910:	f7ff fa7a 	bl	8003e08 <_malloc_r>
 8004914:	b948      	cbnz	r0, 800492a <__smakebuf_r+0x46>
 8004916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800491a:	059a      	lsls	r2, r3, #22
 800491c:	d4ee      	bmi.n	80048fc <__smakebuf_r+0x18>
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	e7e2      	b.n	80048f0 <__smakebuf_r+0xc>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	6020      	str	r0, [r4, #0]
 800492e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	9b01      	ldr	r3, [sp, #4]
 8004936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800493a:	b15b      	cbz	r3, 8004954 <__smakebuf_r+0x70>
 800493c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004940:	4630      	mov	r0, r6
 8004942:	f000 f81d 	bl	8004980 <_isatty_r>
 8004946:	b128      	cbz	r0, 8004954 <__smakebuf_r+0x70>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	431d      	orrs	r5, r3
 8004958:	81a5      	strh	r5, [r4, #12]
 800495a:	e7cf      	b.n	80048fc <__smakebuf_r+0x18>

0800495c <_fstat_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d07      	ldr	r5, [pc, #28]	@ (800497c <_fstat_r+0x20>)
 8004960:	2300      	movs	r3, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	f7fd fa61 	bl	8001e30 <_fstat>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	d102      	bne.n	8004978 <_fstat_r+0x1c>
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	b103      	cbz	r3, 8004978 <_fstat_r+0x1c>
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	bd38      	pop	{r3, r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	20000428 	.word	0x20000428

08004980 <_isatty_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	@ (800499c <_isatty_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fd fa60 	bl	8001e50 <_isatty>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_isatty_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_isatty_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000428 	.word	0x20000428

080049a0 <_sbrk_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	@ (80049bc <_sbrk_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f000 f8b8 	bl	8004b20 <_sbrk>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_sbrk_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_sbrk_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000428 	.word	0x20000428

080049c0 <__assert_func>:
 80049c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049c2:	4614      	mov	r4, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <__assert_func+0x2c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4605      	mov	r5, r0
 80049cc:	68d8      	ldr	r0, [r3, #12]
 80049ce:	b14c      	cbz	r4, 80049e4 <__assert_func+0x24>
 80049d0:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <__assert_func+0x30>)
 80049d2:	9100      	str	r1, [sp, #0]
 80049d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049d8:	4906      	ldr	r1, [pc, #24]	@ (80049f4 <__assert_func+0x34>)
 80049da:	462b      	mov	r3, r5
 80049dc:	f000 f842 	bl	8004a64 <fiprintf>
 80049e0:	f000 f852 	bl	8004a88 <abort>
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <__assert_func+0x38>)
 80049e6:	461c      	mov	r4, r3
 80049e8:	e7f3      	b.n	80049d2 <__assert_func+0x12>
 80049ea:	bf00      	nop
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	08004d47 	.word	0x08004d47
 80049f4:	08004d54 	.word	0x08004d54
 80049f8:	08004d82 	.word	0x08004d82

080049fc <_calloc_r>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	fba1 5402 	umull	r5, r4, r1, r2
 8004a02:	b934      	cbnz	r4, 8004a12 <_calloc_r+0x16>
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7ff f9ff 	bl	8003e08 <_malloc_r>
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	b928      	cbnz	r0, 8004a1a <_calloc_r+0x1e>
 8004a0e:	4630      	mov	r0, r6
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
 8004a12:	220c      	movs	r2, #12
 8004a14:	6002      	str	r2, [r0, #0]
 8004a16:	2600      	movs	r6, #0
 8004a18:	e7f9      	b.n	8004a0e <_calloc_r+0x12>
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	f7fe faa9 	bl	8002f74 <memset>
 8004a22:	e7f4      	b.n	8004a0e <_calloc_r+0x12>

08004a24 <__ascii_mbtowc>:
 8004a24:	b082      	sub	sp, #8
 8004a26:	b901      	cbnz	r1, 8004a2a <__ascii_mbtowc+0x6>
 8004a28:	a901      	add	r1, sp, #4
 8004a2a:	b142      	cbz	r2, 8004a3e <__ascii_mbtowc+0x1a>
 8004a2c:	b14b      	cbz	r3, 8004a42 <__ascii_mbtowc+0x1e>
 8004a2e:	7813      	ldrb	r3, [r2, #0]
 8004a30:	600b      	str	r3, [r1, #0]
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	1e10      	subs	r0, r2, #0
 8004a36:	bf18      	it	ne
 8004a38:	2001      	movne	r0, #1
 8004a3a:	b002      	add	sp, #8
 8004a3c:	4770      	bx	lr
 8004a3e:	4610      	mov	r0, r2
 8004a40:	e7fb      	b.n	8004a3a <__ascii_mbtowc+0x16>
 8004a42:	f06f 0001 	mvn.w	r0, #1
 8004a46:	e7f8      	b.n	8004a3a <__ascii_mbtowc+0x16>

08004a48 <__ascii_wctomb>:
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	b141      	cbz	r1, 8004a60 <__ascii_wctomb+0x18>
 8004a4e:	2aff      	cmp	r2, #255	@ 0xff
 8004a50:	d904      	bls.n	8004a5c <__ascii_wctomb+0x14>
 8004a52:	228a      	movs	r2, #138	@ 0x8a
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	4770      	bx	lr
 8004a5c:	700a      	strb	r2, [r1, #0]
 8004a5e:	2001      	movs	r0, #1
 8004a60:	4770      	bx	lr
	...

08004a64 <fiprintf>:
 8004a64:	b40e      	push	{r1, r2, r3}
 8004a66:	b503      	push	{r0, r1, lr}
 8004a68:	4601      	mov	r1, r0
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	4805      	ldr	r0, [pc, #20]	@ (8004a84 <fiprintf+0x20>)
 8004a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a72:	6800      	ldr	r0, [r0, #0]
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	f7ff fdf7 	bl	8004668 <_vfiprintf_r>
 8004a7a:	b002      	add	sp, #8
 8004a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a80:	b003      	add	sp, #12
 8004a82:	4770      	bx	lr
 8004a84:	2000000c 	.word	0x2000000c

08004a88 <abort>:
 8004a88:	b508      	push	{r3, lr}
 8004a8a:	2006      	movs	r0, #6
 8004a8c:	f000 f82c 	bl	8004ae8 <raise>
 8004a90:	2001      	movs	r0, #1
 8004a92:	f7fd f999 	bl	8001dc8 <_exit>

08004a96 <_raise_r>:
 8004a96:	291f      	cmp	r1, #31
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	d904      	bls.n	8004aaa <_raise_r+0x14>
 8004aa0:	2316      	movs	r3, #22
 8004aa2:	6003      	str	r3, [r0, #0]
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004aac:	b112      	cbz	r2, 8004ab4 <_raise_r+0x1e>
 8004aae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ab2:	b94b      	cbnz	r3, 8004ac8 <_raise_r+0x32>
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f831 	bl	8004b1c <_getpid_r>
 8004aba:	4622      	mov	r2, r4
 8004abc:	4601      	mov	r1, r0
 8004abe:	4628      	mov	r0, r5
 8004ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac4:	f000 b818 	b.w	8004af8 <_kill_r>
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d00a      	beq.n	8004ae2 <_raise_r+0x4c>
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	d103      	bne.n	8004ad8 <_raise_r+0x42>
 8004ad0:	2316      	movs	r3, #22
 8004ad2:	6003      	str	r3, [r0, #0]
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	e7e7      	b.n	8004aa8 <_raise_r+0x12>
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4798      	blx	r3
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e7e0      	b.n	8004aa8 <_raise_r+0x12>
	...

08004ae8 <raise>:
 8004ae8:	4b02      	ldr	r3, [pc, #8]	@ (8004af4 <raise+0xc>)
 8004aea:	4601      	mov	r1, r0
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f7ff bfd2 	b.w	8004a96 <_raise_r>
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c

08004af8 <_kill_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d07      	ldr	r5, [pc, #28]	@ (8004b18 <_kill_r+0x20>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	f7fd f94f 	bl	8001da8 <_kill>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	d102      	bne.n	8004b14 <_kill_r+0x1c>
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	b103      	cbz	r3, 8004b14 <_kill_r+0x1c>
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	20000428 	.word	0x20000428

08004b1c <_getpid_r>:
 8004b1c:	f7fd b93c 	b.w	8001d98 <_getpid>

08004b20 <_sbrk>:
 8004b20:	4a04      	ldr	r2, [pc, #16]	@ (8004b34 <_sbrk+0x14>)
 8004b22:	6811      	ldr	r1, [r2, #0]
 8004b24:	4603      	mov	r3, r0
 8004b26:	b909      	cbnz	r1, 8004b2c <_sbrk+0xc>
 8004b28:	4903      	ldr	r1, [pc, #12]	@ (8004b38 <_sbrk+0x18>)
 8004b2a:	6011      	str	r1, [r2, #0]
 8004b2c:	6810      	ldr	r0, [r2, #0]
 8004b2e:	4403      	add	r3, r0
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	4770      	bx	lr
 8004b34:	20000438 	.word	0x20000438
 8004b38:	20000440 	.word	0x20000440

08004b3c <_init>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr

08004b48 <_fini>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr
